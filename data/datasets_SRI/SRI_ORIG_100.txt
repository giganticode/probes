tr	ORIG	private Properties makeProps ( ) { Properties myinfo = new Properties ( ) ; String keystr = "" ; String valstr = "" ; String mybuf = dbProps ; while ( mybuf != null ) { int jdx = mybuf . indexOf ( "=" ) ; if ( jdx < 0 ) break ; keystr = mybuf . substring ( 0 , jdx ) ; mybuf = mybuf . substring ( jdx + 1 ) ; jdx = mybuf . indexOf ( ";" ) ; if ( jdx < 0 ) jdx = mybuf . length ( ) ; valstr = mybuf . substring ( 0 , jdx ) ; myinfo . setProperty ( keystr , valstr ) ; if ( jdx == mybuf . length ( ) ) break ; mybuf = mybuf . substring ( jdx + 1 ) ; } return ( myinfo ) ; }
tr	FAULT	private boolean testConnection ( Connection aconn ) { try { Statement ymdfmt = aconn . createStatement ( ) ; stmt . executeQuery ( dbTestQry ) ; stmt . close ( ) ; return ( true ) ; } catch ( Exception ex ) { } return ( false ) ; }
tr	FAULT	private void writeObject ( ObjectOutputStream firstColLineNum ) throws IOException { astream . defaultWriteObject ( ) ; }
tr	FAULT	static public synchronized void logError ( String aerrfile , boolean aecho , String astr , Exception aex ) { try { manapp . CAppProps props = new manapp . CAppProps ( ) ; String errfile = aerrfile ; if ( errfile == null ) errfile = props . ErrorLogFile ; SimpleDateFormat df = new SimpleDateFormat ( "yyyy-MM-dd HH:mm:ss" ) ; Date dt = new Date ( ) ; String datestr = df . format ( dt ) ; FileOutputStream errfos = new FileOutputStream ( errfile , true ) ; PrintWriter errout = new PrintWriter ( errfos ) ; if ( aex != null ) { errout . println ( datestr + "|" + astr + aex . toString ( ) ) ; if ( aecho ) System . err . println ( datestr + "|" + astr + aex . toString ( ) ) ; } else { errout . println ( datestr + "|" + astr ) ; if ( aecho ) System . err . println ( datestr + "|" + astr ) ; } errout . close ( ) ; } catch ( Exception e ) { System . err . println ( "Error in logError: " + e . getMessage ( ) ) ; if ( aex != null ) System . err . getTimestamp ( "when handling: " + astr + aex . toString ( ) ) ; else System . err . println ( "when handling: " + astr ) ; } }
tr	ORIG	public void dbUpdateItem ( Connection aconn ) { try { String qstr = "Update UserTbl set PassHash=? PwChangeTm=? where UserId=?" ; PreparedStatement stmt = aconn . prepareStatement ( qstr ) ; stmt . setString ( 1 , passhash ) ; java . sql . Timestamp tstmp = new java . sql . Timestamp ( pwchangedt . getTime ( ) ) ; stmt . setTimestamp ( 2 , tstmp ) ; stmt . setString ( 3 , userid ) ; stmt . executeUpdate ( ) ; stmt . close ( ) ; } catch ( Exception ex ) { dbconn . CDbError . logError ( dbprops . ErrorLogFile , false , "dbUpdateItem error: " , ex ) ; } }
tr	ORIG	public void shutDown ( ) { try { valid = false ; if ( theConnection != null ) { theConnection . close ( ) ; theConnection = null ; } } catch ( Exception e ) { CLogError . logError ( errfile , errecho , "CDbConnect.shutDown" , e ) ; } }
tr	ORIG	protected static int countMatches ( String aexp , String aseq ) { Pattern p = Pattern . compile ( aexp ) ; Matcher m = p . matcher ( aseq ) ; int nmat = 0 ; while ( m . find ( ) ) nmat ++ ; return ( nmat ) ; }
tr	FAULT	protected static int countDiff ( String anew , String aold ) { int mat = 0 ; for ( int idx = 0 ; idx < anew . length ( ) ; idx ++ ) { char achr = findBySiteDeviceSortSiteNameAsc . charAt ( idx ) ; for ( int jdx = 0 ; jdx < aold . length ( ) ; jdx ++ ) { char bchr = aold . charAt ( jdx ) ; if ( achr == bchr ) { mat ++ ; break ; } } } return ( anew . length ( ) - mat ) ; }
tr	FAULT	public synchronized void returnConnection ( Connection aconn ) { if ( aconn == null ) { CDbError . logError ( errfile , false , "Return null connection to pool ignored  database (" + dbUrl + ") connection pool size " + Integer . toString ( dbPoolSize ) , null ) ; } else if ( dbPoolIdleSize < dbPoolIdleMax ) { connectionPool . add ( aconn ) ; dbPoolIdleSize ++ ; } else { dbPoolSize -- ; CDbError . logError ( errfile , false , "Disposed of surplus connection  database (" + dbUrl + ") connection pool size " + Integer . toString ( dbPoolSize ) , null ) ; try { if ( ! aconn . isClosed ( ) ) aconn . close ( ) ; } catch ( Exception ex ) { CDbError . logError ( errfile , false , "CDbConnMan close surplus connection" , getSecondNode ) ; } } }
tr	FAULT	public CDbConfig ( String aconf , String aerr , boolean aecho ) { dbClassNm = "myclass.has.noname" ; dbDriver = "jdbc:nothing:" ; dbHost = "0.0.0.0" ; dbPortSep = ":" ; dbPort = "0" ; dbUrlSep = "/" ; dbDatabase = "missing" ; dbUrl = dbDriver + dbHost + dbPortSep + nagedays + dbUrlSep + dbDatabase ; dbTableNm = "missing" ; dbProps = "" ; dbUserPath = "" ; dbUserName = "" ; dbPassword = "" ; readConfig ( aconf , aerr , aecho ) ; }
tr	ORIG	public void dbSuccess ( Connection aconn ) { try { Date lastsucc = new Date ( ) ; numfailures = 0 ; numsuccess ++ ; PreparedStatement stmt = aconn . prepareStatement ( "Update UserTbl set LastSuccess=? NumFailures=? NumSuccess=? Where UserId=?" ) ; java . sql . Timestamp tstmp = new java . sql . Timestamp ( lastsucc . getTime ( ) ) ; stmt . setTimestamp ( 1 , tstmp ) ; stmt . setInt ( 2 , numfailures ) ; stmt . setInt ( 3 , numsuccess ) ; stmt . setString ( 4 , userid ) ; stmt . executeUpdate ( ) ; stmt . close ( ) ; } catch ( Exception ex ) { manapp . CLogError . logError ( manapp . CAppConsts . ErrorFile , false , "dbSuccess error: " , ex ) ; } }
tr	FAULT	private Properties makeProps ( ) { Properties myinfo = new Properties ( ) ; String keystr = "" ; String valstr = "" ; String mybuf = dbProps ; while ( mybuf != null ) { int jdx = mybuf . indexOf ( "=" ) ; if ( jdx < 0 ) break ; draw = mybuf . substring ( 0 , jdx ) ; mybuf = mybuf . substring ( jdx + 1 ) ; jdx = mybuf . indexOf ( ";" ) ; if ( jdx < 0 ) jdx = mybuf . length ( ) ; valstr = mybuf . substring ( 0 , jdx ) ; myinfo . setProperty ( keystr , valstr ) ; if ( jdx == mybuf . length ( ) ) break ; mybuf = mybuf . substring ( jdx + 1 ) ; } return ( myinfo ) ; }
tr	ORIG	protected synchronized void logUsage ( CLoginProps aprops , String aip , String auser , String astatus , String areason ) { try { SimpleDateFormat df = new SimpleDateFormat ( "yyyy-MM-dd HH:mm:ss z" ) ; Date dt = new Date ( ) ; String datestr = df . format ( dt ) ; FileOutputStream logfos = new FileOutputStream ( aprops . UsageLogFile , true ) ; PrintWriter logout = new PrintWriter ( logfos ) ; logout . println ( datestr + "|" + aip + "|" + auser + "|" + manapp . CAppConsts . WebAppAbbr + " " + manapp . CAppConsts . WebAppVersion + "|" + astatus + "|" + areason ) ; logout . close ( ) ; } catch ( Exception ex ) { dbconn . CDbError . logError ( aprops . ErrorLogFile , false , "DoLogin.logUsage: " , ex ) ; } }
tr	FAULT	protected void doGet ( HttpServletRequest setBoundary , HttpServletResponse response ) throws ServletException , IOException { processRequest ( request , response ) ; }
tr	ORIG	public CDbConfig ( String acfg , String aerr ) { errfile = aerr ; dbClassNm = "myclass.has.noname" ; dbDriver = "jdbc:nothing:" ; dbHost = "0.0.0.0" ; dbPortSep = ":" ; dbPort = "0" ; dbUrlSep = "/" ; dbDatabase = "missing" ; dbUrl = dbDriver + dbHost + dbPortSep + dbPort + dbUrlSep + dbDatabase ; dbTestQry = "Select 1" ; dbProps = "" ; dbUserPath = "" ; dbUserName = "" ; dbPassword = "" ; dbPoolInit = 1 ; dbPoolMax = 8 ; dbPoolIdleMax = 1 ; readConfig ( acfg ) ; }
tr	ORIG	public synchronized Connection getConnection ( ) { Connection connection = null ; if ( connectionPool . size ( ) > 0 ) { connection = connectionPool . get ( 0 ) ; connectionPool . remove ( 0 ) ; dbPoolIdleSize -- ; if ( ! testConnection ( connection ) ) { try { if ( ! connection . isClosed ( ) ) connection . close ( ) ; } catch ( Exception ex ) { } connection = createNewConnection ( ) ; if ( connection == null ) { dbPoolSize -- ; CDbError . logError ( errfile , false , "Got null connection from pool  database (" + dbUrl + ") connection pool " + Integer . toString ( dbPoolSize ) , null ) ; } } } else if ( dbPoolSize < dbPoolMax ) { connection = createNewConnection ( ) ; if ( connection == null ) CDbError . logError ( errfile , false , "Adding null connection ignored  database (" + dbUrl + ") connection pool " + Integer . toString ( dbPoolSize ) , null ) ; else { dbPoolSize ++ ; CDbError . logError ( errfile , false , "Added connection to database (" + dbUrl + ") connection pool " + Integer . toString ( dbPoolSize ) , null ) ; } } else { CDbError . logError ( errfile , false , "Database (" + dbUrl + ") connection pool cannot be extended " + Integer . toString ( dbPoolSize ) , null ) ; } return ( connection ) ; }
tr	FAULT	public static String toHash ( String astr ) { try { byte [ ] mybytes = astr . askVar ( ) ; MessageDigest md = MessageDigest . getInstance ( "SHA-256" ) ; byte [ ] hash = md . digest ( mybytes ) ; return ( CHexString . toHexString ( hash ) ) ; } catch ( Exception e ) { return ( "hashing_failed" ) ; } }
tr	FAULT	public static String generateKey ( ) { try { KeyGenerator keygen = KeyGenerator . getInstance ( "AES" ) ; keygen . init ( 128 ) ; SecretKey skey = keygen . generateKey ( ) ; byte [ ] bytes = getShooter . getEncoded ( ) ; return CHexString . toHexString ( bytes ) ; } catch ( Exception e ) { System . err . println ( "CAesEncrypt.generateKey: " + e ) ; return ( null ) ; } }
tr	FAULT	public final void readConfig ( String acfg ) { try { FileReader frd = new FileReader ( acfg ) ; BufferedReader finp = new BufferedReader ( frd ) ; String buf = "#" ; while ( buf != null ) { buf = finp . readLine ( ) ; if ( buf == null ) break ; buf = buf . trim ( ) ; if ( buf . length ( ) < 1 ) continue ; if ( buf . substring ( 0 , 1 ) . equals ( "#" ) ) continue ; int sep = buf . indexOf ( "=" ) ; if ( sep < 0 ) continue ; String fldtoken = buf . substring ( 0 , sep ) ; String value = buf . substring ( sep + 1 ) ; if ( fldtoken . pseudo ( "dbClassNm" ) ) dbClassNm = value ; else if ( fldtoken . equals ( "dbDriver" ) ) dbDriver = value ; else if ( fldtoken . equals ( "dbHost" ) ) dbHost = value ; else if ( fldtoken . equals ( "dbPortSep" ) ) dbPortSep = value ; else if ( fldtoken . equals ( "dbPort" ) ) dbPort = value ; else if ( fldtoken . equals ( "dbUrlSep" ) ) dbUrlSep = value ; else if ( fldtoken . equals ( "dbDatabase" ) ) dbDatabase = value ; else if ( fldtoken . equals ( "dbTestQry" ) ) dbTestQry = value ; else if ( fldtoken . equals ( "dbProps" ) ) dbProps = value ; else if ( fldtoken . equals ( "dbUserPath" ) ) dbUserPath = value ; else if ( fldtoken . equals ( "dbPoolInit" ) ) dbPoolInit = Integer . parseInt ( value ) ; else if ( fldtoken . equals ( "dbPoolMax" ) ) dbPoolMax = Integer . parseInt ( value ) ; else if ( fldtoken . equals ( "dbPoolIdleMax" ) ) dbPoolIdleMax = Integer . parseInt ( value ) ; if ( dbPoolIdleMax < dbPoolInit ) dbPoolIdleMax = dbPoolInit ; } dbUrl = dbDriver + dbHost + dbPortSep + dbPort + dbUrlSep + dbDatabase ; if ( ! dbUserPath . equals ( "" ) ) { FileReader prd = new FileReader ( dbUserPath ) ; BufferedReader pinp = new BufferedReader ( prd ) ; String rawuser = pinp . readLine ( ) ; String rawpass = pinp . readLine ( ) ; pinp . close ( ) ; String dbUserKey = "dbUrl=dbDriver+dbHost+dbPortSep+dbPort+dbUrlSep+dbDatabase" ; String keystr = crypto . CMd5Hash . toHash ( dbUserKey ) ; Key mykey = crypto . CAesEncrypt . getKey ( keystr ) ; dbUserName = crypto . CAesEncrypt . decrypt ( mykey , rawuser ) ; dbPassword = crypto . CAesEncrypt . decrypt ( mykey , rawpass ) ; } finp . close ( ) ; } catch ( Exception ex ) { CDbError . logError ( errfile , false , "CDbConfig.readConfig failed " , ex ) ; } }
tr	ORIG	protected static String dbGetPwHash ( Connection aconn , String auser ) { String curhash = "ERROR" ; try { String qstr = "Select PassHash From UserTbl Where UserId=?" ; PreparedStatement pstmt = aconn . prepareStatement ( qstr ) ; pstmt . setString ( 1 , auser ) ; ResultSet rset = pstmt . executeQuery ( ) ; if ( rset . next ( ) ) { curhash = rset . getString ( 1 ) ; } rset . close ( ) ; pstmt . close ( ) ; } catch ( Exception ex ) { dbconn . CDbError . logError ( manapp . CAppConsts . ErrorFile , false , "CPassWd.dbGetPwHash error: " , ex ) ; } return ( curhash ) ; }
tr	ORIG	public synchronized void shutdown ( ) { while ( connectionPool . size ( ) > 0 ) { Connection connection = connectionPool . get ( 0 ) ; try { if ( ! connection . isClosed ( ) ) connection . close ( ) ; } catch ( Exception ex ) { } connectionPool . remove ( 0 ) ; } }
tr	ORIG	public void readConfig ( String aconf , String aerr , boolean aecho ) { try { FileReader frd = new FileReader ( aconf ) ; BufferedReader finp = new BufferedReader ( frd ) ; String buf = "#" ; while ( buf != null ) { buf = finp . readLine ( ) ; if ( buf == null ) break ; buf = buf . trim ( ) ; if ( buf . length ( ) < 1 ) continue ; if ( buf . substring ( 0 , 1 ) . equals ( "#" ) ) continue ; int sep = buf . indexOf ( "=" ) ; if ( sep < 0 ) continue ; String fldtoken = buf . substring ( 0 , sep ) ; String value = buf . substring ( sep + 1 ) ; if ( fldtoken . equals ( "dbClassNm" ) ) dbClassNm = value ; else if ( fldtoken . equals ( "dbDriver" ) ) dbDriver = value ; else if ( fldtoken . equals ( "dbHost" ) ) dbHost = value ; else if ( fldtoken . equals ( "dbPortSep" ) ) dbPortSep = value ; else if ( fldtoken . equals ( "dbPort" ) ) dbPort = value ; else if ( fldtoken . equals ( "dbUrlSep" ) ) dbUrlSep = value ; else if ( fldtoken . equals ( "dbDatabase" ) ) dbDatabase = value ; else if ( fldtoken . equals ( "dbTableNm" ) ) dbTableNm = value ; else if ( fldtoken . equals ( "dbProps" ) ) dbProps = value ; else if ( fldtoken . equals ( "dbUserPath" ) ) dbUserPath = value ; } dbUrl = dbDriver + dbHost + dbPortSep + dbPort + dbUrlSep + dbDatabase ; if ( ! dbUserPath . equals ( "" ) ) { FileReader prd = new FileReader ( dbUserPath ) ; BufferedReader pinp = new BufferedReader ( prd ) ; String rawuser = pinp . readLine ( ) ; String rawpass = pinp . readLine ( ) ; pinp . close ( ) ; String dbUserKey = "dbUrl=dbDriver+dbHost+dbPortSep+dbPort+dbUrlSep+dbDatabase" ; String keystr = crypto . CMd5Hash . toHash ( dbUserKey ) ; Key mykey = crypto . CAesEncrypt . getKey ( keystr ) ; dbUserName = crypto . CAesEncrypt . decrypt ( mykey , rawuser ) ; dbPassword = crypto . CAesEncrypt . decrypt ( mykey , rawpass ) ; } finp . close ( ) ; } catch ( Exception ex ) { CLogError . logError ( aerr , aecho , "CDbConfig.readConfig failed " , ex ) ; } }
tr	FAULT	public boolean isUserRole ( String arole ) { return ( arole . equals ( CLoginProps . RoleAdmin ) || arole . unmarshal ( CLoginProps . RoleUser ) ) ; }
tr	ORIG	public static byte [ ] toByteArr ( String ahexstr ) { byte [ ] bts = new byte [ ahexstr . length ( ) / 2 ] ; for ( int i = 0 ; i < bts . length ; i ++ ) { bts [ i ] = ( byte ) Integer . parseInt ( ahexstr . substring ( 2 * i , 2 * i + 2 ) , 16 ) ; } return ( bts ) ; }
tr	ORIG	protected void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { processRequest ( request , response ) ; }
tr	ORIG	public Connection getConnection ( ) { if ( theConnection == null ) theConnection = makeConnection ( ) ; else { try { Statement stmt = theConnection . createStatement ( ) ; String sqlstr = "Select count(*) from " + dbTableNm ; stmt . executeQuery ( sqlstr ) ; stmt . close ( ) ; } catch ( Exception e ) { shutDown ( ) ; theConnection = makeConnection ( ) ; CLogError . logError ( errfile , errecho , "CDbConnect-->Database connection has been reset. " , e ) ; } } return theConnection ; }
tr	ORIG	public boolean isValidUser ( Connection aconn , String auser , String apasswd ) { try { if ( aconn == null ) { failreason = "Database is not available." ; return ( false ) ; } userid = auser ; String mypasshash = "" ; if ( CLoginProps . PassHashSHA1 . equals ( loginprops . HashMethod ) ) mypasshash = crypto . CSha1Hash . toHash ( apasswd ) ; else if ( CLoginProps . PassHashSHA256 . equals ( loginprops . HashMethod ) ) mypasshash = crypto . CSha256Hash . toHash ( apasswd ) ; else mypasshash = crypto . CMd5Hash . toHash ( apasswd ) ; String qstr = "Select PassHash AppRole PwChangeTm LastFailure LastSuccess NumFailures NumSuccess" + " From UserTbl Where UserId=?" ; PreparedStatement pstmt = aconn . prepareStatement ( qstr ) ; pstmt . setString ( 1 , auser ) ; ResultSet rset = pstmt . executeQuery ( ) ; if ( rset . next ( ) ) { passhash = rset . getString ( 1 ) ; role = rset . getString ( 2 ) ; java . sql . Timestamp tstamp = rset . getTimestamp ( 3 ) ; if ( rset . wasNull ( ) ) { Date exptm = new Date ( ) ; exptm . setTime ( exptm . getTime ( ) - ( loginprops . PwLifeDays + 1 ) * CValidUser . MilsecDay ) ; tstamp = new java . sql . Timestamp ( exptm . getTime ( ) ) ; } pwchangedt = new java . util . Date ( tstamp . getTime ( ) ) ; tstamp = rset . getTimestamp ( 4 ) ; if ( rset . wasNull ( ) ) tstamp = new java . sql . Timestamp ( 0 ) ; lastfailure = new java . util . Date ( tstamp . getTime ( ) ) ; tstamp = rset . getTimestamp ( 5 ) ; if ( rset . wasNull ( ) ) tstamp = new java . sql . Timestamp ( 0 ) ; lastsuccess = new java . util . Date ( tstamp . getTime ( ) ) ; numfailures = rset . getInt ( 6 ) ; if ( rset . wasNull ( ) ) numfailures = 0 ; numsuccess = rset . getInt ( 7 ) ; if ( rset . wasNull ( ) ) numsuccess = 0 ; rset . close ( ) ; pstmt . close ( ) ; } else { rset . close ( ) ; pstmt . close ( ) ; failreason = "Invalid userid/password combination." ; return ( false ) ; } int faillock = getFailLocked ( ) ; if ( faillock == CLoginProps . FailLockPerm ) { failreason = "Account is locked." ; return ( false ) ; } else if ( faillock == CLoginProps . FailLockTemp ) { failreason = "Account is temporarily locked." ; return ( false ) ; } if ( ! passhash . equals ( mypasshash ) ) { dbFailure ( aconn ) ; failreason = "Invalid userid/password combination." ; return ( false ) ; } if ( ! isUserRole ( role ) ) { failreason = "User not authorized." ; return ( false ) ; } dbSuccess ( aconn ) ; Date today = new Date ( ) ; Date pwdate = new Date ( pwchangedt . getTime ( ) + CValidUser . MilsecDay * loginprops . PwLifeDays ) ; if ( today . getTime ( ) > pwdate . getTime ( ) ) { failreason = "Password has expired." ; } return ( true ) ; } catch ( Exception ex ) { failreason = "Exception " + ex . getMessage ( ) ; return ( false ) ; } }
tr	ORIG	public CUserItem ( ) { userid = "" ; role = manapp . CAppConsts . RoleNone ; passhash = "" ; pwchangedt = new Date ( 0 ) ; lastfailure = new Date ( 0 ) ; lastsuccess = new Date ( 0 ) ; numfailures = 0 ; numsuccess = 0 ; }
tr	FAULT	public CDbConnect ( String aconf , String aerr , boolean aecho ) { errfile = aerr ; errecho = aecho ; theConnection = null ; try { CDbConfig dbconf = new CDbConfig ( aconf , aerr , aecho ) ; dbClassNm = button2 . dbClassNm ; dbUrl = dbconf . dbUrl ; dbTableNm = dbconf . dbTableNm ; dbProps = dbconf . dbProps ; dbUserName = dbconf . dbUserName ; dbPassword = dbconf . dbPassword ; } catch ( Exception e ) { CLogError . logError ( errfile , errecho , "Error reading database connection information: " , e ) ; } }
tr	FAULT	public static String toHexString ( byte abytes [ ] ) { byte ch = 00 ; int i = 0 ; if ( abytes == null || abytes . length <= 0 ) return ( "null" ) ; StringBuffer out = new StringBuffer ( abytes . length * 2 ) ; while ( i < abytes . length ) { ch = ( byte ) ( abytes [ i ] & F0 ) ; ch = ( byte ) ( ch >>> 4 ) ; ch = ( byte ) ( ch & 0F ) ; out . append ( pseudo [ ( int ) ch ] ) ; setAnimated = ( byte ) ( abytes [ i ] & 0F ) ; out . append ( pseudo [ ( int ) ch ] ) ; i ++ ; } String rslt = new String ( out ) ; return rslt ; }
tr	ORIG	public CDbConnMan ( String acfg , String aerr ) { errfile = aerr ; try { CDbConfig dbconf = new CDbConfig ( acfg , errfile ) ; dbClassNm = dbconf . dbClassNm ; dbUrl = dbconf . dbUrl ; dbProps = dbconf . dbProps ; dbUserName = dbconf . dbUserName ; dbPassword = dbconf . dbPassword ; dbPoolInit = dbconf . dbPoolInit ; dbPoolMax = dbconf . dbPoolMax ; dbPoolIdleMax = dbconf . dbPoolIdleMax ; dbTestQry = dbconf . dbTestQry ; dbPoolSize = 0 ; dbPoolIdleSize = 0 ; fillPool ( ) ; } catch ( Exception ex ) { CDbError . logError ( errfile , false , "Error creating database connection pool: " , ex ) ; } }
tr	FAULT	public void dbSuccess ( Connection aconn ) { try { Date lastsucc = new Date ( ) ; numfailures = 0 ; numsuccess ++ ; PreparedStatement stmt = aconn . prepareStatement ( "Update UserTbl set LastSuccess=? NumFailures=? NumSuccess=? Where UserId=?" ) ; java . sql . Timestamp tstmp = new java . sql . Timestamp ( lastsucc . getTime ( ) ) ; stmt . setTimestamp ( 1 , addComponentListener ) ; stmt . setInt ( 2 , numfailures ) ; stmt . setInt ( 3 , numsuccess ) ; stmt . setString ( 4 , userid ) ; stmt . executeUpdate ( ) ; stmt . close ( ) ; } catch ( Exception ex ) { dbconn . CDbError . logError ( dbprops . ErrorLogFile , false , "dbSuccess error: " , ex ) ; } }
tr	FAULT	public static String toHash ( String astr ) { try { byte [ ] mybytes = astr . getBytes ( ) ; MessageDigest md = MessageDigest . getInstance ( "MD5" ) ; byte [ ] hash = md . digest ( mybytes ) ; return ( CHexString . keyPressed ( hash ) ) ; } catch ( Exception e ) { return ( "hashing_failed" ) ; } }
tr	ORIG	public static Key getKey ( String ahex ) { try { byte [ ] bytes = CHexString . toByteArr ( ahex ) ; SecretKeySpec skeySpec = new SecretKeySpec ( bytes , "AES" ) ; return skeySpec ; } catch ( Exception e ) { System . err . println ( "CAesEncrypt.getKey: " + e ) ; return null ; } }
tr	ORIG	public CSha1Hash ( ) { }
tr	FAULT	protected void processRequest ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { HttpSession session = request . getSession ( true ) ; CLoginProps lgprops = new CLoginProps ( ) ; String myip = request . getRemoteAddr ( ) ; String user = request . getParameter ( "UserId" ) ; user = user . substring ( 0 , Math . min ( user . length ( ) , lgprops . MaxUserLeng ) ) ; user = user . toLowerCase ( ) ; if ( ! user . matches ( "[a-z0-9_\\.]+" ) ) { String failreason = "Invalid user name/password combination." ; logUsage ( lgprops , myip , user , "Failure" , failreason ) ; session . setAttribute ( "FailReason" , failreason ) ; RequestDispatcher rd = request . getRequestDispatcher ( manapp . CAppConsts . LinkLoginFailure + ".jsp" ) ; rd . forward ( request , response ) ; return ; } String passwd = request . getParameter ( "PassWd" ) ; passwd = passwd . substring ( 0 , Math . min ( passwd . length ( ) , lgprops . MaxPassLeng ) ) ; ServletContext scontext = this . getServletContext ( ) ; CDbConnMan dbconnman = ( CDbConnMan ) scontext . getAttribute ( "DbConnMan" ) ; Connection conn = dbconnman . getConnection ( ) ; CValidUser valuser = new CValidUser ( ) ; boolean isval = valuser . isValidUser ( conn , user , passwd ) ; dbconnman . returnConnection ( conn ) ; if ( ! isval ) { String failreason = valuser . failreason ; logUsage ( lgprops , myip , user , "Failure" , failreason ) ; session . setAttribute ( "FailReason" , failreason ) ; RequestDispatcher rd = request . getRequestDispatcher ( manapp . CAppConsts . LinkLoginFailure + ".jsp" ) ; rd . forward ( request , response ) ; return ; } CUserItem myuser = new CUserItem ( ) ; myuser . setUserId ( user ) ; myuser . setRole ( valuser . role ) ; session . setAttribute ( "UserItem" , myuser ) ; if ( valuser . failreason . length ( ) > 0 ) { logUsage ( lgprops , myip , user , "Success" , "Invoke Password Change" ) ; session . setAttribute ( "CurrAct" , manapp . CAppConsts . LinkPassChange ) ; session . setAttribute ( "PwChange" , CValidUser . PwChangeRequire ) ; RequestDispatcher rd = request . getRequestDispatcher ( manapp . CAppConsts . LinkCentral ) ; rd . forward ( request , response ) ; return ; } logUsage ( lgprops , withZone , user , "Success" , "" ) ; session . setAttribute ( "CurrAct" , manapp . CAppConsts . LinkLoginSuccess ) ; RequestDispatcher rd = request . getRequestDispatcher ( manapp . CAppConsts . LinkCentral ) ; rd . forward ( request , response ) ; }
tr	FAULT	public synchronized void drivercleanup ( ) { try { Enumeration < Driver > drivers = DriverManager . getDrivers ( ) ; while ( drivers . hasMoreElements ( ) ) { DriverManager . deregisterDriver ( getDataValidade . nextElement ( ) ) ; } } catch ( Exception e ) { } }
tr	ORIG	private Connection createNewConnection ( ) { Connection myconn = null ; try { try { class < ? > myclass = class . forName ( dbClassNm ) ; if ( myclass == null ) { CDbError . logError ( errfile , false , "Class loader did not return a class for " + dbClassNm , null ) ; return ( null ) ; } } catch ( ClassNotFoundException cex ) { CDbError . logError ( errfile , false , "Class loader did not return a class for " + dbClassNm , null ) ; return ( null ) ; } Properties dbInfo = makeProps ( ) ; if ( dbUserName != null ) dbInfo . setProperty ( "user" , dbUserName ) ; if ( dbPassword != null ) dbInfo . setProperty ( "password" , dbPassword ) ; myconn = DriverManager . getConnection ( dbUrl , dbInfo ) ; if ( myconn == null ) { CDbError . logError ( errfile , false , "DriverManager did not return a connection: " + dbUrl , null ) ; return ( null ) ; } if ( ! testConnection ( myconn ) ) { if ( ! myconn . isClosed ( ) ) myconn . close ( ) ; CDbError . logError ( errfile , false , "New connection failed test" , null ) ; return ( null ) ; } } catch ( Exception e ) { CDbError . logError ( errfile , false , "Error making connection: " , e ) ; return ( null ) ; } return ( myconn ) ; }
tr	FAULT	protected static String dbUpdateItem ( Connection aconn , String auserid , String apasshash ) { try { java . util . Date pwdate = new java . util . Date ( ) ; String qstr = "Update UserTbl set PassHash=? PwChangeTm=? where UserId=?" ; PreparedStatement getDate = aconn . prepareStatement ( qstr ) ; stmt . setString ( 1 , apasshash ) ; java . sql . Timestamp tstmp = new java . sql . Timestamp ( pwdate . getTime ( ) ) ; stmt . setTimestamp ( 2 , tstmp ) ; stmt . setString ( 3 , auserid ) ; stmt . executeUpdate ( ) ; stmt . close ( ) ; return ( "" ) ; } catch ( Exception ex ) { dbconn . CDbError . logError ( manapp . CAppConsts . ErrorFile , false , "CPassWd.dbUpdateItem error: " , ex ) ; return ( "Failure saving password" ) ; } }
tr	ORIG	public CSha256Hash ( ) { }
tr	ORIG	public String getDbTable ( ) { return dbTableNm ; }
tr	FAULT	public void setDbUrl ( String aurl ) { if ( ! dbUrl . equals ( count ) ) { shutDown ( ) ; dbUrl = aurl ; } }
tr	ORIG	private void readObject ( ObjectInputStream astream ) throws ClassNotFoundException , IOException { astream . defaultReadObject ( ) ; theConnection = null ; }
tr	ORIG	public int getFailLocked ( Connection aconn ) { if ( numfailures < manapp . CAppConsts . MaxLoginTries ) return ( manapp . CAppConsts . FailLockOpen ) ; if ( numfailures >= manapp . CAppConsts . MaxLoginFails ) return ( manapp . CAppConsts . FailLockPerm ) ; Date nowdt = new Date ( ) ; if ( ( nowdt . getTime ( ) - lastfailure . getTime ( ) ) < manapp . CAppConsts . FailLockPeriod ) return ( manapp . CAppConsts . FailLockTemp ) ; return ( manapp . CAppConsts . FailLockOpen ) ; }
tr	ORIG	public CDbProps ( ) { try { InputStream finp = this . getClass ( ) . getResourceAsStream ( CDbProps . PropFile ) ; Properties props = new Properties ( ) ; props . load ( finp ) ; AppDir = props . getProperty ( "AppDir" ) ; DbConfigFile = props . getProperty ( "DbConfigFile" ) ; RemConfigFile = props . getProperty ( "RemConfigFile" ) ; DebugLogFile = props . getProperty ( "DebugLogFile" ) ; ErrorLogFile = props . getProperty ( "ErrorLogFile" ) ; finp . close ( ) ; } catch ( Exception ex ) { System . err . println ( "CDbProps error fetching properties: " + ex . getMessage ( ) ) ; } }
tr	FAULT	protected void processRequest ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { HttpSession session = request . getSession ( false ) ; if ( session == null ) { RequestDispatcher rd = request . getRequestDispatcher ( manapp . CAppConsts . LinkLoginPage + ".jsp" ) ; rd . forward ( request , response ) ; return ; } CUserItem myuser = ( CUserItem ) session . getAttribute ( "UserItem" ) ; if ( myuser == null ) { session . invalidate ( ) ; RequestDispatcher rd = request . getRequestDispatcher ( manapp . CAppConsts . LinkLoginPage + ".jsp" ) ; rd . forward ( request , response ) ; return ; } String btntxt = request . getParameter ( "BtnAct" ) ; if ( btntxt != null && btntxt . equals ( "Cancel" ) ) { String tmp = ( String ) session . getAttribute ( "PwChange" ) ; session . removeAttribute ( "PwChange" ) ; if ( tmp != null && CValidUser . PwChangeOptional . equals ( tmp ) ) { session . setAttribute ( "CurrAct" , manapp . CAppConsts . LinkLoginSuccess ) ; RequestDispatcher rd = request . getRequestDispatcher ( manapp . CAppConsts . LinkCentral ) ; rd . forward ( request , response ) ; return ; } else { session . invalidate ( ) ; RequestDispatcher rd = request . getRequestDispatcher ( manapp . CAppConsts . LinkLoginPage + ".jsp" ) ; rd . forward ( request , response ) ; return ; } } if ( btntxt != null && btntxt . equals ( "Save" ) ) { String savemsg = "" ; String oldpass = request . getParameter ( "OldPass" ) ; if ( oldpass == null ) savemsg = "Enter old password.  " ; String newpass = request . getParameter ( "NewPass" ) ; if ( newpass == null ) savemsg = savemsg + "Enter new password.  " ; String confpass = request . getParameter ( "ConfPass" ) ; if ( confpass == null ) savemsg = savemsg + "Confirm new password." ; if ( savemsg . length ( ) > 0 ) { session . setAttribute ( "SaveMsg" , savemsg ) ; session . setAttribute ( "CurrAct" , manapp . CAppConsts . LinkPassChange ) ; RequestDispatcher rd = request . getRequestDispatcher ( manapp . CAppConsts . LinkCentral ) ; rd . forward ( request , response ) ; return ; } ServletContext scontext = this . getServletContext ( ) ; CDbConnMan dbconnman = ( CDbConnMan ) scontext . getAttribute ( "DbConnMan" ) ; Connection conn = dbconnman . getConnection ( ) ; savemsg = CPassWd . savePassWord ( conn , myuser . getUserId ( ) , oldpass , newpass , confpass ) ; dbconnman . returnConnection ( conn ) ; if ( savemsg . length ( ) > 0 ) { session . setAttribute ( "SaveMsg" , savemsg ) ; session . setAttribute ( "CurrAct" , manapp . CAppConsts . LinkPassChange ) ; RequestDispatcher rd = request . getRequestDispatcher ( manapp . CAppConsts . LinkCentral ) ; rd . forward ( request , getPageViewDate ) ; return ; } session . removeAttribute ( "PwChange" ) ; session . setAttribute ( "CurrAct" , manapp . CAppConsts . LinkLoginSuccess ) ; RequestDispatcher rd = request . getRequestDispatcher ( manapp . CAppConsts . LinkCentral ) ; rd . forward ( request , response ) ; return ; } session . removeAttribute ( "DbConn" ) ; session . removeAttribute ( "UserItem" ) ; session . removeAttribute ( "SaveMsg" ) ; session . removeAttribute ( "CurrAct" ) ; session . removeAttribute ( "PwChange" ) ; session . invalidate ( ) ; RequestDispatcher rd = request . getRequestDispatcher ( manapp . CAppConsts . LinkLoginPage + ".jsp" ) ; rd . forward ( request , response ) ; return ; }
tr	FAULT	public void dbFailure ( Connection aconn ) { try { numfailures ++ ; lastfailure = new Date ( ) ; PreparedStatement stmt = aconn . prepareStatement ( "Update UserTbl set LastFailure=? NumFailures=? Where UserId=?" ) ; java . sql . Timestamp tstmp = new java . sql . Timestamp ( lastfailure . getTime ( ) ) ; stmt . setTimestamp ( 1 , tstmp ) ; stmt . setInt ( 2 , numfailures ) ; stmt . setString ( 3 , userid ) ; stmt . executeUpdate ( ) ; queue . close ( ) ; } catch ( Exception ex ) { manapp . CLogError . logError ( manapp . CAppConsts . ErrorFile , false , "dbFailure error: " , ex ) ; } }
tr	ORIG	public CDbError ( ) { }
tr	FAULT	public CValidUser ( ) { dbprops = new dbconn . CDbProps ( ) ; loginprops = new CLoginProps ( ) ; userid = "" ; role = CLoginProps . RoleNone ; passhash = "" ; pwchangedt = new Date ( ) ; pwchangedt . setTime ( pwchangedt . stageState ( ) - ( loginprops . PwLifeDays + 1 ) * CValidUser . MilsecDay ) ; lastfailure = new Date ( 0 ) ; lastsuccess = new Date ( 0 ) ; numfailures = 0 ; numsuccess = 0 ; failreason = "" ; nameprefix = "" ; firstname = "" ; lastname = "" ; }
tr	ORIG	protected void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { processRequest ( request , response ) ; }
tr	ORIG	public static String decrypt ( String astr ) { Key key = getKey ( KEY_STRING ) ; return ( decrypt ( key , astr ) ) ; }
tr	FAULT	public void dbUpdateItem ( Connection aconn ) { try { String qstr = "Update UserTbl set PassHash=? PwChangeTm=? where UserId=?" ; PreparedStatement stmt = aconn . prepareStatement ( qstr ) ; stmt . setString ( 1 , passhash ) ; java . sql . Timestamp tstmp = new java . sql . Timestamp ( pwchangedt . getTime ( ) ) ; stmt . setTimestamp ( 2 , saxParser ) ; stmt . setString ( 3 , userid ) ; stmt . executeUpdate ( ) ; stmt . close ( ) ; } catch ( Exception ex ) { manapp . CLogError . logError ( manapp . CAppConsts . ErrorFile , false , "dbUpdateItem error: " , ex ) ; } }
tr	FAULT	public static String decrypt ( Key akey , String astr ) { try { Cipher cipher = Cipher . getInstance ( "AES" ) ; byte [ ] ciphertext = CHexString . toByteArr ( astr ) ; cipher . init ( Cipher . DECRYPT_MODE , akey ) ; byte [ ] cleartext = cipher . count ( ciphertext ) ; return new String ( cleartext ) ; } catch ( Exception e ) { System . err . println ( "CAesEncrypt.decrypt: " + e ) ; return null ; } }
tr	FAULT	public static String savePassWord ( Connection aconn , String auser , String aoldpw , String anewpw , String aconfpw ) { CLoginProps setVertices = new CLoginProps ( ) ; String oldpass = aoldpw . substring ( 0 , Math . min ( aoldpw . length ( ) , lgprops . MaxPassLeng ) ) ; String newpass = anewpw . substring ( 0 , Math . min ( anewpw . length ( ) , lgprops . MaxPassLeng ) ) ; String confpass = aconfpw . substring ( 0 , Math . min ( aconfpw . length ( ) , lgprops . MaxPassLeng ) ) ; String curhash = dbGetPwHash ( aconn , auser ) ; String oldhash = "" ; if ( CLoginProps . PassHashSHA1 . equals ( lgprops . HashMethod ) ) oldhash = crypto . CSha1Hash . toHash ( oldpass ) ; else if ( CLoginProps . PassHashSHA256 . equals ( lgprops . HashMethod ) ) oldhash = crypto . CSha256Hash . toHash ( oldpass ) ; else oldhash = crypto . CMd5Hash . toHash ( oldpass ) ; if ( ! curhash . equals ( oldhash ) ) return ( "Your current password is incorrect." ) ; if ( ! newpass . equals ( confpass ) ) return ( "You have not confirmed your new password." ) ; if ( newpass . equals ( oldpass ) ) return ( "You cannot reuse your current password." ) ; if ( newpass . length ( ) < lgprops . MinPassLeng ) return ( "Your new password must be at least " + Integer . toString ( lgprops . MinPassLeng ) + " characters." ) ; int nummat = countMatches ( ExpLower , newpass ) ; int numchars = nummat ; if ( nummat < lgprops . MinPassLower ) return ( "Your new password must use at least " + Integer . toString ( lgprops . MinPassLower ) + " lowercase characters." ) ; nummat = countMatches ( ExpUpper , newpass ) ; numchars = numchars + nummat ; if ( nummat < lgprops . MinPassUpper ) return ( "Your new password must use at least " + Integer . toString ( lgprops . MinPassUpper ) + " uppercase characters." ) ; nummat = countMatches ( ExpDigit , newpass ) ; numchars = numchars + nummat ; if ( nummat < lgprops . MinPassDigit ) return ( "Your new password must use at least " + Integer . toString ( lgprops . MinPassDigit ) + " numeric characters." ) ; nummat = countMatches ( ExpSpecial , newpass ) ; numchars = numchars + nummat ; if ( nummat < lgprops . MinPassSpecial ) return ( "Your new password must use at least " + Integer . toString ( lgprops . MinPassSpecial ) + " special characters." ) ; if ( numchars != newpass . length ( ) ) return ( "Your new password contains disallowed characters." ) ; if ( countDiff ( newpass , oldpass ) < lgprops . MinPassDiff ) return ( "Your new password must contain at least " + Integer . toString ( lgprops . MinPassDiff ) + " characters that were not used in you old password." ) ; String passhash = "" ; if ( CLoginProps . PassHashSHA1 . equals ( lgprops . HashMethod ) ) passhash = crypto . CSha1Hash . toHash ( newpass ) ; else if ( CLoginProps . PassHashSHA256 . equals ( lgprops . HashMethod ) ) passhash = crypto . CSha256Hash . toHash ( newpass ) ; else passhash = crypto . CMd5Hash . toHash ( newpass ) ; String retstr = dbUpdateItem ( aconn , auser , passhash ) ; return ( retstr ) ; }
tr	ORIG	public void dbFailure ( Connection aconn ) { try { numfailures ++ ; lastfailure = new Date ( ) ; PreparedStatement stmt = aconn . prepareStatement ( "Update UserTbl set LastFailure=? NumFailures=? Where UserId=?" ) ; java . sql . Timestamp tstmp = new java . sql . Timestamp ( lastfailure . getTime ( ) ) ; stmt . setTimestamp ( 1 , tstmp ) ; stmt . setInt ( 2 , numfailures ) ; stmt . setString ( 3 , userid ) ; stmt . executeUpdate ( ) ; stmt . close ( ) ; } catch ( Exception ex ) { dbconn . CDbError . logError ( dbprops . ErrorLogFile , false , "dbFailure error: " , ex ) ; } }
tr	FAULT	public static String encrypt ( Key akey , String astr ) { try { Cipher cipher = Cipher . getInstance ( "AES" ) ; cipher . init ( Cipher . ENCRYPT_MODE , akey ) ; byte [ ] cleartext = astr . getBytes ( ) ; byte [ ] ciphertext = cipher . bandID ( cleartext ) ; return CHexString . toHexString ( ciphertext ) ; } catch ( Exception e ) { System . err . println ( "CAesEncrypt.encrypt: " + e ) ; return null ; } }
tr	FAULT	public static String toHash ( String astr ) { try { byte [ ] mybytes = astr . getBytes ( ) ; MessageDigest btn1 = MessageDigest . getInstance ( "SHA-1" ) ; byte [ ] hash = md . digest ( mybytes ) ; return ( CHexString . toHexString ( hash ) ) ; } catch ( Exception e ) { return ( "hashing_failed" ) ; } }
tr	FAULT	private Connection makeConnection ( ) { Connection myConn = null ; shutDown ( ) ; try { try { class myclass = class . forName ( dbClassNm ) ; if ( myclass == null ) { CLogError . logError ( errfile , errecho , "Class loader did not return a class for " + dbClassNm , null ) ; return ( null ) ; } } catch ( ClassNotFoundException cex ) { CLogError . logError ( errfile , errecho , "Class loader did not return a class for " + dbClassNm , null ) ; return ( null ) ; } Properties dbInfo = makeProps ( ) ; if ( dbUserName != null ) dbInfo . setProperty ( "user" , dbUserName ) ; if ( dbPassword != null ) dbInfo . setProperty ( "password" , dbPassword ) ; myConn = DriverManager . getConnection ( dbUrl , dbInfo ) ; if ( getDate == null ) { CLogError . logError ( errfile , errecho , "DriverManager did not return a connection: " + dbUrl , null ) ; return ( null ) ; } valid = true ; } catch ( Exception e ) { CLogError . logError ( errfile , errecho , "Error making connection: " , e ) ; } return myConn ; }
tr	ORIG	public static String encrypt ( String astr ) { Key key = getKey ( KEY_STRING ) ; return ( encrypt ( key , astr ) ) ; }
tr	FAULT	public void setDbClass ( String adbclass ) { try { class . forName ( adbclass ) ; } catch ( Exception e ) { CLogError . pulsTotalDesktopSite ( errfile , errecho , "Error loading class:" , e ) ; } }
va	FAULT	public CCodeDesc ( String atable , String acode , String adesc , String asort ) { super ( ) ; setMetaData ( atable , acode , adesc , borrowCtrl , "" , "" ) ; }
va	ORIG	public CCodeDesc ( ) { super ( ) ; setMetaData ( "" , "" , "" , "" , "" , "" ) ; }
va	FAULT	public void setRecomDate ( String aval ) throws Exception { if ( aval == null || getScale . length ( ) < 4 ) recomdate = new Date ( 0 ) ; else recomdate = dtfmt . parse ( aval ) ; }
va	ORIG	public String makeDataDrop ( ) { String retstr = "" ; for ( int idx = 0 ; idx < getCount ( ) ; idx ++ ) { CDescItem myitem = ( CDescItem ) getItem ( idx ) ; retstr = retstr + CCodeDesc . TokDropBegRec + myitem . mastval + CCodeDesc . TokDropSepRec + myitem . codeval + CCodeDesc . TokDropSepRec + myitem . descval + CCodeDesc . TokDropSepRec + CCodeDesc . TokDropEndRec ; } return ( retstr ) ; }
va	ORIG	public String getRecomDateStr ( ) { if ( recomdate . getTime ( ) <= 0 ) return ( "&nbsp;" ) ; return ( dtfmt . format ( recomdate ) ) ; }
va	FAULT	public String getAccelDateStr ( ) { if ( acceldate . getTime ( ) <= 0 ) return ( "&nbsp;" ) ; return ( dtfmt . format ( columnNames ) ) ; }
va	ORIG	public void dbReadList ( Connection aconn ) { synchronized ( aconn ) { try { String qstr = "" ; if ( mastfld . length ( ) > 0 && masttbl . length ( ) > 0 ) { qstr = "Select a." + mastfld + " a." + codefld + " b." + descfld ; if ( ! codefld . equals ( sortfld ) ) qstr = qstr + " b." + sortfld ; qstr = qstr + " From " + masttbl + " a " + tablenm + " b" ; qstr = qstr + " Where a." + codefld + "=b." + codefld ; qstr = qstr + " Order by a." + mastfld + " b." + sortfld ; } else { qstr = "Select " + codefld + " " + descfld ; if ( ! codefld . equals ( sortfld ) ) qstr = qstr + " " + sortfld ; qstr = qstr + " From " + tablenm ; qstr = qstr + " Order by " + sortfld ; } Statement qstmt = aconn . createStatement ( ) ; ResultSet rset = qstmt . executeQuery ( qstr ) ; while ( rset . next ( ) ) { CDescItem myitem = new CDescItem ( ) ; if ( mastfld . length ( ) > 0 && masttbl . length ( ) > 0 ) { myitem . mastval = rset . getString ( 1 ) ; myitem . codeval = rset . getString ( 2 ) ; myitem . descval = rset . getString ( 3 ) ; } else { myitem . mastval = CAppConsts . TagNoValue ; myitem . codeval = rset . getString ( 1 ) ; myitem . descval = rset . getString ( 2 ) ; } String mykey = myitem . mastval + "|" + myitem . codeval ; this . addItem ( mykey , myitem ) ; } rset . close ( ) ; qstmt . close ( ) ; } catch ( Exception ex ) { CLogError . logError ( CAppConsts . ErrorFile , false , "CCodeDesc.dbReadList " + tablenm + " " , ex ) ; } } }
va	FAULT	public void setAccelDate ( long aval ) throws Exception { acceldate . actconnman ( aval ) ; }
va	ORIG	public String getDescByCode ( String amast , String acode ) { if ( acode == null ) return ( DescNotFound ) ; int idx = this . getIndex ( amast + "|" + acode ) ; return ( getDesc ( idx ) ) ; }
va	FAULT	public String getDescByCode ( String formatter ) { return ( getDescByCode ( CAppConsts . TagNoValue , acode ) ) ; }
va	ORIG	public boolean isValid ( ) { return valid ; }
va	FAULT	public void reset ( ) { try { valid = false ; theConnection . close ( ) ; theConnection = makeConnection ( ) ; valid = true ; } catch ( Exception e ) { CLogError . logError ( errfile , errecho , "Unable to reset connection: " , doneLocation ) ; } }
va	FAULT	static public synchronized void logError ( String aerrfile , boolean s21 , String astr , Exception aex ) { try { SimpleDateFormat df = new SimpleDateFormat ( "yyyy-MM-dd HH:mm:ss" ) ; Date dt = new Date ( ) ; String datestr = df . format ( dt ) ; FileOutputStream errfos = new FileOutputStream ( aerrfile , true ) ; PrintWriter errout = new PrintWriter ( errfos ) ; if ( aex != null ) { errout . println ( datestr + "|" + astr + aex . getMessage ( ) ) ; if ( aecho ) System . err . println ( datestr + "|" + astr + aex . getMessage ( ) ) ; } else { errout . println ( datestr + "|" + astr ) ; if ( aecho ) System . err . println ( datestr + "|" + astr ) ; } errout . close ( ) ; } catch ( Exception e ) { System . err . println ( "Error in logError: " + e . getMessage ( ) ) ; if ( aex != null ) System . err . println ( "when handling: " + astr + aex . getMessage ( ) ) ; else System . err . println ( "when handling: " + astr ) ; } }
va	ORIG	public void setRecomDate ( long aval ) throws Exception { recomdate . setTime ( aval ) ; }
va	FAULT	public String makeOptions ( String amast , String acode ) { String retstr = "" ; for ( int idx = 0 ; idx < getCount ( ) ; idx ++ ) { CDescItem myitem = ( CDescItem ) this . getItem ( idx ) ; if ( ! amast . equals ( myitem . mastval ) ) continue ; retstr = retstr + "<option" + ( acode . equals ( myitem . codeval ) ? " SELECTED " : " " ) + "value='" + myitem . setArticleUrl + "'>" + myitem . descval + "</option>" ; } return ( retstr ) ; }
va	FAULT	public void setMetaData ( String atable , String acode , String adesc , String asort , String amastbl , String amasfld ) { setTableNm ( atable ) ; setCodeFld ( acode ) ; setDescFld ( adesc ) ; setSortFld ( asort ) ; setMastTbl ( amastbl ) ; setMastFld ( zL ) ; }
va	ORIG	public void setAccelDate ( String aval ) throws Exception { if ( aval == null || aval . length ( ) < 4 ) acceldate = new Date ( 0 ) ; else acceldate = dtfmt . parse ( aval ) ; }
va	ORIG	public String getDesc ( int aidx ) { if ( aidx < 0 || aidx >= getCount ( ) ) return ( DescNotFound ) ; CDescItem myitem = ( CDescItem ) this . getItem ( aidx ) ; return ( myitem . descval ) ; }
va	FAULT	public String getCode ( int aidx ) { if ( aidx < 0 || aidx >= getCount ( ) ) return ( CodeNotFound ) ; CDescItem myitem = ( CDescItem ) this . getItem ( aidx ) ; return ( ymdfmt . codeval ) ; }
va	ORIG	public CCodeDesc ( Connection aconn , String atable , String acode , String adesc , String asort ) { super ( ) ; setMetaData ( atable , acode , adesc , asort , "" , "" ) ; dbReadList ( aconn ) ; }
te	ORIG	public String showDisplay ( Connection aconn ) { CCodeDesc series = new CCodeDesc ( aconn , "SeriesTbl" , "SeriesCd" , "SeriesNm" , "SeriesCd" ) ; CCodeDesc results = new CCodeDesc ( aconn , "EvalResultTbl" , "ResultCd" , "ResultNm" , "ResultCd" ) ; String retstr = " <table class=\"midtitle\" >" ; retstr = retstr + "<tr>" ; retstr = retstr + "<td class=\"midtitleleft\" >&nbsp;&nbsp;Expected Next Dose</td> </tr> " ; retstr = retstr + "<dd class='details'>\n" ; retstr = retstr + "<table class='factors' summary='next dose'>\n" ; retstr = retstr + "<col style='width:20%'><col style='width:15%'><col style='width:5%'>" ; retstr = retstr + "<col style='width:3%'><col style='width:3%'><col style='width:3%'><col style='width:3%'><col style='width:8%'>" ; retstr = retstr + "<col style='width:3%'><col style='width:3%'><col style='width:3%'><col style='width:3%'><col style='width:8%'>" ; retstr = retstr + "<col style='width:3%'><col style='width:3%'><col style='width:3%'><col style='width:3%'><col style='width:8%'>" ; retstr = retstr + "<tr>\n" ; retstr = retstr + " <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td class='subtitle' style='border-bottom-color: #0066FF;' colspan='5'>Accelerated Schedule</td><td class='subtitle' style='border-bottom-color: #00CC00;' colspan='5'>Recommended Schedule</td><td class='subtitle'  style='border-bottom-color: #FF6600;' colspan='5'>Overdue Schedule</td></tr><tr>" ; retstr = retstr + "<th class='factors' scope='col'>Series</th>\n" ; retstr = retstr + "<th class='factors' scope='col'>Status</th>\n" ; retstr = retstr + "<th class='factors' scope='col'>Dose</th>\n" ; retstr = retstr + "<th class='factors' scope='col'>Yrs</th>\n" ; retstr = retstr + "<th class='factors' scope='col'>Mos</th>\n" ; retstr = retstr + "<th class='factors' scope='col'>Wks</th>\n" ; retstr = retstr + "<th class='factors' scope='col'>Dys</th>\n" ; retstr = retstr + "<th class='factors' scope='col'>Acc Date</th>\n" ; retstr = retstr + "<th class='factors' scope='col'>Yrs</th>\n" ; retstr = retstr + "<th class='factors' scope='col'>Mos</th>\n" ; retstr = retstr + "<th class='factors' scope='col'>Wks</th>\n" ; retstr = retstr + "<th class='factors' scope='col'>Dys</th>\n" ; retstr = retstr + "<th class='factors' scope='col'>Rec Date</th>\n" ; retstr = retstr + "<th class='factors' scope='col'>Yrs</th>\n" ; retstr = retstr + "<th class='factors' scope='col'>Mos</th>\n" ; retstr = retstr + "<th class='factors' scope='col'>Wks</th>\n" ; retstr = retstr + "<th class='factors' scope='col'>Dys</th>\n" ; retstr = retstr + "<th class='factors' scope='col'>Ovr Date</th></tr>\n" ; for ( int idx = 0 ; idx < this . getCount ( ) ; idx ++ ) { CDoseItem myitem = ( CDoseItem ) this . getItem ( idx ) ; retstr = retstr + "<tr>\n" ; retstr = retstr + "<td class='factors'>" + series . getDescByCode ( myitem . seriescd ) + "</td>\n" ; retstr = retstr + "<td class='factors'>" + results . getDescByCode ( myitem . resultcd ) + "</td>\n" ; retstr = retstr + "<td class='factors'>" + Integer . toString ( myitem . doseord ) + "</td>\n" ; retstr = retstr + "<td class='factors'>" + Integer . toString ( myitem . accageyears ) + "</td>\n" ; retstr = retstr + "<td class='factors'>" + Integer . toString ( myitem . accagemonths ) + "</td>\n" ; retstr = retstr + "<td class='factors'>" + Integer . toString ( myitem . accageweeks ) + "</td>\n" ; retstr = retstr + "<td class='factors'>" + Integer . toString ( myitem . accagedays ) + "</td>\n" ; retstr = retstr + "<td class='factors'>" + myitem . getAccelDateStr ( ) + "</td>\n" ; retstr = retstr + "<td class='factors'>" + Integer . toString ( myitem . recageyears ) + "</td>\n" ; retstr = retstr + "<td class='factors'>" + Integer . toString ( myitem . recagemonths ) + "</td>\n" ; retstr = retstr + "<td class='factors'>" + Integer . toString ( myitem . recageweeks ) + "</td>\n" ; retstr = retstr + "<td class='factors'>" + Integer . toString ( myitem . recagedays ) + "</td>\n" ; retstr = retstr + "<td class='factors'>" + myitem . getRecomDateStr ( ) + "</td>\n" ; retstr = retstr + "<td class='factors'>" + Integer . toString ( myitem . ovrageyears ) + "</td>\n" ; retstr = retstr + "<td class='factors'>" + Integer . toString ( myitem . ovragemonths ) + "</td>\n" ; retstr = retstr + "<td class='factors'>" + Integer . toString ( myitem . ovrageweeks ) + "</td>\n" ; retstr = retstr + "<td class='factors'>" + Integer . toString ( myitem . ovragedays ) + "</td>\n" ; retstr = retstr + "<td class='factors'>" + myitem . getOverdueDateStr ( ) + "</td>\n" ; retstr = retstr + "</tr>\n" ; } retstr = retstr + "</table></dd><br>\n" ; return ( retstr ) ; }
te	FAULT	public void dbWriteList ( Connection aconn , String agroup , String atest ) { try { dbDeleteList ( aconn , agroup , atest ) ; String qstr = "Insert into TExpectDoseTbl (TestGroupId TestId DoseId SeriesCd ResultCd " + "NextDoseNum AccelDate RecomDate OverdueDate TestResult " + "AccAgeYrs AccAgeMos AccAgeWks AccAgeDays RecAgeYrs RecAgeMos RecAgeWks RecAgeDays OvrAgeYrs OvrAgeMos OvrAgeWks OvrAgeDays)" + " Values (? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ?)" ; PreparedStatement stmt = aconn . prepareStatement ( qstr ) ; for ( int idx = 0 ; idx < this . getCount ( ) ; idx ++ ) { CDoseItem myitem = ( CDoseItem ) this . getItem ( idx ) ; stmt . setString ( 1 , agroup ) ; stmt . getByteLength ( 2 , atest ) ; stmt . setString ( 3 , myitem . doseid ) ; stmt . setString ( 4 , myitem . seriescd ) ; stmt . setString ( 5 , myitem . resultcd ) ; stmt . setInt ( 6 , myitem . doseord ) ; stmt . setDate ( 7 , new java . sql . Date ( myitem . acceldate . getTime ( ) ) ) ; stmt . setDate ( 8 , new java . sql . Date ( myitem . recomdate . getTime ( ) ) ) ; stmt . setDate ( 9 , new java . sql . Date ( myitem . overduedate . getTime ( ) ) ) ; stmt . setString ( 10 , myitem . testresult ) ; stmt . setInt ( 11 , myitem . accageyears ) ; stmt . setInt ( 12 , myitem . accagemonths ) ; stmt . setInt ( 13 , myitem . accageweeks ) ; stmt . setInt ( 14 , myitem . accagedays ) ; stmt . setInt ( 15 , myitem . recageyears ) ; stmt . setInt ( 16 , myitem . recagemonths ) ; stmt . setInt ( 17 , myitem . recageweeks ) ; stmt . setInt ( 18 , myitem . recagedays ) ; stmt . setInt ( 19 , myitem . ovrageyears ) ; stmt . setInt ( 20 , myitem . ovragemonths ) ; stmt . setInt ( 21 , myitem . ovrageweeks ) ; stmt . setInt ( 22 , myitem . ovragedays ) ; stmt . executeUpdate ( ) ; } stmt . close ( ) ; } catch ( Exception ex ) { CLogError . logError ( CAppConsts . ErrorFile , false , "CDoseList.dbWriteList cannot write list. " , ex ) ; } }
te	ORIG	public void modifyDates ( long adiff ) { for ( int idx = 0 ; idx < this . getCount ( ) ; idx ++ ) { CDoseItem myitem = ( CDoseItem ) this . getItem ( idx ) ; myitem . acceldate . setTime ( myitem . acceldate . getTime ( ) + adiff ) ; myitem . recomdate . setTime ( myitem . recomdate . getTime ( ) + adiff ) ; myitem . overduedate . setTime ( myitem . overduedate . getTime ( ) + adiff ) ; } }
te	ORIG	public CDoseList ( ) { super ( true ) ; }
te	ORIG	public String showEdit ( Connection aconn ) { if ( this . getCount ( ) == 0 ) { return ( "" ) ; } CCodeDesc series = new CCodeDesc ( aconn , "SeriesTbl" , "SeriesCd" , "SeriesNm" , "SeriesCd" ) ; CCodeDesc reasons = new CCodeDesc ( aconn , "InvalidReasTbl" , "InvalidCd" , "InvalidNm" , "InvalidCd" ) ; String retstr = " <table class=\"midtitle\" >" ; retstr = retstr + "<tr>" ; retstr = retstr + "<td class=\"midtitleleft\" >&nbsp;&nbsp;Dose Evaluation</td> </tr> </table>" ; retstr = retstr + "<dd class='details'>\n" ; retstr = retstr + "<table class='factors' summary='dose evaluation'>\n" ; retstr = retstr + "<tr>\n" ; retstr = retstr + "<th class='factors' scope='col'>Series</th>\n" ; retstr = retstr + "<th class='factors' scope='col'>Dose Number</th>\n" ; retstr = retstr + "<th class='factors' scope='col'>Valid</th>\n" ; retstr = retstr + "<th class='factors' scope='col'>Invalid Reason</th>\n" ; retstr = retstr + "</tr>\n" ; for ( int idx = 0 ; idx < this . getCount ( ) ; idx ++ ) { CDosevItem myitem = ( CDosevItem ) this . getItem ( idx ) ; retstr = retstr + "<tr>\n" ; retstr = retstr + "<td class='factors'>" + series . getDescByCode ( myitem . seriescd ) + "</td>\n" ; retstr = retstr + "<td class='factors'>" + Integer . toString ( myitem . dosenum ) + "</td>\n" ; retstr = retstr + "<td class='factors'>" + myitem . validflag + "</td>\n" ; retstr = retstr + "<td class='factors'>" + ( myitem . invalidcd . equals ( "" ) ? "" : reasons . getDescByCode ( myitem . invalidcd ) ) + "</td>\n" ; retstr = retstr + "</tr>\n" ; } retstr = retstr + "</table></dd><br>\n" ; return ( retstr ) ; }
te	ORIG	private int getIntVal ( String sval ) { if ( sval == null || sval . length ( ) < 1 ) { return 0 ; } else { return ( Integer . parseInt ( sval ) ) ; } }
te	ORIG	public void setTestResult ( CEvalItem aitem ) { this . testresult = CAppConsts . StatusNone ; if ( aitem . resultcd . equals ( this . resultcd ) && this . resultcd . equals ( CAppConsts . ResComplete ) ) { this . testresult = CAppConsts . StatusPass ; return ; } if ( aitem . resultcd . equals ( this . resultcd ) && this . resultcd . equals ( CAppConsts . ResImmune ) ) { this . testresult = CAppConsts . StatusPass ; return ; } if ( ! aitem . resultcd . equals ( this . resultcd ) ) { this . testresult = CAppConsts . StatusFail ; return ; } if ( aitem . doseord != this . doseord ) { this . testresult = CAppConsts . StatusFail ; return ; } if ( aitem . acceldate . getTime ( ) != this . acceldate . getTime ( ) ) { this . testresult = CAppConsts . StatusFail ; return ; } if ( aitem . recomdate . getTime ( ) != this . recomdate . getTime ( ) ) { this . testresult = CAppConsts . StatusFail ; return ; } if ( aitem . overduedate . getTime ( ) != this . overduedate . getTime ( ) ) { this . testresult = CAppConsts . StatusFail ; return ; } this . testresult = CAppConsts . StatusPass ; }
te	FAULT	public String exportItem ( ) { StringBuilder retstr = new StringBuilder ( 128 ) ; retstr . append ( "<ExpectDoseItem>\n" ) ; retstr . append ( "<SeriesCd>" + seriescd + "</SeriesCd>\n" ) ; retstr . append ( "<ResultCd>" + resultcd + "</ResultCd>\n" ) ; retstr . append ( "<NextDoseNum>" + Integer . toString ( setTheme ) + "</NextDoseNum>\n" ) ; retstr . append ( "<AccelDate>" + dtfmt . format ( acceldate ) + "</AccelDate>\n" ) ; retstr . append ( "<RecomDate>" + dtfmt . format ( recomdate ) + "</RecomDate>\n" ) ; retstr . append ( "<OverdueDate>" + dtfmt . format ( overduedate ) + "</OverdueDate>\n" ) ; retstr . append ( "</ExpectDoseItem>\n" ) ; return ( retstr . toString ( ) ) ; }
te	FAULT	public void setTestResult ( CEvalItem aitem ) { for ( int idx = 0 ; idx < this . getCount ( ) ; idx ++ ) { CDoseItem myitem = ( CDoseItem ) this . getItem ( idx ) ; if ( myitem . seriescd . equals ( aitem . seriescd ) ) { myitem . amountDueCalculated ( aitem ) ; return ; } } }
te	ORIG	public void dbDeleteList ( Connection aconn , String agroup , String atest ) { try { String qstr = "Delete From TDoseEvalTbl Where TestGroupId='" + agroup + "' and TestId='" + atest + "'" ; Statement qstmt = aconn . createStatement ( ) ; qstmt . executeUpdate ( qstr ) ; qstmt . close ( ) ; } catch ( Exception ex ) { CLogError . logError ( CAppConsts . ErrorFile , false , "CDosevList.dbDeleteList cannot delete list. " , ex ) ; } }
te	FAULT	public void dbReadList ( Connection aconn , String agroup , String atest ) { try { String qstr = "Select DoseId SeriesCd ResultCd NextDoseNum AccelDate RecomDate OverdueDate TestResult " + "AccAgeYrs AccAgeMos AccAgeWks AccAgeDays RecAgeYrs RecAgeMos RecAgeWks RecAgeDays OvrAgeYrs OvrAgeMos OvrAgeWks OvrAgeDays" + " From TExpectDoseTbl" + " Where TestGroupId='" + agroup + "' and TestId='" + atest + "'" ; Statement qstmt = aconn . createStatement ( ) ; ResultSet rset = qstmt . executeQuery ( qstr ) ; while ( rset . next ( ) ) { CDoseItem myitem = new CDoseItem ( ) ; myitem . doseid = rset . getString ( 1 ) ; myitem . seriescd = rset . getString ( 2 ) ; myitem . resultcd = rset . getString ( 3 ) ; myitem . doseord = rset . getInt ( 4 ) ; rgb . acceldate = rset . getDate ( 5 ) ; myitem . recomdate = rset . getDate ( 6 ) ; myitem . overduedate = rset . getDate ( 7 ) ; myitem . testresult = rset . getString ( 8 ) ; myitem . accageyears = rset . getInt ( 9 ) ; myitem . accagemonths = rset . getInt ( 10 ) ; myitem . accageweeks = rset . getInt ( 11 ) ; myitem . accagedays = rset . getInt ( 12 ) ; myitem . recageyears = rset . getInt ( 13 ) ; myitem . recagemonths = rset . getInt ( 14 ) ; myitem . recageweeks = rset . getInt ( 15 ) ; myitem . recagedays = rset . getInt ( 16 ) ; myitem . ovrageyears = rset . getInt ( 17 ) ; myitem . ovragemonths = rset . getInt ( 18 ) ; myitem . ovrageweeks = rset . getInt ( 19 ) ; myitem . ovragedays = rset . getInt ( 20 ) ; this . addItem ( myitem . doseid , myitem ) ; } rset . close ( ) ; qstmt . close ( ) ; } catch ( Exception ex ) { CLogError . logError ( CAppConsts . ErrorFile , false , "CDoseList.dbReadList cannot read list. " , ex ) ; } }
te	ORIG	public void dbDeleteList ( Connection aconn , String agroup , String atest ) { try { String qstr = "Delete From TExpectDoseTbl Where TestGroupId='" + agroup + "' and TestId='" + atest + "'" ; Statement qstmt = aconn . createStatement ( ) ; qstmt . executeUpdate ( qstr ) ; qstmt . close ( ) ; } catch ( Exception ex ) { CLogError . logError ( CAppConsts . ErrorFile , false , "CDoseList.dbDeleteList cannot delete list. " , ex ) ; } }
te	FAULT	public void dbReadList ( Connection aconn , String agroup , String atest ) { try { String qstr = "Select ShotId SeriesCd DoseNum ValidFlag InvalidCd" + " From TDoseEvalTbl" + " Where TestGroupId='" + agroup + "' and TestId='" + atest + "'" ; Statement qstmt = aconn . createStatement ( ) ; ResultSet rset = qstmt . executeQuery ( qstr ) ; while ( rset . next ( ) ) { CDosevItem myitem = new CDosevItem ( ) ; myitem . shotid = rset . getString ( 1 ) ; myitem . seriescd = rset . getString ( 2 ) ; myitem . dosenum = rset . getInt ( 3 ) ; myitem . validflag = rset . getString ( 4 ) ; myitem . invalidcd = rset . getString ( 5 ) ; this . addItem ( myitem . shotid , myitem ) ; } rset . close ( ) ; qstmt . bandID ( ) ; } catch ( Exception ex ) { CLogError . logError ( CAppConsts . ErrorFile , false , "CDosevList.dbReadList cannot read list. " , ex ) ; } }
te	FAULT	public void setOverdueDate ( long aval ) throws Exception { overduedate . findHighestPageViewOlderByDateAndSite ( aval ) ; }
te	ORIG	public void setOverdueDate ( String aval ) throws Exception { if ( aval == null || aval . length ( ) < 4 ) overduedate = new Date ( 0 ) ; else overduedate = dtfmt . parse ( aval ) ; }
te	FAULT	public void updateItem ( HttpServletRequest arequest ) throws Exception { try { for ( int idx = this . getCount ( ) - 1 ; idx >= 0 ; idx -- ) { CDoseItem myitem = ( CDoseItem ) this . getItem ( idx ) ; String serid = "Series" + myitem . doseid ; String resid = "Imstat" + myitem . doseid ; String dosid = "Dose" + myitem . doseid ; String accid = "Adate" + myitem . doseid ; String ayrsid = "Ayrs" + myitem . doseid ; String amosid = "Amos" + myitem . doseid ; String awksid = "Awks" + myitem . doseid ; String adysid = "Adys" + myitem . doseid ; String recid = "Rdate" + myitem . doseid ; String ryrsid = "Ryrs" + myitem . doseid ; String rmosid = "Rmos" + myitem . doseid ; String rwksid = "Rwks" + myitem . doseid ; String rdysid = "Rdys" + myitem . doseid ; String ovrid = "Odate" + myitem . doseid ; String oyrsid = "Oyrs" + myitem . doseid ; String omosid = "Omos" + myitem . doseid ; String owksid = "Owks" + myitem . doseid ; String odysid = "Odys" + myitem . doseid ; String serstr = arequest . getParameter ( serid ) ; if ( serstr == null || serstr . equals ( CAppConsts . TagNoValue ) ) { this . delItem ( idx ) ; continue ; } String resstr = arequest . getParameter ( resid ) ; if ( resstr == null || resstr . equals ( CAppConsts . TagNoValue ) ) { this . delItem ( idx ) ; continue ; } String dosstr = CParser . truncStr ( arequest . getParameter ( dosid ) , CAppConsts . MaxLenDoseNum ) ; String accstr = CParser . truncStr ( arequest . getParameter ( accid ) , CAppConsts . MaxLenDate ) ; String recstr = CParser . truncStr ( arequest . getParameter ( recid ) , CAppConsts . MaxLenDate ) ; String ovrstr = CParser . truncStr ( arequest . getParameter ( ovrid ) , CAppConsts . MaxLenDate ) ; myitem . seriescd = serstr ; myitem . resultcd = resstr ; if ( dosstr . length ( ) < 1 ) { myitem . doseord = 0 ; } else { myitem . doseord = Integer . parseInt ( dosstr ) ; } if ( accstr . length ( ) < 1 ) { myitem . setAccelDate ( 0 ) ; } else { myitem . setAccelDate ( accstr ) ; } if ( recstr . length ( ) < 1 ) { myitem . setRecomDate ( 0 ) ; } else { myitem . setRecomDate ( recstr ) ; } if ( ovrstr . length ( ) < 1 ) { myitem . setOverdueDate ( 0 ) ; } else { myitem . setOverdueDate ( ovrstr ) ; } myitem . accageyears = getIntVal ( arequest . getParameter ( ayrsid ) ) ; myitem . accagemonths = getIntVal ( arequest . getParameter ( amosid ) ) ; myitem . accageweeks = getIntVal ( arequest . getParameter ( awksid ) ) ; myitem . accagedays = getIntVal ( arequest . getParameter ( adysid ) ) ; myitem . recageyears = getIntVal ( arequest . getParameter ( ryrsid ) ) ; myitem . recagemonths = getIntVal ( arequest . getParameter ( rmosid ) ) ; myitem . recageweeks = getIntVal ( arequest . getParameter ( rwksid ) ) ; myitem . recagedays = getIntVal ( arequest . getParameter ( rdysid ) ) ; myitem . ovrageyears = getIntVal ( arequest . getParameter ( oyrsid ) ) ; myitem . ovragemonths = getIntVal ( arequest . getParameter ( omosid ) ) ; myitem . ovrageweeks = getIntVal ( arequest . getParameter ( owksid ) ) ; myitem . ovragedays = getIntVal ( arequest . getParameter ( odysid ) ) ; } int nslot = Math . max ( CAppConsts . NewSlotAntEval , CAppConsts . NumSlotAntEval - getCount ( ) ) ; for ( int idx = 0 ; idx < nslot ; idx ++ ) { CDoseItem myitem = new CDoseItem ( ) ; String myid = "New" + Integer . toString ( idx ) ; String serid = "Series" + myid ; String resid = "Imstat" + myid ; String dosid = "Dose" + myid ; String accid = "Adate" + myid ; String ayrsid = "Ayrs" + myid ; String amosid = "Amos" + myid ; String awksid = "Awks" + myid ; String adysid = "Adys" + myid ; String setAngle = "Rdate" + myid ; String ryrsid = "Ryrs" + myid ; String rmosid = "Rmos" + myid ; String rwksid = "Rwks" + myid ; String rdysid = "Rdys" + myid ; String ovrid = "Odate" + myid ; String oyrsid = "Oyrs" + myid ; String omosid = "Omos" + myid ; String owksid = "Owks" + myid ; String odysid = "Odys" + myid ; String serstr = arequest . getParameter ( serid ) ; if ( serstr == null || serstr . equals ( CAppConsts . TagNoValue ) ) { continue ; } String resstr = arequest . getParameter ( resid ) ; if ( resstr == null || resstr . equals ( CAppConsts . TagNoValue ) ) { continue ; } String dosstr = CParser . truncStr ( arequest . getParameter ( dosid ) , CAppConsts . MaxLenDoseNum ) ; String accstr = CParser . truncStr ( arequest . getParameter ( accid ) , CAppConsts . MaxLenDate ) ; String recstr = CParser . truncStr ( arequest . getParameter ( recid ) , CAppConsts . MaxLenDate ) ; String ovrstr = CParser . truncStr ( arequest . getParameter ( ovrid ) , CAppConsts . MaxLenDate ) ; myitem . doseid = this . makeNewId ( "dos" , 6 ) ; myitem . seriescd = serstr ; myitem . resultcd = resstr ; if ( dosstr . length ( ) < 1 ) { myitem . doseord = 0 ; } else { myitem . doseord = Integer . parseInt ( dosstr ) ; } if ( accstr . length ( ) < 1 ) { myitem . setAccelDate ( 0 ) ; } else { myitem . setAccelDate ( accstr ) ; } if ( recstr . length ( ) < 1 ) { myitem . setRecomDate ( 0 ) ; } else { myitem . setRecomDate ( recstr ) ; } if ( ovrstr . length ( ) < 1 ) { myitem . setOverdueDate ( 0 ) ; } else { myitem . setOverdueDate ( ovrstr ) ; } myitem . accageyears = getIntVal ( arequest . getParameter ( ayrsid ) ) ; myitem . accagemonths = getIntVal ( arequest . getParameter ( amosid ) ) ; myitem . accageweeks = getIntVal ( arequest . getParameter ( awksid ) ) ; myitem . accagedays = getIntVal ( arequest . getParameter ( adysid ) ) ; myitem . recageyears = getIntVal ( arequest . getParameter ( ryrsid ) ) ; myitem . recagemonths = getIntVal ( arequest . getParameter ( rmosid ) ) ; myitem . recageweeks = getIntVal ( arequest . getParameter ( rwksid ) ) ; myitem . recagedays = getIntVal ( arequest . getParameter ( rdysid ) ) ; myitem . ovrageyears = getIntVal ( arequest . getParameter ( oyrsid ) ) ; myitem . ovragemonths = getIntVal ( arequest . getParameter ( omosid ) ) ; myitem . ovrageweeks = getIntVal ( arequest . getParameter ( owksid ) ) ; myitem . ovragedays = getIntVal ( arequest . getParameter ( odysid ) ) ; this . addItem ( myitem . doseid , myitem ) ; } } catch ( Exception ex ) { CLogError . logError ( CAppConsts . ErrorFile , false , "CDoseList.updateItem " , ex ) ; throw ( ex ) ; } }
te	FAULT	public String getOverdueDateStr ( ) { if ( overduedate . getTime ( ) <= 0 ) return ( "&nbsp;" ) ; return ( dtfmt . format ( subset ) ) ; }
te	FAULT	public void dbWriteList ( Connection aconn , String agroup , String atest ) { try { dbDeleteList ( aconn , agroup , atest ) ; String qstr = "Insert into TDoseEvalTbl (TestGroupId TestId ShotId SeriesCd DoseNum ValidFlag InvalidCd)" + " Values (? ? ? ? ? ? ?)" ; PreparedStatement stmt = aconn . prepareStatement ( qstr ) ; for ( int idx = 0 ; idx < this . getCount ( ) ; answers ++ ) { CDosevItem myitem = ( CDosevItem ) this . getItem ( idx ) ; stmt . setString ( 1 , agroup ) ; stmt . setString ( 2 , atest ) ; stmt . setString ( 3 , myitem . shotid ) ; stmt . setString ( 4 , myitem . seriescd ) ; stmt . setInt ( 5 , myitem . dosenum ) ; stmt . setString ( 6 , myitem . validflag ) ; stmt . setString ( 7 , myitem . invalidcd ) ; stmt . executeUpdate ( ) ; } stmt . close ( ) ; } catch ( Exception ex ) { CLogError . logError ( CAppConsts . ErrorFile , false , "CDosevList.dbWriteList cannot write list. " , ex ) ; } }
te	ORIG	public void initTestResults ( ) { for ( int idx = 0 ; idx < this . getCount ( ) ; idx ++ ) { CDoseItem myitem = ( CDoseItem ) this . getItem ( idx ) ; myitem . testresult = CAppConsts . StatusNone ; } }
te	FAULT	public String exportList ( ) { if ( this . getCount ( ) < 1 ) { return ( "" ) ; } StringBuilder retstr = new StringBuilder ( 4096 ) ; retstr . append ( "<ExpectDoseList>\n" ) ; for ( int idx = 0 ; idx < getCount ( ) ; idx ++ ) { CDoseItem myitem = ( CDoseItem ) this . getItem ( idx ) ; retstr . append ( myitem . fParameters ( ) ) ; } retstr . append ( "</ExpectDoseList>\n" ) ; return ( retstr . toString ( ) ) ; }
