tr	5	@ Override public boolean read ( Input input ) { return input . readBoolean ( ) ; }
tr	10	public void removeAll ( Node node ) { for ( int i = 0 ; i < node . getChildNodes ( ) . getLength ( ) ; i ++ ) { Node n = node . getChildNodes ( ) . item ( i ) ; if ( n . hasChildNodes ( ) ) { removeAll ( n ) ; node . removeChild ( n ) ; } else node . removeChild ( n ) ; } }
tr	2	public void setY ( double y ) { this . y = y ; }
tr	8	public void onDisable ( ) { this . playerData . savePlayers ( this . gold , this . elixir , this . darkElixir , this . gems , this . trophies ) ; }
tr	4	private static void markEndTime ( ) { endTime = System . currentTimeMillis ( ) ; }
tr	2	public void setUpvote ( boolean upvote ) { this . upvote = upvote ; }
tr	4	public static GTHome getHome ( ) { if ( home == null ) home = new GTHomeImpl ( ) ; return home ; }
tr	4	protected static long getCPtr ( Storable obj ) { return ( obj == null ) ? 0 : obj . swigCPtr ; }
tr	9	@ Override public String printState ( Object [ ] to_print ) { String s = "" ; s += "SOM : " + to_print [ 0 ] + " epochs on " + to_print [ 1 ] + " " ; s += "learning rate=" + to_print [ 2 ] + " (lower=" + to_print [ 3 ] + "/top=" + to_print [ 4 ] + ") " ; s += "sigma=" + to_print [ 5 ] + " (lower=" + to_print [ 6 ] + "/top=" + to_print [ 7 ] + ") " ; System . out . println ( s ) ; return s ; }
tr	7	public void removeAllTags ( Collection < Tag > c ) { for ( Tag t : c ) tags . remove ( t ) ; }
tr	7	public Socket openSocket ( int port ) throws IOException { return new Socket ( InetAddress . getByName ( server ) , port ) ; }
tr	9	public Histogram ( MergeStrategy < Histogram > mergeStrategy , double start , double step , double end ) { this . mergeStrategy = mergeStrategy ; initData ( Range . createRanges ( start , step , end ) ) ; }
tr	7	protected synchronized void evaluate ( int calculated , int correct ) { if ( calculated == - 1 ) { calculated = correct + 1 ; if ( calculated >= confusionMatrix . getMatrix ( ) . length ) { calculated = correct - 1 ; } } confusionMatrix . add ( correct , calculated , 1 ) ; }
tr	4	public Writer write ( Writer writer ) throws JSONException { return this . write ( writer , 0 , 0 ) ; }
tr	2	public void resetPlayerAvailable ( ) { this . playerAvailable = 0 ; }
tr	4	@ Override public ParserEventType getType ( ) { return ParserEventType . GROUP_START_EVENT ; }
tr	4	public float length2 ( ) { return ( this . x * this . x ) + ( this . y * this . y ) + ( this . z * this . z ) ; }
tr	7	public void addSpecialEntity ( String identifier , String entity ) { specialEntities . put ( entity . toLowerCase ( ) , identifier ) ; }
tr	1	public Object3 ( ) { }
tr	2	public int getYearOfBirth ( ) { return yearOfBirth ; }
tr	5	public boolean equalsTo ( String otherName ) { return name . equals ( otherName ) ; }
tr	5	@ Override public void remove ( ) { Preconditions . checkState ( delegate != null ) ; delegate . remove ( ) ; }
tr	3	public void setLocname ( String locname ) { this . locname = locname ; }
tr	3	public void setEtunimi ( String etunimi ) { this . etunimi = etunimi ; }
tr	4	LazyTraverser ( final TreeTraverser < T > delegate ) { this . delegate = delegate ; }
tr	9	private void createMouse ( ) { try { org . lwjgl . input . Mouse . create ( ) ; } catch ( LWJGLException e ) { e . printStackTrace ( ) ; } }
tr	7	public synchronized Site getSite ( Vect position ) { return getSite ( position . getX ( ) , position . getY ( ) , position . getZ ( ) ) ; }
tr	7	public static int valuePositive ( ) { int value = Integer . MIN_VALUE ; if ( value < 0 ) value = - value ; System . out . println ( "value: " + value ) ; assert ( value >= 0 ) : "value is negative" ; return value ; }
tr	3	public Date getLastLoginDateTime ( ) { return lastLoginDateTime ; }
tr	2	public IITTrackCollection ( ) { super ( componentName ) ; }
tr	2	public int getType ( ) { return PRINTER ; }
tr	5	@ Override public int hashCode ( ) { int result = lat . hashCode ( ) ; result = 31 * result + lng . hashCode ( ) ; return result ; }
tr	10	public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( super . toString ( ) ) ; buffer . append ( "  prevRespList: " + prevRespList ) ; buffer . append ( "  URL: " + url ) ; buffer . append ( "  scopeList: " + scopeList ) ; buffer . append ( "  tag-list: " + tagList ) ; buffer . append ( "  slpSpi: " + spi ) ; return buffer . toString ( ) ; }
tr	1	public int getLastPrintedLine ( ) { return 0 ; }
tr	8	@ Test public void testEncode ( ) { short value = ( short ) 127 ; byte [ ] data = datatype . encode ( value ) ; assertTrue ( data . length == 1 ) ; assertTrue ( data [ 0 ] == 127 ) ; value ++ ; data = datatype . encode ( value ) ; assertTrue ( data . length == 1 ) ; assertTrue ( data [ 0 ] == - 128 ) ; value = - 128 ; data = datatype . encode ( value ) ; assertTrue ( data . length == 1 ) ; assertTrue ( data [ 0 ] == - 128 ) ; value -- ; data = datatype . encode ( value ) ; assertTrue ( data . length == 1 ) ; assertTrue ( data [ 0 ] == 127 ) ; }
tr	10	public void show ( ) { System . err . println ( "****** DATA SET *****  LENGTH = " + dataX . getSize ( ) + "  ******" ) ; for ( int loop = 0 ; loop < dataX . getSize ( ) ; loop ++ ) { System . err . printf ( "\t%12.5f \t%12.5f\n" , dataX . getValue ( loop ) , dataY . getValue ( loop ) ) ; } }
tr	2	public int getEffectiveness ( ) { return effectiveness ; }
tr	4	@ Override public int hashCode ( ) { int hash = 0 ; hash += ( id != null ? id . hashCode ( ) : 0 ) ; return hash ; }
tr	7	@ Override public Dimension maximumLayoutSize ( Container target ) { return new Dimension ( Integer . MAX_VALUE , Integer . MAX_VALUE ) ; }
tr	1	public SendBox ( ) { super ( ) ; }
tr	1	public void startStartLevel ( ) { }
tr	5	protected TaskTrackerServices ( TaskTracker taskTracker ) throws RemoteException { this . taskTrackerReference = taskTracker ; }
tr	4	public void setAmexSecrAD ( String value ) { this . amexSecrAD = value ; }
tr	6	@ XmlElement ( name = "shelf" ) public ArrayList < Shelf > getShelfList ( ) { return shelfList ; }
tr	9	public void start ( ) { this . setPlayingOrder ( player1 , player2 ) ; this . board . clearTheBoard ( ) ; this . setStatus ( Game . NEW_GAME ) ; }
tr	9	public static < C > AutomataGraph < C > createGraph ( final Collection < ? extends ITimedAutomata < C >> autos ) { AutomataGraph < C > graph = new SimpleAutomataGraph < C > ( autos ) ; for ( ITimedAutomata < C > auto : autos ) createGraph ( auto , graph ) ; return graph ; }
tr	9	public void addSentence ( Sentence sentence ) { int i = sentences . size ( ) ; sentences . add ( sentence ) ; sentence . index = i ; length += sentence . length ( ) ; }
tr	4	public void setCONTACTS_SALES ( String cONTACTS_SALES ) { CONTACTS_SALES = cONTACTS_SALES ; }
tr	9	protected void zoomOriginal ( ) { double s = getCanvas ( ) . getCamera ( ) . getViewScale ( ) ; log . info ( "(from) scale = " + double . toString ( s ) ) ; getCanvas ( ) . getCamera ( ) . setViewScale ( 1.0 ) ; s = getCanvas ( ) . getCamera ( ) . getViewScale ( ) ; log . info ( "(to) scale = " + double . toString ( s ) ) ; }
tr	7	public List findWithNamedQuery ( String namedQueryName , QueryParameter parameters ) { return crud . findWithNamedQuery ( namedQueryName , parameters ) ; }
tr	4	public static MediumFormat valueOf ( String code ) { return valueOf ( MediumFormat . class , code ) ; }
tr	9	public DistributedFile getFile ( String fileName ) throws FileSystemException { for ( DistributedFile f : files ) if ( f . getFileName ( ) . equals ( fileName ) ) return f ; throw new FileSystemException ( fileName + "File Not Found" ) ; }
tr	8	public MenuScroller ( JMenu menu , int scrollCount , int interval , int topFixedCount , int bottomFixedCount ) { this ( menu . getPopupMenu ( ) , scrollCount , interval , topFixedCount , bottomFixedCount ) ; }
tr	9	static public void EliminacionGaussiana ( double a [ ] [ ] , double x [ ] , double b [ ] ) { int n = a . length ; for ( int k = 0 ; k <= n - 2 ; k ++ ) { for ( int i = k + 1 ; i <= ( n - 1 ) ; i ++ ) { b [ i ] -= a [ i ] [ k ] * b [ k ] / a [ k ] [ k ] ; for ( int j = n - 1 ; j >= k ; j -- ) a [ i ] [ j ] -= a [ i ] [ k ] * a [ k ] [ j ] / a [ k ] [ k ] ; } } }
tr	4	public DualWedgeB ( final Material [ ] materials , final int orientation ) { super ( materials , true , true , true , true , true , true ) ; this . orientation = orientation ; }
tr	6	public static void main ( String [ ] args ) { List < String > arrayList = new ArrayList < String > ( ) ; }
tr	6	@ Override public String getStringRepresentation ( ) { return "\n" + getName ( ) + " { variables " + variableDeclarations . getStringRepresentation ( ) + ": func " + functionDeclarations . getStringRepresentation ( ) + "}\n" ; }
tr	10	public int getElapsed ( ) { if ( getStart ( ) == null || getEnd ( ) == null || ! hasActuallyStarted ( ) || hasEnded ( ) ) { return - 1 ; } return Util . safeLongToInt ( Util . getDeltaT ( start , new GregCalPlus ( ) ) ) ; }
tr	6	public synchronized void addNotification ( Notification notification ) { this . aNotification . add ( notification ) ; this . notifyAll ( ) ; }
tr	7	@ Test public void testTagSentWithMTPreProcessing ( ) { DataHolder myTester = dataHolderFactory ( ) ; assertEquals ( "tagSentWithMTPreProcessing - null" , null , myTester . tagSentWithMTPreProcessing ( null ) ) ; assertEquals ( "RemoveLyEndingBoundary - remove <>" , "word1  word3" , myTester . tagSentWithMTPreProcessing ( "word1 <word2> word3" ) ) ; assertEquals ( "RemoveLyEndingBoundary remove beginning stop words" , "word" , myTester . tagSentWithMTPreProcessing ( "after <word2> after above word" ) ) ; assertEquals ( "RemoveLyEndingBoundary remove ending -ly words" , "word1" , myTester . tagSentWithMTPreProcessing ( "word1 <word2> word3ly word4ly" ) ) ; }
tr	4	public void modifierEstOccupe ( Perso perso ) { this . estOccupe = perso ; }
tr	8	@ Override public String stringValue ( byte [ ] val ) { if ( val == null ) { return "" ; } else { Object obj = decode ( val ) ; if ( obj != null ) return obj . toString ( ) ; else return "" ; } }
tr	1	public PlayerMovementServer ( ) { }
tr	5	private void go ( ) { addHeader ( ) ; for ( int a = 1 ; a < 6 ; a ++ ) { add ( "submission" + a + ".csv" ) ; } export ( ) ; }
tr	2	public float getV ( ) { return v ; }
tr	3	public final void startup ( ) { if ( ! running ) { running = true ; doStartup ( ) ; } }
tr	6	@ Test public void shouldHandleChoiceOfOne ( ) { parser = choice ( "foo" ) ; assertEquals ( "foo" , parser . parse ( "foo" ) ) ; }
tr	5	private void generateRandomBreakables ( ) { for ( int i = 3 ; i < 12 ; i ++ ) { if ( this . randomNumber ( 0 , 1 ) == 1 ) { this . addBreakable ( i , 1 ) ; } } for ( int i = 3 ; i <= 13 ; i += 2 ) { if ( this . randomNumber ( 0 , 1 ) == 1 ) { this . addBreakable ( i , 2 ) ; } } for ( int i = 3 ; i <= 9 ; i ++ ) { for ( int j = 1 ; j <= 13 ; j += 2 ) { if ( this . randomNumber ( 0 , 1 ) == 1 ) { this . addBreakable ( j , i ) ; } } } for ( int i = 1 ; i <= 11 ; i += 2 ) { if ( this . randomNumber ( 0 , 1 ) == 1 ) { this . addBreakable ( i , 10 ) ; } } for ( int i = 1 ; i <= 11 ; i ++ ) { if ( this . randomNumber ( 0 , 1 ) == 1 ) { this . addBreakable ( i , 11 ) ; } } }
tr	8	@ Test public void KyselynLuominenToimii ( ) { Kysely kysely = sailio . luoKysely ( "testikysely" ) ; assertEquals ( "testikysely" , kysely . getNimi ( ) ) ; }
tr	9	public static void main ( String [ ] args ) { junit . textui . TestRunner . run ( new TestSuite ( TestEntityReplacement . class ) ) ; }
tr	10	@ ManyToOne ( fetch = FetchType . LAZY ) @ JoinColumn ( name = "skill_type_id" , nullable = false ) public SkilltypeTbl getSkilltypeTbl ( ) { return this . skilltypeTbl ; }
tr	8	public static void main ( String [ ] args ) { kmpNext ( "ABCDABD" ) ; if ( kmp ( "ABC ABCDAB ABCDABCDABDE" , "ABCDABD" ) ) System . out . println ( "YES" ) ; else System . out . println ( "NO" ) ; }
tr	9	private void updateScale ( MouseEvent e ) { scaleX . setMarker ( e . getX ( ) ) ; scaleY . setMarker ( e . getY ( ) ) ; scaleX . repaint ( ) ; scaleY . repaint ( ) ; }
tr	10	@ Test public void ShouldNotFind2OfAnySuit ( ) { String hand = "TS KS QS JS AS" ; boolean expected = false ; Hand thisHand = new Hand ( hand ) ; boolean result = thisHand . ContainsCardOfAnySuit ( "2" ) ; assert . assertEquals ( expected , result ) ; }
tr	1	public int y ( ) { return y ; }
tr	1	public Comentari ( ) { }
tr	2	public int height ( ) { return y ; }
tr	2	public void select ( ) { switch ( current ) { case 0 : case 1 : } }
tr	10	public String toString1 ( ) { String output = location1 +  ; if ( ! location2 . equals ( "NULL" ) ) { output += location2 +  ; } output += city + "  " + state + " " + zip ; return output ; }
tr	10	@ Override public void paint ( Graphics g ) { g . drawImage ( resources . get ( loadingResource ) , 0 , 0 , GAME_WIDTH , GAME_HEIGHT , null ) ; }
tr	1	public ServerSideThread ( ) { }
tr	9	protected void setUp ( ) { td = new TestData ( ) ; testproperties = td . createPropertyData ( ) ; pra = td . getPra ( ) ; td . createAndStoreOrganData ( ) ; td . createAndStoreTissueSampleData ( ) ; }
tr	6	public static long of ( long n , long b1 , long b2 , long b3 ) { return _of ( n , b1 , b2 , b3 ) ; }
tr	1	public byte [ ] buffer ( ) { return ( buffer ) ; }
tr	4	public DataTable ( ) { Rows = new DataRowCollection < T > ( ) ; }
tr	6	public static long readLong ( byte [ ] b , int start ) { long l = 0 ; for ( int i = 0 ; i < 8 ; i ++ ) { l <<= 8 ; l |= b [ start + i ] & ff ; } return l ; }
tr	7	public void printSystem ( String message ) { MessageNode node = new MessageNode ( "System" , message ) ; node . setSystemMessage ( ) ; addChatMessage ( node ) ; }
tr	4	public Polygon getPolygon ( ) { return getPolygon_native ( pointer ) ; }
tr	1	public UserBean ( ) { super ( ) ; }
tr	5	protected void submitPrioritaryInfluence ( Influence i ) { _influences . addFirst ( i ) ; }
tr	4	public MytxtbuddySoapApi_Service ( URL wsdlLocation ) { super ( wsdlLocation , SERVICE ) ; }
tr	10	@ Test public void calculateLocals_topLevel_noBlock ( ) throws RecognitionException , IOException , ShellException , InterruptedException { textLines . add ( "a = 0" ) ; textLines . add ( "b = 0" ) ; textLines . add ( "c = 0" ) ; testCodeGeneration ( ) ; assert . assertTrue ( true ) ; }
tr	4	public static BasicSingleton getInstance ( ) { if ( instance == null ) { synchronized ( BasicSingleton . class ) { if ( instance == null ) { instance = new BasicSingleton ( ) ; instance . increment ( ) ; } } } return instance ; }
tr	8	public void set_transfer_type ( String in ) { try { _transfer_type = Integer . parseInt ( in ) ; } catch ( NumberFormatException e ) { ; } }
tr	9	public Tweet ( long id , User user , TweetType type , Date date ) { this ( ) ; this . id = id ; setIdIsSet ( true ) ; this . user = user ; this . type = type ; this . date = date ; }
tr	9	@ Override public String getXMLOneElement ( ) { String stat = Constants . getSwitchStatusAsString ( status ) ; String xml = "<oneSwitch name=\"" + this . getName ( ) + "\">" + stat + "</oneSwitch>" ; return xml ; }
tr	7	public final CC grow ( float ... widthHeight ) { switch ( widthHeight . length ) { default : throw new IllegalArgumentException ( "Illegal argument count: " + widthHeight . length ) ; case 2 : growY ( widthHeight [ 1 ] ) ; case 1 : growX ( widthHeight [ 0 ] ) ; } return this ; }
tr	10	public MpegFrame ( byte frameData1 , byte frameData2 , byte frameData3 , byte frameData4 ) throws InvalidDataException { long frameHeader = BufferTools . unpackInteger ( frameData1 , frameData2 , frameData3 , frameData4 ) ; setFields ( frameHeader ) ; }
tr	3	public CheckBox getOnsaleCheckbox ( ) { return onsaleCheckbox ; }
tr	3	public void setTimeUnits ( String timeUnits ) { this . timeUnits = timeUnits ; }
tr	2	public Importlog ( long id ) { this . id = id ; }
tr	3	public HalfEdge getPrev ( ) { return prev ; }
tr	1	public int start_production ( ) { return 0 ; }
tr	2	public long getStartTime ( ) { return startTime ; }
tr	4	public void setItemType ( String value ) { this . itemType = value ; }
tr	9	protected boolean attack ( Interactable target ) { if ( target != null && ! ( target instanceof CardinalDirection ) ) { System . out . println ( "You swing your " + this . name + " at the " + target . name + "." ) ; if ( ! target . damage ( this ) ) { System . out . println ( "Your attack bounces off and does nothing." ) ; } return true ; } else { System . out . println ( "You swing your " + this . name + " wildy around." ) ; return true ; } }
tr	8	public static String dateToString ( Date date ) { SimpleDateFormat dateFormat = new SimpleDateFormat ( "yyyy-MM-dd" ) ; String strDate = dateFormat . format ( date ) ; return strDate ; }
tr	3	@ Override public String toCharacter ( ) { return null ; }
tr	7	public static void main ( String [ ] args ) { System . out . println ( divide ( - 10 , 1 ) ) ; }
tr	5	@ Override protected MicroBlock subBlockCopy ( int current_class ) { return new XMicroBlock ( this , current_class ) ; }
tr	4	@ Override public String getName ( ) { return "\uC6B0\uC720 + " + target . getName ( ) ; }
tr	1	public ReadNode ( ) { this ( null ) ; }
tr	10	private ProcedureDeclarationNode procedureDeclaration ( ) { ProcedureHeadingNode head = procedureHeading ( ) ; read ( SEMICOLON , ";" ) ; ProcedureBodyNode body = procedureBody ( ) ; return new ProcedureDeclarationNode ( head , body ) ; }
tr	1	public int getArrowTopSpacing ( ) { return 4 ; }
tr	3	public static long sum ( long ... values ) { long sum = 0 ; for ( long l : values ) { sum += l ; } return sum ; }
tr	7	public Network get ( String key ) { return networks . get ( calls . indexOf ( key ) ) ; }
tr	1	public void begin ( ) { }
tr	2	public long getPreviousCursor ( ) { return previousCursor ; }
tr	9	public FHashSet < Elt > with ( Elt elt ) { Object t = with ( tree , elt , hashCode ( elt ) ) ; if ( t == tree ) return this ; else return make ( t ) ; }
tr	3	public static String getLocalIdentifier ( ) { return localIdentifier ; }
tr	5	public void actionPerformed ( ActionEvent event ) { Main . newSet ( ) ; }
tr	5	public void addConversation ( Conversation c ) { conversations . add ( c ) ; }
tr	5	public void putInt ( String key , int num ) { put ( key , num ) ; }
tr	8	private boolean isKColorable ( int k ) { for ( HashSet < Value > edges : adjacencyList . values ( ) ) { if ( edges . size ( ) >= k ) { return false ; } } return true ; }
tr	2	public void setMFS ( boolean mfs ) { this . mfs = mfs ; }
tr	2	public int getIndex ( ) { return index ; }
tr	6	private void visitEdge ( Edge e ) { System . out . println ( "Visiting edge " + e ) ; }
tr	6	public void - ( Vector3d v1 , Vector3d v2 ) { x = v1 . x - v2 . x ; y = v1 . y - v2 . y ; z = v1 . z - v2 . z ; }
tr	1	private FileMapper ( ) { }
tr	3	public void setHealth ( int health ) { if ( health <= getMaxHealth ( ) ) this . health = health ; else this . health = getMaxHealth ( ) ; }
tr	5	public JCalendar ( Date date , Locale locale ) { this ( date , locale , true , true ) ; }
tr	2	public long getUserId ( ) { return userId ; }
tr	9	public EnhancedApnsNotification push ( byte [ ] deviceToken , byte [ ] payload , int expiry ) throws NetworkIOException { EnhancedApnsNotification notification = new EnhancedApnsNotification ( c . incrementAndGet ( ) , expiry , deviceToken , payload ) ; push ( notification ) ; return notification ; }
tr	5	public void addMember ( Node n ) { members . add ( n ) ; }
tr	4	public void setCommonGrp ( CommonGrp value ) { this . commonGrp = value ; }
tr	2	public static int abs ( final int x ) { return ( x < 0 ) ? - x : x ; }
tr	3	public Trendline setShadow ( boolean shadow ) { this . shadow = shadow ; return this ; }
tr	9	public void setDefaultValues ( ) { Dict d = getDict ( ) ; d . setString ( "isa" , isa ) ; d . setArray ( "files" , getProjectFile ( ) . createArray ( ) ) ; d . setArray ( "inputPaths" , getProjectFile ( ) . createArray ( ) ) ; d . setArray ( "outputPaths" , getProjectFile ( ) . createArray ( ) ) ; d . setString ( "runOnlyForDeploymentPostprocessing" , "0" ) ; d . setString ( "shellPath" , "/bin/sh" ) ; }
tr	7	protected int lastDocId ( ArrayList < Integer > prevSkipInfo ) { if ( prevSkipInfo == null || prevSkipInfo . isEmpty ( ) ) return 0 ; else { return prevSkipInfo . get ( prevSkipInfo . size ( ) - 2 ) ; } }
tr	6	public JSONWriter value ( long l ) throws JSONException { return this . append ( long . toString ( l ) ) ; }
tr	4	@ Override public int hashCode ( ) { int hash = 5 ; hash = 23 * hash + ( this . attendID != null ? this . attendID . hashCode ( ) : 0 ) ; return hash ; }
tr	5	public void setEmprunts ( LinkedList < Emprunt > emprunts ) { _emprunts = emprunts ; }
tr	2	public void setDisabledFl ( byte disabledFl ) { this . disabledFl = disabledFl ; }
tr	2	public void pop ( ) { render . pop ( ) ; }
tr	7	public boolean checkType ( Object obj ) { return ( ( obj instanceof java . lang . byte && ( ( byte ) obj ) . byteValue ( ) >= 0 ) || ( obj instanceof java . lang . short && ( ( short ) obj ) . shortValue ( ) >= 0 && ( ( short ) obj ) . shortValue ( ) <= 255 ) ) ; }
tr	1	public LiveConferenceFactory ( ) { }
tr	6	protected Object writeReplace ( ) throws ObjectStreamException { return ( ( JMSRemoteRef ) ref ) . getProxy ( ) ; }
tr	8	public void testFirstExposed ( ) throws Exception { Entity firstElement = executeString ( "(first (list 1 2 3))" ) ; assertEquals ( SparseInt . valueOf ( 1 ) , firstElement ) ; }
tr	6	private static List < String > initNombres ( ) { List < String > res = new LinkedList < String > ( ) ; res . add ( "C" ) ; res . add ( "C#" ) ; res . add ( "D" ) ; res . add ( "D#" ) ; res . add ( "E" ) ; res . add ( "F" ) ; res . add ( "F#" ) ; res . add ( "G" ) ; res . add ( "G#" ) ; res . add ( "A" ) ; res . add ( "A#" ) ; res . add ( "B" ) ; return res ; }
tr	9	public void defineImage ( Object pkg_obj , String imgname , String tilename , int collisionid , String imgfile , String img_op ) { defineImage ( pkg_obj , imgname , tilename , collisionid , imgfile , img_op , - 1 , - 1 , - 1 , - 1 ) ; }
tr	1	private ButtCity ( ) { }
tr	10	public void disableButtons ( ) { btnCheckVersion . setEnabled ( false ) ; btnGetTime . setEnabled ( false ) ; btnSetCurrentTime . setEnabled ( false ) ; btnFeedMode . setEnabled ( false ) ; btnWaterChangeMode . setEnabled ( false ) ; btnExitMode . setEnabled ( false ) ; btnClearATO . setEnabled ( false ) ; btnClearOverheat . setEnabled ( false ) ; }
tr	8	@ Override public String toString ( ) { return "CommandDescriptor{" + "commandName='" + commandName + ' + "  commandId=" + commandId + "  commandParameters=" + commandParameters + } ; }
tr	10	@ Override public boolean equals ( final Object o ) { if ( ! ( o instanceof IntList ) ) { return false ; } final LongList that = ( LongList ) o ; if ( this . size != that . size ) { return false ; } for ( int i = 0 ; i < this . size ; i ++ ) { if ( this . data [ i ] != that . data [ i ] ) { return false ; } } return true ; }
tr	6	public ParticipantTableModel ( ArrayList < Participant > participantList ) { this . participantList = participantList ; lastRow = new SingleParticipant ( ) ; }
tr	6	public static void main ( String [ ] args ) { Main main = new Main ( ) ; initApplication ( ) ; main . start ( ) ; }
tr	10	public long setDataRelative ( int addr , int val ) { long data = null ; try { data = dataMem . set ( addr , new long ( val ) ) ; } catch ( IndexOutOfBoundsException e ) { log . error ( "Invalid memory location specified" ) ; } return data ; }
tr	8	@ Override public void actionPerformed ( ActionEvent event ) { dialogResult = ( event . getActionCommand ( ) . equals ( "ok" ) ) ; setVisible ( false ) ; }
tr	8	public ImageUtilsForm ( ImageHandler pOps , ImageData curData ) { this . pOps = pOps ; this . curData = curData ; initComponents ( ) ; setResizable ( false ) ; renameLabels ( ) ; }
tr	6	static int modInverse ( int a , int mod ) { int [ ] xy = new int [ 2 ] ; if ( extgcd ( a , mod , xy ) != 1 ) throw new ArithmeticException ( "no inverse exsits" ) ; return ( mod + xy [ 0 ] % mod ) % mod ; }
tr	5	private void limpiarCampos ( ) { this . txtNumeroCaballo . setText ( "" ) ; this . txtDividendo . setText ( "" ) ; this . lblMensaje . setText ( "" ) ; }
tr	7	public static boolean isDouble ( String s ) { try { double x = double . parseDouble ( s ) ; return true ; } catch ( NumberFormatException e ) { return false ; } }
tr	5	public void keyReleased ( KeyEvent e ) { mouseClicked ( ev ) ; }
tr	4	@ Override public String toString ( ) { return "Pagina [nombre: " + nombre + "]" ; }
tr	3	@ Override public void setHeight ( float height ) { this . height = height ; }
tr	5	public Tweet setHashtagEntities ( List < HashtagEntity > hashtagEntities ) { this . hashtagEntities = hashtagEntities ; return this ; }
tr	8	public boolean inGameState ( String state ) { for ( int i = gamestate . size ( ) - 1 ; i >= 0 ; i -- ) { if ( ( ( String ) gamestate . elementAt ( i ) ) . equals ( state ) ) return true ; } return false ; }
tr	7	public void addChangeListener ( ChangeListener listener ) { Objects . requireNonNull ( listener ) ; listeners . add ( listener ) ; }
tr	1	private Singleton1 ( ) { }
tr	2	public char getChar ( ) { return this . character ; }
tr	5	public void horizontalAlignCenter ( int y1 , int y2 ) { this . setY ( y1 + ( y2 - y1 ) / 2 - this . getHeight ( ) / 2 ) ; }
tr	8	public void insertAtEnd ( int element ) { SNode newNode = new SNode ( ) ; newNode . data = element ; if ( HEADER == null ) { HEADER = newNode ; newNode . next = HEADER ; } else { SNode current = HEADER ; while ( current . next != HEADER ) current = current . next ; current . next = newNode ; newNode . next = HEADER ; } }
tr	5	public void addValue ( Object value ) { values_ . add ( value ) ; }
tr	8	public Tile ( Status iv_status ) { this . initTile ( iv_status ) ; this . shipStatus = Ship . Type . NOSHIP ; }
tr	9	public List < User > getFriends ( String id , int page ) throws WeiboException { return getFriendsStatuses ( id , new Paging ( page ) ) ; }
tr	6	public NQuad next ( ) throws IOException { NQuad result = this . buffered ; this . preFetch ( ) ; return result ; }
tr	6	public static void main ( String [ ] args ) { CountingSort sort = new CountingSort ( ) ; sort . process ( ) ; }
tr	5	public Object getElementAt ( int index ) { return model . toArray ( ) [ index ] ; }
tr	10	@ SuppressWarnings ( "unused" ) private void cmdLSTOPIC ( String input ) { Topic [ ] topicList = Utils . fromJSON ( input , Topic [ ] . class ) ; gui . showTopicList ( topicList ) ; }
tr	10	public void swapInt ( int [ ] data , int from , int to ) { if ( from < 0 || from >= data . length || to < 0 || to > data . length ) { System . out . println ( "Swap Error!" ) ; throw new IndexOutOfBoundsException ( "Swap Error!" ) ; } if ( from == to ) { return ; } int tmp = data [ from ] ; data [ from ] = data [ to ] ; data [ to ] = tmp ; }
tr	6	@ Override public String toPrint ( ) { return "<DecVarNode>" + "<VarName>" + varName + "</VarName><VarType>" + varType . toPrint ( ) + "</VarType><VarValue>" + value . toPrint ( ) + "</VarValue>" + "</DecVarNode>" ; }
tr	7	public boolean equals ( Object o ) { if ( o == null || ! ( o instanceof Tir ) ) return false ; Tir tmp = ( Tir ) o ; if ( ! tmp . position . equals ( position ) ) return false ; if ( tmp . joueur != joueur ) return false ; return true ; }
tr	10	private void waitABit ( String message ) { try { Thread . sleep ( 10000 ) ; System . out . println ( message ) ; } catch ( InterruptedException e ) { } }
tr	5	public List < Producer > getItemsAvailableSelectMany ( ) { return getFacade ( ) . findAll ( ) ; }
tr	6	public void setKeys ( String [ ] keys ) { this . keys = new ArrayList < String > ( Arrays . asList ( keys ) ) ; }
tr	6	public void commute ( DateTime leaveHome , DateTime workStart ) { strategy . execute ( leaveHome , workStart ) ; }
tr	1	public URLValueCreator ( ) { super ( ) ; }
tr	10	public RegisterUserWorker ( CaptchaPanel cp , String username , String password , String key , String text ) { this . cp = cp ; this . login = username ; this . password = password ; this . key = key ; this . ans = text ; }
tr	10	private void moveElementTo ( GameBoardElement element , Position newPosition ) { positionLookup . remove ( element . getCurrentPosition ( ) ) ; element . setPosition ( newPosition ) ; positionLookup . put ( newPosition , element ) ; }
tr	1	protected RandomPlayer ( ) { }
tr	7	public void remove ( Object element ) { int i = indexOf ( element ) ; if ( - 1 != i ) { set [ i ] = null ; -- occupied ; } }
tr	1	public synchronized void play ( ) { play ( 1.0 ) ; }
tr	4	public JPreviousIcon ( int width , int height ) { setDimension ( width , height ) ; }
tr	7	public String toString ( ) { try { return [ + join ( " " ) + ] ; } catch ( Exception e ) { return null ; } }
tr	5	public ApnsServiceBuilder withDelegate ( ApnsDelegate delegate ) { this . delegate = delegate == null ? ApnsDelegate . EMPTY : delegate ; return this ; }
tr	4	private SerializationManager ( ) { if ( instance != null ) throw new IllegalStateException ( "Already instantiated" ) ; registerBuiltInSerializers ( ) ; }
tr	7	public DashedVerticalLine dashedVerticalLineInstance ( ) { LineObject lineObject = new LineObject ( ) ; DashedVerticalLine dashedVerticalLine = lineObject . dashedVerticalLineInstance ( ) ; objectsInstance ( ) . add ( lineObject ) ; return dashedVerticalLine ; }
tr	9	@ Test public void equalsTest ( ) { assertTrue ( d . equals ( d1 ) ) ; assertTrue ( d1 . equals ( d ) ) ; assertTrue ( d . equals ( d2 ) ) ; assertTrue ( d1 . equals ( d2 ) ) ; assertTrue ( ! d . equals ( d3 ) ) ; assertTrue ( ! d4 . equals ( d3 ) ) ; }
tr	10	public static ResultSet getSearchResults ( String string ) throws SQLException { PreparedStatement stm = conn . prepareStatement ( string ) ; return stm . executeQuery ( ) ; }
tr	5	public DutchAuctionBehaviour ( final AuctionAgent agent , final AuctionData auctionData ) { super ( agent , auctionData ) ; }
tr	7	private void updateArmor ( DocumentEvent de ) { vitals . armor = txtArmor . getText ( ) ; }
tr	7	private static MidiEvent createNoteOffEvent ( int nKey , long lTick ) { return createNoteEvent ( ShortMessage . NOTE_OFF , nKey , 0 , lTick ) ; }
tr	7	public static void printlnDebug ( String debugString ) { if ( SHOW_DEBUG ) { System . out . println ( debugString ) ; } }
tr	9	public DatabaseManagementMainForm ( Component c ) { initComponents ( ) ; setLocationRelativeTo ( c ) ; this . dataIO = new DatabaseIO ( ) ; loadDB ( ) ; setListArrangement ( ) ; }
tr	2	public double getPriceLevel3 ( ) { return priceLevel3 ; }
tr	10	public static void main ( String [ ] args ) { javax . swing . SwingUtilities . invokeLater ( new Runnable ( ) { public void run ( ) { createAndStartGui ( ) ; } } ) ; }
tr	4	public OperacionNumerica ( Lista sentencias ) { super ( sentencias ) ; setPosfijo ( ) ; }
tr	6	public MnuDictionary ( FrmMainWindowDictionary frmMainWindow ) { this . frmMainWindow = frmMainWindow ; this . add ( getMnuFile ( ) ) ; this . add ( getMnuCoise ( ) ) ; }
tr	10	private static void printDataCount ( DataCount < String > [ ] counts ) { for ( DataCount < String > c : counts ) { System . out . println ( c . count + "\t" + c . data ) ; } }
tr	5	@ Override public boolean getDebug ( ) { return plugin . getConfig ( ) . getBoolean ( "debug" , true ) ; }
tr	6	@ Override public void exitELogico ( @ NotNull EnquantoParser . ELogicoContext ctx ) { }
tr	10	public static void main ( String args [ ] ) { String invoer = "3 4 5 + *" ; PostFixCalculator pf = new PostFixCalculator ( invoer ) ; System . out . println ( "uitvoer is : " + pf . getResultaat ( ) ) ; }
tr	10	private Connection getConnection ( String sqlUserName , String sqlUserPassword ) throws SQLException { return DriverManager . getConnection ( "jdbc:mysql://" + serverAddress + ":" + PORT + "/" + DATABASE , sqlUserName , sqlUserPassword ) ; }
tr	6	public static boolean isPalindrome ( String s , int l , int r ) { while ( l < r ) { if ( s . charAt ( l ) != s . charAt ( r ) ) { return false ; } l ++ ; r -- ; } return true ; }
tr	3	public StringBuffer getResult ( ) { return result ; }
tr	1	public ExitKiosk ( ) { }
tr	2	public int getKeyId ( ) { return keyId ; }
tr	9	@ Override public void mouseDragged ( MouseEvent e ) { mouseMoved ( e . getX ( ) , e . getY ( ) , MouseState . CLICK ) ; }
tr	8	public MaxSum ( int [ ] [ ] array ) { this . array = array ; this . numbersInMax = new ArrayList < Integer > ( ) ; this . maxSum = array [ 0 ] [ 0 ] ; numbersInMax . add ( maxSum ) ; findMax ( ) ; }
tr	4	@ Override public String toString ( ) { return "Dominio.Ausencia[ id=" + id + " ]" ; }
tr	7	@ Override public void controlChange ( ShortMessage event ) { System . out . println ( "la" ) ; }
tr	8	public static void main ( String [ ] args ) throws ClassNotFoundException , IOException , SQLException { BaseDeDonnees bd = new BaseDeDonnees ( ) ; }
tr	2	@ Override public boolean esProducto ( ) { return false ; }
tr	6	@ Override public SubSystemNames getSubSystem ( String subSystemId ) { return getValueOf ( subSystemId ) ; }
tr	1	public void dispose ( ) { }
tr	6	public void reanudarSonidos ( ) { for ( Sonido sonido : sonidos ) { if ( sonido . isAlive ( ) ) sonido . play ( ) ; } }
tr	4	public void setInformer ( Activity informer ) { _informer = informer ; }
tr	10	@ Override public NetState computeState ( Net netName ) { int index = pins . get ( 0 ) . getIndexOf ( netName ) ; return pins . get ( 1 ) . getNetState ( index ) ; }
tr	3	public PackedWorld ( PackedWorld prev ) { super ( prev ) ; cells = 0 ; }
tr	6	@ Override public String toString ( ) { return String . format ( "Service Id: %d.\nHas times: %s." , this . id , this . times ) ; }
tr	3	public void setHasTitle ( boolean param ) { hasTitle = param ; }
tr	2	public float getX ( ) { return x ; }
tr	3	public BufferedImage getImage ( ) { return image ; }
tr	5	public static < T > Enumeration < T > cast ( Enumeration < ? > p , class < T > cls ) { return ( Enumeration < T > ) p ; }
tr	1	public OptionsControl ( ) { }
tr	1	public boolean reversible ( ) { return false ; }
tr	3	public int getBlankPosition ( ) { return mPosition < HORIZONTAL_BLANK ? mPosition : HORIZONTAL_BLANK - 1 ; }
tr	8	public YamlConfigurationFile ( File file , YamlStyle style , boolean ignoreNotFound ) { super ( new HashMap < Object , Object > ( ) , style ) ; this . file = file ; this . ignoreNotFound = ignoreNotFound ; }
tr	3	@ Override public void close ( ) { this . smartManager . close ( ) ; }
tr	2	@ Test public void testFree ( ) { }
tr	6	public double getUnnormalisedInterpolatedHeightAt ( Vec pp ) { return getInterpolatedHeightAt ( pp ) * range + min ; }
tr	5	private static int findSmallest ( int remA , int remB , int remC ) { int smallest = remC ; if ( remB <= smallest ) { smallest = remB ; } if ( remA <= smallest ) { smallest = remA ; } return smallest ; }
tr	9	public static void main ( String [ ] args ) { junit . textui . TestRunner . run ( new TestSuite ( TestBootstrapXmlTests . class ) ) ; }
tr	6	@ Override public void serialize ( UBJOutputStream out ) throws IOException { writeValue ( out , this ) ; }
tr	10	public BeatController ( BeatModelInterface model ) { this . model = model ; djView = new DJView ( this , model ) ; djView . createView ( ) ; djView . createControls ( ) ; djView . disableStopMenuItem ( ) ; djView . enableStartMenuItem ( ) ; model . initialize ( ) ; }
tr	3	public OclParseException ( String message ) { super ( message ) ; }
tr	8	@ Override public Object clone ( ) { return new CharArrayWrapper ( Arrays . copyOf ( getData ( ) , getData ( ) . length ) ) ; }
tr	6	public void set ( int index , Object element ) throws illegalIndexException { if ( index < 0 ) { throw new illegalIndexException ( ) ; } tablica_stosu [ index ] = element ; }
tr	3	public Make ( Model model ) { super ( model ) ; }
tr	7	public void noSuchSymbol ( final Name name , final Tree tree ) { log ( new NoSuchSymbolReport ( name , tree ) ) ; }
tr	5	public void logout ( String username ) { sessions . removeSession ( username ) ; }
tr	7	public void processEvent ( AWTEvent e ) { if ( e . getID ( ) == Event . WINDOW_DESTROY ) { dispose ( ) ; } else { super . processEvent ( e ) ; } }
tr	3	public ServerThread ( Socket client ) { this . client = client ; }
tr	6	private static < T > boolean isAllElementsNull ( List < T > list ) { for ( Object object : list ) { if ( object != null ) return false ; } return true ; }
tr	3	public void setGame ( Game game ) { this . game = game ; }
tr	6	private final void extractArcCodeP ( long code , int [ ] x ) { code = ( code >> flagBits ) >> numArcFeatBits ; x [ 0 ] = ( int ) ( code & ( ( 1 << tagNumBits ) - 1 ) ) ; }
tr	9	private Object readCharArray ( Input input , int length ) { char [ ] array = new char [ length ] ; addReferenceForDeserialization ( array ) ; for ( int i = 0 ; i < length ; i ++ ) { array [ i ] = input . readChar ( ) ; } return array ; }
tr	10	TablaUsuarios ( Empresa e ) { this . modelApp = e ; this . nombresColumnas = new String [ ] { "Codigo" , "Nombre" , "Cargo" } ; this . filasColumnasTabla = new Object [ 0 ] [ 3 ] ; this . dependientes = new ArrayList ( ) ; }
tr	2	public Sequence ( ) { count = 0 ; }
tr	1	public Downloader ( ) { }
tr	4	@ Override public Controller getController ( ) { return ctrl ; }
tr	7	public final int getCount ( ) { int ret = 0 ; String count = get ( "count_all_games" ) ; if ( count != null ) { ret = Integer . parseInt ( count ) ; } return ret ; }
tr	2	public static boolean isLeapYear ( int y ) { if ( ( y % 4 == 0 && y % 100 != 100 ) || y % 400 == 0 ) return true ; else return false ; }
tr	8	public TMDrillModel TMcleanByDate ( String start , String end ) { TMDrillModel tmDrillModel = tweetHandler . TMgetAllTweetsByDate ( start , end ) ; return tmDrillModel ; }
tr	4	@ Test @ Ignore public void testQueueHistory ( ) { fail ( "Not yet implemented" ) ; }
tr	4	public void resetVariableList ( ) { repaintVariableList ( new ArrayList < Variable > ( ) ) ; }
tr	6	@ Override public String countGroups ( String username , String password ) { return mytxtbuddySoapApi . countGroups ( username , password ) ; }
tr	2	public int getExecComplClock ( ) { return ExecComplClock ; }
tr	6	public OrderEvent ( int id , String table , int value , String action ) { this . id = id ; this . table = table ; this . value = value ; this . action = action ; }
tr	6	private void alustaPalikkaHistoria ( ) { palikkaHistoria . add ( Tetromino . Z ) ; palikkaHistoria . add ( Tetromino . S ) ; palikkaHistoria . add ( Tetromino . Z ) ; palikkaHistoria . add ( Tetromino . S ) ; }
tr	5	public Map < Integer , Clock > getClockMapping ( ) { return clockMapping ; }
tr	8	private Meter getSelectedMeter ( ) { Account temp = getSelectedAccount ( ) ; if ( temp != null ) { Meter m = temp . getMeter ( getSelectedMeterID ( ) ) ; return m ; } else return null ; }
tr	2	@ Override public boolean isAccountedIntoSimulation ( ) { return false ; }
tr	3	@ Test public void testStationInList ( ) throws Exception { }
tr	4	public void setHabs ( Set < TipusHabInformation > habs ) { this . habs = habs ; }
tr	3	public PurchaseOrderInformation getPurchaseOrderInformation ( ) { return purchaseOrderInformation ; }
tr	10	@ Override protected boolean podeSeMover ( Posicao origem , Posicao destino , TabuleiroXadrez tabuleiro ) { if ( super . podeSeMover ( origem , destino , tabuleiro ) ) if ( this . medeDeslocamentoPeca ( origem . getLinha ( ) , destino . getLinha ( ) ) == 1 & this . medeDeslocamentoPeca ( origem . getColuna ( ) , destino . getColuna ( ) ) == 2 | this . medeDeslocamentoPeca ( origem . getLinha ( ) , destino . getLinha ( ) ) == 2 & this . medeDeslocamentoPeca ( origem . getColuna ( ) , destino . getColuna ( ) ) == 1 ) return true ; return false ; }
tr	7	@ Override public TO_VALUE put ( KEY key , TO_VALUE value ) { throw new UnsupportedOperationException ( ) ; }
tr	3	public Exp getCondition ( ) { return condition ; }
tr	6	public void finish ( int sum ) throws Exception { for ( Summarizer s : sums ) s . finish ( sum ) ; }
tr	8	static void writeFile ( String path , String contents ) throws IOException { FileUtils . writeStringToFile ( new File ( path ) , contents ) ; }
tr	4	public void updateString ( String level ) { lastProps = level ; }
tr	1	public Prenotazione ( ) { super ( ) ; }
tr	10	public synchronized void removeProperty ( ApplicationProperties key ) { final Object property = appProperties . remove ( key . toString ( ) ) ; if ( property != null ) { setChanged ( ) ; notifyObservers ( ) ; } }
tr	4	public List < Node > getToNodes ( ) { return toNodes ; }
tr	1	public Project ( ) { }
tr	5	@ Override public void fileRemoved ( FileRemovedEvent event ) throws InterruptedException { }
tr	8	public Object [ ] getData ( int index ) { Object [ ] data = new Object [ model . getColumnCount ( ) ] ; for ( int i = 0 ; i < model . getColumnCount ( ) ; i ++ ) { data [ i ] = model . getValueAt ( index , i ) ; } return data ; }
tr	5	public boolean offerFirst ( E e ) { if ( contains ( e ) ) { return false ; } linkFirst ( e ) ; return true ; }
tr	10	public void hurt ( double amount , Entity entity ) { if ( entity instanceof Player ) { Player player = ( Player ) entity ; player . lives -= amount ; if ( player . lives <= 0 ) { player . die ( ) ; } } else if ( entity instanceof Mob ) { Mob mob = ( Mob ) entity ; mob . lives -= amount ; if ( mob . lives - amount <= 0 ) die ( mob ) ; } }
tr	10	public void addWordFeature ( long code , double value , FeatureVector mat ) { int id = wordAlphabet . lookupIndex ( code , numWordFeats ) ; if ( id >= 0 ) { mat . addEntry ( id , value ) ; if ( id == numWordFeats ) ++ numWordFeats ; } }
tr	7	public void setPublicKey ( RSAPublicKey publicKey ) { RSAPublicKey oldPublicKey = this . publicKey ; this . publicKey = publicKey ; propertyChangeSupport . firePropertyChange ( PROP_PUBLICKEY , oldPublicKey , publicKey ) ; }
tr	7	public static void main ( String [ ] args ) { System . out . println ( powerset ( "" ) ) ; System . out . println ( powerset ( "1" ) ) ; System . out . println ( powerset ( "12" ) ) ; System . out . println ( powerset ( "123" ) ) ; System . out . println ( powerset ( "1234" ) ) ; System . out . println ( powerset ( "abcdefghij" ) ) ; }
tr	8	public boolean isCheck ( Player player ) { switch ( player ) { case BLACK : return this . blackCheck ; case WHITE : return this . whiteCheck ; default : throw new IllegalArgumentException ( ) ; } }
tr	2	public boolean isValidChromosome ( ) { return validChromosome ; }
tr	9	public CategoryBean ( CategoryObject categoryObject ) { this ( ) ; categoryId = categoryObject . getCategoryId ( ) ; categoryCode = categoryObject . getCategoryCode ( ) ; categoryName = categoryObject . getCategoryName ( ) ; }
tr	8	public AudioInputStream getAudioInputStream ( String filename ) { try { return getAudioInputStream ( new FileInputStream ( filename ) ) ; } catch ( IOException ex ) { ex . printStackTrace ( ) ; return null ; } }
tr	8	public Response ( String responseText , int statusCode ) { this . responseText = responseText ; this . statusCode = statusCode ; created_on = TimeUtility . getNowByGMT ( ) . getTime ( ) ; }
tr	7	public synchronized void destroyNetworkDriver ( String host , int port ) { String networkName = host + ":" + port ; print ( "Removing network driver " + networkName ) ; destroyIdentifiedDrivers ( networkName ) ; }
tr	9	private void testOneSpiral ( Integer [ ] [ ] arr , String expected ) { Matrix < Integer > mat = new Matrix < Integer > ( arr ) ; assertEquals ( expected , mat . printSpiral ( ) ) ; }
tr	7	@ Override public void setText ( String Text ) { this . SetText ( Text , Color . white ) ; }
tr	5	public java . lang . String getInstrument ( ) { return instrument ; }
tr	6	private void resize ( int capacity ) { assert capacity > heapSize ; int [ ] temp = new int [ capacity ] ; for ( int i = 1 ; i <= heapSize ; i ++ ) temp [ i ] = this . elements [ i ] ; this . elements = temp ; }
tr	1	public SensorHolder ( ) { }
tr	2	public void setC ( float C ) { this . C = C ; }
tr	7	public QuestionDescription getQuestionDesc ( int num ) { return DaoFactory . getInstance ( ) . getQuestionDao ( ) . find ( num ) ; }
tr	4	public void reset ( ) { binCode . clear ( ) ; erorrs . clear ( ) ; }
tr	8	@ Override public void load ( PermissionType type , UUID uuid ) throws DataLoadFailedException { load ( type , uuid . toString ( ) ) ; }
tr	8	private void jMenuItem2ActionPerformed ( java . awt . event . ActionEvent evt ) { mostrarFormulario ( frmcatetob . class ) ; }
tr	8	@ Override public int compareTo ( PQNode < K , V > o ) { return value . compareTo ( o . getValue ( ) ) ; }
tr	10	public String getType ( VesselType type ) { switch ( type ) { case SWIMMER : return "1 - Human (swimmer)" ; case SPEED_BOAT : return "2 - Speed Boat" ; case FISHING_BOAT : return "3 - Fishing Boat" ; case CARGO_BOAT : return "4 - Cargo Vessel" ; case PASSENGER_VESSEL : return "5 - Passenger Vessel" ; case UNKNOWN : return "6 - Unknown" ; default : return "6 - Unknown" ; } }
tr	4	public Synapse ( INeuron presynaptic , INeuron postsynaptic ) { this ( presynaptic , postsynaptic , 0 ) ; }
tr	4	@ Override public INode getCopy ( ) { return new PlayerCanWinInTwoRounds ( ) ; }
tr	10	public void delete ( Tongiao persistentInstance ) { log . debug ( "deleting Tongiao instance" ) ; try { sessionFactory . getCurrentSession ( ) . delete ( persistentInstance ) ; log . debug ( "delete successful" ) ; } catch ( RuntimeException re ) { log . error ( "delete failed" , re ) ; throw re ; } }
tr	1	private OptionBuilder ( ) { }
tr	3	public boolean targetsAir ( ) { return targetsAir_native ( pointer ) ; }
tr	5	public BN6BattleProvider ( RandomizerContext context , BattleProducer producer ) { super ( context , producer ) ; }
tr	2	public void dropDatabase ( ) { db . dropDatabase ( ) ; }
tr	1	private ConfigPool ( ) { }
tr	4	public int calculateXP ( ) { int temp = ( int ) ( this . getXpModifier ( ) * this . getLevel ( ) ) ; return temp ; }
tr	1	public SlimeGame ( ) { super ( "Slime Game" ) ; }
tr	6	@ Override public InputStream getInputStream ( ) throws IOException { switch ( failValue ) { case 0 : return new InputStream ( ) { @ Override public int read ( ) throws IOException { return 1 ; } } ; case 1 : return null ; default : throw new IOException ( ) ; } }
tr	1	public InboundSmsPricing ( ) { }
tr	2	public int getMode ( ) { return MODE ; }
tr	7	public OtpNode ( final String node , final String cookie , final int port ) throws IOException { super ( node , cookie ) ; init ( port ) ; }
tr	6	private void setElements ( ) { exitJB = new JButton ( "Exit" ) ; showBusesJB = new JButton ( "Show Buses" ) ; showGraphicSystemJB = new JButton ( "Show Graphic System" ) ; add ( showBusesJB ) ; add ( showGraphicSystemJB ) ; add ( exitJB ) ; }
tr	1	public void AlteraAvaliacao ( ) { }
tr	4	@ Override public void removeListDataListener ( ListDataListener arg0 ) { }
tr	9	public RankCompareStep ( byte [ ] values , int ranks [ ] , int index1 , int index2 ) { super ( PaintTimes . BUBBLE_COMPARE , values , Colors . BAR_BUBBLE_COMPARED , index1 , index2 ) ; this . index1 = index1 ; this . index2 = index2 ; this . values = values ; this . ranks = ranks ; }
tr	1	public void reset ( ) { }
tr	2	public void setStatusToRequiresAuthorizedClient_401 ( ) { this . status = 401 ; }
tr	3	public String getErrCode ( ) { return errCode ; }
tr	2	public TARequestDetails createTARequestDetails ( ) { return new TARequestDetails ( ) ; }
tr	6	public void add_bits ( int bitstring , int length ) { int bitmask = 1 << ( length - 1 ) ; do if ( ( ( crc & 8000 ) == 0 ) ^ ( ( bitstring & bitmask ) == 0 ) ) { crc <<= 1 ; crc ^= polynomial ; } else crc <<= 1 ; while ( ( bitmask >>>= 1 ) != 0 ) ; }
tr	5	public Node ( K item , Node < K > prev , Node < K > next ) { this . item = item ; this . prev = prev ; this . next = next ; }
tr	6	public Command ( String newCommand , String ... newArguments ) { command = newCommand ; arguments = newArguments ; }
tr	6	public String informaNomeJogador ( int posicao ) { if ( posicao == 1 ) { return jogador1 . obterNome ( ) ; } else { return jogador2 . obterNome ( ) ; } }
tr	10	private byte [ ] fillEightByte ( byte [ ] rawByte ) { int rawByteLength = rawByte . length ; int byteamount = rawByteLength / 8 ; if ( rawByteLength % 8 != 0 ) { byteamount = byteamount + 1 ; } byte [ ] rawbytebyeightbyte = new byte [ byteamount * 8 ] ; for ( int i = 0 ; i < rawbytebyeightbyte . length ; i ++ ) { if ( i + 1 > rawByteLength ) { rawbytebyeightbyte [ i ] = Integer . decode ( "0x00" ) . byteValue ( ) ; } else { rawbytebyeightbyte [ i ] = rawByte [ i ] ; } } return rawbytebyeightbyte ; }
tr	6	public byte [ ] getData ( ) { byte [ ] actualData = new byte [ position ] ; System . arraycopy ( data , 0 , actualData , 0 , position ) ; return actualData ; }
tr	5	public void removeView ( TEView view ) { this . collection . remove ( view ) ; }
tr	4	private void calculateMissing ( ) { if ( totalBytes > - 1 ) { if ( usedBytes > - 1 && freeBytes == - 1 ) { freeBytes = totalBytes - usedBytes ; } else if ( usedBytes == - 1 && freeBytes > - 1 ) { usedBytes = totalBytes - freeBytes ; } } }
tr	1	public int cdlGravestoneDojiLookback ( ) { return super . cdlGravestoneDojiLookback ( ) ; }
tr	7	public static void s ( String message ) { process ( new LogRecord ( LogType . SYSTEM , message ) ) ; }
tr	1	public Table ( ) { }
tr	6	@ Override public void enterExpr_methodCall ( @ NotNull DecafParser . Expr_methodCallContext ctx ) { }
tr	3	public void setCodTipoPagamento ( Integer codTipoPagamento ) { this . codTipoPagamento = codTipoPagamento ; }
tr	2	public int getY ( ) { return yCoordinate ; }
tr	10	public void testGetAverageLinksBandwidthLoad ( ) { substrateNetwork . setHashLinks ( physicalLinks ) ; for ( PhysicalLink link : physicalLinks . values ( ) ) { link . addBandwidthLoad ( 0.2 ) ; } assertEquals ( 0.04 , substrateNetwork . getAverageLinksBandwidthLoad ( ) ) ; }
tr	1	static float [ ] [ ] zero ( ) { return new float [ ] [ ] { { 0 , 0 , 0 } , { 0 , 0 , 0 } , { 0 , 0 , 0 } } ; }
tr	6	@ Override public String toString ( ) { return x + "/" + y + "/" + z ; }
tr	2	public void setNeedsPass ( boolean needsPass ) { this . needsPass = needsPass ; }
tr	8	@ Override public void itemStateChanged ( ItemEvent e ) { colorButton . setEnabled ( btnOpac . isSelected ( ) ) ; }
tr	8	public void enable ( String name ) throws CommandException { new EnableCommand ( environment , DEFAULT_TARGET , name ) . execute ( ) ; }
tr	5	public Dimension getOriginalSize ( ) { Dimension size = new Dimension ( originalWidth , originalHeight ) ; return size ; }
tr	3	@ After public void tearDown ( ) throws Exception { }
tr	10	public static void main ( String [ ] args ) { List < String > set = new ArrayList < > ( ) ; permuteWithReps ( "abbc" , "" , set ) ; System . out . println ( set ) ; }
tr	3	public void actionPerformed ( ActionEvent ex ) { }
tr	8	public FileChangeHandlers ( Set < Path > createdFiles , Set < Path > modifiedFiles , Set < RenamedFile > renamedFiles , Set < Path > deletedFiles ) { this . createdFiles = createdFiles ; this . modifiedFiles = modifiedFiles ; this . renamedFiles = renamedFiles ; this . deletedFiles = deletedFiles ; }
tr	7	private static void parseErrorMessagePacket ( byte [ ] data ) { int pos = 1 ; while ( data [ pos ] != 0 ) System . out . print ( ( char ) data [ pos ++ ] ) ; System . out . println ( ) ; }
tr	10	public static double getFloat ( Object o , float def ) { try { if ( o == null ) return def ; if ( o instanceof Number ) return ( ( Number ) o ) . floatValue ( ) ; } catch ( NumberFormatException e ) { } Log . w ( "Object cast error - cannot cast " + o + " to Float." ) ; return def ; }
tr	6	public static boolean isPrime ( int checkNumber ) { double root = Math . sqrt ( checkNumber ) ; for ( int i = 2 ; i <= root ; i ++ ) { if ( checkNumber % i == 0 ) { return false ; } } return true ; }
tr	8	public static final int necessaryRepairSymbols ( int K , int overhead , float loss ) { float decimal_loss = loss / 100 ; float temp_var = decimal_loss ; temp_var *= K ; temp_var += overhead ; temp_var /= ( 1 - decimal_loss ) ; return ( int ) Math . ceil ( temp_var ) ; }
tr	4	@ Override public String getVarName ( ) { return this . name ; }
tr	5	final void supplementSeed ( int [ ] seed ) { for ( int i = 0 ; i < seed . length ; i ++ ) mem [ i % mem . length ] ^= seed [ i ] ; }
tr	9	public Context execute ( ) throws Exception { for ( Insert insert : inserts ) { insert . execute ( ) ; } for ( Loop loop : loops ) { loop . execute ( ) ; } return this ; }
tr	9	protected void setUp ( ) { td = new TestData ( ) ; td . createAndStoreOrganData ( ) ; td . createAndStorePropertyData ( ) ; testtissues = td . createTissueSampleData ( ) ; ta = td . getTsa ( ) ; }
tr	2	@ Override public void performCSE ( ) { return ; }
tr	10	@ Override public int hashCode ( ) { final int prime = 31 ; int result = 1 ; result = prime * result + ( ( AlcoholPolicy == null ) ? 0 : AlcoholPolicy . hashCode ( ) ) ; result = prime * result + ( ( CancellationDeadLine == null ) ? 0 : CancellationDeadLine . hashCode ( ) ) ; result = prime * result + ( ( CancellationPenalty == null ) ? 0 : CancellationPenalty . hashCode ( ) ) ; result = prime * result + ( ( CheckInTime == null ) ? 0 : CheckInTime . hashCode ( ) ) ; result = prime * result + ( ( CheckOutTime == null ) ? 0 : CheckOutTime . hashCode ( ) ) ; result = prime * result + ( ( SmokingPolicy == null ) ? 0 : SmokingPolicy . hashCode ( ) ) ; return result ; }
tr	10	static Window getWindowForComponent ( Component parentComponent ) throws HeadlessException { if ( parentComponent == null ) return JOptionPane . getRootFrame ( ) ; if ( parentComponent instanceof Frame || parentComponent instanceof Dialog ) return ( Window ) parentComponent ; return getWindowForComponent ( parentComponent . getParent ( ) ) ; }
tr	4	@ Override public INode getCopy ( ) { return new EnemyCanWinInTwoRounds ( ) ; }
tr	2	public void setExtend ( float extend ) { this . extend = extend ; }
tr	7	protected final int getParameter ( String key ) { return parameters . containsKey ( key ) ? parameters . get ( key ) : NOT_SET ; }
tr	4	private void exceptionOccured ( IOException exp ) { possibleException = exp ; }
tr	9	@ BeforeMethod public void setUp ( ) throws Exception { MockitoAnnotations . initMocks ( this ) ; crudService = Mockito . mock ( CelebPlannerCrudService . class ) ; }
tr	9	public static boolean hasSubmitParameter ( ServletRequest request , String name ) { assert . notNull ( request , "Request must not be null" ) ; if ( request . getParameter ( name ) != null ) { return true ; } for ( String suffix : SUBMIT_IMAGE_SUFFIXES ) { if ( request . getParameter ( name + suffix ) != null ) { return true ; } } return false ; }
tr	2	void start ( ) { cBg . start ( ) ; }
tr	5	public Waypoint ( double x , double y ) { this ( ) ; position = new Vec ( x , y ) ; }
tr	10	@ Override public void addEnd ( E elem ) { if ( size == 0 ) { createFirst ( elem ) ; return ; } GenNode < E > node = new GenNode < E > ( null , elem ) ; current . setNext ( node ) ; current = node ; ++ size ; }
tr	10	@ Test public void preOrderEmpty ( ) { final Iterable < String > traverser = Traversals . preOrder ( "A" , adjacencyFor ( empty ) ) ; assertTraversalContains ( traverser , "A" ) ; }
tr	6	public String load_public_key ( String NYM_ID ) { return otapiJNI . OTMadeEasy_load_public_key ( swigCPtr , this , NYM_ID ) ; }
tr	10	@ Override public String createAccount ( String owner ) { MyAccount acc = new MyAccount ( owner , "0-" + accounts . size ( ) + "-1" ) ; accounts . put ( acc . getNumber ( ) , acc ) ; return acc . getNumber ( ) ; }
tr	7	public void updatePaths ( ) { for ( int s = 1 ; s <= level . maxMobSize ; s ++ ) { pathingGraphs . get ( s - 1 ) . generate ( s , this ) ; } }
tr	1	protected boolean isFinished ( ) { return false ; }
tr	2	public long getItemId ( ) { return itemId ; }
tr	3	public void setId ( long value ) { this . id = value ; }
tr	6	public LatencyMonitor ( final int sampleSize , final TimeUnit timeUnit ) { this . samples = new ConcurrentCircularBuffer < long > ( long . class , sampleSize ) ; this . timeUnit = timeUnit ; }
tr	5	protected void addNotification ( final Notification notification ) { this . notifications . add ( notification ) ; }
tr	9	public static void message ( String text ) { LogFile . write ( text ) ; if ( show_thinking ) { System . out . println ( text ) ; } }
tr	10	public static String now ( ) { Calendar cal = Calendar . getInstance ( ) ; SimpleDateFormat sdf = new SimpleDateFormat ( DATE_FORMAT_NOW ) ; return sdf . format ( cal . getTime ( ) ) ; }
tr	8	private static void = ( int n , String a , String b ) { if ( a != null && a . equals ( b ) ) System . err . println ( "Case " + n + " passed." ) ; else System . err . println ( "Case " + n + " failed: expected \"" + b + "\"  received \"" + a + "\"." ) ; }
tr	2	public int getEndMinute ( ) { return endMinute ; }
tr	2	public double getX ( ) { return this . x ; }
tr	4	public FileSystemScanner ( String path ) { musicFolderPath = path ; }
tr	5	@ Override public Line getFirstLine ( ) { return this . getTitle ( ) . getLine ( ) ; }
tr	3	@ Override public String getPacketName ( ) { return "RekordyWynikow" ; }
tr	8	@ XmlElementDecl ( namespace = "com/firstdata/Merchant/gmfV3.10" , name = "FeeAmt" ) public JAXBElement < String > createFeeAmt ( String value ) { return new JAXBElement < String > ( _FeeAmt_QNAME , String . class , null , value ) ; }
tr	1	public TestModel ( ) { this ( null , null ) ; }
tr	3	public static BasicRelation getEquivalenceRelation ( ) { BasicRelation rel = new BasicRelation ( "=" ) ; return rel ; }
tr	1	public SubGrupo ( ) { }
tr	5	public String getMessage ( ) { return super . getMessage ( ) + SEPARATOR + getErrnoString ( ) + " [" + errno + "] " ; }
tr	7	public static float scalar ( Vector3f pv1 , Vector3f pv2 ) { return ( pv1 . x * pv2 . x ) + ( pv1 . y * pv2 . y ) + ( pv1 . z * pv2 . z ) ; }
tr	1	public int depth ( ) { return depth ; }
tr	6	public static void main ( String [ ] argv ) { KPIPrimitiveUsage test = new KPIPrimitiveUsage ( ) ; test . test_primitives ( ) ; }
tr	4	public void setCommonGrp ( CommonGrp value ) { this . commonGrp = value ; }
tr	3	public String getPhotoURL ( ) { return photoURL ; }
tr	7	public final String getText ( Level level ) { return this . iterator . getUTF8Text ( level . value ) ; }
tr	1	public MultiLabelPerceptronNERClassifier ( ) { }
tr	3	public T getData ( ) { return data ; }
tr	5	public String getConfirmarSenha ( ) { return String . copyValueOf ( this . textConfirmarSenha . getPassword ( ) ) ; }
tr	4	public static Scanner getInputFile ( ) { return CrazyConnectFour . inFile ; }
tr	10	public void setMV ( String s ) throws ADataException { if ( s == null ) { mv = null ; return ; } if ( ! ( s . equals ( MENTAL ) | s . equals ( VITAL ) | s . equals ( SUPEREGO ) | s . equals ( SUPERID ) ) ) throw new ADataException ( ) ; this . mv = s ; }
tr	8	private void uploadInputStream ( InputStream in ) throws IOException { upload ( this , new ProgressInputStream ( in , getProgressListener ( ) ) , UNKNOWN_LENGTH ) ; }
tr	6	public SWIGTYPE_p_std__mapT_std__string_std__string_t getThe_map ( ) { long cPtr = otapiJNI . StringMap_the_map_get ( swigCPtr , this ) ; return ( cPtr == 0 ) ? null : new SWIGTYPE_p_std__mapT_std__string_std__string_t ( cPtr , false ) ; }
tr	9	public LongLargeArray ( long length , long constantValue ) { this . type = LargeArrayType . double ; this . sizeof = 8 ; if ( length <= 0 ) { throw new IllegalArgumentException ( length + " is not a positive long value" ) ; } this . length = length ; this . isConstant = true ; this . data = new long [ ] { constantValue } ; }
tr	10	protected static String [ ] tokenize ( String input ) { if ( input == null ) { return new String [ 0 ] ; } StringTokenizer t = new StringTokenizer ( input ) ; int size = t . countTokens ( ) ; String strings [ ] = new String [ size ] ; for ( int i = 0 ; i < size ; i ++ ) { strings [ i ] = t . nextToken ( ) ; } return strings ; }
tr	10	public LocaleEditor ( ) { locale = Locale . getDefault ( ) ; locales = Calendar . getAvailableLocales ( ) ; length = locales . length ; localeStrings = new String [ length ] ; }
tr	10	private Object getRK ( CallFrame frame , int index , Prototype proto ) { int cindex = index - 256 ; if ( cindex < 0 ) return frame . get ( index ) ; else return proto . constants [ cindex ] ; }
tr	8	public PlayerReport ( UUID playerId , List < MatchReport > stat , String playerName ) { this . playerId = playerId ; this . stat = stat ; this . playerName = playerName ; }
tr	8	public Node ( String newItem , int newCount , Node linkValue ) { item = newItem ; count = newCount ; link = linkValue ; }
tr	2	public OfferGrp createOfferGrp ( ) { return new OfferGrp ( ) ; }
tr	3	public static RepositoryContato getInstance ( ) { if ( instance == null ) { instance = new RepositoryContato ( ) ; } return instance ; }
tr	5	public void getMoney ( long amount ) { System . out . println ( "\u5411\u62DB\u5546\u94F6\u884C\u53D6\u51FA\u91D1\u989D:" + amount ) ; }
tr	3	@ Override public String toString ( ) { return "la salida" ; }
tr	5	@ FXML private void handleFillShellButton ( ActionEvent event ) throws IOException { }
tr	8	private T [ ] subArray ( int begin , int end ) { T [ ] - = ( T [ ] ) new Comparable [ end - begin ] ; System . arraycopy ( heap , 1 , - , 0 , end - begin ) ; return - ; }
tr	3	public Iterator iterator ( ) { return new LItr ( ) ; }
tr	7	public String getDisplay ( ) { return String . format ( DISPLAY_PATTERN , temperature , humidity , pressure ) ; }
tr	5	public void setClose ( java . math . BigDecimal close ) { this . close = close ; }
tr	4	public void setStart ( String s ) { startingRoom = s ; }
tr	1	public Vecteur ( ) { super ( ) ; }
tr	9	public Forest ( ) { super ( "F" ) ; _cost . put ( MovementType . INFANTRY , 1 ) ; _cost . put ( MovementType . MECH , 1 ) ; _cost . put ( MovementType . TIRES , 2 ) ; _cost . put ( MovementType . TREAD , 3 ) ; _cost . put ( MovementType . AIR , 1 ) ; }
tr	2	public final int yystate ( ) { return zzLexicalState ; }
tr	6	public PlanBB ( int nc , String n , boolean fs ) { super ( nc , n ) ; fullSocial = fs ; }
tr	9	public void showDialog ( ) { org . i4qwee . chgk . trainer . new_brain . actionlisteners . MouseListener . setHandle ( false ) ; super . showDialog ( ) ; org . i4qwee . chgk . trainer . new_brain . actionlisteners . MouseListener . setHandle ( true ) ; }
tr	9	@ Override public Object creaUtente ( String nomeUtente , String passwordUtente ) throws UserExistsException { return myLogica . doCreaUtente ( nomeUtente , passwordUtente ) ; }
tr	10	@ Test public final void testWriteProperties_WhenPropertiesIsSizeZero ( ) { final File file = new File ( "mock.txt" ) ; final long originalSize = file . length ( ) ; file . write ( new OrderedProperties ( ) ) ; assertEquals ( originalSize , file . length ( ) ) ; file . delete ( ) ; }
tr	1	public Flujo ( ) { }
tr	3	public Player getTurnHolder ( ) { return gameTable . getTurnHolder ( ) ; }
tr	6	public boolean createNewFile ( String fileName ) throws IOException { return fileManager . createNewSystemFile ( fileName ) ; }
tr	6	private Matrix4f getParentMatrix ( ) { if ( parent != null && parent . hasChanged ( ) ) parentMatrix = parent . getTransformation ( ) ; return parentMatrix ; }
tr	4	public static void setDirectionalLight ( DirectionalLight directionalLight ) { WorldShader . directionalLight = directionalLight ; }
tr	8	@ Override public String toString ( ) { switch ( this ) { case uneEtoile : return "\u2605" ; case deuxEtoiles : return "\u2605\u2605" ; case troisEtoiles : return "\u2605\u2605\u2605" ; case quatreEtoiles : return "\u2605\u2605\u2605\u2605" ; case cinqEtoiles : return "\u2605\u2605\u2605\u2605\u2605" ; } return null ; }
tr	8	@ Override public void put ( Point point , double value ) { if ( value != 0.5 ) cells . put ( point , value ) ; else if ( cells . containsKey ( point ) ) { cells . remove ( point ) ; } }
tr	2	public static void resetCounter ( ) { counter = 0 ; }
tr	7	public void setCommand ( int slot , Command onCommand , Command offCommand ) { onCommands [ slot ] = onCommand ; offCommands [ slot ] = offCommand ; }
tr	6	public SVFieldCondition getCondition ( String sKey ) { return map . get ( sKey ) ; }
tr	9	public void fromString ( String str ) { Scanner scan = new Scanner ( str ) ; scoreP1 = scan . nextInt ( ) ; scoreP2 = scan . nextInt ( ) ; scan . close ( ) ; }
tr	9	public final void set ( double xl , double yl , double xh , double yh ) { boundaryLowX = xl ; boundaryLowY = yl ; boundaryHiX = xh ; boundaryHiY = yh ; }
tr	4	public BaseLight ( Vector3f color , float intensity ) { this . color = color ; this . intensity = intensity ; }
tr	7	@ Override protected Object [ ] getEstimatorParametersForEstimation ( ) { double min = Statistics . min ( this . ar ) ; double max = Statistics . max ( this . ar ) ; return new Object [ ] { min , max } ; }
tr	2	@ After public void tearDown ( ) { }
tr	3	public void increase ( ) throws RemoteException { counter ++ ; }
tr	3	public Color getForeground ( ) { return this . foreground ; }
tr	5	public void addManager ( ParkManager manager ) { this . managerList . add ( manager ) ; }
tr	5	public void setRememberBookmark ( boolean rememberBookmark ) { Dispatch . put ( this , "RememberBookmark" , new Variant ( rememberBookmark ) ) ; }
tr	3	public String getBankCountryCode ( ) { return bankCountryCode ; }
tr	8	@ Override protected String extractProviderUserId ( final AccessGrant accessGrant ) { if ( ! ( accessGrant instanceof ForcedotcomAccessGrant ) ) { throw new IllegalStateException ( "accessGrant has to be of type ForcedotcomAccessGrant" ) ; } return ( ( ForcedotcomAccessGrant ) accessGrant ) . getId ( ) ; }
tr	9	public SetTerm_IDList ( String name , ResultSet resultSet ) { this . rsSet = resultSet ; this . conn = new connection ( ) ; this . sqLconnection = this . conn . conn ( ) ; this . name = name ; }
tr	10	public boolean goThrough ( ) { System . out . println ( "You walk through the " + this . name ) ; Game . player . currentLocation = this . destination ; this . destination . printDescription ( ) ; return true ; }
tr	2	public final int getPercentCorrect ( ) { assert _statistics != null : "Question statistics is null" ; return _statistics . getPercentCorrect ( ) ; }
tr	2	public boolean isAck ( ) { return ack ; }
tr	9	private void miAppListActionPerformed ( java . awt . event . ActionEvent evt ) { AppointmentsWindow aw = new AppointmentsWindow ( ) ; aw . setVisible ( true ) ; }
tr	2	public void setAno ( int ano ) { this . ano = ano ; }
tr	5	public MenuRetornarPartida ( ) { super ( "Menu Partida" , new ArrayList < ItemMenu > ( ) { private static final long serialVersionUID = - 2202065529317389240 ; { add ( new ItemMenu ( "REINICIAR" , "Retorna uma partida" ) ) ; add ( new ItemMenu ( "APAGAR" , "Apagar uma partida" ) ) ; add ( new ItemMenu ( "RETORNAR" , "Retornar ao menu principal" ) ) ; } } ) ; }
tr	9	public Integer getIntData ( Document doc , String tagName ) { String data = getTextData ( doc , tagName ) ; if ( data == null ) { return null ; } else { return Integer . parseInt ( data ) ; } }
tr	10	public static void updateNumQuestions ( Quiz quiz ) { int n = quiz . numQuestions ( ) ; String update = "UPDATE quizzes SET numQuestions=" + n + " WHERE id=" + quiz . getId ( ) + ";" ; MyDB . updateDatabase ( update ) ; }
tr	5	public void put ( String key , String value ) { this . _fields . put ( key , value ) ; }
tr	9	@ Override public String toString ( ) { boolean isActive = player . isActive ( ) ; StringBuilder b = new StringBuilder ( ) ; b . append ( "<html>" ) ; if ( isPlaying ) b . append ( "<b>" ) ; if ( ! isActive ) b . append ( "<strike>" ) ; b . append ( player . toString ( ) ) ; if ( ! isActive ) b . append ( "</strike>" ) ; if ( isPlaying ) b . append ( "</b>" ) ; b . append ( "</html>" ) ; return b . toString ( ) ; }
tr	8	@ Test public void testHappyPathOnWordsWithPOS ( ) { assertEquals ( 0.8750 , rc . calcRelatednessOfWords ( nv1 + "#n" , nv2 + "#n" ) , 0.0001D ) ; assertEquals ( 0.0000 , rc . calcRelatednessOfWords ( nv1 + "#n" , nv2 + "#v" ) , 0.0001D ) ; assertEquals ( 0.0000 , rc . calcRelatednessOfWords ( nv1 + "#v" , nv2 + "#n" ) , 0.0001D ) ; assertEquals ( 0.8333 , rc . calcRelatednessOfWords ( nv1 + "#v" , nv2 + "#v" ) , 0.0001D ) ; assertEquals ( 0.0000 , rc . calcRelatednessOfWords ( nv1 + "#other" , nv2 + "#other" ) , 0.0001D ) ; }
tr	4	public static ArrayList < MotClef > getLstMotClefs ( ) { return m_lstMotClefs ; }
tr	9	public Object getSpecialSequenceCompanion ( String specSeq ) throws IllegalArgumentException { TokenizerProperty prop = getSpecialSequence ( specSeq ) ; if ( prop != null ) { return prop . getCompanion ( ) ; } else { return null ; } }
tr	1	public boolean isRunning ( ) { return isRunning ; }
tr	1	public BarData ( ) { }
tr	10	@ Override public void onMouseWheelMoved ( MouseWheelEvent e ) { int rotation = e . getWheelRotation ( ) ; if ( rotation < 0 ) { viewport . zoomIn ( - rotation * ZOOM_FACTOR ) ; } else { viewport . zoomOut ( rotation * ZOOM_FACTOR ) ; } }
tr	4	@ Override public void keyReleased ( KeyEvent arg0 ) { }
tr	6	public static int getSizeSafe ( int [ ] sizes , int sizeType ) { if ( sizes == null || sizes [ sizeType ] == NOT_SET ) return sizeType == MAX ? LayoutUtil . INF : 0 ; return sizes [ sizeType ] ; }
tr	7	int LzmaLenDecode ( int [ ] paramArrayOfInt , int paramInt1 , int paramInt2 ) throws IOException { if ( BitDecode ( paramArrayOfInt , paramInt1 + 0 ) == 0 ) { return BitTreeDecode ( paramArrayOfInt , paramInt1 + 2 + ( paramInt2 << 3 ) , 3 ) ; } if ( BitDecode ( paramArrayOfInt , paramInt1 + 1 ) == 0 ) { return 8 + BitTreeDecode ( paramArrayOfInt , paramInt1 + 130 + ( paramInt2 << 3 ) , 3 ) ; } return 16 + BitTreeDecode ( paramArrayOfInt , paramInt1 + 258 , 8 ) ; }
tr	3	static Date getTimeWarp ( ) { return timeWarp ; }
tr	1	public boolean isCountDimension ( ) { return isCountDimension ; }
tr	7	public void addDirtyRegion ( JComponent c , int x , int y , int w , int h ) { }
tr	5	public void componentAdded ( ContainerEvent e ) { addKeyAndContainerListenerRecursively ( e . getChild ( ) ) ; }
tr	1	public int get_key_num ( ) { return 1 ; }
tr	8	@ Override public boolean doPickupAction ( MazeGame maze , Player player ) { maze . getPlayer ( ) . heal ( 50 ) ; return true ; }
tr	9	public static double gaussSample ( double b2 ) { double result = 0 ; double r = Math . sqrt ( b2 ) ; for ( int i = 0 ; i < 12 ; i ++ ) { result += ( - r + rand . nextDouble ( ) * 2 * r ) ; } result /= 2 ; return result ; }
tr	1	public TileDoor ( ) { super ( 3 ) ; }
tr	2	public BaseInformation ( ) { this . ecrireInformations ( ) ; }
tr	2	@ Override protected void configure ( ) { }
tr	4	public void setCourse ( Course c ) { thisCourse = c ; }
tr	7	private static String permutationToString ( final List < Integer > inputPerm ) { return inputPerm . toString ( ) . replaceAll ( "\\[" , "(" ) . replaceAll ( "\\]" , ")" ) ; }
tr	1	private AboutJDialog ( ) { }
tr	9	private void $reloadPlayers ( ) { if ( this . $playersFile == null ) this . $playersFile = new File ( ClashOfBlocks . getInstance ( ) . getDataFolder ( ) , "players.yml" ) ; this . $players = YamlConfiguration . loadConfiguration ( this . $playersFile ) ; }
tr	4	public void setLeft ( Node n ) { left = n ; }
tr	9	public ArrayList < T > getIncidentEdges ( int v ) { if ( v < 0 || v >= numberOfVertices ) { String errorMessage = "Allows vertex indizes are 0.." + ( numberOfVertices - 1 ) + "." ; throw new IllegalArgumentException ( errorMessage ) ; } return adjacencyList [ v ] ; }
tr	1	private void inspectAll ( ) { }
tr	7	public void setClusters ( List < List < Integer >> clusters ) { this . clusters = clusters ; junctionTreeGraph . initialize ( clusters . size ( ) ) ; }
tr	8	private void drawInner3 ( Graphics2D g2d , int width , int height ) { g2d . setColor ( backgroundColor ) ; g2d . fillRect ( 0 , 0 , width , height ) ; }
tr	7	public void testStoreStudy ( ) { sa . storeStudy ( teststudies [ 0 ] , 1 ) ; assertTrue ( ( ( BaseAdaptor ) sa ) . fetchCount ( ) == 1 ) ; sa . storeStudy ( teststudies [ 1 ] , 2 ) ; assertTrue ( ( ( BaseAdaptor ) sa ) . fetchCount ( ) == 2 ) ; sa . storeStudy ( teststudies [ 2 ] , 2 ) ; assertTrue ( ( ( BaseAdaptor ) sa ) . fetchCount ( ) == 3 ) ; }
tr	5	public int getCurrSpAtk ( ) { return ( int ) ( spAtkStage . getStageModifier ( ) * stats . getSpAtk ( ) ) ; }
tr	4	protected ConfigAdaptorImpl ( FODriverImpl driver ) { super ( driver , TYPE ) ; }
tr	5	@ Override public String toString ( ) { return getName ( ) + "=" + getValue ( ) ; }
tr	5	private void addVertexShader ( String text ) { addProgram ( text , GL_VERTEX_SHADER ) ; }
tr	4	@ Override public String getName ( ) { return name ; }
tr	7	public void pause ( final int interval , final ItemType item ) { assert ! this . pausedItems . contains ( item ) ; this . pausedItems . add ( item ) ; }
tr	6	public void write ( String str ) throws IOException { indent ( ) ; myWriter . write ( str ) ; myWriter . write ( "\n" ) ; }
tr	8	@ XmlElementDecl ( namespace = "http://api.soap.mytxtbuddy.com/" , name = "countGroups" ) public JAXBElement < CountGroups > createCountGroups ( CountGroups value ) { return new JAXBElement < CountGroups > ( _CountGroups_QNAME , CountGroups . class , null , value ) ; }
tr	4	public Collection < String > getCategories ( ) { return categories ; }
tr	10	public void setThresholds ( List < U > thresholds ) throws Exception { if ( thresholds . size ( ) != neurons . size ( ) ) { throw new Exception ( "threshold count doesnt match neuron count in this layer" ) ; } for ( int i = 0 ; i < neurons . size ( ) ; i ++ ) { neurons . get ( i ) . setThreshold ( thresholds . get ( i ) ) ; } }
tr	6	public BaseJDialog ( java . awt . Frame parent , boolean modal ) { super ( parent , modal ) ; }
tr	10	public T [ ] quicksort ( T [ ] array , int low , int high ) { int i = low ; int j = high ; T pivot = array [ low + ( high - low ) / 2 ] ; while ( i < j ) { while ( array [ i ] . compareTo ( pivot ) < 0 ) { i ++ ; } while ( array [ j ] . compareTo ( pivot ) > 0 ) { j -- ; } if ( i <= j ) { swap ( array , i , j ) ; i ++ ; j -- ; } } if ( low < j ) { quicksort ( array , low , j ) ; } if ( i < high ) { quicksort ( array , i , high ) ; } return array ; }
tr	2	public int getZ ( ) { return zLoc ; }
tr	2	private int getAbilityBonus ( int score ) { return ( score / 2 ) - 5 ; }
tr	6	public void setOutGoingConnections ( Map < Neuron , List < Connection >> outGoingConnections ) { this . outGoingConnections = outGoingConnections ; }
tr	3	public String getInstructorName ( ) { return instructorName ; }
tr	1	public encoder ( ) { }
tr	3	public void setWireframe ( boolean enabled ) { wireframeEnabled = enabled ; }
tr	1	private EmailChannel ( ) { }
tr	6	public static void deleteResultsByUser ( String username ) { String update = "DELETE FROM history WHERE user=\"" + username + "\";" ; MyDB . updateDatabase ( update ) ; }
tr	9	public void incrementCount ( class animalClass ) { Counter count = counters . get ( animalClass ) ; if ( count == null ) { count = new Counter ( animalClass . getName ( ) ) ; counters . put ( animalClass , count ) ; } count . increment ( ) ; }
tr	7	public Register ( String name ) { state = RegState . IDLE ; this . Name = name ; }
tr	2	protected final String fsp_name ( ) { return "CONDITION" ; }
tr	8	public FTreeList < Elt > less ( int index ) { if ( index < 0 || index >= treeSize ( tree ) ) throw new IndexOutOfBoundsException ( ) ; return new FTreeList < Elt > ( less ( tree , index ) , elt_comp ) ; }
tr	8	@ Test public void testGetRPMs ( ) { when ( mockStartedEngine . isRunning ( ) ) . thenReturn ( true ) ; when ( mockStartedEngine . getRPMs ( ) ) . thenReturn ( 2000 ) ; assertTrue ( "Engine should be running!" , mockStartedEngine . isRunning ( ) ) ; assertTrue ( "A running engine should be revolving!" , mockStartedEngine . getRPMs ( ) > 0 ) ; }
tr	8	public Field fieldAfterLabel ( String label , int skip , int matchNumber ) { return getField ( new FieldIdentifier ( label , skip , matchNumber ) ) ; }
tr	5	@ Override public void accept ( CommandVisitor visitor ) { visitor . visit ( this ) ; }
tr	1	public ProportionNonInformativeAlleles ( ) { this ( "PN" , "Proportion of non-informative alleles" ) ; }
tr	2	public void setY ( float y ) { this . y = y ; }
tr	5	public Move getLastMove ( ) { if ( this . movesList . size ( ) > 0 ) { return this . movesList . get ( this . movesList . size ( ) - 1 ) ; } else { return null ; } }
tr	1	public boolean isPersisted ( ) { return isPersisted ; }
tr	5	public final void skipBits ( int n ) throws IOException { if ( bit_pos < n ) get_long ( ) ; bit_pos -= n ; }
tr	4	public boolean contains ( long x ) { return ( x >= start ) && ( x < ( start + length ) ) ; }
tr	2	public static byte renderBooleanByte ( final boolean value ) { return ( byte ) ( value ? 1 : 0 ) ; }
tr	9	private void AddNewUpdateTime ( float newTime ) { float addTime = newTime ; if ( addTime > 50 ) { addTime = 50 ; } if ( updateTimes . size ( ) >= NUM_UPDATE_TIMES ) { updateTimes . remove ( 0 ) ; } updateTimes . add ( newTime ) ; runTime += newTime ; }
tr	8	public Object get ( String key ) throws JSONException { if ( key == null ) { throw new JSONException ( "Null key." ) ; } Object object = this . opt ( key ) ; if ( object == null ) { throw new JSONException ( "JSONObject[" + quote ( key ) + "] not found." ) ; } return object ; }
tr	6	public void moveFiles ( ) { getDataFolder ( ) . mkdir ( ) ; getDataFolder ( ) . setWritable ( true ) ; getDataFolder ( ) . setExecutable ( true ) ; extractFile ( "config.yml" ) ; extractFile ( "Quests.yml" ) ; extractFile ( "uQuest_Players.txt" ) ; extractFile ( "uQuestQuesters" ) ; }
tr	8	public H1D ( String name , int bins , double xMin , double xMax ) { setName ( name ) ; set ( bins , xMin , xMax ) ; }
tr	10	@ Test public void testDeserializeFileMessage ( ) { assertEquals ( new FileAnnouncementMessage ( new LocalShare ( "ABC" , 1024 , 2 , "dsp" , "meta" , "" ) ) , MessageDeserializer . Deserialize ( new FileAnnouncementMessage ( new LocalShare ( "ABC" , 1024 , 2 , "dsp" , "meta" , "" ) ) . Serialize ( ) ) ) ; assertEquals ( new FileAnnouncementMessage ( new LocalShare ( "ABC" , 1024 , 2 , "" , "" , "" ) ) , MessageDeserializer . Deserialize ( new FileAnnouncementMessage ( new LocalShare ( "ABC" , 1024 , 2 , "" , "" , "" ) ) . Serialize ( ) ) ) ; assertEquals ( new FileAnnouncementMessage ( new LocalShare ( "ABC" , 1024 , RemoteShare . TTL_INFINITY , "foo" , "" , "" ) ) , MessageDeserializer . Deserialize ( new FileAnnouncementMessage ( new LocalShare ( "ABC" , 1024 , RemoteShare . TTL_INFINITY , "foo" , "" , "" ) ) . Serialize ( ) ) ) ; assertEquals ( new FileAnnouncementMessage ( new LocalShare ( "ABC" , 1111111111111 , 2 , "\u6613\u4E8B" , "\u6613\u4E8B\u6613\u4E8B\u6613\u4E8B" , "" ) ) , MessageDeserializer . Deserialize ( new FileAnnouncementMessage ( new LocalShare ( "ABC" , 1111111111111 , 2 , "\u6613\u4E8B" , "\u6613\u4E8B\u6613\u4E8B\u6613\u4E8B" , "" ) ) . Serialize ( ) ) ) ; }
tr	3	public Date getDTransactionDate ( ) { return dTransactionDate ; }
tr	6	private void jTextField9ActionPerformed ( java . awt . event . ActionEvent evt ) { }
tr	10	@ Override public void enqueue ( E element ) { values [ index ( last ++ ) ] = element ; count ++ ; if ( count == values . length ) { resize ( count * 2 ) ; } }
tr	6	@ Override public void setDebug ( boolean debug ) { plugin . config . setDebug ( debug ) ; plugin . refreshConfig ( ) ; }
tr	2	public static int getFoxBreedingAge ( ) { return BREEDING_AGE ; }
tr	10	private void tFLoginKeyPressed ( java . awt . event . KeyEvent evt ) { if ( evt . getKeyCode ( ) == KeyEvent . VK_ENTER ) { jPFSenha . requestFocusInWindow ( ) ; } }
tr	2	public void setNumItems ( final int numItems ) { this . numItems = numItems ; }
tr	1	public boolean isRight ( ) { return isRight ; }
tr	7	public void correct ( ) { cp . setColorCorrect ( ) ; mcPanel . invalidate ( ) ; mcPanel . validate ( ) ; mcPanel . repaint ( ) ; }
tr	1	public NotEnoughMarketData ( ) { }
tr	1	public void redirectOut ( ) { redirectOut ( null , null ) ; }
tr	8	@ XmlElementDecl ( namespace = "com/firstdata/Merchant/gmfV3.10" , name = "Qnty" ) public JAXBElement < Integer > createQnty ( Integer value ) { return new JAXBElement < Integer > ( _Qnty_QNAME , Integer . class , null , value ) ; }
tr	2	public int getEvaluationDetail ( ) { return evaluationDetail ; }
tr	8	@ Test public void testGetDataBase_3 ( ) throws Exception { DataBase result = DataBaseFactory . getDataBase ( ) ; assertNotNull ( result ) ; }
tr	10	public boolean contains ( E query ) { Node < E > node = this . head ; boolean contained = false ; while ( node != null ) { if ( node . item . equals ( query ) ) { contained = true ; } node = node . next ; } return contained ; }
tr	9	@ Override public String apply ( String target ) { if ( position < target . length ( ) ) { String firsthalf = target . substring ( 0 , position ) ; String secondhalf = target . substring ( position + 1 ) ; return firsthalf + secondhalf ; } else return target ; }
tr	4	public final void setFirstPlayerInfo ( final PlayerInfo firstplayer ) { _firstplayer = firstplayer ; }
tr	9	@ Override public void windowClosing ( WindowEvent we ) { if ( miniGame . getDataModel ( ) . inProgress ( ) ) { } System . exit ( 0 ) ; }
tr	2	@ Override public boolean permitidoAdministrarCatalogo ( ) { return true ; }
tr	3	public Date getRegistrationDate ( ) { return registrationDate ; }
tr	4	@ Override public void onCollision ( Collidable [ ] colliders ) { }
tr	6	public synchronized boolean method234 ( int i , byte abyte0 [ ] , int j ) { boolean flag = method235 ( true , j , i , abyte0 ) ; if ( ! flag ) flag = method235 ( false , j , i , abyte0 ) ; return flag ; }
tr	9	public static void main ( String [ ] args ) { Test m = new Test ( ) ; try { m . execute ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }
tr	5	public JSONArray put ( int index , double value ) throws JSONException { put ( index , new double ( value ) ) ; return this ; }
tr	6	public void setRuleNode ( RuleNode ruleNode ) { ruleIndex = ruleNode . index ; sibling = ruleNode ; }
tr	5	public void addNewVersionListener ( NewVersionListener listener ) { listeners . add ( listener ) ; }
tr	2	public boolean isNullable ( ) { return nullable ; }
tr	4	@ Override public boolean remove ( byte [ ] key ) throws IOException { return this . remove ( key , false ) ; }
tr	1	private ActorManager ( ) { }
tr	3	public void setUser ( User user ) { this . user = user ; }
tr	10	private void boot ( java . awt . event . MouseEvent evt ) { bootArr = new arrayMaker ( ) ; Boot boot = new Boot ( ) ; boot . main ( bootArr ) ; }
tr	5	@ Test public void testGetSize ( ) { assertTrue ( datatype . getSize ( ) == 8 ) ; }
tr	6	@ JsonAnyGetter public Map < String , Object > getAdditionalProperties ( ) { return this . additionalProperties ; }
tr	9	public void registerProcessor ( OspreyProcessor < ? > processor ) { if ( null != processors . putIfAbsent ( processor . interest ( ) , processor ) ) { LOGGER . warn ( "Register Processor[" + processor . interest ( ) + "  " + processor + "]." , new Exception ( ) ) ; } }
tr	10	public MainPanel ( JFrame frame ) { this . frame = ( IndexFrame ) frame ; this . initComponents ( ) ; this . bindEvent ( ) ; playService = this . frame . getPlayService ( ) ; remoteService = new RemoteService ( this ) ; }
tr	1	public int getColumnCount ( ) { return 1 ; }
tr	2	@ Override public void tick ( ) { }
tr	5	public void deleteRepository ( String name ) throws Exception { rootCatalog . deleteRepository ( name ) ; }
tr	2	public int getId ( ) { return this . id ; }
tr	2	public boolean isDrawing ( ) { return drawing ; }
tr	8	@ Override public void runQueryForAd ( Query processedQuery , int _numResults , ScoredDocs scoredAdDocs ) { throw new UnsupportedOperationException ( "should be implemented first" ) ; }
tr	3	public String getDocumentNumber ( ) { return documentNumber ; }
tr	1	public void inorder_testIncomplete3LevelTree ( ) { }
tr	5	@ Override public List < Bid > getBids ( ) { return BidManager . getBids ( ) ; }
tr	10	public JSONArray toJSONArray ( JSONArray names ) throws JSONException { if ( names == null || names . length ( ) == 0 ) { return null ; } JSONArray ja = new JSONArray ( ) ; for ( int i = 0 ; i < names . length ( ) ; i += 1 ) { ja . put ( this . opt ( names . getString ( i ) ) ) ; } return ja ; }
tr	2	public synchronized String save ( ) { return save ( null ) ; }
tr	6	public Contato ( String chave , String senha , String nick , String lastIP ) { this . chave = chave ; this . senha = senha ; this . nick = nick ; this . lastIP = lastIP ; }
tr	9	public Klas ( long id , String naam ) { this . id = id ; this . naam = naam ; this . leerlingen = new ArrayList < User > ( ) ; this . vakken = new ArrayList < Vak > ( ) ; }
tr	3	@ Override public String getPermission ( ) { return "irc.leave" ; }
tr	7	void dispatch ( SelectionKey key ) { Runnable r = ( Runnable ) key . attachment ( ) ; if ( r != null ) { r . run ( ) ; } }
tr	7	public static int search_str ( String [ ] s , String key ) { for ( int i = 0 ; i < s . length ; i ++ ) { if ( s [ i ] . equals ( key ) ) return i ; } return - 1 ; }
tr	2	public boolean isChanged ( ) { return this . changed ; }
tr	1	public boolean isOpen ( ) { return isOpen ; }
tr	10	public static ShellFiredReply Create ( ByteList messageBytes ) throws Exception { ShellFiredReply result ; if ( messageBytes == null || messageBytes . getLength ( ) < 6 ) { throw new Exception ( "Invalid message byte array" ) ; } if ( messageBytes . peekShort ( ) != ShellFiredReply . getClassID ( ) ) { throw new Exception ( "Invalid message type" ) ; } else { result = new ShellFiredReply ( ) ; result . decode ( messageBytes ) ; } return result ; }
tr	10	@ Override public void valueChanged ( ListSelectionEvent e ) { if ( ! getResponseTbUserSelectedChanged ( ) ) { return ; } User user = getSelectedUser ( ) ; pnlUserInfo . ReadFrom ( user ) ; }
tr	6	@ Override public boolean exists ( T persistable ) { return persistable == null || persistable . isNew ( ) ? false : exists ( persistable . getPK ( ) ) ; }
tr	3	public String getPathRemainder ( ) { return path_remainder_ ; }
tr	4	public int getValor ( ) { return Integer . parseInt ( getText ( ) ) ; }
tr	5	public Cliente ( ) { initComponents ( ) ; limpiar ( ) ; bloquear ( ) ; cargar ( "" ) ; }
tr	1	public void think ( ) { }
tr	2	public int getHpBase ( ) { return hpBase ; }
tr	4	public final List < Object > getObjects ( ) { return objects ; }
tr	3	public void setMaxDesolvApolar ( float value ) { this . maxDesolvApolar = value ; }
tr	9	public PlayRule ( String name , String description , GameStatus gameStatus , Board board , int ourPlayerIndex ) { super ( name , description , gameStatus , ourPlayerIndex ) ; this . board = board ; }
tr	7	private Node getNext ( Node u ) { if ( u . right == null ) { Node n = u ; do { u = n ; n = n . parent ; if ( n == null ) return null ; } while ( u == n . right ) ; return n ; } Node n = u . right ; while ( n . left != null ) n = n . left ; return n ; }
tr	7	boolean getBooleanValue ( Element ele , String tagName ) { return boolean . parseBoolean ( getTextValue ( ele , tagName ) ) ; }
tr	10	public int getAction ( Game game , long dueTime ) { if ( key == KeyEvent . VK_UP ) return 0 ; if ( key == KeyEvent . VK_RIGHT ) return 1 ; if ( key == KeyEvent . VK_DOWN ) return 2 ; if ( key == KeyEvent . VK_LEFT ) return 3 ; return 4 ; }
tr	9	@ Override public boolean equals ( Object other ) { boolean result = false ; if ( other instanceof Tuple ) { Tuple that = ( Tuple ) other ; result = ( this . source . equals ( that . source ) && this . target . equals ( that . target ) ) ; } return result ; }
tr	9	public int OrangeGhostLocation ( Game game , int whichGhost ) { int location ; if ( game . getEuclideanDistance ( game . getCurGhostLoc ( whichGhost ) , game . getCurPacManLoc ( ) ) > 10 ) location = getNextPacManNode ( game ) ; else location = game . getCurPacManLoc ( ) ; return location ; }
tr	6	public JDialogTeacher ( java . awt . Frame parent ) { super ( parent ) ; initComponents ( ) ; }
tr	4	public Reference ( String name , int count ) { this . name = name ; this . count = count ; }
tr	1	static void log ( ) { log ( "\n" ) ; }
tr	8	@ Override public void run ( ) { setSpriteX ( 1 ) ; try { Thread . sleep ( 50 ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } setSpriteX ( 0 ) ; }
tr	3	public void terminateOnAverageImprovement ( boolean toTerminate ) { useAveImprovement = toTerminate ; }
tr	2	protected void takeDown ( ) { doDelete ( ) ; }
tr	10	@ Override protected Rule fromStringLiteral ( String string ) { return string . endsWith ( " " ) ? Sequence ( String ( string . substring ( 0 , string . length ( ) - 1 ) ) , WhiteSpace ( ) ) : String ( string ) ; }
tr	8	public void kill ( ) { if ( socket == null ) return ; try { oos . close ( ) ; } catch ( IOException e ) { } try { ois . close ( ) ; } catch ( IOException e ) { } try { bis . close ( ) ; } catch ( IOException e ) { } try { socket . close ( ) ; socket = null ; } catch ( IOException e ) { } }
tr	8	public void awaitTermination ( ) { try { latch . await ( ) ; } catch ( InterruptedException e ) { String message = "awaitTermination() method was interrupted!" ; throw new UnsupportedOperationException ( message , e ) ; } }
tr	7	public void clearPayoffs ( int match ) { MatchHistory hist = ( MatchHistory ) matchHistory . get ( new Integer ( match ) ) ; if ( hist == null ) return ; hist . clearPayoffs ( ) ; }
tr	1	public CountdownJob15 ( ) { }
tr	3	@ Override public String getGrammarFileName ( ) { return "Enquanto.g4" ; }
tr	2	public boolean getDefaultShared ( ) { return defaultShared ; }
tr	10	@ Override public RobotProgramNode parse ( Scanner s , CodeParser cp , NodeProcessor p ) { p . process ( s , cp , this ) ; return this ; }
tr	4	@ Override public JComponent getOptionsComponent ( ) { return so ; }
tr	3	@ Override public int length ( ) { return contents . length ( ) ; }
tr	5	public BoardChangedEvent ( Object source , Location [ ] locations ) { super ( source ) ; this . locations = locations ; }
tr	2	public int getThrottle ( ) { return throttle ; }
tr	1	public Function1D ( ) { }
tr	10	@ Override public Set < java . util . Map . Entry < K , V >> entrySet ( ) { return base . entrySet ( ) ; }
tr	10	public void redraw ( ) { final DrawMazeTask task = new DrawMazeTask ( this , SQUARE_SIZE , WALL_WIDTH ) ; try { task . execute ( ) ; mazeImage = task . get ( ) ; } catch ( Exception ex ) { } }
tr	4	private void exiting ( ) { if ( connectionHandler != null && connectionHandler . isConnected ( ) ) connectionHandler . disconnect ( ) ; }
tr	8	private void renderTypeListWithCommas ( DorpType [ ] types ) { if ( types . length == 0 ) return ; renderType ( types [ 0 ] ) ; for ( int i = 1 ; i < types . length ; i ++ ) { result . append ( "  " ) ; renderType ( types [ i ] ) ; } }
tr	2	public boolean useLeskNomalizer ( ) { return leskNormalize ; }
tr	9	public static JMenu getMenu ( String title ) { JMenu component = new JMenu ( title ) ; component . setBackground ( BACKGROUND_COLOR_MENU ) ; component . setFont ( FONT_TYPE_TXTA ) ; return component ; }
tr	10	@ Override protected void configure ( ) { setName ( "list" ) ; setDefinition ( createDefinition ( ) ) ; setDescription ( "Lists commands" ) ; String lineSeparator = LINE_SEPARATOR + LINE_SEPARATOR ; setHelp ( "The <info>%command.name%</info> command lists all commands:" + lineSeparator + "  <info>java -jar %command.full_name%</info>" + lineSeparator + "You can also display the commands for a specific namespace:" + lineSeparator + "  <info>java -jar %command.full_name% test</info>" + lineSeparator + "It's also possible to get raw list of commands (useful for embedding command runner):" + lineSeparator + "  <info>java -jar %command.full_name% --raw</info>" ) ; }
tr	3	public boolean isDataFlavorSupported ( DataFlavor flavor ) { return false ; }
tr	4	@ Override public Object getSelectedItem ( ) { return data . getSelectedItem ( ) ; }
tr	9	public static Texture [ ] [ ] replaceColors ( Texture [ ] [ ] textures , int [ ] fromColors , int [ ] toColors ) { if ( textures . length == 0 ) return null ; Texture [ ] [ ] newTextures = new Texture [ textures . length ] [ textures [ 1 ] . length ] ; for ( int i = 0 ; i < textures . length ; i ++ ) for ( int j = 0 ; j < textures [ 1 ] . length ; j ++ ) newTextures [ i ] [ j ] = textures [ i ] [ j ] . replaceColors ( fromColors , toColors ) ; return newTextures ; }
tr	1	private Constants ( ) { }
tr	5	public void editar ( Avaliacao objeto ) throws SQLException { throw new UnsupportedOperationException ( "Not supported yet." ) ; }
tr	7	public void actionPerformed ( ActionEvent e ) { procurarUsuario . dispose ( ) ; Administrador . main ( null ) ; }
tr	9	private int find ( Temporal point ) { int i ; for ( i = 0 ; i < this . points . size ( ) ; ++ i ) { if ( this . points . get ( i ) . getXCoord ( ) == point . getXCoord ( ) && this . points . get ( i ) . getYCoord ( ) == point . getYCoord ( ) ) return i ; } return - 1 ; }
tr	4	public List < Group_schedule > getSchedule ( ) { return this . group_schedule ; }
tr	4	@ Override public void setType ( String type ) { this . type = type ; }
tr	2	public void setGroupId ( int groupId ) { this . groupId = groupId ; }
tr	1	private GroupController ( ) { }
tr	4	public void deselect ( ) { underlinecolor = Color . cyan ; }
tr	4	public double . ( Vector v ) { return ( x * v . x ) + ( y * v . y ) ; }
tr	6	public static int [ ] idea_subkeys ( byte [ ] key ) { int [ ] encryptKeys = new int [ 52 ] ; int k1 ; for ( k1 = 0 ; k1 < 8 ; ++ k1 ) encryptKeys [ k1 ] = ( ( key [ 2 * k1 ] & ff ) << 8 ) | ( key [ 2 * k1 + 1 ] & ff ) ; for ( ; k1 < 52 ; ++ k1 ) encryptKeys [ k1 ] = ( ( encryptKeys [ k1 - 8 ] << 9 ) | ( encryptKeys [ k1 - 7 ] >>> 7 ) ) & ffff ; return encryptKeys ; }
tr	8	@ Override public void updateFieldAgentStatus ( Object status ) throws RemoteException { if ( status instanceof TaskProgress ) { TaskProgress progress = ( TaskProgress ) status ; this . taskTrackerReference . updateFieldAgentStatus ( progress ) ; } }
tr	3	public PortException ( String message ) { super ( message ) ; }
tr	6	private String getSlice ( int start , int end ) { return input . substring ( start , end ) ; }
tr	6	protected void clickEvent ( BIOSwitch c ) { if ( ! c . isEnabled ( ) ) { return ; } c . setSelected ( ! c . isSelected ( ) ) ; }
tr	9	@ Override public String getAsString ( Object o ) { if ( o == null ) { return "" ; } XStream xStream = new XStream ( ) ; String strRepresentation = xStream . toXML ( o ) ; return strRepresentation ; }
tr	6	private String protect ( String s ) { int cur_pos = 0 ; while ( true ) { cur_pos = findFirstIndex ( s , cur_pos , "{}\\" ) ; if ( cur_pos < 0 ) return s ; s = s . substring ( 0 , cur_pos ) + "\\" + s . substring ( cur_pos ) ; cur_pos += 2 ; } }
tr	4	@ Override public void componentShown ( ComponentEvent e ) { }
tr	6	public JSONStringer object ( ) throws JSONException { return open ( Scope . EMPTY_OBJECT , "{" ) ; }
tr	5	@ Test public void testHypothesis ( ) { testHypHelper ( 0 , 1 , 0 , 1 , true , Math . log ( 8.0 / 3 ) ) ; testHypHelper ( 1 , 1 , 1 , 1 , true , 0 ) ; testHypHelper ( 1 , 1 , 1 , 1 , false , 0 ) ; testHypHelper ( 100 , 200 , 300 , 300 , true , Math . log ( 201.0 / 101 ) ) ; testHypHelper ( 100 , 200 , 300 , 300 , false , Math . log ( 101.0 / 201 ) ) ; }
tr	2	public int getComparisonCount ( ) { return comparisonCount ; }
tr	10	public void generate ( ) { radius = Util . rand ( 20 , 100 ) ; x = Util . rand ( WIDTH - radius ) ; y = Util . rand ( HEIGHT - radius ) ; color = Util . randomColor ( 0 , 255 ) ; }
tr	9	public void setProperties ( Properties config ) { indexPath = config . getProperty ( "controller.index.path" ) ; formPackage = config . getProperty ( "controller.form.package" ) ; controllerDirectory = config . getProperty ( "controller.directory" ) ; viewDirectory = config . getProperty ( "view.directory" ) ; init ( ) ; }
tr	9	public void print ( String padding ) { System . out . println ( padding + "condicion" ) ; condicion . print ( padding + "\t" ) ; consecuencia . print ( padding + "\t" ) ; alternativa . print ( padding + "\t" ) ; }
tr	2	public String contentType ( ) { return "text/html" ; }
tr	8	public int getTileCidAtCoord ( double x , double y ) { int xidx = ( int ) x / tilex ; int yidx = ( int ) y / tiley ; return getTileCid ( xidx , yidx ) ; }
tr	7	public static Object getExceptionCause ( Throwable err ) { if ( err instanceof LuaException ) return ( ( LuaException ) err ) . getLuaCause ( ) ; return err . getMessage ( ) ; }
tr	6	public int [ ] getAction_Per_State_As_Array ( ) { int ret [ ] = new int [ noOfStates ] ; for ( int i = 0 ; i < noOfStates ; i ++ ) { ret [ i ] = action_Per_State . get ( i ) ; } return ret ; }
tr	4	public void print ( Object o ) { out . print ( o ) ; }
tr	4	public void setTutorsInfo ( ArrayList < PareTutor > tutorsInfo ) { this . tutorsInfo = tutorsInfo ; }
tr	5	public void setExecutionStepListener ( Interpreter . ExecutionStepListener listener ) { mInterpreter . setExecutionStepListener ( listener ) ; }
tr	7	@ Test public void testDotProduct ( ) { assertTrue ( matrixA . dotProduct ( matrixB ) . equals ( 32.0 ) ) ; }
tr	3	@ Override public float getBlockOutPerSec ( ) { return BlockOutPerSec ; }
tr	3	public void copyFrom ( Assign_opContext ctx ) { super . copyFrom ( ctx ) ; }
tr	9	private void correctButtonActionPerformed ( java . awt . event . ActionEvent evt ) { flashcards . answerCorrect ( ) ; gotoNextCard ( ) ; }
tr	7	public static < C > AutomataGraph < C > createGraph ( ITimedAutomata < C > auto ) { AutomataGraph < C > graph = new SimpleAutomataGraph < C > ( auto ) ; createGraph ( auto , graph ) ; return graph ; }
tr	5	public AbstractDataWriter ( ExportOptions options , Writer out ) { super ( options , out ) ; }
tr	8	@ Test public void testAddSingularPluralPair ( ) { assertEquals ( "addSigularPluralPair - pair not exist" , true , tester . addSingularPluralPair ( "sword" , "pword" ) ) ; tester . getSingularPluralHolder ( ) . add ( new SingularPluralPair ( "sword2" , "" ) ) ; assertEquals ( "addSigularPluralPair - one word exist" , true , tester . addSingularPluralPair ( "sword2" , "pword2" ) ) ; tester . getSingularPluralHolder ( ) . add ( new SingularPluralPair ( "sword3" , "pword3" ) ) ; assertEquals ( "addSigularPluralPair - pair exists" , false , tester . addSingularPluralPair ( "sword3" , "pword3" ) ) ; }
tr	3	public void work ( ) { logger . debug ( "Employee working!!!" ) ; }
tr	10	@ Override public void addPos ( int elem , int pos ) { checkPosRange ( pos ) ; if ( size + 1 >= capacity ) { resize ( ) ; } for ( int i = size - 1 ; i >= pos ; -- i ) { array [ i + 1 ] = array [ i ] ; } array [ pos ] = elem ; ++ size ; }
tr	4	public void reset ( ) { buffer = null ; len = 0 ; pos = 0 ; }
tr	4	public double [ ] getCoordinates ( ) { coordinate [ 0 ] = width / 2 ; coordinate [ 1 ] = height / 2 ; return coordinate ; }
tr	6	public Iterator < TextBlob > iterator ( int ii ) { return blobs . listIterator ( ii ) ; }
tr	7	@ JsonProperty ( "Contact" ) public List < org . ogf . glue2 . Contact > getContact ( ) { return Contact ; }
tr	2	private Varp ( ) { aBoolean713 = false ; }
tr	6	void setProgressBar ( double pos ) { progress_bar = pos ; if ( ! is_initialised && initpainter != null ) repaint ( 100 ) ; }
tr	2	public char nextChar ( ) { return ( char ) ( next ( 16 ) ) ; }
tr	5	public Vector2f mul ( float r ) { return new Vector2f ( x * r , y * r ) ; }
tr	1	private Messages ( ) { }
tr	7	public String test3 ( ) throws RemoteException { System . out . println ( "MyRemoteObject3: test3 called" ) ; return param ; }
tr	6	public static int getHoursThisYear ( int driver ) { if ( driver == 0 ) throw new InvalidQueryException ( "Nonexistent driver" ) ; return database . busDatabase . get_int ( "driver" , driver , "hours_this_year" ) ; }
tr	6	private void print ( String string ) { System . out . println ( string ) ; }
tr	2	public void setEdat ( int edat ) { this . edat = edat ; }
tr	3	public TerminalScreenToConsoleObserver ( Terminal terminal ) { this . terminal = terminal ; }
tr	1	public class < ? > [ ] usedClasses ( ) default { } ;
tr	8	public PlayService ( JFrame frame ) { this . frame = ( IndexFrame ) frame ; this . audio = new Audio ( ) ; player = new PlayBack ( this . audio ) ; }
tr	7	@ SuppressWarnings ( "unchecked" ) public static < T > T getFromXml ( final String path , final class < T > clazz ) { return getFromXml ( new File ( path ) , clazz ) ; }
tr	8	public static PdVector toGlobalVector ( PdVector localVector , PdVector x , PdVector y ) { assert localVector . getSize ( ) == 2 ; assert x . getSize ( ) == 3 ; assert y . getSize ( ) == 3 ; return PdVector . blendNew ( localVector . getEntry ( 0 ) , x , localVector . getEntry ( 1 ) , y ) ; }
tr	1	public GenderBean ( ) { super ( ) ; }
tr	2	private boolean r_mark_ki ( ) { if ( ! ( eq_s_b ( 2 , "ki" ) ) ) { return false ; } return true ; }
tr	8	@ XmlElementDecl ( namespace = "" , name = "iLastReplyBy" ) public JAXBElement < String > createILastReplyBy ( String value ) { return new JAXBElement < String > ( _ILastReplyBy_QNAME , String . class , null , value ) ; }
tr	4	public String getInitText ( ) { if ( options == null || options . length < 1 ) return null ; return options [ 1 ] ; }
tr	7	public ServerNotificationModel ( NotificationType type , UserModel given_to , MeetingModel regards_meeting ) { super ( type , given_to , regards_meeting ) ; }
tr	7	public void moveBy ( int x , int y ) { this . position = new Point ( this . position . getX ( ) + x , this . position . getY ( ) + y ) ; }
tr	9	public void printInterferenceGraph ( Writer w ) throws Exception { w . write ( "subgraph " + name . getString ( ) + "{\n" ) ; ig . printGraph ( w ) ; w . write ( "}\n" ) ; }
tr	1	public AuthFilter ( ) { super ( ) ; }
tr	1	public int inputsNum ( ) { return inputsNum ; }
tr	3	public Demographics getDemographics ( ) { return demographics ; }
tr	5	@ Test public void testFishIsWink ( ) { assertTrue ( event . isWinkFish ( ) ) ; }
tr	1	public boolean blocksLineOfSight ( ) { return false ; }
tr	3	public void windowDeiconified ( WindowEvent e ) { }
tr	3	public int getSpeedX ( ) { return speed . moveX ( 0 , 1 ) ; }
tr	1	public int size ( ) { return this . size ; }
tr	10	public void persist ( Phucap transientInstance ) { log . debug ( "persisting Phucap instance" ) ; try { sessionFactory . getCurrentSession ( ) . persist ( transientInstance ) ; log . debug ( "persist successful" ) ; } catch ( RuntimeException re ) { log . error ( "persist failed" , re ) ; throw re ; } }
tr	4	@ Override public Area getNextSibling ( ) { return ( Area ) getNextSiblingNode ( ) ; }
tr	9	private BufferedImage getBufferedImage ( int i ) { int opcion = 0 ; if ( i == opcion ++ ) return new Ladrillo ( 0 , 0 , 0 ) . getImagen ( ) . getSubimage ( 0 , 0 ) ; return Imagenes . PISO ; }
tr	9	public OrangePortalSkill ( MazeGame maze ) { super ( maze ) ; setCost ( 75 ) ; setCooldown ( 15000 ) ; setUsable ( true ) ; setKeyCode ( KeyEvent . VK_Y ) ; }
tr	2	public int getSize ( ) { return size ; }
tr	1	public void addRoom ( ) { return ; }
tr	10	public void add ( Tuple tuple ) { Value val = tuple . select ( columnName ) ; if ( map . putIfAbsent ( val , tuple ) != null ) { throw new SqlException ( "Unique Key constraint violation: Duplicate value for column '" + columnName + "': " + val ) ; } }
tr	9	private void haeButtonActionPerformed ( java . awt . event . ActionEvent evt ) { if ( otaTalteen ( ) ) { hae ( ) ; tyhjenna ( ) ; } }
tr	9	@ Override public void insertContent ( int pos , Line line ) { if ( pos > this . length ( ) || pos < 0 ) { throw new DocumentException ( "Impossible to insert something in this line at this position!" ) ; } this . getContent ( ) . insert ( pos , line . getContent ( ) ) ; }
tr	3	public Location ( int x , int y ) { this . x = x ; this . y = y ; }
tr	3	public String getNick ( ) { return nick ; }
tr	8	public < K , V > Map < K , V > mapOf ( KeyValueLoader < K , V > loader ) { return configObject . mapOf ( ROOT , loader ) ; }
tr	3	@ Override public void add ( ) { acceptCurrentView ( ) ; }
tr	10	@ SuppressWarnings ( "unchecked" ) public void registerRemoved ( DomainObject obj ) { if ( newObjects . remove ( obj ) ) return ; dirtyObjects . remove ( obj ) ; if ( ! removedObjects . contains ( obj ) ) { removedObjects . add ( obj ) ; } }
tr	8	public void unscheduleAll ( final ItemType item ) { for ( final int intervall : INTERVALS ) { unscheduleAt ( intervall , item ) ; } assert scheduledItemCount ( ) == 0 ; stop ( ) ; }
tr	2	public void setGrids ( int grids ) { this . grids = grids ; }
tr	7	public Music getMusic ( ) { try { return new Music ( folder + musicFile ) ; } catch ( SlickException e ) { e . printStackTrace ( ) ; return null ; } }
tr	6	public String toStringList ( ) { return "BaseBexpansion:" + getNumber ( ) + " on base: " + getBase ( ) + "\n" + "{" + "a=" + getA ( ) + } ; }
tr	1	public Match ( ) { }
tr	6	public Explosion ( double x , double y , double z ) { this . x = x ; this . y = y ; this . z = z ; maxLife = life = 5 ; }
tr	2	private NumberStringConverter ( boolean zeroOnError ) { this . zeroOnError = zeroOnError ; }
tr	7	public static void writeDouble ( OutputStream out , double num ) throws IOException { out . write ( convDouble ( num ) ) ; }
tr	6	public void fileSaveError ( String fileName ) { Log . info ( String . format ( "Unable to save '%s'\n" , fileName ) ) ; }
tr	5	public List < MessageVO > getMessageVOs ( ) { if ( messageVOs == null ) { messageVOs = new ArrayList < MessageVO > ( ) ; } return this . messageVOs ; }
tr	8	public Bomb ( double x , double y , int particles ) { super ( 0 , x , y , new Velocity ( 0 , 0 ) ) ; setMove ( false ) ; bf = new BombFragment [ particles ] ; }
tr	10	public void open ( ) { display = Display . getDefault ( ) ; createContents ( ) ; Alogin . open ( ) ; Alogin . layout ( ) ; while ( ! Alogin . isDisposed ( ) ) { if ( ! display . readAndDispatch ( ) ) { display . sleep ( ) ; } } }
tr	5	public Map < String , Download > getSessionDownloads ( ) { synchronized ( sessionDownloads ) { return sessionDownloads ; } }
tr	8	public GameController ( ) { this . level = START_LEVEL ; if ( START_LEVEL > - 1 ) { this . playerHealth = 4 ; this . playerRange = 4 ; this . playerPower = this . level ; } this . enemyFactory = new EnemyFactory ( this ) ; }
tr	3	public void setDateTimeValue ( Date dateTimeValue ) { this . dateTimeValue = dateTimeValue ; }
tr	8	public BeanstreamApiException ( Exception e , String message ) { super ( e ) ; this . code = - 1 ; this . category = - 1 ; this . httpStatusCode = - 1 ; this . message = message ; }
tr	7	public Options < T > exclude ( String ... attributes ) { for ( String attribute : attributes ) { this . attributes . remove ( attribute ) ; } return this ; }
tr	7	@ Override public void removeAll ( List < Program > programList ) { for ( Program p : programList ) { removeProgram ( p ) ; } }
tr	10	public CustomDistributionPanel ( ) { initComponents ( ) ; this . fileChooser = new JFileChooser ( ) ; this . inputFieldsChanged = true ; this . rtTextArea . getDocument ( ) . addDocumentListener ( new TextFieldListener ( this ) ) ; this . rtFileTextfield . getDocument ( ) . addDocumentListener ( new TextFieldListener ( this ) ) ; }
tr	3	public String getUrl ( ) { return url ; }
tr	8	public String getString ( String name ) { if ( ! tags . containsKey ( name ) ) return "" ; return ( ( StringTag ) tags . get ( name ) ) . data ; }
tr	9	@ Override public int compare ( Object o1 , Object o2 ) { PopulationRecord pr1 = ( PopulationRecord ) o1 ; PopulationRecord pr2 = ( PopulationRecord ) o2 ; if ( pr1 . getDeaths2010 ( ) > pr1 . getDeaths2010 ( ) ) { return 1 ; } else if ( pr1 . getDeaths2010 ( ) < pr2 . getDeaths2010 ( ) ) { return - 1 ; } else { return 0 ; } }
tr	6	@ Override public String accept ( final NodeVisitor visitor ) { return visitor . visit ( this ) ; }
tr	4	@ XmlAttribute public void setFilename ( String filename ) { this . filename = filename ; }
tr	6	public HelpInfo ( String name , String filePath ) { this . name = name ; this . filePath = filePath ; if ( filePath != null ) { info = getInfoFromFile ( ) ; } }
tr	5	public void destroy ( ) { game . stopLWJGL ( ) ; if ( display_parent != null ) remove ( display_parent ) ; super . destroy ( ) ; }
tr	5	public void settable_employeeListener ( MouseListener l ) { this . table_employee . addMouseListener ( l ) ; }
tr	7	private void addEntityCount ( int amount ) { this . entityCount . add ( amount ) ; while ( this . entityCount . size ( ) > maxSize ) { this . entityCount . remove ( 0 ) ; } }
tr	10	public Directory ( String name , Permissions perm , String device ) { super ( name , perm , device ) ; stat . flags = Entry . DMDIR ; }
tr	10	public static Deletion dd ( Deletion d1 , Deletion d2 ) { StateVector vec = d1 . getStateVec ( ) ; int p1 = d1 . getPos ( ) , p2 = d2 . getPos ( ) ; if ( p1 < p2 ) return d1 ; else if ( p1 > p2 ) return new Deletion ( vec , p1 - 1 ) ; else return null ; }
tr	6	public RobotProtocolTemplate ( InputStream input , OutputStream output ) { super ( new RobotRequestReader ( input ) , output ) ; }
tr	3	public MersenneTwisterFast ( final int [ ] array ) { setSeed ( array ) ; }
tr	1	public PingSubsystem ( ) { }
tr	9	@ Override public Object getValueAt ( int rowIndex , int columnIndex ) { String linhas [ ] = dados . get ( rowIndex ) ; return linhas [ columnIndex ] ; }
tr	1	public void setColour ( ) { }
tr	9	@ Test public void testIntRange6 ( ) throws RangeCreationException { int [ ] intRange = ArraysExt . range ( 2 , 3 , 1 , true ) ; int [ ] intExpected = new int [ ] { 2 } ; ArrayAssert . assertEquals ( intExpected , intRange ) ; }
tr	4	@ Override public void mouseEntered ( MouseEvent e ) { }
tr	4	public double snapToGridY ( double y , double gridsnapy ) { return el . snapToGridY ( y , gridsnapy ) ; }
tr	7	private String getLinkContinueToken ( JsonObject result ) { for ( String token : CONTINUE_TOKEN_NAVIGATOR . navigate ( result ) ) return token ; return null ; }
tr	9	public void initializeGame ( ) { JLabel piece = new JLabel ( new ImageIcon ( "Chess Pieces/bRook.gif" ) ) ; JPanel panel = ( JPanel ) chessBoard . getComponent ( 0 ) ; panel . add ( piece ) ; piece = new JLabel ( new ImageIcon ( "Chess Pieces/bKnight.gif" ) ) ; panel = ( JPanel ) chessBoard . getComponent ( 1 ) ; panel . add ( piece ) ; piece = new JLabel ( new ImageIcon ( "Chess Pieces/bBishop.gif" ) ) ; panel = ( JPanel ) chessBoard . getComponent ( 2 ) ; panel . add ( piece ) ; piece = new JLabel ( new ImageIcon ( "Chess Pieces/bQueen.gif" ) ) ; panel = ( JPanel ) chessBoard . getComponent ( 3 ) ; panel . add ( piece ) ; piece = new JLabel ( new ImageIcon ( "Chess Pieces/bKing.gif" ) ) ; panel = ( JPanel ) chessBoard . getComponent ( 4 ) ; panel . add ( piece ) ; piece = new JLabel ( new ImageIcon ( "Chess Pieces/bBishop.gif" ) ) ; panel = ( JPanel ) chessBoard . getComponent ( 5 ) ; panel . add ( piece ) ; piece = new JLabel ( new ImageIcon ( "Chess Pieces/bKnight.gif" ) ) ; panel = ( JPanel ) chessBoard . getComponent ( 6 ) ; panel . add ( piece ) ; piece = new JLabel ( new ImageIcon ( "Chess Pieces/bRook.gif" ) ) ; panel = ( JPanel ) chessBoard . getComponent ( 7 ) ; panel . add ( piece ) ; piece = new JLabel ( new ImageIcon ( "Chess Pieces/bPawn.gif" ) ) ; panel = ( JPanel ) chessBoard . getComponent ( 8 ) ; panel . add ( piece ) ; piece = new JLabel ( new ImageIcon ( "Chess Pieces/bPawn.gif" ) ) ; panel = ( JPanel ) chessBoard . getComponent ( 9 ) ; panel . add ( piece ) ; piece = new JLabel ( new ImageIcon ( "Chess Pieces/bPawn.gif" ) ) ; panel = ( JPanel ) chessBoard . getComponent ( 10 ) ; panel . add ( piece ) ; piece = new JLabel ( new ImageIcon ( "Chess Pieces/bPawn.gif" ) ) ; panel = ( JPanel ) chessBoard . getComponent ( 11 ) ; panel . add ( piece ) ; piece = new JLabel ( new ImageIcon ( "Chess Pieces/bPawn.gif" ) ) ; panel = ( JPanel ) chessBoard . getComponent ( 12 ) ; panel . add ( piece ) ; piece = new JLabel ( new ImageIcon ( "Chess Pieces/bPawn.gif" ) ) ; panel = ( JPanel ) chessBoard . getComponent ( 13 ) ; panel . add ( piece ) ; piece = new JLabel ( new ImageIcon ( "Chess Pieces/bPawn.gif" ) ) ; panel = ( JPanel ) chessBoard . getComponent ( 14 ) ; panel . add ( piece ) ; piece = new JLabel ( new ImageIcon ( "Chess Pieces/bPawn.gif" ) ) ; panel = ( JPanel ) chessBoard . getComponent ( 15 ) ; panel . add ( piece ) ; piece = new JLabel ( new ImageIcon ( "Chess Pieces/wPawn.gif" ) ) ; panel = ( JPanel ) chessBoard . getComponent ( 48 ) ; panel . add ( piece ) ; piece = new JLabel ( new ImageIcon ( "Chess Pieces/wPawn.gif" ) ) ; panel = ( JPanel ) chessBoard . getComponent ( 49 ) ; panel . add ( piece ) ; piece = new JLabel ( new ImageIcon ( "Chess Pieces/wPawn.gif" ) ) ; panel = ( JPanel ) chessBoard . getComponent ( 50 ) ; panel . add ( piece ) ; piece = new JLabel ( new ImageIcon ( "Chess Pieces/wPawn.gif" ) ) ; panel = ( JPanel ) chessBoard . getComponent ( 51 ) ; panel . add ( piece ) ; piece = new JLabel ( new ImageIcon ( "Chess Pieces/wPawn.gif" ) ) ; panel = ( JPanel ) chessBoard . getComponent ( 52 ) ; panel . add ( piece ) ; piece = new JLabel ( new ImageIcon ( "Chess Pieces/wPawn.gif" ) ) ; panel = ( JPanel ) chessBoard . getComponent ( 53 ) ; panel . add ( piece ) ; piece = new JLabel ( new ImageIcon ( "Chess Pieces/wPawn.gif" ) ) ; panel = ( JPanel ) chessBoard . getComponent ( 54 ) ; panel . add ( piece ) ; piece = new JLabel ( new ImageIcon ( "Chess Pieces/wPawn.gif" ) ) ; panel = ( JPanel ) chessBoard . getComponent ( 55 ) ; panel . add ( piece ) ; piece = new JLabel ( new ImageIcon ( "Chess Pieces/wRook.gif" ) ) ; panel = ( JPanel ) chessBoard . getComponent ( 56 ) ; panel . add ( piece ) ; piece = new JLabel ( new ImageIcon ( "Chess Pieces/wKnight.gif" ) ) ; panel = ( JPanel ) chessBoard . getComponent ( 57 ) ; panel . add ( piece ) ; piece = new JLabel ( new ImageIcon ( "Chess Pieces/wBishop.gif" ) ) ; panel = ( JPanel ) chessBoard . getComponent ( 58 ) ; panel . add ( piece ) ; piece = new JLabel ( new ImageIcon ( "Chess Pieces/wQueen.gif" ) ) ; panel = ( JPanel ) chessBoard . getComponent ( 59 ) ; panel . add ( piece ) ; piece = new JLabel ( new ImageIcon ( "Chess Pieces/wKing.gif" ) ) ; panel = ( JPanel ) chessBoard . getComponent ( 60 ) ; panel . add ( piece ) ; piece = new JLabel ( new ImageIcon ( "Chess Pieces/wBishop.gif" ) ) ; panel = ( JPanel ) chessBoard . getComponent ( 61 ) ; panel . add ( piece ) ; piece = new JLabel ( new ImageIcon ( "Chess Pieces/wKnight.gif" ) ) ; panel = ( JPanel ) chessBoard . getComponent ( 62 ) ; panel . add ( piece ) ; piece = new JLabel ( new ImageIcon ( "Chess Pieces/wRook.gif" ) ) ; panel = ( JPanel ) chessBoard . getComponent ( 63 ) ; panel . add ( piece ) ; }
tr	8	public User [ ] findWhereEmailEquals ( String email ) throws UserDaoException { return findByDynamicSelect ( SQL_SELECT + " WHERE email = ? ORDER BY email" , new Object [ ] { email } ) ; }
tr	2	public boolean hasToChargeMove ( ) { return chargingMoveCount > 0 ; }
tr	4	public void setLstJoueurs ( List < Joueur > lstJoueurs ) { this . lstJoueurs = lstJoueurs ; }
tr	9	public User enableNotification ( String id ) throws WeiboException { return new User ( http . post ( getBaseURL ( ) + "notifications/follow/" + id + ".json" , true ) . asJSONObject ( ) ) ; }
tr	10	@ Test public void shouldContainWhenOtherEquals ( ) { R range = getTestRange ( from ( "10" ) , to ( "20" ) ) ; R other = getTestRange ( from ( "10" ) , to ( "20" ) ) ; assertTrue ( range . contains ( other ) ) ; assertTrue ( other . contains ( range ) ) ; }
tr	10	private void constructTextOutput ( final Vector < ScoredDocument > docs , StringBuffer response ) { for ( ScoredDocument doc : docs ) { response . append ( response . length ( ) > 0 ? "\n" : "" ) ; response . append ( doc . asTextResult ( ) ) ; } response . append ( response . length ( ) > 0 ? "\n" : "" ) ; }
tr	8	double getLongitudeInDegrees ( double row , double positionInRow ) { double offset = getPositionOffset ( row ) ; double rowLength = getRowLength ( row ) ; if ( rowLength == 0 ) { return 0 ; } double adjustedPosition = ( positionInRow + offset ) % rowLength ; return 360.0 * adjustedPosition / rowLength ; }
tr	3	public void setArmour ( String armour ) { this . armour = armour ; }
tr	4	@ Override public String toString ( ) { return gameComponent . toString ( ) ; }
tr	7	@ Override public String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( "{" ) ; if ( getAccount ( ) != null ) sb . append ( "Account: " + getAccount ( ) ) ; sb . append ( "}" ) ; return sb . toString ( ) ; }
tr	2	public void setI ( float i ) { this . i = i ; }
tr	2	public void setDirected ( boolean isDirected ) { this . isDirected = isDirected ; }
tr	1	public CategoryBean ( ) { super ( ) ; }
tr	8	public GameBoard ( int mines , int height , int width ) { board = new Square [ height ] [ width ] ; for ( int i = 0 ; i < height ; i ++ ) { for ( int j = 0 ; j < width ; j ++ ) { board [ i ] [ j ] = new Square ( ) ; } } this . mines = mines ; this . height = height ; this . width = width ; }
tr	6	private void jMenuItem14ActionPerformed ( java . awt . event . ActionEvent evt ) { }
tr	10	public void addControllerMap ( String name , Map < String , ? extends Object > attribs ) { if ( getControllersMap ( ) != null ) { getControllersMap ( ) . put ( name , attribs ) ; } else { this . setControllersMap ( new HashMap < String , Map < String , ? extends Object >> ( ) ) ; this . getControllersMap ( ) . put ( name , attribs ) ; } }
tr	1	public boolean invocoDecir ( ) { return this . invocoDecir ; }
tr	7	public DefaultTempFileManager ( ) { tmpdir = System . getProperty ( "java.io.tmpdir" ) ; tempFiles = new ArrayList < TempFile > ( ) ; }
tr	10	public static void startGraphicsProgram ( GObject gobj , String [ ] args ) { GraphicsProgram program = new GObjectProgram ( ) ; program . setStartupObject ( gobj ) ; program . start ( args ) ; }
tr	6	public void swap ( LinkedList list , Object x , Object y ) { }
tr	1	private Injectors ( ) { }
tr	5	private static int numElements ( double [ ] [ ] arr ) { int count = 0 ; for ( int i = 0 ; i < arr . length ; ++ i ) count += arr [ i ] . length ; return count ; }
tr	9	public static void getStable ( ) { double time1 = 0 ; double time2 = 0 ; do { Helpers . startTimer ( ) ; kdtree . windowQuery ( false , 1 ) ; time1 = Helpers . endTimer ( false ) ; Helpers . startTimer ( ) ; kdtree . windowQuery ( false , 1 ) ; time2 = Helpers . endTimer ( false ) ; } while ( ! Helpers . withinThreePercent ( time1 , time2 ) ) ; }
tr	6	public Housewife ( String HousewifeName , Messenger messenger ) { this . HousewifeName = HousewifeName ; messenger . registerClient ( this ) ; }
tr	5	private boolean hasOutput ( ) { return method . equals ( "POST" ) || method . equals ( "PUT" ) && ! data . isEmpty ( ) ; }
tr	7	public boolean release ( Job job , int priority , int delay ) throws BeanstalkcException { return release ( job . getId ( ) , priority , delay ) ; }
tr	4	public void setCardHolderCountryCode ( String value ) { this . cardHolderCountryCode = value ; }
tr	6	@ Override public int getNoticeStartTiming ( ) { return convertToNuturalNumber ( getProPertyAsInt ( NOTICE_START_TIMING , DEFAULT_NOTICE_START_TIMING ) ) ; }
tr	3	public int jjtGetNumChildren ( ) { return ( children == null ) ? 0 : children . length ; }
tr	1	public OutgoingCarrierFactory ( ) { }
tr	3	public Course getCourse ( ) { return course ; }
tr	10	private void agentButtonActionPerformed ( java . awt . event . ActionEvent evt ) { this . cursor = cursorTypes . AGENT ; this . setStatusMessage ( "Cursor selected: agent" ) ; }
tr	2	public int getEngineRandomizeLoop ( ) { return engineRandomizeLoop ; }
tr	5	@ Test public void capitalizeWithSpace ( ) { assertEquals ( " " , instance . capitalize ( " " ) ) ; }
tr	10	public static boolean isValidShuffleDynamicProgramming ( String str1 , String str2 , String str3 ) { if ( str1 == null || str2 == null || str3 == null ) { return false ; } if ( str1 . length ( ) + str2 . length ( ) != str3 . length ( ) ) { return false ; } if ( str1 . isEmpty ( ) ) { return str2 . equals ( str3 ) ; } if ( str2 . isEmpty ( ) ) { return str1 . equals ( str3 ) ; } return isValidShuffleRecursiveDynamicProgramming ( str1 , str2 , str3 , 0 , 0 , 0 , new HashSet < > ( ) ) ; }
tr	4	public java . lang . long getId ( ) { return id ; }
tr	3	public void setUri ( String uri ) { this . uri = uri ; }
tr	2	public long getCount ( ) { return count ; }
tr	3	private void copy ( ) { TextComponentUtil . copy ( currentTextComponent ) ; }
tr	3	public boolean isShareQuantityZero ( ) { boolean result ; if ( shareQuantity == 0 ) { result = true ; } else { result = false ; } return result ; }
tr	6	public void snapToGrid ( JGPoint p , int gridsnapx , int gridsnapy ) { el . snapToGrid ( p , gridsnapx , gridsnapy ) ; }
tr	6	protected void writePrimitiveArray ( Object array ) throws IOException { writeArray ( convertPrimitiveArrayToObjectArray ( array ) ) ; }
tr	6	@ Test public void testGetInput ( ) { assertEquals ( "getInput() returns the current input instance" , "bar" , tester . getInput ( ) . getArgument ( "foo" ) ) ; }
tr	1	public boolean acceptsArguments ( ) { return true ; }
tr	10	public void testChangeNick ( ) { roomCmd ( "bees" , "!botcreategame false" ) ; roomCmd ( "bob" , "!join" ) ; privCmd ( "bees" , "!botdelaycmd #channel !botdeal7 bob" ) ; gameManager . changeNick ( "bob" , "newhart" ) ; List < Message > responses = roomCmd ( "newhart" , "!list" ) ; assertMessage ( "newhart" , "List of players: newhart:0 " , responses . get ( 0 ) ) ; }
tr	6	@ Override public boolean holds ( Variable var ) { return rule . violates ( var ) ; }
tr	4	protected LevelCreator ( ) { level = new Level ( ) ; loaded = false ; }
tr	9	public CashOffice registerCashOffice ( CashOffice cashOffice ) { int index = cashOffices . indexOf ( cashOffice ) ; if ( index == - 1 ) { addCashOffice ( cashOffice ) ; return cashOffice ; } else { CashOffice foundedCashOffice = cashOffices . get ( index ) ; return foundedCashOffice ; } }
tr	5	public void setEntities ( ArrayList < GameEntity > param ) { entities = param ; }
tr	4	public Set < long > getBlockHashList ( ) { return blockHashList . keySet ( ) ; }
tr	2	public void setComId ( int comId ) { this . comId = comId ; }
tr	6	public static void main ( String [ ] args ) { System . out . println ( "hola mundo" ) ; }
tr	4	public void testGetVirtualLinks ( ) { assertNotNull ( request . getVirtualLinks ( ) ) ; }
tr	5	public String getPasswort ( ) { String passwort = new String ( this . passwordField . getPassword ( ) ) ; return passwort ; }
tr	8	@ Override public String toString ( ) { return this . getClass ( ) . getName ( ) + " code: " + code + " category: " + category + " message: " + message ; }
tr	9	@ Test public void leafElementsArray ( ) { final Object [ ] root = new Object [ ] { ImmutableMap . of ( "name" , "Alice" , "age" , 37 ) , ImmutableMap . of ( "name" , "Becky" , "age" , 42 ) } ; assertPathWalksAre ( Traversals . leafElements ( root ) , new Object [ ] [ ] { { "[0].name" , "Alice" } , { "[0].age" , 37 } , { "[1].name" , "Becky" } , { "[1].age" , 42 } } ) ; }
tr	3	@ Override public int hashCode ( ) { return contents . hashCode ( ) ; }
tr	8	public Runnable poll ( ActorID actorID ) { Runnable r = super . poll ( actorID ) ; if ( r == null && disposable ) { agent . unregister ( this ) ; } return r ; }
tr	2	public int [ ] getBlockPointers ( ) { return this . blockPointers ; }
tr	1	private Util ( ) { }
tr	1	public static void about ( ) { }
tr	1	public AriadnaMember ( ) { }
tr	2	public int getPort ( ) { return port ; }
tr	10	@ Override public void mouseReleased ( MouseEvent e ) { for ( HElement h : elements ) { if ( h . getBounds ( ) . contains ( e . getPoint ( ) ) ) { h . mouseReleased ( e ) ; } } }
tr	4	@ Override public String getId ( ) { return id ; }
tr	3	public float getColorTolerance ( ) { return ( float ) toleranceSlider . getValue ( ) / 10 ; }
tr	9	public void load ( Runnable runnable ) { while ( true ) { try { executor . execute ( runnable ) ; break ; } catch ( RejectedExecutionException e ) { Macro . sleep ( 500 ) ; } } }
tr	7	public int getDistanceOrthogonal ( Point p ) { return Math . abs ( y - p . y ( ) ) + Math . abs ( x - p . x ( ) ) ; }
tr	2	short getNumber ( ) { return number ; }
tr	5	@ Override public boolean apply ( Rule r ) { return r . hidden ; }
tr	5	@ Subscribe public void showView ( UserViewShowEvent event ) { initLayout ( ) ; }
tr	5	@ Override public String toString ( ) { return "SecondBean [gender=" + gender + "  profession=" + profession + "]" ; }
tr	6	public JUMP ( String jmpLabel ) { super ( Opcode . J , 0 , "" ) ; JmpLabel = jmpLabel ; }
tr	2	public void setQmParentInstId ( int qmParentInstId ) { this . qmParentInstId = qmParentInstId ; }
tr	2	public ConnectionManager ( ) { super ( ConnectionListener . class ) ; }
tr	1	public IndexerCommon ( ) { }
tr	5	public void showMessageBox ( String sender , String message , boolean option ) { }
tr	9	public static void print ( int level , String message ) { if ( level <= LEVEL ) { System . out . println ( String . format ( " debug [%d] - %s" , level , message ) ) ; } }
tr	1	public synchronized static boolean localCache ( ) { return localCache ; }
tr	2	public boolean hasNext ( ) { return this . hasMoreElements ( ) ; }
tr	3	@ Override public String getName ( ) { return "Remaining" ; }
tr	9	public void registerCommandLineArguments ( OptionParser parser ) { parser . addOption ( new OptionBuilder ( "separator" ) . setShortName ( "s" ) . hasArgument ( true ) . setDefault ( " " ) . create ( ) ) ; parser . addOption ( new OptionBuilder ( "no-header" ) . setShortName ( "a" ) . create ( ) ) ; }
tr	6	static byte [ ] getPieceTypesForPlayer ( int player , byte [ ] pieceTypesToCopy ) { byte [ ] pieceTypes = new byte [ pieceTypesToCopy . length / 2 ] ; for ( int i = player ; i < pieceTypesToCopy . length ; i += 2 ) pieceTypes [ i / 2 ] = pieceTypesToCopy [ i ] ; return pieceTypes ; }
tr	4	public void revisarVictoria ( JFrame frame ) { this . frame = frame ; this . revisarGane = true ; }
tr	5	public int getMonth ( ) { return backCalendar . get ( Calendar . MONTH ) + 1 ; }
tr	7	public void setFocusable ( boolean b ) { ( ( JSpinner . DefaultEditor ) this . value . getEditor ( ) ) . getTextField ( ) . setFocusable ( b ) ; }
tr	2	public void setProjectId ( int projectId ) { this . projectId = projectId ; }
tr	8	public static void clearRegisterIesDigital ( int id_actuacio , MyDatabase mysql ) { String SQL2 = "DELETE FROM tuta_dies_sancions WHERE idActuacio=" + id_actuacio ; int nup = mysql . executeUpdate ( SQL2 ) ; }
tr	10	public int [ ] likertJakauma ( ) { int [ ] jakaumat = new int [ 5 ] ; int ykkoset = 0 ; int kakkoset = 0 ; int kolmoset = 0 ; int neloset = 0 ; int vitoset = 0 ; for ( int arvo : this . aineisto ) { if ( arvo == 1 ) { ykkoset ++ ; } else if ( arvo == 2 ) { kakkoset ++ ; } else if ( arvo == 3 ) { kolmoset ++ ; } else if ( arvo == 4 ) { neloset ++ ; } else if ( arvo == 5 ) { vitoset ++ ; } } double summa = ykkoset + kakkoset + kolmoset + neloset + vitoset ; jakaumat [ 0 ] = ( int ) ( 100 * ( 1.0 * ykkoset / summa ) ) ; jakaumat [ 1 ] = ( int ) ( 100 * ( 1.0 * kakkoset / summa ) ) ; jakaumat [ 2 ] = ( int ) ( 100 * ( 1.0 * kolmoset / summa ) ) ; jakaumat [ 3 ] = ( int ) ( 100 * ( 1.0 * neloset / summa ) ) ; jakaumat [ 4 ] = ( int ) ( 100 * ( 1.0 * vitoset / summa ) ) ; return jakaumat ; }
tr	2	public byte getNotSettable ( ) { return notSettable ; }
tr	3	public Date getStartdate ( ) { return startdate ; }
tr	5	public void setSide ( AList < Song > s ) { this . songs = s ; }
tr	3	@ XmlAttribute public float getI ( ) { return i ; }
tr	1	public int portNumber ( ) { return this . portNumber ; }
tr	8	public double [ ] getDoubleRandArray ( int size , int scope ) { double [ ] array = new double [ size ] ; Random r = new Random ( ) ; for ( int i = 0 ; i < size ; i ++ ) { array [ i ] = new double ( r . nextDouble ( ) * scope ) ; } return array ; }
tr	9	public static Object invokeGetter ( Object messageObject , Method method ) throws Exception { try { return method . invoke ( messageObject , null ) ; } catch ( IllegalAccessException e ) { throw new Exception ( "Cannot access method" ) ; } }
tr	8	public void mouseExited ( MouseEvent arg0 ) { String command = "mouseExited-" + arg0 . getComponent ( ) . getName ( ) ; enqueueCommands ( command ) ; }
tr	1	public DefaultOclContext ( ) { }
tr	7	public void skipPast ( String to ) { this . myIndex = this . mySource . indexOf ( to , this . myIndex ) ; if ( this . myIndex < 0 ) { this . myIndex = this . mySource . length ( ) ; } else { this . myIndex += to . length ( ) ; } }
tr	9	public void init ( int i , int j , int k , int l ) { pixel_per_lum_line = i ; pixel_per_col_line = j ; lum_y_incr = k ; col_y_incr = l ; }
tr	7	private void setUpFrame ( ) { super . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ) ; super . setResizable ( false ) ; super . setLayout ( new BorderLayout ( ) ) ; }
tr	1	public ObjectFactory ( ) { }
tr	10	private int screenCanMoveRight ( int distance ) { if ( ! scrollLocks [ 3 ] ) { return distance ; } else { return ZettaUtil . clamp ( distance , 0 , TILE_X * zone . getBlockSizeX ( ) - ( this . getScreenRoomX ( ) + SCREEN_BUFFER_SIZE_X ) ) ; } }
tr	7	private Dimension getMinimumComponentSize ( Component comp ) { if ( isScrollbar ( comp ) ) return getMinimumScrollbarSize ( comp ) ; return comp . getMinimumSize ( ) ; }
tr	8	public java . util . List < RecipeIngredient > getIngredients ( ) { return ( ( IngredientListModel ) ingredientList . getModel ( ) ) . getIngredients ( ) ; }
tr	3	public void setCategory ( Category category ) { this . category = category ; }
tr	4	public void setUserId ( java . lang . long userId ) { this . userId = userId ; }
tr	7	private void checkLevel ( ) { if ( Console . getDebugMode ( ) ) setLevel ( Level . ALL ) ; else setLevel ( Level . INFO ) ; }
tr	4	static void updatestatus ( int m ) { switch ( m ) { case 1 : status . setText ( "Drag to create an entity" ) ; break ; case 2 : status . setText ( "Drag to create an bubble" ) ; break ; case 3 : status . setText ( "Drag to create an data store" ) ; break ; case 4 : status . setText ( "Drag to create an data flow arrow" ) ; break ; case 6 : status . setText ( "Drag to create an control flow arrow" ) ; break ; default : status . setText ( "" ) ; } }
tr	1	public Patient ( ) { super ( "" , "" , "" ) ; }
tr	4	@ Override public FullVersion getVersion ( ) { return version ; }
tr	10	@ Override public int getIndex ( ) { if ( this . isInTextIntro ( ) ) { List < Line > list = ( ( TextIntroImp ) this . getParent ( ) ) . getText ( ) ; return list . indexOf ( this ) ; } return 0 ; }
tr	9	public CargarDatosEmail ( java . awt . Frame parent , boolean modal ) { super ( parent , modal ) ; initComponents ( ) ; envio = new EnvioEmailControlador ( ) ; }
tr	9	public static void main ( String args [ ] ) { String s = "anagram" ; String t = "nagaram" ; System . out . println ( isAnagram ( s , t ) ) ; }
tr	2	public void clear ( ) { positions . clear ( ) ; }
tr	4	public void setHiliteVisible ( boolean visible ) { showHilitedRange = visible ; repaint ( ) ; }
tr	7	public int [ ] plusOne ( int [ ] digits ) { int carry = 1 ; if ( digits == null || digits . length == 0 ) { return digits ; } for ( int i = digits . length - 1 ; i >= 0 ; i -- ) { int sum = digits [ i ] + carry ; digits [ i ] = sum % 10 ; carry = sum / 10 ; if ( carry == 0 ) { break ; } } int [ ] result = null ; if ( carry > 0 ) { result = new int [ digits . length + 1 ] ; result [ 0 ] = carry ; for ( int i = 1 ; i <= digits . length ; i ++ ) { result [ i ] = digits [ i - 1 ] ; } } else { result = digits ; } return result ; }
tr	9	public DSUBI ( IntegerRegister dest , IntegerRegister src1 , int value ) { super ( Opcode . DSUBI , 1 , "" ) ; Destination = dest ; Src1 = src1 ; Value = value ; }
tr	5	public static String Message_GetNewAssetTypeID ( String THE_MESSAGE ) { return otapiJNI . OTAPI_Basic_Message_GetNewAssetTypeID ( THE_MESSAGE ) ; }
tr	6	public void append ( byte a ) { byte [ ] b = new byte [ 1 ] ; b [ 0 ] = a ; data = ByteArrayUtils . concat ( data , b ) ; }
tr	5	@ Override public String toString ( ) { return String . format ( "(UnitDeath) %s" , unit ) ; }
tr	3	@ Override public int hashCode ( ) { return id ; }
tr	7	@ Test public void testDelMin ( ) { time . delMin ( 30 ) ; assertEquals ( 13 , time . getHrs ( ) ) ; assertEquals ( 8 , time . getMin ( ) ) ; time . delMin ( 48 ) ; assertEquals ( 12 , time . getHrs ( ) ) ; assertEquals ( 20 , time . getMin ( ) ) ; }
tr	7	private static void pokazInicjalizacje ( int [ ] liczby ) { for ( int index = 0 ; index < liczby . length ; index ++ ) { System . out . println ( "liczby[" + index + "]=" + liczby [ index ] ) ; } }
tr	9	public void appendAll ( String msg ) { if ( singleNode ) { pNode . write ( msg , true ) ; } else { for ( File f : pNodes ) { f . write ( msg , true ) ; } } }
tr	4	@ Override public String [ ] getTitles ( ) { return TITLES ; }
tr	9	private static String popUri ( String input ) { String result = null ; if ( input . charAt ( 0 ) == < ) { int pos = input . indexOf ( ">" ) ; if ( pos > 0 ) { result = input . substring ( 0 , pos + 1 ) ; } else { result = null ; } } return result ; }
tr	6	public StringValue ( final String value ) { this ( value . getBytes ( Bencode . UTF8 ) ) ; }
tr	2	public int getPoints ( ) { return points ; }
tr	6	public String getSo ( ) { System . out . println ( OS ) ; return OS ; }
tr	8	public String getParametersSignature ( String packageDst ) { String parametersSignature = "" ; for ( Type type : getParameters ( ) ) { parametersSignature += type . getObjectType ( packageDst ) ; } return parametersSignature ; }
tr	6	public void keyPressed ( int key , char c ) { super . keyPressed ( key , c ) ; switch ( key ) { case Input . KEY_ESCAPE : paused = false ; break ; } }
tr	4	public void setId ( String value ) { this . id = value ; }
tr	1	protected void execute ( ) { }
tr	3	public int optInt ( String key ) { return optInt ( key , 0 ) ; }
tr	8	public DefaultLogicalArea ( Area src ) { super ( ) ; areas = new Vector < Area > ( ) ; areas . add ( src ) ; text = src . getText ( ) ; }
tr	10	public boolean isBlocksInArea ( TBox box ) { boolean ret = false ; for ( TBlock blk : blks ) { TBox virtualBox4Blk = blk . getBlkVirtualBox ( ) ; ret = this . isInBox ( virtualBox4Blk ) ; if ( ret ) { break ; } } return ret ; }
tr	9	public void testDataAccess ( ) { Services . closeDataAccess ( ) ; System . out . println ( "\nStarting Integration test DataAccess (using default DB)" ) ; Services . createDataAccess ( ) ; TestDataAccessStub . allTests ( ) ; System . out . println ( "Finished Integration test DataAccess (using default DB)" ) ; }
tr	8	public void execute ( File inputDirectory , String outputFile ) throws IOException { write ( new File ( outputFile ) , parse ( inputDirectory ) ) ; }
tr	1	private Database ( ) { }
tr	6	public T categories ( List < Integer > categories ) { if ( categories != null ) { this . categories . addAll ( categories ) ; } return self ( ) ; }
tr	10	public CheckCreditForm ( int clientId ) { this . clientId = clientId ; initComponents ( ) ; locateForm ( ) ; if ( clientId != 0 ) { creditDAO . initTableModel ( creditTable , creditDAO . getCreditsByClientsId ( clientId ) ) ; } else { creditDAO . initTableModel ( creditTable , creditDAO . listAll ( ) ) ; } setPopupMenu ( creditTable ) ; }
tr	7	public int squareHeight ( ) { return ( int ) Math . round ( this . height / ( this . juego . getMaximaPosicion ( ) . getY ( ) + 1 ) ) ; }
tr	5	public void setStopsTime ( Map < long , String > s ) { stopsTime = s ; }
tr	2	public void setId ( int id ) { this . id = id ; }
tr	9	@ Override public boolean addItemToInventory ( Item item ) { if ( isRoomInInventory ( ) ) { for ( int i = 0 ; i < getInventorySize ( ) ; i ++ ) { if ( getItemInSlot ( i ) == null ) { setItemInSlot ( i , item ) ; break ; } } return true ; } else { return false ; } }
tr	3	public String getProcInd ( ) { return procInd ; }
tr	9	public void addRow ( DATATYPE object ) { Object [ ] rowData = constructRow ( object ) ; rows . add ( rowData ) ; fireTableDataChanged ( ) ; }
tr	10	public ArrayList < Hotel > retHotelesConNombre ( String nombre ) { ArrayList < Hotel > ret = new ArrayList < Hotel > ( ) ; for ( Hotel h : this . getHoteles ( ) ) { if ( h . getNombre ( ) == nombre ) { ret . add ( h ) ; } } return ret ; }
tr	9	@ EventHandler ( priority = EventPriority . LOWEST ) public void onWorldLoad ( final WorldLoadEvent event ) { this . loadIndex ( event . getWorld ( ) ) ; }
tr	4	@ Override public void mouseExited ( MouseEvent mouse ) { }
tr	2	public int getPosition ( ) { return position ; }
tr	5	@ Override public String toString ( ) { return "Rule(" + _sels + ) ; }
tr	3	public synchronized void commit ( ) throws SQLException { con . commit ( ) ; }
tr	9	@ Override public int hashCode ( ) { int result = iduser ; result = 31 * result + ( firstName != null ? firstName . hashCode ( ) : 0 ) ; result = 31 * result + ( lastName != null ? lastName . hashCode ( ) : 0 ) ; result = 31 * result + ( email != null ? email . hashCode ( ) : 0 ) ; result = 31 * result + ( password != null ? password . hashCode ( ) : 0 ) ; result = 31 * result + ( activateKey != null ? activateKey . hashCode ( ) : 0 ) ; return result ; }
tr	7	public static boolean isPrime ( long n ) { log ( "Checking " + n ) ; boolean isPrime = n > 1 && rangeClosed ( 2 , ( long ) sqrt ( n ) ) . noneMatch ( divisor -> n % divisor == 0 ) ; if ( isPrime ) log ( "Prime found " + n ) ; return isPrime ; }
tr	6	public Vector3f div ( float r ) { return new Vector3f ( x / r , y / r , z / r ) ; }
tr	6	@ Override public int read ( WritableByteChannel channel ) throws IOException { int read = read ( channel , getReadableBytes ( ) , null ) ; return read ; }
tr	10	@ Override public IndexedDataObject get ( String a , String b , int version ) { if ( table . get ( Hash . get ( a , b ) ) . size ( ) > version && version >= 0 ) return table . get ( Hash . get ( a , b ) ) . get ( version ) ; else return null ; }
tr	7	@ Override public String generateID ( String descriptive ) { _counter += 1 ; return _start + descriptive + "-" + _origination + "-" + _counter ; }
tr	10	public String toString ( String hdr , String other ) { return hdr + "[" + getType ( type ) + " " + getClazz ( clazz ) + ( unique ? "-unique " : " " ) + name + ( ( other != null ) ? " " + other + "]" : "]" ) ; }
tr	1	public int statDrop ( ) { return 0 ; }
tr	1	public S_Texto ( ) { super ( ) ; }
tr	10	@ Test public void testIsConvex ( ) { Point [ ] points = makePoints ( "0 0  4 5  6 5  9 3  10 4  12 -1  7 -4  4 0  3 -2  -1 1  8 2  -1 -1" ) ; assertFalse ( isConvex ( points ) ) ; assertFalse ( isCcwConvex ( points ) ) ; points = aConvex ; assertTrue ( isConvex ( points ) ) ; assertTrue ( isCcwConvex ( points ) ) ; points = makePoints ( "0.50507641 39.107643  50.002551 25.218046  79.296972 -14.68298  93.944191 -57.867001  84.347738 -94.990105  34.850263 -82.363197  -0.50507641 -36.14872  -12.121831 5.7726092" ) ; assertTrue ( isConvex ( points ) ) ; assertFalse ( isCcwConvex ( points ) ) ; points = makePoints ( "0 0  1 0  2 0  3 0  2 0  1 0" ) ; assertTrue ( isConvex ( points ) ) ; assertTrue ( isCcwConvex ( points ) ) ; points = makePoints ( "-35.860415 -16.379211  -4.0406102 -35.067033  40.406102 13.925365  57.578695 56.856849  -37.88072 38.674103  -72.225907 6.060915  -11.111678 6.3492214" ) ; assertFalse ( isConvex ( points ) ) ; assertFalse ( isCcwConvex ( points ) ) ; }
tr	4	@ Override public void dispose ( ) { super . dispose ( ) ; weaponView . dispose ( ) ; remainBulletView . dispose ( ) ; }
tr	10	public OtpErlangPid ( final OtpInputStream buf ) throws OtpErlangDecodeException { final OtpErlangPid p = buf . read_pid ( ) ; node = p . node ( ) ; id = p . id ( ) ; serial = p . serial ( ) ; creation = p . creation ( ) ; }
tr	2	@ Override public boolean isProducing ( ) { return isProducing ; }
tr	7	public static void swap ( int [ ] data , int i , int j ) { if ( data == null || i < 0 || j < 0 || data . length <= i || data . length <= j ) { throw new IllegalArgumentException ( ) ; } int tmp = data [ i ] ; data [ i ] = data [ j ] ; data [ j ] = tmp ; }
tr	4	public void dbgSetMessageFont ( JGFont font ) { debugmessage_font = font ; }
tr	3	public String getRMANLogDir ( ) { return RMANLogDir ; }
tr	8	public HomeWindow ( House house ) { this . house = house ; initialize ( ) ; for ( Human h : house . getHuman ( ) ) { addHuman ( h ) ; } }
tr	4	public ModeloTablaInventario ( ) { nombresColumnas . add ( "Producto #" ) ; nombresColumnas . add ( "Descripcion" ) ; nombresColumnas . add ( "Cant. Disponible" ) ; nombresColumnas . add ( "Cant. Minima" ) ; nombresColumnas . add ( "Precio Venta" ) ; nombresColumnas . add ( "Proveedor" ) ; nombresColumnas . add ( "Observacion" ) ; nombresColumnas . add ( "Modifico" ) ; fireTableStructureChanged ( ) ; }
tr	3	public String getSNumberOfPlacementsCode ( ) { return sNumberOfPlacementsCode ; }
tr	8	@ XmlElementDecl ( namespace = "" , name = "fOpenedVia" ) public JAXBElement < String > createFOpenedVia ( String value ) { return new JAXBElement < String > ( _FOpenedVia_QNAME , String . class , null , value ) ; }
tr	4	public void setADDRESS_NAME ( String aDDRESS_NAME ) { ADDRESS_NAME = aDDRESS_NAME ; }
tr	1	public ForestZone ( ) { this ( null ) ; }
tr	1	private HumanrResources ( ) { }
tr	1	public void endColumn ( ) { }
tr	3	public void setName ( String name ) { this . name = name ; }
tr	10	public static int numberOf2Between0AndN ( int n ) { int index = String . valueOf ( n ) . length ( ) ; int k = 0 ; for ( int i = 0 ; i < index ; i ++ ) { k += NumberOf2Between . count2InDigits ( n , i ) ; } return k ; }
tr	1	public boolean isProfile ( ) { return isProfile ; }
tr	1	protected void interrupted ( ) { }
tr	2	public boolean hasSequenceCommentOrString ( ) { return _maxLength > 0 ; }
tr	3	public void close ( ) { running = accepting = false ; }
tr	10	@ Override protected final String [ ] getParameters ( String tcpMessage ) { String [ ] s = new String [ 0 ] ; int i = tcpMessage . indexOf ( "(" ) ; int f = tcpMessage . indexOf ( ")" ) ; if ( i > 0 && f > 0 && f - i > 1 ) { String - = tcpMessage . substring ( i + 1 , f ) ; s = - . split ( ";" ) ; } return s ; }
tr	6	public void setSubunitcode ( String subunitcode ) { String oldSubunitcode = this . subunitcode ; this . subunitcode = subunitcode ; changeSupport . firePropertyChange ( "subunitcode" , oldSubunitcode , subunitcode ) ; }
tr	1	public int process_id ( ) { return 2 ; }
tr	2	public boolean isNotifications ( ) { return notificationEnabled ; }
tr	9	public Box ( float x0 , float x1 , float y0 , float y1 , float z0 , float z1 , Material material ) { this . x0 = x0 ; this . x1 = x1 ; this . y0 = y0 ; this . y1 = y1 ; this . z0 = z0 ; this . z1 = z1 ; this . material = material ; }
tr	7	public Profile [ ] findWherePictEquals ( byte [ ] pict ) throws ProfileDaoException { return findByDynamicSelect ( SQL_SELECT + " WHERE pict = ? ORDER BY pict" , new Object [ ] { pict } ) ; }
tr	7	public void testIsCornerField ( ) { beginTest ( "isCornerField method" ) ; boolean result ; result = board . isCornerField ( new Coordinate ( 0 , 0 ) ) ; assertEquals ( "isCornerField(new Coordinate(0  0)" , true , result ) ; result = board . isCornerField ( new Coordinate ( 0 , 7 ) ) ; assertEquals ( "isCornerField(new Coordinate(0  7)" , true , result ) ; result = board . isCornerField ( new Coordinate ( 7 , 0 ) ) ; assertEquals ( "isCornerField(new Coordinate(7  0)" , true , result ) ; result = board . isCornerField ( new Coordinate ( 7 , 7 ) ) ; assertEquals ( "isCornerField(new Coordinate(7  7)" , true , result ) ; result = board . isCornerField ( new Coordinate ( 3 , 7 ) ) ; assertEquals ( "isCornerField(new Coordinate(3  7)" , false , result ) ; result = board . isCornerField ( new Coordinate ( 7 , 8 ) ) ; assertEquals ( "isCornerField(new Coordinate(7  8)" , false , result ) ; }
tr	8	public Msg [ ] findWhereRecipientEquals ( String recipient ) throws MsgDaoException { return findByDynamicSelect ( SQL_SELECT + " WHERE recipient = ? ORDER BY recipient" , new Object [ ] { recipient } ) ; }
tr	5	public Kill ( Point killed , int prio ) { super ( prio ) ; killedEntity = killed ; }
tr	6	private Player getWinner ( ) { for ( Player player : playerList . getPlayers ( ) ) { if ( ! player . isBankrupt ( ) ) { return player ; } } return null ; }
tr	8	@ Override public int hashCode ( ) { int result = gitPath != null ? gitPath . hashCode ( ) : 0 ; result = 31 * result + ( folder != null ? folder . hashCode ( ) : 0 ) ; result = 31 * result + ( filePath != null ? filePath . hashCode ( ) : 0 ) ; result = 31 * result + ( revision != null ? revision . hashCode ( ) : 0 ) ; result = 31 * result + ( charset != null ? charset . hashCode ( ) : 0 ) ; return result ; }
tr	6	@ Override public int executeUpdate ( String sql , int [ ] columnIndexes ) throws SQLException { return 0 ; }
tr	9	@ Override public void reverse ( ) { MapLayers layers = map . getLayers ( ) ; layers . addLayer ( index , layer ) ; }
tr	6	public JGPoint getImageSize ( String imgname ) { return ( JGPoint ) image_orig_size . get ( imgname ) ; }
tr	8	@ Test public void shouldRemoveId3v1Tag ( ) throws Exception { String filename = MP3_WITH_ID3V1_AND_ID3V23_AND_CUSTOM_TAGS ; testShouldRemoveId3v1Tag ( new Mp3File ( filename ) ) ; }
tr	5	public static String [ ] getMonths ( final boolean shortened ) { if ( shortened ) { return DATE_FORMAT_SYMBOLS . getShortMonths ( ) ; } else { return DATE_FORMAT_SYMBOLS . getMonths ( ) ; } }
tr	3	public String getIconHref ( ) { return iconHref ; }
tr	1	public updateproducto ( ) { super ( ) ; }
tr	6	public BasicPoolEntryFactory ( PooledObjectFactory < T > objectFactory , PooledObjectValidator < T > validator ) { this . objectFactory = objectFactory ; this . validator = validator ; }
tr	6	private void addListenerLoop ( ) { for ( int i = 0 ; i < selectRecipePanel . currentLabels . size ( ) ; i ++ ) { addViewRecipeListener ( i ) ; } }
tr	9	public Point getCrossPoint ( Point p ) { double r = ( p . y - p . x ) ; double a = ( r + Math . sqrt ( r * r + 4 ) ) / 2 ; return new Point ( 1 / a , a ) ; }
tr	6	public void actionPerformed ( ActionEvent ex ) { dispose ( ) ; new SimonMenu ( ) . setVisible ( true ) ; }
tr	6	public String resultingJson ( JSONArray input ) { String jSONArray = input . toString ( ) ; return resultingJson ( jSONArray ) ; }
tr	4	@ Override public void keyTyped ( final KeyEvent arg0 ) { }
tr	6	@ Override public int hashCode ( ) { int result = super . hashCode ( ) ; result = 31 * result + ( firstName != null ? firstName . hashCode ( ) : 0 ) ; result = 31 * result + ( familyName != null ? familyName . hashCode ( ) : 0 ) ; result = 31 * result + ( address != null ? address . hashCode ( ) : 0 ) ; return result ; }
tr	6	@ Override public void exitEnquanto ( @ NotNull EnquantoParser . EnquantoContext ctx ) { }
tr	1	private Util ( ) { }
tr	9	public static String getPalindrome ( String s , int l , int r ) { char [ ] arr = s . toCharArray ( ) ; while ( l >= 0 && r < arr . length ) { if ( arr [ l ] != arr [ r ] ) break ; l -- ; r ++ ; } return s . substring ( l + 1 , r ) ; }
tr	8	@ Override public void action ( RuleContext _localctx , int ruleIndex , int actionIndex ) { switch ( ruleIndex ) { case 34 : WS_action ( ( RuleContext ) _localctx , actionIndex ) ; break ; case 37 : COMMENTLIN_action ( ( RuleContext ) _localctx , actionIndex ) ; break ; } }
tr	6	@ Test ( expected = IllegalArgumentException . class ) public void shouldFailToParseRangeInCidrNotation ( ) { Ipv6 . parse ( "1:2:3:4/64" ) ; }
tr	7	public InternManImpl ( UserStore userStore ) { this . users = new UserManagementImpl ( ) ; this . adverts = new AdvertManagementImpl ( ) ; }
tr	1	public peek_result ( ) { }
tr	10	private void botao_Campus_EdicaoActionPerformed ( java . awt . event . ActionEvent evt ) { tela_Campus_Cadastro . setVisible ( false ) ; tela_Campus_Edicao . setVisible ( true ) ; tela_Campus_Lista . setVisible ( false ) ; }
tr	5	@ Override public Object get ( Object key ) { return super . get ( toLowerCase ( key ) ) ; }
tr	5	public Node ( String data ) { this . left = null ; this . right = null ; this . data = data ; }
tr	7	public AcademyFacadeDB ( ) { emf = Persistence . createEntityManagerFactory ( "ServerSidePU" ) ; em = emf . createEntityManager ( ) ; addToDatabase ( ) ; }
tr	10	public ABook ( int id , String au , String ti , String su ) { idCode = id ; author = au ; title = ti ; subject = su ; }
tr	9	public boolean action ( Event event , Object arg ) { if ( event . target == cancelButton ) { whatToCancel . cancel ( ) ; return true ; } else return super . action ( event , arg ) ; }
tr	5	public synchronized void delete ( ) { if ( swigCPtr != 0 ) { if ( swigCMemOwn ) { swigCMemOwn = false ; otapiJNI . delete_BitcoinAcct ( swigCPtr ) ; } swigCPtr = 0 ; } super . delete ( ) ; }
tr	10	public ApproxDif ( ) { super ( 80 , 40 , "dif(1)" ) ; inputU = new InputConnector ( "u" , Component . Position . left ) ; outputY = new OutputConnector ( "y" , Component . Position . right ) ; register ( inputU ) ; register ( outputY ) ; }
tr	8	@ XmlElementDecl ( namespace = "" , name = "colours" ) public JAXBElement < ColourList > createColours ( ColourList value ) { return new JAXBElement < ColourList > ( _Colours_QNAME , ColourList . class , null , value ) ; }
tr	3	public JFrame getFullScreenWindow ( ) { return ( JFrame ) device . getFullScreenWindow ( ) ; }
tr	8	public static void initElementsFromSimplex ( Simplex s ) { e1 = s . get ( 0 ) ; e2 = s . get ( 1 ) ; e3 = s . get ( 2 ) ; e4 = s . get ( 3 ) ; }
tr	5	public List < SchoolVO > getSchools ( ) { if ( schools == null ) { schools = new ArrayList < SchoolVO > ( ) ; } return this . schools ; }
tr	9	@ Override public boolean getBooleanAt ( int columnIndex ) throws ColumnFormatException , IndexOutOfBoundsException { checkBounds ( columnIndex ) ; checkType ( columnIndex , boolean . class ) ; return ( boolean ) values . get ( columnIndex ) ; }
tr	3	public void setListOfSpecies ( Species [ ] listOfSpecies ) { this . listOfSpecies = listOfSpecies ; }
tr	2	public int getTasksSize ( ) { return tasksSize ; }
tr	2	public boolean isAlive ( ) { return alive ; }
tr	2	public int getSize ( ) { return this . size ; }
tr	3	public IOutputtedNeuron [ ] getOutputNeurons ( ) { return this . outputNeurons ; }
tr	1	public Medicamentos ( ) { }
tr	9	@ Override public void onCellCleared ( final int x , final int y ) { executeDelayed ( new Runnable ( ) { @ Override public void run ( ) { listener . onCellCleared ( x , y ) ; } } , delay ) ; }
tr	9	public static JSONException typeMismatch ( Object indexOrName , Object actual , String requiredType ) throws JSONException { if ( actual == null ) { throw new JSONException ( "Value at " + indexOrName + " is null." ) ; } else { throw new JSONException ( "Value " + actual + " at " + indexOrName + " of type " + actual . getClass ( ) . getName ( ) + " cannot be converted to " + requiredType ) ; } }
tr	3	@ Override public long getItemId ( int position ) { return position ; }
tr	10	public boolean collides ( double PointX , double PointY ) { CVector2D ThisStart = this . getCompensatedStartPosition ( ) ; CVector2D ThisEnd = this . getEndPosition ( ) ; if ( PointX > ThisEnd . getX ( ) ) return false ; if ( PointX < ThisStart . getX ( ) ) return false ; if ( PointY > ThisEnd . getY ( ) ) return false ; if ( PointY < ThisStart . getY ( ) ) return false ; return true ; }
tr	3	public String getUri ( ) { return uri ; }
tr	3	public void setContext ( Object context ) { this . context = context ; }
tr	2	public void setNorth ( boolean north ) { this . north = north ; }
tr	9	private void zzScanError ( int errorCode ) { String message ; try { message = ZZ_ERROR_MSG [ errorCode ] ; } catch ( ArrayIndexOutOfBoundsException e ) { message = ZZ_ERROR_MSG [ ZZ_UNKNOWN_ERROR ] ; } throw new Error ( message ) ; }
tr	4	public void land ( ) { System . out . println ( "Eagle: land" ) ; }
tr	1	public void setScore ( ) { }
tr	1	public void buildTamanioKB ( ) { }
tr	6	public boolean removePrefFile ( CommonPrefEPFResource pfRem ) { if ( pfRem == null || pfRem . isConfig ( ) ) return false ; return prefFiles . remove ( pfRem ) ; }
tr	1	public int getArgCount ( ) { return 2 ; }
tr	3	public void setEngine ( PresidentialRescue game ) { this . game = game ; }
tr	3	public boolean isEnabled ( ) { return ( ( JDateChooser ) components [ 0 ] ) . isEnabled ( ) ; }
tr	4	@ Override public float getX ( ) { return this . pos . x ; }
tr	8	public boolean contain ( Ticket ticket ) { if ( ! parkIsNull ( ) && park . contain ( ticket ) ) { return true ; } for ( ParkBoy boy : this . parkBoyList ) { if ( boy . contain ( ticket ) ) { return true ; } } return false ; }
tr	7	@ Override public String toString ( ) { return "Trend{" + "name='" + name + ' + "  query='" + query + ' + } ; }
tr	6	public long getElapsedMillis ( ) { if ( running ) { return System . currentTimeMillis ( ) - start ; } return stop - start ; }
tr	10	protected BombImage ( Content parent , Game game , Point position , int range , Date end ) { super ( parent , game , position , range , end ) ; }
tr	10	private Socket getSocket ( WebSocket conn ) { WebSocketImpl impl = ( WebSocketImpl ) conn ; return ( ( SocketChannel ) impl . key . channel ( ) ) . socket ( ) ; }
tr	1	protected final int j ( ) { return j ; }
tr	5	public Noticias ( int id , int idTurno , String contenido ) { this . id = id ; this . idTurno = idTurno ; this . contenido = contenido ; }
tr	3	public RebelAllianceMember ( Position position ) { super ( position ) ; }
tr	10	public static Document build ( FollowSets followSets ) { final SetToXMLUtil util = new SetToXMLUtil ( ROOT , followSets . getFollowSets ( ) ) ; util . buildXmlDocument ( ) ; return util . getDocument ( ) ; }
tr	7	@ Override public boolean equals ( Object obj ) { if ( this == obj ) return true ; if ( obj instanceof CategoryModel ) { CategoryModel other = ( CategoryModel ) obj ; return id == other . id ; } return false ; }
tr	7	public void writeRawInt48 ( long i ) throws IOException { os . write ( ( int ) ( i >>> 40 ) & FF ) ; os . write ( ( int ) ( i >>> 32 ) & FF ) ; os . write ( ( int ) ( i >>> 24 ) & FF ) ; os . write ( ( int ) ( i >>> 16 ) & FF ) ; os . write ( ( int ) ( i >>> 8 ) & FF ) ; os . write ( ( int ) i & FF ) ; notifyBytesWritten ( 6 ) ; }
tr	10	void read ( ByteBuffer bf , long offset ) throws IOException { int size = 0 ; int l = 0 ; while ( bf . hasRemaining ( ) ) { l = this . fc . read ( bf , offset + size ) ; if ( l < 0 ) { if ( offset < this . currentPos ) { continue ; } else { break ; } } size += l ; } }
tr	2	public Form2 ( ) { initComponents ( ) ; }
tr	1	public NoExisteCPException ( ) { super ( "El Codigo Postal ingresado no es valido" ) ; }
tr	9	public static TextureRegion get ( int x , int y , int width , int height ) { if ( texture == null ) texture = new Texture ( "spritesheet.png" , GL_LINEAR , GL_LINEAR ) ; return new TextureRegion ( texture , x , y , width , height ) ; }
tr	4	@ Override public CommandNode getCopyOfInstance ( ) { return new OneOperandMathCommandNode ( ) ; }
tr	3	public void setName ( String name ) { this . name = name ; }
tr	1	public InvalidSecurityAuthenticationException ( ) { }
tr	3	public void applyAbilities ( Player player ) { }
tr	9	@ Test public void testArea ( ) { Point [ ] points = aConvex ; assertEquals ( 78.5 , area ( points ) , EPS ) ; points = makePoints ( "0 0  2 0  0 1" ) ; assertEquals ( 1 , area ( points ) , EPS ) ; points = makePoints ( "0 0  0 1  2 0" ) ; assertEquals ( - 1 , area ( points ) , EPS ) ; points = makePoints ( "0 0  2 0  2 0  2 2" ) ; assertEquals ( 2 , area ( points ) , EPS ) ; points = makePoints ( "100 100  102 100  102 100  102 102" ) ; assertEquals ( 2 , area ( points ) , EPS ) ; points = makePoints ( "0 0  1 0  2 0" ) ; assertEquals ( 0 , area ( points ) , EPS ) ; }
tr	2	public int getIbo ( ) { return ibo ; }
tr	9	public LMainPanel ( ActionListener logoutAction ) { JLabel label = new JLabel ( "Main Panel" ) ; this . add ( label ) ; logoutButton = new JButton ( "LOGOUT" ) ; logoutButton . addActionListener ( logoutAction ) ; this . add ( logoutButton ) ; }
tr	8	@ Test public void testEqualsDifferentType ( ) { MonthInYear m1 = MonthInYear . valueOf ( "JANUARY" ) ; assertFalse ( m1 . equals ( new Object ( ) ) ) ; }
tr	10	@ RequestMapping ( method = RequestMethod . GET ) public void register ( Model model ) { User _user = new User ( ) ; model . addAttribute ( "user" , _user ) ; }
tr	5	public NetworkException ( String message , Throwable cause ) { super ( message , cause ) ; }
tr	7	public ArrayList < Contact > getContacts ( ) { ArrayList < Contact > contactsCopy = new ArrayList < Contact > ( ) ; Collections . copy ( contactsCopy , contacts ) ; return contactsCopy ; }
tr	6	protected void closeStreams ( ) throws IOException { if ( this . fileReader != null ) { this . fileReader . close ( ) ; this . fileReader = null ; } if ( this . outputFile != null ) { if ( this . outputWriter != null ) { this . outputWriter . close ( ) ; this . outputWriter = null ; } } }
tr	9	@ Parameters public static Collection sumValues ( ) { return Arrays . asList ( new Object [ ] [ ] { { new GenArrayList < Integer > ( ) } , { new GenLinkedList < Integer > ( ) } } ) ; }
tr	9	public Node ( String s , double d ) { children = new ArrayList < Node > ( ) ; prob = d ; str = s ; prefix = "" ; }
tr	9	public void keyReleased ( KeyEvent e ) { switch ( e . getKeyCode ( ) ) { case KeyEvent . VK_SHIFT : if ( this . editMode == EditMode . MODE_TILE_SELECTION ) { this . editMode = EditMode . MODE_TILE_EDIT ; } break ; default : break ; } }
tr	6	void setMinLength ( int minLength ) { if ( type != SimpleType . STRING ) { throw new IllegalArgumentException ( "minLength can only be used for type: String" ) ; } this . minLength = minLength ; }
tr	5	@ Override public void findClasses ( ) { possibleClasses = new ArrayList < > ( ) ; possibleClasses . add ( "0" ) ; possibleClasses . add ( "1" ) ; possibleClasses . add ( "2" ) ; possibleClasses . add ( "3" ) ; possibleClasses . add ( "4" ) ; possibleClasses . add ( "5" ) ; possibleClasses . add ( "6" ) ; possibleClasses . add ( "7" ) ; possibleClasses . add ( "8" ) ; possibleClasses . add ( "9" ) ; }
tr	7	@ Before public void setUpClass ( ) { tester . setBaseUrl ( "http://localhost/schoolmate/" ) ; tester . beginAt ( "index.php" ) ; tester . setTextField ( "username" , "test" ) ; tester . setTextField ( "password" , "test" ) ; tester . submit ( ) ; }
tr	2	public void pause ( ) { paused = true ; }
tr	1	public Departamento ( ) { }
tr	3	public void setSeminarDAO ( SeminarDAO seminarDAO ) { this . seminarDAO = seminarDAO ; }
tr	5	public ShowResult ( DataInputStream in , DataOutputStream out ) { }
tr	4	protected char nextChar ( ) { index ++ ; return contents . charAt ( index ) ; }
tr	10	public static void main ( String [ ] args ) { browser = new SwingBrowser ( ) ; JFrame main = browser . getMainWindow ( ) ; main . setSize ( 1100 , 850 ) ; main . setVisible ( true ) ; browser . displayURL ( "http://cssbox.sourceforge.net/swingbox" ) ; }
tr	3	@ Override public byte [ ] getValue ( ) { return value ; }
tr	2	private void setTxtColor ( final int txtColor ) { this . txtColor = txtColor ; }
tr	5	public void frameFinished ( ) { lastx = x ; lasty = y ; }
tr	1	public MHMMax ( ) { super ( "Memoria Morfologica Heteroasociativa MAX" ) ; }
tr	3	public String getComment ( ) { return this . comment ; }
tr	6	private void initWalls ( ) { walls = new HashMap < String , Wall > ( ) ; walls . put ( "north" , new Wall ( ) ) ; walls . put ( "south" , new Wall ( ) ) ; walls . put ( "east" , new Wall ( ) ) ; walls . put ( "west" , new Wall ( ) ) ; }
tr	8	public void add_production ( production prod ) throws internal_error { if ( prod == null || prod . lhs ( ) == null || prod . lhs ( ) . the_symbol ( ) != this ) throw new internal_error ( "Attempt to add invalid production to non terminal production table" ) ; _productions . put ( prod , prod ) ; }
tr	7	public void move ( ) { m_x += m_velocityX ; m_y += m_velocityY ; if ( m_x < 0 ) { m_x = 0 ; m_velocityX = - m_velocityX ; } else if ( m_x > m_rightBound ) { m_x = m_rightBound ; m_velocityX = - m_velocityX ; } if ( m_y < 0 ) { m_y = 0 ; m_velocityY = - m_velocityY ; } else if ( m_y > m_bottomBound ) { m_y = m_bottomBound ; m_velocityY = - m_velocityY ; } }
tr	1	public final void penDown ( ) { penDown = true ; }
tr	8	@ Override public void emitCode ( ) { System . out . println ( lineNumber ++ + ":   LDC  0 " + ( elseSize + 1 ) + ZERO_REGISTER ) ; System . out . println ( lineNumber ++ + ":   ADD  7 0 7" ) ; }
tr	2	public int intensity_stereo_bound ( ) { return h_intensity_stereo_bound ; }
tr	3	public Integer getTitle_number ( ) { return title_number ; }
tr	8	@ Override public void remove ( K key ) { if ( recursive ) { this . rootNode = removeRec ( this . rootNode , key ) ; } else { removeIt ( key ) ; } }
tr	8	@ Override public void setValue ( final Map < String , Value < ? >> value ) { if ( value == null ) { throw new NullPointerException ( ) ; } this . value = new TreeMap < String , Value < ? >> ( value ) ; }
tr	6	public void serviceRemoved ( ServiceEvent event ) { synchronized ( infos ) { infos . remove ( event . getName ( ) ) ; } }
tr	8	public void becomeFan ( String userid ) { Object [ ] [ ] _rq = new Object [ ] [ ] { { "api" , "user.become_fan" } , { "djid" , userid } } ; DataLine rq = new DataLine ( _rq ) ; this . _send ( rq , null ) ; }
tr	9	@ Override public < S , T > T visit ( Visitor < S , T > v , S state ) throws FractalException { return v . visitASTFracVar ( this , state ) ; }
tr	4	public static void setBackground ( Color background ) { Template . background = background ; }
tr	5	@ Override public String toString ( ) { return "[" + x + "  " + y + "]" ; }
tr	10	@ Test public void testIs32Bit ( ) { assertFalse ( Asn . FIRST_ASN . is32Bit ( ) ) ; assertFalse ( Asn . LAST_16_BIT_ASN . is32Bit ( ) ) ; assertTrue ( Asn . LAST_16_BIT_ASN . next ( ) . is32Bit ( ) ) ; assertTrue ( Asn . LAST_32_BIT_ASN . is32Bit ( ) ) ; }
tr	4	public boolean containsValue ( Object value ) { return _source . containsValue ( value ) ; }
tr	2	public String toString ( ) { return "a group" ; }
tr	2	public static boolean isCreateServer ( ) { return createServer ; }
tr	10	public MusicInfo ( String songName , String albumName , String singerName ) { if ( Logger . getDebugValue ( ) == 4 ) { System . out . println ( "Music Info parameterized constructor is called" ) ; } this . songName = songName ; this . albumName = albumName ; this . singerName = singerName ; }
tr	7	private JTextField getIterationsTxt ( ) { if ( iterationsTxt == null ) { iterationsTxt = new JTextField ( ) ; iterationsTxt . setText ( "500" ) ; iterationsTxt . setBounds ( 167 , 66 , 90 , 22 ) ; iterationsTxt . setEditable ( false ) ; iterationsTxt . setEnabled ( false ) ; } return iterationsTxt ; }
tr	6	@ Override public void enterRule ( ParseTreeListener listener ) { if ( listener instanceof DecafParserListener ) ( ( DecafParserListener ) listener ) . enterId1 ( this ) ; }
tr	9	public DrawController ( Stage test , DrawObject drawer , InGamePanel panel ) { this . test = test ; this . drawer = drawer ; this . panel = panel ; valid = false ; isPaused = false ; }
tr	4	public Type or ( Type that ) { return new ErrorType ( "Cannot compute " + this + " or " + that + "." ) ; }
tr	5	public String toString ( ) { return isEndOfTurn ( ) ? "[Move end of turn]" : "[Move " + attackingCountry + " attacks " + defendingCountry + "]" ; }
tr	7	public boolean optBoolean ( String key , boolean defaultValue ) { try { return this . getBoolean ( key ) ; } catch ( Exception e ) { return defaultValue ; } }
tr	6	public void setLevel ( GameState ref ) { level = ref ; vc . setLevel ( ref ) ; hc . setLevel ( ref ) ; }
tr	4	public void setName ( String name ) { Name = name ; }
tr	2	public boolean isPosition ( ) { return position != null ; }
tr	9	public void handle ( Connection connection , Request request ) { logger . debug ( "ModeCommand handler : " + request ) ; connection . serverSendCommandToMe ( "324 RPL_CHANNELMODEIS " + request . getArgs ( ) + " +opsitnmlbvk" ) ; }
tr	1	public static int int ( double x ) { return ( int ) x ; }
tr	10	public boolean canUseTech ( TechType tech , Unit target , boolean checkCanTargetUnit , boolean checkTargetsType , boolean checkCanIssueCommandType ) { return canUseTech_native ( pointer , tech , target , checkCanTargetUnit , checkTargetsType , checkCanIssueCommandType ) ; }
tr	9	private AppleNotificationServerBasicImpl ( final Object keystore , final String password , final String type , final String host , final int port ) throws KeystoreException { super ( keystore , password , type ) ; this . host = host ; this . port = port ; }
tr	2	public void setInactive ( ) { active = false ; }
tr	5	public void unregisterEntity ( Entity e ) { removeQueue . add ( e ) ; }
tr	9	public final void yyclose ( ) throws java . io . IOException { zzAtEOF = true ; zzEndRead = zzStartRead ; if ( zzReader != null ) zzReader . close ( ) ; }
tr	1	public Manager ( ) { super ( "Default" , "User" ) ; }
tr	5	public void selectNone ( ) { for ( Mark mark : marks ) { mark . setSelected ( false ) ; } }
tr	3	public RXEvaluator ( Automaton target ) { this . target = target ; }
tr	7	@ Override public Tipo validarSemantica ( ) { return InfSemantica . getInstancia ( ) . tablaTipos . get ( "int" ) ; }
tr	1	public Settings ( ) { }
tr	4	public boolean equals ( Object o ) { if ( o == null ) return false ; if ( o == this ) return true ; if ( o instanceof ASPath ) return this . equals ( ( ASPath ) o ) ; return false ; }
tr	9	@ Override protected PersonalData getResult ( ) { FieldBuilder builder = new FieldBuilder ( ) ; addDataTo ( builder ) ; PersonalData ret = new PersonalData ( SITE_KEY ) ; builder . addTo ( ret ) ; return ret ; }
tr	6	public void setPlasmidMap ( String value ) { node . setProperty ( PLASMID_MAP_PROPERTY , value ) ; }
tr	4	private int valueRanges ( Situation s ) { return valueSolution ( s , 0 ) ; }
tr	10	@ Override public IndexWriterConfig createIndexWriterConfig ( final Analyzer analyzer ) { return new IndexWriterConfig ( Version . LUCENE_36 , m_analyzerFactory == null ? new StandardAnalyzerFactory ( ) . createAnalyzer ( ) : m_analyzerFactory . createAnalyzer ( ) ) ; }
tr	3	public void setHero ( Hero hero ) { this . hero = hero ; }
tr	8	@ Override public void beforeHeaderRow ( Table table ) { println ( ) ; print ( getTextExportOptions ( ) . getDelimiter ( ) ) ; }
tr	4	public Wrapper ( ) { sum = Integer . MIN_VALUE ; }
tr	4	public void setTexture ( Texture texture ) { _texture = texture ; }
tr	7	public void addData ( long time , int hr , int load ) { testDatas . add ( new TestData ( time , hr , load ) ) ; }
tr	9	private int getNoteTop ( Note note ) { int startTime = note . getStartTime ( ) / scale ; int duration = note . getDuration ( ) / scale ; return totalHeight - startTime - duration ; }
tr	4	public CPSIPWebServiceService ( URL wsdlLocation ) { super ( wsdlLocation , CPSIPWEBSERVICESERVICE_QNAME ) ; }
tr	4	public void setProfileTbls ( Set < ProfileTbl > profileTbls ) { this . profileTbls = profileTbls ; }
tr	7	MyToken read ( TokenID expectedToken , String expectedString ) { expect ( expectedToken , expectedString ) ; return read ( ) ; }
tr	5	public static void flipDirectionTo ( int x ) { if ( Proto . x > x ) setDirectionToLeft ( ) ; else setDirectionToRight ( ) ; }
tr	4	private void incrementAge ( ) { age ++ ; if ( age > MAX_AGE ) { setDead ( ) ; } }
tr	7	public Set < Moderator > getModeratorsOfGroup ( String groupName ) { return this . storage . findModeratorsOfGroup ( groupName ) ; }
tr	9	public boolean EraseValueByKey ( String strFolder , String oneStr , String twoStr , String threeStr ) { return otapiJNI . Storage_EraseValueByKey__SWIG_0 ( swigCPtr , this , strFolder , oneStr , twoStr , threeStr ) ; }
tr	1	public ModelProperty ( ) { }
tr	8	@ Test public void remMaxMinManyDesc ( ) { AVLTree < Integer , Integer > b = new AVLTree < Integer , Integer > ( ) ; for ( int i = 10 ; i >= 1 ; -- i ) { b . add ( i , i + 1 ) ; } remMaxMinMany ( b ) ; }
tr	4	@ Override public void windowActivated ( WindowEvent e ) { return ; }
tr	1	public void setMutables ( ) { }
tr	7	@ Override public String toString ( ) { return "Animal{" + "patas=" + patas + "  isMamifero=" + isMamifero + "  nombre=" + nombre + } ; }
tr	7	protected static String getMethodSource ( Member member ) { return member . getName ( ) + "@" + member . getDeclaringClass ( ) . getSimpleName ( ) ; }
tr	9	public void updateC ( ) { setCXpos ( getXpos ( ) - 1 ) ; setCYpos ( getYpos ( ) - 1 ) ; setCWidth ( getWidth ( ) - 1 ) ; setCHeight ( getHeight ( ) - 1 ) ; }
tr	10	public final LC insets ( String top , String left , String bottom , String right ) { insets = new UnitValue [ ] { ConstraintParser . parseUnitValue ( top , false ) , ConstraintParser . parseUnitValue ( left , true ) , ConstraintParser . parseUnitValue ( bottom , false ) , ConstraintParser . parseUnitValue ( right , true ) } ; return this ; }
tr	9	public static SchemeObject makeJavaConstructor ( String className ) { SchemeObject obj = new SchemeObject ( ) ; obj . mType = type . JAVA_CONSTRUCTOR ; obj . mData = className ; return obj ; }
tr	5	public void paintComponent ( Graphics g2 ) { g2 . drawImage ( bgImage , 0 , 0 , null ) ; }
tr	6	private static int mixLightness ( int colour , int lightness , int drawType ) { if ( ( drawType & 2 ) == 2 ) { if ( lightness < 0 ) lightness = 0 ; else if ( lightness > 127 ) lightness = 127 ; lightness = 127 - lightness ; return lightness ; } lightness = lightness * ( colour & 7f ) >> 7 ; if ( lightness < 2 ) lightness = 2 ; else if ( lightness > 126 ) lightness = 126 ; return ( colour & ff80 ) + lightness ; }
tr	9	@ Test public void ShouldRecognize5778IsNotComposite ( ) { boolean expected = false ; int value = 5778 ; ChristianGoldbachDisprover disprover = new ChristianGoldbachDisprover ( ) ; boolean result = disprover . IsOddComposite ( value ) ; assert . assertEquals ( expected , result ) ; }
tr	10	public boolean isPassable ( int x , int y , Direction dir ) { Point p = new Point ( x , y ) ; return ! walls . get ( p ) . contains ( dir ) ; }
tr	5	public Vec3i performOp ( Vec3i v , int n ) { v . _vals [ 0 ] /= n ; v . _vals [ 1 ] /= n ; v . _vals [ 2 ] /= n ; return v ; }
tr	1	public SeparatorImpl ( ) { }
tr	6	public Route ( Station start , Station stop , Color color ) { this . start = start ; this . stop = stop ; this . color = color ; }
tr	2	public void checkListen ( int port ) { }
tr	1	public boolean escapeAction ( ) { return false ; }
tr	9	public static void main ( String [ ] args ) { Pow instance = new Pow ( ) ; System . out . println ( instance . pow ( 0.00001 , 2147483647 ) ) ; }
tr	8	public void requestCreateGame ( Client client ) { GameSessionHandler newGame = new GameSessionHandler ( ) ; newGame . setClient1 ( client ) ; sessions . add ( newGame ) ; }
tr	8	public boolean esSolapa ( Date dIni , Date dFi ) { return dIni . before ( dataFi ) && dFi . after ( dataInici ) ; }
tr	6	@ Test public void shouldCreateANewBinaryMinHeap ( ) { BinaryMinHeap < Integer > bmh = new BinaryMinHeap < Integer > ( Integer . class ) ; assertNotNull ( bmh ) ; }
tr	7	public boolean boundaryCheck ( Point point ) { if ( ( point . x > 0 ) && point . x < width ) { if ( ( point . y > 0 ) && point . y < height ) { return true ; } } return false ; }
tr	9	@ Override public boolean equals ( Object o ) { if ( this == o ) return true ; if ( o == null || getClass ( ) != o . getClass ( ) ) return false ; Schedule schedule = ( Schedule ) o ; if ( id != schedule . id ) return false ; if ( seqNumber != schedule . seqNumber ) return false ; return true ; }
tr	8	public String GetRemTimeString ( int sec ) { String remTimeString = "" ; int remSec = sec % 60 ; int min = sec / 60 ; int remMin = min % 60 ; int hours = min / 60 ; remTimeString = hours + ":" + remMin + ":" + remSec ; return remTimeString ; }
tr	10	@ Override public void multiply ( BigRational [ ] result ) throws BTFMatrixErrorException { for ( int i = 0 ; i < size . row ; i ++ ) { result [ position . row + i ] = multiplyRow ( i ) ; } }
tr	9	@ Test public void ShouldFind12thDigitInDecimalMadeOfConcatenatedPositiveIntegers ( ) { int index = 12 ; int expected = 1 ; IrrationalDecimalFractionIndexer indexer = new IrrationalDecimalFractionIndexer ( ) ; int result = indexer . GetNthDigitInDecimalMadeOfConcatenatedPositiveIntegers ( index ) ; assert . assertEquals ( expected , result ) ; }
tr	2	public int getTrainNumber ( ) { return trainNumber ; }
tr	4	public Edge getEdge ( int index ) { return edges [ index ] ; }
tr	7	public ThreadedHandlerFactory ( IHandlerFactory factory , IExecutorService executor ) { handlerFactory = factory ; service = executor ; }
tr	1	public HandshakeImpl1Client ( ) { }
tr	1	public OlaMundo ( ) { super ( ) ; }
tr	5	public void setDataTableModel ( List < TestData > aDatas ) { this . datas = aDatas ; }
tr	1	public boolean key_need ( ) { return true ; }
tr	2	public int getLeftValue ( ) { return leftValue ; }
tr	5	public void showHideDeleteBtn ( ) { if ( ! btnVisible ) { deletePanel . setVisible ( true ) ; this . repaint ( ) ; btnVisible = true ; } else { deletePanel . setVisible ( false ) ; this . repaint ( ) ; btnVisible = false ; } }
tr	9	@ Override public void init ( ) { stdb = new StudentDatabase ( ) ; stdb . setDbUser ( getServletContext ( ) . getInitParameter ( "dbUser" ) ) ; stdb . setDbPassword ( getServletContext ( ) . getInitParameter ( "dbPassword" ) ) ; stdb . open ( ) ; }
tr	2	int newMark ( ) { return ++ currentMark ; }
tr	1	public boolean isNegativeDistance ( ) { return this . isNegativeDistance ; }
tr	1	public boolean crashed ( ) { return crashed ; }
tr	8	void addEpsilon ( State to ) { if ( to . accept ) accept = true ; for ( Transition t : to . transitions ) transitions . add ( t ) ; }
tr	3	public void mouseExited ( final MouseEvent mouseEvent ) { }
tr	3	public static void showNewTimeWindow ( ) { timeBo . showNewTime ( ) ; }
tr	4	public void mouseExited ( MouseEvent mouseEvent ) { PaintController . mouseExited ( mouseEvent ) ; }
tr	9	public void fillLineWith ( int y , DungeonLayout filler ) { for ( int i = 0 ; i < width ; i ++ ) { this . tiles [ i ] [ y ] = DungeonTile . get ( filler ) ; } }
tr	2	public boolean isEmpty ( ) { return _top == null ; }
tr	1	public Position ( ) { }
tr	10	public void push ( T data , int stackNumber ) { int arrayStackNumber = stackNumber - 1 ; int currentIndex = arrayStackNumber * STACK_SIZE + stackPointer [ arrayStackNumber ] + 1 ; if ( currentIndex >= stackNumber * STACK_SIZE ) { throw new StackOverflowError ( ) ; } stacks [ currentIndex ] = data ; stackPointer [ arrayStackNumber ] ++ ; }
tr	1	public Typewriter ( ) { super ( 1 , 1000 ) ; }
tr	9	public void ensureCapacity ( int additionalCapacity ) { int sizeNeeded = size + additionalCapacity ; if ( sizeNeeded >= threshold ) { resize ( MathUtils . nextPowerOfTwo ( ( int ) ( sizeNeeded / loadFactor ) ) ) ; } }
tr	5	public void registerNewCustomer ( Customer c ) { if ( uowc != null ) { uowc . registerNewCustomers ( c ) ; } }
tr	10	@ Override public void clear ( ) { for ( MapSegment < K , V > mapSegment : mapSegments ) { mapSegment . lock . writeLock ( ) . lock ( ) ; } try { for ( MapSegment < K , V > mapSegment : mapSegments ) { mapSegment . clear ( ) ; } } finally { for ( MapSegment < K , V > mapSegment : mapSegments ) { mapSegment . lock . writeLock ( ) . unlock ( ) ; } } }
tr	6	public static float getFloat ( String s ) { return prefs . getFloat ( s , floatDefaults . get ( s ) ) ; }
tr	6	@ Override public void exitValInt ( @ NotNull MagicParser . ValIntContext ctx ) { }
tr	1	public int process_id ( ) { return 2 ; }
tr	7	protected void setUp ( ) { td = new TestData ( ) ; ea = td . getEa ( ) ; testEdbss = td . createEnsemblDBsData ( ) ; }
tr	8	@ Override protected void _loadApps ( ) { String [ ] appClassList = config ( ) . getAsStringVec ( "console.apps" ) ; if ( appClassList == null ) return ; for ( String appClassname : appClassList ) { loadApp ( appClassname ) ; } }
tr	10	public vxdAttribute ( String name , boolean req , boolean fixed , String value , Vector combo ) { this . name = name ; this . required = req ; this . fixed = fixed ; this . value = value ; this . combo = combo ; this . label = name ; }
tr	6	@ Override public String accept ( final NodeVisitor visitor ) { return visitor . visit ( this ) ; }
tr	2	public double getNomNetto ( ) { return nomNetto ; }
tr	10	public void testGetSyllables ( ) { System . out . println ( "getSyllables" ) ; assertTrue ( arrayEquals ( PinyinUtil . getSyllables ( "xia4" ) , new String [ ] { "xia4" } ) ) ; assertTrue ( arrayEquals ( PinyinUtil . getSyllables ( "ban1" ) , new String [ ] { "ban1" } ) ) ; assertTrue ( arrayEquals ( PinyinUtil . getSyllables ( "hao" ) , new String [ ] { "hao" } ) ) ; assertTrue ( arrayEquals ( PinyinUtil . getSyllables ( "xia4ban1" ) , new String [ ] { "xia4" , "ban1" } ) ) ; assertTrue ( arrayEquals ( PinyinUtil . getSyllables ( "wan3shang" ) , new String [ ] { "wan3" , "shang" } ) ) ; assertTrue ( arrayToString ( PinyinUtil . getSyllables ( "lao3shi1" ) ) , arrayEquals ( PinyinUtil . getSyllables ( "lao3shi1" ) , new String [ ] { "lao3" , "shi1" } ) ) ; assertTrue ( arrayToString ( PinyinUtil . getSyllables ( "shang5ban" ) ) , arrayEquals ( PinyinUtil . getSyllables ( "shang5ban" ) , new String [ ] { "shang5" , "ban" } ) ) ; assertTrue ( arrayEquals ( PinyinUtil . getSyllables ( "mian4tiao2" ) , new String [ ] { "mian4" , "tiao2" } ) ) ; assertTrue ( arrayEquals ( PinyinUtil . getSyllables ( "can1guan3" ) , new String [ ] { "can1" , "guan3" } ) ) ; assertTrue ( arrayEquals ( PinyinUtil . getSyllables ( "yi1dianr3" ) , new String [ ] { "yi1" , "dian3" , "er" } ) ) ; }
tr	3	@ Override protected String [ ] tables ( ) { return new String [ ] { "segment" } ; }
tr	2	public boolean isShutdown ( ) { return m_bShutdown ; }
tr	4	@ Override public void onEntryActivated ( SourceTextEntry newEntry ) { }
tr	7	public Dimension minimumLayoutSize ( Container target ) { if ( target . getComponentCount ( ) == 0 ) return new Dimension ( 0 , 0 ) ; return processLayout ( target , MINIMUM_LAYOUT_SIZE_MODE ) ; }
tr	4	private void initCapacity ( int capacity ) { this . capacity = capacity ; x = new int [ capacity ] ; va = new double [ capacity ] ; }
tr	6	@ Override public int hashCode ( ) { return Objects . hash ( this . port , this . host ) ; }
tr	7	public void setGroup ( int group ) { this . group = group ; element . set ( C . NUMGROUP , 1 ) ; element . set ( C . GROUPS , group ) ; }
tr	6	@ Override public void enterCompare ( @ NotNull MagicParser . CompareContext ctx ) { }
tr	5	@ Override public void addDict ( Dict value ) { add ( value ) ; }
tr	7	public GameException ( String message , Throwable cause , boolean enableSuppression , boolean writableStackTrace ) { super ( message , cause , enableSuppression , writableStackTrace ) ; }
tr	9	public static void method338 ( int i , int j , int k , int l , int i1 , int j1 ) { method340 ( l , i1 , i , k , j1 ) ; method340 ( l , i1 , ( i + j ) - 1 , k , j1 ) ; if ( j >= 3 ) { method342 ( l , j1 , k , i + 1 , j - 2 ) ; method342 ( l , ( j1 + i1 ) - 1 , k , i + 1 , j - 2 ) ; } }
tr	4	public void setCustomerPhone2 ( String value ) { this . customerPhone2 = value ; }
tr	9	private static int getPort ( ) throws Exception { if ( port != null ) { return port ; } if ( ! env . containsKey ( "BEANSTALKD_PORT" ) ) { throw new Exception ( "BEANSTALKD_PORT not set" ) ; } port = Integer . parseInt ( ( String ) env . get ( "BEANSTALKD_PORT" ) ) ; return port ; }
tr	10	LazyRMQTreap reverseRange ( int l , int r ) { NodePair ab = split ( this , l ) ; NodePair bc = split ( ab . r , r - l ) ; bc . l . rev ^= true ; return merge ( ab . l , merge ( bc . l , bc . r ) ) ; }
tr	5	public int lastChannelNum ( ) { int highestNum = 0 ; for ( int i = this . channelArray . length - 1 ; i >= 0 ; i -- ) { if ( this . channelArray [ i ] != null ) { highestNum = i ; break ; } } return highestNum ; }
tr	4	public GestionEmpleado ( ) { Conexion . GetInstancia ( ) . CadenaConexion ( ) ; }
tr	3	public TileCoordinate [ ] [ ] getRect ( ) { return rect ; }
tr	1	public void setMutables ( ) { }
tr	8	@ JsonAnySetter public void setAdditionalProperty ( String name , Object value ) { this . additionalProperties . put ( name , value ) ; }
tr	8	public void exit ( ) { for ( List < GameSystem > s : systems . values ( ) ) { for ( GameSystem system : s ) { system . exit ( ) ; } } systems . clear ( ) ; }
tr	3	public int getFirstLineNumber ( ) { return lines . firstKey ( ) ; }
tr	2	public void setActualPrice ( float actualPrice ) { this . actualPrice = actualPrice ; }
tr	3	public String getInputEncoding ( ) { return pp . getInputEncoding ( ) ; }
tr	8	private MemberStatus ( String code , String alias , String [ ] sisters ) { _code = code ; _alias = alias ; _sisters = sisters ; }
tr	3	public JLabel getRedText ( ) { return redText ; }
tr	5	public Vec2i performOp ( Vec2i v1 , Vec2i v2 ) { v1 . _vals [ 0 ] *= v2 . _vals [ 0 ] ; v1 . _vals [ 1 ] *= v2 . _vals [ 1 ] ; return v1 ; }
tr	1	public int cdlLongLeggedDojiLookback ( ) { return super . cdlLongLeggedDojiLookback ( ) ; }
tr	6	@ Override public int getFirstSlotLocationX ( ) { return currentContainer == 2 ? centerX - 51 : GamePanel . WIDTH / 2 - 150 / 2 + 48 ; }
tr	6	private class < ? > toBeanType ( int type ) { class < ? > clz = typesMap . get ( type ) ; return clz == null ? String . class : clz ; }
tr	9	public User ( String id , String fname ) { this . ID = id ; this . fullName = fname ; albumList = new HashMap < String , Album > ( ) ; }
tr	4	public MiniGameEventRelayer ( MiniGame initGame ) { game = initGame ; }
tr	9	public static String postOrderByAccountID ( ResponseFormat format , String id ) { return ORDER_TRADES . POST_ID_ORDERS . resolveString ( id , "" , format . toString ( ) ) ; }
tr	6	public static void main ( String args [ ] ) { MapView view = new MapView ( "World of Zuul" ) ; view . setVisible ( true ) ; }
tr	3	public String getPasswort ( ) { return this . passwort ; }
tr	1	public AllAnswer ( ) { super ( ) ; }
tr	4	@ Override public void execute ( ) { light . on ( ) ; }
tr	7	public WIInput ( IWIRoad road , String locator , String name ) { super ( road , locator , name , WI_INPUT_TYPE ) ; }
tr	1	private SingleTon ( ) { }
tr	9	public IDs getFollowersIDs ( String screenName , Paging paging ) throws WeiboException { return new IDs ( get ( getBaseURL ( ) + "followers/ids.xml?screen_name=" + screenName , null , paging , true ) ) ; }
tr	2	public int getRollCount ( ) { return rollCount ; }
tr	3	public Labels getLabels ( ) { if ( labels == null ) { labels = new Labels ( ) ; } return labels ; }
tr	6	public ChatHistoryArch ( ) { _imp = getImplementation ( ) ; if ( _imp != null ) { _imp . setArch ( this ) ; } else { System . exit ( 1 ) ; } }
tr	2	public void setStartY ( int startY ) { this . startY = startY ; }
tr	3	BeforePollingCycleEvent ( DirectoryPoller dp ) { super ( dp ) ; }
tr	2	public int getTick ( ) { return tick ; }
tr	1	public Frontpage ( ) { super ( ) ; }
tr	9	@ Test public void testValidateDecimal ( ) { Object obj = "49.95" ; boolean actual = mFnc . $isvalidnum ( obj ) ; boolean expected = true ; assertEquals ( "Fail to validate string. This is not a valid number." , expected , actual ) ; }
tr	5	public int get ( long index ) { if ( ! map . containsKey ( index ) ) throw new ArrayIndexOutOfBoundsException ( "index is " + index ) ; return map . get ( index ) ; }
tr	4	@ Override public String getSchema ( ) throws SQLException { return null ; }
tr	10	public RBTree ( LinkSetNode _template ) { template = _template ; if ( template instanceof TimedLinkSetNode ) { dummy = ( ( TimedLinkSetNode ) template ) . newNode ( 0 , 0 , NodeColor . RED , null , null , 0 ) ; } else { dummy = template . newNode ( 0 , 0 , NodeColor . RED , null , null ) ; } root = null ; }
tr	8	@ Test public void FIGHTING_attacking_DRAGON ( ) { assertEquals ( 1.0 , tc . getWeaknessResistance ( Type . FIGHTING , Type . DRAGON ) , 0.0 ) ; }
tr	3	public void _fatal ( Object context ) { }
tr	5	public boolean getDonne ( ) { return ( boolean ) boolean . valueOf ( map . get ( "donne" ) . toString ( ) ) ; }
tr	4	public void setPressed ( final boolean value ) { pressedProperty . set ( value ) ; }
tr	6	public boolean isNotAPoint ( Point new_point ) { return p1 != new_point && p2 != new_point && p3 != new_point ; }
tr	1	public boolean supportsCustomEditor ( ) { return true ; }
tr	1	public int process_id ( ) { return 2 ; }
tr	3	public String getFieldName ( ) { return _fieldName ; }
tr	6	public char charValue ( ) throws OtpErlangRangeException { final long l = longValue ( ) ; final char i = ( char ) l ; if ( i != l ) { throw new OtpErlangRangeException ( "Value too large for char: " + val ) ; } return i ; }
tr	4	@ Override protected void mutate ( Individual i ) { }
tr	9	private static BeanDescriptor getBdescriptor ( ) { BeanDescriptor beanDescriptor = new BeanDescriptor ( com . romajs . swing . view . CRUDInternalFrame . class , null ) ; beanDescriptor . setValue ( "containerDelegate" , "getInnerPane" ) ; beanDescriptor . setValue ( "isContainer" , boolean . true ) ; return beanDescriptor ; }
tr	5	public Customer findById ( int id ) { return daoCustomer . find ( id ) ; }
tr	3	public String getTelefone ( ) { return telefone ; }
tr	10	RetCode taGetInputParameterInfo ( final int paramIndex , InputParameterInfo retInputParameterInfo ) { try { retInputParameterInfo = super . getInputParameterInfo ( paramIndex ) ; return RetCode . Success ; } catch ( IllegalArgumentException e ) { return RetCode . BadParam ; } }
tr	8	@ Override public String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( "(" ) . append ( x ) . append ( " " ) . append ( y ) . append ( ")" ) ; return sb . toString ( ) ; }
tr	1	public ProcedureCall ( ) { this ( null , null ) ; }
tr	4	public void updateMenu ( ) { setPanel ( _menuSelect . selectMenu ( ) ) ; }
tr	4	public void setAIChannel ( byte channel , short value ) { aiChannels [ channel ] = value ; }
tr	9	private void traversal ( final TreeNode t , final List < long > list ) { if ( t . left != null ) { traversal ( t . left , list ) ; list . add ( t . value ) ; if ( t . right != null ) { traversal ( t . right , list ) ; } } }
tr	8	@ Override public JList < Edge > getEdges ( String label ) { return mapOfEdges . get ( label ) ; }
tr	8	@ RequestMapping ( { "/tipoproducto/form.html" } ) public ModelAndView form ( HttpServletRequest request , HttpServletResponse response ) throws UnsupportedEncodingException { return new ModelAndView ( "tipoproducto/form" ) ; }
tr	6	public void send ( ) { try { this . sendMsgs ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; this . close ( ) ; } }
tr	4	public Point3D ( int x , int y , int z ) { super ( x , y ) ; this . z = z ; }
tr	1	public ItemInteract ( ) { super ( ) ; }
tr	4	public PaintScreenGridManager ( final double width , final double height ) { update ( width , height ) ; }
tr	2	public void setId ( long id ) { this . id = id ; }
tr	8	public int getKills ( String progress ) { if ( ! isValid ( progress ) ) throw new IllegalArgumentException ( "progress is not valid" ) ; return Integer . parseInt ( progress . split ( " " ) [ 0 ] ) ; }
tr	9	public synchronized void unbind ( String name ) { if ( registry == null ) throw new IllegalStateException ( "registry not active" ) ; try { registry . unbind ( name ) ; } catch ( NotBoundException e ) { } catch ( Exception e ) { if ( ! ( e instanceof RuntimeException ) ) e = new RuntimeException ( "unexpected exception in " + "SimpleObjectRegistry.unbind: " + e ) ; throw ( RuntimeException ) e ; } }
tr	4	public static void main ( String [ ] args ) { launch ( args ) ; }
tr	3	public Logger getLogger ( ) { return this . logger ; }
tr	5	public void useDB ( String dbName ) { String stat = "USE " + dbName ; this . execute ( stat ) ; }
tr	7	public WebException ( String message , Throwable cause , boolean enableSuppression , boolean writableStackTrace ) { super ( message , cause , enableSuppression , writableStackTrace ) ; }
tr	5	@ Override public Command . Descriptor getDescriptor ( ) { return descriptor ; }
tr	7	@ Override public boolean isProcessing ( String clientId ) { return players . get ( clientId ) . animating ; }
tr	9	public static boolean isPermutation ( long ... numbers ) { String digits = sortString ( long . toString ( numbers [ 0 ] ) ) ; for ( int i = 1 ; i < numbers . length ; i ++ ) { if ( ! digits . equals ( sortString ( long . toString ( numbers [ i ] ) ) ) ) { return false ; } } return true ; }
tr	1	public void stopScann ( ) { }
tr	7	public FontMetrics getFontMetrics ( ) { Component comp = getComponent ( ) ; if ( comp == null ) comp = DUMMY_COMPONENT ; return comp . getFontMetrics ( labelFont ) ; }
tr	9	public DoorController ( Entity e , SpriteID opensprite , SpriteID closedsprite ) { super ( e ) ; open = false ; passable = false ; opaque = true ; this . opensprite = opensprite ; this . closedsprite = closedsprite ; }
tr	2	public int getT1_slider_position ( ) { return t1_slider_position ; }
tr	5	public XmlTags ( XmlTag tag ) { tags . add ( tag ) ; }
tr	8	private boolean r_reflexive ( ) { int among_var ; ket = cursor ; among_var = find_among_b ( a_3 , 2 ) ; if ( among_var == 0 ) { return false ; } bra = cursor ; switch ( among_var ) { case 0 : return false ; case 1 : slice_del ( ) ; break ; } return true ; }
tr	8	@ XmlElementDecl ( namespace = "" , name = "base-price" ) public JAXBElement < BigDecimal > createBasePrice ( BigDecimal value ) { return new JAXBElement < BigDecimal > ( _BasePrice_QNAME , BigDecimal . class , null , value ) ; }
tr	8	@ Test public void itDisregardsQueryStringParametersInRequestURI ( ) { request = new HttpRequest ( "GET /parameters?blah HTTP/1.1\r\n\r\n" ) ; assertThat ( request . getRequestURI ( ) , is ( equalTo ( "/parameters" ) ) ) ; }
tr	6	private void jTextField2ActionPerformed ( java . awt . event . ActionEvent evt ) { }
tr	9	public void write ( Kml kml ) throws KmlException { kml . println ( "<Orientation" + getIdAndTargetIdFormatted ( kml ) + ">" , 1 ) ; if ( heading != null ) kml . println ( "<heading>" + heading + "</heading>" ) ; if ( tilt != null ) kml . println ( "<tilt>" + tilt + "</tilt>" ) ; if ( roll != null ) kml . println ( "<roll>" + roll + "</roll>" ) ; kml . println ( - 1 , "</Orientation>" ) ; }
tr	6	public MenuItem ( String name , String description , boolean vegetarian , double price ) { super ( ) ; this . name = name ; this . description = description ; this . vegetarian = vegetarian ; this . price = price ; }
tr	6	public void each ( P1 < M > p1 , Connection conn ) { each ( p1 , conn , null ) ; }
tr	6	private void restartGame ( ) { gameChooser . changeGameState ( GameState . INITIALIZING ) ; changedGame = gameChooser ; }
tr	6	@ Override public void remove ( ) { assert . state ( this . last != null ) ; ConcurrentReferenceHashMap . this . remove ( this . last . getKey ( ) ) ; }
tr	4	@ Override public void keyTyped ( KeyEvent ke ) { }
tr	9	public static void clearTable ( JTable table ) { DefaultTableModel model = ( DefaultTableModel ) table . getModel ( ) ; model . getDataVector ( ) . clear ( ) ; model . fireTableDataChanged ( ) ; }
tr	3	public void setActiveExtruder ( int ex ) { activeEx = ex ; }
tr	3	public void mouseExited ( MouseEvent e ) { }
tr	6	@ Override public Type add ( Type that ) { return equivalent ( that ) ? new FloatType ( ) : super . add ( that ) ; }
tr	7	public SampleExpr ( Token ident , Expr xLoc , Expr yLoc , Token color ) { super ( ) ; this . ident = ident ; this . xLoc = xLoc ; this . yLoc = yLoc ; this . color = color ; }
tr	9	private void descendSelectedDimension ( ) { length /= this . factor . dimensions [ rootDimension ] ; start += subtreeStepsize * this . factor . selections [ rootDimension ] ; descendUnselectedDimension ( ) ; }
tr	5	public static FrameSet read ( File tempFile ) { FrameSet retval = new FrameSet ( ) ; return retval ; }
tr	10	public SaploFuture < boolean > updateAsync ( final SaploText saploText ) { return new SaploFuture < boolean > ( es . submit ( new Callable < boolean > ( ) { public boolean call ( ) throws SaploClientException { update ( saploText ) ; return true ; } } ) ) ; }
tr	2	public void setDescompte ( float descompte ) { this . descompte = descompte ; }
tr	9	public boolean isMatch ( String s , String p ) { if ( p . length ( ) == 0 ) { return s . length ( ) == 0 ; } if ( p . length ( ) == 1 ) { return ( s . length ( ) == 1 ) && ( p . charAt ( 0 ) == s . charAt ( 0 ) || p . charAt ( 0 ) == . ) ; } if ( p . charAt ( 1 ) != * ) { if ( s . length ( ) < 1 ) { return false ; } else { return ( s . charAt ( 0 ) == p . charAt ( 0 ) || p . charAt ( 0 ) == . ) && isMatch ( s . substring ( 1 ) , p . substring ( 1 ) ) ; } } while ( s . length ( ) > 0 && ( p . charAt ( 0 ) == s . charAt ( 0 ) || p . charAt ( 0 ) == . ) ) { if ( isMatch ( s , p . substring ( 2 ) ) ) { return true ; } s = s . substring ( 1 ) ; } return isMatch ( s , p . substring ( 2 ) ) ; }
tr	7	@ Override public final Element get ( int index ) { final int size = elements . size ( ) ; if ( index >= 0 ) { if ( index < size ) { return elements . get ( index ) ; } else { return null ; } } else { final int calculated = size + index ; if ( calculated >= 0 && calculated < size ) { return elements . get ( calculated ) ; } else { return null ; } } }
tr	8	private void setCreatureGoals ( ) { for ( Creature creature : fCreatures ) ( ( CreatureBehaviour ) creature . getBehaviour ( ) ) . setDest ( fGoal ) ; }
tr	3	public Console getConsole ( ) { return console ; }
tr	8	@ Override public IList < E > getPreorder ( ) { IList < E > list = new SList < E > ( ) ; BSTNode . getPreorder ( this . root , list ) ; return list ; }
tr	1	public HttpClientCodec ( ) { this ( 4096 , 8192 , 8192 ) ; }
tr	7	public void spawn ( ) { double center = game . pfWidth ( ) / 2 ; super . spawn ( game . random ( center - 64 , center + 64 ) , - 8 , game . random ( 1 , 2 ) , Math . PI * 3 / 2 - game . random ( - 0.5 , 0.5 ) ) ; }
tr	7	@ NaturalId @ Column ( name = "YEAR_OF_ADMISSION" , nullable = false ) public Integer getYearOfAdmission ( ) { return yearOfAdmission ; }
tr	3	public String getErrorMeg ( ) { return errorMsg ; }
tr	5	public void setJobs ( ArrayList < String > jobNames ) { this . jobs = jobNames ; }
tr	7	public String getSequence ( int iteration ) { String sequence ; sequence = sampleText . substring ( iteration , iteration + k ) ; return sequence ; }
tr	6	public void setHeader ( final String name , final Iterable < ? > values ) { headers . setHeader ( name , values ) ; }
tr	7	public String getSelectedPath ( ) { String path = "" ; for ( int i = 0 ; i < ( selectedNode . getPath ( ) . length ) ; i ++ ) { path += "/" + selectedNode . getPath ( ) [ i ] ; } return path ; }
tr	3	@ Override public double getRotationDeg ( ) { return rotation ; }
tr	8	public char readChar ( String prompt ) { while ( true ) { String response = readLine ( prompt ) ; if ( response . length ( ) == 1 ) return response . charAt ( 0 ) ; println ( "You must enter exactly one letter." ) ; } }
tr	8	@ Override public T visitId2 ( @ NotNull DecafParser . Id2Context ctx ) { return visitChildren ( ctx ) ; }
tr	1	public EvaluationUtilityTest ( ) { }
tr	9	@ Override public boolean contains ( String a , String b ) { return indexTable . containsKey ( Hash . get ( a , b ) ) ; }
tr	3	public static Inventario getInstance ( ) { return INSTANCE ; }
tr	1	protected void start ( ) { start ( null ) ; }
tr	10	private void clearTopInterfaces ( ) { stream . putOpcode ( 130 ) ; if ( inventoryOverlayInterfaceID != - 1 ) { inventoryOverlayInterfaceID = - 1 ; redrawTab = true ; continuedDialogue = false ; drawTabIcons = true ; } if ( chatboxInterfaceId != - 1 ) { chatboxInterfaceId = - 1 ; redrawChatbox = true ; continuedDialogue = false ; } openInterfaceId = - 1 ; }
tr	4	@ Override public int hashCode ( ) { int hash = 3 ; hash = 83 * hash + ( this . id != null ? this . id . hashCode ( ) : 0 ) ; return hash ; }
tr	1	public int size ( ) { return size ; }
tr	1	public void applyVelocity ( ) { }
tr	3	public void setType ( Type type ) { this . type = type ; }
tr	7	@ Override public UnitIntSizedTripleByteArray clone ( ) { UnitIntSizedTripleByteArray uisba = ( UnitIntSizedTripleByteArray ) super . clone ( ) ; uisba . value = null ; uisba . lengthUnit = new UnitInteger ( ) ; return uisba ; }
tr	10	private PreparedStatement prepareStatement ( String [ ] arr ) throws Exception { PreparedStatement pstmt = null ; pstmt = conn . prepareStatement ( arr [ 0 ] ) ; int i = 1 ; while ( i < arr . length ) { pstmt . setString ( i , arr [ i ] ) ; i ++ ; } return pstmt ; }
tr	8	private void addText ( List < String > list , String value ) { list . add ( processor . process ( value ) ) ; }
tr	1	public void readWorld ( ) { }
tr	10	public static void main ( String [ ] args ) { StockStrategy stockStrategy = new StockStrategy ( ) ; int [ ] arr = { 6 , 1 , 3 , 2 , 4 , 7 } ; System . out . println ( stockStrategy . maxProfit ( arr ) ) ; }
tr	3	public void setPassword ( String password ) { this . password = password ; }
tr	10	private void closeSocket ( ) { try { if ( socket != null ) { socket . close ( ) ; socket = null ; } } catch ( IOException e ) { logger . log ( Level . SEVERE , "Could not close network socket: " + e . getMessage ( ) ) ; } socket = null ; }
tr	3	public VeterinariaTest ( ) { veterinaria = new Veterinaria ( ) ; }
tr	3	public String getComments ( ) { return this . comments ; }
tr	7	public OutputFormatterStyle ( String foreground , String background , Collection < String > options ) { this ( foreground , background , options . toArray ( new String [ 0 ] ) ) ; }
tr	5	public String getLogName ( ) { return Communicator . class . getName ( ) + this . getInstanceNumber ( ) ; }
tr	8	private int max ( T [ ] array , int leftIndex , int rightIndex ) { int maxIndex = leftIndex ; for ( int i = leftIndex + 1 ; i <= rightIndex ; i ++ ) { if ( array [ i ] . compareTo ( array [ maxIndex ] ) > 0 ) { maxIndex = i ; } } return maxIndex ; }
tr	1	public boolean checkSwamp ( ) { return false ; }
tr	4	public boolean delNode ( String hostname ) { return nodeList . delNode ( hostname ) ; }
tr	7	public void readFully ( short [ ] data , int offset , int len ) throws IOException { for ( int i = 0 ; i < len ; ++ i ) data [ offset + i ] = readByte ( ) ; }
tr	9	public T deleteMin ( ) { if ( isEmpty ( ) ) return null ; T minItem = root . element ; root = merge ( root . left , root . right ) ; return minItem ; }
tr	1	public boolean isVertical ( ) { return isVertical ; }
tr	3	Producer ( ProducerListener listener ) { this . listener = listener ; }
tr	5	@ Override public String toString ( ) { return "InsertQueryResult [querySuccessfullyExecuted=" + querySuccessfullyExecuted + "  rowsInserted=" + rowsInserted + "]" ; }
tr	8	public void removeFileFromSharedFiles ( String hash ) { logger . info ( "Remove file with hash '" + hash + "' from " + this . toString ( ) ) ; shares . remove ( hash ) ; }
tr	7	private boolean r_Step_5b ( ) { ket = cursor ; if ( ! ( eq_s_b ( 1 , "l" ) ) ) { return false ; } bra = cursor ; if ( ! r_R2 ( ) ) { return false ; } if ( ! ( eq_s_b ( 1 , "l" ) ) ) { return false ; } slice_del ( ) ; return true ; }
tr	1	private Files ( ) { }
tr	9	public int indexOf ( PopulationChangeVector n , int m ) throws InternalErrorException { int population_position = order . indexOf ( n ) ; if ( population_position == - 1 ) throw new InternalErrorException ( "Invalid PopulationChangeVector" ) ; return population_position * ( qnm . M + 1 ) + m ; }
tr	8	java . lang . Integer getKey ( String value ) { java . lang . Integer key ; key = Integer . valueOf ( value ) ; return key ; }
tr	8	public void setRowCount ( int count ) { this . tableModel . setRowCount ( count ) ; rowColors . clear ( ) ; for ( int i = 0 ; i < count ; i ++ ) { rowColors . add ( getTableForeground ( ) ) ; } }
tr	5	public JaxrsResources createJaxrsResourcesFromResourceList ( List < JaxrsResource > resources ) { return new JaxrsResources ( resources ) ; }
tr	6	public A ( String str ) { System . out . println ( str ) ; }
tr	6	@ Override public Message getMessage ( int msgnum ) throws MessagingException { return _imapFolder . getMessage ( msgnum ) ; }
tr	3	public BooleanProperty invitedProperty ( ) { return invited ; }
tr	3	public void mouseExited ( MouseEvent e ) { }
tr	2	public int size ( ) { return words . size ( ) ; }
tr	6	@ Test public void testEncodingTestForDataSize ( ) { assertEquals ( "ziplist" , this . hashZipList . getBeforeEncoding2 ( ) ) ; assertEquals ( "hashtable" , this . hashZipList . getAfterEncoding2 ( ) ) ; }
tr	10	@ Override public boolean checaTipo ( AmbienteCompilacao ambiente ) throws IdentificadorJaDeclaradoException , IdentificadorNaoDeclaradoException { return this . getExpressao ( ) . getTipo ( ambiente ) . isInteger ( ) || this . getExpressao ( ) . getTipo ( ambiente ) . isParametro ( ) ; }
tr	5	@ Override public String toString ( ) { return "UntF:<" + unit + ":" + value + ">" ; }
tr	4	@ Override public String toString ( ) { return value ; }
tr	2	public long getId ( ) { return id ; }
tr	8	@ Override public long adaptResultSet ( final ResultSet rs ) throws SQLException { if ( rs . next ( ) ) { final long result = ( long ) rs . getObject ( 1 ) ; return result ; } return null ; }
tr	9	@ Override public final Date unmarshal ( final String v ) throws ParseException { return new SimpleDateFormat ( DATE_FORMAT ) . parse ( v ) ; }
tr	7	public void moveTo ( int newX , int newY ) { setX ( getX ( ) + newX ) ; setY ( getY ( ) + newY ) ; }
tr	7	public void delete ( String filename ) { File file = new File ( filename ) ; if ( file . exists ( ) ) { file . deleteOnExit ( ) ; } }
tr	7	public Material ( float pRestitution , float pStaticFriction , float pDynamicFriction ) { restitution = pRestitution ; staticFriction = pStaticFriction ; dynamicFriction = pDynamicFriction ; }
tr	9	public SongManager ( ) throws SQLException , IOException { sdb = new SongDBManager ( ) ; cm = new CategoryManager ( ) ; am = new ArtistManager ( ) ; }
tr	9	private static final String resolvePath ( final String path ) { if ( path != null ) return path . endsWith ( "" + separatorChar ) ? path . substring ( 0 , path . length ( ) - 1 ) : path ; else return CURRENT_DIR + separatorChar + DEFAULT_FILE_NAME ; }
tr	1	public Meat ( ) { super ( 3.0 , "meat" ) ; }
tr	9	@ Test public void testAdd ( ) { final double [ ] [ ] matrix = new double [ ] [ ] { { 5.0 , 5.0 , 5.0 } , { 7.0 , 7.0 , 7.0 } , { 9.0 , 9.0 , 9.0 } } ; assertTrue ( matrixA . add ( matrixB ) . equals ( new SquareMatrix < double > ( matrix ) ) ) ; }
tr	4	public void setChooseWordTest ( boolean selected ) { this . chooseWordTest . setSelected ( selected ) ; }
tr	5	@ Override public boolean equals ( Object that ) { if ( that == null ) return false ; if ( that instanceof abort_result ) return this . equals ( ( abort_result ) that ) ; return false ; }
tr	10	public static int getContentHeight ( String content ) { JEditorPane dummyEditorPane = new JEditorPane ( ) ; dummyEditorPane . setSize ( 100 , short . MAX_VALUE ) ; dummyEditorPane . setText ( content ) ; return dummyEditorPane . getPreferredSize ( ) . height ; }
tr	3	@ Override public int getSize ( ) { return lokal . getSize ( ) + 1 ; }
tr	4	public CYKDecoder ( Options options ) { this . options = options ; this . labelLossType = options . labelLossType ; }
tr	7	public static boolean isSuccessful ( CommandLine commandLine ) { return commandLine . stderr ( ) . trim ( ) . isEmpty ( ) && commandLine . exitCode ( ) == 0 ; }
tr	5	@ Override public String toString ( ) { return name + ": " + score ; }
tr	10	public RecognizerLexer ( LexerSharedInputState state ) { super ( state ) ; caseSensitiveLiterals = true ; setCaseSensitive ( true ) ; literals = new Hashtable ( ) ; literals . put ( new ANTLRHashString ( "public" , this ) , new Integer ( 38 ) ) ; literals . put ( new ANTLRHashString ( "static" , this ) , new Integer ( 50 ) ) ; literals . put ( new ANTLRHashString ( "short" , this ) , new Integer ( 16 ) ) ; literals . put ( new ANTLRHashString ( "synchronized" , this ) , new Integer ( 27 ) ) ; literals . put ( new ANTLRHashString ( "super" , this ) , new Integer ( 57 ) ) ; literals . put ( new ANTLRHashString ( "boolean" , this ) , new Integer ( 15 ) ) ; literals . put ( new ANTLRHashString ( "abstract" , this ) , new Integer ( 18 ) ) ; literals . put ( new ANTLRHashString ( "for" , this ) , new Integer ( 20 ) ) ; literals . put ( new ANTLRHashString ( "if" , this ) , new Integer ( 29 ) ) ; literals . put ( new ANTLRHashString ( "class" , this ) , new Integer ( 51 ) ) ; literals . put ( new ANTLRHashString ( "throw" , this ) , new Integer ( 35 ) ) ; literals . put ( new ANTLRHashString ( "try" , this ) , new Integer ( 47 ) ) ; literals . put ( new ANTLRHashString ( "float" , this ) , new Integer ( 11 ) ) ; literals . put ( new ANTLRHashString ( "while" , this ) , new Integer ( 58 ) ) ; literals . put ( new ANTLRHashString ( "final" , this ) , new Integer ( 48 ) ) ; literals . put ( new ANTLRHashString ( "throws" , this ) , new Integer ( 39 ) ) ; literals . put ( new ANTLRHashString ( "char" , this ) , new Integer ( 14 ) ) ; literals . put ( new ANTLRHashString ( "native" , this ) , new Integer ( 56 ) ) ; literals . put ( new ANTLRHashString ( "strictfp" , this ) , new Integer ( 53 ) ) ; literals . put ( new ANTLRHashString ( "break" , this ) , new Integer ( 32 ) ) ; literals . put ( new ANTLRHashString ( "const" , this ) , new Integer ( 55 ) ) ; literals . put ( new ANTLRHashString ( "this" , this ) , new Integer ( 31 ) ) ; literals . put ( new ANTLRHashString ( "switch" , this ) , new Integer ( 22 ) ) ; literals . put ( new ANTLRHashString ( "catch" , this ) , new Integer ( 45 ) ) ; literals . put ( new ANTLRHashString ( "transient" , this ) , new Integer ( 44 ) ) ; literals . put ( new ANTLRHashString ( "private" , this ) , new Integer ( 30 ) ) ; literals . put ( new ANTLRHashString ( "enum" , this ) , new Integer ( 41 ) ) ; literals . put ( new ANTLRHashString ( "double" , this ) , new Integer ( 12 ) ) ; literals . put ( new ANTLRHashString ( "else" , this ) , new Integer ( 36 ) ) ; literals . put ( new ANTLRHashString ( "extends" , this ) , new Integer ( 46 ) ) ; literals . put ( new ANTLRHashString ( "protected" , this ) , new Integer ( 34 ) ) ; literals . put ( new ANTLRHashString ( "continue" , this ) , new Integer ( 19 ) ) ; literals . put ( new ANTLRHashString ( "case" , this ) , new Integer ( 40 ) ) ; literals . put ( new ANTLRHashString ( "byte" , this ) , new Integer ( 13 ) ) ; literals . put ( new ANTLRHashString ( "void" , this ) , new Integer ( 59 ) ) ; literals . put ( new ANTLRHashString ( "implements" , this ) , new Integer ( 33 ) ) ; literals . put ( new ANTLRHashString ( "import" , this ) , new Integer ( 37 ) ) ; literals . put ( new ANTLRHashString ( "interface" , this ) , new Integer ( 49 ) ) ; literals . put ( new ANTLRHashString ( "do" , this ) , new Integer ( 28 ) ) ; literals . put ( new ANTLRHashString ( "long" , this ) , new Integer ( 17 ) ) ; literals . put ( new ANTLRHashString ( "assert" , this ) , new Integer ( 23 ) ) ; literals . put ( new ANTLRHashString ( "int" , this ) , new Integer ( 10 ) ) ; literals . put ( new ANTLRHashString ( "package" , this ) , new Integer ( 26 ) ) ; literals . put ( new ANTLRHashString ( "volatile" , this ) , new Integer ( 54 ) ) ; literals . put ( new ANTLRHashString ( "goto" , this ) , new Integer ( 25 ) ) ; literals . put ( new ANTLRHashString ( "return" , this ) , new Integer ( 43 ) ) ; literals . put ( new ANTLRHashString ( "finally" , this ) , new Integer ( 52 ) ) ; literals . put ( new ANTLRHashString ( "default" , this ) , new Integer ( 24 ) ) ; literals . put ( new ANTLRHashString ( "new" , this ) , new Integer ( 21 ) ) ; literals . put ( new ANTLRHashString ( "instanceof" , this ) , new Integer ( 42 ) ) ; literals . put ( new ANTLRHashString ( "String" , this ) , new Integer ( 10 ) ) ; }
tr	3	public Integer getBuycount ( ) { return buycount ; }
tr	7	public void paintFullMap ( Graphics g , int i , int j , int width , int height ) { paintFullMap ( g , i , j , width , height , 0 , 0 ) ; }
tr	2	public boolean hasMind ( ) { return ( _mind != null ) ; }
tr	3	public TitleImp ( ) { this . line = new LineImp ( this ) ; }
tr	5	@ Override public int hashCode ( ) { int result = action != null ? action . hashCode ( ) : 0 ; result = 31 * result + ( state != null ? state . hashCode ( ) : 0 ) ; return result ; }
tr	1	public LibrarianNGTest ( ) { }
tr	5	public void doWork ( ) { System . out . println ( "and now  working hard" ) ; doMessage ( ) ; }
tr	6	public static void main ( String [ ] args ) { keyword_synchronized app = new keyword_synchronized ( ) ; app . doWork ( ) ; }
tr	3	public String getDescription ( ) { return description ; }
tr	1	public TimedOutException ( ) { super ( ) ; }
tr	8	@ Override public Map < String , String > validateForUpdate ( Map < String , Object > properties ) throws Exception { return this . validateForCreate ( properties ) ; }
tr	8	@ XmlElementDecl ( namespace = "" , name = "unit-of-measure" ) public JAXBElement < String > createUnitOfMeasure ( String value ) { return new JAXBElement < String > ( _UnitOfMeasure_QNAME , String . class , null , value ) ; }
tr	4	public void setUsers ( List < Users > users ) { this . users = users ; }
tr	8	public GraphEntry ( String display , int number , String path ) throws Exception { this . display = display ; this . number = number ; this . path = path ; this . icon = loadIcon ( display ) ; }
tr	10	@ Override public void flush ( ) { String message = toString ( ) ; if ( message . length ( ) == 0 ) { return ; } if ( isAppend ) { handleAppend ( message ) ; } else { handleInsert ( message ) ; } reset ( ) ; }
tr	2	public boolean isLeap ( ) { return ( ( year % 4 == 0 ) && ( year % 100 != 0 ) || ( year % 400 == 0 ) ) ; }
tr	7	public static void main ( String [ ] args ) { GeoLogMain view = new GeoLogMain ( ) ; new MainController ( view ) ; view . setVisible ( true ) ; }
tr	3	public void setFuncoes ( Funcoes funcoes ) { this . funcoes = funcoes ; }
tr	7	@ Test public void sizeOfEmptyTreeIsZero ( ) { BinarySearchTree < Integer > tree = new BinarySearchTree < Integer > ( ) ; assertEquals ( 0 , tree . size ( ) ) ; }
tr	10	@ Test public void findsSingleTerminator ( ) { byte [ ] buffer = { BYTE_T , BYTE_ESZETT , BYTE_G , BYTE_T , 0 , BYTE_G , BYTE_A } ; assertEquals ( 4 , BufferTools . indexOfTerminator ( buffer , 0 , 1 ) ) ; }
tr	1	public int getMaxRange ( ) { return 10 ; }
tr	1	public void next ( ) { next ( true ) ; }
tr	2	public boolean hasNext ( ) { return offset != null ; }
tr	10	private void jTextField1FocusGained ( java . awt . event . FocusEvent evt ) { if ( jTextField1 . getText ( ) . equals ( "Enter Login" ) ) jTextField1 . setText ( "" ) ; }
tr	2	public void setVolume ( double volume ) { this . volume = volume ; }
tr	6	public static final void closeWindow ( ) { if ( clickListener != null ) { clickListener . removeHandler ( ) ; } if ( keyPressListener != null ) { keyPressListener . removeHandler ( ) ; } if ( blurListener != null ) { blurListener . removeHandler ( ) ; } Alerts . closeWindow ( ) ; }
tr	7	public static Object getUtility ( String name ) throws TransformException { return getUtilities ( ) . get ( name ) ; }
tr	2	public void setCertmapMgId ( int certmapMgId ) { this . certmapMgId = certmapMgId ; }
tr	9	protected void addToStoredClassDescriptors ( ActionScriptClassDescriptor desc ) { if ( debug ) debug ( "addToStoredClassDescriptors(desc=" , desc , ") at index=" , String . valueOf ( storedClassDescriptors . size ( ) ) ) ; storedClassDescriptors . add ( desc ) ; }
tr	5	private boolean isPreconditionsFilled ( Path absFilePath ) { if ( ! canWriteSelectedFile ( absFilePath ) ) { return false ; } if ( ! canWriteWithDefaultOriginalClassConstructor ( ) ) { return false ; } return true ; }
tr	9	public NotebookJTableModel ( NotebookDao dbSource , String query ) { if ( dbSource == null ) { throw new IllegalArgumentException ( "Notebook table model ben\u00F6tigt eine Datenbankquelle != null" ) ; } this . dbSource = dbSource ; if ( query == null || query . trim ( ) . isEmpty ( ) ) { throw new IllegalArgumentException ( "Notebook table model query String darf nicht null oder leer sein!" ) ; } this . query = query ; this . getDBContents ( ) ; }
tr	8	@ Override public void setCell ( int x , int y , boolean live ) { if ( y < 0 || y >= getHeight ( ) ) return ; if ( x < 0 || x >= getWidth ( ) ) return ; if ( live ) world [ y ] [ x ] = 0 ; }
tr	8	public void replaceVariables ( VariableAppearance appearance ) { ParsingContext parsingContext = appearance . getParsingContext ( ) ; parsingContext . setContent ( replaceVariables ( appearance , parsingContext . getContent ( ) ) ) ; }
tr	1	public int get_key_num ( ) { return 1 ; }
tr	2	public boolean hasCommand ( ) { return hascmd ; }
tr	9	String txtToken ( int token ) { switch ( token ) { case TK_NAME : case TK_STRING : case TK_NUMBER : return new String ( buff , 0 , nbuff ) ; default : return token2str ( token ) ; } }
tr	5	private static void sortNgramAndRemoveOutliers ( ) { NGramDriver . sortngramlist ( NGramDriver . getNgramlist ( ) ) ; NGramDriver . removeOutliers ( ) ; }
tr	9	public void updateLocation ( int person_id , int area_id ) { String sql = "UPDATE " + DatabaseUtil . Table_person_state + " SET location=" + area_id + " WHERE person_id=" + person_id ; database . executeSQL ( sql ) ; }
tr	3	public TrickPhaseState getTrickPhaseState ( ) { return this . trickPhaseState ; }
tr	10	@ Override protected void drawContent ( Graphics2D g , double x , double y , double w , double h ) { if ( tile != null ) { tile . draw ( g , x , y , w , h ) ; } }
tr	10	private void acercaDeActionPerformed ( java . awt . event . ActionEvent evt ) { AcercaDe acercade = new AcercaDe ( ) ; acercade . setVisible ( true ) ; acercade . setBounds ( 20 , 20 , 250 , 500 ) ; }
tr	8	private static boolean checkRow ( int [ ] [ ] grid , int whichRow ) { final int size = grid . length ; boolean [ ] found = new boolean [ size ] ; for ( int col = 0 ; col < size ; ++ col ) { int index = grid [ whichRow ] [ col ] - 1 ; if ( ! found [ index ] ) { found [ index ] = true ; } else { return false ; } } return true ; }
tr	7	@ Override public void sortObjects ( Comparator < MapObject > comparator ) { super . sortObjects ( comparator ) ; this . dispatchEvent ( new MapObjectsChangeEvent ( this ) ) ; }
tr	3	public int getRowCount ( ) { return data . length ; }
tr	7	@ Override public int compare ( Match arg0 , Match arg1 ) { return arg0 . getSchedule ( ) . compareTo ( arg1 . getSchedule ( ) ) ; }
tr	1	private void paintCar ( ) { }
tr	8	public static MonthInYear [ ] allMonths ( ) { MonthInYear [ ] monthPeriods = new MonthInYear [ MonthEnum . values ( ) . length ] ; int index = 0 ; for ( MonthEnum month : MonthEnum . values ( ) ) { monthPeriods [ index ++ ] = new MonthInYear ( month ) ; } return monthPeriods ; }
tr	8	@ Test public void testCanGetAndSetMmapWindowMappedLimit ( ) { long defaultLimit = Options . getMmapWindowMappedLimit ( ) ; long newLimit = defaultLimit * 2 ; Options . setMmapWindowMappedLimit ( newLimit ) ; assert . assertEquals ( newLimit , Options . getMmapWindowMappedLimit ( ) ) ; }
tr	5	public void renewBoard ( CampaignView view ) { this . removeAll ( ) ; setBoard ( view ) ; }
tr	5	private List < SourceType > getParameterSources ( ) { return getParameters ( ) . getSourceTypeList ( ) ; }
tr	8	public void print ( Node node ) { if ( node != null ) { System . out . print ( node . value + " " ) ; print ( node . next ) ; } else { System . out . println ( ) ; } }
tr	1	public boolean setParam ( ) { return false ; }
tr	4	public BlockPosition ( int x , int y , int z ) { this . x = x ; this . y = y ; this . z = z ; }
tr	10	public void setDimensionProperties ( double min , double max , double inc ) { this . inptMin . setInput ( String . valueOf ( min ) ) ; this . inptMax . setInput ( String . valueOf ( max ) ) ; this . inptInc . setInput ( String . valueOf ( inc ) ) ; }
tr	2	public int getValue ( ) { return this . value ; }
tr	7	public InputFileReaderException ( String message , Throwable cause , String value , int row ) { super ( message , cause ) ; this . value = value ; this . row = row ; }
tr	3	public spDAO getMyDao ( ) { return myDao ; }
tr	10	private boolean r_Step_3 ( ) { int among_var ; ket = cursor ; among_var = find_among_b ( a_4 , 7 ) ; if ( among_var == 0 ) { return false ; } bra = cursor ; if ( ! r_R1 ( ) ) { return false ; } switch ( among_var ) { case 0 : return false ; case 1 : slice_from ( "al" ) ; break ; case 2 : slice_from ( "ic" ) ; break ; case 3 : slice_del ( ) ; break ; } return true ; }
tr	4	public StatesBar ( boolean direction ) { if ( direction ) { this . getImage ( ) . mirrorHorizontally ( ) ; } }
tr	9	public SortedMap < String , String > getVisitCountByDailyTotal ( ) { SortedMap < String , String > result = new TreeMap < String , String > ( ) ; result . putAll ( this . jedis . hgetAll ( KEY_EVENT_DAILY_CLICK_TOTAL ) ) ; return result ; }
tr	2	public int getOutputMode ( ) { return mOutputMode ; }
tr	5	public JSONArray put ( int index , double value ) throws JSONException { this . put ( index , new double ( value ) ) ; return this ; }
tr	2	public int cost ( ) { return beverage . cost ( ) ; }
tr	7	@ Test public void shouldChoosePresentTwoObtain200InPoints ( ) { player . chooseGift ( 2 ) ; assertThat ( player . getPoints ( ) , is ( 200 ) ) ; }
tr	10	public StandardEvaluationVisitor ( ) { variablesLoader = new VariablesLoader ( ) { @ Override public Object load ( String name ) { return variables . get ( name ) ; } } ; }
tr	7	@ Override public void processItem ( IItem item ) { getLogger ( ) . debug ( item . toString ( ) ) ; }
tr	7	private void cancelButtonActionPerformed ( java . awt . event . ActionEvent evt ) { this . dispose ( ) ; }
tr	8	Node ( int deg ) { if ( deg < 1 ) { throw new IllegalArgumentException ( "Degree must be greater than or equal to 1." ) ; } this . deg = deg ; this . keys = new ArrayList < E > ( deg * 2 - 1 ) ; this . children = new ArrayList < AbsNode < E >> ( deg * 2 ) ; }
tr	6	@ Test ( expected = IllegalArgumentException . class ) public void shouldFailToParseRangeInDashNotation ( ) { Ipv6 . parse ( "1:2:3:4-1:2:3:5" ) ; }
tr	9	public ComentariId ( String nom , String dni , Date d ) { this . data = d ; this . dniClient = dni ; this . nomHotel = nom ; }
tr	9	public void testIsBoundIsBoundInParser ( ) throws Exception { Symbol symbol = parser . getSymbol ( "isbound" ) ; assertTrue ( globalScope . getBinding ( symbol ) != null ) ; }
tr	5	public Parameter ( final String name , final MatchMode value ) { this . name = name ; this . value = "" + value ; }
tr	8	@ XmlElementDecl ( namespace = "" , name = "xRequest" ) public JAXBElement < BigInteger > createXRequest ( BigInteger value ) { return new JAXBElement < BigInteger > ( _XRequest_QNAME , BigInteger . class , null , value ) ; }
tr	6	public SpecialOffers ( Offers specialOffer , Date startDate , Date endDate ) { super ( ) ; this . specialOffer = specialOffer ; this . startDate = startDate ; this . endDate = endDate ; }
tr	3	public void setCode ( CodeFragment code ) { if ( code == null ) code = new CodeFragment ( ) ; this . code = code ; }
tr	9	public int count ( final DataFrame frame ) { final List < DataField > retval = new ArrayList < DataField > ( ) ; if ( frame != null ) { recurseFields ( frame , null , retval ) ; } return retval . size ( ) ; }
tr	5	public static LatLonFormat fromValue ( String v ) { return valueOf ( v ) ; }
tr	4	@ Override public MyDatabase getMysql ( ) { return mysql ; }
tr	10	public int getInt ( String key ) throws JSONException { Object o = get ( key ) ; if ( o == null || o == null ) return 0 ; return o instanceof Number ? ( ( Number ) o ) . intValue ( ) : ( int ) getDouble ( key ) ; }
tr	3	public void setRunning ( boolean state ) { running = state ; }
tr	6	public GlassFishEnvironment ( String glassFishHome , boolean uselocalAuth , String host , int port ) { this . glassFishHome = glassFishHome ; this . uselocalAuth = uselocalAuth ; this . host = host ; this . port = port ; }
tr	1	public Passenger ( ) { }
tr	9	@ Test public void testGetHost_1 ( ) throws Exception { Peer fixture = new Peer ( 1 , "" ) ; String result = fixture . getHost ( ) ; assertEquals ( "" , result ) ; }
tr	7	public void writeTableColumn ( long [ ] values ) { for ( int i = 0 ; i < values . length ; i ++ ) { System . out . println ( values [ i ] ) ; } }
tr	3	public UserSessionVO getUserSessionVO ( ) { return userSessionVO ; }
tr	6	@ Override public Vector3 getDirection ( ShadeRec sr ) { return direction ; }
tr	10	void doRemoveList ( ) { for ( int i = 0 ; i < obj_to_remove . size ; i ++ ) { ( ( JGObject ) obj_to_remove . values [ i ] ) . removeDone ( ) ; } objects . remove ( obj_to_remove ) ; obj_to_remove . clear ( ) ; }
tr	9	public static < A , T > List < T > yield ( List < A > col , F1 < A , T > f1 ) { if ( col != null ) { return yield ( col , new ArrayList < T > ( col . size ( ) ) , f1 ) ; } else { return null ; } }
tr	5	@ Override public void insertUpdate ( DocumentEvent arg0 ) { updateProperties ( ) ; }
tr	10	public void lock ( ) throws InterruptedException { while ( ! tryLock ( ) ) { Thread . sleep ( Settings . RETRY_TIME_NANO + new Random ( ) . nextInt ( Settings . VARIANCE ) ) ; } }
tr	4	@ Override final public boolean isRecurrent ( ) { return this . structure . recurrent ; }
tr	10	public static void main ( String [ ] args ) { int [ ] array = new int [ ] { 1 , 3 , 5 , 7 , 9 , 11 } ; SegmentTree tree = new SegmentTree ( array ) ; System . out . println ( tree . sumRange ( 1 , 4 ) ) ; System . out . println ( tree . sumRange ( 1 , 1 ) ) ; System . out . println ( tree . sumRange ( 0 , 5 ) ) ; System . out . println ( tree . sumRange ( 0 , 0 ) ) ; }
tr	9	public void registerNamedComponent ( Component component ) { if ( component . getName ( ) == null || "" . equals ( component . getName ( ) ) ) { throw new IllegalArgumentException ( "Component name must be set if it's going to be registered." ) ; } if ( namedComponents . containsKey ( component . getName ( ) ) ) { } namedComponents . put ( component . getName ( ) , component ) ; }
tr	5	@ Override public void resetState ( ) { nuclearLaunchCode = null ; keyring = new CrazyKeyring ( ) ; }
tr	10	public Sender produce ( String type ) { if ( "mail" . equals ( type ) ) { return new MailSender ( ) ; } else if ( "sms" . equals ( type ) ) { return new SMSSender ( ) ; } else { System . out . println ( "\u8BF7\u8F93\u5165\u5408\u9002\u7684\u7C7B\u578B!!!" ) ; return null ; } }
tr	7	@ Override public String toString ( ) { return new ToStringBuilder ( this ) . append ( "old" , old ) . append ( "now" , now ) . toString ( ) ; }
tr	5	public DirOutputter ( MigrationContext context ) { this . rootDir = context . getOutputDir ( ) ; this . context = context ; }
tr	6	private DebugLevel ( int level , String s ) { mInt = level ; mString = s ; }
tr	10	@ Override public void actionPerformed ( ActionEvent e ) { _view . intf_history . setVisible ( true ) ; _view . intf_fullticket . setVisible ( true ) ; _view . btn_max . setEnabled ( false ) ; }
tr	6	public JSONObject optJSONObject ( int index ) { Object o = this . opt ( index ) ; return o instanceof JSONObject ? ( JSONObject ) o : null ; }
tr	9	@ Override public Collection < Log > update ( Collection < LogBuilder > logs ) throws OlogException { return wrappedSubmit ( new UpdateLogs ( logs ) ) ; }
tr	4	public Map < String , Object > parameters ( ) { return this . parameters ; }
tr	7	public Vector4f scale ( final float scalar ) { x *= scalar ; y *= scalar ; z *= scalar ; w *= scalar ; return this ; }
tr	10	public static boolean areEqual ( DummyKVStorable [ ] first , DummyKVStorable [ ] second ) { if ( first . length != second . length ) return false ; for ( int i = 0 ; i < first . length ; i ++ ) { if ( ! first [ i ] . equals ( second [ i ] ) ) { System . out . println ( "First entry: " + first [ i ] ) ; System . out . println ( "Second entry: " + second [ i ] ) ; return false ; } } return true ; }
tr	1	public final boolean readBoolean ( ) { return readBoolean ( null ) ; }
tr	1	public MenuException ( ) { }
tr	3	public ProyectoBusiness ( ) { this . proyectoDAO = new ProyectoDAO ( ) ; }
tr	9	public static void trace ( class < ? > class1 , String msg ) { System . out . println ( buildString ( class1 . getSimpleName ( ) , " | " , msg ) ) ; }
tr	2	protected double getTotalVolume ( ) { return totalVolume ; }
tr	3	public void setTotalLutas ( int numLutas ) { this . totalLutas = numLutas ; }
tr	1	public long op ( ) { return 1 ; }
tr	1	protected void interrupted ( ) { }
tr	6	public ArrayList < Accion > obtenerTodosLasAcciones ( ) { DAOAccion accionDAO = new DAOAccion ( ) ; return accionDAO . consultarAcciones ( ) ; }
tr	9	@ Override public RobotResponse handle ( RobotException ex , OutputStream os ) { return ex . accept ( visitor , os ) ; }
tr	7	protected void markCreatedNode ( Node newNode ) { if ( ! ( newNode instanceof ObjectNode ) ) return ; if ( ! containsAncestor ( createdNodes , newNode ) ) { Node . createdNodes . add ( newNode ) ; } }
tr	4	private static int roundToGrid ( int x ) { x += Config . GRID_CELL_SIZE / 2 ; return x - ( x % Config . GRID_CELL_SIZE + Config . GRID_CELL_SIZE ) % Config . GRID_CELL_SIZE ; }
tr	2	public void setTrainNumber ( int trainNumber ) { this . trainNumber = trainNumber ; }
tr	2	public boolean isReferenced ( ) { return referenced ; }
tr	5	public void setEntityDictionary ( THashMap < String , Entity > entityDictionary ) { this . entityDictionary = entityDictionary ; }
tr	1	public ObjectFactory ( ) { }
tr	6	public LazyRMQTreap ( int val ) { this . val = val ; p = Math . random ( ) ; update ( ) ; }
tr	5	private void copyCurrentListedFilesToPrevious ( ) { previousListedFiles . clear ( ) ; previousListedFiles . putAll ( currentListedFiles ) ; }
tr	7	public Object unserialize ( String s ) throws IOException { return ( s == null || s . length ( ) == 0 ) ? null : new Integer ( s ) ; }
tr	1	public boolean isCursed ( ) { return isCursed ; }
tr	2	public void setT1_array_num ( int t1_array_num ) { this . t1_array_num = t1_array_num ; }
tr	1	public EliminarFarmacia ( ) { super ( ) ; }
tr	2	public int toInt ( ) { return mInt ; }
tr	8	public void writeData ( GameServer server , InetAddress ip , int port ) { server . sendData ( getData ( ) , ip , port ) ; }
tr	5	@ Override public int compareTo ( RequestEvent requestEvent ) { if ( this . time < requestEvent . time ) return - 1 ; else if ( this . time > requestEvent . time ) return 1 ; else return 0 ; }
tr	8	private JLabel getL_duration ( ) { if ( L_duration == null ) { L_duration = new JLabel ( ) ; L_duration . setText ( "Dauer in Stunden:" ) ; L_duration . setPreferredSize ( new java . awt . Dimension ( 121 , 19 ) ) ; } return L_duration ; }
tr	2	public void setScaleX ( double scaleX ) { this . scaleX = scaleX ; }
tr	1	public int statDrop ( ) { return 0 ; }
tr	6	public BoardItem ( Integer number , boolean positive ) { this . number = number ; this . positive = positive ; this . active = false ; this . visible = true ; }
tr	10	public static String toString ( JSONArray ja ) throws JSONException { JSONObject jo = ja . optJSONObject ( 0 ) ; if ( jo != null ) { JSONArray names = jo . names ( ) ; if ( names != null ) { return rowToString ( names ) + toString ( names , ja ) ; } } return null ; }
tr	5	public static SubFileTypeType fromValue ( String v ) { return valueOf ( v ) ; }
tr	5	public GetAccountPolicyRequest withAccountName ( String accountName ) { setAccountName ( accountName ) ; return this ; }
tr	3	public void setEndereco ( Endereco endereco ) { this . endereco = endereco ; }
tr	1	PlayingTab ( ) { }
tr	1	private Engineering ( ) { }
tr	10	public void updateSituatie ( Elev e , Materie mat , SituatieMaterieBaza sit ) { situatie_clasa . get ( e ) . put ( mat , sit ) ; }
tr	1	public AboutAction ( ) { super ( "AboutDialog" ) ; }
tr	1	protected void end ( ) { }
tr	7	@ Override public int hashCode ( ) { int result = penny ; result = 31 * result + nickel ; result = 31 * result + dime ; result = 31 * result + quarter ; return result ; }
tr	8	public void addToRender ( int entity_id , RenderNode node ) { if ( nodes . containsKey ( entity_id ) || temps . containsKey ( entity_id ) ) { return ; } temps . put ( entity_id , node ) ; }
tr	6	public Group [ ] createGroupData ( ) { Group group1 , group2 , group3 ; group1 = new Group ( 1 , "Staff" , true ) ; group2 = new Group ( 2 , "Students" , true ) ; group3 = new Group ( 3 , "Extern" , false ) ; Group [ ] groups = new Group [ ] { group1 , group2 , group3 } ; return groups ; }
tr	9	@ Override public boolean getFeature ( String name ) throws SAXNotRecognizedException , SAXNotSupportedException { if ( name . equals ( NAMESPACES_FEATURE ) || name . equals ( NAMESPACE_PREFIXES_FEATURE ) ) { return true ; } else { throw new SAXNotRecognizedException ( "Feature Not Supported: " + name ) ; } }
tr	8	public Collection < Materie > getMaterii ( HashMap < Materie , SituatieMaterieBaza > situatie ) { Collection < Materie > mat = situatie . keySet ( ) ; return mat ; }
tr	9	private PreparedStatement addToBatch ( PreparedStatement statement ) throws SQLException { statement . addBatch ( ) ; if ( params != null ) { for ( ISetter s : params ) { s . set ( statement ) ; } } return statement ; }
tr	7	StringInputBuffer ( String name , String code ) { super ( toURI ( name ) , Kind . SOURCE ) ; this . code = code ; }
tr	8	@ CRRCSimEditorNode ( name = "DataIdle" ) @ XmlElement ( name = "data" ) @ XmlElementWrapper ( name = "data_idle" ) public ArrayList < EngineDataIdle > getDataIdle ( ) { return dataIdle ; }
tr	2	public int getX ( ) { return x ; }
tr	2	public byte [ ] getATTACHMENT_DATA ( ) { return ATTACHMENT_DATA ; }
tr	6	@ Override public void nextFrame ( ) { if ( images . size ( ) <= 1 || ! playing ) { return ; } frame ++ ; frame %= images . size ( ) ; }
tr	9	public static String translate ( String fieldname ) { if ( fieldname == null ) fieldname = "" ; String key = String . format ( "Field.%s" , fieldname . toLowerCase ( ) ) ; String name = properties . getProperty ( key , fieldname ) ; return name ; }
tr	2	public int getNumberOfChildren ( ) { return numberOfChildren ; }
tr	1	public SuperTank ( ) { }
tr	2	public UDPLockServer ( ) { initializeRequestHandlers ( ) ; }
tr	6	private String initBuildManager ( ) { BuildManager bm = new BuildManager ( "src/com/dysnomia/build.props" ) ; return String . valueOf ( bm . getBuild ( ) ) ; }
tr	9	public RestrictedPropSource ( PropSource propSource , Set < String > propKeys ) { this . delegate = propSource ; this . propKeys = Collections . unmodifiableSet ( propKeys ) ; }
tr	9	public ExpTable ( Connection connection , String schema , FileAsciiWriter fileWriterAsc , FileAsciiWriter fileWriterXml ) throws IOException { this . connection = connection ; this . schema = schema ; this . fileWriterAsc = fileWriterAsc ; this . fileWriterXml = fileWriterXml ; }
tr	4	@ XmlElement ( name = "n" ) public n getYawMomment ( ) { return n ; }
tr	2	public int index ( ) { return _index ; }
tr	7	public BigInteger degree ( ) { if ( degrees . isEmpty ( ) ) return BigInteger . ONE . negate ( ) ; return degrees . first ( ) ; }
tr	1	public ProgressHelperTest ( ) { }
tr	8	public static final String getHeapMemoryUsage ( ) { ClassLoadingMXBean mxbean ; return ManagementFactory . getMemoryMXBean ( ) . getHeapMemoryUsage ( ) . getUsed ( ) + "/" + ManagementFactory . getMemoryMXBean ( ) . getHeapMemoryUsage ( ) . getMax ( ) ; }
tr	2	public Caractere ( char caractere ) { this . caractere = caractere ; }
tr	6	private void debug ( String s ) { System . out . println ( s ) ; }
tr	1	public int process_id ( ) { return 2 ; }
tr	10	@ Override public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( ) != obj . getClass ( ) ) { return false ; } final SondageReponse other = ( SondageReponse ) obj ; if ( this . id != other . id ) { return false ; } if ( this . id_sondage != other . id_sondage ) { return false ; } if ( this . choix != other . choix ) { return false ; } return true ; }
tr	8	@ Override public boolean equals ( Object obj ) { if ( this == obj ) return true ; if ( obj == null ) return false ; if ( getClass ( ) != obj . getClass ( ) ) return false ; IdentNode other = ( IdentNode ) obj ; if ( identName == null ) { if ( other . identName != null ) return false ; } else if ( ! identName . equals ( other . identName ) ) return false ; return true ; }
tr	4	public void setLastpublicnoteby ( String value ) { this . lastpublicnoteby = value ; }
tr	6	private static JShape getShape ( SDOShape shape ) { return shape . getShapeType ( ) . getJShape ( shape ) ; }
tr	6	public void registerCallback ( InvocationCallback callback , class contextInterface ) { if ( cbc == null ) { cbc = new CallbackController ( ) ; } cbc . registerCallback ( callback , contextInterface ) ; }
tr	7	private void notifyChangeSelection ( int rowIndex , int columnIndex ) { for ( ChangeSelectionListener changeSelectionListener : changeSelectionListeners ) { changeSelectionListener . notify ( rowIndex , columnIndex ) ; } }
tr	8	private void processMemoryXml ( String tag ) { if ( tag . startsWith ( XMLTags . MemorySingle ) ) { memoryResponse = currentElementText ; } }
tr	1	public ItemModel ( ) { }
tr	9	public Doctor ( String username , String fName2 , String lName2 , int roomNo2 ) { super ( username , "password" , "Doctor" ) ; this . fName = fName2 ; this . lName = lName2 ; this . roomNo = roomNo2 ; }
tr	3	public String getRaavareNavn ( ) { return raavareNavn ; }
tr	1	private void readDataFromFile ( ) { }
tr	9	public static void printWarnings ( Connection conn , PrintWriter pw ) { if ( conn != null ) { try { printStackTrace ( conn . getWarnings ( ) , pw ) ; } catch ( SQLException e ) { printStackTrace ( e , pw ) ; } } }
tr	9	public static void main ( String [ ] args ) { ZigzagConversion o = new ZigzagConversion ( ) ; System . out . println ( o . convert ( "AB" , 1 ) ) ; }
tr	1	public boolean isEnabled ( ) { return this . isEnabled ; }
tr	8	@ Override public void onMouseDown ( BufferedImage image , int x , int y ) { lastMouseDownX = x ; lastMouseDownY = y ; }
tr	10	private float followCircuit ( ) { float x = circuitPoint . x ; float y = circuitPoint . y ; x += flyingDot . p . z * circuit . fallLine . x ; y += flyingDot . p . z * circuit . fallLine . y ; return headTowards ( x , y ) ; }
tr	6	@ Override public byte getByte ( long index , int offset ) { assert offset <= structLength - 1 : offset ; return ohm . getByte ( index * structLength + offset ) ; }
tr	10	public JSONWriter object ( ) throws JSONException { if ( this . mode == i ) { this . mode = o ; } if ( this . mode == o || this . mode == a ) { this . append ( "{" ) ; this . push ( new JSONObject ( ) ) ; this . , = false ; return this ; } throw new JSONException ( "Misplaced object." ) ; }
tr	5	@ AfterClass public static void cleanupTempRoot ( ) { cleanupDirectory ( tempRoot ) ; tempRoot . delete ( ) ; }
tr	9	@ Override public boolean equals ( Object o ) { if ( this == o ) return true ; if ( o == null || getClass ( ) != o . getClass ( ) ) return false ; Station station = ( Station ) o ; if ( id != station . id ) return false ; if ( name != null ? ! name . equals ( station . name ) : station . name != null ) return false ; return true ; }
tr	6	private void close ( boolean restart ) { bot . close ( ) ; if ( ! restart ) { dispose ( ) ; bots . remove ( bot ) ; return ; } }
tr	1	public int EOF_sym ( ) { return 0 ; }
tr	1	public TokenException ( ) { }
tr	10	public final Pair < Integer , V > getWithIndex ( final K key ) { final int index = this . getIndex ( key ) ; if ( index < 0 ) return null ; final V value = this . get ( key ) ; return new Pair < Integer , V > ( index , value ) ; }
tr	10	public QuestList ( QuestPanel qp ) { util = qp . util ; qm = util . qm ; this . qp = qp ; model = new DefaultListModel < Quest > ( ) ; setModel ( model ) ; addListSelectionListener ( this ) ; }
tr	5	public BorningException ( String message , Exception e ) { super ( message , e ) ; }
tr	8	@ Override public String toString ( ) { return "OutgoingCarrierRoutingMeta [previous=" + previous + "  totalCount=" + totalCount + "  offset=" + offset + "  limit=" + limit + "  next=" + next + "]" ; }
tr	2	public OptionSet getMatchingSet ( ) { return getMatchingSet ( false , true ) ; }
tr	7	public String procesarMsjCuenta ( String msj ) { parser s = compilar ( msj ) ; return s . msjCuenta ; }
tr	4	public ArrayList < Integer > getADiceResults ( ) { return aDiceResults ; }
tr	6	@ Test public void test_0505_CONFIRM_FORM_SUBMIT ( ) throws Exception { doTest ( getClass ( ) . getResource ( "/w3.org/WAI/UA/TS/html401/cp0505/0505-CONFIRM-FORM-SUBMIT.html" ) ) ; }
tr	6	void set_up ( ) { fAttacks . add ( new Smash ( ) ) ; fAttacks . add ( new Dagger ( ) ) ; fGold = 20 ; }
tr	2	public int asInt ( ) { return level ; }
tr	4	public Holder ( ) { System . out . println ( "Holder created" ) ; }
tr	10	@ Test public void testMyFile ( ) throws IOException { Path inPath = Paths . get ( TEST_DIR + "alt.txt" ) ; Path outPath = Paths . get ( TEST_DIR + "alt_out.txt" ) ; processContents ( inPath , outPath ) ; }
tr	9	public boolean StoreString ( String strContents , String strFolder , String oneStr , String twoStr ) { return otapiJNI . Storage_StoreString__SWIG_1 ( swigCPtr , this , strContents , strFolder , oneStr , twoStr ) ; }
tr	4	public Location ( double x , double y , int rotation ) { this . x = x ; this . y = y ; this . rotation = rotation ; }
tr	10	public PalavraChaveView ( PalavraChaveTabela t , PalavraChave palavrachave ) throws Exception { super ( "PalavraChave" ) ; inicio ( palavrachave ) ; salvar . addActionListener ( new PalavraChaveControl ( this , t , palavrachave ) ) ; }
tr	5	public TextTableWriter ( TextTableExportOptions options , Writer out ) { super ( options , out ) ; }
tr	2	public int getMoney ( ) { return money ; }
tr	10	@ Override public String toString ( ) { return Scope . class . getName ( ) + "@" + hashCode ( ) + " [type=" + type + "  count=" + count + "  length=" + length + "  toggle=" + toggle + "]" ; }
tr	7	float [ ] getWordImportanceWeights ( List < String > stems ) { List < SFtriple > best_tags = getTagsHelper ( stems ) ; return getWordImportanceWeights ( stems , best_tags ) ; }
tr	1	public void construct ( ) { return ; }
tr	10	@ ManyToOne ( fetch = FetchType . LAZY ) @ JoinColumn ( name = "mg_id" , nullable = false ) public MappingGroup getMappingGroup ( ) { return this . mappingGroup ; }
tr	9	@ Test public void testRemoveDoor ( ) { testEntrance . addDoor ( testID ) ; testEntrance . removeDoor ( testID ) ; boolean result = testEntrance . hasDoor ( testID ) ; assertEquals ( false , result ) ; }
tr	5	public Community ( byte [ ] buffer ) { community = new byte [ buffer . length ] ; for ( int i = 0 ; i < buffer . length ; i ++ ) community [ i ] = buffer [ i ] ; }
tr	7	public int similitud ( double [ ] a , double b [ ] ) { int sim = 0 ; for ( int i = 0 ; i < a . length ; i ++ ) { if ( a [ i ] . equals ( b [ i ] ) ) { sim ++ ; } } return sim ; }
tr	1	public boolean isSplitter ( ) { return isSplitter ; }
tr	3	public static SecurityServiceException newNotLoggedInException ( ) { return new SecurityServiceException ( CODE_NOT_LOGGED_IN ) ; }
tr	9	public void filterMax ( final boolean [ ] nonmatches , final int index , final double comparison ) { if ( ! double . isNaN ( comparison ) ) { final double [ ] values = this . maxFields [ index ] ; for ( int i = 0 ; i < this . size ; i ++ ) { nonmatches [ i ] |= ( values [ i ] > comparison ) ; } } }
tr	4	@ Override public String getName ( ) { return name ; }
tr	4	public void setNACSProdCode ( String value ) { this . nacsProdCode = value ; }
tr	9	@ BeforeMethod public void setUp ( ) throws Exception { MockitoAnnotations . initMocks ( this ) ; crudService = Mockito . mock ( HousePlannerCrudService . class ) ; }
tr	8	public ArrayList < MarkListContainer > getNextMarks ( Integer upTo , ConnectionType ofType ) { ArrayList < MarkListContainer > retMarks = new ArrayList < > ( ) ; return getNextMarks ( upTo , ofType , retMarks , this , 1 ) ; }
tr	6	public static void insertionSort ( int [ ] xs ) { for ( int j = 1 ; j < xs . length ; j ++ ) { int key = xs [ j ] ; int i = j - 1 ; while ( i >= 0 && key < xs [ i ] ) { xs [ i + 1 ] = xs [ i ] ; i -- ; } xs [ i + 1 ] = key ; } return ; }
tr	10	public void setDate ( String date ) throws ParseException { SimpleDateFormat form = new SimpleDateFormat ( "yyyy-MM-dd" ) ; Date d ; d = form . parse ( date ) ; this . data_nasterii = d ; }
tr	1	public AchievementUtils ( ) { }
tr	6	private static int b ( int _i , int _j , int _k , int B ) { return T [ b ( _i , B ) << 2 | b ( _j , B ) << 1 | b ( _k , B ) ] ; }
tr	8	@ Override protected RootPane createRootPane ( ) { RootPane rp = super . createRootPane ( ) ; inventoryPanel = new InventoryPanel ( inventory , this ) ; rp . add ( inventoryPanel ) ; return rp ; }
tr	7	public static String getCurrentTree ( String ptUrl ) { int anchor = getAnchorStart ( ptUrl ) ; String param = parseAnchorParam ( ptUrl , anchor , "N-s=1_" ) ; if ( param != null ) { return param ; } return parseAnchorParam ( ptUrl , anchor , "N-f=1_" ) ; }
tr	3	public Player [ ] getPlayers ( ) { return this . players ; }
tr	2	@ Override public boolean hasAnimation ( ) { return true ; }
tr	9	@ Override public Node compile ( ) { boolean fc = first instanceof Comment ; boolean sc = second instanceof Comment ; if ( fc && sc ) return new Comment ( "Cannot compile this." ) ; if ( fc ) return second . compile ( ) ; if ( sc ) return first . compile ( ) ; return new Block ( first . compile ( ) , second . compile ( ) ) ; }
tr	5	@ Override public long getTicks ( ) { return FineGrainTimestamp . getInstance ( ) . getTotalNanos ( ) ; }
tr	3	public void setBankSwiftNo ( String bankSwiftNo ) { this . bankSwiftNo = bankSwiftNo ; }
tr	4	public static void sort ( Individual [ ] array ) { sort ( array , array . length ) ; }
tr	9	public String getTableFile ( String localDir ) { return localDir + "\\" + sampleRows + Integer . toString ( sampleCols ) + collectionDims ( ) + delta + "tableCI.txt" ; }
tr	10	@ Test public void testIsEmpty ( ) { OrderedDictionary < String , Integer > dict = new RBOrderedDictionary < > ( ) ; assertEquals ( dict . isEmpty ( ) , true ) ; dict . insert ( "Angel" , 9151592 ) ; assertEquals ( dict . isEmpty ( ) , false ) ; }
tr	6	@ Override public boolean gameOverTick ( Game game ) { fQLearning . gameOver ( ) ; return false ; }
tr	9	public Binary2Text ( String s ) { df . setTimeZone ( TimeZone . getTimeZone ( "UTC" ) ) ; setFile ( new File ( s ) ) ; }
tr	9	public MapValuesEvent ( String mapName , Object key , ImmutableList < V > values , int nextInvocationCount ) { super ( mapName , key , nextInvocationCount ) ; this . values = values ; }
tr	5	public RenderComponent ( Game gm , Dimension screenSize ) { super ( gm ) ; this . screenSize = screenSize ; }
tr	1	public User ( ) { }
tr	5	public InviteDaoException ( String message , Throwable cause ) { super ( message , cause ) ; }
tr	7	private int compareTo ( Object tree1 , Object tree2 ) { if ( tree1 == tree2 ) return 0 ; else { int size1 = treeSize ( tree1 ) , size2 = treeSize ( tree2 ) ; if ( size1 < size2 ) return - 1 ; else if ( size1 > size2 ) return 1 ; else return compareTo ( tree1 , 0 , tree2 , 0 , 0 , size1 ) ; } }
tr	9	@ Override public void write ( DISOutputStream dos ) throws IOException { dos . writeUI32 ( rateAboutXAxis ) ; dos . writeUI32 ( rateAboutYAxis ) ; dos . writeUI32 ( rateAboutZAxis ) ; }
tr	7	public Coordinate getCoordinates ( ) { if ( lat != null && lon != null ) { return new Coordinate ( lon , lat ) ; } else if ( grid != null ) { return LocatorUtil . loc2degminsec ( grid ) ; } else { return null ; } }
tr	7	public boolean isSet ( _Fields field ) { if ( field == null ) { throw new IllegalArgumentException ( ) ; } switch ( field ) { case GET_LANG : return isSetGetLang ( ) ; } throw new IllegalStateException ( ) ; }
tr	6	public Property getProperty ( String name ) { return properties . get ( name ) ; }
tr	10	public static Parameter getValueOf ( String parameter ) { Parameter retVal = null ; try { retVal = Parameter . valueOf ( parameter ) ; } catch ( IllegalArgumentException iae ) { log . error ( "enum not found for Parameter [" + parameter + "]" , iae ) ; } return retVal ; }
tr	1	public int getFixedLength ( ) { return getFixedLength ( 0 , 0 ) ; }
tr	1	public int getWidth ( ) { return 90 ; }
tr	9	public static boolean isUniqueChars ( String str ) { int checker = 0 ; for ( int i = 0 ; i < str . length ( ) ; ++ i ) { int val = str . charAt ( i ) - a ; if ( ( checker & ( 1 << val ) ) > 0 ) return false ; checker |= ( 1 << val ) ; } return true ; }
tr	1	public BeanActividadesAlumno ( ) { }
tr	4	public UQuestPlayerListener ( UQuest instance ) { plugin = instance ; }
tr	10	public ChangeTurtleAction ( ) { super ( getLiteral ( "ChangeTurtle" ) ) ; putValue ( ACCELERATOR_KEY , KeyStroke . getKeyStroke ( KeyEvent . VK_T , ActionEvent . ALT_MASK ) ) ; }
tr	10	public List < Tuple < Integer , Integer >> allPointsInLine ( Line2D line ) { ArrayList < Tuple < Integer , Integer >> points = new ArrayList < Tuple < Integer , Integer >> ( ) ; double x1 = line . getX1 ( ) ; return points ; }
tr	5	public Date getDate ( int columnIndex ) throws SQLException { throw new UnsupportedOperationException ( "Not supported yet." ) ; }
tr	9	public static boolean checkFileSizeExist ( String fn , long size ) { File file = new File ( fn ) ; if ( file . exists ( ) == true && file . isFile ( ) && file . length ( ) == size ) return true ; else return false ; }
tr	10	public int read ( int addr ) { if ( ! getBit ( addr , 12 ) && getBit ( addr , 7 ) ) { mRAM . setRS ( getBit ( addr , 9 ) ) ; mData = mRAM . read ( addr & 7F ) ; } if ( ! getBit ( addr , 12 ) && ! getBit ( addr , 7 ) ) { mData = mStella . read ( addr & 3F ) ; } if ( getBit ( addr , 12 ) ) { mData = mGame . read ( addr ) ; } return mData ; }
tr	8	public Resource ( String resourcePath ) { this . path = resourcePath ; loadFont ( ) ; loadImage ( ) ; loadLevel ( ) ; loadSound ( ) ; }
tr	3	public Date getCreatedAt ( ) { return createdAt ; }
tr	5	public static void resetTestVars ( ) { calledMakePixel = false ; makePixelR = - 1 ; makePixelG = - 1 ; makePixelB = - 1 ; }
tr	10	public void salvarCliente ( ) { view . sincronizarModelComView ( model ) ; if ( model . getId ( ) == null ) { repositoryFactory . getClienteRepository ( ) . salvar ( model ) ; } else { new ClienteDao ( ) . atualizar ( model ) ; } }
tr	3	public Date getToReceiptDate ( ) { return toReceiptDate ; }
tr	2	public double getValPenPag_Entrega ( ) { return ValPenPag_Entrega ; }
tr	3	public void setTopicsService ( TopicsService topicsService ) { this . topicsService = topicsService ; }
tr	4	public FlameTrap ( Rectangle2D area ) { super ( area ) ; set_up ( ) ; }
tr	8	@ ManyToOne @ JoinColumn ( name = "survey_idsurvey" , referencedColumnName = "idsurvey" , nullable = false ) public Survey getSurveyBySurveyIdsurvey ( ) { return surveyBySurveyIdsurvey ; }
tr	10	@ Override public boolean equals ( Object obj ) { if ( this == obj ) return true ; if ( obj == null ) return false ; if ( getClass ( ) != obj . getClass ( ) ) return false ; PairImpl < ? > other = ( PairImpl < ? > ) obj ; return Tuples . equals ( _first , other . _first ) && Tuples . equals ( _second , other . _second ) ; }
tr	9	public static LuaTable bind ( LuaTable into ) { for ( BaseLib entry : values ( ) ) into . rawset ( entry . name ( ) . toLowerCase ( ) , entry ) ; return into ; }
tr	9	public C_BuyFundAction ( Model model ) { transactionDAO = model . getTransactionDAO ( ) ; fundDAO = model . getFundDAO ( ) ; customerDAO = model . getCustomerDAO ( ) ; }
tr	1	public Pesquisa ( ) { }
tr	4	public LaunchFrame ( ) { this ( ConfigurationLoader . MAPS_PATH , ConfigurationLoader . SAVE_PATH ) ; }
tr	4	public void setActionCallback ( IMqttActionListener listener ) { internalTok . setActionCallback ( listener ) ; }
tr	7	@ Test public void shouldRightTrimUnicodeStringsCorrectly ( ) throws UnsupportedEncodingException { assertEquals ( "\u03B3\u03B5\u03B9\u03AC" , BufferTools . trimStringRight ( "\u03B3\u03B5\u03B9\u03AC" ) ) ; assertEquals ( "\u03B3\u03B5\u03B9\u03AC" , BufferTools . trimStringRight ( "\u03B3\u03B5\u03B9\u03AC   " ) ) ; assertEquals ( "   \u03B3\u03B5\u03B9\u03AC" , BufferTools . trimStringRight ( "   \u03B3\u03B5\u03B9\u03AC" ) ) ; assertEquals ( "   \u03B3\u03B5\u03B9\u03AC" , BufferTools . trimStringRight ( "   \u03B3\u03B5\u03B9\u03AC   " ) ) ; assertEquals ( "\u03B3\u03B5\u03B9\u03AC" , BufferTools . trimStringRight ( "\u03B3\u03B5\u03B9\u03AC\t\r\n" ) ) ; assertEquals ( "\u03B3\u03B5\u03B9\u03AC" , BufferTools . trimStringRight ( "\u03B3\u03B5\u03B9\u03AC" + BufferTools . byteBufferToString ( new byte [ ] { 0 , 0 } , 0 , 2 ) ) ) ; }
tr	5	public boolean processingPending ( final ItemType item ) { return toProcess . contains ( item ) ; }
tr	9	@ Override public void set ( final Cell p , final char symbol ) { set ( p . x , p . y , elementMap . get ( symbol ) ) ; }
tr	6	public RandomFileInputStream ( String fileName ) throws FileNotFoundException { super ( ) ; randomFile = new RandomAccessFile ( fileName , "r" ) ; }
tr	4	public void makeEven ( ) { if ( population . size ( ) % 2 == 1 ) { population . remove ( 0 ) ; } }
tr	9	@ Override public int hashCode ( ) { final int BASE = 17 ; final int MULTIPLIER = 31 ; int result = BASE ; result = MULTIPLIER * result + vertexIndex ; result = MULTIPLIER * result + texCoordIndex ; result = MULTIPLIER * result + normalIndex ; result = MULTIPLIER * result + tangentIndex ; return result ; }
tr	1	public DepartmentDTO ( ) { }
tr	2	public void setfFirst ( int fFirst ) { this . fFirst = fFirst ; }
tr	2	public static int getProxyPort ( ) { return getIntProperty ( "tblog4j.http.proxyPort" ) ; }
tr	6	public static void insertarOrdenado ( int numero , int [ ] v ) { int [ ] resultado = new int [ v . length + 1 ] ; for ( int i = 0 ; i < v . length ; i ++ ) { if ( v [ i ] >= numero ) { } } }
tr	9	@ Override public float [ ] getFloatData ( ) { if ( ptr != 0 ) { return null ; } else { if ( isConstant ( ) ) { if ( length > getMaxSizeOf32bitArray ( ) ) return null ; float [ ] out = new float [ ( int ) length ] ; for ( int i = 0 ; i < length ; i ++ ) { out [ i ] = data [ 0 ] ; } return out ; } else { float [ ] out = new float [ ( int ) length ] ; for ( int i = 0 ; i < length ; i ++ ) { out [ i ] = ( float ) data [ i ] ; } return out ; } } }
tr	4	public void loadImage ( ) { favicon = getImage ( "favicon" ) ; titleImage = getImage ( "title" ) ; }
tr	3	public String getUserId ( ) { return userId ; }
tr	10	public void traverse ( TraverseType type ) { if ( type . equals ( TraverseType . INORDER ) ) { InOrder ( root ) ; } else if ( type . equals ( TraverseType . POSTORDER ) ) { PostOrder ( root ) ; } else { PreOrder ( root ) ; } }
tr	8	public static void main ( String [ ] args ) { int cansPerpack = 6 ; double canVolume = 0.355 ; System . out . print ( "A six-pack of 12-ounce cans contains" ) ; System . out . print ( cansPerpack * canVolume ) ; System . out . print ( " liters." ) ; }
tr	9	public void changeWorkspace ( JottoUIState uiScreen ) { CardLayout workspaceCardLayout = ( CardLayout ) workspace . getLayout ( ) ; workspaceCardLayout . show ( workspace , uiScreen . toString ( ) ) ; }
tr	3	public void setPortNumber ( int portNumber ) { this . portNumber = portNumber ; this . initializeSocket ( ) ; }
tr	2	public void setWasSeenByPlayer ( boolean wasSeenByPlayer ) { this . wasSeenByPlayer = wasSeenByPlayer ; }
tr	6	@ Override public BSTNode < K , E > getRoot ( ) { return this . root ; }
tr	1	public SyncDispatch ( ) { super ( ) ; }
tr	3	public String getCourseNumber ( ) { return courseNumber ; }
tr	4	@ AfterClass public void tearDown ( ) { driver . quit ( ) ; }
tr	2	public void setY ( int y ) { this . y = y ; }
tr	2	public void showMinorCard ( ) { showCard ( 1 ) ; }
tr	6	public void resetUnits ( ) { for ( Unit u : blueUnits ) { u . reset ( ) ; } for ( Unit u : redUnits ) { u . reset ( ) ; } }
tr	2	public int getIconWidth ( ) { return WIDTH ; }
tr	2	public int getIntY ( ) { return ( int ) this . getY ( ) ; }
tr	8	TIPPFile ( TIPPSectionType sectionType , String name , int sequence ) { this ( sectionType , TIPPResourceType . FILE , name , sequence ) ; }
tr	2	public boolean hasStart ( ) { return ( ( bitField0_ & 00000001 ) == 00000001 ) ; }
tr	5	public void setDepends ( List < String > depends ) { _depends = depends ; }
tr	10	private Mp3File loadAndCheckTestMp3WithNoTags ( File filename , int bufferLength ) throws IOException , UnsupportedTagException , InvalidDataException { Mp3File mp3File = loadAndCheckTestMp3 ( filename , bufferLength ) ; return loadAndCheckTestMp3WithNoTags ( mp3File ) ; }
tr	10	public static void main ( String [ ] args ) { RemoveDuplicateChars rdc = new RemoveDuplicateChars ( ) ; System . out . println ( rdc . removeDuplicates ( "Aaa" ) ) ; System . out . println ( rdc . removeDuplicatesWithExtraMemory ( "Aaa" ) ) ; }
tr	1	public TokenizerPropertyEvent ( ) { this ( 0 , null ) ; }
tr	2	public void setToDelete ( int toDelete ) { this . toDelete = toDelete ; }
tr	4	public StringCustomer ( String id , String name ) { this . id = id ; this . name = name ; }
tr	6	public static void main ( String [ ] args ) { MyJList gui = new MyJList ( ) ; gui . go ( ) ; }
tr	3	public EventRegistration getRegistration ( ) { return registration ; }
tr	6	public BMW ( String a , String b ) { this . a = Integer . parseInt ( a ) ; this . b = Integer . parseInt ( b ) ; }
tr	7	public Object getValueAt ( int row , int col ) { int i = ( ( 7 * row ) + ( col + 1 ) - offset ) ; return ( i <= days && i > 0 ) ? i : null ; }
tr	2	public int getLines ( ) { return lines ; }
tr	8	public Edge ( final Node argFrom , final Node argTo , final int argWeight ) { from = argFrom ; to = argTo ; weight = argWeight ; }
tr	8	public static Strategy getStrategy ( String strategyName ) { if ( "average" . equals ( strategyName ) ) { return new AverageStrategy ( ) ; } else if ( "vacancyRate" . equals ( strategyName ) ) { return new VacancyRateStrategy ( ) ; } else { return new DefaultStrategy ( ) ; } }
tr	9	public void atualizar ( TabuleiroXadrez tabuleiro , Jogador brancas , Jogador pretas , String aviso ) { atualizar ( tabuleiro , brancas , pretas ) ; exibirAlerta ( aviso ) ; }
tr	7	public DwarfRequestPacket ( Integer id , DwarfRequest request , Orientation orientation ) { this . id = id ; this . request = request ; this . orientation = orientation ; }
tr	10	public void remove ( Base o ) { Tablet Tablet = ( Tablet ) o ; EntityTransaction tx = getEntityManager ( ) . getTransaction ( ) ; tx . begin ( ) ; getEntityManager ( ) . remove ( Tablet ) ; tx . commit ( ) ; }
tr	4	public void print ( ) { System . out . println ( "Outer class instance print!" ) ; }
tr	1	public void clearChanged ( ) { super . clearChanged ( ) ; }
tr	9	public Jogador ( long id , String nome , String posicao , Calendar dataNascimento , Time time ) { this . id = id ; this . nome = nome ; this . posicao = posicao ; this . dataNascimento = dataNascimento ; this . time = time ; }
tr	7	@ Override public void paintComponents ( Graphics g ) { g . setClip ( m_areaFill ) ; super . paintComponents ( g ) ; paintBorder ( g ) ; }
tr	5	private void setSelected ( Component e ) { if ( selected != null ) selected . setSelected ( false ) ; selected = e ; if ( selected != null ) selected . setSelected ( true ) ; repaint ( ) ; }
tr	7	public UnitOfWork with ( Object [ ] contextObjectArray ) { this . ctx = new business . Context ( contextObjectArray ) ; return this ; }
tr	10	public Animator ( Card leftCard , Card rightCard ) { this . leftCard = leftCard ; this . rightCard = rightCard ; this . leftDestX = rightCard . getLocation ( ) . x ; this . rightDestX = leftCard . getLocation ( ) . x ; this . timer = new Timer ( 40 , this ) ; }
tr	5	public PolicyIterationImpl ( MDPData mdpData , boolean isSeedProvided ) { this . mdpData = mdpData ; this . isSeedProvided = isSeedProvided ; init ( ) ; }
tr	10	public static Node getNodeFromTile ( final int x , final int y , final Tile t ) { return new Node ( x , y , t . getTileMat ( ) . getTerrainCost ( ) , t . getTileMat ( ) == Materials . liquid ) ; }
tr	6	private void setStone ( ) { alive = false ; Stone stone = new Stone ( field , location ) ; location = null ; field = null ; }
tr	3	@ Override public void setTileHeight ( float tileHeight ) { this . tileHeight = tileHeight ; }
tr	1	public void getClassEnrolled ( ) { }
tr	10	public void printInfo ( ) { System . out . println ( "Arithmos Xeirourgiwn :" + NumberOrSyrgeries ) ; for ( int i = 0 ; i <= tepRooms . size ( ) ; i ++ ) System . out . println ( "Dwmatio :" + tepRooms . get ( i ) ) ; for ( int i = 0 ; i <= tepSurgeries . size ( ) ; i ++ ) System . out . println ( "Xeirourgio :" + tepSurgeries . get ( i ) ) ; }
tr	10	public void eliminarUsuario ( Usuario u ) { if ( this . seguridad . permitidoAdministrarUsuarios ( ) && this . existeUsuarioConCodigo ( u . getCodigo ( ) ) ) { this . usuarios . remove ( u ) ; this . destruccionUsuario ( u ) ; } }
tr	1	public int cdl3WhiteSoldiersLookback ( ) { return super . cdl3WhiteSoldiersLookback ( ) ; }
tr	5	public VW ( String color , int maxSpeed , int dateGreate ) { super ( color , maxSpeed , dateGreate ) ; }
tr	3	public void setDia ( String dia ) { this . dia = dia ; }
tr	9	@ Override public void paintComponent ( Graphics g ) { super . paintComponent ( g ) ; for ( int i = 0 ; i < this . drawAreaLayers . size ( ) ; i ++ ) { if ( this . showLayer [ this . drawAreaLayers . size ( ) - 1 - i ] ) { this . draw ( this . drawAreaLayers . size ( ) - 1 - i , g ) ; } } }
tr	8	public < IDT > F1 < IDT , M > selectByIdF ( Connection conn ) { return id -> selectById ( id , conn ) ; }
tr	10	public Enemys ( int x , int y ) { ImageIcon ii = new ImageIcon ( this . getClass ( ) . getResource ( "/gegner.png" ) ) ; image = ii . getImage ( ) ; visible = true ; this . x = x ; this . y = y ; }
tr	5	static public String nowAsString ( ) { return formatDate ( TIME_FORMAT , new Date ( ) ) ; }
tr	9	@ Test public void testTaskEquals ( ) { Task task1 = new Task ( "Common label" , true ) ; Task task2 = new Task ( "Common label" , false ) ; Task task3 = new Task ( "Different label" , false ) ; assertEquals ( task1 , task1 ) ; assertFalse ( task1 . equals ( task2 ) ) ; assertFalse ( task1 . equals ( task3 ) ) ; assertFalse ( task2 . equals ( task3 ) ) ; assertFalse ( task2 . equals ( null ) ) ; }
tr	9	public void validate ( ) throws org . apache . thrift . TException { if ( cratedAt == null ) { throw new org . apache . thrift . protocol . TProtocolException ( "Required field 'cratedAt' was not present! Struct: " + toString ( ) ) ; } }
tr	10	public DefaultEngineFactory ( long sleepTime , long fpsUpdateTime , int delaysPerYield , String title , int x , int y , int width , int height ) { this . sleepTime = sleepTime ; this . fpsUpdateTime = fpsUpdateTime ; this . delaysPerYield = delaysPerYield ; this . title = title ; this . x = x ; this . y = y ; this . width = width ; this . height = height ; }
tr	8	public Automaton toAutomaton ( Map < String , Automaton > automata , boolean minimize ) throws IllegalArgumentException { return toAutomatonAllowMutate ( automata , null , minimize ) ; }
tr	4	@ Override public Card getModel ( ) { return this . model ; }
tr	9	@ Test public void testMoverXY ( ) throws Exception { Buque nave = new Buque ( new Posicion ( 5 , 5 ) , new Posicion ( 0 , 0 ) , 5 ) ; nave . mover ( ) ; this . assertEquals ( true , nave . estoyEnPosicion ( new Posicion ( 4 , 4 ) ) ) ; this . assertEquals ( true , nave . estoyEnPosicion ( new Posicion ( 3 , 3 ) ) ) ; this . assertEquals ( true , nave . estoyEnPosicion ( new Posicion ( 2 , 2 ) ) ) ; this . assertEquals ( true , nave . estoyEnPosicion ( new Posicion ( 1 , 1 ) ) ) ; }
tr	3	public Declaracion getD1 ( ) { return d1 ; }
tr	7	@ Override public RejectPageBuilder toast ( String message , String title ) { return builder . toast ( message , title ) ; }
tr	6	private void closeWinMouseExited ( java . awt . event . MouseEvent evt ) { }
tr	1	public boolean isInGame ( ) { return isInGame ; }
tr	1	public int getColumnCount ( ) { return 1 ; }
tr	7	@ Override public synchronized boolean checkToken ( Token token ) { for ( Token to : tokens ) { if ( token . equals ( to ) ) { return true ; } } return false ; }
tr	3	public synchronized boolean isAlive ( ) { return Thread . currentThread ( ) . isAlive ( ) ; }
tr	5	public void setWord ( String word ) { this . word = word ; this . wordLength = word . length ( ) ; }
tr	1	public boolean isReady ( ) { return isReady ; }
tr	9	public static Matrix4 multiply ( Matrix4 m1 , Matrix4 m2 ) { Matrix4 C = new Matrix4 ( ) ; for ( int i = 0 ; i < 4 ; ++ i ) for ( int j = 0 ; j < 4 ; ++ j ) for ( int k = 0 ; k < 4 ; ++ k ) C . A [ i ] [ j ] += m1 . A [ i ] [ k ] * m2 . A [ k ] [ j ] ; return C ; }
tr	5	@ JsonProperty ( "StorageAccessProtocolID" ) public List < String > getStorageAccessProtocolID ( ) { return StorageAccessProtocolID ; }
tr	10	public String [ ] getNumeClase ( ) { ArrayList < String > clase = profesor . getClase ( ) ; String [ ] num_clase = new String [ clase . size ( ) ] ; int i = 0 ; for ( String c : clase ) { num_clase [ i ++ ] = c ; } return num_clase ; }
tr	5	public SimpleEval ( Board b , int d , boolean iW ) { super ( b , d , iW ) ; }
tr	9	private JLabel getJLabel8 ( ) { if ( jLabel8 == null ) { jLabel8 = new JLabel ( ) ; jLabel8 . setText ( "Crossover Op:" ) ; jLabel8 . setBounds ( 13 , 103 , 93 , 16 ) ; jLabel8 . setFont ( new java . awt . Font ( "Segoe UI" , 2 , 12 ) ) ; } return jLabel8 ; }
tr	10	@ Override public Collection < Cursor < C >> getCursors ( ) { return Collections . unmodifiableCollection ( Arrays . asList ( _cursors ) ) ; }
tr	6	@ Override public Object get ( String key ) { return model . get ( key ) ; }
tr	8	private void replaceNode ( LinkSetNode oldn , LinkSetNode newn ) { if ( oldn . parent == null ) { root = newn ; } else { if ( oldn == oldn . parent . left ) { oldn . parent . left = newn ; } else { oldn . parent . right = newn ; } } if ( newn != null ) { newn . parent = oldn . parent ; } }
tr	6	public void setServer_id ( String value ) { otapiJNI . ContactAcct_server_id_set ( swigCPtr , this , value ) ; }
tr	9	public CreateAccountRequest ( RequestEnvelope requestEnvelope , NameType name , AddressType address , String preferredLanguageCode ) { this . requestEnvelope = requestEnvelope ; this . name = name ; this . address = address ; this . preferredLanguageCode = preferredLanguageCode ; }
tr	1	public Parser ( ) { }
tr	9	public void displayBoard ( ) { for ( int i = 0 ; i < getBoard ( ) . length ; i ++ ) { System . out . println ( ) ; for ( int j = 0 ; j < getBoard ( ) . length ; j ++ ) { System . out . print ( getBoard ( ) [ i ] [ j ] ) ; } } }
tr	7	@ Override public void run ( ) { worldChanger . restoreWorld ( world ) ; timer . cancel ( ) ; cancel ( ) ; }
tr	5	public long getSetBits ( int player ) { assert ( player == 0 || player == 1 ) ; long result = 0 ; for ( int i = player ; i < 12 ; i += 2 ) { result |= piece_bb [ i ] ; } return result ; }
tr	7	public void visit ( DirectedGraph g ) { sorter . init ( g ) ; this . g = g ; solve ( ) ; sorter . optimize ( g ) ; }
tr	8	Activity getActivityFromFields ( ) { String name = txtName . getText ( ) ; String description = txaDescription . getText ( ) ; return new Activity ( name , description ) ; }
tr	7	public Map < Money , Integer > getOwnedMoney ( ) { return Collections . unmodifiableMap ( this . ownedMoney ) ; }
tr	1	public void create ( ) { }
tr	8	@ Override public void paintComponent ( Graphics g ) { super . paintComponent ( g ) ; g . drawImage ( image , 0 , 0 , getWidth ( ) , getHeight ( ) , null ) ; }
tr	5	@ Override public int hashCode ( ) { int result = key != null ? key . hashCode ( ) : 0 ; result = 31 * result + ( value != null ? value . hashCode ( ) : 0 ) ; return result ; }
tr	5	public NoSuchColumnException ( String message , Throwable cause ) { super ( message , cause ) ; }
tr	2	public char [ ] getReplaceList ( ) { return alphabetString ; }
tr	5	public static JTable createDefaultTable ( String [ ] columnNames ) { return new JTable ( createTableModel ( columnNames ) ) ; }
tr	6	public Object [ ] formatoTabela ( AreaFormacao areaformacao ) { return new Object [ ] { areaformacao . getId ( ) , areaformacao . getNome ( ) } ; }
tr	7	public boolean method537 ( ) { if ( anIntArray658 == null ) return true ; boolean flag = true ; for ( int j = 0 ; j < anIntArray658 . length ; j ++ ) if ( ! Model . method463 ( anIntArray658 [ j ] ) ) flag = false ; return flag ; }
tr	5	@ Override public void execute ( ) { while ( condicao . getValor ( ) ) { faca . execute ( ) ; } }
tr	3	public String getTopDownCenterIntersection ( ) { return topDownCenterIntersection ; }
tr	2	public int getId ( ) { return this . id ; }
tr	5	public HashMap < String , Integer > getQuestTracker ( ) { return questTracker ; }
tr	3	public void setAgencyID ( String agencyID ) { this . agencyID = agencyID ; }
tr	3	public MyInternalFrame GetAttribs ( ) { return attribs ; }
tr	7	public Game ( TurnManager tm ) { this . tm = tm ; seed = ( int ) ( Math . random ( ) * 100 ) ; init ( ) ; }
tr	5	public void addDependantNode ( Task task ) { dependentNodes . add ( task ) ; }
tr	7	public static JSONArray toJSONArray ( JSONArray names , String string ) throws JSONException { return toJSONArray ( names , new JSONTokener ( string ) ) ; }
tr	8	public static int nextPosition ( int startPosition , ArrayList < short > list ) { int offset = 1 ; int tempP = startPosition ; for ( ; tempP < list . size ( ) ; tempP ++ ) { if ( ( list . get ( tempP ) & 00000080 ) == 0 ) { offset ++ ; } else { break ; } } return startPosition + offset ; }
tr	4	@ Override public Validator < AbstractFilter > getValidator ( ) { return null ; }
tr	2	public void setActive ( boolean active ) { this . active = active ; }
tr	2	public int getLimit ( ) { return this . limit ; }
tr	10	@ Deprecated public Device getDevice ( final String id ) throws UnknownDeviceException , NullIdException { logger . debug ( "Getting Token from Device [" + id + "]" ) ; return deviceFactory . getDevice ( id ) ; }
tr	5	public static String GetNym_Name ( String NYM_ID ) { return otapiJNI . OTAPI_Basic_GetNym_Name ( NYM_ID ) ; }
tr	3	public CheckGrp getCheckGrp ( ) { return checkGrp ; }
tr	5	@ Override public boolean renameTo ( Folder arg0 ) throws MessagingException { return false ; }
tr	5	public static void registerVisibleMenu ( JPopupMenu menu2 ) { visibleMenus . add ( menu2 ) ; }
tr	5	public ControllerFreeMove ( float speed , int RYAxis , int RXAxis , int speedbutton ) { this . speed = speed ; this . RYAxis = RYAxis ; this . RXAxis = RXAxis ; this . speedbutton = speedbutton ; }
tr	1	public RBF_multiquadric ( ) { this ( 1.0 ) ; }
tr	5	public List < String > getADMID ( ) { if ( admid == null ) { admid = new ArrayList < String > ( ) ; } return this . admid ; }
tr	4	public void setVistaHabitantes ( DialogoHabitantesSeleccionar vistaHabitantes ) { this . vistaHabitantes = vistaHabitantes ; this . vistaHabitantes . setControllerContratoNuevo ( this ) ; }
tr	7	public Knapsack ( final Gem [ ] gems , final int maxWeight ) { this . gems = gems ; this . maxWeight = maxWeight ; this . numberOfGems = gems . length ; bestValues = new int [ numberOfGems + 1 ] [ maxWeight + 1 ] ; }
tr	5	public Rect div ( double factor ) { return copy ( ) . div_ip ( factor ) ; }
tr	9	public static double dotProduct ( FeatureVector _x , double [ ] _y ) { double sum = 0 ; for ( int i = 0 ; i < _x . size ; ++ i ) sum += _x . va [ i ] * _y [ _x . x [ i ] ] ; return sum ; }
tr	7	public void setEmphasizedText ( String text ) { if ( timer != null ) { timer . stop ( ) ; timer = null ; } emphasized = true ; this . text = text ; repaint ( ) ; }
tr	5	public PosFuncionarios getFuncionario ( long cedula ) { return ( PosFuncionarios ) getHibernateTemplate ( ) . get ( PosFuncionarios . class , cedula ) ; }
tr	9	private List < Integer > initializeKeys ( ) { final List < Integer > keys = Lists . newArrayList ( ) ; for ( int i = 0 ; i < this . k ; i ++ ) { keys . add ( 0 ) ; } return keys ; }
tr	2	public void setYear ( int year ) { this . year = year ; }
tr	8	@ Override public void deinstall ( JEditorPane c ) { super . deinstall ( c ) ; c . removeMouseListener ( mcontroller ) ; c . removeMouseMotionListener ( mcontroller ) ; component = null ; }
tr	10	public int step ( int state , char c ) { if ( classmap == null ) return transitions [ state * points . length + getCharClass ( c ) ] ; else return transitions [ state * points . length + classmap [ c - Character . MIN_VALUE ] ] ; }
tr	5	public void addTableListener ( MouseListener tableDoubleClick ) { moviesTable . addMouseListener ( tableDoubleClick ) ; }
tr	4	@ Override public String toString ( ) { return "Autonomous Points : " + getPoints ( ) ; }
tr	7	public FileMessageReader ( String path ) throws FileNotFoundException { reader = new BufferedReader ( new FileReader ( path ) ) ; }
tr	5	public List < Edge > getEdges ( int vertex ) { return vertices [ vertex ] . getEdges ( ) ; }
tr	8	public void creerOuvriere ( String evenementActuel , int nbLarves ) { if ( nbLarves > 1 ) { if ( nbLarves == 2 ) { ajouterFourmi ( 1 ) ; } if ( nbLarves == 4 ) { ajouterFourmi ( 2 ) ; } if ( evenementActuel . equals ( Constantes . EVEN_OUVRIERES ) ) { ajouterFourmi ( 1 ) ; } } }
tr	4	public CsvParser ( ISplitStrategy splitStrategy ) { strategy = splitStrategy ; }
tr	9	public boolean searchAnyField ( String search ) { for ( int i = 0 ; i < NUMBER_OF_FIELDS ; i ++ ) { if ( content [ i ] . toLowerCase ( ) . contains ( search . trim ( ) . toLowerCase ( ) ) ) { return true ; } } return false ; }
tr	2	public int get_shape_pt_sequence ( ) { return _shape_pt_sequence ; }
tr	6	void embarcar ( String [ ] passageiros ) { passageiros = new String [ ] { "Panthro" , "Lion" } ; passageiros [ 1 ] = "klaus" ; System . out . println ( passageiros [ 1 ] ) ; }
tr	5	public void windowClosing ( WindowEvent e ) { System . exit ( 0 ) ; }
tr	7	public void actionPerformed ( ActionEvent ae ) { log . config ( "Displaying COM port configuration window" ) ; COMPortConfig cpcWin = new COMPortConfig ( ) ; }
tr	2	public void remove ( ) { throw new UnsupportedOperationException ( ) ; }
tr	3	@ Override public String getDescription ( ) { return "Heals all allies for 30% of their max hp and removes rage" ; }
tr	8	public RandomAsciiStringGenerator ( Integer minNumChars , Integer maxNumChars , Collection < Character > forbiddenLetters ) { this ( constant ( minNumChars ) , constant ( maxNumChars ) , forbiddenLetters ) ; }
tr	10	@ Override public void description ( ) { System . out . println ( "You won!" ) ; Dungeon . getInstance ( ) . reset ( ) ; Tester . main ( null ) ; }
tr	6	private static long to_six_bit ( long num ) { return ( ( ( num << 26 ) & fc000000fc000000 ) | ( ( num << 12 ) & fc000000fc0000 ) | ( ( num >> 2 ) & fc000000fc00 ) | ( ( num >> 16 ) & fc000000fc ) ) ; }
tr	4	public static ImageIcon getCertificateIcon ( ) { return IconLoader . getIcon ( "cert.png" ) ; }
tr	1	public boolean isAdmin ( ) { return isAdmin ; }
tr	3	public String getName ( ) { if ( name == null ) return "World" ; else return name ; }
tr	1	public BuilderException ( ) { super ( ) ; }
tr	4	public Swamp ( ) { tickDivider = 10 ; counter = 0 ; isUpgraded = false ; }
tr	9	public void redirectOut ( Color textColor , PrintStream printStream ) { ConsoleOutputStream cos = new ConsoleOutputStream ( textColor , printStream ) ; System . setOut ( new PrintStream ( cos , true ) ) ; }
tr	1	public int hashCode ( ) { return super . hashCode ( ) ; }
tr	10	private void formWindowClosing ( java . awt . event . WindowEvent evt ) { WindowController . showmainwindow ( m_loggedas ) ; WindowController . closeaboutbox ( ) ; }
tr	5	public ArrayPlace at ( NumericExpression i , NumericExpression j ) { return new ArrayPlace ( this , i , j ) ; }
tr	5	public final void setHeight ( BoundSize size ) { this . height = size != null ? size : BoundSize . NULL_SIZE ; }
tr	4	private InputStream getBufferedBody ( ) { if ( this . _bufferedOutput == null ) { return null ; } return new ByteArrayInputStream ( this . _bufferedOutput ) ; }
tr	1	public int rank ( ) { return rank ( - 1. ) ; }
tr	9	public Material ( final IClient client ) { entity = new BeanMaterial ( ) ; genericCrud = new GenericCrud ( entity , queryForm , client . getMysql ( ) ) ; }
tr	7	public static String getNumber ( int driver ) { if ( driver == 0 ) throw new InvalidQueryException ( "Nonexistent driver" ) ; return database . busDatabase . get_string ( "driver" , driver , "number" ) ; }
tr	6	public Object getValue ( ) { if ( coroutine == null ) return value ; return coroutine . stack [ index ] ; }
tr	10	public Connection conexion ( ) { try { class . forName ( "org.gjt.mm.mysql.Driver" ) ; conect = DriverManager . getConnection ( "jdbc:mysql://localhost/cliente" , "root" , "" ) ; } catch ( Exception e ) { JOptionPane . showMessageDialog ( null , "Error " + e ) ; } return conect ; }
tr	7	private void jMenuItem1ActionPerformed ( java . awt . event . ActionEvent evt ) { new MenuOptions ( ) ; }
tr	6	@ Override protected Connection getConnection ( ) throws SQLException { return DataSourceUtils . getConnection ( dataSource ) ; }
tr	10	public double mediaDia ( String mesInt , int dia ) { double result = 0.0 ; ArrayList < SensorInt > datosDia = datosDia ( mesInt , dia ) ; for ( SensorInt d : datosDia ) { result += d . getPorcentajeCO2 ( ) / 24 ; } return result ; }
tr	3	public DateAction ( JDateChooser date ) { this . date = date ; }
tr	7	public HighscoreFileDAO ( ) { System . out . println ( Files . exists ( db ) ) ; }
tr	9	public static void inorder ( BSTNode current ) { if ( current == null ) return ; inorder ( current . getLeft ( ) ) ; System . out . print ( current . getData ( ) + " " ) ; inorder ( current . getRight ( ) ) ; }
tr	1	public Message ( ) { }
tr	4	public WordCountInputFormat ( String filename ) throws IOException { super ( filename ) ; }
tr	7	private void cmdAbortActionPerformed ( java . awt . event . ActionEvent evt ) { dispose ( ) ; }
tr	7	public void insert ( int d1 , double d2 ) { Link link = new Link ( d1 , d2 ) ; link . nextLink = first ; first = link ; }
tr	4	public static Shell getShell ( ) { Shell shell = new Shell ( display ) ; return shell ; }
tr	7	@ Override public void handshake ( int supports , String version , String nonce ) throws IOException { }
tr	2	public Tanh ( double slope ) { this . slope = slope ; }
tr	6	public void setData ( String data ) throws DOMException { throw new DOMExceptionImpl ( DOMException . NO_MODIFICATION_ALLOWED_ERR , "Not supported" ) ; }
tr	4	public void setProdCodeGrp ( ProdCodeGrp value ) { this . prodCodeGrp = value ; }
tr	7	@ Override public String toString ( ) { String dato = this . codigo + "-" + cliente + "-" + saldo + " lps en saldo." ; return dato ; }
tr	1	public boolean detonado ( ) { return detonado ; }
tr	2	public int num_states ( ) { return _num_states ; }
tr	7	public void addThird ( Timeslot t ) { if ( t instanceof Lab ) { addThirdLab ( t ) ; } else if ( t instanceof Tutorial ) { addThirdTut ( t ) ; } }
tr	5	public static $double2d $ ( final double [ ] [ ] t ) { $double2d r = new Double2DRef ( t ) ; return r ; }
tr	8	public AreaConhecimentoControl ( AreaConhecimentoView v , AreaConhecimentoTabela t ) throws Exception { this . view = v ; this . tabela = t ; }
tr	6	public static Direction getDirection ( String direction ) { return Direction . valueOf ( direction . toUpperCase ( ) ) ; }
tr	9	public void setSize ( int width , int height ) { if ( direction == HORIZONTAL ) { panel . setBounds ( 30 , 10 , width - 40 , height - 20 ) ; super . setSize ( width + 20 , height ) ; } else { panel . setBounds ( 10 , 30 , getWidth ( ) - 20 , getHeight ( ) - 40 ) ; super . setSize ( width , height + 20 ) ; } }
tr	6	public int setRib ( String rib ) { if ( rib . length ( ) > ConfigGlobale . longueurRIB ) { return - 1 ; } else { this . rib = rib ; return 0 ; } }
tr	6	public void clearAndHide ( ) { textAlphabet . setText ( null ) ; textClocksToReset . setText ( null ) ; textGuard . setText ( null ) ; setVisible ( false ) ; }
tr	9	@ Test public void testSetCheckOutTime_1 ( ) throws Exception { Policy fixture = new Policy ( new Integer ( 1 ) , "" , "" , true , true , new Integer ( 1 ) , new Integer ( 1 ) ) ; String checkOutTime = "" ; fixture . setCheckOutTime ( checkOutTime ) ; }
tr	4	protected static long getCPtr ( SWIGTYPE_p_uint32_t obj ) { return ( obj == null ) ? 0 : obj . swigCPtr ; }
tr	5	public void updateUI ( ) { this . editorPane . getSelectedComponent ( ) . repaint ( ) ; this . updateInspector ( ) ; }
tr	7	private static int partition ( int [ ] array , int left , int right ) { int i = left - 1 ; int temp ; for ( int j = left ; j < right ; j ++ ) { if ( array [ j ] <= array [ right ] ) { i ++ ; temp = array [ i ] ; array [ i ] = array [ j ] ; array [ j ] = temp ; } } temp = array [ i + 1 ] ; array [ i + 1 ] = array [ right ] ; array [ right ] = temp ; return i + 1 ; }
tr	7	static byte [ ] readToBytes ( InputStream in ) throws IOException { byte [ ] buf = new byte [ in . available ( ) ] ; in . read ( buf ) ; return buf ; }
tr	4	public void setProgressCharacter ( String ch ) { progressChar = ch ; }
tr	6	public boolean isNull ( String key ) { return JSONObject . null . equals ( this . opt ( key ) ) ; }
tr	1	public ObjectFactory ( ) { }
tr	8	private void effacer ( java . awt . event . ActionEvent evt ) { nomEtu . setText ( "" ) ; }
tr	3	public DriverCreationJP getDriverCreationJP ( ) { return driverCreationJP ; }
tr	7	@ JsonProperty ( "Endpoint" ) public void setEndpoint ( List < org . ogf . glue2 . Endpoint > Endpoint ) { this . Endpoint = Endpoint ; }
tr	3	@ Override public int getY ( ) { return 25 + posicion . getY ( ) * 60 ; }
tr	10	public int getNumberOfTransitions ( ) { if ( isSingleton ( ) ) return singleton . length ( ) ; int c = 0 ; for ( State s : getStates ( ) ) c += s . transitions . size ( ) ; return c ; }
tr	6	public OptionButton ( String text , Dimension dim ) { super ( text , dim ) ; setPreferredSize ( dim ) ; }
tr	10	public synchronized void addTaskCompletionListener ( TaskCompletionListener < ReturnType > listener ) { mTaskCompletionListeners . add ( listener ) ; if ( mSuccessfulResult != null ) listener . onSuccess ( mSuccessfulResult ) ; else if ( mFailureThrown != null ) listener . onFailure ( mFailureThrown ) ; }
tr	4	@ Override public HandlerList getHandlers ( ) { return handlers ; }
tr	5	@ Override protected String getExpectedDateFieldDisplay ( ) { return MsWindowsDateField . DISPLAY ; }
tr	10	@ Override public void run ( ) { final ColorRGB color = trace ( scene , jay ) ; fireAfterTrace ( color , c , r ) ; }
tr	4	public void setContext ( String value ) { this . context = value ; }
tr	9	public OTPassword ( SWIGTYPE_p_uint8_t szInput , SWIGTYPE_p_uint32_t nInputSize , int theBlockSize ) { this ( otapiJNI . new_OTPassword__SWIG_5 ( SWIGTYPE_p_uint8_t . getCPtr ( szInput ) , SWIGTYPE_p_uint32_t . getCPtr ( nInputSize ) , theBlockSize ) , true ) ; }
tr	8	public int GetSumOfAlphabeticalValuesTimesAlphabeticalOrdering ( ) { Sort ( ) ; int toReturn = 0 ; for ( int i = 0 ; i < NameList . size ( ) ; i ++ ) { toReturn += GetAlphabeticalValue ( NameList . get ( i ) ) * ( i + 1 ) ; } return toReturn ; }
tr	6	public BIOSwitch ( String onString , String offString ) { super ( onString ) ; create ( ) ; setOffString ( offString ) ; }
tr	7	public synchronized LinkedList < String > getSupportedCryptoList ( ) { LinkedList < String > out = new LinkedList < String > ( ) ; for ( String e : supportedAlgorithms ) { out . addLast ( e ) ; } return out ; }
tr	7	@ Override public ParseResult < String > next ( ) { ParseResult < String > toReturn = next ; if ( toReturn == null ) { throw new NoSuchElementException ( ) ; } prepareNext ( ) ; return toReturn ; }
tr	7	protected void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { }
tr	5	@ Test public void testFive ( ) { assertThat ( generate ( 5 ) , is ( 11 ) ) ; }
tr	4	public TagInt ( String name , int data ) { super ( name ) ; this . data = data ; }
tr	1	private Randomizer ( ) { }
tr	5	public void append ( String s ) { append ( Color . WHITE , null , s ) ; }
tr	6	public Coord midTo ( Coord other ) { return add ( vecTo ( other ) . scale ( 0.5 ) ) ; }
tr	10	public String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; int current = first ; while ( current != last ) { sb . append ( arr [ current ] . toString ( ) + " " ) ; if ( ++ current >= arr . length ) { current = 0 ; } } return sb . toString ( ) ; }
tr	5	@ Override public String Serialize ( ) { return type + MESSAGE_SPERATOR ; }
tr	1	public FPoint3 ( ) { }
tr	10	protected String getPresentationName ( ) { if ( countDifferences ( oldValue , newValue ) == 1 ) { for ( Features feature : Features . values ( ) ) { if ( feature . isChosen ( oldValue ) != feature . isChosen ( newValue ) ) { if ( feature . isChosen ( newValue ) ) { return "set cell " + feature . toString ( ) ; } else { return "unset cell " + feature . toString ( ) ; } } } } return "change cell features" ; }
tr	2	public boolean hasBorder ( ) { return border != null ; }
tr	8	public DBUtil ( String url , String database , String driverClassName , String user , String pwd ) { init ( url , database , driverClassName , user , pwd ) ; }
tr	4	public String [ ] showDialog ( ) { this . setVisible ( true ) ; return result ; }
tr	2	public int getAccess ( ) { return access ; }
tr	1	public boolean reversible ( ) { return true ; }
tr	9	protected boolean isInGrabBar ( int mouseX , int mouseY ) { mouseY = Standards . W_HEIGHT - mouseY - 1 ; if ( ( mouseX > ScreenX ) && ( mouseX < ScreenX + Width ) ) { if ( ( mouseY > ScreenY ) && ( mouseY < ScreenY + GrabBarHeight ) ) { return true ; } } return false ; }
tr	5	public static Complex times ( Complex x , Complex y , Complex z ) { return times ( x , times ( y , z ) ) ; }
tr	6	private static Object difference ( Object subtree1 , Object subtree2 ) { return difference ( subtree1 , subtree2 , NEGATIVE_INFINITY , POSITIVE_INFINITY ) ; }
tr	4	public SingleInstanceThread ( ) { super ( ) ; this . executor = null ; this . isRunning = null ; this . notifiyer = null ; }
tr	9	public Node deleteWithRecursion ( Object dataToDelete , Node node ) { if ( node . getData ( ) . equals ( dataToDelete ) ) { return node . getNextNode ( ) ; } else { node . setNext ( deleteWithRecursion ( dataToDelete , node . getNextNode ( ) ) ) ; return node ; } }
tr	9	public static double standardDeviation ( List < DataEntry > data , int index , double mean ) { return ( float ) Math . sqrt ( variance ( data , index , mean ) ) ; }
tr	8	public Appointment ( AppointmentSpecification appointmentSpecification , AppointmentCalendarStrategy comparatorStrategy , AppointmentClockStrategy clockStrategy ) { this . appointmentSpecification = appointmentSpecification ; this . calendarStrategy = comparatorStrategy ; this . clockStrategy = clockStrategy ; }
tr	5	public static boolean isWindows ( ) { return System . getProperty ( "os.name" ) . toLowerCase ( ) . contains ( "win" ) ; }
tr	10	private void setShortcutText ( ) { String shorctutAsString = KeyUtil . toString ( Arrays . copyOf ( currentShortcut , currentShortcutLength ) ) ; setText ( shorctutAsString ) ; }
tr	9	public void hideWord ( ) { this . currentColour = SystemProperties . WHITE ; this . currentWordString = StringUtils . EMPTY ; this . setText ( currentWordString ) ; this . setForeground ( currentColour ) ; }
tr	10	public Segment ( int x , int y , CodelColor kind ) { this . x = x ; this . y = y ; value = kind ; size = 1 ; parents = new ArrayList < Area > ( ) ; }
tr	9	public void sendMessage ( HttpExchange he , int statusCode , String message ) throws IOException { send ( he , statusCode , message . getBytes ( ) ) ; }
tr	8	public List < String [ ] > solveNQueens ( final int n ) { final List < String [ ] > res = new ArrayList < String [ ] > ( ) ; final int [ ] columnForRow = new int [ n ] ; helper ( n , 0 , columnForRow , res ) ; return res ; }
tr	9	public void visit ( AuthorizationException e ) { System . err . println ( e . getErrorName ( ) + " " + e . getType ( ) ) ; e . printStackTrace ( ) ; }
tr	9	@ Override protected void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { process ( "post" , request , response ) ; }
tr	2	public void AnzahlDec ( ) { this . anzahl -- ; }
tr	2	public boolean readSignal ( ) { return fSignal ; }
tr	7	private long [ ] mapToArr ( ) { long [ ] arr = new long [ map . size ( ) ] ; for ( long key : map . keySet ( ) ) { arr [ map . get ( key ) ] = key ; } return arr ; }
tr	9	private static int findOddOccuringElement ( List < Integer > list ) { return list . stream ( ) . reduce ( ( x , y ) -> x ^ y ) . get ( ) ; }
tr	10	public Content getContent ( String name ) { return util . uniqueOrNull ( listContentByCriteria ( new Criterion [ ] { Property . forName ( "title" ) . = ( name ) } ) ) ; }
tr	2	protected String getToolName ( ) { return "Pencil" ; }
tr	2	public void stop ( ) { thread = null ; }
tr	1	protected byte getMessageInfo ( ) { return 0 ; }
tr	10	public void testUserId ( ) { System . out . println ( "\nStarting testUserId: users" ) ; User newUser = new User ( "Billy" ) ; assertTrue ( newUser . getUserID ( ) > 0 ) ; User newOtherUser = new User ( "Bob" ) ; assertTrue ( newOtherUser . getUserID ( ) == newUser . getUserID ( ) + 1 ) ; newUser = new User ( "Jim" ) ; assertTrue ( newUser . getUserID ( ) == newOtherUser . getUserID ( ) + 1 ) ; for ( int i = 0 ; i < 1000000 ; i ++ ) { newUser = new User ( "Abc" ) ; } assertTrue ( newUser . getUserID ( ) == newOtherUser . getUserID ( ) + 1000001 ) ; System . out . println ( "Finished testUserId: users" ) ; }
tr	7	private static void handleSystemProperties ( ) { Properties sysprops = System . getProperties ( ) ; sysprops . list ( System . out ) ; }
tr	7	public Set < Individual > getIndividuals ( ) { return new EntityFilter < Individual > ( onto . listIndividuals ( ) . toSet ( ) , this ) ; }
tr	8	public static double asinh ( double a ) { boolean negative = false ; if ( a < 0 ) { negative = true ; a = - a ; } double absAsinh ; if ( a > 0.167 ) { absAsinh = FastMath . log ( FastMath . sqrt ( a * a + 1 ) + a ) ; } else { final double a2 = a * a ; if ( a > 0.097 ) { absAsinh = a * ( 1 - a2 * ( 1 / 3.0 - a2 * ( 1 / 5.0 - a2 * ( 1 / 7.0 - a2 * ( 1 / 9.0 - a2 * ( 1.0 / 11.0 - a2 * ( 1.0 / 13.0 - a2 * ( 1.0 / 15.0 - a2 * ( 1.0 / 17.0 ) * 15.0 / 16.0 ) * 13.0 / 14.0 ) * 11.0 / 12.0 ) * 9.0 / 10.0 ) * 7.0 / 8.0 ) * 5.0 / 6.0 ) * 3.0 / 4.0 ) / 2.0 ) ; } else if ( a > 0.036 ) { absAsinh = a * ( 1 - a2 * ( 1 / 3.0 - a2 * ( 1 / 5.0 - a2 * ( 1 / 7.0 - a2 * ( 1 / 9.0 - a2 * ( 1.0 / 11.0 - a2 * ( 1.0 / 13.0 ) * 11.0 / 12.0 ) * 9.0 / 10.0 ) * 7.0 / 8.0 ) * 5.0 / 6.0 ) * 3.0 / 4.0 ) / 2.0 ) ; } else if ( a > 0.0036 ) { absAsinh = a * ( 1 - a2 * ( 1 / 3.0 - a2 * ( 1 / 5.0 - a2 * ( 1 / 7.0 - a2 * ( 1 / 9.0 ) * 7.0 / 8.0 ) * 5.0 / 6.0 ) * 3.0 / 4.0 ) / 2.0 ) ; } else { absAsinh = a * ( 1 - a2 * ( 1 / 3.0 - a2 * ( 1 / 5.0 ) * 3.0 / 4.0 ) / 2.0 ) ; } } return negative ? - absAsinh : absAsinh ; }
tr	3	public void setUserPhoto ( String userPhoto ) { this . userPhoto = userPhoto ; }
tr	7	public Vector4f add ( final Vector4f vector ) { return add ( vector . x , vector . y , vector . z , vector . w ) ; }
tr	6	public void sum ( int i , float j ) { System . out . println ( "Int Float" ) ; }
tr	3	public void setPassword ( String password ) { this . password = password ; }
tr	4	public BinaryTreeNode insertLeft ( int leftValue ) { this . left = new BinaryTreeNode ( leftValue ) ; return this . left ; }
tr	9	@ Override protected void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { processRequest ( request , response ) ; }
tr	1	public void removeUser ( ) { }
tr	9	public SheetParse addNewChildHeader ( String name ) { SheetParse sheetParse = new SheetParse ( name , null , new ArrayList < SheetParse > ( ) , this , depth + 1 ) ; sheets . add ( sheetParse ) ; return sheetParse ; }
tr	2	public double getRadio ( ) { return this . radio ; }
tr	7	public HalfEdge ( Vertex v , Face f ) { vertex = v ; face = f ; }
tr	1	public void framebufferUpdateEnd ( ) { }
tr	9	public void setPublicHoliday ( Date date , String name ) { PublicHoliday publicHoliday = new PublicHoliday ( name , date ) ; publicHolidayDAO . createPublicHoliday ( publicHoliday ) ; }
tr	9	@ Override public GitVcsRoot withListener ( VcsCommand . Listener listener ) { return new GitVcsRoot ( localPath , repositoryUrl , settings , listener ) ; }
tr	6	private static void print ( String string ) { System . out . println ( string ) ; }
tr	3	public String getMateria ( ) { return materia ; }
tr	8	@ Override public boolean equals ( Object obj ) { if ( this == obj ) return true ; if ( obj == null ) return false ; if ( getClass ( ) != obj . getClass ( ) ) return false ; Product other = ( Product ) obj ; if ( id != other . id ) return false ; return true ; }
tr	2	public TinyUrlWebServiceCallbackHandler ( ) { this . clientData = null ; }
tr	10	@ Override public String getText ( ) { LocalDate startDate = project . getStartDate ( ) ; String text = "New start week year" ; if ( startDate != null ) { text = String . format ( "Old start week year: %d%n%s" , startDate . getWeekyear ( ) , text ) ; } return text ; }
tr	6	public < T extends NeuralNetwork > EvolutionaryAlgorithm ( ArrayList < T > list ) { networks = list ; }
tr	2	public int size ( ) { return dataPoints . size ( ) ; }
tr	3	public void setPlateau ( Plateau plateau ) { this . plateau = plateau ; }
tr	1	public Os ( ) { }
tr	1	public int getSelectedOption ( ) { return - 1 ; }
tr	9	public static SetParameter Set ( String parameterName , Object parameterValue ) { CushyDBValidator . isParameterValueValidOrThrow ( parameterValue , "ParameterValue only be of types: " + CushyDBValidator . ALLOWED_TYPES ) ; return new SetParameter ( parameterName , parameterValue ) ; }
tr	8	public boolean equals ( Object o ) { if ( this == o ) { return true ; } if ( o == null || getClass ( ) != o . getClass ( ) ) { return false ; } Option option = ( Option ) o ; if ( opt != null ? ! opt . equals ( option . opt ) : option . opt != null ) { return false ; } if ( longOpt != null ? ! longOpt . equals ( option . longOpt ) : option . longOpt != null ) { return false ; } return true ; }
tr	10	public void postorderTraversal ( ArrayList < Integer > list , TreeNode node ) { if ( node == null ) { return ; } postorderTraversal ( list , node . left ) ; postorderTraversal ( list , node . right ) ; list . add ( node . val ) ; }
tr	10	@ Test public void testExceptionMessageOnTransformWith1Param_CaseKo4 ( ) throws IOException , TemplateException , NoSuchMethodException , SecurityException , IllegalAccessException , IllegalArgumentException , InvocationTargetException { assertParseThrowsException ( "~$text:'charat<>~" , "Empty init list parameter before '>' at position '-:l1:c16'." ) ; }
tr	9	public static Date getCurrentMonthEndDate ( ) { Calendar calendar = Calendar . getInstance ( ) ; calendar . set ( Calendar . DAY_OF_MONTH , calendar . getActualMaximum ( Calendar . DAY_OF_MONTH ) ) ; return calendar . getTime ( ) ; }
tr	8	@ Test public void simpleDivisionTest ( ) throws Exception { final BigDecimal res = calculator . evaluate ( " 10 / 5 " ) ; assertEquals ( "Division of numbers isn't calculated correctly" , new BigDecimal ( 2 ) , res ) ; }
tr	9	private DefaultConstructorFactory getDefaultConstructorFactory ( ) { lock . lock ( ) ; try { DefaultConstructorFactory factory = null ; try { factory = new SunDefaultConstructorFactory ( ) ; } catch ( Exception e ) { } if ( factory == null ) factory = new NoDefaultConstructorFactory ( ) ; return factory ; } finally { lock . unlock ( ) ; } }
tr	1	public EndTag ( ) { super ( "" ) ; }
tr	2	public int getHeight ( ) { return render . getHeight ( ) ; }
tr	7	protected void processRequest ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { }
tr	5	public EditionVelo ( Velo velo ) { this . velo = velo ; initComponents ( ) ; InitialisationEditionVelo ( this . velo ) ; }
tr	2	public int getIdp ( ) { return this . idp ; }
tr	8	public KeyBuilder then ( KeyComponent ... components ) { this . components . add ( new CompositeComponent ( Arrays . asList ( components ) ) ) ; return this ; }
tr	10	private void wildcard ( String pattern , String result , String value , String expect ) { Wildcard wc = new Wildcard ( pattern , result ) ; assertEquals ( expect , wc . replace ( value ) ) ; }
tr	4	public Rect getRectangle ( ) { return new Rect ( width , height ) ; }
tr	9	protected static QuestData createComplete ( PlayerQuestLog log , Quest quest ) { QuestData qd = new QuestData ( log , quest ) ; qd . unassigned . clear ( ) ; return qd ; }
tr	10	private void jButtonSigActionPerformed ( java . awt . event . ActionEvent evt ) { unCliente = daoCliente . nextCliente ( unCliente ) ; muestraCliente ( ) ; }
tr	3	public Date getDataAprovacao ( ) { return dataAprovacao ; }
tr	8	public Set < String > keySet ( ) { if ( mode == Mode . Map ) { return map . keySet ( ) ; } throw new PerlHashTypeException ( "Not a map" ) ; }
tr	8	public void selectSort ( int [ ] data ) { if ( data == null ) { throw new NullPointerException ( "Input array is null." ) ; } for ( int i = 0 ; i < data . length ; i ++ ) { int small = i , tmp ; for ( int j = i + 1 ; j < data . length ; j ++ ) { if ( data [ small ] > data [ j ] ) { small = j ; } } tmp = data [ i ] ; data [ i ] = data [ small ] ; data [ small ] = tmp ; } }
tr	2	public double getX ( ) { return x ; }
tr	7	public static void main ( String [ ] args ) { System . out . println ( generateParentheses ( 1 ) ) ; System . out . println ( generateParentheses ( 2 ) ) ; System . out . println ( generateParentheses ( 3 ) ) ; System . out . println ( generateParentheses ( 4 ) ) ; }
tr	1	public EngineException ( ) { super ( ) ; }
tr	1	public void setMutables ( ) { }
tr	3	public InventorySlot [ ] getInventory ( ) { return inventory ; }
tr	5	@ Override public String toString ( ) { return col + " " + row ; }
tr	10	@ Override public void editar ( Modulo modulo ) { try { new ModuloDAOImpl ( ) . editar ( modulo ) ; logger . info ( "M\u00F3dulo editado com sucesso" ) ; } catch ( PSTException ex ) { throw new ServiceException ( ex ) ; } }
tr	8	public static ServiceRank codeOf ( Object code ) { if ( code == null ) { return null ; } if ( code instanceof ServiceRank ) { return ( ServiceRank ) code ; } return _codeValueMap . get ( code . toString ( ) . toLowerCase ( ) ) ; }
tr	8	public void onGameEnd ( GameEvent e ) { main ( GAMELISTENER_NAME + e . sourceGame + GameSocketServer . GAME_STARTED ) ; }
tr	2	public synchronized int xgetD1InitialDelay ( ) { return d1ID ; }
tr	7	public ButtonsJP ( ) { setBackground ( Color . WHITE ) ; setLayout ( new FlowLayout ( ) ) ; setElements ( ) ; }
tr	4	public ArrayList < String > getPotentials ( ) { return potentials ; }
tr	8	public void Go ( ) throws PolicyException { this . policies . preCheck ( ctx ) ; if ( this . delegate == null ) execute ( ) ; else this . delegate . execute ( ) ; this . policies . postCheck ( ctx ) ; }
tr	7	@ Override public boolean equals ( Object obj ) { if ( obj instanceof GRGProteinNode ) { GRGProteinNode other = ( GRGProteinNode ) obj ; return this . node . equals ( other . node ) ; } else { return false ; } }
tr	9	public HeapObject ( ClassFile classFile , Reference reference ) { this . reference = reference ; this . classFile = classFile ; this . color = Gc . Color . WHITE ; }
tr	10	@ Override public boolean equals ( Object obj ) { try { GitlabCommitStatus commitObj = ( GitlabCommitStatus ) obj ; return ( this . getId ( ) . compareTo ( commitObj . getId ( ) ) == 0 ) ; } catch ( ClassCastException e ) { return false ; } }
tr	7	@ Override public Person editPerson ( String json , long id ) { throw new UnsupportedOperationException ( "Not supported yet." ) ; }
tr	3	public PropertyValidationException ( String message ) { super ( message ) ; }
tr	4	public void set_agency_fare_url ( String in ) { _agency_fare_url = in ; }
tr	9	public void minHeapify ( int index ) { for ( int left = leftChild ( index ) ; left < heap . size ( ) ; index = left ) { if ( left + 1 < heap . size ( ) && heap . get ( left + 1 ) . key < heap . get ( left ) . key ) { left ++ ; } if ( heap . get ( left ) . key < heap . get ( index ) . key ) { swap ( left , index ) ; } else { break ; } } }
tr	7	public void addProduct ( Product product ) { if ( productList . containsKey ( product ) ) { productList . put ( product , productList . get ( product ) + 1 ) ; } else { productList . put ( product , 1 ) ; } }
tr	8	protected void printInfo ( ) { System . out . println ( "sample: " + this . sample ) ; System . out . println ( "sampleClass: " + this . sampleClass ) ; System . out . println ( "sampleDeclaredFields: " + "\n" ) ; this . printSampleFields ( this . sampleDeclaredFields ) ; }
tr	4	public void study ( ) { System . out . println ( "Study something..." ) ; }
tr	1	public Stock ( ) { super ( ) ; }
tr	8	@ Override public void actionPerformed ( ActionEvent ae ) { JanelaExtracaoCaracteristicas janela = new JanelaExtracaoCaracteristicas ( imagem ) ; janela . setVisible ( true ) ; }
tr	10	public JsonElement serialize ( Kind src , Type typeOfSrc , JsonSerializationContext context ) { return new JsonPrimitive ( src . getName ( ) ) ; }
tr	1	public Query ( ) { }
tr	8	@ XmlElementDecl ( namespace = "com/firstdata/Merchant/gmfV3.10" , name = "OfferPubName" ) public JAXBElement < String > createOfferPubName ( String value ) { return new JAXBElement < String > ( _OfferPubName_QNAME , String . class , null , value ) ; }
tr	7	public ZippedDocumentTemplate ( InputStream inputStream ) throws IOException { archive = OpenDocumentIO . readZip ( inputStream ) ; }
tr	7	public int getNumberOfSell ( ) { int count = 0 ; for ( GeneratedSignal gs : genSigList ) { if ( gs . getType ( ) . equals ( "sell" ) ) { count ++ ; } } return count ; }
tr	2	public int getHeight ( ) { return this . height ; }
tr	6	@ Override public BoundedValue clone ( ) { return new BoundedValue ( _min , _max , _value ) ; }
tr	4	public void clearFeedback ( ) { for ( ValueSource vs : valueSources ) { vs . clearFeedback ( ) ; } }
tr	6	public Set < Faction > findGroupsByFounder ( String founderName ) { return this . dao . findGroupsByFounder ( founderName ) ; }
tr	7	public void actionPerformed ( ActionEvent e ) { administrador . dispose ( ) ; ProcurarUsuarioFrequencia . main ( null ) ; }
tr	6	public void setFiles ( ArrayList < FTPFile > files2 ) { this . files = files2 ; fireTableDataChanged ( ) ; }
tr	2	public int size ( ) { return tasks . size ( ) ; }
tr	4	public Moves ( String name , String UserIn ) { this . name = name ; this . UserIn = UserIn ; }
tr	7	@ Test public final void testOKPacket ( ) { OKPacket packet = new OKPacket ( ) ; assertEquals ( OKPacket . SERVER_PACKET_HEADER_OK , packet . getData ( ) [ 0 ] ) ; }
tr	9	@ Test public void varianssinLaskeminenToimiiTarkasti ( ) { data . clear ( ) ; data . add ( 1 ) ; data . add ( 1 ) ; data . add ( 2 ) ; data . add ( 2 ) ; data . add ( 3 ) ; data . add ( 3 ) ; data . add ( 4 ) ; data . add ( 5 ) ; aineisto = new NumeerinenAineisto ( data ) ; assertEquals ( 1.734375 , aineisto . laskeVarianssi ( ) , 0.0001 ) ; }
tr	1	public Person ( ) { super ( ) ; }
tr	3	public String getsPayPalPassword ( ) { return sPayPalPassword ; }
tr	2	public SimpleObject ( int value ) { this . value = value ; }
tr	10	public static void main ( String [ ] args ) { boolean all_right ; all_right = true ; int [ ] p0 ; int p1 ; p0 = new int [ ] { 5 , 1 , 2 } ; p1 = 4 ; all_right = KawigiEdit_RunTest ( 0 , p0 , true , p1 ) && all_right ; p0 = new int [ ] { 2 , 1 , 4 } ; p1 = 8 ; all_right = KawigiEdit_RunTest ( 1 , p0 , true , p1 ) && all_right ; p0 = new int [ ] { 2 , 1 , 2 , 7 } ; p1 = 6 ; all_right = KawigiEdit_RunTest ( 2 , p0 , true , p1 ) && all_right ; p0 = new int [ ] { 94512 , 2 , 87654 , 81316 , 6 , 5 , 6 , 37151 , 6 , 139 , 1 , 36 , 307 , 1 , 377 , 101 , 8 , 37 , 58 , 1 } ; p1 = 1092 ; all_right = KawigiEdit_RunTest ( 3 , p0 , true , p1 ) && all_right ; p0 = new int [ ] { 883 , 66392 , 3531 , 28257 , 1 , 14131 , 57 , 1 , 25 , 88474 , 4 , 1 , 110 , 6 , 1769 , 220 , 442 , 7064 , 7 , 13 } ; p1 = 56523 ; all_right = KawigiEdit_RunTest ( 4 , p0 , true , p1 ) && all_right ; p0 = new int [ ] { 2 , 3 } ; p1 = 1 ; all_right = KawigiEdit_RunTest ( 4 , p0 , true , p1 ) && all_right ; if ( all_right ) { System . out . println ( "You're a stud (at least on the example cases)!" ) ; } else { System . out . println ( "Some of the test cases had errors." ) ; } }
tr	1	public ClearQuizServlet ( ) { super ( ) ; }
tr	5	@ Override protected void selectNumber ( ) { System . out . println ( "\u9009\u4E00\u4E2A\u4E2D\u56FD\u8054\u901A\u7535\u8BDD\u53F7" ) ; }
tr	5	public void add ( Map < String , String > data ) { this . outputQueue . add ( data ) ; }
tr	10	protected boolean followsInReader ( InputStream is , String text ) throws IOException { for ( int pos = 0 ; pos < text . length ( ) ; pos ++ ) { if ( is . read ( ) != text . codePointAt ( pos ) ) { return false ; } } return true ; }
tr	9	public T first ( UnaryFunction < T , boolean > predicate ) { while ( hasNext ( ) ) { final T value = next ( ) ; if ( predicate . invoke ( value ) ) { return value ; } } throw new NoSuchElementException ( ) ; }
tr	2	public double getKnownProb ( ) { return knownProb ; }
tr	7	public StringColumn ( String name , String title , int width , AlignType align ) { super ( name , title , width , align ) ; }
tr	3	public String getRstReceived ( ) { return rstReceived ; }
tr	8	@ Override public double derivative ( double x ) { double output = ( 1 / ( 1 + Math . exp ( - this . slope * x ) ) ) ; return this . slope * output * ( 1d - output ) ; }
tr	1	public Image ( ) { }
tr	2	public final void println ( boolean x ) { println ( "" + x ) ; }
tr	1	public GridStatistics ( ) { super ( ) ; }
tr	1	public int size ( ) { return size ; }
tr	3	public int getSize ( ) { return this . slots . length ; }
tr	4	public boolean isMigrable ( ) { return currentStatus == Status . RUNNING ; }
tr	2	public long getStorageUsedBlocks ( ) { return storageUsedBlocks ; }
tr	7	public Cliente getResponsableSeleccionado ( ) { int index = cbxResponsable . getSelectedIndex ( ) ; return mdlResponsable . getElementAt ( index ) ; }
tr	9	public static String substring ( String origin , String begin , String end ) { if ( origin == null ) { return origin ; } int beginIndex = begin == null ? 0 : origin . indexOf ( begin ) + begin . length ( ) ; int endIndex = end == null ? origin . length ( ) : origin . indexOf ( end , beginIndex ) ; if ( endIndex == - 1 ) { return origin . substring ( beginIndex ) ; } return origin . substring ( beginIndex , endIndex ) ; }
tr	3	public String getTipoRazza ( ) { return toString ( ) ; }
tr	4	@ Override public void mouseExited ( MouseEvent e ) { }
tr	8	public Set result ( ) throws JavaModelException { long startTime = captureTime ( ) ; Set result = childStrategy . result ( ) ; long endTime = captureTime ( ) ; notify ( "result" , startTime , endTime ) ; return result ; }
tr	8	public void addChild ( AppJob child ) { addLink ( child , "BLAST_" + SIPHT . CODE , ( ( SIPHT ) getApp ( ) ) . generateLong ( "BLAST_CODE" ) ) ; addLink ( child , "blast_candidate.out" , ( ( SIPHT ) getApp ( ) ) . generateLong ( "blast_candidate.out" ) ) ; addLink ( child , "blast_candidate.err" , ( ( SIPHT ) getApp ( ) ) . generateLong ( "blast_candidate.err" ) ) ; }
tr	3	public boolean isRight ( ) { return _father . _right == this ; }
tr	6	public Object accept ( ASTVisitor visitor ) throws DatabaseException { return visitor . visit ( this ) ; }
tr	6	public String toString ( ) { String out = "" ; for ( int k = 1 ; k <= size ; k ++ ) out += heap [ k ] + " " ; return out ; }
tr	6	synchronized public String getString ( ) { try { wait ( ) ; } catch ( InterruptedException e ) { } return napis ; }
tr	8	public void killSuicideRecord ( Sprite sprite ) { killRecord ( sprite ) ; suicideKills ++ ; System . out . println ( " suicide " ) ; }
tr	9	public Matrix getU ( ) { Matrix X = new Matrix ( n , n ) ; double [ ] [ ] U = X . getArray ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( i <= j ) { U [ i ] [ j ] = LU [ i ] [ j ] ; } else { U [ i ] [ j ] = 0.0 ; } } } return X ; }
tr	6	public ShootingObjectImpl ( ShootingScene scene , float power ) { this . parentScene = scene ; this . power = power ; this . undead = true ; }
tr	4	public void saveSetting ( String settingName , String settingValue ) { }
tr	8	@ Test public void shoulReturnFalseWithDifferentTypes ( ) { DayInWeek d1 = DayInWeek . valueOf ( "SUNDAY" ) ; assertFalse ( d1 . equals ( new Object ( ) ) ) ; }
tr	6	@ Override public boolean exists ( ) { return x >= 0 && y >= 0 && x < xlimit && y < ylimit ; }
tr	7	public double addNewTurtle ( int x , int y ) { myWorkspaces . get ( myController . getWorkspaceIndex ( ) ) . addNewTurtle ( x , y ) ; return 1 ; }
tr	10	public JSONArray toJSONArray ( JSONArray names ) throws JSONException { if ( names == null || names . length ( ) == 0 ) { return null ; } JSONArray ja = new JSONArray ( ) ; for ( int i = 0 ; i < names . length ( ) ; i += 1 ) { ja . put ( this . opt ( names . getString ( i ) ) ) ; } return ja ; }
tr	2	public void setBlack ( boolean isBlack ) { this . isBlack = isBlack ; }
tr	8	public int removeIf ( IntPredicate test ) { int removed = 0 ; for ( int i = 0 ; i < num ; i ++ ) { int key = keys [ i ] ; if ( test . test ( key ) ) { removed ++ ; } else if ( removed > 0 ) { keys [ i - removed ] = key ; } } num -= removed ; return removed ; }
tr	7	@ Test public void absDiv_yIsNegative_returnsPositiveValue ( ) { float result = new Calculator ( ) . absDiv ( 15 , - 6 ) ; assert . assertEquals ( 2.5f , result ) ; }
tr	4	public Key lastKey ( ) { if ( tree == null ) throw new NoSuchElementException ( ) ; else return ( Key ) lastKey ( tree ) ; }
tr	1	public Mushroom ( ) { }
tr	6	public static _Fields findByName ( String name ) { return byName . get ( name ) ; }
tr	5	public ASTNode child ( int index ) { return children . get ( index ) ; }
tr	1	public void stop ( ) { }
tr	3	public void clearBooster ( ) { getBooster ( ) . clear ( ) ; }
tr	10	public void dumpSystemProperties ( ) { Properties sysProps = System . getProperties ( ) ; log . fine ( className , "dumpSystemProperties" , dumpProperties ( sysProps , "SystemProperties" ) . toString ( ) ) ; }
tr	2	public void setEventType ( int eventType ) { this . eventType = eventType ; }
tr	10	public static void onAllROute ( Individual individual ) { ProblemInstance problemInstance = individual . problemInstance ; for ( int period = 0 ; period < problemInstance . periodCount ; period ++ ) { for ( int vehicle = 0 ; vehicle < problemInstance . vehicleCount ; vehicle ++ ) { mutateRouteBy2_Opt ( individual , period , vehicle ) ; } } }
tr	2	public boolean isEmpty ( ) { return selectColumns . isEmpty ( ) ; }
tr	4	@ Override public void processLoan ( ) { loanMediator . askForLoan ( ) ; }
tr	5	public void setEnabled ( boolean enabled ) { Dispatch . put ( this , "Enabled" , new Variant ( enabled ) ) ; }
tr	9	public List < T > getList ( T [ ] x ) { List < T > l = new ArrayList < > ( ) ; for ( int i = 0 ; i < x . length ; ++ i ) { l . add ( x [ i ] ) ; } return l ; }
tr	6	private static char [ ] reverse ( char [ ] a , int len ) { char [ ] b = new char [ len ] ; for ( int i = len - 1 , j = 0 ; i >= 0 ; i -- , j ++ ) { b [ j ] = a [ i ] ; } return b ; }
tr	6	@ Override public void removeTreeModelListener ( TreeModelListener listener ) { listeners . remove ( listener ) ; }
tr	10	public boolean checkTerminationForValueIteration ( double prevVal [ ] , double curVal [ ] ) { if ( prevVal == null ) { return false ; } double limit = epsilon * ( 1 - mdpData . getGamma ( ) ) / mdpData . getGamma ( ) ; for ( int i = 0 ; i < mdpData . getNoOfStates ( ) ; i ++ ) { double diff = curVal [ i ] - prevVal [ i ] ; if ( diff < 0 ) { diff = - 1 * diff ; } if ( diff >= limit ) { return false ; } } return true ; }
tr	1	public Create ( ) { }
tr	9	public void advance ( ) { timeUntilNext -- ; if ( timeUntilNext <= 0 ) { stoppingAt ( ) ; if ( ! reverse && nextStation . getNext ( ) == null ) { reverse = true ; timeUntilNext = nextStation . getPrevTime ( ) ; nextStation = nextStation . getPrev ( ) ; return ; } if ( reverse && nextStation . getPrev ( ) == null ) { reverse = false ; timeUntilNext = nextStation . getNextTime ( ) ; nextStation = nextStation . getNext ( ) ; return ; } if ( reverse ) { timeUntilNext = nextStation . getPrevTime ( ) ; nextStation = nextStation . getPrev ( ) ; } else { timeUntilNext = nextStation . getNextTime ( ) ; nextStation = nextStation . getNext ( ) ; } } }
tr	7	protected void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { }
tr	3	public String getUserID ( ) { return userID ; }
tr	7	public SoundDemo ( ) { initCanvas ( "Sound Demo" , 800 , 600 ) ; assetLoader = new AssetLoader ( this ) ; gongClip = assetLoader . loadSound ( "Sounds/gong.wav" ) ; setVisible ( true ) ; }
tr	8	@ WebEndpoint ( name = "ClienteResourcePort" ) public ClienteResourcePortType getClienteResourcePort ( WebServiceFeature ... features ) { return super . getPort ( ClienteResourcePort , ClienteResourcePortType . class , features ) ; }
tr	8	public Id add ( Relationship relationship ) { Id id = nextId ( ) ; relationships . add ( relationship . usingId ( id ) ) ; return id ; }
tr	5	private void playPlaceSound ( ) { if ( isMute ) { return ; } placeSound . setFramePosition ( 0 ) ; placeSound . start ( ) ; }
tr	8	@ Override protected Validation < String , String > handleParameters ( final List < String > arguments ) { handle ( ) ; return Validation . success ( "" ) ; }
tr	2	public boolean isPercentage ( ) { return percentage ; }
tr	1	public boolean supprimerVoyage ( ) { return false ; }
tr	6	public void setAltitudeMode ( String value ) { this . altitudeMode = value ; this . isAltitudeModeDirty = true ; setDirty ( ) ; }
tr	9	@ Override protected void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { this . doPost ( request , response ) ; }
tr	3	public String getServerURI ( ) { return serverURI ; }
tr	3	public void setMinMwt ( float value ) { this . minMwt = value ; }
tr	4	@ Override public double getPaymentAmount ( ) { return getQuantity ( ) * getPricePerItem ( ) ; }
tr	7	@ Override public SearchRequestBuilder withWebRequestSearchOption ( WebSearchOption webSearchOption ) { getWebRequestOptions ( ) . add ( webSearchOption ) ; return this ; }
tr	9	protected void definirSubmerged ( ) { raz ( ) ; panel_case . removeAll ( ) ; definirEtat ( "submerged" ) ; InterfaceEditeur . tab [ this . x ] [ this . y ] = this ; }
tr	5	@ XmlTransient public Collection < Keyvalue > getKeyvalueCollection ( ) { return keyvalueCollection ; }
tr	4	private void m_uiShowDisassembly_actionPerformed ( ActionEvent e ) { showDebugger ( ) ; }
tr	9	public void testBomIgnoredAsFirstCharacterOfDocument ( ) throws JSONException { JSONTokener tokener = new JSONTokener ( "\uFEFF[]" ) ; JSONArray array = ( JSONArray ) tokener . nextValue ( ) ; assertEquals ( 0 , array . length ( ) ) ; }
tr	6	public StatAllocation ( int stat , String statName , Position position ) { this . stat = stat ; this . statName = statName ; this . position = position ; }
tr	7	@ WebMethod public int createGroup ( @ WebParam ( name = "name" ) String name , @ WebParam ( name = "members" ) String members ) { return server_group . createGroup ( name , members ) ; }
tr	7	public HashThread ( RunAutomaton runAut , String init ) { aut = runAut ; pass = init ; }
tr	8	private String [ ] getShapeNames ( ) { String [ ] names = new String [ shapes . size ( ) ] ; for ( int i = 0 ; i < shapes . size ( ) ; i ++ ) { names [ i ] = shapes . get ( i ) . getName ( ) ; } return names ; }
tr	8	public void clear ( ) { loaded = null ; loadedtype = null ; if ( oe != null ) { remove ( oe ) ; oe = null ; invalidate ( ) ; SwingUtilities . updateComponentTreeUI ( this ) ; } }
tr	3	public String getXlinkRole ( ) { return xlinkRole ; }
tr	1	public NetGeneratorException ( ) { }
tr	2	public int getPrecioPackCanales ( ) { return PrecioPackCanales ; }
tr	9	public void setCurrentThreadClassLoader ( ) { ClassLoader loader = Thread . currentThread ( ) . getContextClassLoader ( ) ; if ( loader instanceof ExtendableClassLoader ) return ; else { currentLoader = loader ; Thread . currentThread ( ) . setContextClassLoader ( this ) ; } }
tr	9	public static void setScreen ( String string ) { ( ( CardLayout ) contentPane . getLayout ( ) ) . show ( contentPane , string ) ; contentPane . getComponentAt ( 5 , 5 ) . requestFocus ( ) ; }
tr	4	public char getCloseChar ( ) { return btnClose . getText ( ) . charAt ( 0 ) ; }
tr	10	public String readSegment ( ) { String leftString = readUnparsedData ( ) ; int - = getEndOfSegment ( leftString ) ; if ( currentPosition == preveriosPosition ) { currentPosition += - + separator . length ( ) ; leftString = readUnparsedData ( ) ; - = getEndOfSegment ( leftString ) ; } preveriosPosition = currentPosition ; return leftString . substring ( 0 , - ) ; }
tr	4	@ AfterClass public static void tearDownAfterClass ( ) throws Exception { datatype = null ; }
tr	3	public Set getSoyeulyliches ( ) { return this . soyeulyliches ; }
tr	9	@ Override public void onNickChange ( String oldNick , String login , String hostname , String newNick ) { m_gameManager . changeNick ( oldNick , newNick ) ; }
tr	5	public int score ( String input ) { return Integer . parseInt ( input ) ; }
tr	5	public PlayerHandler45 ( Socket socket , CardGame45 cGame45 ) { super ( socket ) ; this . cGame45 = cGame45 ; }
tr	2	public double getSamplePeriod ( ) { return mSamplePeriod ; }
tr	3	public void setPhoneNum ( PhoneNumber phoneNum ) { this . phoneNum = phoneNum ; }
tr	4	public void setOrderNum ( String value ) { this . orderNum = value ; }
tr	7	private int getUnvisitedNode ( int [ ] [ ] adjacency_matrix , int source , int [ ] visited ) { int [ ] myNeighbors = adjacency_matrix [ source ] ; for ( int i = 0 ; i < myNeighbors . length ; i ++ ) { if ( myNeighbors [ i ] == 1 && visited [ i ] == 0 ) { return i ; } } return - 1 ; }
tr	6	@ Override public String toString ( ) { return id + " - " + name + " - " + score ; }
tr	10	public Variable ( String t , String i , String s ) { tipo = t ; id = i ; tamanio = Integer . parseInt ( s ) ; }
tr	3	public String get_stop_code ( ) { return _stop_code ; }
tr	1	private static short [ ] init__Scanner_trans_actions_0 ( ) { return new short [ ] { 0 , 0 , 13 , 49 , 49 , 13 , 13 , 49 , 13 , 49 , 19 , 19 , 19 , 19 , 0 , 0 , 19 , 19 , 0 , 0 , 19 , 0 , 19 , 19 , 19 , 19 , 0 , 0 , 19 , 0 , 19 , 19 , 19 , 0 , 0 , 0 , 19 , 19 , 19 , 19 , 19 , 0 , 0 , 23 , 23 , 0 , 0 , 19 , 19 , 19 , 0 , 0 , 3 , 34 , 34 , 31 , 0 , 19 , 19 , 1 , 0 , 5 , 37 , 37 , 37 , 37 , 37 , 0 , 19 , 19 , 19 , 19 , 19 , 0 , 0 , 0 , 7 , 40 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 7 , 0 , 0 , 0 , 0 , 0 , 0 , 3 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 19 , 19 , 19 , 0 , 0 , 19 , 0 , 19 , 19 , 19 , 0 , 0 , 0 , 19 , 19 , 19 , 19 , 19 , 0 , 0 , 23 , 23 , 0 , 0 , 0 , 19 , 19 , 19 , 0 , 0 , 3 , 34 , 34 , 31 , 0 , 19 , 19 , 1 , 0 , 5 , 37 , 37 , 37 , 37 , 37 , 0 , 19 , 19 , 19 , 19 , 19 , 0 , 0 , 0 , 7 , 40 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 7 , 0 , 0 , 0 , 0 , 0 , 0 , 3 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 19 , 19 , 0 , 0 , 19 , 0 , 19 , 19 , 19 , 52 , 17 , 174 , 0 , 17 , 17 , 17 , 0 , 0 , 61 , 19 , 19 , 19 , 0 , 0 , 43 , 9 , 159 , 9 , 9 , 9 , 19 , 19 , 19 , 19 , 0 , 0 , 64 , 21 , 25 , 189 , 21 , 21 , 21 , 0 , 19 , 19 , 19 , 19 , 19 , 0 , 0 , 23 , 23 , 0 , 0 , 27 , 127 , 19 , 19 , 19 , 0 , 0 , 3 , 34 , 34 , 31 , 0 , 19 , 19 , 1 , 0 , 5 , 37 , 37 , 37 , 37 , 37 , 0 , 19 , 19 , 19 , 19 , 19 , 0 , 0 , 0 , 7 , 40 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 7 , 0 , 0 , 0 , 0 , 0 , 0 , 3 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 64 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 43 , 0 , 0 , 0 , 0 , 0 , 0 , 52 , 0 , 0 , 0 , 0 , 0 , 88 , 29 , 234 , 29 , 29 , 29 , 0 , 0 , 0 , 88 , 0 , 0 , 0 , 0 , 0 , 52 , 17 , 103 , 107 , 17 , 17 , 17 , 0 , 0 , 11 , 15 , 17 , 17 , 17 , 17 , 0 , 88 , 29 , 151 , 155 , 29 , 29 , 29 , 43 , 9 , 91 , 95 , 9 , 9 , 9 , 64 , 21 , 25 , 115 , 119 , 21 , 21 , 21 , 27 , 70 , 73 , 64 , 0 , 19 , 19 , 19 , 0 , 147 , 85 , 224 , 229 , 85 , 85 , 85 , 147 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 27 , 0 , 19 , 88 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 58 , 43 , 0 , 19 , 19 , 19 , 0 , 139 , 79 , 204 , 209 , 79 , 79 , 79 , 139 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 52 , 0 , 19 , 19 , 19 , 0 , 143 , 82 , 214 , 219 , 82 , 82 , 82 , 143 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 9 , 9 , 9 , 9 , 21 , 25 , 21 , 21 , 21 , 0 , 0 , 0 , 64 , 0 , 19 , 19 , 19 , 0 , 123 , 67 , 194 , 199 , 67 , 67 , 67 , 123 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 27 , 0 , 19 , 19 , 19 , 0 , 76 , 29 , 131 , 135 , 29 , 29 , 29 , 76 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 58 , 43 , 0 , 19 , 19 , 19 , 0 , 99 , 46 , 164 , 169 , 46 , 46 , 46 , 99 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 52 , 0 , 19 , 19 , 19 , 0 , 111 , 55 , 179 , 184 , 55 , 55 , 55 , 111 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 88 , 0 , 19 , 19 , 0 , 0 , 0 , 0 } ; }
tr	10	public static void addClass ( Node node , String classname ) { AttVal classattr = node . getAttrByName ( "class" ) ; if ( classattr != null ) { classattr . value = classattr . value + " " + classname ; } else node . addAttribute ( "class" , classname ) ; }
tr	1	public int process_id ( ) { return 2 ; }
tr	3	public Integer getNum ( ) { return num ; }
tr	3	public String getXMLEncoding ( ) { return XMLEncoding ; }
tr	7	public ContractFrame ( String strTitle , String strCaption ) { setTitle ( strTitle ) ; caption = strCaption ; createUI ( ) ; }
tr	8	public void updateProduct ( Integer ID , String p_name , String p_descrription ) { Product product = new Product ( ID , p_name , p_descrription ) ; product . updateProduct ( ) ; }
tr	4	@ BeforeMethod public void setUp ( ) { utils = new ArraySetUtils ( ) ; }
tr	4	public void setSlash ( ) { if ( System . getProperty ( "os.name" ) . contains ( "Window" ) ) this . / = "\\" ; else this . / = "/" ; }
tr	10	@ Test public void testCreerOuvriere2 ( ) { SalleOuvriere testOuvriere2 = new SalleOuvriere ( ) ; testOuvriere2 . creerOuvriere ( Constantes . EVEN_LARVE , 0 ) ; assertEquals ( 0 , testOuvriere2 . getNbCourantFourmi ( ) ) ; testOuvriere2 . creerOuvriere ( Constantes . EVEN_OUVRIERES , 4 ) ; assertEquals ( 3 , testOuvriere2 . getNbCourantFourmi ( ) ) ; }
tr	7	protected void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { }
tr	1	public Staff ( ) { }
tr	7	@ Override public boolean add ( Node o ) { hash . put ( o . state , o ) ; return super . add ( o ) ; }
tr	8	public void changeSettingPanel ( ) { this . removeAll ( ) ; this . add ( label [ 0 ] ) ; this . add ( label [ 1 ] ) ; this . add ( label [ 2 ] ) ; this . add ( label [ 3 ] ) ; this . add ( textField [ 0 ] ) ; this . add ( textField [ 1 ] ) ; this . add ( pwdField ) ; this . add ( btn [ 1 ] ) ; this . add ( btn [ 2 ] ) ; this . repaint ( ) ; }
tr	9	public static Manifold getManifold ( StaticBody a , StaticBody b ) { MANIFOLD . reset ( a , b ) ; return manifolds . get ( MANIFOLD ) ; }
tr	9	public void removeVertex ( ) { Point p = new Point ( relX ( ) , relY ( ) ) ; String current = coordToName . get ( p ) ; removeVertex ( current ) ; }
tr	6	@ Override public RedirectUrlBuilder query ( String query , String encoding ) { return builder . query ( query , encoding ) ; }
tr	1	public boolean bonusDefausseUnite ( ) { return false ; }
tr	9	public ArrayList < String > wordBreak ( String s , Set < String > dict ) { cache . clear ( ) ; return wordBreakDFS ( s , dict ) ; }
tr	7	public boolean isDefined ( ) { return ( this . x1 != null && this . x2 != null && this . y1 != null && this . y2 != null && this . z1 != null && this . z2 != null ) ; }
tr	9	public void fillFieldsToCash ( ) { double dbl_change = moneyClient - totalCost ; String str_change = String . valueOf ( dbl_change ) ; this . changeTextField . setText ( str_change ) ; }
tr	6	@ Transactional public Volunteer getVolunteer ( Integer volunteerId ) { return volunteerDAO . getVolunteer ( volunteerId ) ; }
tr	10	private void passTFKeyReleased ( java . awt . event . KeyEvent evt ) { if ( evt . getKeyCode ( ) == KeyEvent . VK_ENTER ) { this . conectBoton . doClick ( ) ; } }
tr	3	public RoomNotAccessibleException ( String message ) { super ( message ) ; }
tr	9	public Type getType ( Identifier id ) { for ( int i = types . size ( ) - 1 ; i >= 0 ; i -- ) { Type rval = types . get ( i ) . get ( id ) ; if ( rval != null ) { return rval ; } } return null ; }
tr	9	@ Override public boolean equals ( Object o ) { if ( this == o ) return true ; if ( o == null || getClass ( ) != o . getClass ( ) ) return false ; TestClass testClass = ( TestClass ) o ; if ( x != testClass . x ) return false ; if ( y != testClass . y ) return false ; return true ; }
tr	7	@ Override public int compareTo ( Card o ) { if ( rank . getValue ( ) < o . rank . getValue ( ) ) { return - 1 ; } else if ( rank . getValue ( ) > o . rank . getValue ( ) ) { return 1 ; } return suit . getValue ( ) < o . suit . getValue ( ) ? - 1 : suit . getValue ( ) == o . suit . getValue ( ) ? 0 : 1 ; }
tr	7	public void completeOperator ( final Match op ) { putResult ( getResult ( op . getChildren ( ) . get ( 0 ) ) ) ; }
tr	3	public String getValue ( ) { return value ; }
tr	3	public InstanceList ( class < T > clazz ) { super ( ) ; this . clazz = clazz ; }
tr	1	public StonesLeftToken ( ) { }
tr	10	public void edit ( Frame frame ) { if ( frame . getKeyDuration ( ) < 0 ) { Animation parent = ( Animation ) frame . getParent ( ) ; frame . setKeyDuration ( parent . getDefaultKeyDuration ( ) * multiplier ) ; } frame . setKeyDuration ( frame . getKeyDuration ( ) * multiplier ) ; }
tr	8	public Rectangle union ( Rectangle rect ) { if ( rect == null || rect . isEmpty ( ) ) return this ; return union ( rect . x , rect . y , rect . width , rect . height ) ; }
tr	5	public void swap ( ArrayImpl list , int x , int y ) { }
tr	1	public OperacaoLog ( ) { }
tr	1	public boolean isVisible ( ) { return isVisible ; }
tr	2	public boolean isInErrorState ( ) { return errorState ; }
tr	2	@ AfterClass public static void tearDownClass ( ) { }
tr	9	private void viewtweetsBtn2ActionPerformed ( java . awt . event . ActionEvent evt ) { viewTweets vt = new viewTweets ( ) ; vt . setVisible ( true ) ; }
tr	3	public BigRational ( ) { this ( BigDecimal . ZERO ) ; }
tr	10	public void dessine ( Graphics g , int x , int y , int taille ) { g . setColor ( couleur ) ; int t = taille / 2 ; g . drawRect ( x - t , y - t , taille , taille ) ; }
tr	6	public ProjectAccess ( int id , Group group , String access ) { this . id = id ; this . group = group ; this . access = access ; }
tr	3	public ToolsJP getToolsJP ( ) { return toolsJP ; }
tr	1	public ParserIllegalPlayerNameException ( ) { }
tr	8	public static LocalDate createDate ( int dayOfMonth , int monthOfYear , int year ) { return new LocalDate ( ) . withDayOfMonth ( dayOfMonth ) . withMonthOfYear ( monthOfYear ) . withYear ( year ) ; }
tr	7	public void addLinearRing ( LinearRing value ) { if ( this . geometry != null ) { markDeletedNode ( this . geometry ) ; } this . geometry = value ; if ( value != null ) { value . setParent ( this ) ; markCreatedNode ( value ) ; } }
tr	3	public FunctionalRequirement ( BigDecimal idFunctionalRequirement ) { this . idFunctionalRequirement = idFunctionalRequirement ; }
tr	6	public static String asString ( final double [ ] data , final String delimiter , final int decimals ) { return asString ( data , delimiter , 0 , 1 , data . length , decimals ) ; }
tr	6	static String stripLeadingHyphens ( String str ) { if ( str == null ) { return null ; } if ( str . startsWith ( "--" ) ) { return str . substring ( 2 , str . length ( ) ) ; } else if ( str . startsWith ( "-" ) ) { return str . substring ( 1 , str . length ( ) ) ; } return str ; }
tr	4	@ Override public String toString ( ) { return name ; }
tr	9	@ Override public String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( "OAuth 2.0 Error: " ) ; sb . append ( type . toString ( ) ) ; if ( description != null ) { sb . append ( " - " ) ; sb . append ( description ) ; } if ( uri != null ) { sb . append ( "\n" ) ; sb . append ( uri ) ; } return sb . toString ( ) ; }
tr	8	public Columnar ( ) { Random random_gen = new Random ( ) ; period = 1 + random_gen . nextInt ( 14 ) ; key = Generic_Func . generate_random_perm ( 1 , period + 1 ) ; }
tr	2	public long getTotal ( ) { return total ; }
tr	4	public static String upperize ( String s ) { return s . toUpperCase ( ) ; }
tr	10	public void createAuthRealm ( String realmname , String classname , Properties properties ) throws CommandException { new CreateAuthRealmCommand ( environment , realmname , classname , properties ) . execute ( ) ; }
tr	7	public void updateValues ( ) { speed += acceleration ; speed *= dampingFactor ; iconCoordinateY += speed ; if ( iconCoordinateY < 0 ) { speed = - speed ; } if ( ( getHeight ( ) - icon . getHeight ( null ) ) < iconCoordinateY ) { speed = - speed ; } }
tr	5	protected ASTNode maybeWrapInTerm ( ASTNode node ) { if ( node . getNodeCount ( ) == 1 ) { return node ; } return new TermNode ( node ) ; }
tr	10	public static void main ( String [ ] args ) { int [ ] array = { 1 , 3 , 2 , 9 , 12 , 5 , 4 } ; mergeSort ( array ) ; System . out . println ( Arrays . toString ( array ) ) ; }
tr	3	public final String getNombre ( ) { return nombre ; }
tr	10	private void addDevice ( INDIDevice device ) { devices . add ( device ) ; clients . add ( device ) ; device . startReading ( ) ; String message = "<getProperties version=\"1.7\" />" ; device . sendXMLMessage ( message ) ; }
tr	7	public void setProxyActive ( boolean proxyActive ) throws Exception { this . proxyActive = proxyActive ; if ( proxyActive ) { if ( proxyAddress == null || proxyPort == null ) throw new Exception ( "Proxy settings are not ok!" ) ; System . setProperty ( "http.proxySet" , "true" ) ; System . setProperty ( "http.proxyHost" , proxyAddress ) ; System . setProperty ( "http.proxyPort" , proxyPort ) ; System . setProperty ( "https.proxySet" , "true" ) ; System . setProperty ( "https.proxyHost" , proxyAddress ) ; System . setProperty ( "https.proxyPort" , proxyPort ) ; } else { System . setProperty ( "http.proxySet" , "false" ) ; System . setProperty ( "http.proxyHost" , "" ) ; System . setProperty ( "http.proxyPort" , "" ) ; System . setProperty ( "https.proxySet" , "false" ) ; System . setProperty ( "https.proxyHost" , "" ) ; System . setProperty ( "https.proxyPort" , "" ) ; } }
tr	5	public void addCritere ( Critere c ) { criteres . add ( c ) ; }
tr	6	protected AssignmentHandler ( XMLReader reader ) { super ( ) ; this . reader = reader ; this . questions = new ArrayList < Question > ( 0 ) ; }
tr	3	public Player getP2 ( ) { return p2 ; }
tr	7	public static JSONArray toJSONArray ( JSONArray names , String string ) throws JSONException { return toJSONArray ( names , new JSONTokener ( string ) ) ; }
tr	7	@ Override public void handleDiscardPhaseCompleted ( Player winningPlayer ) { for ( GameHandler gh : gameHandlers ) { gh . handleDiscardPhaseCompleted ( winningPlayer ) ; } }
tr	5	@ Override public void mouseDragged ( MouseEvent e ) { pintar ( e ) ; }
tr	5	public GrainBillTM ( ) { myData = new ArrayList < FermentableAdditionType . Addition > ( ) ; }
tr	7	@ Override public String toString ( ) { if ( 0 == tableClass ) { return getPart ( ) . name ( ) + " ID: " + id + " DC table" ; } return getPart ( ) . name ( ) + " ID: " + id + " AC table" ; }
tr	5	@ Override public void removeUpdate ( DocumentEvent e ) { checkText ( e ) ; }
tr	4	public void main ( ) { System . out . println ( "usted ingreso a ErrorHandler" ) ; }
tr	8	@ Override public int hashCode ( ) { int result = this . x ; result = 1000003 * result + this . y ; result = 1000003 * result + this . position ; result = 1000003 * result + this . robotNumber ; result = 1000003 * result + this . shape ; return result ; }
tr	1	public int get_key_num ( ) { return 1 ; }
tr	7	public DefaultAreaTree ( AreaTree src ) { page = src . getPage ( ) ; root = src . getRoot ( ) ; }
tr	6	@ Override public final Impl slice ( int start ) { return slice ( start , Integer . MAX_VALUE ) ; }
tr	4	@ Autowired public SessionService ( SessionRepository sessions ) { this . sessions = sessions ; }
tr	10	@ Test ( expected = TypeException . class ) public void structValue_MismatchFieldSize ( ) throws RecognitionException , IOException { addStructProgetto ( textLines ) ; textLines . add ( "p = struct progetto{999  true  struct data {false}}" ) ; testTypeChecking ( ) ; }
tr	8	@ XmlElementDecl ( namespace = "http://resource.faturamento.soa32/" , name = "deleteAll" ) public JAXBElement < DeleteAll > createDeleteAll ( DeleteAll value ) { return new JAXBElement < DeleteAll > ( _DeleteAll_QNAME , DeleteAll . class , null , value ) ; }
tr	6	private static void print ( String str ) { System . out . println ( str ) ; }
tr	10	public CheckStatusPanel ( JFrame frame , QueryDefinition query ) throws Exception { super ( frame , query , new CheckStatus ( query . getDocument ( ) ) ) ; this . getRequest ( ) . notifyChange ( ) ; }
tr	9	protected void printIndent ( String msg ) { for ( int i = 0 ; i < indent ; i ++ ) System . out . print ( "   " ) ; System . out . println ( msg ) ; }
tr	9	RSApplet ( ) { delayTime = 20 ; minDelay = 1 ; aLongArray7 = new long [ 10 ] ; shouldDebug = false ; shouldClearScreen = true ; awtFocus = true ; keyArray = new int [ 128 ] ; charQueue = new int [ 128 ] ; }
tr	8	protected void addComponents ( ) { myMenuBar = new MenuBarView ( this ) ; myTabbedPane = new JTabbedPane ( ) ; setJMenuBar ( myMenuBar ) ; EasyGridFactory . layoutHorizontal ( this , myTabbedPane ) ; }
tr	9	@ Override public boolean closeAccount ( String number ) throws IOException { String result = driver . sendCommand ( "closeAccount" , number ) ; return result . equals ( "success" ) ; }
tr	10	public static void quadRectOutset ( Rect rect , double border , RGB fill , boolean inset ) { quadCoordOutset ( rect . getMin ( ) , rect . getMax ( ) , border , fill , inset ) ; }
tr	2	public boolean getTemValor ( ) { return this . temValor ; }
tr	9	public ParkingSession ( int newSpot , String newusername ) { spot = newSpot ; starttime = Calendar . getInstance ( ) ; user = newusername ; }
tr	5	public void set ( int x , int y ) { grid [ maxx * y + x ] = 1 ; }
tr	4	public IRI ( String iri ) { super ( ) ; put ( "type" , "IRI" ) ; put ( "value" , iri ) ; }
tr	2	public GetAllSatellitesResponse createGetAllSatellitesResponse ( ) { return new GetAllSatellitesResponse ( ) ; }
tr	3	public String getDescription ( ) { return description ; }
tr	8	@ Test public void null_intersected_with_null_should_be_null ( ) { DoubleLinkedList first = null ; DoubleLinkedList second = null ; assertEquals ( null , DoubleLinkedListUtils . intersection ( first , second ) ) ; }
tr	9	private String marshal ( final Object origin ) throws IOException { try ( final StringWriter out = new StringWriter ( ) ) { JAXB . marshal ( origin , out ) ; return out . toString ( ) ; } }
tr	5	public static void main ( String [ ] args ) { D d = new D ( ) ; d . main ( args [ 0 ] ) ; }
tr	3	public String getStr ( ) { return str ; }
tr	5	@ Override public int compareTo ( Node o ) { return this . cnt - o . cnt ; }
tr	3	public Device getDevice ( ) { return dev ; }
tr	2	public void setDrawSegmentBufferP ( boolean drawSegmentBufferP ) { this . drawSegmentBufferP = drawSegmentBufferP ; }
tr	7	public static WorldGenLayerZoom zoom ( long seed , WorldGenLayer genLayer , int amount ) { for ( int i = 0 ; i < amount ; ++ i ) { genLayer = new WorldGenLayerZoom ( seed + ( long ) i , genLayer ) ; } return ( WorldGenLayerZoom ) genLayer ; }
tr	1	private boolean export ( ) { return export ( false ) ; }
tr	7	public void randomizeColor ( ) { Random random = new Random ( ) ; colorRed = random . nextFloat ( ) ; colorGreen = random . nextFloat ( ) ; colorBlue = random . nextFloat ( ) ; }
tr	3	private boolean r_R1 ( ) { if ( ! ( I_p1 <= cursor ) ) { return false ; } return true ; }
tr	6	public List < Association > getOneToOne ( ) { return getAssociations ( Association . Multiplicity . OneToOne ) ; }
tr	10	public HeapIterator ( ) { copy = new IndexMinPQ < Key > ( pq . length - 1 ) ; for ( int i = 1 ; i <= N ; i ++ ) copy . insert ( pq [ i ] , keys [ pq [ i ] ] ) ; }
tr	8	public Item useItem ( ) { if ( objectType [ selectedItem ] . isPlacable ( ) ) { if ( objectNumber [ selectedItem ] >= 1 ) { objectNumber [ selectedItem ] -- ; if ( objectNumber [ selectedItem ] == 0 ) { Item tmp = objectType [ selectedItem ] ; objectType [ selectedItem ] = noItem ; return tmp ; } } return objectType [ selectedItem ] ; } return noItem ; }
tr	9	private Token require ( Token . Kind kind ) throws RequiredTokenException { if ( reader . kind ( ) . equals ( kind ) ) { Token token = reader . token ( ) ; reader . advance ( ) ; return token ; } else throw new RequiredTokenException ( kind , reader . token ( ) ) ; }
tr	9	public int take ( int index ) { if ( register . get ( index ) ) { lastappend . remove ( index ) ; stack . add ( index ) ; } lastappend . add ( index ) ; register . set ( index , true ) ; return index ; }
tr	10	private String getStringOfSeparatedTokens ( ) { StringBuilder result = new StringBuilder ( ) ; for ( Token t : tokens ) { result . append ( t . toString ( ) ) ; result . append ( TOKEN_DELIMITER ) ; } return result . toString ( ) ; }
tr	7	public StringBuilder display ( StringBuilder currentCode , CrossRef table ) { return currentCode . append ( pdfShortHeader ( ) ) . append ( "[ /PDF /Text ]\nendobj\n" ) ; }
tr	5	public void run ( ) { txtComponent . select ( pos , pos2 ) ; }
tr	3	protected void disableAuthorizationHeader ( ) { requestHeaders . remove ( "Authorization" ) ; }
tr	9	public void testgeneroiNegNeg1 ( ) { Alilausegeneroija A = new Alilausegeneroija ( "not a and not b" ) ; Propositiotaulu taulu = new Propositiotaulu ( ) ; asetaTotuudetAB ( 0 , 0 , taulu ) ; assertEquals ( true , A . generoi ( taulu ) . totuus ( ) ) ; }
tr	5	public static void main ( String [ ] args ) { C c = new C ( ) ; c . main ( args [ 0 ] ) ; }
tr	4	@ Override public synchronized void removeNotify ( ) { this . applet . shutdown ( ) ; super . removeNotify ( ) ; }
tr	3	public Dimension getSize ( ) { return this . size ; }
tr	4	public static void main ( String [ ] arg ) throws Exception { }
tr	9	private boolean r_tidy_up ( ) { int among_var ; ket = cursor ; among_var = find_among_b ( a_7 , 4 ) ; if ( among_var == 0 ) { return false ; } bra = cursor ; switch ( among_var ) { case 0 : return false ; case 1 : slice_del ( ) ; ket = cursor ; if ( ! ( eq_s_b ( 1 , "\u043D" ) ) ) { return false ; } bra = cursor ; if ( ! ( eq_s_b ( 1 , "\u043D" ) ) ) { return false ; } slice_del ( ) ; break ; case 2 : if ( ! ( eq_s_b ( 1 , "\u043D" ) ) ) { return false ; } slice_del ( ) ; break ; case 3 : slice_del ( ) ; break ; } return true ; }
tr	8	@ Test public void testText ( ) throws TemplateException { Text text = new Text ( "hello mister" , new Cursor ( "-:l1:c1" ) ) ; assertEquals ( "hello mister" , text . writeObject ( null , null , null ) ) ; }
tr	6	public Node findNode ( Object [ ] subs ) { return findNodeByKey ( generateKey ( subs ) ) ; }
tr	7	public void update ( Graphics g ) { for ( StatPanel panel : panels ) panel . paint ( g ) ; }
tr	4	public static String readLine ( String prompt ) { printPrompt ( prompt ) ; return readLine ( ) ; }
tr	5	public Dimension getPreferredSize ( ) { return new Dimension ( keyboardW , keyH + 2 * margin ) ; }
tr	9	public final int getColumnCount ( ) { final String methodName = "getColumnCount" ; GUILogger . entering ( CLASS_NAME , methodName ) ; GUILogger . exiting ( CLASS_NAME , methodName , COLUMN_NAME . length ) ; return COLUMN_NAME . length ; }
tr	8	@ Test ( timeout = TIMEOUT ) public void test_size_after_adding_unique_nums ( ) { int [ ] testArray = { 0 , 1 , 2 , 3 , 4 } ; addAndTestSize ( "Added " + Arrays . toString ( testArray ) , testArray , 5 ) ; }
tr	6	public static SitemapImage createSitemapImage ( String loc ) { assert loc != null ; SitemapImage image = new MySitemapImage ( loc , null , null , null , null ) ; assert image != null ; return image ; }
tr	1	public void playerFire ( ) { }
tr	7	public Station ( int x , int y ) { this . pos . x = x ; this . pos . y = y ; this . color = Color . BLACK ; }
tr	10	@ Override public boolean equals ( Object o ) { if ( o == this ) return true ; if ( o == null || ! ( o instanceof TIPPTool ) ) return false ; TIPPTool t = ( TIPPTool ) o ; return Objects . equals ( name , t . name ) && Objects . equals ( id , t . id ) && Objects . equals ( version , t . version ) ; }
tr	10	@ Override public void execute ( ) { MapLayers layers = map . getLayers ( ) ; index = layers . getIndex ( layer ) ; layers . removeLayer ( index ) ; }
tr	6	public RegisterMessage ( ClientID client , String username , String password ) { this . client = client ; this . username = username ; this . password = password ; }
tr	3	public Date getTungay ( ) { return this . tungay ; }
tr	6	public UserWapper ( List < User > users , long previousCursor , long nextCursor ) { this . users = users ; this . previousCursor = previousCursor ; this . nextCursor = nextCursor ; }
tr	6	public void hide ( ) { object . setHidden ( ) ; for ( ObjectController oc : controllers ) { oc . hide ( ) ; } }
tr	5	public static void notNull ( Object object , RuntimeException throwIfAssertFail ) { if ( object == null ) { throw throwIfAssertFail ; } }
tr	10	@ Override public void addColumn ( TableColumn column ) { if ( tableColumns . size ( ) == 3 ) { column . setCellRenderer ( renderer ) ; column . setCellEditor ( editor ) ; } super . addColumn ( column ) ; }
tr	7	private static void addParametrizedService ( String id , ParametrizedOperation op ) { parametrizedServices . put ( id , op ) ; }
tr	7	private void init ( ) { prevValueList = new ArrayList < double > ( ) ; pdf = new PrintDataFile ( VALUEITERATIONFOLDER ) ; pdf . delete_Files ( VALUEITERATIONFOLDER ) ; }
tr	5	@ Test public void testPostTemplate ( ) throws Exception { testTemplateContains ( "com/h3xstream/scriptgen/templates/php_curl.tpl" , "CURLOPT_POSTFIELDS" , reqPost ) ; }
tr	10	public String readString ( ) { StringBuilder buffer = new StringBuilder ( ) ; int read ; while ( ( read = readUnsignedByte ( ) ) !=  && super . available ( ) != 0 ) { buffer . append ( ( char ) read ) ; } return buffer . toString ( ) ; }
tr	7	private void show ( String prefix , String text ) { System . out . println ( prefix + text ) ; }
tr	5	public DataTicket ( FileChannel newChannel ) { this . finished = false ; this . channel = newChannel ; }
tr	4	private void setMinBreak ( Integer minBreak ) { this . minChangingTime = minBreak ; }
tr	4	public static final int setBit ( int data , int bit , boolean value ) { return value ? data | ( 01 << bit ) : ( data & ~ ( 01 << bit ) ) ; }
tr	2	public int getPreferedSize ( ) { return preferedsize ; }
tr	10	private void write ( Kim kim , int from , int thru , Huff huff ) throws JSONException { for ( int at = from ; at < thru ; at += 1 ) { write ( kim . get ( at ) , huff ) ; } }
tr	4	public StringParser ( String target ) { this ( target , CASE_SENSITIVE ) ; }
tr	4	public void removeChangeListener ( ChangeListener l ) { other . removeChangeListener ( l ) ; }
tr	10	public void cargarSelect ( ) { combo_comuna_reporte . removeAllItems ( ) ; combo_comuna_reporte . addItem ( "Seleccione" ) ; for ( int i = 0 ; i < getControlador ( ) . getListacomunas ( ) . size ( ) ; i ++ ) { combo_comuna_reporte . addItem ( getControlador ( ) . getListacomunas ( ) . get ( i ) . getCom_nombre ( ) ) ; } }
tr	9	@ Override public int getInt ( long i ) { if ( ptr != 0 ) { return ( int ) ( Utilities . UNSAFE . getByte ( ptr + i ) ) ; } else { if ( isConstant ( ) ) { return data [ 0 ] ; } else { return ( int ) data [ ( int ) i ] ; } } }
tr	8	public User showUser ( String screenName ) throws TBlogException { return new User ( http . get ( getBaseURL ( ) + "users/show/" + screenName + ".json" , true ) ) ; }
tr	5	public double max ( ) { if ( count ( ) == 0 ) return 0 ; double max = data . get ( 0 ) ; for ( double value : data ) if ( value > max ) max = value ; return max ; }
tr	2	public void reset ( ) { index = 0 ; }
tr	9	public void insertAtBack ( int element ) { DNode newNode = new DNode ( ) ; newNode . data = element ; DNode oldlast = TRAILER . prev ; newNode . next = TRAILER ; TRAILER . prev = newNode ; oldlast . next = newNode ; newNode . prev = oldlast ; }
tr	8	public Set < Pheromone > getPheromonesSupprimeesAt ( int tour ) { Set < Pheromone > supprimees = this . pheromonesSupprimees . get ( tour ) ; if ( supprimees == null ) { return new HashSet < Pheromone > ( ) ; } else { return supprimees ; } }
tr	7	public void pushMatrix ( ) { Matrix save = new Matrix ( 3 ) ; Matrix . copy ( toView , save ) ; matrixStack . push ( save ) ; }
tr	6	public DataSetXY ( double [ ] x , double [ ] y ) { dataX . set ( x ) ; dataY . set ( y ) ; }
tr	2	public void setProgress ( int progress ) { }
tr	3	public Integer getNewThreadsThreads ( ) { return newThreadsThreads ; }
tr	6	public int getRowCount ( ) { if ( datos == null ) System . out . println ( "Es nulo" ) ; return datos . size ( ) ; }
tr	2	public int getChestNum ( ) { return chestNum ; }
tr	6	protected double [ ] calculateOutputError ( double [ ] desiredOutput , double [ ] output ) { double [ ] outputError = new double [ desiredOutput . length ] ; for ( int i = 0 ; i < output . length ; i ++ ) outputError [ i ] = desiredOutput [ i ] - output [ i ] ; return outputError ; }
tr	8	@ Override public < S , T > T visit ( SMPLVisitor < S , T > visitor , S state ) { return visitor . visitBitAnd ( this , state ) ; }
tr	2	public boolean getModalResult ( ) { return modalResult ; }
tr	8	public static void printList ( final List < ? > list ) { for ( final Object i : list ) System . out . println ( i ) ; }
tr	2	public void setResponseCode ( int responseCode ) { this . responseCode = responseCode ; }
tr	3	public Expression getRight ( ) { return right ; }
tr	4	@ PostConstruct public void init ( ) { super . setFacade ( ejbFacade ) ; }
tr	2	public boolean isInitialized ( ) { return name != null ; }
tr	4	protected Page getPage ( ) { return linkedObjects . get ( 0 ) . getPage ( ) ; }
tr	7	public int numTimesLetterAppears ( ArrayList < Character > list , char c ) { int i = 0 ; for ( char each : list ) { if ( each == c ) { i ++ ; } } return i ; }
tr	7	public FileCache ( RandomAccessFile data , RandomAccessFile index , int storeId ) { this . storeId = storeId ; this . dataFile = data ; this . indexFile = index ; }
tr	8	public SimulatorView ( Simulator sim ) { super ( sim ) ; colors = new LinkedHashMap < class < ? > , Color > ( ) ; fieldView = new FieldView ( 100 , 100 ) ; }
tr	8	public List < List < String >> getLocations ( double latitude , double longitude , double radius_in_km ) throws Exception { return getLocations ( latitude . floatValue ( ) , longitude . floatValue ( ) , radius_in_km . floatValue ( ) ) ; }
tr	5	public Builder withAvailableGestures ( Gesture ... gestures ) { this . availableGestures = gestures ; return this ; }
tr	2	public Baconian ( ) { Init_map ( ) ; }
tr	4	public IntAdder ( JBlockingQueue < Integer > q ) { this . q = q ; }
tr	8	public String toString ( ) { String s = "{" ; for ( Location loc : getOccupiedLocations ( ) ) { if ( s . length ( ) > 1 ) s += "  " ; s += loc + "=" + get ( loc ) ; } return s + "}" ; }
tr	10	@ Override public void onUpdate ( Object updated ) { if ( lastMap != panel . getMap ( ) ) { lastMap = panel . getMap ( ) ; mapImg = null ; } makeImage ( ) ; repaint ( ) ; }
tr	1	public EntityType ( ) { this ( ( short ) 0 , ( short ) 0 , 0 , ( short ) 0 , ( short ) 0 , ( short ) 0 , ( short ) 0 ) ; }
tr	5	public Chara getMyDog ( ) { return _dogs . get ( _index ) ; }
tr	5	@ Override public Folder [ ] getPersonalNamespaces ( ) throws MessagingException { throw new UnsupportedOperationException ( ) ; }
tr	5	public void show ( ) { System . out . println ( this . toString ( ) ) ; }
tr	7	public static boolean checkBSTInOrderTraversal ( Node root ) { if ( root == null ) { return true ; } if ( ! checkBSTInOrderTraversal ( root . left ) ) { return false ; } if ( root . value < min ) { return false ; } min = root . value ; if ( ! checkBSTInOrderTraversal ( root . right ) ) { return false ; } return true ; }
tr	1	public CreateAccountRequest ( ) { }
tr	1	public double typeModifier ( ) { return 0 ; }
tr	7	@ Test public void reverseWithNull ( ) { try { instance . reverse ( null ) ; fail ( "Expected exception not thrown." ) ; } catch ( NullPointerException e ) { } }
tr	2	public int getY ( ) { return y ; }
tr	9	public boolean remove ( Object entry ) { if ( contains ( entry ) ) { SubMap . this . remove ( ( ( Entry < K , V > ) entry ) . getKey ( ) ) ; return true ; } else { return false ; } }
tr	3	public void setName ( String name ) { this . name = name ; }
tr	2	public double getValue ( ) { return value ; }
tr	2	public void testApp ( ) { assertTrue ( true ) ; }
tr	1	public XmlQuery ( ) { }
tr	5	public static String createJquery ( Chart < ? > chart , String divId ) { return createJquery ( chart , divId , null ) ; }
tr	9	public Page ( ) { super . setLayoutEngine ( pageLayoutEngine ) ; setRequestedBounds ( new Rectangle < Integer > ( 0 , 0 , Configuration . WINDOW_WIDTH , Configuration . WINDOW_HEIGTH ) ) ; }
tr	2	public int getBlackTime ( ) { return this . blackTime ; }
tr	2	public boolean isSchoolAnnouncements ( ) { return schoolAnnouncements ; }
tr	3	public Widget close ( ) { isOpen = false ; return this ; }
tr	6	@ Override public void actionPerformed ( ActionEvent e ) { myWindow . changePenColor ( ) ; }
tr	3	public GregCalPlus getStart ( ) { return start ; }
tr	2	public int getUserId ( ) { return userId ; }
tr	4	void setPaintScreen ( final PaintScreen p ) { paintScreen = p ; }
tr	5	public ConstrucaoTabuleiroException ( String mensagem , Exception causa ) { super ( mensagem , causa ) ; }
tr	3	public JTextField getTxtCombustivel ( ) { return txtCombustivel ; }
tr	10	public boolean ModificarIncidente ( String descripcion , int codigo ) { Incidente inci = new Incidente ( ) ; listaIncidentes . remove ( codigo ) ; inci . setInc_descripcionIncidente ( descripcion ) ; listaIncidentes . add ( inci ) ; return true ; }
tr	10	@ Override public void translate ( double x , double y , double z ) { for ( int i = 0 ; i < 4 ; i ++ ) for ( int j = 0 ; j < 4 ; j ++ ) temp . set ( j , i , 0 ) ; temp . set ( 0 , 0 , 1 ) ; temp . set ( 1 , 1 , 1 ) ; temp . set ( 2 , 2 , 1 ) ; temp . set ( 3 , 0 , x ) ; temp . set ( 3 , 1 , y ) ; temp . set ( 3 , 2 , z ) ; temp . set ( 3 , 3 , 1 ) ; this . rightMultiply ( temp ) ; }
tr	8	public boolean executeQueryUpdateBean ( Object bean , Map < String , ? > values ) throws Exception { setMap ( values ) ; return executeQueryUpdateBean ( bean ) ; }
tr	10	@ Test public void breadthFirstEmpty ( ) { final Iterable < String > traverser = Traversals . breadthFirst ( "A" , adjacencyFor ( empty ) ) ; assertTraversalContains ( traverser , "A" ) ; }
tr	5	@ Override public void fileAdded ( FileAddedEvent event ) throws InterruptedException { }
tr	1	public GruppeErstellenView ( ) { }
tr	5	public Map < Integer , DFAState > getTransition ( ) { return this . transition ; }
tr	2	public boolean isGraphicsRunning ( ) { return graphicsRunning ; }
tr	5	public NotebookDayButton setDate ( Date date ) { this . associatedDate = date ; return this ; }
tr	4	public List < Note > getNotes ( ) { return notes ; }
tr	10	public Kim ( byte [ ] bytes , int from , int thru ) { int sum = 1 ; int value ; this . hashcode = 0 ; this . length = thru - from ; if ( this . length > 0 ) { this . bytes = new byte [ this . length ] ; for ( int at = 0 ; at < this . length ; at += 1 ) { value = ( int ) bytes [ at + from ] & FF ; sum += value ; this . hashcode += sum ; this . bytes [ at ] = ( byte ) value ; } this . hashcode += sum << 16 ; } }
tr	2	public int getIxBugEventLatestText ( ) { return ixBugEventLatestText ; }
tr	8	@ Override public void actionPerformed ( ActionEvent arg0 ) { this . vp . habilitarTodos ( ) ; this . vp . cambiarTipoDeDisparo ( 5 ) ; this . vp . deshabilitarbotonMinaSubConRetAlcTriple ( ) ; }
tr	3	public void setTarget ( String target ) { this . target = target ; }
tr	8	static double grad ( int hash , double x , double y , double z ) { int h = hash & 15 ; double u = h < 8 || h == 12 || h == 13 ? x : y , v = h < 4 || h == 12 || h == 13 ? y : z ; return ( ( h & 1 ) == 0 ? u : - u ) + ( ( h & 2 ) == 0 ? v : - v ) ; }
tr	3	public String getL3DiscntAmt ( ) { return l3DiscntAmt ; }
tr	5	public void addInt ( int a ) { size ++ ; info . add ( a ) ; }
tr	10	public Node getNode ( String infoNode ) { for ( int i = 0 ; i < nodes . size ( ) ; i ++ ) { if ( nodes . get ( i ) . getInfo ( ) . equals ( infoNode ) ) return nodes . get ( i ) ; } return null ; }
tr	6	private StaffDAOImpl ( ) { serializeDB = SerializeDB . getInstance ( ) ; staffList = serializeDB . getStaffs ( ) ; }
tr	7	public void sortColors ( int [ ] A ) { int index0 = 0 , index1 = 0 , index2 = 0 ; for ( int i = 0 ; i < A . length ; i ++ ) { if ( A [ i ] == 0 ) { A [ index2 ] = 2 ; index2 ++ ; A [ index1 ] = 1 ; index1 ++ ; A [ index0 ] = 0 ; index0 ++ ; } else if ( A [ i ] == 1 ) { A [ index2 ] = 2 ; index2 ++ ; A [ index1 ] = 1 ; index1 ++ ; } else if ( A [ i ] == 2 ) { A [ index2 ] = 2 ; index2 ++ ; } } }
tr	2	public void showOpenDialog ( ) { desktop . showOpenDialog ( ) ; }
tr	9	public static MCMSDIType fromValue ( String v ) { for ( MCMSDIType c : MCMSDIType . values ( ) ) { if ( c . value . equals ( v ) ) { return c ; } } throw new IllegalArgumentException ( v ) ; }
tr	7	public ArrayList < Conversation > getConversationsUtilisateurAbsent ( String login ) throws RemoteException { return getServeur ( ) . getConversationsUtilisateurAbsent ( login ) ; }
tr	10	public static void loadConfig ( StreamLoader streamLoader ) { Stream stream = new Stream ( streamLoader . getDataForName ( "fragmentsenc.txt" ) ) ; Stream stream_1 = new Stream ( streamLoader . getDataForName ( "badenc.txt" ) ) ; Stream stream_2 = new Stream ( streamLoader . getDataForName ( "domainenc.txt" ) ) ; Stream stream_3 = new Stream ( streamLoader . getDataForName ( "tldlist.txt" ) ) ; readValues ( stream , stream_1 , stream_2 , stream_3 ) ; }
tr	9	@ Test public void testValidateDoubleWithPlusSign ( ) { Object obj = "+49.99" ; boolean actual = mFnc . $isvalidnum ( obj ) ; boolean expected = true ; assertEquals ( "Fail to validate string. This is not a valid number." , expected , actual ) ; }
tr	2	public SEmail2 createSEmail2 ( ) { return new SEmail2 ( ) ; }
tr	9	private void drawRightLine ( int row , int col ) { int boxX = cellSize + col * cellSize ; int boxY = cellSize + row * cellSize ; int startY = boxY - cellSize ; output . drawLine ( boxX , startY , boxX , boxY ) ; }
tr	9	@ Test public void ShouldGetRatioOfPrimesInDiagonalsAtLevel1 ( ) { int level = 1 ; double expected = .6 ; SpiralDiagonalHelper helper = new SpiralDiagonalHelper ( ) ; double result = helper . GetDiagonalPrimeRatiosAtLevel ( level ) ; assert . assertEquals ( expected , result ) ; }
tr	4	public final String getUserName ( ) { return bukkitPlayer . getName ( ) ; }
tr	7	@ Test ( expected = IllegalArgumentException . class ) public void testBuilderWithInvalidAddressAndPrefixLength ( ) { Ipv6Range . from ( "::3" ) . andPrefixLength ( 127 ) ; }
tr	6	public IesDigitalClient ( MyDatabase mysql , MyDatabase sgd , ICoreData coredata ) { this . mysql = mysql ; this . sgd = sgd ; this . coredata = coredata ; }
tr	8	@ Test public void testAddMonster ( ) { Monster ghost = new Monster ( "ghost" , 60 , 10 , 10 , 10 , 10 ) ; northRoom . addMonster ( ghost ) ; assertEquals ( "ghost added to the northRoom" , ghost , northRoom . getMonster ( "ghost" ) ) ; }
tr	6	public Widget ( Point pos , Dimension size ) { init ( pos , size ) ; }
tr	9	public int get_int ( String table , int id , String field_name ) { select ( field_name , table , table + "_id = " + id , "" ) ; if ( move_first ( ) ) return ( Integer ) get_field ( field_name ) ; else return 0 ; }
tr	3	public MultipleNetwork ( BasicNetwork n ) { super ( n ) ; }
tr	3	public void setDirname ( String dirname ) { this . dirname = dirname ; }
tr	7	@ Override public void init ( Headquater hq ) { super . init ( hq ) ; sp = InsightShortestPath . require ( hq ) ; }
tr	5	public void addModelInput ( ModelInput model ) { modelInputs . add ( model ) ; }
tr	3	public String getVersion ( ) { return version ; }
tr	1	public Turn ( ) { }
tr	3	public void setTxtPot ( JTextField txtPot ) { this . txtPot = txtPot ; }
tr	8	public int delete ( int id ) { String SQL1 = "DELETE FROM sig_reserves where id=" + id ; int nup = client . getMysql ( ) . executeUpdate ( SQL1 ) ; return nup ; }
tr	10	private void push ( JSONObject jo ) throws JSONException { if ( this . top >= maxdepth ) { throw new JSONException ( "Nesting too deep." ) ; } this . stack [ this . top ] = jo ; this . mode = jo == null ? a : k ; this . top += 1 ; }
tr	4	public static Descansar escenarioParaDescansar ( Unidad unidad ) { return new Descansar ( unidad ) ; }
tr	9	private String getInstantCorrectQuestion ( ) { String inst = "<h1>Fill-in-the-Blank Question</h1><br> Enter the correct word to complete the sentence in the text area below. " ; String pnts = "This question is worth " + pointValue + " points." ; String text = "<br><br>" + body ; String ans = "<br><br><form action=\"InstantCorrectAnswerServlet\" method=\"post\">Enter word to fill in the blank: <input name=\"answer\">" ; String submit = "<br><input type=\"submit\" value=\"Submit answer\"></form>" ; return ( inst + pnts + text + ans + submit ) ; }
tr	9	@ Override protected boolean isConsumed ( KeyboardEvent e ) { boolean rc = false ; if ( e . getKey ( ) == Keyboard . KEY_UP || e . getKey ( ) == Keyboard . KEY_DOWN ) { rc = true ; } return rc ; }
tr	5	public List < Match > getMatch ( ) { if ( match == null ) { match = new ArrayList < Match > ( ) ; } return this . match ; }
tr	9	public String toString ( ) { StringBuilder out = new StringBuilder ( ) ; for ( ArrayPlace arrayPlace : arrayPlaces ) out . append ( arrayPlace ) . append ( "=" ) ; out . append ( expression ) ; return out . toString ( ) ; }
tr	10	@ Override protected MicroBlock newMicroBlock ( Position block_position , int h ) throws InternalErrorException { return new YMicroBlock ( qnm , basis , block_position , h ) ; }
tr	10	@ Test public void clear ( ) { ListenableConcurrentMap < String , long > map = new ListenableConcurrentHashMap < > ( "myMap" ) ; String key = "12" ; assert . assertEquals ( 0 , map . size ( ) ) ; map . putSingleValue ( key , 1 ) ; map . putSingleValue ( key , 2 ) ; assert . assertEquals ( 1 , map . size ( ) ) ; map . putSingleValue ( "3" , 3 ) ; assert . assertEquals ( 2 , map . size ( ) ) ; map . clear ( ) ; assert . assertEquals ( 0 , map . size ( ) ) ; }
tr	6	@ SuppressWarnings ( "unused" ) protected void endElementOwn ( String uri , String localName , String qName ) { }
tr	8	public static void display ( int [ ] array , int arraySize ) { for ( int element : array ) { System . out . print ( element + " " ) ; } System . out . println ( "" ) ; }
tr	6	public ScreenLocationAssignmentStmt ( Token lhsIdent , Expr xScreenExpr , Expr yScreenExpr ) { super ( ) ; this . lhsIdent = lhsIdent ; this . xScreenExpr = xScreenExpr ; this . yScreenExpr = yScreenExpr ; }
tr	3	public RowMapperClobFieldConfigBuilder field ( Field field ) { this . field = field ; return this ; }
tr	8	private void cancelButtonActionPerformed ( java . awt . event . ActionEvent evt ) { viewController . tanca ( ) ; }
tr	8	public void executar ( AmbienteExecucao ambiente ) { try { comando . executar ( ambiente ) ; } catch ( IdentificadorJaDeclaradoException | IdentificadorNaoDeclaradoException e ) { e . printStackTrace ( ) ; } }
tr	9	public JSONArray names ( ) { JSONArray ja = new JSONArray ( ) ; Iterator keys = keys ( ) ; while ( keys . hasNext ( ) ) { ja . put ( keys . next ( ) ) ; } return ja . length ( ) == 0 ? null : ja ; }
tr	1	public TBlock_Z ( ) { super ( ) ; }
tr	2	public void setDiagId ( int diagId ) { this . diagId = diagId ; }
tr	3	public String getDescription ( ) { return description ; }
tr	3	public JSONObject ( ) { this . map = new HashMap ( ) ; }
tr	2	public void setPages ( int pages ) { this . pages = pages ; }
tr	7	public boolean equals ( Object o ) { if ( ! ( o instanceof RecordDescr ) ) return false ; RecordDescr d = ( RecordDescr ) o ; return this . recSymbolTable . equals ( d . fields ( ) ) ; }
tr	4	public static byte [ ] fullyZoomOut ( ) { byte [ ] message = { ClientMessageTable . getValue ( ClientMessageTable . fullyZoomOut ) } ; return message ; }
tr	5	public static StrategyCoward require ( Personality ps ) { return ( StrategyCoward ) ps . requireStrategy ( new StrategyCoward ( ) ) ; }
tr	4	public static int getStats ( ) { if ( found == 0 || all == 0 ) return 0 ; int stats = ( int ) ( ( 100 * found ) / all ) ; return stats ; }
tr	3	public SpriteV2 getPlayer ( ) { return player ; }
tr	3	public void setNameUser ( String nombreuser ) { this . nombreuser = nombreuser ; }
tr	6	@ Override public void buildMessage ( String string ) { clientName = string . substring ( 5 ) ; }
tr	3	public BigDecimal getMinimum ( ) { return minimum ; }
tr	3	public PhonebookSortOption getSortBy ( ) { return sortBy ; }
tr	5	public Collection < Player > getPlayers ( ) { return this . playerMap . values ( ) ; }
tr	9	@ Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ) ; setBounds ( getCenter ( ) - WIDTH / 2 , OFFSET_Y , WIDTH , HEIGHT ) ; }
tr	6	protected void fireChangeEvent ( ) { for ( ChangeListener l : getChangeListeners ( ) ) { l . stateChanged ( changeEvent ) ; } }
tr	4	@ Override public String toString ( ) { return "HostRef [hostId=" + hostId + "]" ; }
tr	9	public static final < T extends Node < T >> void checkSameGraphs ( final Graph < T > g1 , final Graph < T > g2 ) { if ( g1 . getName ( ) . equals ( g2 . getName ( ) ) == false ) { throw new IllegalStateException ( "The two graphs are not same." ) ; } }
tr	5	public static boolean isBitMarked ( byte bitmask , int number ) { if ( number < 2 || number > 9 ) { return false ; } else { boolean returnvalue = ( BITMAP [ number - 2 ] & bitmask ) == BITMAP [ number - 2 ] ; return returnvalue ; } }
tr	9	private byte [ ] toBytes ( int v , int length ) { assert length % 4 == 0 ; assert length > 0 ; byte [ ] result = new byte [ length ] ; result [ 0 ] = ( byte ) ( v & FF ) ; result [ 1 ] = ( byte ) ( v >>> 8 & FF ) ; result [ 2 ] = ( byte ) ( v >>> 16 & FF ) ; result [ 3 ] = ( byte ) ( v >>> 24 & FF ) ; for ( int i = 4 ; i < length ; ) { int copyLength = i <= length / 2 ? i : length - i ; System . arraycopy ( result , 0 , result , i , copyLength ) ; i += copyLength ; } return result ; }
tr	7	protected void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { }
tr	3	public static String dataBasePassword ( ) { return lePropriedade ( "Database.Password" ) ; }
tr	3	public Entries ( IntMap map ) { super ( map ) ; }
tr	1	public void hallo ( ) { }
tr	9	public DescribeInstanceTypesResult withInstanceTypes ( Collection < InstanceType > instanceTypes ) { if ( instanceTypes == null ) { this . instanceTypes = null ; } else { ListWithAutoConstructFlag < InstanceType > instanceTypesCopy = new ListWithAutoConstructFlag < > ( instanceTypes . size ( ) ) ; instanceTypesCopy . addAll ( instanceTypes ) ; this . instanceTypes = instanceTypesCopy ; } return this ; }
tr	2	public boolean getShowTotalPayoff ( ) { return showTotalPayoff ; }
tr	3	public JPasswordField getPassword ( ) { return password ; }
tr	10	private boolean isConvex ( Point p1 , Point p2 , Point p3 ) { Point v = new Point ( p2 . x - p1 . x , p2 . y - p1 . y ) ; int res = p3 . x * v . y - p3 . y * v . x + v . x * p1 . y - v . y * p1 . x ; return ! ( ( res > 0 && isCw ) || ( res <= 0 && ! isCw ) ) ; }
tr	4	@ Override public void reset ( ) { readingState = false ; this . currentFrame = null ; }
tr	10	@ Override public void mouseEntered ( MouseEvent e ) { ( ( JPanel ) e . getSource ( ) ) . setBorder ( new LineBorder ( Color . BLUE ) ) ; }
tr	8	public void addPlayer ( ) { Vector2 pos = new Vector2 ( 300 , 300 ) ; this . player = new Player ( pos , textureRegions . get ( "player" ) ) ; addActor ( player ) ; }
tr	5	@ Before public void setup ( ) throws Exception { easyDI = new EasyDI ( ) ; }
tr	10	@ Override public void act ( ) { int y = getY ( ) ; if ( moveTop ) { y = y - steps ; if ( y < MIN_Y ) { moveTop = false ; } } else { y = y + steps ; if ( y > MAX_Y ) { moveTop = true ; } } setLocation ( getX ( ) , y ) ; }
tr	10	boolean sameValue ( DNSRecord other ) { Service s = ( Service ) other ; return ( priority == s . priority ) && ( weight == s . weight ) && ( port == s . port ) && server . equals ( s . server ) ; }
tr	3	public Player getP1 ( ) { return p1 ; }
tr	4	public List < Severity > getSeverities ( ) { return severities ; }
tr	7	Identifier identifier ( String name , String position ) throws TemplateException { return new Identifier ( name , new Cursor ( position ) ) ; }
tr	10	@ Test public void calculateLocals_WhileBlock ( ) throws RecognitionException , IOException , ShellException , InterruptedException { textLines . add ( "i = true" ) ; textLines . add ( "while(i){" ) ; textLines . add ( "echo i" ) ; textLines . add ( "i = false" ) ; textLines . add ( "}" ) ; testCodeGeneration ( ) ; assert . assertTrue ( true ) ; }
tr	3	public void onNewSong ( Line line ) { }
tr	4	public BTPos ( E elt , int i ) { this ( elt , i , - 1 , - 1 , - 1 ) ; }
tr	4	public void setMappings ( List < Mapping > mappings ) { this . mappings = mappings ; }
tr	9	public BaiduBCSResponse < String > handle ( BCSHttpResponse paramBCSHttpResponse ) { BaiduBCSResponse localBaiduBCSResponse = parseResponseMetadata ( paramBCSHttpResponse ) ; localBaiduBCSResponse . setResult ( getResponseContentByStr ( paramBCSHttpResponse ) ) ; return localBaiduBCSResponse ; }
tr	3	@ Override public String getId ( ) { return null ; }
tr	1	public LabeledItem ( ) { }
tr	4	@ Override public String typeCheck ( ) { return firstBody . typeCheck ( ) ; }
tr	1	public Quaternion ( ) { super ( 0 , 0 , 0 , 1 ) ; }
tr	10	public void wear ( Armor arm ) { if ( armor != null ) { inventory . add ( armor ) ; System . out . println ( "Put away " + armor . toString ( ) + "." ) ; } armor = arm ; System . out . println ( "Equipped " + armor . toString ( ) + "." ) ; }
tr	10	public void sendHeader ( int type , int length ) { byte [ ] bytes = new byte [ ] { ( byte ) ( type >>> 24 ) , ( byte ) ( type >>> 16 ) , ( byte ) ( type >>> 8 ) , ( byte ) ( type >>> 0 ) , ( byte ) ( length >>> 24 ) , ( byte ) ( length >>> 16 ) , ( byte ) ( length >>> 8 ) , ( byte ) ( length >>> 0 ) } ; try { dos . write ( bytes ) ; dos . flush ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }
tr	7	public void processEvent ( AWTEvent e ) { if ( e . getID ( ) == Event . WINDOW_DESTROY ) { dispose ( ) ; } else { super . processEvent ( e ) ; } }
tr	7	public void mouseClicked ( MouseEvent e ) { if ( hoverArea . contains ( e . getPoint ( ) ) ) skillToggle = ! skillToggle ; }
tr	5	public int getMaxQuantity ( int quantity ) { if ( currentQuantity + quantity > maxQuantity ) { throw new StoreProblemException ( ) ; } return currentQuantity + quantity ; }
tr	6	public static PdVector toLocalVector ( PdVector globalVector , PdVector x , PdVector y ) { assert globalVector . getSize ( ) == 3 ; assert x . getSize ( ) == 3 ; assert y . getSize ( ) == 3 ; return new PdVector ( x . . ( globalVector ) , y . . ( globalVector ) ) ; }
tr	2	public double getnStartNumber ( ) { return nStartNumber ; }
tr	10	private void btnProdutosActionPerformed ( java . awt . event . ActionEvent evt ) { this . setEnabled ( false ) ; CadastroProdutos . getInstace ( ) . setVisible ( true ) ; }
tr	1	public void onKeyReleased ( ) { }
tr	4	public Collection < OsobyHasStaje > getOsobyHasStajeCollection ( ) { return osobyHasStajeCollection ; }
tr	2	public void setDepartment ( int department ) { this . department = department ; }
tr	5	public SimpleCharStream ( java . io . InputStream dstream ) { this ( dstream , 1 , 1 , 4096 ) ; }
tr	9	public void initDialog ( ) { if ( cb != null ) cb . setOptions ( ) ; zrle . setEnabled ( ! autoSelect . getState ( ) ) ; hextile . setEnabled ( ! autoSelect . getState ( ) ) ; raw . setEnabled ( ! autoSelect . getState ( ) ) ; }
tr	7	@ Override public void mouseExited ( MouseEvent e ) { ( ( TacticButton ) e . getSource ( ) ) . setHovered ( false ) ; }
tr	1	public FractalShapeViewer ( ) { }
tr	4	public static Session getSession ( ) { return sessionFactory . openSession ( ) ; }
tr	4	protected void checkKey ( K k ) { if ( k == null ) { throw new InvalidKeyException ( "Invalid key: null." ) ; } }
tr	4	public List < SampleGroup > getSampleGroups ( ) { return sampleGroups ; }
tr	8	public void add ( int index , E value ) { if ( ( index < 0 ) || ( index > this . size ) ) { return ; } if ( index == 0 ) { this . addFront ( value ) ; } else { this . addAfter ( this . nodeAtPosition ( index - 1 ) , value ) ; } this . size ++ ; }
tr	10	public static KeyValueEntry fromString ( String in ) { String [ ] parts = in . split ( IndexWriter . SEPARATOR ) ; String k = parts [ 0 ] ; String v = parts [ 1 ] ; return new KeyValueEntry ( k , v ) ; }
tr	9	public Object get_field ( String field_name ) { try { return results . getObject ( field_name ) ; } catch ( Exception ex ) { throw new InvalidQueryException ( "Database access failed" ) ; } }
tr	10	protected void addDictionaryHelper ( BufferedReader in ) throws IOException { String line = "" ; while ( line != null ) { line = in . readLine ( ) ; if ( line != null && line . length ( ) > 0 ) { line = new String ( line . toCharArray ( ) ) ; putWordUnique ( line ) ; } } }
tr	8	public static void add ( Vector3f pv1 , Vector3f pv2 , Vector3f pvret ) { pvret . x = pv1 . x + pv2 . x ; pvret . y = pv1 . y + pv2 . y ; pvret . z = pv1 . z + pv2 . z ; }
tr	5	private void initializeOptions ( ) { foo = new InputOption ( "foo" , "f" ) ; | = new InputOption ( "bar" , "b" ) ; foo1 = new InputOption ( "fooBis" , "f" ) ; foo2 = new InputOption ( "foo" , "p" ) ; }
tr	8	@ Override @ Transactional ( propagation = Propagation . MANDATORY ) public nurseDetails perist ( nurseDetails entity ) { return null ; }
tr	6	private void jButton1ActionPerformed ( java . awt . event . ActionEvent evt ) { }
tr	4	public void setSomeData ( String value ) { this . someData = value ; }
tr	5	public String tag ( String input ) { return tagger . tagString ( input ) ; }
tr	9	public static void propagateZeros ( int [ ] [ ] arr ) { int width = arr . length ; int height = width == 0 ? 0 : arr [ 0 ] . length ; int [ ] rowsToZero = new int [ width ] ; int [ ] colsToZero = new int [ height ] ; for ( int ii = 0 ; ii < width ; ii ++ ) { for ( int jj = 0 ; jj < height ; jj ++ ) { if ( arr [ ii ] [ jj ] == 0 ) { rowsToZero [ ii ] = 1 ; colsToZero [ jj ] = 1 ; } } } for ( int ii = 0 ; ii < width ; ii ++ ) { for ( int jj = 0 ; jj < height ; jj ++ ) { if ( rowsToZero [ ii ] == 1 || colsToZero [ jj ] == 1 ) { arr [ ii ] [ jj ] = 0 ; } } } }
tr	5	private Activity getCompassActivity ( ) { if ( compassFunctionalityVerfiedActivity == null ) { compassFunctionalityVerfiedActivity = new CompassFunctionalityVerfiedActivity ( clientFactory ) ; } return compassFunctionalityVerfiedActivity ; }
tr	4	@ JsonProperty ( "Owner" ) public String getOwner ( ) { return Owner ; }
tr	4	public void setInstantAnswer ( InstantAnswerResponse value ) { this . instantAnswer = value ; }
tr	3	public String getState ( ) { return CurrentState . getState ( ) ; }
tr	7	public ProtocolHandler ( Socket inbound , Object lock , MessageForwarder handlerhandler ) { this . inbound = inbound ; this . lock = lock ; this . handlerhandler = handlerhandler ; }
tr	5	public JSTextFileUtility ( String filename ) { this . filename = filename ; if ( ! fileExists ( filename ) ) createNewFile ( filename ) ; }
tr	10	private static boolean isUnreserved ( char c ) { return ( c >= a && c <= z ) || ( c >= A && c <= Z ) || ( c >= 0 && c <= 9 ) || c == . || c == - || c == _ || c == ~ ; }
tr	7	@ Override public void setThorique ( boolean thorique ) { this . thorique = thorique ; this . gameDifficulty = GameDifficulty . CUSTOM ; this . notifyViews ( ) ; }
tr	3	public Date getToPdcDate ( ) { return toPdcDate ; }
tr	10	public SpellDictionaryHashMap ( File wordList , File phonetic ) throws FileNotFoundException , IOException { super ( phonetic ) ; dictFile = wordList ; createDictionary ( new BufferedReader ( new FileReader ( wordList ) ) ) ; }
tr	9	private int validateProtocol ( ) throws IOException { int resp = this . sendDummyRequest ( ) ; if ( ! this . sc . isSecureConnection ( ) ) { this . sc . setSecureConnection ( true ) ; try { resp = this . sendDummyRequest ( ) ; } catch ( SSLException e ) { this . sc . setSecureConnection ( false ) ; } } return resp ; }
tr	6	@ Override protected String toString ( int indent ) { return toString ( indent , "RecordSelectorNode\n" ) + subject . toString ( indent + 1 ) + "\n" + selector . toString ( indent + 1 ) ; }
tr	7	@ Override public EditorKit getEditorKitForContentType ( String type ) { if ( type . equalsIgnoreCase ( "text/html" ) || type . equalsIgnoreCase ( "application/xhtml+xml" ) || type . equalsIgnoreCase ( "text/xhtml" ) ) { return swingBoxEditorKit ; } else { return super . getEditorKitForContentType ( type ) ; } }
tr	7	public static mVar m$piece ( mVar p$3 , Object object , Object object2 ) { throw new UnsupportedOperationException ( ) ; }
tr	5	@ Override public int compareTo ( Match o ) { if ( this . gameStartMs > o . gameStartMs ) return 1 ; else if ( this . gameStartMs < o . gameStartMs ) return - 1 ; return 0 ; }
tr	6	public static void setRow ( final double [ ] matrix , final int n , final int m , final int i , final double ... values ) { setRow ( matrix , n , m , i , values , 0 ) ; }
tr	3	public static void main ( String [ ] args ) { }
tr	3	public Song getSong ( ) { return song ; }
tr	1	public boolean isAbsent ( ) { return null ; }
tr	8	@ Override @ Transactional ( propagation = Propagation . MANDATORY ) public trainerDetails perist ( trainerDetails entity ) { return null ; }
tr	10	@ Test ( expected = ParkException . class ) public void in_a_car_when_all_park_is_full ( ) { for ( int i = 0 ; i <= 15 ; i ++ ) { parkBoy . in ( new Car ( String . valueOf ( i ) ) ) ; } }
tr	3	public Source getSource ( ) { return source ; }
tr	3	public void setMonth ( Date month ) { this . month = month ; }
tr	5	public StockInfo getStockInfo ( String symbol ) { return new StockInfo ( symbol , calculatePrice ( symbol ) ) ; }
tr	7	public static void main ( String [ ] args ) { System . out . println ( getMaximumSubarraySum ( new int [ ] { 13 , - 3 , - 25 , 20 , - 3 , - 16 , - 23 , 18 , 20 , - 7 , 12 , - 5 , - 22 , 15 , - 4 , 7 } ) ) ; System . out . println ( getMaximumSubarraySum ( new int [ ] { - 2 , 1 , - 3 , 4 , - 1 , 2 , 1 , - 5 , 4 } ) ) ; System . out . println ( getMaximumSubarraySum ( new int [ ] { - 1 , - 2 , - 3 } ) ) ; System . out . println ( getMaximumSubarraySum ( new int [ ] { - 3 , - 2 , - 1 } ) ) ; }
tr	10	public MarkDisplay ( Mark mark ) { this . mark = mark ; this . bounds = new Rectangle ( mark . getPosition ( ) . getX ( ) , mark . getPosition ( ) . getY ( ) , SIZE , SIZE ) ; this . setBounds ( bounds ) ; }
tr	6	public Contact ( String firstName , String lastName , String phone , String email ) { this . firstName = firstName ; this . lastName = lastName ; this . phone = phone ; this . email = email ; }
tr	10	public void tolist ( int depth ) { List < Object > cloned = new ArrayList < Object > ( ) ; for ( int i = 1 ; i <= depth ; i ++ ) { cloned . add ( 0 , pop ( ) ) ; } push ( cloned ) ; }
tr	9	@ Override public boolean equals ( Object that ) { if ( that == this ) return true ; if ( that == null || ! getClass ( ) . equals ( that . getClass ( ) ) ) return false ; Row other = ( Row ) that ; return option . equals ( other . option ) && description . equals ( other . description ) ; }
tr	1	public TokenMgrError ( ) { }
tr	8	public void testComposedAnd ( ) { DataQueryFilter stmnt = and ( statement ( "name=alberto" ) , statement ( "age=15" ) , and ( "id=6" , "payed=true" ) ) ; assertEquals ( "(name=alberto AND age=15 AND (id=6 AND payed=true))" , adapter . statementAdapter ( stmnt ) ) ; }
tr	2	private if ( BooleanExpression condition ) { this . condition = condition ; }
tr	5	public void setName ( String newName ) { cmdNameLabel . setText ( newName ) ; }
tr	7	@ Before public void setUp ( ) throws Exception { jsonCallEncoder = new JsonCallEncoder ( JsonParserBuilder . build ( null ) ) ; }
tr	6	public String getVisitTotalCount ( String date ) { return this . jedis . get ( KEY_EVENT_CLICK_DAILY_TOTAL + date ) ; }
tr	5	public HashMap < String , LinkedList < String >> getHeader ( ) { return header ; }
tr	1	public float getTimeFrame ( ) { return 0 ; }
tr	5	public void setRows ( int newRows ) { if ( newRows < 0 ) throw new IllegalArgumentException ( "number of rows cannot be negative" ) ; if ( newRows == 0 && cols == 0 ) throw new IllegalArgumentException ( "number of columns is already 0" ) ; this . rows = newRows ; }
tr	4	@ Override public void handle ( EventHandler handler ) { handler . handle ( this ) ; }
tr	2	public void setValorReembolso ( double valorReembolso ) { this . valorReembolso = valorReembolso ; }
tr	10	private static List < List < String >> clone ( List < List < String >> original ) { List < List < String >> clone = new ArrayList < List < String >> ( original . size ( ) ) ; for ( List < String > oStrings : original ) { List < String > cStrings = new ArrayList < String > ( oStrings . size ( ) ) ; for ( String oString : oStrings ) { cStrings . add ( oString ) ; } clone . add ( cStrings ) ; } return clone ; }
tr	9	@ Override public int ToByteArray ( double i , byte [ ] b , int start ) { final long bits = double . doubleToLongBits ( i ) ; b [ start ++ ] = ( byte ) ( ( bits >>> 56 ) & FF ) ; b [ start ++ ] = ( byte ) ( ( bits >>> 48 ) & FF ) ; b [ start ++ ] = ( byte ) ( ( bits >>> 40 ) & FF ) ; b [ start ++ ] = ( byte ) ( ( bits >>> 32 ) & FF ) ; b [ start ++ ] = ( byte ) ( ( bits >>> 24 ) & FF ) ; b [ start ++ ] = ( byte ) ( ( bits >>> 16 ) & FF ) ; b [ start ++ ] = ( byte ) ( ( bits >>> 8 ) & FF ) ; b [ start ++ ] = ( byte ) ( bits & FF ) ; return getSizeInOctets ( ) ; }
tr	3	public String getDesc ( ) { return description ; }
tr	2	public SpaceRegionsFilterOptions createSpaceRegionsFilterOptions ( ) { return new SpaceRegionsFilterOptions ( ) ; }
tr	10	private Node begin ( Node expr , ReferenceFrame ref ) { Node curr = expr . getCdr ( ) , result = null ; while ( curr != null ) { result = eval ( curr . getCar ( ) , ref ) ; curr = curr . getCdr ( ) ; } return result ; }
tr	3	public void setNext ( Node nextNode ) { this . nextNode = nextNode ; }
tr	9	public synchronized Date getDateObjectStored ( String key ) { IRecord rec = objects . get ( key ) ; return rec == null ? null : rec . getDate ( ) ; }
tr	6	@ Override public String toString ( ) { return getClass ( ) . getSimpleName ( ) + "[" + bodyString ( ) + "]" ; }
tr	9	public Material ( ReflectanceCoefficient kAmbient , ReflectanceCoefficient kDiffuse , ReflectanceCoefficient kSpecular , BufferedImage texture ) { this . color = DEFAULT_COLOR ; this . kAmbient = kAmbient ; this . kDiffuse = kDiffuse ; this . kSpecular = kSpecular ; this . texture = texture ; }
tr	2	public static boolean isCreateClient ( ) { return createClient ; }
tr	9	public static void main ( String ... args ) { Node < Integer > list = new Node < Integer > ( 1 ) ; list . appendToTail ( 1 ) ; list . appendToTail ( 3 ) ; list . appendToTail ( 2 ) ; list . appendToTail ( 1 ) ; list . appendToTail ( 2 ) ; removeDuplicatesWithoutBuffer ( list ) ; list . printList ( ) ; }
tr	3	public void setEstudis ( String estudis ) { this . estudis = estudis ; }
tr	1	public Multitasker ( ) { }
tr	9	public ArrayList < SelectableLabel > getSelectableLabels ( ) { ArrayList < SelectableLabel > list = new ArrayList < > ( ) ; for ( int i = 0 ; i < subviews . size ( ) ; i ++ ) if ( subviews . get ( i ) instanceof SelectableLabel ) list . add ( ( SelectableLabel ) subviews . get ( i ) ) ; return list ; }
tr	1	public int E ( ) { return this . E ; }
tr	8	static String decode ( String ciphertext , String mustOccur ) throws Exception { if ( ciphertext . contains ( mustOccur ) ) { return ciphertext ; } for ( int i = 1 ; i < 26 ; i ++ ) { String decode = encode ( ciphertext , i ) ; if ( decode . contains ( mustOccur ) ) { return decode ; } } throw new Exception ( "Decoded string not found" ) ; }
tr	10	@ Test public void testDimasExample ( ) { Graph graph = new Graph ( 4 ) ; graph . connectDirected ( 0 , 1 , 2 ) ; graph . connectDirected ( 1 , 2 , 2 ) ; graph . connectDirected ( 2 , 3 , 2 ) ; graph . connectDirected ( 0 , 3 , 5 ) ; BellmanFordShortestPath dsp = new BellmanFordShortestPath ( graph ) ; int sp = dsp . getShortestPathValue ( 0 , 3 ) ; assert . assertEquals ( 5 , sp ) ; }
tr	10	@ SuppressWarnings ( "unchecked" ) @ Override public Collection create ( Object value ) { Set values = new HashSet ( ) ; values . add ( value ) ; return values ; }
tr	7	public boolean getBoolean ( String command , String [ ] params ) { boolean result = processor . getBoolean ( command , params ) ; log ( command , params , result ) ; return result ; }
tr	8	public Main ( ) throws IOException { server = new com . esotericsoftware . kryonet . Server ( ) ; instantiate ( ) ; }
tr	9	@ Override public ArrayList < case > retournerZoneAffecterParAttaque ( Personnage lanceur , Position cible ) { return this . determinerPremiereCibleSurPassage ( this . determinerDirectionCible ( lanceur , cible ) , lanceur ) ; }
tr	5	public Vertex ( Vector3f pos , Vector2f texCoord ) { this ( pos , texCoord , new Vector3f ( 0 , 0 , 0 ) ) ; }
tr	6	public void setIdIsSet ( boolean value ) { __isset_bitfield = EncodingUtils . setBit ( __isset_bitfield , __ID_ISSET_ID , value ) ; }
tr	9	public boolean setInfo ( String node , String data ) { if ( info == null ) { info = new HashMap < String , String > ( ) ; } if ( data == null ) { info . remove ( node ) ; dirty ( ) ; return true ; } info . put ( node , data ) ; dirty ( ) ; return true ; }
tr	2	public void setClosed ( boolean closed ) { this . closed = closed ; }
tr	4	FieldRef ( String name , long ref ) { this . name = name ; this . ref = ref ; }
tr	8	public static void assertEquals ( final CheckBox expected , final CheckBox actual ) { DatabaseAbstractQuestionTest . assertEquals ( expected , actual ) ; assert . assertEquals ( expected . getQuestionString ( ) , actual . getQuestionString ( ) ) ; assert . assertEquals ( expected . getAnswers ( ) , actual . getAnswers ( ) ) ; assert . assertEquals ( expected . getOptions ( ) , actual . getOptions ( ) ) ; }
tr	3	public Integer getIdRefeicao ( ) { return idRefeicao ; }
tr	5	public double [ ] [ ] getNormalizedSimilarityMatrix ( String [ ] words1 , String [ ] words2 ) { return MatrixCalculator . getNormalizedSimilarityMatrix ( words1 , words2 , this ) ; }
tr	7	@ Override public int hashCode ( ) { int hash = 7 ; hash = 79 * hash + Objects . hashCode ( this . t1 ) ; hash = 79 * hash + Objects . hashCode ( this . t2 ) ; hash = 79 * hash + Objects . hashCode ( this . t3 ) ; return hash ; }
tr	2	public int getPatas ( ) { return patas ; }
tr	5	public void updatePositionWithStep ( int step ) { position = PositionUpdate . getCurrentPositionWithDistance ( position , step ) ; }
tr	8	public ListNode deleteDuplicates ( ListNode head ) { if ( head == null ) return null ; ListNode cur = head ; ListNode last = head ; int value = head . val ; while ( cur . next != null ) { cur = cur . next ; if ( cur . val != value ) { if ( last . next != cur ) last . next = cur ; last = cur ; value = cur . val ; } } if ( last != cur ) { last . next = null ; } return head ; }
tr	6	public static File getOutputFile ( Target target ) throws OverwriteException , TransformException { return getOutputFile ( target , null ) ; }
tr	1	public void unload ( ) { }
tr	4	public DisplayProperties getDisplayOrientation ( ) { return ( DisplayProperties ) orientationBox . getSelectedItem ( ) ; }
tr	6	@ Override public void removeFocusListener ( EngineFocusListener l ) { focusListeners . remove ( l ) ; }
tr	7	static public IconCache zam18_retinaSupport ( HttpCache hc ) { if ( SystemHelp . isRetina ( ) ) { return new IconCache ( hc , 18 , 2 , "http://wow.zamimg.com/images/wow/icons/medium/$.jpg|dir=36" ) ; } else { return zam18 ( hc ) ; } }
tr	3	public String getBrightpointOrderNumber ( ) { return brightpointOrderNumber ; }
tr	6	@ Override public boolean violates ( Variable var ) { return rule . holds ( var ) ; }
tr	5	public InvalidMessage ( String message , Throwable cause ) { super ( message , cause ) ; }
tr	2	public Waves build ( ) { return new Waves ( this ) ; }
tr	7	public ActionListener buildExitActionListener ( ) { return new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { System . exit ( 0 ) ; } } ; }
tr	7	private void RefreshButtonActionPerformed ( java . awt . event . ActionEvent evt ) { this . ListRefresher ( ) ; }
tr	8	@ XmlElementDecl ( namespace = "" , name = "routing-description" ) public JAXBElement < String > createRoutingDescription ( String value ) { return new JAXBElement < String > ( _RoutingDescription_QNAME , String . class , null , value ) ; }
tr	9	public MessageView ( String message ) { super ( ) ; this . label = new JLabel ( message ) ; this . isGo = false ; this . isPopup = false ; this . controleur = new MessageController ( this ) ; }
tr	7	public String stripZeros ( String s ) { int i ; for ( i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) != 0 ) break ; } if ( i == s . length ( ) ) return "0" ; else return s . substring ( i ) ; }
tr	1	public SuggestionText ( ) { }
tr	10	public boolean touches ( Tile otherTile ) { if ( match ( getArea ( ) . getMaxX ( ) , otherTile . getArea ( ) . getMinX ( ) ) || match ( getArea ( ) . getMinX ( ) , otherTile . getArea ( ) . getMaxX ( ) ) ) return checkOverlap ( getArea ( ) . getMinY ( ) , getArea ( ) . getMaxY ( ) , otherTile . getArea ( ) . getMinY ( ) , otherTile . getArea ( ) . getMaxY ( ) ) ; if ( match ( getArea ( ) . getMaxY ( ) , otherTile . getArea ( ) . getMinY ( ) ) || match ( getArea ( ) . getMinY ( ) , otherTile . getArea ( ) . getMaxY ( ) ) ) return checkOverlap ( getArea ( ) . getMinX ( ) , getArea ( ) . getMaxX ( ) , otherTile . getArea ( ) . getMinX ( ) , otherTile . getArea ( ) . getMaxX ( ) ) ; return false ; }
tr	6	public T getCard ( T c ) { return cards . get ( cards . indexOf ( c ) ) ; }
tr	8	public void setData ( Vector rows ) { log . finer ( "Entered method" ) ; data = rows ; fireTableRowsInserted ( 0 , data . size ( ) ) ; }
tr	10	public OAuth1Params oAuth1Params ( ) { return new OAuth1Params ( token , consumerKey , nonce , timestampSecs , timestampStr , signature , signatureMethod , version ) ; }
tr	3	public void delete ( ) { Dispatch . call ( this , "Delete" ) ; }
tr	7	@ Deprecated private boolean checkCondition ( String condition ) { if ( condition == null || condition . length ( ) == 0 ) { db . writeError ( "Skipping null or empty WHERE condition." , false ) ; return false ; } return true ; }
tr	10	private static int [ ] [ ] maxSumArea ( int m , int n , int [ ] [ ] forest ) { int [ ] [ ] res = new int [ m ] [ n ] ; int [ ] [ ] matrix = flip ( m , n , forest ) ; for ( int i = 0 ; i < res [ 0 ] . length ; i ++ ) { res [ 0 ] [ i ] = forest [ 0 ] [ i ] ; } for ( int i = 1 ; i < res . length ; i ++ ) { for ( int j = 0 ; j < res [ i ] . length ; j ++ ) { if ( forest [ i ] [ j ] == 0 ) res [ i ] [ j ] = 0 ; else res [ i ] [ j ] = res [ i - 1 ] [ j ] + forest [ i ] [ j ] ; } } return res ; }
tr	6	@ Override public void mousePressed ( final MouseEvent me ) { button = me . getButton ( ) ; }
tr	6	@ Override public ImageIcon getVideoIcon ( ) { return get ( WindowsIconsHelper . VIDEO_FOLDER ) ; }
tr	3	public void setYear ( String year ) { this . year = year ; }
tr	3	public void setConnectionString ( String connectionString ) { this . connectionString = connectionString ; }
tr	7	public List < AuthorModel > getAuthorsByName ( String name ) throws WebshopAppException { return authorRepository . getAuthorsByName ( name ) ; }
tr	5	public static boolean bothIntegers ( Number number , Number otherNumber ) { return number instanceof Integer && otherNumber instanceof Integer ; }
tr	6	private final void bsFinishedWithStream ( ) throws IOException { while ( bsLive > 0 ) { int ch = ( bsBuff >> 24 ) ; bsBuff <<= 8 ; bsLive -= 8 ; bytesOut ++ ; } }
tr	4	@ Override public GameCharacterObject setVy ( float vy ) { this . vy = vy ; return this ; }
tr	4	public DraughtsState getState ( ) { return NodeLVL3 . ds ; }
tr	4	public GameData ( int [ ] location , short protocol ) { this . protocol = protocol ; this . stoneLocation = location ; }
tr	3	public String createProgress ( String data ) { return "0 " + data ; }
tr	7	public DimensionException ( String message , Throwable cause , boolean enableSuppression , boolean writableStackTrace ) { super ( message , cause , enableSuppression , writableStackTrace ) ; }
tr	2	public int getPages ( ) { return pages ; }
tr	2	public TestCallback ( ) { clear ( ) ; }
tr	3	public void setLongBoneName ( String longBoneName ) { this . longBoneName = longBoneName ; }
tr	3	private static void jj_la1_init_0 ( ) { jj_la1_0 = new int [ ] { 1a40 , 60 , 60 , 180 , 180 , 1240 , 1200 , } ; }
tr	3	public Vector2D getPosition ( ) { return position ; }
tr	5	public static boolean isPointsEnoughToBuyToolWithNumber ( int points , Tool tool ) { if ( points < tool . getBuyPoints ( ) ) { return false ; } return true ; }
tr	6	@ Override public boolean containsSpecie ( Specie specie ) { return species . contains ( specie ) ; }
tr	9	public void print ( TreeNode root ) { if ( root == null ) { System . out . print ( " # " ) ; return ; } else { System . out . print ( " " + root . val + " " ) ; } print ( root . left ) ; print ( root . right ) ; }
tr	1	public ASTNode ( ) { }
tr	3	public StudentInfo getStdInfo ( ) { return stdInfo ; }
tr	1	public IfTree ( ) { }
tr	8	public void setPanelBounds ( ) { int width = this . getSize ( ) . width ; int height = this . getSize ( ) . height ; this . setBounds ( 0 , 0 , width , height ) ; tileLayer . setBounds ( this . getBounds ( ) ) ; edgeLayer . setBounds ( this . getBounds ( ) ) ; }
tr	2	@ Override public boolean hasWaterSport ( ) { return hasWaterSport ; }
tr	10	@ Test public void testGet ( ) { for ( int i = 0 ; i < A . length ; ++ i ) { for ( int j = 0 ; j < A [ 0 ] . length ; ++ j ) { assertTrue ( matrixA . get ( i , j ) . equals ( A [ i ] [ j ] ) ) ; } } }
tr	7	public static void main ( String [ ] args ) { for ( int i = 1 ; i < 100 ; i ++ ) { if ( i % 2 > 0 ) { System . out . println ( i ) ; } } }
tr	4	void Serve ( Customer c ) { customer = c ; }
tr	4	public static float valueOf ( Object o ) { if ( o == null ) { return null ; } else if ( o instanceof float ) { return ( float ) o ; } else if ( o instanceof double ) { return ( float ) o ; } else if ( o instanceof byte ) { return ( float ) ( byte ) o ; } else if ( o instanceof Integer ) { return ( float ) ( Integer ) o ; } else if ( o instanceof long ) { return ( float ) ( long ) o ; } else { return null ; } }
tr	10	public RankingPanel ( TeamController teamController , boolean points , RankingPanel rp ) { this . teamController = teamController ; this . rp = rp ; this . points = points ; if ( points ) { ishow = teamController . getTeamList ( ) . size ( ) ; } else { ishow = - 1 ; } init ( ) ; setTeamVisible ( ishow ) ; }
tr	2	public double optDouble ( int index ) { return this . optDouble ( index , double . NaN ) ; }
tr	3	public File scmExtractedTo ( ) { return this . scmExtracedTo ; }
tr	7	private void initHashForEntryTest ( ) { this . jedis . del ( KEY_HASH_ENTRY_TEST ) ; for ( int i = 0 ; i < INIT_HASH_ENTRY ; i ++ ) { this . jedis . hset ( KEY_HASH_ENTRY_TEST , "field1" + ( i + 1 ) , "test value" + i ) ; } }
tr	4	public ArrayList < Integer > getIdGrupAsigs ( ) { return idGrupAsigs ; }
tr	10	public Vec3f randomNormal ( Vec3f dst ) { int base = ( int ) ( MathUtils . rand ( ) * nTriangles ) ; return Triangle . getRandomPoint ( getNormal ( base , 0 ) , getNormal ( base , 1 ) , getNormal ( base , 2 ) ) ; }
tr	2	public int getMin ( ) { return min ; }
tr	10	public Selector ( String tagName , List < Specifier > specifiers ) { assert . notNull ( tagName , "tagName is null!" ) ; this . tagName = tagName ; this . combinator = Combinator . DESCENDANT ; this . specifiers = specifiers ; }
tr	1	public DeliveryPacket ( ) { }
tr	6	@ Override public void mouseWheelMoved ( MouseWheelEvent e ) { zoom ( e . getWheelRotation ( ) < 0 ) ; }
tr	10	public Object autoUnmap ( Map < String , ? > map ) { ReMapperMeta meta = extractMeta ( map ) ; return unmap ( map , meta . getType ( ) ) ; }
tr	6	@ Override public void put ( String name , String value ) { map . put ( name , value ) ; }
tr	6	protected void printSongHeader ( ) { System . out . println ( ) ; System . out . println ( String . format ( "%-5s %-30s %-30s %-10s %-20s %5s" , "ID" , "Title" , "Artist" , "Category" , "Filename" , "Duration" ) ) ; System . out . println ( ) ; }
tr	6	public boolean isLeaf ( Object node ) { if ( asksAllowsChildren ) return ! ( ( TreeNode ) node ) . getAllowsChildren ( ) ; else return ( ( TreeNode ) node ) . isLeaf ( ) ; }
tr	4	public SineWaveSource ( ) { moduloOffset = ( int ) ( BUFFER_SIZE % FREQ ) ; }
tr	6	@ Override public void enterValue ( @ NotNull MagicParser . ValueContext ctx ) { }
tr	7	@ Override public void imprimir ( String s ) { System . out . print ( s ) ; }
tr	2	public boolean getResult ( ) { return result ; }
tr	8	private static LinkedList < Integer > setupList ( int n ) { LinkedList < Integer > lista = new LinkedList < Integer > ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { lista . add ( Integer . valueOf ( i ) ) ; } return lista ; }
tr	3	@ Override public Integer contar ( ) { return null ; }
tr	4	@ Inject public Example ( String helloworld ) { }
tr	7	public boolean keepProcessing ( int nextToken ) { long startTime = captureTime ( ) ; boolean keepProcessing = childStrategy . keepProcessing ( nextToken ) ; long endTime = captureTime ( ) ; notify ( "keepProcessing" , startTime , endTime ) ; return keepProcessing ; }
tr	4	public void println ( Object o ) { out . println ( o ) ; }
tr	8	@ Test public void testIsEmptyDirection ( ) { for ( Direction dir : Direction . values ( ) ) { assertFalse ( testTile . isEmpty ( dir ) ) ; } }
tr	5	public Tuple ( final A value1 , final B value2 ) { this . value1 = value1 ; this . value2 = value2 ; }
tr	7	private void jButton1ActionPerformed ( java . awt . event . ActionEvent evt ) { this . dispose ( ) ; }
tr	6	@ Override public String toString ( ) { String str = "" ; if ( min > 0 ) str += min ; str += "*" ; if ( max > 0 ) str += max ; return str ; }
tr	9	private void jButtonNuevoActionPerformed ( java . awt . event . ActionEvent evt ) { unCliente . blanquea ( ) ; muestraCliente ( ) ; }
tr	4	public void setRc5KNXValue ( Integer rc5knxValue ) { rc5KNXValue = rc5knxValue ; }
tr	9	private boolean isPattern ( String decimal , int i , String potentialPattern ) { return potentialPattern . startsWith ( decimal . substring ( i ) . replaceAll ( potentialPattern , EMPTY ) ) ; }
tr	9	static public CommandTypes getType ( String command ) { for ( CommandTypes commandType : CommandTypes . values ( ) ) { if ( commandType . getValue ( ) . equals ( command ) ) { return commandType ; } } throw new RuntimeException ( "unknown type" ) ; }
tr	10	public void setCurrentPlayer ( final String playeName ) { playerName . setText ( "Current Player: " + playeName ) ; playerName . setForeground ( Teams . getTeamColor ( Teams . getTeamOfPlayer ( playeName ) ) ) ; playerName . repaint ( ) ; }
tr	1	public TestResult ( ) { }
tr	7	private void addMeterToAccountActionPerformed ( java . awt . event . ActionEvent evt ) { openAddMeterPanel ( ) ; }
tr	2	public boolean isDecoupler ( ) { return getModule ( "ModuleDecouple" ) != null || getModule ( "ModuleAnchoredDecoupler" ) != null ; }
tr	3	public String getArg1 ( ) { return arg1 ; }
tr	8	public static Kind find ( String lowerCase ) { for ( Kind k : Kind . values ( ) ) { if ( k . name . equalsIgnoreCase ( lowerCase ) ) { return k ; } } return null ; }
tr	1	public CardGroup ( ) { super ( ) ; }
tr	4	public static String groupDigits ( long l , String grouper ) { return groupDigits ( l , ( byte ) 3 , grouper ) ; }
tr	1	public OutputFormatterStyleStack ( ) { this ( null ) ; }
tr	5	public static final int bitsInInts ( int numBits ) { if ( numBits < 0 ) throw new IllegalArgumentException ( "numBits < 0" ) ; return ( int ) ( ( numBits + ( Integer . SIZE - 1 ) ) / Integer . SIZE ) ; }
tr	10	public static void invert ( double src [ ] [ ] , double dst [ ] [ ] ) { gaussian ( src , a ) ; for ( int i = 0 ; i < 4 ; i ++ ) for ( int j = 0 ; j < 4 ; j ++ ) b [ i ] [ i ] = i == j ? 1 : 0 ; for ( int i = 0 ; i < 3 ; i ++ ) for ( int j = i + 1 ; j < 4 ; j ++ ) for ( int k = 0 ; k < 4 ; k ++ ) b [ index [ j ] ] [ k ] -= a [ index [ j ] ] [ i ] * b [ index [ i ] ] [ k ] ; for ( int i = 0 ; i < 4 ; i ++ ) { dst [ 4 - 1 ] [ i ] = b [ index [ 4 - 1 ] ] [ i ] / a [ index [ 4 - 1 ] ] [ 4 - 1 ] ; for ( int j = 2 ; j >= 0 ; j -- ) { dst [ j ] [ i ] = b [ index [ j ] ] [ i ] ; for ( int k = j + 1 ; k < 4 ; k ++ ) dst [ j ] [ i ] -= a [ index [ j ] ] [ k ] * dst [ k ] [ i ] ; dst [ j ] [ i ] /= a [ index [ j ] ] [ j ] ; } } }
tr	2	public long getRateAboutZAxis ( ) { return rateAboutZAxis ; }
tr	8	@ Override public void addRows ( List < TEntity > entidades ) { for ( TEntity e : entidades ) this . entidades . add ( e ) ; notifyListeners ( ) ; }
tr	4	public void setFPublic ( BigInteger value ) { this . fPublic = value ; }
tr	7	public List < String > getColumns ( ) { List < String > retval = new ArrayList < String > ( ) ; retval . addAll ( columns ) ; return retval ; }
tr	6	public static ClientState getState ( String id ) { return ids . get ( id ) ; }
tr	1	public void run ( ) { }
tr	6	public static < T , U > Pair < T , U > of ( T _1 , U _2 ) { return new Pair < T , U > ( _1 , _2 ) ; }
tr	3	public boolean stop ( ) { return stop_native ( pointer ) ; }
tr	5	public void setTestActors ( Map < String , Actor > testActors ) { this . testActors = testActors ; }
tr	10	public Usuario ( long user_id , String user_nome , String user_sobrenome , String user_cpf , String user_numendereco , String user_login , String user_senha , String user_complemento ) { this . user_id = user_id ; this . user_nome = user_nome ; this . user_sobrenome = user_sobrenome ; this . user_cpf = user_cpf ; this . user_numendereco = user_numendereco ; this . user_login = user_login ; this . user_senha = user_senha ; }
tr	9	public int requestMeetings ( IServerResponseListener listener , Calendar startDate , Calendar endDate ) { return requestMeetings ( listener , new UserModel [ ] { ClientMain . getActiveUser ( ) } , startDate , endDate ) ; }
tr	6	private void formKeyPressed ( java . awt . event . KeyEvent evt ) { }
tr	9	public void sendHello ( String name ) throws IOException { Logger . logdebug ( "Sending Hello to server" ) ; sender . queueForSend ( new HelloCmd ( name ) ) ; }
tr	5	public Atribuicao ( String id , Expressao exp ) { this . id = id ; this . exp = exp ; }
tr	3	public String getUpdated ( ) { return updated ; }
tr	8	@ Parameters ( { "url" , "browser" } ) @ BeforeClass public void setUp ( String url , String browser ) throws Exception { Start ( url , browser ) ; }
tr	6	@ Override public int getPopulation ( ) { int counter = 0 ; for ( Region r : regions ) counter += r . getPopulation ( ) ; return counter ; }
tr	4	@ Override public void gobble ( ) { mDuck . quack ( ) ; }
tr	8	@ XmlElementDecl ( namespace = "com/firstdata/Merchant/gmfV3.10" , name = "HDBINBeg" ) public JAXBElement < String > createHDBINBeg ( String value ) { return new JAXBElement < String > ( _HDBINBeg_QNAME , String . class , null , value ) ; }
tr	8	@ Override public void addStart ( int elem ) { if ( size + 1 >= capacity ) { resize ( ) ; } for ( int i = size - 1 ; i >= 0 ; -- i ) { array [ i + 1 ] = array [ i ] ; } array [ 0 ] = elem ; ++ size ; }
tr	4	@ Override public void resize ( int width , int height ) { }
tr	8	public void openAction ( ActionEvent actionEvent ) { if ( AppCore . ports . open ) { AppCore . ports . closePort ( ) ; } else { AppCore . ports . openPort ( ) ; } }
tr	5	public boolean isAlive ( ) { return ( Globals . gameTime . getElapsedMillis ( ) < this . expirationTime ) ; }
tr	3	public ContentStoreException ( String s ) { super ( s ) ; }
tr	2	public boolean getReloj ( ) { return Reloj ; }
tr	3	public void setKeyDuration ( double keyDuration ) { this . keyDuration = keyDuration ; fireEdit ( ) ; }
tr	7	@ Test ( expected = IllegalArgumentException . class ) public void shouldRaiseExceptionForEmptyName ( ) { Cinema cinema = new Cinema ( ) ; cinema . setName ( "" ) ; }
tr	9	private void maybeShowPopup ( MouseEvent e ) { if ( e . isPopupTrigger ( ) ) { popup . show ( e . getComponent ( ) , e . getX ( ) , e . getY ( ) ) ; } }
tr	3	public String getMapName ( ) { return this . mapName ; }
tr	8	@ Test public void testFromBoolean ( ) { assertEquals ( YesNo . YES , yesNo . fromBoolean ( true ) ) ; assertEquals ( YesNo . NO , yesNo . fromBoolean ( false ) ) ; }
tr	10	public SimpleGravitable ( int mass , double x , double y , Velocity v ) { setMass ( mass ) ; xLoc = x ; yLoc = y ; velocity = v ; }
tr	2	public void setMovingRight ( boolean movingRight ) { this . movingRight = movingRight ; }
tr	8	public boolean contains ( Object element ) { int my_element = ( Integer ) element ; if ( Arrays . binarySearch ( tablica , my_element ) < 0 ) return false ; return true ; }
tr	9	private static long length ( File file ) { if ( file . isFile ( ) ) { return file . length ( ) ; } else if ( file . isDirectory ( ) ) { File children [ ] = file . listFiles ( ) ; long len = 0 ; for ( File fi : children ) { len += length ( fi ) ; } return len ; } return 0 ; }
tr	9	public static void main ( String [ ] args ) { String s1 = "ababab" ; String s2 = "bababa" ; System . out . println ( "The longest common subsequence of " + s1 + " and " + s2 + ":" ) ; System . out . println ( findLCS ( s1 , s2 ) ) ; }
tr	4	@ Override public int getMessageCount ( ) throws MessagingException { return _imapFolder . getMessageCount ( ) ; }
tr	4	public edge ( int source , int destination , int weight ) { this . source = source ; this . destination = destination ; this . weight = weight ; }
tr	5	public void resetGame ( ) { gl = new GameLogic ( null ) ; grid = gl . getGrid ( ) ; }
tr	3	C getContext ( ) { return _context . getContext ( ) ; }
tr	6	public void insertDataToTable ( String tName , String fields , String line ) throws Exception { }
tr	8	public void set_wheelchair_boarding ( String in ) { try { _wheelchair_boarding = Integer . parseInt ( in ) ; } catch ( NumberFormatException e ) { ; } }
tr	4	public String getDBUser ( ) { return _prop . getProperty ( "dbuser" ) ; }
tr	8	@ Override public void writeHeaderCell ( HeaderCellDetails headerCell ) { writeCell ( headerCell . getColumnIndex ( ) , headerCell . getColumn ( ) . getTitle ( ) ) ; }
tr	3	public ExprList getExprList ( ) { return exprList ; }
tr	7	public CreateConnectorConnectionPoolCommand ( GlassFishEnvironment environment , String raname , String connectiondefinition , String poolname ) { super ( environment ) ; this . raname = raname ; this . connectiondefinition = connectiondefinition ; this . poolname = poolname ; }
tr	4	public boolean get ( int value ) { assertValue ( value ) ; return ( bitset & 1 << value ) > 0 ; }
tr	2	public int getRadialCols ( ) { return radialCols ; }
tr	9	public JSONWriter array ( ) throws JSONException { if ( this . mode == i || this . mode == o || this . mode == a ) { this . push ( null ) ; this . append ( "[" ) ; this . , = false ; return this ; } throw new JSONException ( "Misplaced array." ) ; }
tr	10	private static ThreadFactory newThreadFactoryJvm ( final String threadName ) { final ThreadFactory threadFacory = new ThreadFactory ( ) { @ Override public Thread newThread ( final Runnable r ) { return new Thread ( r , threadName ) ; } } ; return threadFacory ; }
tr	1	public NoSuchColumnException ( ) { super ( ) ; }
tr	8	public CalendarDate ( String inID , String inDate , int inType ) { _service_id = inID ; _date = inDate ; _exception_type = inType ; }
tr	6	private void txtExercicioActionPerformed ( java . awt . event . ActionEvent evt ) { }
tr	7	public Scene add ( final GeometricObject ... paramObjects ) { objects . addAll ( asList ( paramObjects ) ) ; return this ; }
tr	8	@ Test public void testGetTrimmedLeadingWithStringWithSpacesAtBothSides ( ) { final String value = "\t  abcde  \t" ; final String expected = "abcde  \t" ; assertEquals ( expected , new TextSequence ( value ) . getTrimmedLeading ( ) ) ; }
tr	5	public ModificationException ( final class < ? > classTriedToChange , final String fieldTryingToChange ) { super ( createMessage ( classTriedToChange , fieldTryingToChange , null , null ) ) ; }
tr	6	@ Test public void testToString ( ) { assertEquals ( "c4-c6" , new SimpleMovement ( new Position ( 3 , 4 ) , new Position ( 3 , 6 ) ) . toString ( ) ) ; }
tr	8	public void addNewItem ( ) throws Exception { T item = this . clazz . newInstance ( ) ; this . items . add ( item ) ; }
tr	6	public static void swap ( Object [ ] array , int i , int j ) { Object temp = array [ i ] ; array [ i ] = array [ j ] ; array [ j ] = temp ; }
tr	2	public void setEmpNo ( int empNo ) { this . empNo = empNo ; }
tr	1	public ReinforcementManager ( ) { }
tr	10	public boolean containsValue1 ( V value1 ) { for ( K key : this . entries . keySet ( ) ) { if ( this . entries . get ( key ) . getValue1 ( ) . equals ( value1 ) ) { return true ; } } return false ; }
tr	3	public void setsProject ( String sProject ) { this . sProject = sProject ; }
tr	9	private static BigInteger getFactorial ( int n ) { BigInteger fact = BigInteger . ONE ; for ( int i = n ; i > 1 ; i -- ) { fact = fact . multiply ( new BigInteger ( Integer . toString ( i ) ) ) ; } return fact ; }
tr	8	@ XmlElementDecl ( namespace = "http://ssc.spdf.gsfc.nasa.gov/" , name = "getDataFilesResponse" ) public JAXBElement < GetDataFilesResponse > createGetDataFilesResponse ( GetDataFilesResponse value ) { return new JAXBElement < GetDataFilesResponse > ( _GetDataFilesResponse_QNAME , GetDataFilesResponse . class , null , value ) ; }
tr	2	public double getRadius ( ) { if ( launched ) return 0 ; return 15 ; }
tr	6	void load ( DataInput dis ) throws IOException { data = dis . readByte ( ) ; }
tr	6	public int tier ( ) { return ( int ) Math . sqrt ( bitsPerCollection ) - Parameters . MIN_TIER ; }
tr	5	public IntersectionInfo ( HashMap < String , Integer [ ] > roadIntersections ) { this . roadIntersections = roadIntersections ; }
tr	6	private DateFormatHelper ( ) { simpleDateFormat = new java . text . SimpleDateFormat ( PATTERN ) ; }
tr	7	public TimestampParser ( final VizPanel vPanel ) { super ( vPanel ) ; lastTime = null ; dataVisualizer = new SimpleDateFormat ( TIME_FORMAT_OUT ) ; }
tr	9	public static Image ImageLoad ( String path ) { Image image = new ImageIcon ( ResourceLoader . class . getResource ( path ) ) . getImage ( ) ; return image ; }
tr	2	public int getTotalPacketsNumber ( ) { return this . totalPackets ; }
tr	1	public HeterozygousLociDiversity ( ) { this ( "HE" , "Proportion of Heterozygous Loci" ) ; }
tr	1	public int statBoost ( ) { return 0 ; }
tr	5	public void validate ( ) throws org . apache . thrift7 . TException { }
tr	2	public int getNbTours ( ) { return nbTours ; }
tr	5	public void setLevels ( Collection < XmlLevel > items ) { this . levels = items ; }
tr	7	public Minimap ( Dimension size , World w ) { super ( new Point ( ) , size ) ; init ( w ) ; }
tr	5	public void testGeneratedPhysicalLinkDestinyNode ( ) { assertEquals ( destinyPhysicalNode , generatedPhysicalLink . getDestinyNode ( ) ) ; }
tr	7	@ Test public void toStringToimii ( ) { kortisto . lisaaHenkilo ( "heidi" , "jauhiainen" ) ; kortisto . lisaaHenkilo ( "tommi" , "jauhiainen" ) ; kortisto . lisaaHenkilo ( "kalle" , "koehenkilo" ) ; assertTrue ( kortisto . toString ( ) . length ( ) > 0 ) ; }
tr	10	public DobbyClient ( DobbyServer server , AsyncSocket socket , String document ) { this . server = server ; connection = socket ; socket . addAsyncSocketListener ( this ) ; registerClient ( ) ; }
tr	4	public JSONTokener ( String s ) { this ( new StringReader ( s ) ) ; }
tr	7	public ScribusImgScratchFrame ( double innerWidth , double outerWidth ) { super ( ) ; element . set ( C . FRTYPE , 3 ) ; this . innerWidth = innerWidth ; this . outerWidth = outerWidth ; }
tr	2	public boolean alreadyReceivedScoreEvents ( ) { return this . currentTurn . alreadyReceivedScoreEvents ; }
tr	7	public LoginUserModel LoginUserInfo ( String userloginName ) { LoginUserModel loginUserModel = loginUserDao . FindloginUser ( userloginName ) ; return loginUserModel ; }
tr	7	public DefaultSSLWebSocketServerFactory ( SSLContext sslContext , ExecutorService exec ) { if ( sslContext == null || exec == null ) throw new IllegalArgumentException ( ) ; this . sslcontext = sslContext ; this . exec = exec ; }
tr	1	public boolean disposed ( ) { return disposed ; }
tr	10	private void startWhen ( Attributes attrs ) { When branch = new When ( ) ; choose . addBranch ( branch ) ; branch . setCondition ( attrs . getValue ( "test" ) ) ; startSectionContainer ( branch ) ; }
tr	6	public void translateDown ( float translation_Value ) { pobj . translate ( 0.0f , - translation_Value , 0.0f ) ; updateAbstraction ( ) ; }
tr	2	public int getWidth ( ) { return width ; }
tr	9	private void add ( char [ ] w , int wLen ) { if ( i + wLen >= b . length ) { char [ ] new_b = new char [ i + wLen + INC ] ; for ( int c = 0 ; c < i ; c ++ ) new_b [ c ] = b [ c ] ; b = new_b ; } for ( int c = 0 ; c < wLen ; c ++ ) b [ i ++ ] = w [ c ] ; }
tr	8	public boolean isChecksumValid ( ) { byte msg [ ] = toByteArray ( ) ; int i = 0 ; for ( int j = 1 ; j < msg . length - 1 ; j ++ ) i += msg [ j ] ; byte byte0 = ( byte ) ( 256 - i % 256 ) ; return byte0 == mChecksum ; }
tr	1	public void initNewLife ( ) { }
tr	8	public void createBox ( Rectangle2D rect , String name ) { boxes . add ( new Hitbox ( rect , name ) ) ; }
tr	10	public GitlabProjectMember addProjectMember ( GitlabProject project , GitlabUser user , GitlabAccessLevel accessLevel ) throws IOException { return addProjectMember ( project . getId ( ) , user . getId ( ) , accessLevel ) ; }
tr	7	@ ChattingAnnotation ( feature = "History" , type = "method" ) public String retriveChatHistory ( String sender ) { return _imp . retriveChatHistory ( sender ) ; }
tr	2	public void setTextHeight ( int textHeight ) { this . textHeight = textHeight ; }
tr	2	public int getWidth ( ) { return width ; }
tr	6	private UserManager ( ) { system = new User ( "System" ) ; ownUser = new User ( "USER" ) ; remoteUsers = new ArrayList < User > ( ) ; }
tr	10	@ Test public void shouldPassingSpaceOfOthersForFreeWithLuck ( ) { passer . chooseGift ( 3 ) ; space . isSafeForPlayerPassOnOtherSpace ( passer ) ; assertThat ( owner . getFunds ( ) , is ( 9800 ) ) ; assertThat ( passer . getFunds ( ) , is ( 10000 ) ) ; }
tr	6	@ Override public String visit ( IntegerNode node ) { return INTEGER ; }
tr	5	public boolean containsFamily ( String family ) { return families . contains ( family ) ; }
tr	2	@ Override protected int getCellSize ( ) { return 50 ; }
tr	10	@ Override public void newGameSpeedIs ( int speedIs ) { Message msg = new Message ( ) ; msg . setStage ( 1 ) ; msg . setToServer ( 1 ) ; msg . setToMethode ( "gameSpeedIs" ) ; msg . setSpeed ( speedIs ) ; send ( msg ) ; }
tr	1	public int level ( ) { return level ; }
tr	8	@ Override public Object getTransferData ( DataFlavor flavor ) throws UnsupportedFlavorException { if ( ! isDataFlavorSupported ( flavor ) ) { throw new UnsupportedFlavorException ( flavor ) ; } return nodes ; }
tr	3	public void setActivePlayer ( Player activePlayer ) { this . activePlayer = activePlayer ; }
tr	3	public void setAgility ( int agi ) { this . agility = agi ; }
tr	2	public Component getComponent ( ) { return this ; }
tr	3	public synchronized long getHMillis ( ) { return ( long ) ( p . H * 1000.0 ) ; }
tr	2	public void setCenterLongitude ( double centerLongitude ) { this . centerLongitude = centerLongitude ; }
tr	2	@ Override public void close ( ) { }
tr	5	public List < Produto > getListagem ( ) { if ( listagem == null ) atualizaListagem ( ) ; return listagem ; }
tr	8	@ Override public void addRow ( Row row ) { constraints . add ( ( PiecePart ) row ) ; super . addRow ( row ) ; pop = null ; }
tr	8	public void setTime ( Time x , Calendar cal ) throws SQLException { this . ps . setTime ( parameterIndex ++ , x , cal ) ; }
tr	5	public Variant ( SafeArray array , boolean byRef ) { this ( array , VariantArray , byRef ) ; }
tr	2	public double [ ] getEmissionDistribution ( ) { return EMISSION_DISTRIBUTIONS ; }
tr	1	public AulaTestes ( ) { }
tr	2	public int getSize ( ) { return font . getSize ( ) ; }
tr	10	@ Override public short getShort ( long i ) { if ( ptr != 0 ) { return ( short ) ( Utilities . UNSAFE . getDouble ( ptr + sizeof * i ) ) ; } else { if ( isConstant ( ) ) { return ( short ) data [ 0 ] ; } else { return ( short ) data [ ( int ) i ] ; } } }
tr	1	public synchronized long count ( ) { return count ; }
tr	5	public String getRadioButtonSelected ( ) { return analysisGroup . getSelection ( ) . getActionCommand ( ) ; }
tr	4	public DamageType damageType ( ) { return damageType_native ( pointer ) ; }
tr	6	@ Test public void shouldNumberOfPlayersBeyondLimit ( ) { assertThat ( PlayerList . isCreatPlayerListSuccess ( "12345" ) , is ( false ) ) ; }
tr	1	public void setPlayerName ( ) { }
tr	9	public void print ( String str , int style ) { synchronized ( outputLock ) { insert ( str , base , style ) ; base += str . length ( ) ; setCaretPosition ( base ) ; } }
tr	1	public Carte ( ) { }
tr	3	public SocketNaoConectado ( String string ) { super ( string ) ; }
tr	7	public static ArrayList < Point > getDetailedPath ( RobotState currentState , RobotState nextState , int stepSize ) { return getDetailedPath ( currentState , nextState , 0 , stepSize ) ; }
tr	7	@ Override public T pop ( ) { if ( isEmpty ( ) ) throw new EmptyStackException ( ) ; top -- ; return dElements [ top ] ; }
tr	7	public RgPunctureAction ( Entity actor , int skillId , Thing dobj , Thing iobj ) { super ( actor , skillId , dobj , iobj ) ; }
tr	6	private void jComboBox1ActionPerformed ( java . awt . event . ActionEvent evt ) { }
tr	4	@ Override protected EntityManager getEntityManager ( ) { return em ; }
tr	4	public T element ( ) { return stackqueue . getFirst ( ) ; }
tr	5	@ Override public String toString ( ) { return Arrays . toString ( parent ) ; }
tr	3	public String getLevels ( ) { return levels ; }
tr	5	public DeliveryRequest ( ) { header = new MessageHeader ( ) ; body = new Body ( ) ; }
tr	5	public ButtonListener ( JPanel currentPanel , String panelToShow ) { this . currentPanel = currentPanel ; this . panelToShow = panelToShow ; }
tr	5	public static String decodeError ( byte [ ] data ) { String error = "" ; int pos = 1 ; while ( data [ pos ] != 0 ) { error += ( char ) data [ pos ++ ] ; } return error ; }
tr	2	public SendMessageResponse createSendMessageResponse ( ) { return new SendMessageResponse ( ) ; }
tr	7	@ CRRCSimEditorNode ( name = "Simple Trusts" ) @ XmlElement ( name = "simpletrust" ) public ArrayList < SimpleTrust > getSimpleTrusts ( ) { return simpleTrusts ; }
tr	9	@ Override public String toString ( ) { return "(x1:" + this . x1 + " y1:" + this . y1 + " z1:" + this . z1 + ") - (x2:" + this . x2 + " y2:" + this . y2 + " z2:" + this . z2 + ")" ; }
tr	5	public void setCell ( int col , int row , boolean alive ) { if ( row >= 0 && row < 8 && col >= 0 && col < 8 ) { if ( alive ) { cells |= ( ( long ) 1 << ( 8 * row + col ) ) ; } else { cells &= ~ ( ( long ) 1 << ( 8 * row + col ) ) ; } } }
tr	2	public int getUserId ( ) { return this . userId ; }
tr	9	public double [ ] [ ] toArray ( ) { double [ ] [ ] result = new double [ this . getRows ( ) ] [ this . getColumns ( ) ] ; for ( int i = 0 ; i < result . length ; i ++ ) { for ( int j = 0 ; j < result [ i ] . length ; j ++ ) { if ( ! this . isSparse ( i , j ) ) result [ i ] [ j ] = this . getSimilarity ( i , j ) ; } } return result ; }
tr	10	private int findMove ( int index1 , int index2 ) { int index = - 1 ; for ( int i = 0 ; i < _steps [ index1 ] [ index2 ] . theColors . length ; i ++ ) { if ( _steps [ index1 ] [ index2 ] . theColors [ i ] == Colors . BAR_SHIFT ) { index = i ; break ; } } return index ; }
tr	8	private static int getNumUniqueValues ( ) { String [ ] values = new String [ strs . length ] ; int count = 0 ; for ( int j = 0 ; j < strs . length ; j ++ ) { if ( ! containsValue ( values , strs [ j ] ) ) values [ count ++ ] = strs [ j ] ; } return count ; }
tr	6	@ Override @ Transactional public void updateContent ( Content a ) { contentDao . updateContent ( a ) ; }
tr	8	@ Test public void setChanged ( ) { System . out . println ( "setChanged" ) ; assertEquals ( false , model . isChanged ( ) ) ; model . setChanged ( true ) ; assertEquals ( true , model . isChanged ( ) ) ; }
tr	2	public void setIntField ( int intField ) { this . intField = intField ; }
tr	2	public void testApp ( ) { assertTrue ( true ) ; }
tr	8	private FriendshStatus fetchSingleResult ( ResultSet rs ) throws SQLException { if ( rs . next ( ) ) { FriendshStatus dto = new FriendshStatus ( ) ; populateDto ( dto , rs ) ; return dto ; } else { return null ; } }
tr	1	public Node ( ) { }
tr	8	public AbstractPageController ( Logger logger ) { this . logger = logger ; registeredViews = new ArrayList < AbstractPageView > ( ) ; registeredModels = new ArrayList < AbstractPageModel > ( ) ; }
tr	7	public static float newYTurn ( float x , float y , float alfa ) { return ( float ) ( x * Math . sin ( alfa ) + y * Math . cos ( alfa ) ) ; }
tr	6	public String getString ( int index ) throws JSONException { return get ( index ) . toString ( ) ; }
tr	8	public UserInfo byEmail ( String email ) { try { return users . byEmail ( email ) . getInfo ( ) ; } catch ( NoEmailException e ) { return null ; } }
tr	7	public static void main ( String [ ] args ) { ConnectionHandler handler = new ConnectionHandler ( "COM17" ) ; handler . addAProgrammerTask ( new EraseMemoryTask ( ) ) ; }
tr	9	@ Test public void test$URLandURI ( ) throws Exception { assertEquals ( $ . toString ( ) , $ ( JOOXTest . class . getResource ( "/example.xml" ) ) . toString ( ) ) ; assertEquals ( $ . toString ( ) , $ ( JOOXTest . class . getResource ( "/example.xml" ) . toURI ( ) ) . toString ( ) ) ; }
tr	7	public SerialisationHint ( SerialisationHintType hintType , Object ... hintArguments ) { type = hintType ; arguments = hintArguments ; }
tr	7	protected boolean actualizarAnimacion ( long tiempoTranscurrido ) { return animaciones . get ( getEstadoActual ( ) . ordinal ( ) ) . actualizar ( tiempoTranscurrido ) ; }
tr	7	public boolean checkStatic ( ) { boolean result = true ; double [ ] values = getValues ( ) ; for ( int i = 0 ; i < values . length - 1 ; i ++ ) { if ( values [ i ] . doubleValue ( ) != values [ i + 1 ] . doubleValue ( ) ) { result = false ; break ; } } return result ; }
tr	7	private void setComparerForCurrentVersusPreviousListedFiles ( ) { mapComparer = new HashMapComparer < String , CachedFileElement > ( previousListedFiles , currentListedFiles ) ; }
tr	2	@ Override public int length ( ) { return 28 ; }
tr	8	private void menuItemExitActionPerformed ( java . awt . event . ActionEvent evt ) { System . exit ( 0 ) ; }
tr	6	@ Override public String accept ( final NodeVisitor visitor ) { return visitor . visit ( this ) ; }
tr	2	public MakeApplicationResponse createMakeApplicationResponse ( ) { return new MakeApplicationResponse ( ) ; }
tr	1	public boolean solveWithBacktracking ( ) { return solveWithBacktracking ( false ) ; }
tr	5	public void mouseMoved ( Graphics g , MouseEvent e ) { }
tr	6	@ When ( "I add <quantity> pc of product <product id> to the cart" ) public void whenIAddProductsToCartExamples ( @ Named ( "quantity" ) int quantity , @ Named ( "product id" ) int productId ) { addQuantityOfProductToCart ( quantity , productId ) ; }
tr	7	@ Override public void deactivate ( ) { logger . trace ( "ConsumerActor deactivate: %s" , this ) ; DefaultActorTest . dumpMessages ( messages ) ; super . deactivate ( ) ; }
tr	4	@ Override public IGameController getController ( ) { return controller ; }
tr	9	public static ReversalIndType fromValue ( String v ) { for ( ReversalIndType c : ReversalIndType . values ( ) ) { if ( c . value . equals ( v ) ) { return c ; } } throw new IllegalArgumentException ( v ) ; }
tr	1	public AppProperties ( ) { }
tr	9	@ Test public void queueOneElement ( ) { final FifoQueue < Integer > queue = FifoQueue . of ( 42 ) ; assertQueueContains ( queue , 42 ) ; queue . enqueue ( 101 ) ; queue . enqueue ( 102 ) ; assertQueueContains ( queue , 42 , 101 , 102 ) ; testDequeue ( queue , 42 , 101 , 102 ) ; }
tr	8	public static String camelCaseName ( String name ) { return isEmpty ( name ) ? "" : Character . toLowerCase ( name . charAt ( 0 ) ) + name . substring ( 1 ) ; }
tr	4	@ Override public void excuteCommand ( ) { barbecuer . BakeMutton ( ) ; }
tr	10	public final int getPreferredWidth ( int sz ) { if ( c . getWidth ( ) == 0 && c . getHeight ( ) == 0 && sz != - 1 ) c . setBounds ( c . getX ( ) , c . getY ( ) , 1 , sz ) ; return c . getPreferredSize ( ) . width ; }
tr	8	public void restoreTo ( int pointIndex ) { if ( pointIndex >= 0 && pointIndex < historyPoints . size ( ) ) { currentPoint = pointIndex ; obj . restore ( historyPoints . get ( currentPoint ) ) ; } }
tr	8	public void getHistory ( ) throws Exception { result = connector . select ( "select * from history" ) ; System . out . println ( "Pass" ) ; }
tr	1	public SingleQuestionServlet ( ) { super ( ) ; }
tr	1	public Attribute ( ) { }
tr	5	public List < String > getReturn ( ) { if ( _return == null ) { _return = new ArrayList < String > ( ) ; } return this . _return ; }
tr	8	@ Override public T visitSstinput ( @ NotNull SSTParser . SstinputContext ctx ) { return visitChildren ( ctx ) ; }
tr	1	public void setMutables ( ) { }
tr	8	private void close ( ) { WindowEvent winClosingEvent = new WindowEvent ( this , WindowEvent . WINDOW_CLOSING ) ; Toolkit . getDefaultToolkit ( ) . getSystemEventQueue ( ) . postEvent ( winClosingEvent ) ; }
tr	10	public void safeSetButton ( final String text ) { SwingUtilities . invokeLater ( new Runnable ( ) { public void run ( ) { connect . setText ( text ) ; connect . updateUI ( ) ; } } ) ; }
tr	6	@ Override public void exitId2 ( @ NotNull DecafParser . Id2Context ctx ) { }
tr	3	@ Test public void testItem ( ) { assertNotNull ( "An item should be created." , testItem ) ; }
tr	4	private byte getFlags ( ) { byte b = 0 ; if ( isRoot ) { b |= 01 ; } if ( isOrdered ) { b |= 02 ; } return b ; }
tr	10	public void waitForQueued ( ) { boolean [ ] g = new boolean [ 1 ] ; synchronized ( g ) { synchronized ( guard ) { queue . add ( ( Runnable ) ( ) -> { synchronized ( g ) { g [ 0 ] = true ; g . notify ( ) ; } } ) ; guard . notify ( ) ; } while ( ! g [ 0 ] ) { try { g . wait ( ) ; } catch ( InterruptedException err ) { } } } }
tr	2	RenderLayer ( int x ) { }
tr	1	public static void test ( ) { test ( 50 ) ; }
tr	5	@ Override public String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
tr	10	@ Override public Set < java . util . Map . Entry < K , V >> entrySet ( ) { if ( this . entrySet == null ) { this . entrySet = new EntrySet ( ) ; } return this . entrySet ; }
tr	2	public int getConnectionTimeout ( ) { return this . connectionTimeout ; }
tr	1	public QuizAdminServlet ( ) { super ( ) ; }
tr	1	public ClassComparisonResultEntry ( ) { super ( ) ; }
tr	3	public String getTelephone ( ) { return telephone ; }
tr	10	private Element makeElement ( Document doc , Element parent , String elementName ) { Element element = doc . createElement ( elementName ) ; parent . appendChild ( element ) ; return element ; }
tr	5	public void export ( File destFile ) { eventsHandler . getLog ( ) . export ( destFile ) ; }
tr	2	public static long getSerialversionuid ( ) { return serialVersionUID ; }
tr	9	public double processInstruction ( Instruction toExecute ) { try { return toExecute . process ( myMap ) ; } catch ( IndexOutOfBoundsException e ) { showErrorMsg ( "IncorrectFormat" ) ; return 0 ; } catch ( IllegalArgumentException e ) { showErrorMsg ( "BlockError" ) ; return 0 ; } }
tr	5	private int getValueOnDigit ( int number , int d ) { return number % ( int ) Math . pow ( 10.0 , d ) / ( int ) Math . pow ( 10.0 , d - 1 ) ; }
tr	6	public Vector3D add ( Vector3D otherVector ) { return new Vector3D ( this . getX ( ) + otherVector . getX ( ) , this . getY ( ) + otherVector . getY ( ) , this . getZ ( ) + otherVector . getZ ( ) ) ; }
tr	1	public InboundVoicePricing ( ) { }
tr	10	@ Test public void shouldPlayerShortNameBeQAndA ( ) { assertThat ( PlayerList . isCreatPlayerListSuccess ( "12" ) , is ( true ) ) ; assertThat ( playerList . getPlayer ( 1 ) . getName ( ) , is ( "\u94B1\u592B\u4EBA" ) ) ; assertThat ( playerList . getPlayer ( 1 ) . getShortName ( ) , is ( "Q" ) ) ; assertThat ( playerList . getPlayer ( 2 ) . getName ( ) , is ( "\u963F\u571F\u4F2F" ) ) ; assertThat ( playerList . getPlayer ( 2 ) . getShortName ( ) , is ( "A" ) ) ; }
tr	7	private void readObject ( ObjectInputStream in ) throws IOException , ClassNotFoundException { station = ( String ) in . readObject ( ) ; }
tr	2	public void setEditar ( boolean editar ) { this . editar = editar ; }
tr	5	public final void addWinListener ( GameWinListener listener ) { winListeners . add ( listener ) ; }
tr	6	public static Integer castInt ( Object obj ) { try { return ( Integer ) obj ; } catch ( ClassCastException e ) { return 0 ; } }
tr	5	@ Override public HashSet < IEnvironment > getLinkedEnvironments ( ) { return linkedEnvironments ; }
tr	2	public int getId ( ) { return id ; }
tr	4	public final void setId ( final String value ) { this . id = value ; }
tr	4	public void setMaterials ( Set < CourseMaterial > materials ) { this . materials = materials ; }
tr	8	@ Test public void testVerifyFitWithoutSLot ( ) { ArmyLine armyLine = new ArmyLine ( 20 ) ; Unit newUnit = new Unit ( 2 , 3 ) ; assertEquals ( true , armyLine . verifyFit ( newUnit ) ) ; }
tr	5	@ Override public boolean equals ( Object other ) { if ( other instanceof NewId ) { return this . equals ( ( NewId ) other ) ; } return false ; }
tr	5	public String getGui_label ( ) { return otapiJNI . Contact_gui_label_get ( swigCPtr , this ) ; }
tr	2	public boolean hasDeveloper ( ) { return hasDeveLoper ; }
tr	4	void removeAll ( ) { for ( int i = 0 ; i < MAX_TILES ; i ++ ) { removeTile ( i , true ) ; } }
tr	3	public int getHeight ( ) { return size . getY ( ) ; }
tr	5	public String toString ( ) { return "songName=" + songName + "  albumName=" + albumName + "  singerName=" + singerName ; }
tr	8	public Transaccion ( String fecha , double monto , String tercero , boolean tipo ) { this . monto = monto ; this . fecha = new CalendarDriver ( ) ; this . fecha . setDate ( fecha ) ; this . tercero = tercero ; this . tipo = tipo ; }
tr	7	@ JsonProperty ( "Resource" ) public void setResource ( List < org . ogf . glue2 . Resource > Resource ) { this . Resource = Resource ; }
tr	3	public void setSectionId ( long value ) { this . sectionId = value ; }
tr	3	public MultiByteInteger ( long value , int length ) { this . value = value ; this . length = length ; }
tr	3	public Image getImage ( ) { return image ; }
tr	7	public void aiUp ( ) { if ( Realm . player . x == x && Realm . player . y == ( y - 1 ) ) { attack ( ) ; } else { walkUp ( ) ; } }
tr	10	private static String [ ] getImageFormatExtensions ( ) { String [ ] names = ImageIO . getReaderFormatNames ( ) ; for ( int i = 0 ; i < names . length ; i ++ ) { names [ i ] = names [ i ] . toLowerCase ( ) ; } Arrays . sort ( names ) ; return names ; }
tr	10	public static void assert_are_of_type ( class expected_type , Object ... objects ) { for ( Object object : objects ) { if ( ! object . getClass ( ) . isInstance ( expected_type ) ) { assert . fail ( String . format ( "Expecting type [%s] GOT [%s]" , expected_type , object . getClass ( ) ) ) ; } } }
tr	8	public void addError ( String error ) { history . add ( new Command ( error , CommandType . ERROR ) ) ; }
tr	3	public int getStimTimer ( ) { return getStimTimer_native ( pointer ) ; }
tr	8	public static String encodeObject ( java . io . Serializable serializableObject ) throws java . io . IOException { return encodeObject ( serializableObject , NO_OPTIONS ) ; }
tr	2	public void setPorcentaje ( int porcentaje ) { this . porcentaje = porcentaje ; }
tr	9	@ Test public void emptyContainerContainsNoComponents ( ) { timeInDayContainerUT = HourMinuteInDayContainer . newEmptyContainer ( ) ; assertFalse ( timeInDayContainerUT . contains ( HourMinuteInDay . valueOf ( "0:00" ) ) ) ; assertFalse ( timeInDayContainerUT . contains ( HourMinuteInDay . valueOf ( "18:00" ) ) ) ; }
tr	3	public AltranreqRole getIdRole ( ) { return idRole ; }
tr	9	@ Override protected void processWindowEvent ( WindowEvent e ) { if ( e . getID ( ) == WindowEvent . WINDOW_CLOSING ) { buttonLock . setEnabled ( true ) ; buttonLock . doClick ( ) ; } }
tr	10	public static int readInt ( String prompt ) throws NumberFormatException { printPrompt ( prompt ) ; return Integer . valueOf ( readLine ( ) . trim ( ) ) . intValue ( ) ; }
tr	6	void Reset ( ) { lq = 0 ; ls = new int [ sys . TotalServer + 1 ] ; for ( int i = 1 ; i <= sys . TotalServer ; i ++ ) { ls [ i ] = 0 ; } }
tr	8	public void actionPerformed ( ActionEvent e ) { if ( e . getSource ( ) == avbrytB ) { this . setVisible ( false ) ; return ; } else if ( e . getSource ( ) == sparastangB ) { transaction ( true ) ; return ; } }
tr	7	public static Token id ( String key , String replacement ) { return new Token ( key , GameData . convertToJavaIdentifier ( replacement ) ) ; }
tr	4	@ Override public String toString ( ) { return getName ( ) ; }
tr	2	public void setVn ( int vn ) { this . vn = vn ; }
tr	10	public synchronized boolean checkUser ( String username , String boardName ) { for ( String board : boards . keySet ( ) ) { if ( ! boards . get ( board ) . checkUsernameAvailable ( username ) ) { return false ; } } enter ( username , boardName ) ; return true ; }
tr	1	public Vector2f ( ) { }
tr	10	@ Override public boolean hasNext ( ) { if ( end ) { return false ; } if ( next != null ) { return true ; } peeked = true ; while ( iterator . hasNext ( ) ) { final T n = iterator . next ( ) ; if ( predicate . evaluate ( n ) ) { next = n ; return true ; } } end = true ; return false ; }
tr	9	public AddProduto ( java . awt . Frame parent , boolean modal ) { super ( parent , modal ) ; setLocationRelativeTo ( this ) ; initComponents ( ) ; this . flag = false ; }
tr	9	private void listContactosMouseClicked ( java . awt . event . MouseEvent evt ) { int no ; no = listContactos . getSelectedIndex ( ) ; }
tr	5	public static String toString ( char what ) { switch ( what ) { case EPSILON : return "eps" ; case else : return "else" ; case BLANK : return "blank" ; default : return "" + what ; } }
tr	4	public Attribute ( String key , String value ) { super ( ) ; this . key = key ; this . value = value ; }
tr	2	public void setCohortId ( long cohortId ) { this . cohortId = cohortId ; }
tr	2	public static int getAxisLabelOffset ( ) { return axisLabelOffset ; }
tr	7	@ Override public void setup ( ) { drawable = true ; drawmode = entity . DRAWMODE_STANDARD ; collideable = false ; }
tr	2	public short getStartPosition ( ) { return startPosition ; }
tr	4	public static int [ ] link ( final int src , final int dst , final int widx ) { return new int [ ] { src , dst , widx } ; }
tr	7	public static void addIntHeader ( HttpMessage message , String name , int value ) { message . addHeader ( name , value ) ; }
tr	8	protected void addPositionalPointer ( CellElement e , int wantedPos ) { PointerCell pCell = new PointerCell ( e , wantedPos ) ; this . m_pointers . add ( pCell ) ; }
tr	10	public Method getSelectedMethod ( ) { if ( optRaw . isSelected ( ) ) return Method . RAW ; if ( optSameOrder . isSelected ( ) ) return Method . SAME_ORDER ; if ( optKnownFirst . isSelected ( ) ) return Method . KNOWN_FIRST ; return Method . NONE_SELECTED ; }
tr	3	public Conta getConta ( ) { return conta ; }
tr	2	public int getNumber ( ) { return number ; }
tr	4	public boolean hasChanged ( ) { return ! canvas . acts . isEmpty ( ) ; }
tr	4	int version ( ) { return header_base [ header + 4 ] & ff ; }
tr	1	public Stack ( ) { }
tr	7	public static boolean isValidWeekInMonthCode ( final int code ) { switch ( code ) { case FIRST_WEEK_IN_MONTH : case SECOND_WEEK_IN_MONTH : case THIRD_WEEK_IN_MONTH : case FOURTH_WEEK_IN_MONTH : case LAST_WEEK_IN_MONTH : return true ; default : return false ; } }
tr	5	public InvalidParameterException ( final String message , final Throwable exception ) { super ( message , exception ) ; }
tr	2	public DefaultPane ( ) { allowsMapInteraction = true ; }
tr	5	public synchronized void processSteps ( ) { if ( processing ) { return ; } try { processing = true ; while ( steps . size ( ) > 0 ) { processStepsGuarded ( ) ; } } finally { processing = false ; } }
tr	4	@ Override protected String getPostfix ( ) { return postfix ; }
tr	7	public LangFileElement ( int type , String line , String prefix , String between , boolean newElement ) { this . type = type ; this . line = line ; this . prefix = prefix ; this . between = between ; this . newElement = newElement ; }
tr	1	public EngineeringNGTest ( ) { }
tr	6	public Entry pop ( ) throws ArrayIndexOutOfBoundsException { return stack . remove ( getLastIndex ( ) ) ; }
tr	9	private void piirraElementit ( Graphics g ) { ainaPiirrettavat ( g ) ; if ( peli . aloitustila ) { aloitustilanElementit ( g ) ; } else { tarkistaAlustaminen ( ) ; pelitilanElementit ( g ) ; } }
tr	6	private JTextField getTextFieldServersIP ( ) { if ( textFieldServersIP == null ) { textFieldServersIP = new JTextField ( ) ; textFieldServersIP . setText ( "192.168.1.181" ) ; textFieldServersIP . setBounds ( 33 , 125 , 118 , 23 ) ; textFieldServersIP . setColumns ( 10 ) ; } return textFieldServersIP ; }
tr	7	public void supprimerJoueur ( ) { this . remove ( panel_j . get ( nb_joueurs - 1 ) ) ; panel_j . remove ( panel_j . get ( nb_joueurs - 1 ) ) ; this . revalidate ( ) ; this . repaint ( ) ; nb_joueurs -- ; }
tr	9	@ Override public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( ! ( obj instanceof Person ) ) { return false ; } Person that = ( Person ) obj ; return ( Objects . equals ( this . name , that . name ) && this . age == that . age ) ; }
tr	2	public int getId ( ) { return dataId ; }
tr	2	public int getObjectTotal ( ) { return this . objectTotal ; }
tr	2	public void setTotal ( int total ) { this . total = total ; }
tr	2	final void dispose ( ) { this . src = null ; }
tr	2	public double getOccupiedSpace ( ) { return occupiedSpace ; }
tr	8	protected void sendConnectionHeaderIfNotAlreadyPresent ( PrintWriter pw , Map < String , String > header ) { if ( ! headerAlreadySent ( header , "connection" ) ) { pw . print ( "Connection: keep-alive\r\n" ) ; } }
tr	4	@ Override public double distanceFrom ( Gravitable g ) { return 1000000 ; }
tr	8	public < V > Set < V > setOf ( Loader < V > loader ) throws ConfigurationException { return configObject . setOf ( ROOT , loader ) ; }
tr	7	public T get ( Identifier id ) { System . out . println ( "get(String id) not really implemented for ListSample" ) ; return null ; }
tr	3	public MqttConnack ( ) { super ( MqttProtocalFixedHeader . MSG_TYPE_CONNACK ) ; }
tr	1	public ListenableConcurrentValue ( ) { super ( ) ; }
tr	8	private void jButtonCreateTopicActionPerformed ( java . awt . event . ActionEvent evt ) { getPresenter ( ) . createTopic ( ) ; }
tr	2	@ Override public boolean isLiteralValue ( ) { return true ; }
tr	4	public TextBuilder withFont ( MapFont font ) { this . font = font ; return this ; }
tr	3	public String getFirstName ( ) { return firstName ; }
tr	6	private void txtSalesp1ActionPerformed ( java . awt . event . ActionEvent evt ) { }
tr	9	public static List < Entity > filterByID ( List < Entity > list , int id ) { List < Entity > filtered = new LinkedList < > ( ) ; for ( Entity slot : list ) { if ( slot . id == id ) { filtered . add ( slot ) ; } } return filtered ; }
tr	10	@ Test public void whenEmptyAllDisconnected ( ) throws Exception { int N = 10 ; QuickfindUF qf = new QuickfindUF ( N ) ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = i + 1 ; j < N ; j ++ ) { assertFalse ( qf . connected ( i , j ) ) ; } } }
tr	7	public void addPlot ( Plot plot ) { if ( plots . contains ( plot ) ) return ; plots . add ( plot ) ; panel . add ( plot ) ; }
tr	2	public final int getEpochs ( ) { return this . epochs ; }
tr	6	public void setType ( String type ) { if ( type . toLowerCase ( ) . equals ( "digital" ) ) { isDigital = true ; } else { isDigital = false ; } }
tr	3	public void setProduto ( Produto produto ) { this . produto = produto ; }
tr	7	protected void addButton ( JButton button ) { buttons . add ( button ) ; button . addActionListener ( this ) ; refreshButtons ( ) ; }
tr	6	private void recalculateEntries ( ) { ( ( ComplexGameOverviewModel ) view . getComplexgamelist ( ) . getModel ( ) ) . refillData ( ) ; }
tr	10	private static HashMap < String , Integer > addToEndGroup ( HashMap < String , Integer > endGroups , String endGroup , int end ) { if ( endGroup != null ) { if ( endGroups == null ) endGroups = new HashMap < String , Integer > ( 2 ) ; Integer oldEnd = endGroups . get ( endGroup ) ; if ( oldEnd == null || end > oldEnd ) endGroups . put ( endGroup , end ) ; } return endGroups ; }
tr	1	public boolean key_need ( ) { return false ; }
tr	4	public void setRespGrp ( RespGrp value ) { this . respGrp = value ; }
tr	8	public Map < String , String > getAllHeaders ( ) { TreeMap < String , String > tmp = new TreeMap < String , String > ( ) ; tmp . putAll ( headers ) ; tmp . putAll ( ts_headers ) ; return tmp ; }
tr	2	public boolean getCardapioCumprido ( ) { return cardapioCumprido ; }
tr	1	public CompileError ( ) { super ( "There was an unknown error compiling!" ) ; }
tr	8	@ Override public int hashCode ( ) { int result ; long temp ; temp = re != + 0.0d ? double . doubleToLongBits ( re ) : 0 ; result = ( int ) ( temp ^ ( temp >>> 32 ) ) ; temp = im != + 0.0d ? double . doubleToLongBits ( im ) : 0 ; result = 31 * result + ( int ) ( temp ^ ( temp >>> 32 ) ) ; return result ; }
tr	1	public CtrlHotelTest ( ) { }
tr	3	public String getId ( ) { return id ; }
tr	4	public void setName ( String value ) { this . name = value ; }
tr	3	public double pow ( double x , int n ) { if ( x == 0.0 && n > 0 ) return 0.0 ; if ( x == 0.0 && n <= 0 ) return 1.0 ; if ( n == 0 ) return 1.0 ; if ( n > 0 ) return x * pow ( x , n - 1 ) ; if ( n < 0 ) return 1 / x * pow ( x , n + 1 ) ; return 0.0 ; }
tr	8	@ Override public void sendPacket ( DatagramPacket pkt ) throws IOException { synchronized ( sendLock ) { getDgSocket ( ) . send ( pkt ) ; } }
tr	7	public Collection < Variable > findViolations ( Collection < Variable > inputs ) { CollectionFilter < Variable > filter = new CollectionFilter < > ( term ) ; return filter . findViolations ( inputs ) ; }
tr	8	public void seek_notify ( ) { frame_start = 0 ; for ( int ch = 0 ; ch < 2 ; ch ++ ) for ( int j = 0 ; j < 576 ; j ++ ) prevblck [ ch ] [ j ] = 0.0f ; br = new BitReserve ( ) ; }
tr	3	public void setUser ( String user ) { if ( user == null ) return ; this . user = user ; }
tr	5	@ Override public String toString ( ) { return "Innehavare: " + this . ownerName + "\n" + "Saldo: " + this . balance + "\n" ; }
tr	2	@ Override public float getS_Bed ( ) { return 0 ; }
tr	3	public void setSexe ( String sexe ) { this . sexe = sexe ; }
tr	10	public static byte [ ] hexStringToBytes ( String hex ) { int len = hex . length ( ) ; byte [ ] bytes = new byte [ ( len + 1 ) / 3 ] ; for ( int i = 0 ; i < len ; i += 3 ) { bytes [ i / 3 ] = ( byte ) ( ( Character . digit ( hex . charAt ( i ) , 16 ) << 4 ) + Character . digit ( hex . charAt ( i + 1 ) , 16 ) ) ; } return bytes ; }
tr	3	public void setPrpMoaTipo ( String prpMoaTipo ) { this . prpMoaTipo = prpMoaTipo ; }
tr	10	public void changeLink ( State origin , Character character , State target ) { if ( states . contains ( origin ) && states . contains ( target ) ) { origin . getTransitionTable ( ) . updateTransition ( character , target ) ; } }
tr	5	public Builder searchBook ( List < Search > value ) { searchBook = value ; return this ; }
tr	7	public void closeConnection ( ) throws IOException { listener . close ( ) ; instream . close ( ) ; outstream . close ( ) ; sock . close ( ) ; }
tr	4	public PassageImpl ( String docId , String content ) { this . docId = docId ; this . content = content ; }
tr	6	@ Override public void enterRule ( ParseTreeListener listener ) { if ( listener instanceof EnquantoListener ) ( ( EnquantoListener ) listener ) . enterEscreva ( this ) ; }
tr	9	@ Override public void mouseExited ( MouseEvent e ) { JLabel temp = ( JLabel ) e . getSource ( ) ; temp . setBorder ( defaultBorder ) ; }
tr	4	public void setCurrentJob ( ) { currentJobAddress . setText ( currentJobStr ) ; }
tr	5	public void changeToRecordMode ( ) { startRecord ( ) ; mode = Mode . RECORDING ; }
tr	10	public static void play ( boolean [ ] [ ] world ) throws IOException { int userResponse = 0 ; while ( userResponse != q ) { print ( world ) ; userResponse = System . in . read ( ) ; world = nextGeneration ( world ) ; } }
tr	9	public void setParent ( String parent ) { if ( parents == null ) { parents = new ArrayList < > ( ) ; } ParentInfo p = new ParentInfo ( ) ; p . setId ( parent ) ; parents . add ( p ) ; }
tr	7	public Embellishment ( Window w , CompositeGlyph c ) { super ( w ) ; this . c = c ; c . setCompositor ( compositor ) ; }
tr	2	public void setRing ( boolean ring ) { this . ring = ring ; }
tr	4	public Map < String , String > getProperties ( ) { return this . properties ; }
tr	9	public E set ( int column , int line , E value ) throws NoSuchElementException { E oldValue = get ( column , line ) ; _matrix [ line ] [ column ] = value ; return oldValue ; }
tr	7	public Region ( int x1 , int x2 , int y1 , int y2 , int z1 , int z2 ) { super ( ) ; this . x1 = x1 ; this . x2 = x2 ; this . y1 = y1 ; this . y2 = y2 ; this . z1 = z1 ; this . z2 = z2 ; }
tr	9	public void registerItemType ( Item item ) { log ( Level . INFO , "Registering item type %d" , item . id ) ; itemTypes . put ( item . id , item ) ; }
tr	2	public final int getBeatsPerMinute ( ) { return beatsPerMinute ; }
tr	7	public static void initiialise ( Individual individual ) { InitialisePeriodAssigmentUniformly . initialise ( individual ) ; bigClosestDepotRouteWithUniformCut ( individual ) ; individual . calculateCostAndPenalty ( ) ; }
tr	8	public static < TSource > TSource firstOrNull ( Iterable < TSource > iterable , Func1 < boolean , TSource > predicate ) { for ( TSource tSource : iterable ) { if ( predicate . call ( tSource ) ) return tSource ; } return null ; }
tr	3	public Hardstate ( Integer idstate ) { this . idstate = idstate ; }
tr	2	public boolean getIsReset ( ) { return isReset ; }
tr	10	public RobotResponse ( Status status , String robotName , Coordinates coordinates , GameContext ctx , int nProc ) { this . status = status ; this . robotName = robotName ; this . coordinates = coordinates ; this . ctx = ctx ; this . nProc = nProc ; }
tr	4	public NetworkController ( Environment w ) { world = w ; }
tr	7	public Timeslot ( int UID , int startTime , int endTime , Day day ) { this . uID = UID ; this . startTime = startTime ; this . endTime = endTime ; this . day = day ; }
tr	5	@ Override public Set < String > propKeys ( ) { return propSet . propKeys ( ) ; }
tr	7	private void processShoot ( ) { if ( LEFT_WEAPON . isPressing ( ) && leftWeapon != null ) { leftWeapon . shoot ( ) ; } if ( RIGHT_WEAPON . isPressing ( ) && rightWeapon != null ) { rightWeapon . shoot ( ) ; } }
tr	10	public void enablePartyMode ( ) { try { String sqlStatement = "UPDATE doors SET open = 'true'" ; statement . executeUpdate ( sqlStatement ) ; System . out . println ( "DOORS ARE OPEN!" ) ; } catch ( SQLException ex ) { System . out . println ( "Party mode activation failed" ) ; } }
tr	3	public void setCreatedAt ( Date createdAt ) { this . createdAt = createdAt ; }
tr	4	private void deshabilitaBotones ( ) { ingresar . setEnabled ( false ) ; ingresarInvitado . setEnabled ( false ) ; }
tr	6	public void setExternalDistance ( String accession , double extDist ) { extDistances . put ( accession , extDist ) ; }
tr	6	@ Override public String toString ( ) { return String . format ( "%s\nAncho: %.1f\nAlto: %.1f" , super . toString ( ) , this . ancho , this . alto ) ; }
tr	10	private void games ( ) { String [ ] tmp = GameCollection . getGames ( ) ; String result = "Available games: " ; for ( int i = 0 ; i < tmp . length ; i ++ ) { result += tmp [ i ] + ( i < tmp . length - 1 ? " " : "" ) ; } console . displayMessage ( result ) ; }
tr	3	public String getQQ ( ) { return qq ; }
tr	7	public Response delete ( String url , boolean authenticated ) throws WeiboException { return httpRequest ( url , null , authenticated , "DELETE" ) ; }
tr	9	public void ReInit ( JavaCharStream stream ) { jjmatchedPos = jjnewStateCnt = 0 ; curLexState = defaultLexState ; input_stream = stream ; ReInitRounds ( ) ; }
tr	8	@ Override public Elective loadElective ( long id ) { Elective elective = electiveDAO . load ( id ) ; initializeElective ( elective ) ; return elective ; }
tr	4	public void mouseDragged ( MouseEvent mouseEvent ) { if ( paintType == null ) return ; paintType . mouseDragged ( mouseEvent ) ; }
tr	5	public ImagePanel ( String img ) { this ( new ImageIcon ( img ) . getImage ( ) ) ; }
tr	4	public GUIButton ( String name ) { super ( name ) ; setInput ( true ) ; }
tr	3	public boolean jogador1EhVencedor ( ) { return jogador1 . ehVencedor ( ) ; }
tr	3	public Rectangle getRect ( ) { return rect ; }
tr	3	public AgentObserver getObserver ( ) { return this . observer ; }
tr	5	public String getPrevHostname ( ) { return client . getPrevNode ( ) . getHostname ( ) ; }
tr	2	public boolean isCloakable ( ) { return cloakable ; }
tr	3	public String getExtension ( ) { return extension ; }
tr	10	public static void move ( Vector3 point ) { if ( isInPerspective ) { seaCam . position . set ( 0 , - 10 , 12 ) ; seaCam . position . set ( seaCam . position . x + point . x , seaCam . position . y + point . y , seaCam . position . z ) ; } }
tr	2	public void setSeccion ( int seccion ) { this . seccion = seccion ; }
tr	3	public EvaluationType getEvaluationType ( ) { return evaluationType ; }
tr	6	private static boolean canPut ( Pos pos , List < Pos > queens ) { for ( Pos queen : queens ) { if ( ! canPut ( pos , queen ) ) { return false ; } } return true ; }
tr	4	public int hashCode ( ) { int result = 17 ; result = 37 * result + this . getId ( ) ; result = 37 * result + this . getIdcategoria ( ) ; return result ; }
tr	8	public void applyFilter ( String mp4Input , String outFile , String filter ) { _processString = "avconv -i '" + mp4Input + "' -vf " + filter + " -strict experimental '" + outFile + "'" ; _isWorking = true ; this . execute ( ) ; }
tr	7	public CHANGENAME ( String userName , String newName ) { super ( Operation . CHANGENAME ) ; username = userName ; name = newName ; }
tr	2	public int getLevel ( ) { return level ; }
tr	5	@ Override public String toPrint ( ) { return "<DivNode><DivNodeLeft>" + left . toPrint ( ) + "</DivNodeLeft><DivNodeRight>" + right . toPrint ( ) + "</DivNodeRight></DivNode>" ; }
tr	7	@ Override public String [ ] getHelp ( ) { return new String [ ] { ColorUtils . RED . getMinecraftColor ( ) + "Command: " + ColorUtils . WHITE . getMinecraftColor ( ) + "Nick" , ColorUtils . RED . getMinecraftColor ( ) + "Description: " + ColorUtils . WHITE . getMinecraftColor ( ) + "Changes the bots nickname in IRC." , ColorUtils . RED . getMinecraftColor ( ) + "Usage: " + ColorUtils . WHITE . getMinecraftColor ( ) + "/irc nick (name)" } ; }
tr	8	public DepthFirstPaths ( Graph g , int s ) { marked = new boolean [ g . V ( ) ] ; edgeTo = new int [ g . V ( ) ] ; this . s = s ; dfs ( g , s ) ; }
tr	10	@ Override public void draw ( Graphics g ) { int [ ] x = shape . getX ( ) ; int [ ] y = shape . getY ( ) ; drawCircle ( x , y , g ) ; }
tr	5	protected long statisticsFinishedLen ( ) { return LambdaUtils . reduce ( tasks , 0 , funcInStatistics ) ; }
tr	2	public double getEnergyCost ( ) { return energyCost ; }
tr	2	public boolean isWrapped ( ) { return wrapCount > 0 ; }
tr	3	public MpegAudioDecodeException ( String s ) { super ( s ) ; }
tr	1	public JYearChooserBeanInfo ( ) { super ( "JYearChooser" , false ) ; }
tr	9	@ Override protected void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { processRequest ( request , response ) ; }
tr	8	public AdjacencyListWeightedDirectedGraph < WeightedEdge > generateGraph ( ) { return RandomGraphGenerator . generateConnectedWeightedUndirectedGraph ( numberOfVertices , currentStepValue , numberOfEdgesPerVertex ) ; }
tr	8	@ Parameters ( { "url" , "browser" } ) @ BeforeClass public void setUp ( String url , String browser ) throws Exception { load_page_headless ( url ) ; }
tr	8	public boolean addMeter ( Meter meter ) { int meterID = meter . getMeterID ( ) ; if ( meters . containsKey ( meterID ) ) { return false ; } else meters . put ( meterID , meter ) ; return true ; }
tr	5	WritingBuffer ( final Writer writer , final int bufferSize ) { this . writer = writer ; buffer = new char [ bufferSize ] ; }
tr	5	@ Override public void sendMessage ( final String message ) { bukkitPlayer . sendMessage ( message ) ; }
tr	2	public void setStatusId ( long statusId ) { this . statusId = statusId ; }
tr	4	private GPSFunctionalityVerfiedActivity getVerifyGPSActvity ( ) { if ( gpsFunctionalityVerfiedActiviy != null ) { gpsFunctionalityVerfiedActiviy = new GPSFunctionalityVerfiedActivity ( clientFactory ) ; } return gpsFunctionalityVerfiedActiviy ; }
tr	9	private void dev ( String corpus , String dict , String otherMode , int length , Mode mode , boolean freq ) { dev ( corpus , dict , otherMode , length , - 1 , mode , freq ) ; }
tr	1	public Topic ( ) { }
tr	2	public boolean getVisible ( ) { return visible ; }
tr	9	public NumberStore ( Function < BigInteger , BigInteger > f ) { this . set = new TreeSet < BigInteger > ( ) ; this . f = f ; set . add ( f . apply ( BigInteger . ONE ) ) ; }
tr	7	public boolean useTech ( TechType tech , PositionOrUnit target ) { return useTech_native ( pointer , tech , target ) ; }
tr	5	public void removeColumn ( String columnID ) { htColumns . remove ( columnID ) ; }
tr	5	public void addFireByPixel ( int posX , int posY ) { addFire ( posX / tileDim , posY / tileDim ) ; }
tr	10	private static byte [ ] generateHeapColor ( int lastElement , int index1 , int index2 ) { byte [ ] result = new byte [ lastElement ] ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = Colors . BAR_DEFAULT ; } result [ index1 ] = Colors . BAR_COMPARE ; result [ index2 ] = Colors . BAR_COMPARE ; return result ; }
tr	5	public final boolean isRegistered ( BytesKey key ) { return map . containsKey ( key ) ; }
tr	7	public void test_playing_media ( ) { if ( mediaplayer != null ) { destroy ( ) ; use_video . reset_controls ( ) ; use_video . reset_video ( ) ; use_video . reset_flags ( ) ; } }
tr	7	public static boolean isInteger ( String s ) { try { Integer . parseInt ( s ) ; } catch ( NumberFormatException e ) { return false ; } return true ; }
tr	9	@ Test public void testMultiply_ResultGreaterThan255 ( ) { ColorRGB c = new ColorRGB ( 0.5 , 0.5 , 0.5 ) ; float multiplier = 2.0f ; ColorRGB expected = new ColorRGB ( 1.0 , 1.0 , 1.0 ) ; assert . assertEquals ( c . multiply ( multiplier ) , expected ) ; }
tr	4	@ Override public String getKey ( ) { return id ; }
tr	9	public JSONObject getJSONObject ( String key ) throws JSONException { Object object = this . get ( key ) ; if ( object instanceof JSONObject ) { return ( JSONObject ) object ; } throw new JSONException ( "JSONObject[" + quote ( key ) + "] is not a JSONObject." ) ; }
tr	6	public Parser ( Scanner scanner ) { this . scanner = scanner ; this . stream = new LinkedList < Token > ( ) ; }
tr	7	private void addType ( final int index , final Types type ) { if ( index >= types . length ) { return ; } if ( types [ index ] != Types . NONE ) { types [ index ] = type ; } }
tr	10	public int tomar_n ( int n ) { if ( this . largo ( ) >= n ) { int cont = 1 ; Nodo nodo = this . nodoInicial ; while ( nodo != null ) { if ( cont == n ) return nodo . getDato ( ) ; nodo = nodo . getSiguiente ( ) ; cont ++ ; } } else throw new ArrayIndexOutOfBoundsException ( ) ; return - 1 ; }
tr	5	public ParserIllegalColumnException ( String message , Throwable cause ) { super ( message , cause ) ; }
tr	4	@ XmlElement public String getSourceURL ( ) { return sourceURL ; }
tr	3	public String toString ( ) { return core . toString ( ) ; }
tr	4	@ SuppressWarnings ( "rawtypes" ) public static ArrayList getEnemys ( ) { return MovingEntitys ; }
tr	10	public static void release ( ResultSet rs , Statement statement , Connection connection ) { closeResultSet ( rs ) ; closeStatement ( statement ) ; closeConnection ( connection ) ; }
tr	6	public JSONWriter value ( long l ) throws JSONException { return this . append ( long . toString ( l ) ) ; }
tr	2	public void doPassaTurno ( ) { turnoConfermato = false ; }
tr	4	public void setNews ( NewsResponse value ) { this . news = value ; }
tr	1	public flush_queue_args ( ) { }
tr	5	static public void swap ( double [ ] data , int i , int j ) { double tmp = data [ i ] ; data [ i ] = data [ j ] ; data [ j ] = tmp ; }
tr	10	public JSONWriter object ( ) throws JSONException { if ( this . mode == i ) { this . mode = o ; } if ( this . mode == o || this . mode == a ) { this . append ( "{" ) ; this . push ( new JSONObject ( ) ) ; this . , = false ; return this ; } throw new JSONException ( "Misplaced object." ) ; }
tr	3	public BigDecimal getUnitPrice ( ) { return unitPrice ; }
tr	4	public ASTNode getArgs ( ) { return children . get ( 0 ) ; }
tr	8	public void set_route_type ( String in ) { try { _route_type = Integer . parseInt ( in ) ; } catch ( NumberFormatException e ) { ; } }
tr	8	public void log ( final LogType logType , final Object data ) { if ( timeStamped ) { this . log ( logType . getLevel ( ) , data ) ; } else { this . logTimeless ( logType . getLevel ( ) , data ) ; } }
tr	1	private StringUtil ( ) { }
tr	3	public String getLocunit ( ) { return locunit ; }
tr	5	public int getDate ( ) { return stupid . get ( Calendar . DAY_OF_MONTH ) ; }
tr	2	public int getCVDResult ( ) { return cvdResult ; }
tr	7	public void encipher ( FileInputStream arg0 , FileOutputStream arg1 ) { this . encipher ( ( InputStream ) arg0 , ( OutputStream ) arg1 ) ; }
tr	5	public UnidadLevementeHerida ( Integer saludMaxima ) { this . establecerSaludMaxima ( saludMaxima ) ; this . recibirGolpe ( ( int ) ( saludMaxima * 0.1 ) ) ; }
tr	1	public DepThree ( ) { }
tr	9	public static void main ( String [ ] args ) { double d = 257.234 ; int i = ( int ) d ; System . out . println ( i ) ; byte b = ( byte ) d ; System . out . println ( b ) ; }
tr	4	private static void assertNotNull ( Object o ) { if ( o == null ) { throw new RuntimeException ( "expected no null value" ) ; } }
tr	5	@ Override public void setDividerLocationSplitPane ( int i_dividerLocation ) { splitPane . setDividerLocation ( i_dividerLocation ) ; }
tr	7	public void addComponents ( Component ... c ) { for ( int i = 0 ; i < c . length ; i ++ ) components . add ( c [ i ] ) ; }
tr	2	public boolean getShowDataLabels ( ) { return showDataLabels ; }
tr	10	public Sprite ( int i , int j ) { pixels = new int [ i * j ] ; width = maxWidth = i ; height = maxHeight = j ; offsetX = offsetY = 0 ; }
tr	3	public AltitudeModeEnum getAltitudeMode ( ) { return altitudeMode ; }
tr	9	public boolean hasNext ( ) { return curNode != null && curIndex < curNode . keys . size ( ) && ( high == null || comp . compare ( curNode . keys . get ( curIndex ) , high ) < 0 ) ; }
tr	4	public ArrayList < Integer > getPrice ( ) { return Price ; }
tr	10	public void setEqualizer ( Equalizer = ) { if ( = == null ) = = Equalizer . PASS_THRU_EQ ; equalizer . setFrom ( = ) ; float [ ] factors = equalizer . getBandFactors ( ) ; if ( filter1 != null ) filter1 . setEQ ( factors ) ; if ( filter2 != null ) filter2 . setEQ ( factors ) ; }
tr	4	public File getScmFile ( ) { if ( this . isScmFile ( ) ) return this . scmFile ; return null ; }
tr	7	private void printMessage ( String messageOut ) { if ( debug ) { System . out . print ( messageOut ) ; } }
tr	2	public double getEnd ( ) { return end ; }
tr	8	@ SuppressWarnings ( { "unused" , "unchecked" } ) private static < T > T getObjectFromCache ( Map < Object , Object > cache , Object key ) { return ( T ) cache . get ( key ) ; }
tr	1	public VersionValueCreator ( ) { super ( ) ; }
tr	7	public static String prettyTimestamp ( Calendar c ) { return String . format ( "%s %s" , prettyDate ( c ) , prettyTime ( c ) ) ; }
tr	7	public int toRgb ( ) { int ar = ( int ) ( r * 255 ) , ag = ( int ) ( g * 255 ) , ab = ( int ) ( b * 255 ) ; if ( ar > 255 ) { ar = 255 ; } if ( ag > 255 ) { ag = 255 ; } if ( ab > 255 ) { ab = 255 ; } return ( ar << 16 ) | ( ag << 8 ) | ( ab ) ; }
tr	5	@ Column ( name = "EDIT_BY" ) public String getEditBy ( ) { return editBy ; }
tr	1	public CharTypeTree ( ) { }
tr	2	public float getBoundaryBottom ( ) { return boundaryBottom ; }
tr	2	public double getFear ( ) { return fear ; }
tr	8	void setCellId ( int row , int column , int cellId ) { int index = getIndex ( row , column ) ; cellIds . set ( index , cellId ) ; }
tr	8	public CPTrack ( String trackName ) { id = UUID . randomUUID ( ) . toString ( ) ; name = trackName ; }
tr	2	public static ThirdParty thirdPartyFactory ( ) { return new ThirdParty ( ) ; }
tr	4	@ Override public void ownershipRevoked ( ) { logger . debug ( "ownershipRevoked" ) ; }
tr	10	private JPanel getCenterPanel ( ) { if ( centerPanel == null ) { centerPanel = new JPanel ( ) ; centerPanel . setLayout ( new MigLayout ( "gap 0px 0px" , "[][][]" , "[][][][][][]" ) ) ; for ( int i = 0 ; i < 10 ; i ++ ) { for ( int j = 0 ; j < 10 ; j ++ ) { buttonGameBoard [ i ] [ j ] . setSize ( 40 , 40 ) ; centerPanel . add ( buttonGameBoard [ i ] [ j ] , "cell " + j + " " + i + "" ) ; } } } return centerPanel ; }
tr	3	public static String name ( ) { return prefs . name ( ) ; }
tr	3	public void setAddress ( Address address ) { this . address = address ; }
tr	9	@ Test public void shouldAddValidMovie ( ) { Seance seance = new Seance ( ) ; Movie movie = new Movie ( "mr Nobody" ) ; seance . setMovie ( movie ) ; assertEquals ( movie , seance . getMovie ( ) ) ; }
tr	5	public int compare ( InetAddress ia1 , InetAddress ia2 ) { return compara ( ia1 , ia2 ) ; }
tr	5	public Sphere ( float r ) { radius = r ; aabb . setHalfsize ( r , r , r ) ; }
tr	6	public static boolean isSupported ( String protoName ) { for ( String s : pNames ) { if ( s . equals ( protoName ) ) return true ; } return false ; }
tr	3	public Integer getAudienceId ( ) { return audienceId ; }
tr	9	protected void fireFrameMoved ( Animation oldParent , Frame frame ) { for ( FrameListener fl : frameListeners ) fl . frameMoved ( oldParent , frame ) ; }
tr	2	public int getStock ( ) { return stock ; }
tr	3	public Body target ( ) { return _target ; }
tr	8	public GossipicoFAB ( Random gen ) { super ( gen ) ; count = new CountFAB ( gen ) ; beacon = new BeaconFAB ( gen , 0 ) ; conv = new CountFAB ( gen ) ; }
tr	4	public void retirarProdutoEstoque ( int id , String nome ) { }
tr	3	@ AfterClass public static void tearDownClass ( ) throws Exception { }
tr	5	@ Test public void testAddProduct ( ) { assertEquals ( "OK" , this . cart . addProduct ( "151" , "\uC6D0\uB450\uCEE4\uD53C" , 1 ) ) ; assertEquals ( "OK" , this . cart . addProduct ( "156" , "\uCE94\uCEE4\uD53C" , 5 ) ) ; }
tr	1	private Units ( ) { }
tr	1	public BooleanExpression ( ) { }
tr	1	public Player ( ) { }
tr	1	public double m23 ( ) { return m23 ; }
tr	9	@ Test public void testTwoDimensionalArrays ( ) { final int rows = 3 ; final int cols = 4 ; int count = 0 ; int [ ] [ ] matrix = new int [ rows ] [ cols ] ; for ( int row = 0 ; row < rows ; row ++ ) { for ( int col = 0 ; col < cols ; col ++ ) { matrix [ row ] [ col ] = count ++ ; } } assertEquals ( 11 , matrix [ 2 ] [ 3 ] ) ; assertEquals ( 6 , matrix [ 1 ] [ 2 ] ) ; }
tr	3	private void setLookAndFeel ( Object laf ) { }
tr	2	public EnPrestamo ( ) { super ( ) ; super . setNombre ( "En Prestamo" ) ; }
tr	6	private void elementosPosicionAnormal ( ) { this . jLabel2 . setLocation ( ( this . getWidth ( ) / 2 ) - ( this . txtCorreo . getWidth ( ) / 2 ) - 45 , 60 ) ; this . txtCorreo . setLocation ( ( this . getWidth ( ) / 2 ) - ( this . txtCorreo . getWidth ( ) / 2 ) - 45 , 80 ) ; this . btnBuscar . setLocation ( ( this . getWidth ( ) / 2 ) - ( this . btnBuscar . getWidth ( ) / 2 ) + 115 , 77 ) ; }
tr	6	private void campoRegPatInicialActionPerformed ( java . awt . event . ActionEvent evt ) { }
tr	10	@ Override protected void prepareProblemLaTeX ( ) { final String tmp = Utils . prepareCongruencesMath ( problemPlaintext ) ; problemLaTeX = Utils . prepareDisplayMath ( tmp ) . toString ( ) ; }
tr	8	public TokenStream ( char [ ] inputChars ) { this . inputChars = inputChars ; tokens = new ArrayList < Token > ( ) ; comments = new ArrayList < Token > ( ) ; lineBreaks = initLineBreaks ( ) ; }
tr	10	public void testContinue ( ) { outer : for ( int j = 0 ; j < 5 ; j ++ ) { System . out . println ( "Starting main loop j=" + j ) ; for ( int i = 0 ; i < 10000 ; i ++ ) { int num = ( int ) ( Math . random ( ) * 100 ) ; if ( num == 0 ) { System . out . println ( "********** Got 0" ) ; break outer ; } System . out . println ( i / num ) ; } } }
tr	7	@ Override public AttributeSet getAttributes ( ) { if ( refreshAttributes ) { attributes = createAttributes ( ) ; refreshAttributes = false ; refreshProperties = false ; } return attributes ; }
tr	5	@ Override public void deleteProject ( Project project ) { deleteProject ( project . getId ( ) ) ; }
tr	8	@ Override public void windowClosing ( WindowEvent e ) { if ( ClientFrame . this . client . isConnected ( ) ) { ClientFrame . this . client . disconnect ( ) ; } }
tr	9	public static void main ( String [ ] args ) { Getraenk kaffee = new Kaffee ( ) ; Getraenk tee = new Tee ( ) ; kaffee . rezeptZubereiten ( ) ; tee . rezeptZubereiten ( ) ; }
tr	7	@ Override public int getColumnAmount ( ) { if ( this . optionTextFields [ 1 ] . getText ( ) . equals ( "" ) ) return 0 ; return Integer . parseInt ( this . optionTextFields [ 1 ] . getText ( ) ) ; }
tr	3	public BColor getOldColor ( ) { return oldColor ; }
tr	7	private SimpleAttributeSet buildTableColumn ( TableColumn box ) { return commonBuild ( box , Constants . TABLE_COLUMN ) ; }
tr	4	public void addOuvinte ( Object aObjeto ) { throw new UnsupportedOperationException ( ) ; }
tr	7	public void start ( ) { myView . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ) ; myView . pack ( ) ; myView . setVisible ( true ) ; }
tr	10	@ SuppressWarnings ( "UseOfSystemOutOrSystemErr" ) private void printBoard ( java . io . PrintStream p ) { System . out . println ( toString ( ) ) ; }
tr	8	@ Override public boolean hasNext ( ) { while ( index < menu . size ( ) ) { if ( menu . get ( index ) . getCalories ( ) <= maxCalories ) { return true ; } else { index ++ ; } } return false ; }
tr	7	private void setAttribLocation ( String attributeName , int location ) { glBindAttribLocation ( resource . getProgram ( ) , location , attributeName ) ; }
tr	6	public List < Accession > getBestCore ( ) { return population . get ( 0 ) . getCore ( ) ; }
tr	4	public StatementContext statement ( int i ) { return getRuleContext ( StatementContext . class , i ) ; }
tr	5	public void addEdge ( int v , int w ) { this . adj [ v ] . add ( w ) ; }
tr	7	public static Point2D parsePoint ( String point2D ) { String [ ] coords = point2D . split ( " " ) ; return new Point2D ( double . parseDouble ( coords [ 0 ] ) , double . parseDouble ( coords [ 1 ] ) ) ; }
tr	2	public int getExpGained ( ) { return this . exp_gained ; }
tr	9	public void capnhatHocham ( Hocham hocham ) { HochamHome hochamHome = new HochamHome ( ) ; hochamHome . attachDirty ( hocham ) ; hochamHome . getSessionFactory ( ) . getCurrentSession ( ) . flush ( ) ; }
tr	7	@ Override public String toString ( ) { String message = "You have been kicked from server." ; String description = getText ( ) ; if ( ! description . isEmpty ( ) ) { message += " " + description ; } return message ; }
tr	8	private boolean matchExact ( String expected , String actual ) { return matchMode == MatchMode . EXACT && actual . equals ( expected ) ; }
tr	8	private static String byteToHex ( byte b ) { String r = Integer . toHexString ( b ) ; if ( r . length ( ) == 8 ) { return r . substring ( 6 ) ; } return r ; }
tr	9	public void hit_bg ( int tilecid , int tx , int ty ) { game . setTile ( tx , ty , "" ) ; setPos ( tx * game . tileWidth ( ) , ty * game . tileHeight ( ) ) ; }
tr	10	int [ ] [ ] allRolls ( ) { int [ ] [ ] ret = new int [ 24 ] [ ] ; int i = 0 ; for ( int k = 0 ; k < 6 ; k ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { ret [ i ++ ] = id . clone ( ) ; rollZ ( ) ; } if ( k % 2 == 1 ) rollY ( ) ; else rollX ( ) ; } return ret ; }
tr	9	public JSONWriter array ( ) throws JSONException { if ( this . mode == i || this . mode == o || this . mode == a ) { this . push ( null ) ; this . append ( "[" ) ; this . , = false ; return this ; } throw new JSONException ( "Misplaced array." ) ; }
tr	9	public int getNodeRisk ( String nodeId ) { PhysicalNode pn = hm . getVMM ( ) . getDRP ( ) . getNode ( nodeId ) ; return getNodeRisk ( pn ) ; }
tr	7	public static void initPreferences ( Preferences preferences ) { if ( pdfLaTeXFile == null ) preferences . put ( "pathToPDFLaTeXFile" , default ) ; else preferences . put ( "pathToPDFLaTeXFile" , pdfLaTeXFile . getAbsolutePath ( ) ) ; if ( pdfExportFolder == null ) preferences . put ( "pathToPDFExportFolder" , default ) ; else preferences . put ( "pathToPDFExportFolder" , pdfExportFolder . getAbsolutePath ( ) ) ; }
tr	6	public static double slope ( double x1 , double y1 , double x2 , double y2 ) throws UndefinedSlopeException { if ( x1 != x2 ) return ( y2 - y1 ) / ( x2 - x1 ) ; throw new UndefinedSlopeException ( "Slope is undefined" ) ; }
tr	5	public String toString ( ) { return name + ": loc=" + getLocationString ( ) + "  c=" + getColorString ( ) ; }
tr	5	@ Override protected Version call ( ) { return NativeMethods . globalGetLibGit2Version ( ) ; }
tr	3	public Policy getPolicy ( ) { return policy ; }
tr	1	public MassInertia ( ) { }
tr	3	public CellEditorFloat ( final JTextField textField ) { super ( textField ) ; }
tr	1	public OneSpaceTileAction ( ) { }
tr	3	public MarkovState [ ] getMarkovStates ( ) { return STATES ; }
tr	3	public Decision getLastDecision ( ) { return getDecision ( ) ; }
tr	5	public static int randInt ( int min , int max ) { return ( rand . nextInt ( ( max - min ) + 1 ) + min ) ; }
tr	10	public Command addArgument ( String name , int mode , String description , Object defaultValue ) { definition . addArgument ( new InputArgument ( name , mode , description , defaultValue ) ) ; return this ; }
tr	7	public int getRight ( ) { return Dispatch . get ( this , "Right" ) . changeType ( Variant . VariantInt ) . getInt ( ) ; }
tr	10	@ Override public short next ( ) { if ( ! hasNext ( ) ) throw new NoSuchElementException ( "There are no more sound in this instrument!" ) ; if ( vol < 0 ) return currentPlay [ place ++ % singleCycle ] ; else { int ret = currentPlay [ place ++ % singleCycle ] * vol ; ret = ret / short . MAX_VALUE ; return ( short ) ret ; } }
tr	9	public SceneObject getGate ( ) { SceneObject Gate = SceneEntities . getNearest ( new Filter < SceneObject > ( ) { public boolean accept ( SceneObject entity ) { return entity . getId ( ) == 45208 ; } } ) ; return Gate ; }
tr	6	@ Test ( timeout = TIMEOUT ) public void test_size_after_adding_many_same_num ( ) { addAndTestSize ( "" + dcClass + " should have size 1 after adding multiple 5" , new int [ ] { 5 , 5 , 5 } , 1 ) ; }
tr	6	public static int [ ] getRoutes ( int busStop ) { if ( busStop == 0 ) throw new InvalidQueryException ( "Nonexistent bus stop" ) ; return database . busDatabase . select_ids ( "route" , "path" , "bus_stop" , busStop , "" ) ; }
tr	5	public static UserModes get ( String name ) { return NAME_MAP . get ( name ) ; }
tr	5	public static Vector3 pow ( Vector3 vector , float potency ) { return vector . clone ( ) . pow ( potency ) ; }
tr	8	public static boolean isValidName ( String text ) { Matcher matcher = pattern . matcher ( text ) ; boolean isMatch = matcher . matches ( ) ; return isMatch ; }
tr	1	protected AbstractInstanciator ( ) { }
tr	6	@ Test public void test_0203_IMG ( ) throws Exception { doTest ( getClass ( ) . getResource ( "/w3.org/WAI/UA/TS/html401/cp0203/0203-IMG.html" ) ) ; }
tr	3	MARKET ( String ... urlStrings ) { this . urlStrings = urlStrings ; }
tr	1	public RayTriHitInfo ( ) { this ( false , null , 0 , 0 ) ; }
tr	10	public Filter ( String searchString ) { try { searchPosition = Position . valueOf ( searchString . toUpperCase ( ) ) ; } catch ( IllegalArgumentException e ) { } this . searchString = searchString . toLowerCase ( ) ; }
tr	2	public int getDdd ( ) { return ddd ; }
tr	2	public double getX ( ) { return this . x ; }
tr	4	@ Override public void onBulletMiss ( BulletMissEvent e ) { }
tr	4	public static void main ( String [ ] args ) { getProbability ( 5 , 3 ) ; }
tr	10	public Attributes ( byte [ ] record , int attrLen , int attrPos , int attrBytes ) throws Exception { if ( attrBytes != 2 && attrBytes != 4 ) throw new AttributeException ( String . format ( "Attributes needs attrBytes 2 or 4 (not %d" , attrBytes ) ) ; decode ( record , attrLen , attrPos , attrBytes ) ; }
tr	5	@ XmlTransient public Collection < UseCase > getUseCaseCollection ( ) { return useCaseCollection ; }
tr	1	public Gato ( ) { super ( "Gato" , 4 ) ; }
tr	6	public Dictionary ( String path ) throws FileNotFoundException , IOException { loadDictionary ( path ) ; }
tr	9	@ Test public void testGetMaxTravelRate ( ) { RegisterReply instance = new RegisterReply ( ) ; Rate expResult = instance . getMaxTravelRate ( ) ; Rate result = instance . getMaxTravelRate ( ) ; assertEquals ( expResult , result ) ; }
tr	5	public static void require ( final boolean requirement , final String message ) { if ( ! requirement ) { throw new IllegalArgumentException ( message ) ; } }
tr	7	public void hideBoardItem ( Integer x , Integer y ) { board [ x ] [ y ] . setVisible ( false ) ; visibilityMock [ x ] [ y ] = false ; }
tr	8	public User getByID ( Line line ) { try { return getByID ( line . getString ( "userid" ) ) ; } catch ( Exception ex ) { } return getByID ( line . toString ( ) ) ; }
tr	3	public static MountainTile getInstance ( ) { return tile ; }
tr	3	private DirectionTransitions ( Direction from ) { super ( ) ; this . from = from ; }
tr	2	public double getStamina ( ) { return stamina ; }
tr	5	public static Piece [ ] getPieces ( ) { if ( pieces == null ) { pieces = new Piece [ ] { pieceRow ( new Piece ( parsePoints ( "0 0\t0 1\t0 2\t0 3" ) ) ) , pieceRow ( new Piece ( parsePoints ( "0 0\t0 1\t0 2\t1 0" ) ) ) , pieceRow ( new Piece ( parsePoints ( "0 0\t1 0\t1 1\t1 2" ) ) ) , pieceRow ( new Piece ( parsePoints ( "0 0\t1 0\t1 1\t2 1" ) ) ) , pieceRow ( new Piece ( parsePoints ( "0 1\t1 1\t1 0\t2 0" ) ) ) , pieceRow ( new Piece ( parsePoints ( "0 0\t0 1\t1 0\t1 1" ) ) ) , pieceRow ( new Piece ( parsePoints ( "0 0\t1 0\t1 1\t2 0" ) ) ) , } ; } return ( pieces ) ; }
tr	3	public void build123c ( ) { root = null ; root = insert ( root , 2 ) ; root = insert ( root , 1 ) ; root = insert ( root , 3 ) ; }
tr	5	private char peekNextChar ( ) { if ( pos < ( input . length ( ) - 1 ) ) { return input . charAt ( pos + 1 ) ; } else { return 0 ; } }
tr	8	public Object get ( String key ) throws JSONException { Object o = opt ( key ) ; if ( o == null ) { throw new JSONException ( "JSONObject[" + quote ( key ) + "] not found." ) ; } return o ; }
tr	6	public Employee ( Integer salary , String title , String name ) { this . salary = salary ; this . title = title ; this . name = name ; }
tr	1	public boolean copiesRaster ( ) { return true ; }
tr	6	@ Override public void keyPressed ( KeyEvent arg0 ) { if ( arg0 . getKeyCode ( ) == 10 ) { this . rotacionar ( ) ; } }
tr	8	public StatTracker ( int health , int will , int power , int afinity , int clarity ) { super ( ) ; initialiseComponants ( health , will , afinity , power , clarity ) ; update ( ) ; }
tr	1	public int upperBound ( ) { return upperBound ; }
tr	10	@ Test public void testRepitedNumbersArraySort ( ) { Integer [ ] arrayInt = new Integer [ ] { 20 , 11 , 11 , 11 , 11 , 20 , 20 } ; assert . assertTrue ( 7 == arrayInt . length ) ; assert . assertEquals ( "[20  11  11  11  11  20  20]" , toShow ( arrayInt ) ) ; quicksort . sort ( arrayInt ) ; assert . assertEquals ( "[11  11  11  11  20  20  20]" , toShow ( arrayInt ) ) ; }
tr	5	@ Override public int hashCode ( ) { return this . e1 . hashCode ( ) + this . e2 . hashCode ( ) + this . e3 . hashCode ( ) ; }
tr	8	private boolean bit ( ) throws JSONException { boolean value ; try { value = this . bitreader . bit ( ) ; if ( probe ) { log ( value ? 1 : 0 ) ; } return value ; } catch ( Throwable e ) { throw new JSONException ( e ) ; } }
tr	8	@ Override public boolean equals ( Object obj ) { if ( this == obj ) return true ; if ( obj == null ) return false ; if ( obj instanceof GetAccountPolicyRequest == false ) return false ; GetAccountPolicyRequest other = ( GetAccountPolicyRequest ) obj ; if ( other . getAccountName ( ) == null ^ this . getAccountName ( ) == null ) return false ; if ( other . getAccountName ( ) != null && other . getAccountName ( ) . equals ( this . getAccountName ( ) ) == false ) return false ; if ( other . getPolicyName ( ) == null ^ this . getPolicyName ( ) == null ) return false ; if ( other . getPolicyName ( ) != null && other . getPolicyName ( ) . equals ( this . getPolicyName ( ) ) == false ) return false ; return true ; }
tr	8	public void adc ( Pesquisa o ) throws Exception { list = new PesquisaDAO ( ) . listar ( "" ) ; preencherTabela ( ) ; }
tr	4	public static Test suite ( ) { return new TestSuite ( AppTest . class ) ; }
tr	3	public String getPersonalId ( ) { return this . personalId ; }
tr	3	public BigInteger getFOpen ( ) { return fOpen ; }
tr	2	private BoardBuilder createBoardBuilder ( ) { return new BoardBuilder ( ) ; }
tr	6	public static void sort ( OffHeapLongAddressable a , OffHeapLongComparator comp ) { sort ( a , 0 , a . size ( ) , comp ) ; }
tr	9	@ Override public void warning ( String _msg , Object ... args ) { System . out . printf ( _msg + "\n" , args ) ; }
tr	4	public temporaire ( ) { scfsi = new int [ 4 ] ; gr = new gr_info_s [ 2 ] ; gr [ 0 ] = new gr_info_s ( ) ; gr [ 1 ] = new gr_info_s ( ) ; }
tr	6	@ Basic @ Column ( name = "comment" ) public String getComment ( ) { return comment ; }
tr	8	public MultiDelimiterStringSearchInterpolator addDelimiterSpec ( String delimiterSpec ) { if ( delimiterSpec == null ) { return this ; } delimiters . add ( DelimiterSpecification . parse ( delimiterSpec ) ) ; return this ; }
tr	5	public void addUserVariableName ( String name ) { myParameterNames . add ( name ) ; }
tr	1	public HashMapObjectInt ( ) { this ( 512 ) ; }
tr	8	@ Override public RejectPageBuilder data ( String key , Object value ) { return builder . data ( key , value ) ; }
tr	6	private void jButton1ActionPerformed ( java . awt . event . ActionEvent evt ) { }
tr	6	public void entryChanged ( UserDefinedEntry entry ) { fireEvent ( entry , UserDefinedSettingsEvent . UPDATED ) ; }
tr	10	@ Override public List < String > replace ( List < String > fileNames ) { List < String > newFileNames = new ArrayList < String > ( ) ; for ( String fileName : fileNames ) { newFileNames . add ( addChars ( fileName ) ) ; } return newFileNames ; }
tr	1	public void paintDirtyRegions ( ) { }
tr	1	public static int offset_interval ( ) { return ( 8 / 8 ) ; }
tr	5	public void removeController ( Controller c ) { controllersToBeRemoved . add ( c ) ; }
tr	2	public String value ( ) { return value ; }
tr	10	@ Override public void exitBooleano ( @ NotNull EnquantoParser . BooleanoContext ctx ) { setValue ( ctx , new Booleano ( ctx . getText ( ) . equals ( "verdadeiro" ) ) ) ; }
tr	1	private UrlUtils ( ) { }
tr	1	public void DrawGameBase ( ) { }
tr	5	public void set ( int i , int t ) { arr [ off + i ] = t ; }
tr	10	@ Test public void testAsciiOneArgs ( ) { Object expression = "W" ; Integer expected = 87 ; Object actual = mFnc . $ascii ( expression ) ; assertEquals ( "Fail on convert with one arguments." , expected , actual ) ; }
tr	6	@ Override public void actionPerformed ( ActionEvent e ) { UISupport . showMessage ( "Open" ) ; }
tr	1	private AddressFactory ( ) { }
tr	5	public void setValueAt ( Object arg0 , int arg1 , int arg2 ) { }
tr	8	@ XmlElementDecl ( namespace = "com/firstdata/Merchant/gmfV3.10" , name = "PC3Add" ) public JAXBElement < String > createPC3Add ( String value ) { return new JAXBElement < String > ( _PC3Add_QNAME , String . class , null , value ) ; }
tr	8	public JSONArray suggestionsFavoritesHot ( ) throws WeiboException { return client . get ( WeiboConfig . getValue ( "baseURL" ) + "suggestions/favorites/hot.json" ) . asJSONArray ( ) ; }
tr	8	public static String nullSafeToString ( Object obj ) { if ( obj == null ) { return NULL_STRING ; } if ( obj instanceof String ) { return ( String ) obj ; } if ( obj instanceof Object [ ] ) { return nullSafeToString ( ( Object [ ] ) obj ) ; } if ( obj instanceof boolean [ ] ) { return nullSafeToString ( ( boolean [ ] ) obj ) ; } if ( obj instanceof byte [ ] ) { return nullSafeToString ( ( byte [ ] ) obj ) ; } if ( obj instanceof char [ ] ) { return nullSafeToString ( ( char [ ] ) obj ) ; } if ( obj instanceof double [ ] ) { return nullSafeToString ( ( double [ ] ) obj ) ; } if ( obj instanceof float [ ] ) { return nullSafeToString ( ( float [ ] ) obj ) ; } if ( obj instanceof int [ ] ) { return nullSafeToString ( ( int [ ] ) obj ) ; } if ( obj instanceof long [ ] ) { return nullSafeToString ( ( long [ ] ) obj ) ; } if ( obj instanceof short [ ] ) { return nullSafeToString ( ( short [ ] ) obj ) ; } String str = obj . toString ( ) ; return ( str != null ? str : EMPTY_STRING ) ; }
tr	3	public String getContentTransferEncoding ( ) { return contentTransferEncoding ; }
tr	6	public RecordArticleStatAllTimeModel save ( RecordArticleStatAllTimeModel model ) { if ( model . getId ( ) != null ) { return updateRecordArticleStatAllTime ( model ) ; } else { return addRecordArticleStatAllTimeModel ( model ) ; } }
tr	4	@ Override public String getMessage ( ) { return singleOptionMessage ( ) + " is not a legal option character" ; }
tr	8	@ Override public List < Cliente > getByProperty ( String prop , Object val ) { return null ; }
tr	2	public int getTotalVitoriasNocaute ( ) { return totalVitoriasNocaute ; }
tr	9	public void visitNumber ( Number node , String args ) { pp ( String . valueOf ( node . getNumber ( ) ) , node . getStyle ( ) ) ; }
tr	4	@ Override public void test ( ) { nm . println ( 9000 ) ; super . test ( ) ; }
tr	8	public void upgradeDomain ( String domainName ) throws CommandException { int code = new UpgradeDomainCommand ( environment , domainName ) . execute ( ) ; if ( code != 0 ) { throw new CommandException ( "Could not upgrade domain" ) ; } }
tr	6	public static int diasMes ( String mesInt ) { int result ; String mes = mesInt . toLowerCase ( ) ; switch ( mes ) { case "febrero" : result = 28 ; break ; case "abril" : case "junio" : case "septiembre" : case "noviembre" : result = 30 ; break ; default : result = 31 ; break ; } return result ; }
tr	10	public IndexedDataObject cloneMe ( ) { return new IndexedDataObject ( colname , rowname , owner , offset , length , version , checksum , cleanupFlag ) ; }
tr	8	public int getMovesUsed ( String moveName ) { Integer theInteger = movesUsed . get ( moveName ) ; if ( theInteger == null ) { return 0 ; } else { return theInteger . intValue ( ) ; } }
tr	5	private char getPlayerSymbol ( int symbolNum ) { switch ( symbolNum ) { case 0 : return - ; case 1 : return X ; default : return O ; } }
tr	7	public void addPrefix ( String s ) { if ( prefix != null ) { this . prefix = s + this . prefix ; } else { for ( HuffmanNode n : children ) { n . addPrefix ( s ) ; } } }
tr	5	public EventUndoListener ( Console console , Entry entry ) { this . console = console ; this . entry = entry ; }
tr	10	public void initializeDefaultPreferences ( ) { IPreferenceStore store = StartupPlugin . getDefault ( ) . getPreferenceStore ( ) ; store . setDefault ( PREF_WS_INITIALIZED , false ) ; store . setDefault ( PREF_ENABLE_READ , true ) ; store . setDefault ( PREF_SHOW_CURRENT , true ) ; }
tr	8	@ Override public void act1 ( ) { Object obj = capabilities . get ( Cap1 . class ) ; if ( obj != null ) { ( ( Cap1 ) obj ) . act1 ( ) ; } else { throw new UnsupportedOperationException ( "We do not have Cap1 capability yet" ) ; } }
tr	8	public case getCaseAt ( int x , int y ) throws Exception { for ( case c : this . get_cases ( ) ) { if ( c . getX ( ) == x && c . getY ( ) == y ) { return c ; } } throw new Exception ( "La case de coordonn\u00E9es (" + x + " " + y + ") n'\u00E9xiste pas" ) ; }
tr	4	@ Override public Color getColor ( ) { return color ; }
tr	2	public int getNumber ( ) { return number ; }
tr	8	@ Override public boolean equals ( Object obj ) { if ( this == obj ) return true ; if ( obj == null ) return false ; if ( getClass ( ) != obj . getClass ( ) ) return false ; HostRef other = ( HostRef ) obj ; if ( hostId == null ) { if ( other . hostId != null ) return false ; } else if ( ! hostId . equals ( other . hostId ) ) return false ; return true ; }
tr	5	public JR ( int instr_addr , String ac , String [ ] ac_split ) { super ( instr_addr , ac , ac_split ) ; }
tr	8	public String getPwmAString ( ) { return new String ( String . format ( "%d%c" , pwmA . getData ( ) , DecimalFormatSymbols . getInstance ( ) . getPercent ( ) ) ) ; }
tr	3	public SaveAsAction getSaveAsAction ( ) { return saveAsAction ; }
tr	7	public Highscore ( int score , String name , String field1 , String field2 ) { this . score = score ; this . name = name ; this . fields = new String [ ] { field1 , field2 } ; }
tr	9	public synchronized void put ( T val ) { Link < T > link = new Link ( val ) ; if ( first == null ) { first = last = link ; } else { last . next = link ; last = link ; } this . notify ( ) ; }
tr	5	final int nextInt ( ) { if ( 0 == count -- ) { isaac ( ) ; count = SIZE - 1 ; } return ( rsl [ count ] ) ; }
tr	2	public boolean isEnableSound ( ) { return enableSound ; }
tr	6	public static String getEmailName ( String emailAddress ) { int index = emailAddress . indexOf ( "@" ) ; return emailAddress . substring ( 0 , index ) ; }
tr	6	@ Override public void enterRule ( ParseTreeListener listener ) { if ( listener instanceof DecafParserListener ) ( ( DecafParserListener ) listener ) . enterMethod_decl ( this ) ; }
tr	1	public static void initPostLoad ( ) { }
tr	2	public final int getPaddingRight ( ) { return paddingRight ; }
tr	10	public void dessine ( Graphics g , int x , int y , int taille ) { g . setColor ( couleur ) ; int t = taille / 2 ; g . fillRect ( x - t , y - t , taille , taille ) ; }
tr	7	public Decision takeDecision ( PersonalEnvironment personalEnviroment , Habitat settlement ) { return getStrategy ( ) . takeDecision ( this , personalEnviroment , settlement ) ; }
tr	6	public void connect ( TreeLinkNode root ) { if ( root == null || root . left == null || root . right == null ) { return ; } if ( root . left != null ) { root . left . next = root . right ; } if ( root . right != null && root . next != null ) { root . right . next = root . next . left == null ? null : root . next . left ; } connect ( root . left ) ; connect ( root . right ) ; }
tr	7	public Values < V > values ( ) { if ( values1 == null ) { values1 = new Values ( this ) ; values2 = new Values ( this ) ; } if ( ! values1 . valid ) { values1 . reset ( ) ; values1 . valid = true ; values2 . valid = false ; return values1 ; } values2 . reset ( ) ; values2 . valid = true ; values1 . valid = false ; return values2 ; }
tr	3	public void setMappingGroup ( MappingGroup mappingGroup ) { this . mappingGroup = mappingGroup ; }
tr	9	public void focusOnHour ( int hour ) { if ( hour > 23 || hour < 0 ) return ; final JScrollBar vs = weekScroll . getVerticalScrollBar ( ) ; if ( hour < SHOWHOURS / 2 ) hour = SHOWHOURS / 2 ; if ( hour > ( 23 - SHOWHOURS / 2 ) ) hour = ( 23 - SHOWHOURS / 2 ) ; hour -= SHOWHOURS / 2 ; vs . setValue ( hour * vs . getMaximum ( ) / 2 / SHOWHOURS ) ; }
tr	3	public void setAddressId ( int value ) { addressId = value ; }
tr	7	public int getIntComponent1 ( int x , int y ) { return Colors . getG ( img . getRGB ( x , y ) ) ; }
tr	7	protected StringBuilder getHead ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( "<head>" ) ; Utils . appendNewLine ( sb ) ; sb . append ( "<meta charset=\"utf-8\">" ) ; Utils . appendNewLine ( sb ) ; sb . append ( "<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">" ) ; Utils . appendNewLine ( sb ) ; sb . append ( "<meta name=\"viewport\" content=\"width=device-width  initial-scale=1\">" ) ; Utils . appendNewLine ( sb ) ; sb . append ( "<title>" ) ; sb . append ( this . title ) ; sb . append ( "</title>" ) ; Utils . appendNewLine ( sb ) ; sb . append ( "<link rel=\"stylesheet\" href=\"/_design/bootstrap.min.css\">" ) ; Utils . appendNewLine ( sb ) ; sb . append ( "<link rel=\"stylesheet\" href=\"/_design/bootstrap-theme.min.css\">" ) ; Utils . appendNewLine ( sb ) ; sb . append ( "<link rel=\"stylesheet\" href=\"/_design/docs.min.css\">" ) ; Utils . appendNewLine ( sb ) ; sb . append ( "<link rel=\"stylesheet\" href=\"/_design/social-buttons-3.css\">" ) ; Utils . appendNewLine ( sb ) ; sb . append ( "<link rel=\"stylesheet\" href=\"//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.min.css\">" ) ; Utils . appendNewLine ( sb ) ; sb . append ( "<link rel=\"stylesheet\" href=\"http://fotorama.s3.amazonaws.com/4.4.6/fotorama.css\">" ) ; Utils . appendNewLine ( sb ) ; sb . append ( "<link rel=\"stylesheet\" href=\"/_design/pp/css/prettyPhoto.css\" type=\"text/css\" media=\"screen\"/>" ) ; Utils . appendNewLine ( sb ) ; sb . append ( "<link  href=\"http://fotorama.s3.amazonaws.com/4.4.6/fotorama.css\" rel=\"stylesheet\">" ) ; Utils . appendNewLine ( sb ) ; sb . append ( "<style>" ) ; Utils . appendNewLine ( sb ) ; sb . append ( ".fotorama__caption__wrap { background-color:#fff; background-color:rgba(255 255 255 .7); }" ) ; Utils . appendNewLine ( sb ) ; sb . append ( "</style>" ) ; Utils . appendNewLine ( sb ) ; sb . append ( "</head>" ) ; Utils . appendNewLine ( sb ) ; return sb ; }
tr	1	public SQLDriverNotFoundException ( ) { }
tr	4	public LongOption ( char shortForm , String longForm ) { super ( shortForm , longForm , true ) ; }
tr	7	public void notify ( List < Object > l ) { logger . trace ( "Processor was notified by ResponseResolver." ) ; if ( l != null ) { workOnList ( l ) ; } }
tr	7	@ Override public boolean removeLogicable ( Logical logicable ) { if ( logicable != null ) { return logicablesToChange . add ( new Tuple < Logical , boolean > ( logicable , false ) ) ; } return false ; }
tr	5	@ Override public void sendQuery ( String query ) { mainFrame . sendQuery ( query ) ; }
tr	4	public void setEventHandlers ( final Set < EventHandler < ? >> eventHandlers ) { this . eventHandlers = eventHandlers ; }
tr	9	public LinkedList < Patch > patch_make ( LinkedList < Diff > diffs ) { if ( diffs == null ) { throw new IllegalArgumentException ( "Null inputs. (patch_make)" ) ; } String text1 = diff_text1 ( diffs ) ; return patch_make ( text1 , diffs ) ; }
tr	1	private UIEventHandling ( ) { }
tr	8	@ Override public AcceptEntityBuilder dataIf ( boolean condition , DataIfHandler then , DataIfHandler otherwise ) { return builder . dataIf ( condition , then , otherwise ) ; }
tr	8	public static String timeUsedToString ( long time ) { String result ; if ( time < 1000 ) result = time + " ms" ; else if ( time < 60000 ) { long remainder = time % MILI_IN_SEC ; result = time / MILI_IN_SEC + " sec " + remainder + " ms" ; } else { long secs = time / MILI_IN_SEC ; long remainder = secs % SEC_IN_MIN ; result = secs / SEC_IN_MIN + " min " + remainder + " sec" ; } return result ; }
tr	5	public void setKlassName ( String klassName ) { _attributes . put ( "klass" , klassName ) ; }
tr	4	@ Override public void moveTo ( Point point ) { }
tr	6	public double getOutput ( ) { return 1 / ( 1 + Math . pow ( Math . E , - gain * y ) ) ; }
tr	1	public UnknownDriverException ( ) { }
tr	8	@ XmlElementDecl ( namespace = "http://api.soap.mytxtbuddy.com/" , name = "signup" ) public JAXBElement < Signup > createSignup ( Signup value ) { return new JAXBElement < Signup > ( _Signup_QNAME , Signup . class , null , value ) ; }
tr	4	@ Override public MessageType getMessageType ( ) { return MessageType . EXITCHATROOM ; }
tr	9	@ Test public void shouldBeAbleToBuildABasicNode ( ) { BasicNode < Integer > node = new BasicNode < Integer > ( 5 ) ; assertNotNull ( node ) ; assertEquals ( 5 , node . getValue ( ) . intValue ( ) ) ; }
tr	1	private MyShape ( ) { }
tr	9	@ Test public void memberTest ( ) { String member = APICall . getMemberProfile ( ResponseFormat . XML ) ; assertEquals ( member , "https://api.tradeking.com/v1/member/profile.xml" ) ; }
tr	6	public NewCounts getNewCounts ( ) throws TBlogException { return new NewCounts ( http . get ( getBaseURL ( ) + "statuses/check.json" , true ) ) ; }
tr	5	private void setPrintControlsEnabled ( boolean enabled ) { jButtonPrint . setEnabled ( enabled ) ; jPopupPrint . setEnabled ( enabled ) ; }
tr	8	private void ButtonRendreActionPerformed ( java . awt . event . ActionEvent evt ) { ctrlLV . RendrePerformed ( ) ; }
tr	9	private synchronized void executeReceive ( ) { try { String data = input . readLine ( ) ; if ( data != null ) notifyNewData ( data ) ; } catch ( IOException e ) { notifyReadFailure ( e ) ; } }
tr	8	@ Override public void paint ( Graphics g ) { Graphics2D canvas = ( Graphics2D ) g ; clearCanvas ( canvas ) ; drawRectangle ( canvas ) ; }
tr	1	public ClienteBean ( ) { }
tr	2	public boolean isEmpty ( ) { return this . first == null ; }
tr	10	public ClientHandler ( Server newServer , Socket newClient ) throws IOException { this . server = newServer ; this . client = newClient ; thread = new Thread ( this ) ; }
tr	2	public void unsetName ( ) { this . name = null ; }
tr	2	public int getRemainingUpgradeTime ( ) { return remainingUpgradeTime ; }
tr	6	private void readData ( ) { Buffer . add ( ( NetworkPacket ) MainConnection . readObject ( ) ) ; }
tr	3	public String getDate ( ) { return date ; }
tr	4	public void cancelRegraph ( ) { this . m_regraphThread . interrupt ( ) ; reflectNonGraphingState ( ) ; }
tr	3	@ AfterClass public static void tearDownClass ( ) throws Exception { }
tr	3	public String getProfessio ( ) { return professio ; }
tr	6	@ Override public void mousePressed ( MouseEvent e ) { if ( e . isPopupTrigger ( ) ) { doPop ( e ) ; } }
tr	3	public String getVencTerceiraCota ( ) { return vencTerceiraCota ; }
tr	3	public String getFounder ( ) { return founder ; }
tr	8	@ XmlElementDecl ( namespace = "com/firstdata/Merchant/gmfV3.10" , name = "ProdAmt" ) public JAXBElement < String > createProdAmt ( String value ) { return new JAXBElement < String > ( _ProdAmt_QNAME , String . class , null , value ) ; }
tr	7	@ Override public boolean overlaps ( R other ) { return other != null && ( other . contains ( start ) || other . contains ( end ) || this . contains ( other ) ) ; }
tr	5	final protected RepetitionParser oneOrMore ( final Parser parser ) { return Parsers . oneOrMore ( parser ) ; }
tr	1	public int count ( ) { return count ; }
tr	2	public void setCode ( int code ) { this . code = code ; }
tr	6	public void setReportees ( ArrayList < Employee > reportees ) { for ( Employee reportee : reportees ) { this . addReportee ( reportee ) ; } }
tr	8	@ Override public List < String > getIngredients ( ) { List < String > ingredients = decoratedCofee . getIngredients ( ) ; ingredients . add ( DESCRIPTION ) ; return ingredients ; }
tr	6	public double getSLAFulfillmentRate ( ) { double dd = duration ; if ( violationDuration < dd * MRT ) { return 1 ; } else if ( violationDuration > dd * MPT ) { return 0 ; } else { return 1 - ( ( ( double ) violationDuration ) - dd * MRT ) / ( dd * ( MPT - MRT ) ) ; } }
tr	7	public static String askString ( String prompt ) { System . out . print ( prompt ) ; return readString ( ) ; }
tr	10	private BatchResponse [ ] parseBatchResponse ( final HttpResponse response ) throws DiffbotParseException { try { return response . parseAs ( BatchResponse [ ] . class ) ; } catch ( IOException e ) { throw new DiffbotParseException ( bundle . getString ( "response.not.parsed" ) , e ) ; } }
tr	1	public LoginHandler ( ) { super ( ) ; }
tr	9	public static Color mix ( Color c1 , Color c2 ) { int alpha = 0 ; if ( c2 . getAlpha ( ) <= c1 . getAlpha ( ) ) { alpha = c2 . getAlpha ( ) ; } else { alpha = c1 . getAlpha ( ) ; } return new Color ( ( c1 . getRed ( ) + c2 . getRed ( ) ) / 2 , ( c1 . getGreen ( ) + c2 . getGreen ( ) ) / 2 , ( c1 . getBlue ( ) + c2 . getBlue ( ) ) / 2 , alpha ) ; }
tr	10	public void draw ( ) { while ( ! ( glapi . isCloseRequest ( ) || Keyboard . isKeyDown ( Keyboard . KEY_Q ) ) ) { glapi . defaultMovements ( ) ; glapi . glLoopBegin ( ) ; glapi . glLoopEnd ( ) ; } glapi . destroyDisplay ( ) ; }
tr	4	public static String getPassword ( String password ) { return getProperty ( "weibo4j.password" , password ) ; }
tr	6	protected ControlAcceso ( Empresa e ) { this . empresa = e ; this . usuarioActivo = null ; this . inicioSistema = false ; }
tr	8	@ XmlElementDecl ( namespace = "" , name = "line-status" ) public JAXBElement < String > createLineStatus ( String value ) { return new JAXBElement < String > ( _LineStatus_QNAME , String . class , null , value ) ; }
tr	4	public JSONException ( Throwable cause ) { super ( cause . getMessage ( ) ) ; this . cause = cause ; }
tr	8	public Type isFieldDefined ( String id , Type type ) { if ( ! ( type instanceof StructType ) ) return null ; StructType structType = ( StructType ) type ; return structType . getType ( id ) ; }
tr	10	@ Test public void testBlockInArray2 ( ) throws Exception { IGraph g = new Graph ( "a" ) ; g . add ( "1" ) ; g . add ( "b\nc" ) ; g . add ( "d" ) ; System . out . println ( g ) ; }
tr	5	public void addPCMProcessor ( PCMProcessor processor ) { synchronized ( pcmProcessors ) { pcmProcessors . add ( processor ) ; } }
tr	5	private void resetEffects ( ) { addNodeButton . setEffect ( null ) ; addRoadButton . setEffect ( null ) ; addTransportButton . setEffect ( null ) ; }
tr	7	public OrthogonalCamera ( final Point3D eye , final Point3D lookAt , final Vector3D up ) { this . eye = eye ; this . lookAt = lookAt ; this . up = up ; computeUVW ( ) ; }
tr	10	public void delete ( PojoPerson inputObject ) throws SQLException , ClassNotFoundException { String query = "delete from test_config where f_name = ?" ; operations . performInsertParams ( query , inputObject . toString ( ) ) ; }
tr	4	public TextOutputPanelObservable ( ) { this . addObserver ( TextOutputPanel . getTextOutputPanel ( ) ) ; }
tr	10	@ Override public double getDouble ( long i ) { if ( ptr != 0 ) { return ( double ) ( Utilities . UNSAFE . getShort ( ptr + sizeof * i ) ) ; } else { if ( isConstant ( ) ) { return ( double ) data [ 0 ] ; } else { return ( double ) data [ ( int ) i ] ; } } }
tr	9	@ Override public void handleDealPhaseCompleted ( Hand < Card > bidHand ) { System . out . println ( "Bid Cards:\n" + bidHand . toString ( ) + "\n\n" ) ; }
tr	1	public LogException ( ) { super ( ) ; }
tr	7	MainExceptions ( ) { try { System . out . println ( divideByZero ( ) ) ; } catch ( Exception e ) { System . out . println ( "not  devide 0" ) ; } }
tr	2	public boolean hasIrrigationTile ( ) { return irrigationTiles > 0 ; }
tr	9	@ Override public void install ( final IUpdate update , final ActionListener callback ) throws Exception { getInstall ( update ) . run ( this , update , callback ) ; }
tr	2	public CreateIngredientDialog ( ) { setupActionListeners ( ) ; }
tr	5	public void setProducers ( String ... producers ) { setProducers ( Arrays . asList ( producers ) ) ; }
tr	4	public ArrayList < PokemonTeam > getPopulation ( ) { return population ; }
tr	7	@ Override public String toString ( ) { String resp = "[" + sigPosLibre + "]:" ; for ( int i = 0 ; i < sigPosLibre ; i ++ ) { resp += elems [ i ] + "-" ; } return resp ; }
tr	10	public boolean transferir ( int nc1 , int nc2 , double m ) { CuentaBancaria c1 = search ( nc1 ) ; CuentaBancaria c2 = search ( nc2 ) ; if ( c1 != null && c2 != null ) { if ( c1 . retiro ( m ) ) { c2 . deposito ( m ) ; return true ; } } return false ; }
tr	8	private void drawLabel ( Label l ) { this . g . drawString ( l . getLabel ( ) , l . getX ( ) , l . getY ( ) ) ; }
tr	10	public boolean StorePlainString ( String strContents , String strFolder , String oneStr , String twoStr , String threeStr ) { return otapiJNI . Storage_StorePlainString__SWIG_0 ( swigCPtr , this , strContents , strFolder , oneStr , twoStr , threeStr ) ; }
tr	5	public TaskSelectionAction ( JTable table , TaskTableModel tableModel ) { this . table = table ; this . tableModel = tableModel ; }
tr	5	public void setAllClickable ( ) { int len = selectable . length ; for ( int i = 0 ; i < len ; i ++ ) { selectable [ i ] = true ; } }
tr	7	public void saveLang ( ) { try { lang . save ( langFile ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }
tr	7	@ Override public List < EFieldOfStudy > getAllFieldsOfStudy ( ) { return Arrays . asList ( EFieldOfStudy . values ( ) ) ; }
tr	1	public void jump ( ) { jump = true ; }
tr	8	@ Override public void initialize ( URL url , ResourceBundle rb ) { clock = new DigitalClock ( ) ; }
tr	5	public T getValue ( ) { if ( available == false ) { throw new RuntimeException ( "Value not available" ) ; } return value ; }
tr	7	private GameConfiguration ( Builder builder ) { this . playCount = builder . playCount ; this . playDurationInMs = builder . playDurationInMs ; this . pauseDurationInMs = builder . pauseDurationInMs ; this . availableGestures = builder . availableGestures ; }
tr	6	private static String getVelocityStr ( Velocity v ) { return "velocity[" + v . getX ( ) + " " + v . getY ( ) + "]" ; }
tr	3	public void setDrawAmount ( double a ) { drawAmount = a ; }
tr	6	public static String getUserMessage ( int statusCode ) { if ( statusCode == Response . SC_SERVICE_UNAVAILABLE ) { return "Pearltrees is currently unavailable. Please retry later." ; } if ( statusCode == Response . SC_SEE_OTHER ) { return "Please enable cookies to use the bookmarklet." ; } return "Pearltrees is currently unreachable. Please check your internet connection or retry later." ; }
tr	2	public int getPlays ( ) { return this . plays ; }
tr	8	private void toComboBoxActionPerformed ( java . awt . event . ActionEvent evt ) { addEntries ( ) ; raiseActionPerformed ( ) ; }
tr	9	@ Test public void testGetPhone_1 ( ) throws Exception { Contact fixture = new Contact ( "" , "" , "" , "" ) ; String result = fixture . getPhone ( ) ; assertEquals ( "" , result ) ; }
tr	5	@ Override public E getCurrentElem ( ) { if ( this . currentNode != null ) { return this . currentNode . getElement ( ) ; } return null ; }
tr	3	public int calculateXAfterRightMove ( int moveStep ) { return ( this . getLeftX ( ) + moveStep ) ; }
tr	2	public int getCodigo ( ) { return codigo ; }
tr	10	public Comparator < Mob > getComparator ( ) { switch ( targetingMode ) { case leatHealth : return LEAST_HEALTH_COMPARATOR ; case nearest : return NEAREST_COMPARATOR ; case random : return RANDOM_COMPARATOR ; default : return null ; } }
tr	2	public void setWeight ( int weight ) { this . weight = weight ; }
tr	6	private void jTextField4ActionPerformed ( java . awt . event . ActionEvent evt ) { }
tr	3	public SelectTwoTileAction ( String imageKey ) { super ( imageKey ) ; }
tr	1	public ConnectionHandler ( ) { }
tr	9	public static Date getCurrentWeekStartDate ( ) { Calendar calendar = Calendar . getInstance ( ) ; calendar . set ( Calendar . DAY_OF_WEEK , Calendar . MONDAY ) ; return calendar . getTime ( ) ; }
tr	10	public static void main ( String [ ] args ) { int [ ] [ ] arrays = { { 1 , 1 , 2 , 2 , 2 } , { 1 , 1 , 1 , 1 , 1 } , { 1 , 2 , 2 , 2 , 1 } , { 1 , 2 , 1 , 2 , 2 } , { 1 , 1 , 3 , 4 , 5 } } ; for ( int i = 0 ; i < arrays . length ; i ++ ) { System . out . println ( isTrue ( arrays [ i ] ) ) ; } }
tr	7	@ Override public void actionPerformed ( ActionEvent evnt ) { if ( evnt . getSource ( ) == btnCerrar ) dispose ( ) ; }
tr	1	public Audio ( ) { }
tr	5	private final char med3 ( char a , char b , char c ) { char m ; if ( a < b ) { m = b <= c ? b : a < c ? c : a ; } else { m = c >= a ? a : c > b ? c : b ; } return m ; }
tr	3	private void tick ( ) { game . tick ( ) ; playerView . tick ( ) ; }
tr	1	public TaitoTest ( ) { }
tr	9	private void initHashForLengthTest ( ) { this . jedis . del ( KEY_HASH_LENGTH_TEST ) ; String testValue = this . makeRandomString ( INIT_HASH_DATA_LENGTH ) ; this . jedis . hset ( KEY_HASH_LENGTH_TEST , "field" , testValue ) ; }
tr	8	public static double desviacion ( double [ ] vals ) { double mean = 0.0 ; for ( int i = 0 ; i < vals . length ; i ++ ) { mean += vals [ i ] ; } mean = mean / ( double ) vals . length ; double desv = 0.0 ; for ( int i = 0 ; i < vals . length ; i ++ ) { desv += Math . abs ( vals [ i ] - mean ) ; } desv = desv / ( double ) vals . length ; return desv ; }
tr	4	public Deletion ( StateVector stateVec , int pos ) { super ( stateVec ) ; this . pos = pos ; }
tr	6	@ Override public int compare ( String s1 , String s2 ) { return s1 . length ( ) - s2 . length ( ) ; }
tr	8	private static Object next ( Object prev , String ref ) throws JSONException { if ( prev == null ) { throw new JSONException ( "cannot traverse- missing object encountered" ) ; } if ( prev instanceof JSONObject ) { return ( ( JSONObject ) prev ) . get ( ref ) ; } throw new JSONException ( "not an object" ) ; }
tr	5	public boolean registerFile ( File file ) { return registerFile ( file , false , Thread . currentThread ( ) ) ; }
tr	3	@ Override public String toString ( ) { return "HMM" ; }
tr	5	public void clear ( ) { g = new Graph ( ) ; v [ 0 ] = g ; level = 0 ; }
tr	1	public DataDaoTemplate ( ) { }
tr	1	public boolean isInfected ( ) { return false ; }
tr	6	public static void clear ( ) { int i = width * height ; for ( int j = 0 ; j < i ; j ++ ) pixels [ j ] = 0 ; }
tr	7	public void addDocument ( int docid , String grade ) { relevances . put ( docid , convertToBinaryRelevance ( grade ) ) ; }
tr	7	private boolean test ( String text ) { try { Integer . parseInt ( text ) ; return true ; } catch ( NumberFormatException e ) { return false ; } }
tr	2	@ Override public void requestFocusPrev ( ) { }
tr	1	public int get_key_num ( ) { return 1 ; }
tr	8	private void addNonNumericalToken ( String previousNumber , Token t ) { createAndAddNumber ( previousNumber ) ; this . m_tokenizedExpression . add ( t ) ; }
tr	9	public Score GetLeastTopScore ( ) throws SQLException { Score tempscore = new Score ( "A" , 0 ) ; Vector topTenScores = this . GetTopScores ( 10 ) ; if ( topTenScores . size ( ) < 10 ) return tempscore ; else return ( Score ) topTenScores . elementAt ( topTenScores . size ( ) - 1 ) ; }
tr	9	public BeanClasesAnotadas getBean ( ) { BeanClasesAnotadas bean = new BeanClasesAnotadas ( ) ; bean . id = this . id ; bean . idProfesores = this . idProfesores ; bean . idProfesoresReal = this . idProfesoresReal ; bean . fecha = this . fecha ; bean . idHorasCentro = this . idHorasCentro ; bean . idGrupAsig = this . idGrupAsig ; return bean ; }
tr	3	public int numberOfPhotosBelongingTo ( ) { return this . photosInAlbum . size ( ) ; }
tr	5	public long getTimeRunning ( class < ? extends Event > type ) { return this . timeRunning . get ( type ) ; }
tr	4	@ Override public void close ( ) throws IOException { in . close ( ) ; }
tr	10	private static void Merge ( int [ ] data , int left , int center , int right ) { int [ ] tmpArr = new int [ data . length ] ; int mid = center + 1 ; int index = left ; int tmp = left ; while ( left <= center && mid <= right ) { if ( data [ left ] <= data [ mid ] ) { tmpArr [ index ++ ] = data [ left ++ ] ; } else { tmpArr [ index ++ ] = data [ mid ++ ] ; } } while ( mid <= right ) { tmpArr [ index ++ ] = data [ mid ++ ] ; } while ( left <= center ) { tmpArr [ index ++ ] = data [ left ++ ] ; } while ( tmp <= right ) { data [ tmp ] = tmpArr [ tmp ++ ] ; } }
tr	9	@ Override public boolean isYesFromBinaryChoice ( String message ) { int response = - 1 ; while ( response < 0 ) { response = JOptionPane . showConfirmDialog ( boardGameDisplay , message , "Choose" , JOptionPane . YES_NO_OPTION ) ; } return response == 0 ; }
tr	8	public PinholeCamera ( Vector3 eyePosition , Vector3 lookPoint , Vector3 upDirection , float viewPlaneDistance ) { super ( eyePosition , lookPoint , upDirection ) ; this . viewPlaneDistance = viewPlaneDistance ; this . zoom = 1.0f ; }
tr	2	public void setValorVenta ( double valorVenta ) { this . valorVenta = valorVenta ; }
tr	8	@ Test @ Ignore ( "Find the solution" ) public void sumOfMultipliesOf3Or5UpTo1000 ( ) throws Exception { assertThat ( Problems . sumOfMultipliesOf3Or5 ( 1000 ) , is ( 1000 ) ) ; }
tr	8	public GuiTextField ( int id , int x , int y , int width , int height , String text ) { this ( id , x , y , width , height , 13 , text ) ; }
tr	5	public UnidadHerida ( Integer saludMaxima ) { this . establecerSaludMaxima ( saludMaxima ) ; this . recibirGolpe ( saludMaxima / 2 ) ; }
tr	10	public MountainSide ( ) { zvalue = 20 ; sollid = true ; part = 13 ; String uri = "./res/pic/mountains.png" ; if ( pic == null ) pic = Toolkit . getDefaultToolkit ( ) . getImage ( uri ) ; part = 42 ; }
tr	10	public Block ( int blockNum , String mode ) throws FileNotFoundException { super ( Disk . homeDir . toString ( ) + "/TransDisk/" + String . format ( "%05d" , blockNum ) + ".txt" , mode ) ; this . blockNumber = blockNum ; }
tr	3	public NumberCode ( byte [ ] base ) { super ( base ) ; this . code = 0 ; }
tr	9	public void parseCommandLine ( ParserResult result ) { sep = ( ( String ) result . getValue ( "separator" ) ) . charAt ( 0 ) ; addHeaders = ! result . isGiven ( "no-header" ) ; }
tr	5	public JSONArray put ( boolean value ) { values . add ( value ) ; return this ; }
tr	7	public synchronized void aggiorna ( ) { Iterator < Giocatore > itGiocatori = this . iterator ( ) ; while ( itGiocatori . hasNext ( ) ) { itGiocatori . next ( ) . aggiorna ( ) ; } }
tr	1	public ServerAlreadyStartedException ( ) { super ( "Could not start server because it is already started." ) ; }
tr	2	public void setCtrValorTotal ( double ctrValorTotal ) { this . ctrValorTotal = ctrValorTotal ; }
tr	4	public static ArrayList < PokerHandEvaluation > straightFlushResolve ( ArrayList < PokerHandEvaluation > potentialWinners ) { return null ; }
tr	5	public String getColumnName ( int col ) { return names [ col ] . toString ( ) ; }
tr	3	public String getDescription ( ) { return description ; }
tr	6	public void handle ( ) throws PacketException { byte respHeader = response [ 0 ] ; if ( respHeader == SERVER_PACKET_HEADER_OK ) return ; if ( respHeader == SERVER_PACKET_HEADER_FAIL ) { throw new PacketException ( "Failed to request version info." ) ; } }
tr	9	public static void emit_error ( String message ) { System . err . println ( "Error at " + current_line + "(" + current_position + "): " + message ) ; error_count ++ ; }
tr	10	public static final void initialize ( ) { slowSlaves = new SlaveThread [ NB_SLOWSLAVES ] ; fastSlaves = new SlaveThread [ NB_FASTSLAVES ] ; for ( int i = 0 ; i < NB_SLOWSLAVES ; i ++ ) { slowSlaves [ i ] = new SlaveThread ( ) ; slowSlaves [ i ] . start ( ) ; } for ( int i = 0 ; i < NB_FASTSLAVES ; i ++ ) { fastSlaves [ i ] = new SlaveThread ( ) ; fastSlaves [ i ] . start ( ) ; } indexSlow = 0 ; indexFast = 0 ; }
tr	1	public void HandleMouseEvent ( ) { }
tr	2	public void setRoleId ( long roleId ) { this . roleId = roleId ; }
tr	10	public ViewPlane ( int hRes , int vRes , float pixelSize , float gamma , Sampler sampler , DrawOrder drawOrder ) { this . hRes = hRes ; this . vRes = vRes ; this . s = pixelSize ; this . gamma = gamma ; this . sampler = sampler ; this . drawOrder = drawOrder ; }
tr	4	public void callOne ( ) { otapiJNI . OTCaller_callOne ( swigCPtr , this ) ; }
tr	10	public static void main ( String [ ] args ) { int x = 1 ; switch ( x ) { case 1 : int a ; System . out . println ( 0 ) ; break ; case 2 : { int b ; System . err . println ( 1 ) ; break ; } default : System . err . println ( 2 ) ; } }
tr	3	public void actionPerformed ( ActionEvent e ) { }
tr	1	public EchoRPC ( ) { super ( "echorpc" ) ; }
tr	3	public String getAlbum ( ) { return this . Album ; }
tr	9	public static void main ( String [ ] args ) { BeerXML_Test test = new BeerXML_Test ( "/Users/nate/Desktop/recipe_ex_01.xml" ) ; System . out . println ( test . hashCode ( ) ) ; }
tr	2	public void setCampaignId ( long campaignId ) { this . campaignId = campaignId ; }
tr	5	private MqttPublish createPublish ( MqttMessage message ) { return new MqttPublish ( this . getName ( ) , message ) ; }
tr	2	public int getLod ( ) { return core . getLod ( ) ; }
tr	8	public int getScore ( int [ ] faceValues ) throws IllegalArgumentException { int score = 0 ; int [ ] compareArray = new int [ 6 ] ; for ( int i = 0 ; i < faceValues . length ; i ++ ) { if ( faceValues [ i ] < 1 || faceValues [ i ] > 6 ) { throw new IllegalArgumentException ( "FaceValues have to be between 1 and 6." ) ; } compareArray [ faceValues [ i ] - 1 ] += 1 ; } for ( int j = 0 ; j < compareArray . length ; j ++ ) { if ( compareArray [ j ] > 2 ) { for ( int i = 0 ; i < faceValues . length ; i ++ ) { score += faceValues [ i ] ; } } } return score ; }
tr	10	public void add ( LinearFunction < Feature , FeatureVector > parameters , double scale ) { for ( Feature f : parameters ) values [ f . identifier ( ) ] += f . strength ( ) * scale ; }
tr	6	public static Calendar getTime ( Calendar nowByGMT , int timezone ) { nowByGMT . add ( Calendar . MINUTE , timezone ) ; return nowByGMT ; }
tr	10	public ColorIndexesThreeColors ( int paintTime , byte [ ] values , byte color1 , byte color2 , byte color3 , int index1 , int index2 , int index3 ) { super ( paintTime , values , constructorHelperShift ( color1 , color2 , color3 , index1 , index2 , index3 ) ) ; }
tr	6	public Agent ( Body body ) { _mind = null ; _body = body ; if ( _body != null ) _body . setAgent ( this ) ; }
tr	5	public Graph ( ) { this . keyToNode = new HashMap < > ( ) ; this . nodes = new HashSet < > ( ) ; }
tr	8	private void miNovoActionPerformed ( java . awt . event . ActionEvent evt ) { limparCampos ( ) ; desbloquearCampos ( ) ; }
tr	2	public void setRinternationalimg2011 ( double rinternationalimg2011 ) { this . rinternationalimg2011 = rinternationalimg2011 ; }
tr	5	Object writeReplace ( ) { return new SimpleEntry < K , V > ( this ) ; }
tr	8	@ Override public int getBucketId ( String dbFilename ) { for ( int i = 0 ; i < filenames . length ; i ++ ) { if ( filenames [ i ] . equals ( dbFilename ) ) { return i ; } } return - 1 ; }
tr	5	public int kannNochSoVielArbeiten ( ) { int i = hoursPerWeek . intValue ( ) - arbeitsZeit . intValue ( ) ; return i ; }
tr	4	@ Override public Object getCellEditorValue ( ) { return this . table ; }
tr	1	public User ( ) { }
tr	6	public StatusView ( Player player ) { this . player = player ; this . setSize ( 400 , 200 ) ; this . setVisible ( true ) ; repaint ( ) ; }
tr	9	public String getHeader ( String key ) { for ( Header h : headers ) { if ( h . getName ( ) . equals ( key ) ) { return h . getValue ( ) ; } } return null ; }
tr	9	public void event ( byte [ ] data ) { Graph node = new Graph ( Graph . _OBJ ) ; node . setValue ( data ) ; v [ level ] . add ( node ) ; v [ level + 1 ] = node ; }
tr	1	public void destroy ( ) { }
tr	9	public String toString ( ) { String strOpenList = "" ; for ( OpenTransaction ot : this . openList ) { strOpenList += ot . toString ( ) ; } String str = String . format ( "<OpenTransactionList openAmount=[%d]\nopenList=[%s]>" , this . openAmount , strOpenList ) ; return str ; }
tr	6	private String score ( ) { return PLAYER_1 + ": " + player1Score + "  " + PLAYER_2 + ": " + player2Score ; }
tr	4	@ Override public String getName ( ) { return name ; }
tr	9	@ Override public T alert ( String message , AlertType type ) { alertBuilder . alert ( message , type ) ; return model ; }
tr	2	public double getLatitude ( ) { return latitude ; }
tr	1	public SendEvent ( ) { super ( ) ; }
tr	7	public BTDeviceListModel ( ArrayList < BTDevice > discoveredDevices ) { this . devicesList = discoveredDevices ; listDataListener = new ArrayList < ListDataListener > ( ) ; }
tr	9	@ Override public void read ( DataInputStream stream ) throws IOException { this . eid = stream . readInt ( ) ; this . status = stream . readByte ( ) ; }
tr	2	public TestList ( int x ) { this . x = x ; }
tr	7	public boolean equals ( Object o ) { if ( o == null ) return false ; if ( o == this ) return true ; if ( o instanceof ASPathLimit ) { ASPathLimit a = ( ASPathLimit ) o ; return this . limit == a . limit && this . origAS . equals ( a . origAS ) ; } return false ; }
tr	4	public boolean stop ( boolean shiftQueueCommand ) { return stop_native ( pointer , shiftQueueCommand ) ; }
tr	5	public void start ( ) { this . startTime = System . currentTimeMillis ( ) ; this . running = true ; }
tr	6	@ Test public void shouldPrintIpv6AddressWithLeadingZeros ( ) { assertEquals ( "0:1:4d09:ffff:1:ffff:0:ffff" , Ipv6 . parse ( "0:1:4d09:ffff:1:ffff:0:ffff" ) . toString ( ) ) ; assertEquals ( "0:16b1:ffff:ffff:1c18:4e9b:31b6:0" , Ipv6 . parse ( "0:16b1:ffff:ffff:1c18:4e9b:31b6:0" ) . toString ( ) ) ; assertEquals ( "::ffff:ffff:1c18:4e9b:31b6:0" , Ipv6 . parse ( "0:0:ffff:ffff:1c18:4e9b:31b6:0" ) . toString ( ) ) ; }
tr	3	public String toString ( ) { return "Rage Shot:\t" + getDescription ( ) ; }
tr	6	private String decimalAsString ( String decimal ) { return decimal . substring ( decimal . indexOf ( . ) + 1 ) ; }
tr	7	public LinkedList < Command > getCommands ( String boardName ) { return boards . get ( boardName ) . getCommands ( ) ; }
tr	2	public int getBillingCycle ( ) { return billingCycle ; }
tr	6	public void testMethodInvocationDistTo ( Tester t ) { t . checkInexactMethod ( "Success: Inexact check distance to - success" , 4.998 , 0.001 , pt , "distTo" , new CartPtDouble ( 7.0 , 7.0 ) ) ; }
tr	2	public long getElapsedInclusiveCpuTime ( ) { return mElapsedInclusiveCpuTime ; }
tr	10	@ Test public void inorderBothNull ( ) { try { AVLTree < Integer , Integer > b = new AVLTree < Integer , Integer > ( ) ; b . inorder ( null , null ) ; fail ( IllegalArgumentException . class ) ; } catch ( IllegalArgumentException e ) { } catch ( Exception e ) { fail ( IllegalArgumentException . class , e ) ; } }
tr	6	public static void main ( String [ ] args ) { SystemSetting_CLI cli = new SystemSetting_CLI ( ) ; cli . show ( ) ; }
tr	4	@ XmlAttribute ( name = "CY_b" ) public float getCY_b ( ) { return CY_b ; }
tr	10	@ XmlElementDecl ( namespace = "" , name = "xRequest" ) @ XmlJavaTypeAdapter ( CollapsedStringAdapter . class ) public JAXBElement < String > createXRequest ( String value ) { return new JAXBElement < String > ( _XRequest_QNAME , String . class , null , value ) ; }
tr	10	public ReplaceVariableInLoop ( Identifier var , Phi phi , Value oldVal ) { phiInst = phi ; newVal = new VariableReference ( var , phiInst ) ; this . oldVal = oldVal ; }
tr	7	AdderBox ( SynthCanvas pa ) { super ( pa , IDENT ) ; Input in = new Input ( this , null , false , true , false ) ; addInput ( in ) ; }
tr	3	public static int extractSymbolSize ( long commonFecOTI ) { return unsignSymbolSize ( ( int ) commonFecOTI ) ; }
tr	10	@ Override public Iterator < Map . Entry < T , double >> iterator ( ) { return Collections . unmodifiableMap ( map ) . entrySet ( ) . iterator ( ) ; }
tr	4	public TextFileParser ( final String absFilePath ) throws IOException { this ( absFilePath , null , null ) ; }
tr	1	public boolean isForce ( ) { return isForce ; }
tr	7	public void InitGUI ( ) { this . setPreferredSize ( new Dimension ( 120 , 120 ) ) ; this . setText ( this . carte . obtenirNom ( ) ) ; this . addActionListener ( this ) ; }
tr	1	public boolean isWrite ( ) { return true ; }
tr	8	public int numTrees2 ( int n ) { if ( n == 0 || n == 1 ) return 1 ; int [ ] num = new int [ n + 1 ] ; num [ 0 ] = 1 ; num [ 1 ] = 1 ; num [ 2 ] = 2 ; for ( int i = 3 ; i <= n ; i ++ ) { int cnt = 0 ; for ( int j = 1 ; j <= i ; j ++ ) { int left = j - 1 ; int right = i - j ; cnt += num [ left ] * num [ right ] ; } num [ i ] = cnt ; } return num [ n ] ; }
tr	10	@ Test public void breadthFirstDag ( ) { final Iterable < String > traverser = Traversals . breadthFirst ( "A" , adjacencyFor ( dag ) ) ; assertBreadthFirstFullDag ( traverser ) ; }
tr	1	private MarlinUtils ( ) { }
tr	10	public Modele ( ) { this . joueurs = new ArrayList < Joueur > ( ) ; this . type = TypePartie . CLASSIQUE ; this . options = new Options ( ) ; this . indice_joueur_courant = 0 ; }
tr	8	@ Override public void run ( ) { try { while ( Settling . this . running ) { Thread . sleep ( 1 ) ; } } catch ( InterruptedException e ) { } }
tr	4	int clip ( int t , int lo , int hi ) { return t < lo ? lo : t > hi ? hi : t ; }
tr	9	public static void main ( String args [ ] ) { int array [ ] = { 0 , 400 , 5 , 200 , 100 } ; int v = algorithm ( 4 , array ) ; System . out . println ( v ) ; }
tr	2	public double getPickUpPuckBaseChance ( ) { return pickUpPuckBaseChance ; }
tr	9	private void txtApeMatKeyTyped ( java . awt . event . KeyEvent evt ) { pac . validarNombres ( txtApeMat , evt ) ; }
tr	1	public AbstractView ( ) { this ( "images/fond_accueil.jpg" ) ; }
tr	9	public static String perform ( String name , HttpServletRequest request ) { Action a ; synchronized ( hash ) { a = hash . get ( name ) ; } if ( a == null ) return null ; return a . perform ( request ) ; }
tr	9	@ Override public String toString ( ) { String s = "Vertices: " + V + " Edges: " + E + "\n" ; for ( int i = 0 ; i < V ; i ++ ) { s += i + ": " ; for ( int w : adj ( i ) ) s += w + " " ; s += "\n" ; } return s ; }
tr	5	public T darAnterior ( ) { return hayAnterior ( ) ? elems [ -- posActual ] : null ; }
tr	8	public void processPCM ( ByteData pcm ) { try { wav . writePCM ( pcm ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }
tr	5	public void writeInt ( final int value ) { buffer [ position ++ ] = ( byte ) ( ( value >> 24 ) & ff ) ; buffer [ position ++ ] = ( byte ) ( ( value >> 16 ) & ff ) ; buffer [ position ++ ] = ( byte ) ( ( value >> 8 ) & ff ) ; buffer [ position ++ ] = ( byte ) ( ( value >> 0 ) & ff ) ; }
tr	6	public Object opt ( int index ) { return ( index < 0 || index >= length ( ) ) ? null : this . myArrayList . get ( index ) ; }
tr	4	public void defaultMethod ( ) { System . out . println ( "default method" ) ; }
tr	7	private void processDash ( ) { setAngle ( getAngle ( ) + dashSpeed ) ; dashSpeed -= ( dashSpeed * 0.1 ) + Math . signum ( dashSpeed ) * 0.1 ; if ( Math . abs ( dashSpeed ) < 0.1 ) { dashSpeed = 0 ; } }
tr	10	@ Test public void testIsEmpty ( ) { System . out . println ( "isEmpty" ) ; assertTrue ( instance . isEmpty ( ) ) ; instance . insert ( 20 , "hola" ) ; assertFalse ( instance . isEmpty ( ) ) ; }
tr	4	@ Deprecated public String getAppUrlSafeName ( ) { return appName ; }
tr	2	public void setDeliverTypeId ( long deliverTypeId ) { this . deliverTypeId = deliverTypeId ; }
tr	3	@ Override public int getX2 ( ) { return getBounds ( ) . getX2 ( ) ; }
tr	3	public ValueListener ( Event1 returnValue ) { this . returnValue = returnValue ; }
tr	5	public java . lang . String getPriceType ( ) { return priceType ; }
tr	2	void clear ( ) { referenceId = 0 ; }
tr	10	public CreditsView ( ) { this . background = new Texture ( Gdx . files . internal ( "model/titleScreen.jpg" ) ) ; this . spriteBatch = new SpriteBatch ( ) ; this . font = new BitmapFont ( ) ; this . font = new BitmapFont ( Gdx . files . internal ( "fonts/creditsFont.fnt" ) , Gdx . files . internal ( "fonts/creditsFont.png" ) , false ) ; }
tr	2	public boolean isStarted ( ) { return started ; }
tr	6	public PLDictionary ( HashMap < String , PLObject > value ) { _value = value ; }
tr	3	public CellValueGenerator getCellValueGenerator ( ) { return cellValueGenerator ; }
tr	10	public JSONObject ( JSONObject jo , String [ ] names ) { this ( ) ; for ( int i = 0 ; i < names . length ; i += 1 ) { try { this . putOnce ( names [ i ] , jo . opt ( names [ i ] ) ) ; } catch ( Exception ignore ) { } } }
tr	6	public void addElementsTable ( Object obj ) { Object [ ] data = { obj } ; elementsTableModel . addRow ( data ) ; }
tr	6	@ Subscribe public void handleAnalyzingStateEnterEvent ( AnalyzingStateEnterEvent event ) { displayLetter ( event . getCurrentWord ( ) ) ; }
tr	10	public void startOutputConnection ( ) { try { fWriter = new FileWriter ( "xStreamProducts" ) ; os = xstream . createObjectOutputStream ( fWriter , "waren" ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } connectionOutStatus = true ; }
tr	6	@ Override public void enterRule ( ParseTreeListener listener ) { if ( listener instanceof EnquantoListener ) ( ( EnquantoListener ) listener ) . enterPrograma ( this ) ; }
tr	3	public String getLongName ( ) { return longName ; }
tr	9	public Carrera getCarreraCerrada ( ) { if ( carreraCerrada == null ) { for ( Carrera c : carreras ) { if ( c . getEstado ( ) == Carrera . EstadoCarrera . CERRADA ) { setCarreraCerrada ( c ) ; } } } return carreraCerrada ; }
tr	9	@ Override @ Transactional ( propagation = Propagation . SUPPORTS ) public JellyTots find ( String s ) { return null ; }
tr	8	public void setUniform ( String uniformName , BaseLight baseLight ) { setUniform ( uniformName + ".color" , baseLight . getColor ( ) ) ; setUniformf ( uniformName + ".intensity" , baseLight . getIntensity ( ) ) ; }
tr	9	@ Override public void render ( GameContainer container , StateBasedGame game , Graphics g ) throws SlickException { render ( g ) ; }
tr	3	public void setBairro ( String bairro ) { this . bairro = bairro ; }
tr	6	private CinemaDAOImpl ( ) { serializeDB = SerializeDB . getInstance ( ) ; cinemas = serializeDB . getCinemas ( ) ; }
tr	8	public List < String > complete ( String string , int position ) { return CompletionUtil . completeStrings ( strings , string ) ; }
tr	4	public void setCohumulone ( BigDecimal value ) { this . cohumulone = value ; }
tr	2	public Monitor ( ) { initComponents ( ) ; }
tr	2	public String getTestingModeAnswer ( ) { return "Test Answer" ; }
tr	5	public List < double > getBestSolution ( ) { return swarm . getBestParticle ( ) . getBestLocation ( ) ; }
tr	6	public Book ( String author , String title , ISBN isbn ) { this . author = author ; this . title = title ; this . isbn = isbn ; }
tr	7	public static List < Thread > getThreads ( ThreadGroup tg , boolean recursive ) { return getThreads ( tg , recursive , tg . activeCount ( ) + 10 ) ; }
tr	4	@ Override public boolean completesValidShape ( int x , int y ) { return true ; }
tr	7	static vslFuture create ( vslBackendData data ) throws vslStorageException { vslFuture res = backend . create ( data ) ; return res ; }
tr	4	private String escape ( String value ) { return "\"" + value . replace ( "\"" , "\"\"" ) + "\"" ; }
tr	8	@ Override protected List < BufferedImageOp > getPreRippleFilters ( ) { List < BufferedImageOp > list = new ArrayList < BufferedImageOp > ( ) ; list . add ( marble ) ; return list ; }
tr	3	@ Before public void setUp ( ) throws Exception { }
tr	2	public String getStrentheningAdvice ( ) { return "The wind's picking up  sir." ; }
tr	3	@ Override public int getCurrentTMProposals ( ) { return current_tm_proposal ; }
tr	4	Packet ( Packet link , int id , int kind ) { this . link = link ; this . id = id ; this . kind = kind ; }
tr	1	public NoeudPCC ( ) { }
tr	6	private final void step2 ( ) { if ( ends ( "y" ) && vowelinstem ( ) ) b [ k ] = i ; }
tr	9	@ Override @ Transactional ( propagation = Propagation . SUPPORTS ) public HousePlanner find ( String s ) { return null ; }
tr	9	public static void runReports ( boolean full , boolean printall , Object ... objs ) { Tester t = new Tester ( ) ; if ( objs != null ) { for ( Object obj : objs ) { t . runAnyTests ( obj , full , printall ) ; } } }
tr	7	public org . omg . CORBA . TypeCode _type ( ) { return SensorHelper . type ( ) ; }
tr	5	public boolean contains ( E e ) { return bs . search ( e ) ; }
tr	10	public String optString ( int index , String defaultValue ) { Object object = this . opt ( index ) ; return JSONObject . null . equals ( object ) ? defaultValue : object . toString ( ) ; }
tr	6	@ Override public void invalidate ( ) { manaCrystal . removeCollector ( ( Collector ) unit ) ; }
tr	6	private static String uri ( String user_account , String path ) { return "\"wamp://" + user_account . replace ( "@" , "%40" ) + "@" + kHostname + path + "\"" ; }
tr	3	public void setMinDelay ( MinimumDelay minDelay ) { this . minDelay = minDelay ; }
tr	2	public void setPlotWidth ( float plotWidth ) { this . plotWidth = plotWidth ; }
tr	5	@ Override public void onWeaponFired ( int id , Weapon weapon ) { }
tr	5	public static SpaceRegion fromValue ( String v ) { return valueOf ( v ) ; }
tr	10	@ Test public void preorderBothNull ( ) { try { AVLTree < Integer , Integer > b = new AVLTree < Integer , Integer > ( ) ; b . preorder ( null , null ) ; fail ( IllegalArgumentException . class ) ; } catch ( IllegalArgumentException e ) { } catch ( Exception e ) { fail ( IllegalArgumentException . class , e ) ; } }
tr	8	public int partitionIt ( int left , int right , long pivot ) { int leftptr = left - 1 ; int rightptr = right + 1 ; while ( true ) { while ( leftptr < right && theArray [ ++ leftptr ] < pivot ) { } while ( rightptr > left && theArray [ -- rightptr ] > pivot ) { } if ( leftptr >= rightptr ) { break ; } else { swap ( leftptr , rightptr ) ; } } return leftptr ; }
tr	10	public FormPane ( ) { setContent ( grid ) ; vbarPolicyProperty ( ) . set ( ScrollBarPolicy . AS_NEEDED ) ; setStyle ( "-fx-background-color:inherit;" ) ; grid . setHgap ( 5 ) ; grid . setVgap ( 5 ) ; }
tr	8	public User [ ] findWhereStatusUEquals ( String statusU ) throws UserDaoException { return findByDynamicSelect ( SQL_SELECT + " WHERE statusU = ? ORDER BY statusU" , new Object [ ] { statusU } ) ; }
tr	4	@ Override public void addAdjective ( String word ) { }
tr	6	protected void takeDown ( ) { System . out . println ( "Shelf Agent " + getAID ( ) . getName ( ) + " terminating." ) ; }
tr	6	@ Override public Location translate ( Location location ) { return new Location ( location . row + 1 , location . column + 1 ) ; }
tr	10	public Habitacio ( HabitacioId id , Integer numero , Hotel hotel ) { this . id = id ; this . numero = numero ; this . hotel = hotel ; this . reserves = new HashSet < Reserva > ( ) ; }
tr	3	public String optString ( int index ) { return this . optString ( index , "" ) ; }
tr	4	protected String [ ] getFontStyleNames ( ) { if ( fontStyleNames == null ) { int i = 0 ; fontStyleNames = new String [ 4 ] ; fontStyleNames [ i ++ ] = ( "Plain" ) ; fontStyleNames [ i ++ ] = ( "Bold" ) ; fontStyleNames [ i ++ ] = ( "Italic" ) ; fontStyleNames [ i ++ ] = ( "BoldItalic" ) ; } return fontStyleNames ; }
tr	5	public ActionList ( boolean loop ) { this . actions = new LinkedList < Action > ( ) ; this . loop = loop ; }
tr	6	@ Override public Order findOrder ( long id ) { return this . orderDao . findById ( id ) ; }
tr	3	public Vat ( Integer vatId ) { this . vatId = vatId ; }
tr	9	public SmartCreature ( IEnvironment environment , Point2D position , double direction , double speed , Color color ) { super ( environment , position ) ; this . direction = direction ; this . speed = speed ; this . color = color ; }
tr	3	public void setAge ( Integer age ) { this . age = age ; }
tr	9	@ Test public void doTest ( ) { adjMatrix = new int [ ] [ ] { { 0 , 7 , 9 , 0 , 0 , 14 } , { 7 , 0 , 10 , 15 , 0 , 0 } , { 9 , 10 , 0 , 11 , 0 , 2 } , { 0 , 15 , 11 , 0 , 6 , 0 } , { 0 , 0 , 0 , 6 , 0 , 9 } , { 14 , 0 , 2 , 0 , 9 , 0 } } ; countPaths ( ) ; for ( int aResult : result ) { System . out . println ( aResult ) ; } }
tr	5	@ Override public void addMoveCompleteListener ( MoveCompleteListener listener ) { moveCompleteListener = listener ; }
tr	10	public static void permute ( Object [ ] a ) { Random r = new Random ( ) ; for ( int j = 1 ; j < a . length ; j ++ ) Sort . swapReferences ( a , j , r . randomInt ( 0 , j ) ) ; }
tr	9	public FTreeMap ( Map < ? extends Key , ? extends Val > map ) { comp = null ; tree = fromMap ( ( Map < Key , Val > ) map ) ; dflt = null ; }
tr	5	private int [ ] getGaps ( boolean isHor , boolean isTL ) { return gaps [ getGapIx ( isHor , isTL ) ] ; }
tr	10	@ Override protected void delete ( Message request , Message response ) { if ( response == null ) { response = new Message ( request . getContext ( ) ) ; } response . put ( System . RESULT_CODE , "-1" ) ; response . put ( System . RESULT_MSG , "Not implemented" ) ; }
tr	4	public boolean updateAdminByAdmin ( Admin admin ) { return userMsgDao . updateAdminByAdmin ( admin ) ; }
tr	10	@ Override public CallableStatement prepareCall ( String sql , int resultSetType , int resultSetConcurrency , int resultSetHoldability ) throws SQLException { return connection . prepareCall ( sql , resultSetType , resultSetConcurrency , resultSetHoldability ) ; }
tr	1	public void cleanUp ( ) { }
tr	6	@ Override public TileEntity getTileEntity ( Tile parent ) { return new TileDoorEntity ( parent ) ; }
tr	5	Collection getOptionGroups ( ) { return new HashSet ( optionGroups . values ( ) ) ; }
tr	3	public String value ( ) { return name ( ) ; }
tr	7	public JButton getNewButtonWithIcon ( Icon icon ) { JButton jButtonTmp = getNewButton ( ) ; jButtonTmp . setIcon ( icon ) ; return jButtonTmp ; }
tr	10	@ SuppressWarnings ( "unused" ) private boolean readFirstChunkFromFile ( AbstractKVStorable toAdd ) throws IOException { readOffset = header . getStartOffsetOfChunkByKey ( toAdd . getKey ( ) ) ; if ( readOffset < 0 ) { readOffset = 0 ; } return readNextChunkFromFile ( ) ; }
tr	4	@ Override public void eat ( ) { logger . debug ( "Ey! I am a human! I need to EAT!!" ) ; }
tr	10	public static void patch ( int addr , int displacement ) { if ( addr < 0 || addr >= CT ) { System . out . println ( "patch:  address of instruction to be patched is out of range" ) ; return ; } if ( displacement < 0 || displacement > CT ) { System . out . println ( "patch:  target address of patch is out of range" ) ; return ; } Machine . code [ addr ] . d = displacement ; return ; }
tr	7	public void compute ( Integer param ) { System . out . println ( "Parametr dupy:" + param . toString ( ) + "!" ) ; }
tr	5	public static String toString ( Object object ) throws JSONException { return toString ( object , null ) ; }
tr	3	public boolean isNADefault ( ) { return "" . equals ( namingAuthority ) ; }
tr	4	@ Override public void keyTyped ( KeyEvent keyEvent ) { }
tr	5	public void setShelfList ( ArrayList < Shelf > sl ) { this . shelfList = sl ; }
tr	1	public ResendPassword ( ) { super ( ) ; }
tr	2	public void setRequestStartTime ( long requestStartTime ) { this . requestStartTime = requestStartTime ; }
tr	10	@ Test public void testTwoApsMultipleBuilds ( ) { final PayloadBuilder builder = new PayloadBuilder ( ) ; builder . alertBody ( "test" ) ; builder . badge ( 9 ) ; final String expected = "{\"aps\":{\"alert\":\"test\" \"badge\":9}}" ; assertEqualsJson ( expected , builder . build ( ) ) ; assertEqualsJson ( expected , builder . build ( ) ) ; }
tr	3	public String getName ( ) { return name ; }
tr	8	@ SuppressWarnings ( "unused" ) protected void startElementSkip ( String uri , String localName , String qName , Attributes attributes ) { }
tr	4	@ JsonProperty ( "Associations" ) public ExecutionEnvironmentAssociations getAssociations ( ) { return Associations ; }
tr	6	public void selectOne ( MarkDisplay markDisplay ) { selectedMark = markDisplay ; markDisplay . mark . setSelected ( true ) ; }
tr	8	public String password ( char [ ] pass ) { String result = "" ; for ( int i = 0 ; i < pass . length ; i ++ ) { result += Character . toString ( pass [ i ] ) ; } return result ; }
tr	10	protected void noSyncRun ( ) { long result = account . details ( ) ; long minusAmount = account . minus ( amount ) ; System . out . println ( "\u73B0\u6709" + result + "  \u53D6\u8D70" + minusAmount + "  \u4F59\u989D" + account . details ( ) ) ; }
tr	4	public static long factorial ( long n ) { long f = 1 ; for ( long i = 1 ; i <= n ; i ++ ) { f *= i ; } return f ; }
tr	5	@ Override protected void validateTree ( ) { if ( ! view . isProcessing ( name ) ) super . validateTree ( ) ; }
tr	2	private Suit ( int value ) { this . value = value ; }
tr	2	public void setImportant ( boolean important ) { this . important = important ; }
tr	7	@ Override public boolean equals ( Object object ) { if ( ! ( object instanceof Users ) ) { return false ; } Users other = ( Users ) object ; if ( ( this . iduser == null && other . iduser != null ) || ( this . iduser != null && ! this . iduser . equals ( other . iduser ) ) ) { return false ; } return true ; }
tr	6	public UnauthorizedException ( int code , int category , String message , int httpStatusCode ) { super ( code , category , message , httpStatusCode ) ; }
tr	1	public boolean loaded ( ) { return loaded ; }
tr	8	public JuzsData ( String alias , JuzData ... juzs ) { this . alias = alias ; this . juz = Arrays . asList ( juzs ) ; }
tr	10	private static void init_perm ( long [ ] [ ] perm , byte [ ] p , int chars_in , int chars_out ) { for ( int k = 0 ; k < chars_out * 8 ; k ++ ) { int l = p [ k ] - 1 ; if ( l < 0 ) continue ; int i = l >> 2 ; l = 1 << ( l & 03 ) ; for ( int j = 0 ; j < 16 ; j ++ ) { int s = ( ( k & 07 ) + ( ( 7 - ( k >> 3 ) ) << 3 ) ) ; if ( ( j & l ) != 00 ) perm [ i ] [ j ] |= ( 1 << s ) ; } } }
tr	5	public ResultBuilder setPlayers ( ArrayList < PlayerProfile > players ) { this . players = players ; return this ; }
tr	5	public SimpleReader ( Reader r ) { br = new BufferedReader ( r ) ; }
tr	10	public ArrayList < Album > listAlbums ( ) { if ( GuiView . control . getCurrentUser ( ) . getAlbumList ( ) . size ( ) != 0 ) { ArrayList < Album > albums = new ArrayList < Album > ( GuiView . control . getCurrentUser ( ) . getAlbumList ( ) . values ( ) ) ; return albums ; } return null ; }
tr	8	@ Override public String toString ( ) { return "GitSettings{" + "gitPath='" + gitPath + ' + "  defaultFileCharset=" + defaultFileCharset + "  failFast=" + failFast + } ; }
tr	1	public QuestionPhoto ( ) { super ( ) ; }
tr	9	public static void main ( String [ ] args ) { int x = 5 ; if ( x < 5 ) if ( x > 5 ) System . out . println ( b ) ; else System . out . println ( a ) ; }
tr	8	@ Test public void STEEL_attacking_PSYCHIC ( ) { assertEquals ( 1.0 , tc . getWeaknessResistance ( Type . STEEL , Type . PSYCHIC ) , 0.0 ) ; }
tr	6	public static JSONObject toJSONObject ( XMLTokener x ) throws JSONException { return ( JSONObject ) parse ( x , false , null ) ; }
tr	5	Icon getNextFinishButtonIcon ( ) { return ( Icon ) buttonIconHashmap . get ( NEXT_FINISH_BUTTON_ICON_PROPERTY ) ; }
tr	6	public static String md5Hash ( InputStream in ) throws IOException { return hash ( in , "MD5" ) ; }
tr	1	public RetrieveCarDesignPartsFacade ( ) { }
tr	6	public static final int getHashCode ( final Object ... components ) { int result = 17 ; for ( Object o : components ) { result = result * 37 + ( ( o == null ) ? 0 : o . hashCode ( ) ) ; } return result ; }
tr	3	public Geometry getPart ( ) { return part ; }
tr	1	public FinalPathElement ( ) { }
tr	8	public Type get ( int index ) { if ( index >= length ) return new BooleanValue ( false ) ; else if ( index < 0 && Math . abs ( index ) <= length ) return elements [ length + index ] ; else if ( index < 0 && Math . abs ( index ) > length ) return new BooleanValue ( false ) ; return elements [ index ] ; }
tr	5	Type getType ( ) { return type == Type . kAny ? Type . kBase : type ; }
tr	2	public int getIdset ( ) { return idset ; }
tr	2	public int getHeight ( ) { return this . Height ; }
tr	7	public BinarySearchTree ( Comparator < ? super E > c ) { overallRoot = null ; size = 0 ; comparator = c ; }
tr	1	public void init ( ) { }
tr	1	public item ( ) { }
tr	7	@ Override public void get ( byte [ ] buffer ) { bt . copy ( struct , 0 , buffer , 0 , struct . length ) ; }
tr	1	public int cdlHignWaveLookback ( ) { return super . cdlHignWaveLookback ( ) ; }
tr	5	@ Override public String getColumnName ( int i ) { return headers [ i ] ; }
tr	7	@ Before public void setUp ( ) { outputStream = new ByteArrayOutputStream ( ) ; responder = new ResponseWriter ( ) ; responder . setOutputStream ( outputStream ) ; }
tr	1	private Operation ( ) { }
tr	3	public void setSimbolo ( String simbolo ) { this . simbolo = simbolo ; }
tr	7	public void setUniform ( String uniformName , DirectionalLight directionalLight ) { setUniform ( uniformName + ".base" , directionalLight . getBase ( ) ) ; setUniform ( uniformName + ".direction" , directionalLight . getDirection ( ) ) ; }
tr	2	public void setScore ( int [ ] score ) { this . score = score ; }
tr	4	@ Override public String toString ( ) { return getDescricao ( ) ; }
tr	4	public void Medium ( ) { System . out . println ( "Ceiling fan medium speed" ) ; }
tr	6	@ Override public void deleteExam ( Exam exam ) { examDAO . delete ( exam ) ; }
tr	8	@ Override public Object uscitaPartita ( String token ) throws InvalidTokenException { return myLogica . doUscitaPartita ( token ) ; }
tr	7	private void getBoarders ( ) { output . setStroke ( new BasicStroke ( profile . getBoarderMax ( ) ) ) ; getSide ( ) ; }
tr	1	private RetentionWord ( ) { super ( ) ; }
tr	7	@ Override public String toString ( ) { final StringBuilder sb = new StringBuilder ( 1024 ) ; sb . append ( "SDFRecord { structure=\n" ) . append ( m_strStructure ) . append ( "\nproperties: " ) . append ( super . toString ( ) ) . append ( "\n}" ) ; return sb . toString ( ) ; }
tr	9	public static JComboBox combobox ( ComboBoxModel model ) { if ( Constants . isLeopard ) { JComboBox combobox = new JComboBox ( model ) ; combobox . putClientProperty ( "JComponent.sizeVariant" , "small" ) ; combobox . setFont ( leopardFont ) ; return combobox ; } else return new JComboBox ( model ) ; }
tr	4	@ Override public PermissionType getType ( ) { return PermissionType . RCON ; }
tr	7	public GraphEntry ( String display , int number , ImageIcon icon ) throws Exception { this . display = display ; this . number = number ; this . icon = icon ; }
tr	5	public void openXML ( final File file ) { final XMLReader reader = new XMLReader ( ) ; reader . openXML ( file , this ) ; }
tr	6	public Vector4 normalizeW ( ) { if ( w != 1.0 ) { return new Vector4 ( x / w , y / w , z / w , 1 ) ; } return this ; }
tr	9	public static void main ( String [ ] args ) { String test = "a" ; int newLength = processStr ( test ) ; System . out . println ( newLength ) ; }
tr	3	public void start ( ) { if ( isRunning ) return ; run ( ) ; }
tr	9	@ Override public void addExpectedPowerTick ( int tick , String id , double p , String tableName ) { String psQuery = "insert into " + tableName + " values ('" + id + "'  " + tick + "  " + p + "  " + 0 + ")" ; executeUpdateQuery ( psQuery ) ; }
tr	3	public Decoder getFastInfosetDecoder ( ) { return ( Decoder ) getXMLReader ( ) ; }
tr	4	public ArrayList < String > getCustomFilters ( ) { return customFilters ; }
tr	1	public Article ( ) { }
tr	10	void addFeatures ( com . google . protobuf . ByteString value ) { ensureFeaturesIsMutable ( ) ; features_ . add ( value ) ; onChanged ( ) ; }
tr	4	protected Page getPage ( ) { return linkedObjects . get ( 0 ) . getPage ( ) ; }
tr	3	public String getDescripcion ( ) { return descripcion ; }
tr	7	public OtpErlangFloat ( final OtpInputStream buf ) throws OtpErlangDecodeException , OtpErlangRangeException { super ( buf ) ; final float f = floatValue ( ) ; }
tr	10	@ Test public void testNegativeNumbersArraySort ( ) { Integer [ ] arrayInt = new Integer [ ] { - 20 , - 1 , - 9 , - 80 , - 3 , - 12 , - 5 } ; assert . assertTrue ( 7 == arrayInt . length ) ; assert . assertEquals ( "[-20  -1  -9  -80  -3  -12  -5]" , toShow ( arrayInt ) ) ; hybridMergesort . sort ( arrayInt ) ; assert . assertEquals ( "[-80  -20  -12  -9  -5  -3  -1]" , toShow ( arrayInt ) ) ; }
tr	10	synchronized static void clearTemporaryBounds ( Object layout ) { for ( int i = LAYOUTS . size ( ) - 1 ; i >= 0 ; i -- ) { Object l = LAYOUTS . get ( i ) . get ( ) ; if ( l == layout ) { VALUES_TEMP . get ( i ) . clear ( ) ; return ; } } }
tr	4	@ JsonProperty ( "HealthStateInfo" ) public void setHealthStateInfo ( String HealthStateInfo ) { this . HealthStateInfo = HealthStateInfo ; }
tr	2	public void dispose ( ) { super . dispose ( ) ; composite . dispose ( ) ; }
tr	7	@ Override public String toString ( ) { return "Token(" + id + "(" + id . id ( ) + ")" + " " + text + " " + line + " " + column + ")" ; }
tr	5	public String toString ( ) { return "CREATE " + ( temporary ? "TEMPORARY " : "" ) + "TABLE " + ( exists ? "IF NOT EXISTS " : "" ) + name ; }
tr	4	public void setCAVVResultCode ( String value ) { this . cavvResultCode = value ; }
tr	8	public void setCOP ( double copX , double copY , double copD ) { cop . setX ( copX ) ; cop . setY ( copY ) ; cop . setZ ( copD ) ; }
tr	2	public FiltroGauss ( int tamanho ) { super ( tamanho ) ; }
tr	10	@ Override public boolean equals ( Object o ) { if ( this == o ) return true ; if ( ! ( o instanceof Song ) ) return false ; Song song = ( Song ) o ; if ( ! artistId . equals ( song . artistId ) ) return false ; if ( ! id . equals ( song . id ) ) return false ; if ( ! lyrics . equals ( song . lyrics ) ) return false ; if ( ! title . equals ( song . title ) ) return false ; return true ; }
tr	2	public void setE ( float e ) { this . e = e ; }
tr	6	@ Override public void keyPressed ( KeyEvent e ) { if ( e . getKeyCode ( ) == 10 ) { moverCima ( ) ; } }
tr	6	@ Override public void fillPolygon ( int [ ] xPoints , int [ ] yPoints , int nPoints ) { g . fillPolygon ( xPoints , yPoints , nPoints ) ; }
tr	5	public ArrayList < Quiz > retrieveFriendsQuizzes ( int userID ) { return getQuizzesWithQuery ( "select * from quizzes where creator in (select friend2ID from friends_join where friend1ID=" + userID + ") order by date_created limit 5" ) ; }
tr	6	private static String left ( String text , int length ) { String result = text + "                                              " ; result = result . substring ( 0 , length ) ; return "| " + result ; }
tr	5	public double . ( Vector3d v1 ) { return x * v1 . x + y * v1 . y + z * v1 . z ; }
tr	5	public static void qsort ( List < ? extends Comparable > list ) { qsort ( list , 0 , list . size ( ) - 1 ) ; }
tr	8	private static void addMetaData ( Document document ) { document . addTitle ( "Imprenta Nyomdaipari Kft. \u00E1raj\u00E1nlata" ) ; document . addSubject ( "\u00C1raj\u00E1nlat" ) ; document . addKeywords ( "\u00E1raj\u00E1nlat  PPC" ) ; document . addAuthor ( "Imprenta Kft." ) ; document . addCreator ( "PPC" ) ; }
tr	3	public WorldFrame getJFrame ( ) { return ( WorldFrame ) frame ; }
tr	5	public InputStream getAsciiStream ( int columnIndex ) throws SQLException { throw new UnsupportedOperationException ( "Not supported yet." ) ; }
tr	10	@ Override public String toString ( ) { StringBuilder builder = new StringBuilder ( ) ; if ( type == KEY_DOWN ) builder . append ( "key down  " ) ; else builder . append ( "key up  " ) ; builder . append ( keyCode ) ; builder . append ( " " ) ; builder . append ( keyChar ) ; return builder . toString ( ) ; }
tr	10	private static String jsonArray ( Object ... elements ) { if ( elements . length == 0 ) { return "[]" ; } StringBuilder result = new StringBuilder ( "[" + elements [ 0 ] . toString ( ) ) ; for ( int i = 1 ; i < elements . length ; i ++ ) { result . append ( " " ) ; result . append ( elements [ i ] . toString ( ) ) ; } result . append ( "]" ) ; return result . toString ( ) ; }
tr	7	public void addModel ( Model value ) { if ( value != null ) { value . setParent ( this ) ; this . geometry . add ( value ) ; markCreatedNode ( value ) ; } }
tr	5	@ Override public List < Symbol > typeParameters ( ) { throw new UnsupportedOperationException ( "Ambiguous" ) ; }
tr	7	@ Override public int compare ( String o1 , String o2 ) { if ( o1 . length ( ) < o2 . length ( ) ) return 1 ; else if ( o1 . length ( ) > o2 . length ( ) ) return - 1 ; return o1 . compareTo ( o2 ) ; }
tr	6	public int getProsition ( ) { return Math . min ( currentPosition , data . length ( ) ) ; }
tr	9	@ Parameters public static Collection < Object [ ] > data ( ) { List < Object [ ] > data = new ArrayList < Object [ ] > ( ) ; data . add ( new Object [ ] { new Object [ ] [ ] { { Parent . class , true } , { Child . class , false } } , Parent . class } ) ; data . add ( new Object [ ] { new Object [ ] [ ] { { Parent . class , true } , { Child . class , true } } , Child . class } ) ; return data ; }
tr	4	public Column ( IndividualsGroup genotypeWithAge ) { this . genotype = null ; this . genotypeWithAge = genotypeWithAge ; }
tr	8	public void parseExpressions ( String expressions , Handler handler ) { for ( String expression : expressions . split ( "[\n\r]+" ) ) { parseExpression ( expression , handler ) ; } }
tr	8	public static List < String > getIgnoreStartWith ( ) throws DocumentException { return getProperties ( getXMLRootElementByDom4j ( RULE_CONFIG ) . element ( "ignore" ) . element ( "start-with" ) ) ; }
tr	5	public void stopSliding ( ) { if ( slider != null ) { slider . restart ( ) ; slider . stop ( ) ; } count = 0 ; }
tr	2	public boolean isDebug ( ) { return debug ; }
tr	3	public String getTeacher ( ) { return this . teacher ; }
tr	9	private void endBlock ( ) { String s = textHandler . end ( ) ; if ( s . length ( ) > 0 ) { container . add ( new TextString ( s ) ) ; } container = null ; }
tr	6	public Turret ( int x , int y ) { super ( ) ; setPosition ( new Vec2i ( x , y ) ) ; instantiate ( ) ; }
tr	8	public String doCleanLink ( String link ) { if ( link == null ) return null ; try { link = URLDecoder . decode ( link , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { throw new AssertionError ( "le broken JVM face" ) ; } return link ; }
tr	1	public static void updatePrescription ( ) { }
tr	4	public void setDtGMTClosed ( String value ) { this . dtGMTClosed = value ; }
tr	2	public void setAavatr ( int avatar ) { this . avatar = avatar ; }
tr	8	@ Override public void onFatalRejection ( RejectedHandler < ? > rejection , Object context ) { onFatalRejectionConsumer . accept ( rejection , context ) ; }
tr	7	@ Override public void printStatus ( ) { System . out . println ( "Status is " + sstatus + " (" + this . estatus + ")" ) ; }
tr	2	public String cookie ( ) { return cookie ; }
tr	5	@ Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ) ; draw_me ( g ) ; }
tr	8	public static int foul ( TeamMatch match ) { int x = 0 ; for ( Points p : match . getPoints ( ) ) { if ( p instanceof Points . FoulPoints ) { x += p . getPoints ( ) ; } } return x ; }
tr	2	public void setTolerance ( double tolerance ) { this . tolerance = tolerance ; }
tr	5	public void removeCreature ( ICreature creature ) { actionables . remove ( creature ) ; }
tr	1	public Meta ( ) { }
tr	4	@ Override public void mouseEntered ( MouseEvent e ) { }
tr	6	@ Override public void render ( Graphics g , Camera cam ) { }
tr	7	@ Override public String toString ( ) { return getClass ( ) . getName ( ) + "[" + x + "/" + y + "]" ; }
tr	5	public Kontak findOne ( int index ) { return kontaks . get ( index ) ; }
tr	8	public void addEqualsCondition ( String fieldName , Object value ) { eqConditions . add ( new EqualsCondition ( fieldName , value ) ) ; }
tr	8	@ Before public void setUp ( ) throws Exception { int [ ] array = { 1 , 2 , 3 , 4 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 } ; int [ ] array2 = { 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 12 , 13 , 14 } ; fd = new FindDouble ( array ) ; fd2 = new FindDouble ( array2 ) ; }
tr	9	@ Test public void testByZero ( ) { try { DivisionResult dr = Util . divideByApproximatelyEqualParts ( 2 , 0 ) ; fail ( "ae expected  but obtained " + dr ) ; } catch ( ArithmeticException ae ) { } }
tr	5	public void setCurrentElementShape ( ElementShape shape ) { currentElementShape = shape ; updateShapes ( ) ; }
tr	8	@ XmlElementDecl ( namespace = "com/firstdata/Merchant/gmfV3.10" , name = "PINData" ) public JAXBElement < String > createPINData ( String value ) { return new JAXBElement < String > ( _PINData_QNAME , String . class , null , value ) ; }
tr	3	public List < Usuario > encontrarEntidadesUsuario ( ) { return encontrarEntidadesUsuario ( true , - 1 , - 1 ) ; }
tr	10	private void initialize ( ) { this . inputTextArea = new JTextArea ( 10 , 80 ) ; this . inputScrollPane = new JScrollPane ( this . inputTextArea , ScrollPaneConstants . VERTICAL_SCROLLBAR_AS_NEEDED , ScrollPaneConstants . HORIZONTAL_SCROLLBAR_AS_NEEDED ) ; this . outputTextArea = new JTextArea ( 10 , 80 ) ; this . outputScrollPane = new JScrollPane ( this . outputTextArea , ScrollPaneConstants . VERTICAL_SCROLLBAR_AS_NEEDED , ScrollPaneConstants . HORIZONTAL_SCROLLBAR_AS_NEEDED ) ; }
tr	9	@ Override protected void fillSamples ( List < Vector2 > samples , int numSamples ) { for ( int j = 0 ; j < numSamples ; j ++ ) { samples . add ( new Vector2 ( ( float ) j / numSamples , phi ( j ) ) ) ; } }
tr	2	public boolean IsValid ( ) { return this . Settings != null ; }
tr	4	public void setEmployeeName ( String fullName ) { name = fullName ; }
tr	9	public static double sigLevelByApproxRand ( int [ ] A , int [ ] B , int iterations ) { if ( A . length == 0 ) throw new IllegalArgumentException ( "Input arrays must not be empty!" ) ; if ( A . length != B . length ) throw new IllegalArgumentException ( "Input arrays must have equal length!" ) ; if ( iterations <= 0 ) throw new IllegalArgumentException ( "Number of iterations must be positive!" ) ; double [ ] X = new double [ A . length ] ; double [ ] Y = new double [ B . length ] ; for ( int i = 0 ; i < A . length ; i ++ ) { X [ i ] = A [ i ] ; Y [ i ] = B [ i ] ; } return sigLevelByApproxRand ( X , Y , iterations ) ; }
tr	2	public int getPointsize ( ) { return pointsize ; }
tr	7	public boolean IsInverse ( GameDirection Direction ) { if ( this == GameDirection . UP && Direction == GameDirection . DOWN ) return true ; if ( this == GameDirection . DOWN && Direction == GameDirection . UP ) return true ; if ( this == GameDirection . LEFT && Direction == GameDirection . RIGHT ) return true ; if ( this == GameDirection . RIGHT && Direction == GameDirection . LEFT ) return true ; return false ; }
tr	6	public static Vector2i add ( Vector2i one , Vector2i other ) { return new Vector2i ( one . getX ( ) + other . getX ( ) , one . getY ( ) + other . getY ( ) ) ; }
tr	9	public static boolean binarySearch ( BinaryTreeNode < Integer > root , BinaryTreeNode < Integer > target ) { BinaryTreeNode < Integer > current = root ; while ( current != null ) { if ( current . data > target . data ) { current = current . left ; } else if ( current . data < target . data ) { current = current . right ; } else { return true ; } } return false ; }
tr	3	public String toString ( ) { return state . toString ( ) ; }
tr	6	@ Test public void returnsCorrectGenreIdForPolka ( ) throws Exception { assertEquals ( 75 , ID3v1Genres . matchGenreDescription ( "Polka" ) ) ; }
tr	1	public Contact ( ) { }
tr	5	public void setDirSpeed ( int xdir , int ydir , double xspeed , double yspeed ) { this . xdir = xdir ; this . ydir = ydir ; this . xspeed = xspeed ; this . yspeed = yspeed ; }
tr	2	public int getStyle ( ) { return style ; }
tr	6	public DOTParserTokenManager ( SimpleCharStream stream ) { if ( SimpleCharStream . staticFlag ) throw new Error ( "ERROR: Cannot use a static CharStream class with a non-static lexical analyzer." ) ; input_stream = stream ; }
tr	2	public static final boolean StateIsCharState ( int index ) { return index < 7 ; }
tr	7	public NavalgoBattle ( Posicion maxPos , Jugador jugador ) { this ( ) ; this . setJugador ( jugador ) ; this . setMaximaPosicion ( maxPos ) ; }
tr	9	public static String formatInt ( long number ) { String num = number + "" ; String out = "" ; String . = "." ; int cnt = 1 ; for ( int i = num . length ( ) - 1 ; i >= 0 ; i -- ) { out = num . charAt ( i ) + out ; if ( cnt % 3 == 0 && i > 0 ) out = . + out ; cnt ++ ; } return out ; }
tr	6	public void add ( Address address ) { if ( addressBook != null ) { addressBook . add ( address ) ; } else if ( ! localAddresses . contains ( address ) ) { localAddresses . add ( address ) ; } }
tr	8	public boolean equals ( Object o ) { if ( o == this ) return true ; if ( ! ( o instanceof Card ) ) return false ; Card aCard = ( Card ) o ; if ( ( aCard . suitID == this . suitID ) && ( aCard . nonTrumpCardValue == this . nonTrumpCardValue ) && ( aCard . trumpCardValue == this . trumpCardValue ) ) return true ; return false ; }
tr	4	private static void revertClone ( byte [ ] b , int offset , int data ) { b [ offset + 1 ] = ( byte ) data ; b [ offset ] = ( byte ) ( data >> 8 ) ; return ; }
tr	3	public void setPreviousCell ( Cell previousCell ) { this . previousCell = previousCell ; }
tr	3	public void setCNPJ ( String CNPJ ) { this . CNPJ = CNPJ ; }
tr	1	public OutOfCoordinatesException ( ) { }
tr	2	public void resetTime ( ) { totalInNano = 0 ; }
tr	8	@ Override public boolean equals ( Object obj ) { if ( this == obj ) return true ; if ( obj == null ) return false ; if ( getClass ( ) != obj . getClass ( ) ) return false ; Cohort other = ( Cohort ) obj ; if ( yearOfAdmission == null ) { if ( other . yearOfAdmission != null ) return false ; } else if ( ! yearOfAdmission . equals ( other . yearOfAdmission ) ) return false ; return true ; }
tr	1	class < ? > [ ] groups ( ) default { } ;
tr	4	public void setItems ( ArrayList < CartItem > items ) { this . items = items ; }
tr	4	public Unit getBuildUnit ( ) { return getBuildUnit_native ( pointer ) ; }
tr	3	public static void println ( char x ) { out . println ( x ) ; }
tr	4	@ Override public void componentResized ( ComponentEvent e ) { }
tr	7	public LHC_Analysis_Panel1_Descriptor ( ) { lhcAnalysisPanel1 = new LHC_Analysis_Panel1 ( ) ; lhcAnalysisPanel1 . addCheckBoxActionListener ( this ) ; setPanelDescriptorIdentifier ( IDENTIFIER ) ; setPanelComponent ( lhcAnalysisPanel1 ) ; }
tr	10	public String readUntil ( char sentinel ) { int i = str . indexOf ( sentinel , cursor ) ; if ( i >= 0 ) { int from = cursor ; cursor = i + 1 ; return str . substring ( from , i ) ; } throw new ParseException ( "terminator not found" ) ; }
tr	8	@ XmlElementDecl ( namespace = "http://www.akamon.com/slots/gameconfigdata.xsd" , name = "GameConfigData" ) public JAXBElement < GameConfigData > createGameConfigData ( GameConfigData value ) { return new JAXBElement < GameConfigData > ( _GameConfigData_QNAME , GameConfigData . class , null , value ) ; }
tr	6	private PlayerPanel buildSecondPlayerPanel ( ) { return new ComputerPlayerPanel ( controller , PlayerSide . RIGHT ) ; }
tr	6	protected Tile getTile ( Point tileLocation ) { return tileLookup . get ( tileLocation ) ; }
tr	9	public void visitVarDecl ( VarDecl node , String args ) { node . getIdentList ( ) . accept ( this , args ) ; pp ( " : " ) ; node . getType ( ) . accept ( this , args ) ; pp ( ";\n" ) ; }
tr	3	public IRCPluginHandler getPluginHandler ( ) { return ph ; }
tr	4	@ Override public void keyPressed ( KeyEvent e ) { }
tr	9	private String genKey ( byte type , File raw ) { String result = null ; result = type + ResourceManager . SEPARATOR + raw . getName ( ) ; return result ; }
tr	9	public void addOtherTCPStationHostNPort ( StationType stationType , String host , String port ) { tcpProperties . setProperty ( stationType . getStationCode ( ) , host + " " + port ) ; }
tr	3	public ByteBuffer ( ) { buffer = new byte [ 16 ] ; this . len = 16 ; }
tr	7	private void formWindowClosed ( java . awt . event . WindowEvent evt ) { dispose ( ) ; }
tr	2	public void setCredits ( int credits ) { this . credits = credits ; }
tr	3	public void setId ( Integer id ) { this . id = id ; }
tr	8	public StopWatch restart ( ) { running = true ; stop = NOT_INITIALIZED ; start = System . currentTimeMillis ( ) ; return this ; }
tr	10	private void fixUpCase1 ( RBNode < T > node ) { if ( node . equals ( root ) ) { node . setColour ( Colour . BLACK ) ; } else { fixUpCase2 ( node ) ; } }
tr	9	public ShipShieldAbility ( World world ) { super ( world ) ; length = 4 ; coolDownTime = 10 ; isCooledDown = true ; isCoolingDown = false ; needsLocation = false ; isReady = false ; }
tr	8	@ Override public void onPlayerLand ( Player player , GuiGame gui , boolean doubles ) { player . setInWormhole ( ) ; super . onPlayerLand ( player , gui , doubles ) ; }
tr	1	public ArrayIndex ( ) { this ( 100 ) ; }
tr	7	public void error ( SAXParseException spe ) throws SAXException { errors . add ( spe . toString ( ) ) ; }
tr	9	public final < T > Mapping < T > map ( String property , Mapper < ? super S , ? extends T > extractor ) { return this . < T > map ( property ) . from ( extractor ) ; }
tr	3	public void setPane ( GravityPane gp ) { }
tr	4	private byte [ ] toBytes ( String s ) { return s . getBytes ( ) ; }
tr	8	private void clearStudent ( ) { StudentTableModel tableModel = ( StudentTableModel ) studentTable . getModel ( ) ; tableModel . getDataVector ( ) . removeAllElements ( ) ; studentTable . updateUI ( ) ; }
tr	9	public void setAzPort ( String azPort ) { String oldValue = this . azPort ; this . azPort = azPort ; buildGrantUrl ( ) ; buildAccessUrl ( ) ; fireListenerEvent ( new PropertyChangeEvent ( this , AZ_PORT , oldValue , this . azPort ) ) ; }
tr	8	DBException ( SQLException father , String sqlCause ) { super ( father ) ; this . sqlCause = sqlCause ; if ( is_foreign_key ( ) ) { type = FOREIGN_KEY ; } }
tr	6	public static GameResult fromInt ( int val ) { for ( GameResult gr : list ) { if ( gr . getValue ( ) == val ) { return gr ; } } return null ; }
tr	10	@ Override public List < Score > getHighscore ( ) { List < Score > ret ; try { ret = fetchScores ( 10 ) ; } catch ( IOException e ) { ret = new ArrayList < Score > ( 0 ) ; e . printStackTrace ( ) ; } return ret ; }
tr	2	@ Override public void resume ( ) { }
tr	7	@ Test public void test0 ( ) { String answers = "AAAAA" ; assertArrayEquals ( new int [ ] { 1 , 1 , 1 , 1 , 1 } , new CheatingQuiz ( ) . howMany ( answers ) ) ; }
tr	5	@ Override public void accept ( FSPSpecVisitor v ) { v . visit ( this ) ; }
tr	1	public boolean isPlayer ( ) { return false ; }
tr	2	public int getId ( ) { return id ; }
tr	8	@ Override public int hashCode ( ) { int hash = 3 ; hash = 31 * hash + this . id ; hash = 31 * hash + Objects . hashCode ( this . produto ) ; hash = 31 * hash + this . quantidade ; hash = 31 * hash + ( this . ativo ? 1 : 0 ) ; return hash ; }
tr	3	public HTTPMessage getMessage ( ) { return msg ; }
tr	5	public ErrorResult ( String id , String message ) { this . code = id ; this . message = message ; }
tr	2	public void setPaidAmount ( double paidAmount ) { this . paidAmount = paidAmount ; }
tr	8	public String toString ( ) { if ( clusterId != null ) return clusterId ; clusterId = String . format ( "%d" , rcid [ 0 ] ) ; for ( int i = 1 ; i < rcid . length ; i ++ ) { clusterId = clusterId . concat ( String . format ( ":%d" , rcid [ i ] ) ) ; } return clusterId ; }
tr	6	public HumanPlayer ( String name , int num , Color c ) { super ( name , num , c ) ; }
tr	4	public Object getNextPanelDescriptor ( ) { return LHC_Analysis_Panel4_Descriptor . IDENTIFIER ; }
tr	7	@ Override public NumberInteger parseNumber ( String s ) { return new NumberInteger ( Integer . parseInt ( s ) ) ; }
tr	3	@ Override protected double getDefault ( ) { return 0d ; }
tr	2	public boolean isShowPressure ( ) { return showPressure ; }
tr	5	public void setOutputs ( ArrayList < Connection > param ) { outputs = param ; }
tr	2	public void setFocused ( boolean focused ) { this . focused = focused ; }
tr	4	Vector < boolean > getDesiredFeatures ( ) { return editorState . getFeatures ( ) ; }
tr	5	@ Override public void sendAction ( ButtonSourceType type ) { nPanel . sendAction ( type ) ; }
tr	8	private int getCameraPlaneCutscene ( ) { int terrainDrawHeight = getFloorDrawHeight ( plane , cameraPositionY , cameraPositionX ) ; if ( terrainDrawHeight - cameraPositionZ < 800 && ( tileFlags [ plane ] [ cameraPositionX >> 7 ] [ cameraPositionY >> 7 ] & 4 ) != 0 ) return plane ; else return 3 ; }
tr	8	protected void clearCanvas ( Graphics graphicContext ) { graphicContext . setColor ( backgroundColor ) ; graphicContext . fillRect ( 0 , 0 , canvasWidth , canvasHeight ) ; }
tr	5	@ Override public int compareTo ( PathNode o ) { if ( cost < o . cost ) return - 1 ; if ( cost > o . cost ) return 1 ; return 0 ; }
tr	1	protected byte getMessageInfo ( ) { return 0 ; }
tr	9	@ Override @ Transactional ( propagation = Propagation . SUPPORTS ) public Sound find ( String s ) { return null ; }
tr	5	public void addDocumentToProcess ( IncomingDocument document ) { documentsToProcess . add ( document ) ; }
tr	8	@ Override public void run ( CommandArgument [ ] args ) { String sql = "SELECT cb.customerID  merchandiseID  m.name  price  SUM(quantity) AS Quantity " + "FROM CustomerBillingCycle cb  CustomerBill b  CustomerBillItems bi  Merchandise m " + "WHERE b.id = bi.customerBillID AND cb.id = b.id AND cb.customerID = ? AND bi.merchandiseID = m.id AND dateTime > ? AND dateTime < ? " + "GROUP BY cb.customerID  merchandiseID  m.name  price" ; DatabaseManager . runPreparedStatement ( sql , args , true ) ; }
tr	1	public ComputationalNode ( ) { }
tr	2	public void limpiar ( ) { this . data = "" ; }
tr	10	@ Test public void ShouldGetFactoriall5 ( ) { int factorialize = 5 ; BigInteger expected = new BigInteger ( "120" ) ; Factorializer factorializer = new Factorializer ( ) ; BigInteger result = factorializer . Factorialize ( factorialize ) ; assert . assertEquals ( expected , result ) ; }
tr	8	private void startArgument ( Attributes attrs ) { argName = attrs . getValue ( "name" ) ; argValue = attrs . getValue ( "value" ) ; new ExpressionTextHandler ( ) . start ( ) ; }
tr	9	public void update ( AssignmentTypes instance ) { log . debug ( "updating " + entitySimpleName + " instance" ) ; try { super . update ( instance ) ; log . debug ( entitySimpleName + " update successful" ) ; } catch ( RuntimeException re ) { log . error ( entitySimpleName + " update failed" , re ) ; throw re ; } }
tr	5	public String getSourceName ( Book book ) { return sourceFile ; }
tr	4	public static boolean isEmpty ( CharSequence s ) { return s == null || s . length ( ) == 0 ; }
tr	5	public static void input ( float delta ) { if ( nextScene != null ) { updateLoadScene ( ) ; } rootNode . input ( delta ) ; }
tr	1	public MyAWSCredentials ( ) { }
tr	10	public File uploadFile ( java . io . File file ) throws IOException { File f = createFile ( file . getName ( ) ) ; f . upload ( file ) ; return f ; }
tr	3	public final boolean isOverride ( ) { return ( flags & ACC_OVERRIDE ) == ACC_OVERRIDE ; }
tr	8	public void printHand ( Hand hand , Suit suit ) { this . printCards ( hand . getCards ( ) , hand . getPlayableCard ( suit ) ) ; }
tr	4	public void setCheckRequest ( CheckRequestDetails value ) { this . checkRequest = value ; }
tr	4	@ Override public int hashCode ( ) { int hash = 3 ; hash = 79 * hash + this . type ; return hash ; }
tr	8	public void push ( int x ) { if ( i < maks ) { stack [ i ] = x ; i ++ ; System . out . println ( x + " berhasil ditambahkan ke Stack" ) ; } else { System . out . println ( "Stack Penuh!" ) ; } }
tr	6	@ Override public int hashCode ( ) { return Objects . hash ( type , resources ) ; }
tr	2	@ Override public void onCreation ( ) { }
tr	5	@ Override public void start ( ) { mBindAllowed = true ; bindSelf ( ) ; setupInitialState ( ) ; }
tr	10	public static void findChicagoImperative ( final List < String > cities ) { boolean found = false ; for ( String city : cities ) { if ( city . equals ( "Chicago" ) ) { found = true ; break ; } } System . out . println ( "Found chicago?:" + found ) ; }
tr	4	private AvlNode findMax ( AvlNode t ) { if ( t == null ) return t ; while ( t . right != null ) t = t . right ; return t ; }
tr	5	public SWIGTYPE_p_uint32_t getPasswordSize ( ) { return new SWIGTYPE_p_uint32_t ( otapiJNI . OTPassword_getPasswordSize ( swigCPtr , this ) , true ) ; }
tr	3	public LogLevel getLogLevel ( ) { return logLevel ; }
tr	3	public String getNama ( ) { return nama ; }
tr	4	@ Override public Constant clone ( ) { return new Constant ( val ) ; }
tr	4	@ Override public void mouseClicked ( MouseEvent e ) { }
tr	2	public int getYearswithdrivinglicense ( ) { return yearswithdrivinglicense ; }
tr	10	@ Test public void testCreerLarve2 ( ) { SalleLarve testLarve2 = new SalleLarve ( ) ; testLarve2 . creerLarve ( Constantes . EVEN_LARVE , 2 ) ; assertEquals ( 5 , testLarve2 . getNbCourantFourmi ( ) ) ; testLarve2 . creerLarve ( Constantes . EVEN_PHEROMONE , - 2 ) ; assertEquals ( 5 , testLarve2 . getNbCourantFourmi ( ) ) ; }
tr	3	public BigInteger getOrdernumber ( ) { return ordernumber ; }
tr	10	public PopulateWorker ( Store store , Reader readFile ) { if ( Logger . getDebugValue ( ) == 4 ) { System . out . println ( " Populate Worker constructor is called." ) ; } PopulateWorker . store = store ; PopulateWorker . readFile = readFile ; }
tr	4	public static void main ( final String [ ] args ) { asciiTest ( ) ; }
tr	2	public void setMean ( double mean ) { this . mean = mean ; }
tr	3	public static String getProxyUser ( ) { return getProperty ( "tblog4j.http.proxyUser" ) ; }
tr	1	FormListener ( ) { }
tr	7	@ Override public void removeConsumer ( StringConsumer sc ) { if ( sc != null ) { ClientDescriptor clientDescriptor = ( ClientDescriptor ) sc ; clientDescriptor . removeConsumer ( this ) ; this . consumer = null ; } }
tr	9	public static void copy_music ( Connection conn ) throws SQLException { Statement stmt = conn . createStatement ( ) ; stmt . executeUpdate ( " REPLACE INTO curr_music_artists " + " SELECT * FROM tmp_music_artists " ) ; stmt . executeUpdate ( " REPLACE INTO curr_music_creations " + " SELECT * FROM tmp_music_creations " ) ; stmt . executeUpdate ( " REPLACE INTO curr_music_artist_creation(artist_id  creation_id) " + " SELECT ya.id  yc.id" + " FROM curr_music_artists ya " + " INNER JOIN tmp_music_artists ca ON ya.name=ca.name " + " INNER JOIN tmp_music_artist_creation cac ON ca.id=cac.artist_id " + " INNER JOIN tmp_music_creations cc ON cac.creation_id=cc.id " + " INNER JOIN curr_music_creations yc ON cc.name=yc.name " ) ; stmt . close ( ) ; }
tr	3	public Pizza getPizza ( ) { return pizzabuilder . getPizza ( ) ; }
tr	3	public String getScope ( ) { return scope ; }
tr	3	public String getUserAgent ( ) { return this . userAgent ; }
tr	5	public StreamCopyRunnable ( InputStream inputStream , OutputStream outputStream ) { this . inputStream = inputStream ; this . outputStream = outputStream ; }
tr	10	public Sprite ( BufferedImage image , int frameHeight , int numberOfTiles , int frameDurations [ ] ) { animation = new Animation ( ) ; SpriteLoader . parseSprite ( image , frameHeight , numberOfTiles , frameDurations , animation ) ; }
tr	1	public OptionParser ( ) { }
tr	10	protected void pausePlayback ( ) { if ( m_line != null ) { if ( m_status == PLAYING ) { m_line . stop ( ) ; m_status = PAUSED ; notifyEvent ( BasicPlayerEvent . PAUSED , getEncodedStreamPosition ( ) , - 1 , null ) ; m_line . drain ( ) ; } } }
tr	10	@ Test public final void testPair ( ) { final String left = new String ( "left" ) ; final String right = new String ( "right" ) ; final Pair pair = new Pair ( left , right ) ; assertEquals ( left , pair . getLeft ( ) ) ; assertEquals ( right , pair . getRight ( ) ) ; }
tr	10	@ Test public void ShouldIdentifyHandAsRoyalFlush ( ) { String hand = "TS KS QS JS AS" ; boolean expected = true ; PokerHandComparer comparer = new PokerHandComparer ( ) ; boolean result = comparer . IsRoyalFlush ( hand ) ; assert . assertEquals ( expected , result ) ; }
tr	4	@ JsonProperty ( "HealthState" ) public Endpoint . HealthState getHealthState ( ) { return HealthState ; }
tr	5	private Object makeObj ( final String item ) { return new Object ( ) { public String toString ( ) { return item ; } } ; }
tr	10	private int findShortestPath ( ) throws IllegalStateException { int min = Integer . MAX_VALUE ; for ( int i = 1 ; i <= graph . V ( ) ; i ++ ) { for ( int j = 1 ; j <= graph . V ( ) ; j ++ ) { if ( i == j && d [ i ] [ j ] [ graph . V ( ) ] < 0 ) { throw new IllegalStateException ( "Negative cycle!" ) ; } if ( d [ i ] [ j ] [ graph . V ( ) ] < min ) { min = d [ i ] [ j ] [ graph . V ( ) ] ; } } } return min ; }
tr	10	@ Override public void refuseOfferGui ( String seller , String offer , String buyer ) { loggerMediator . info ( "Buyer " + buyer + " refused offer " + offer + " from " + seller ) ; stateMgr . refuseOffer ( seller , offer , buyer ) ; }
tr	7	public int getSkillValue ( Skill s ) { return Integer . parseInt ( this . skills . get ( s ) ) ; }
tr	2	public int getIndex ( ) { return index ; }
tr	1	public boolean isEmpty ( ) { return true ; }
tr	10	public ListNode rotateRight ( ListNode head , int n ) { if ( head == null || head . next == null || n == 0 ) { return head ; } ListNode tail = head ; int len = 1 ; while ( tail . next != null ) { len ++ ; tail = tail . next ; } int shift = n % len ; if ( shift == 0 ) { return head ; } ListNode p = head ; int i = 1 ; while ( i < len - shift ) { p = p . next ; i ++ ; } tail . next = head ; head = p . next ; p . next = null ; return head ; }
tr	9	private void drawLives ( ) { for ( int i = 0 ; i < game . getLivesRemaining ( ) - 1 ; i ++ ) bufferGraphics . drawImage ( pacmanImgs [ G . RIGHT ] [ 0 ] , 210 - ( 30 * i ) / 2 , 260 , null ) ; }
tr	5	public K toMappedValue ( E enumValue ) { return map ( enumValue ) ; }
tr	1	public Survivor ( ) { this ( "" ) ; }
tr	6	public void delete ( ) throws DBException { DBTools . doDeleteID ( this . getTableName ( ) , id ) ; }
tr	10	@ Override public String toString ( ) { if ( null != responseAsString ) { return responseAsString ; } return "Response{" + "statusCode=" + statusCode + "  response=" + responseAsDocument + "  responseString='" + responseAsString + ' + "  is=" + is + "  con=" + con + } ; }
tr	2	private TurtleGrammar ( ) { init ( ) ; }
tr	3	public void setCollapsing ( boolean collapseOn ) { enableCollapsing = collapseOn ; }
tr	10	@ Override public void addFirstLevel ( final ILevel myFirstLevel ) { if ( myFirstLevel != null ) { if ( levelStage != null ) { myFirstLevel . setLevelStage ( levelStage ) ; } else if ( myFirstLevel . getLevelStage ( ) != null ) { setLevelStage ( myFirstLevel . getLevelStage ( ) ) ; } myFirstLevel . setLevelPack ( this ) ; getFirstLevels ( ) . add ( myFirstLevel ) ; } }
tr	10	public boolean isSpecial ( Date date ) { calendar . setTime ( date ) ; return calendar . get ( Calendar . MONTH ) == Calendar . SEPTEMBER && calendar . get ( Calendar . DAY_OF_MONTH ) == 21 ; }
tr	2	public String getStateName ( ) { return "Mel" ; }
tr	10	public void setData ( int rows , int columnBegin , int columnEnd , String [ ] pattern ) { _rowCount = rows ; colBegin = columnBegin ; colEnd = columnEnd ; _pattern = pattern ; }
tr	10	@ Override public void work ( RootNode root ) { listeners . forEach ( l -> l . visit ( root ) ) ; for ( Node n : root . - ) visit ( n ) ; }
tr	6	public WSClient ( IMediatorWSClient med ) { this . med = med ; infoRetriever = new FileInfoRetriever ( dbName ) ; }
tr	8	public Condition equalTo ( @ NotNull Value < Integer > value ) { return condition ( Operator . = , this , value ) ; }
tr	5	@ Override public void readFully ( byte [ ] b ) throws IOException { throw new NotImplementedException ( ) ; }
tr	1	public boolean reversible ( ) { return true ; }
tr	1	DummyClass ( ) { }
tr	9	protected void project ( ) { mXMinus = mTrans . times ( mX ) ; mPMinus = mTrans . times ( mP ) . times ( mTrans . transpose ( ) ) . + ( mQ ) ; }
tr	7	public static long pack ( long big , int little , int bits ) { assert bits > 32 && bits < 64 ; assert big < ( 1 << bits ) ; assert little < ( 1 << ( 64 - bits ) ) ; int ls = bits & 7 ; int bm = ( 1 << ls ) - 1 ; long res = ( big & ~ bm ) << ( 64 - bits ) ; res |= ( little & ( ( 1 << ( 64 - bits ) ) - 1 ) ) << ls ; res |= big & bm ; return res ; }
tr	7	private void setupServerEnvironment ( ) { if ( ssl ) HTTPSSession . register ( TransportRegistry . getTransportRegistryInstance ( ) ) ; else HTTPSessionApache . register ( TransportRegistry . getTransportRegistryInstance ( ) ) ; }
tr	3	public Usuario getAnalista ( ) { return analista ; }
tr	7	public ScoreState safeGet ( String state ) { stateMap . putIfAbsent ( state , new ScoreState ( "NULL" , 0 ) ) ; return stateMap . get ( state ) ; }
tr	2	public byte [ ] getOpUserPW ( ) { return adminPW ; }
tr	4	public void setDisplayLanguage ( String value ) { this . displayLanguage = value ; }
tr	9	public DebugCheckboxAction ( ) { super ( TITLE_DEBUG , DESC_DEBUG , MNEMONIC_DEBUG , ICON_SMALL_DEBUG , null , ACCELERATOR_DEBUG ) ; putValue ( SELECTED_KEY , debugMode ) ; }
tr	4	public void sendClearATOCommand ( ) { sendCommand ( "Clear ATO" , Globals . requestClearATO ) ; }
tr	6	synchronized void update ( ) { int i , j ; for ( i = 0 ; i < getWidth ( ) ; i ++ ) for ( j = 0 ; j < getHeight ( ) ; j ++ ) getItem ( i , j ) . update ( ) ; }
tr	7	public List < Method > get ( ) { return TypeUtils . searchMethod ( m_clazz , m_name , null ) ; }
tr	7	GenericDescriptor ( Descriptor buf , int offset , Device d ) { super ( buf , offset ) ; dev = d ; }
tr	6	@ Override public void setMessage ( final Object message ) { this . setText ( message . toString ( ) ) ; }
tr	1	public StringDumper ( ) { }
tr	3	public String getFromUserId ( ) { return fromUserId ; }
tr	6	public TileMap ( int width , int height ) { layers = new ArrayList < TileLayer > ( ) ; this . width = width ; this . height = height ; }
tr	7	private void close ( ) { try { if ( connection != null ) connection . close ( ) ; } catch ( SQLException e ) { System . err . println ( e ) ; } }
tr	9	public ZippedDocumentTemplate ( InputStream inputStream , Configuration freemarkerConfiguration ) throws IOException { super ( freemarkerConfiguration ) ; archive = OpenDocumentIO . readZip ( inputStream ) ; }
tr	4	public void setNetsMap ( Map < String , String > netsMap ) { this . netsMap = netsMap ; }
tr	5	public void create ( ParkReservationFacade parkReservationFacade ) { em . persist ( parkReservationFacade ) ; }
tr	3	public void setArrivalTime ( Time arrivalTime ) { this . arrivalTime = arrivalTime ; }
tr	4	public void registerComponent ( Component ... components ) { for ( Component component : components ) { registerComponent ( component ) ; } }
tr	6	public boolean canGather ( Unit targetUnit , boolean checkCanTargetUnit ) { return canGather_native ( pointer , targetUnit , checkCanTargetUnit ) ; }
tr	5	@ Override public T getById ( int id ) { return dao . getById ( id ) ; }
tr	5	@ Test public void testPosBySuffixCase1Helper ( ) { assertEquals ( "posBySuffix Case1 - match" , true , tester . posBySuffixCase1Helper ( "approximately" ) ) ; assertEquals ( "posBySuffix Case1 - not match" , false , tester . posBySuffixCase1Helper ( "bigger" ) ) ; assertEquals ( "posBySuffix Case1 - match" , true , tester . posBySuffixCase1Helper ( "bifid" ) ) ; assertEquals ( "posBySuffix Case1 - not match" , false , tester . posBySuffixCase1Helper ( "per" ) ) ; }
tr	6	@ Override public void addLoad ( Load load ) { loads . add ( load ) ; }
tr	6	private static void Insert ( int [ ] a , int num , int length ) { int i ; for ( i = 0 ; i < length ; i ++ ) { if ( num < a [ i ] ) break ; } for ( int j = length ; j >= i ; j -- ) { a [ j + 1 ] = a [ j ] ; } length ++ ; a [ i ] = num ; }
tr	9	public int getFrameLength ( int frame ) { int frameLength = frameLengths [ frame ] ; if ( frameLength == 0 ) { Animation animation = Animation . forFrameId ( frame2Ids [ frame ] ) ; if ( animation != null ) frameLength = frameLengths [ frame ] = animation . displayLength ; } if ( frameLength == 0 ) frameLength = 1 ; return frameLength ; }
tr	4	public ButtCity ( int row , int col ) { super ( IMAGE_PATH , row , col ) ; }
tr	10	public < T > boolean isSameTraversal ( Traversal < T > obj1 , Traversal < T > obj2 ) { this . hashmap . clear ( ) ; INEXACT_ALLOWED = false ; INEXACT_COMPARED = false ; return isSameTraversalPrivate ( obj1 , obj2 ) ; }
tr	9	@ Test public void checkWinHoriz ( ) throws Exception { startup ( ) ; int [ ] [ ] exportedGrid = { { 0 , 0 , 0 , 0 , 0 , 0 , 0 } , { 0 , 0 , 0 , 0 , 0 , 0 , 0 } , { 0 , 0 , 0 , 0 , 0 , 0 , 0 } , { 0 , 0 , 0 , 0 , 0 , 0 , 0 } , { 2 , 2 , 2 , 0 , 0 , 0 , 0 } , { 1 , 1 , 1 , 1 , 0 , 0 , 0 } } ; initializeGrid ( exportedGrid ) ; assertTrue ( b . checkHorizontal ( ) ) ; }
tr	2	@ Override public boolean isList ( ) { return false ; }
tr	5	public double getAsDouble ( String key , double defaultValue ) { double value = getAsDouble ( key ) ; return value == null ? defaultValue : value ; }
tr	1	protected void interrupted ( ) { }
tr	8	public Scanner ( int adresse , int timeoutMS ) { this . adresse = adresse ; this . HWaccess = HWSimulation . getInstance ( ) ; workerThread = new ParallelWarteClass ( 1000 ) ; }
tr	5	public void reset ( ) { uid . setText ( "" ) ; name . setText ( "" ) ; email . setText ( "" ) ; }
tr	9	@ Override public Rectangular getPosition ( Area a ) { if ( a . getParentArea ( ) == area && a instanceof DefaultArea ) return ( ( DefaultArea ) a ) . getGridPosition ( ) ; else return null ; }
tr	10	@ Override public void actionPerformed ( ActionEvent e ) { int newRow = row + 1 ; if ( newRow > 20 ) newRow = 0 ; if ( ! SamuraiTableModel . isVisible ( newRow , column ) ) { if ( column < 9 || column > 11 ) newRow += 3 ; else newRow = 6 ; } moveToCell ( newRow , column ) ; }
tr	4	public PlayerDifficulty getPlayerDifficulty ( ) { return this . gameState . playerDifficulty ; }
tr	5	public int getComponetType ( boolean disregardScrollPane ) { if ( compType == TYPE_UNSET ) compType = checkType ( disregardScrollPane ) ; return compType ; }
tr	10	@ Override public String toString ( ) { return "Client [id=" + id + "  inn=" + inn + "  firstName=" + firstName + "  lastName=" + lastName + "  patronymic=" + patronymic + "  birthDay=" + birthDay + "  passportNumber=" + passportNumber + "]" ; }
tr	3	public String getMensagem ( ) { return mensagem ; }
tr	5	public GUIElement getElement ( int ID ) { return compositeElements . get ( ID ) ; }
tr	7	public static void rotateX ( Matrix ma , double ang ) { Matrix m = Draw3D . rotateX ( ang ) ; mult ( m , ma , ma ) ; }
tr	8	public void morpToDrones ( Set < Unit > larvae ) { if ( larvae == null ) { return ; } for ( Unit larva : larvae ) { ExecuteOrders . instance . morphToDrone ( larva ) ; } }
tr	9	public Object1 method296 ( int i , int j , int k ) { Ground class30_sub3 = groundArray [ i ] [ j ] [ k ] ; if ( class30_sub3 == null ) return null ; else return class30_sub3 . obj1 ; }
tr	5	static public List < Integer > asList ( String str ) { return asList ( str , " " ) ; }
tr	10	@ Override public void save ( PrintWriter f ) { f . println ( "<Object>" ) ; f . println ( "<Type>\n Latex \n</Type>" ) ; f . println ( "<Location>\n" + location . x + "\n" + location . y + "\n</Location>" ) ; f . println ( "<Source>\n" + latexCode + "\n</Source>" ) ; f . print ( "</Object>\n" ) ; }
tr	5	@ Override public String toString ( ) { return "MetricData [timestamp=" + timestamp + "  value=" + value + "]" ; }
tr	10	public static JSONArray listById ( long [ ] aId ) { JSONArray ja = new JSONArray ( ) ; for ( long l : aId ) { User user = User . findById ( l ) ; if ( user != null ) ja . put ( user . toJson ( ) ) ; } return ja ; }
tr	7	@ Override public String toString ( ) { return "[c:#" + a . hashCode ( ) + "<->#" + b . hashCode ( ) + "  t=" + type + "]" ; }
tr	6	@ Override public String visit ( AssignmentExpressionNode node ) { return EMPTY ; }
tr	1	private Base64 ( ) { }
tr	3	public static boolean isUnix ( ) { return isLinux ( ) || isMac ( ) ; }
tr	6	public final String readPropertyValue ( final String propertyName , final String defaultValue ) { return PROPERTIES . getProperty ( propertyName , defaultValue ) ; }
tr	10	public static boolean getActionState ( int player , ACTION a ) { if ( player < 0 || player + 1 > KeyboardInput . number_players ) { DebugConsole . PrintError ( "Invalid player number: " + player ) ; return false ; } if ( KeyboardInput . action [ player ] [ a . ordinal ( ) ] [ 0 ] == true && KeyboardInput . action [ player ] [ a . ordinal ( ) ] [ 1 ] == true ) { KeyboardInput . action [ player ] [ a . ordinal ( ) ] [ 0 ] = false ; KeyboardInput . action [ player ] [ a . ordinal ( ) ] [ 1 ] = false ; return true ; } else return false ; }
tr	8	public void paint ( Graphics g ) { g . setColor ( color ) ; g . fillOval ( ( int ) xLoc - 5 , ( int ) yLoc - 5 , 10 , 10 ) ; }
tr	8	public static PostParameter [ ] getParameterArray ( String name1 , int value1 , String name2 , int value2 ) { return getParameterArray ( name1 , String . valueOf ( value1 ) , name2 , String . valueOf ( value2 ) ) ; }
tr	10	public static void main ( String [ ] args ) throws XmlRpcException , IOException { XmlRpcBankServer server = new XmlRpcBankServer ( Integer . valueOf ( args [ 0 ] ) ) ; server . start ( ) ; }
tr	1	private SingletonOfConstantsS ( ) { }
tr	1	private Err ( ) { }
tr	8	public Hierarchy getHierarchy ( String id ) { for ( Hierarchy h : hierarchys ) { if ( h . getId ( ) . equalsIgnoreCase ( id ) ) { return h ; } } return null ; }
tr	4	public String getHealthText ( ) { double health = getHealth ( ) ; if ( health > 0.75 ) { return "excellently" ; } else if ( health > 0.50 ) { return "well" ; } else if ( health > 0.25 ) { return "decently" ; } else { return "poorly" ; } }
tr	6	public PersonInfoHandler ( ) { is_init = false ; dao = new PersonDao ( ) ; dao_state = new PersonStateDao ( ) ; }
tr	10	public int iConomyversion ( ) { if ( iConomyversion == 0 ) { try { if ( packageExists ( new String [ ] { "net.milkbowl.vault.economy.Economy" } ) ) { iConomyversion = 2 ; plugin . getLogger ( ) . info ( "hooked into Vault" ) ; } else if ( packageExists ( new String [ ] { "com.nijikokun.register.payment.Methods" } ) ) { iConomyversion = 1 ; plugin . getLogger ( ) . info ( "hooked into Register" ) ; } else if ( packageExists ( new String [ ] { "com.iConomy.iConomy" , "com.iConomy.system.Account" , "com.iConomy.system.Holdings" } ) ) { iConomyversion = 5 ; plugin . getLogger ( ) . info ( "hooked into iConomy5" ) ; } else if ( packageExists ( new String [ ] { "com.iCo6.system.Accounts" } ) ) { iConomyversion = 6 ; plugin . getLogger ( ) . info ( "hooked into iConomy6" ) ; } else { plugin . getLogger ( ) . severe ( "cant hook into iConomy5  iConomy6  Vault or Register. Downloading Vault!" ) ; plugin . getLogger ( ) . severe ( " ************ Please download and configure Vault!!!!! **********" ) ; } } catch ( Exception E ) { E . printStackTrace ( ) ; iConomyversion = 0 ; } return iConomyversion ; } else { return 2 ; } }
tr	5	public java . lang . String getImei ( ) { return imei ; }
tr	10	@ Override public long getLong ( long i ) { if ( ptr != 0 ) { return ( long ) ( Utilities . UNSAFE . getShort ( ptr + sizeof * i ) ) ; } else { if ( isConstant ( ) ) { return ( long ) data [ 0 ] ; } else { return ( long ) data [ ( int ) i ] ; } } }
tr	5	protected void check ( String method ) { if ( mAmShutdown ) throw new RuntimeException ( "NetBase." + method + " called when NetBase isn't in initialized state" ) ; }
tr	2	public void setZavod_zavod_id ( long zavod_zavod_id ) { this . zavod_zavod_id = zavod_zavod_id ; }
tr	8	@ Override public Object visit ( ASTVisitor v , Object arg ) throws Exception { return v . visitBinaryExpr ( this , arg ) ; }
tr	4	public Nation ( Color c ) { color = c ; }
tr	9	public static void RemoveMesh ( String name ) { Mesh del = null ; for ( Mesh m : models ) { if ( m . name . equals ( name ) ) { del = m ; break ; } } if ( del != null ) { models . remove ( del ) ; } }
tr	8	@ XmlElementDecl ( namespace = "com/firstdata/Merchant/gmfV3.10" , name = "HSAFTblVer" ) public JAXBElement < String > createHSAFTblVer ( String value ) { return new JAXBElement < String > ( _HSAFTblVer_QNAME , String . class , null , value ) ; }
tr	5	public void removeListeners ( ) { b_menuprincipal . removeActionListener ( controleur ) ; b_boutonquitter . removeActionListener ( controleur ) ; }
tr	6	@ Override public void setUpElement ( ) { addMouseListener ( this ) ; setOpaque ( opac ) ; selected = false ; }
tr	4	public String getCarModel ( ) { return carModelTxt . getText ( ) ; }
tr	8	@ Test public void testTimes ( ) { RationalNumber x = new RationalNumber ( 4 , 17 ) ; RationalNumber y = new RationalNumber ( 17 , 4 ) ; RationalNumber z = new RationalNumber ( 1 , 1 ) ; assertEquals ( x . times ( y ) , z ) ; }
tr	6	public Citizen ( String surname , String name , String secondName ) { this ( new FullName ( surname , name , secondName ) ) ; }
tr	7	private void sanitiseLimits ( ) { currentMaxValue = pinLimits ( currentMaxValue ) ; currentMinValue = pinLimits ( currentMinValue ) ; hilitedMaxValue = pinLimits ( hilitedMaxValue ) ; hilitedMinValue = pinLimits ( hilitedMinValue ) ; markedPoint = pinLimits ( markedPoint ) ; }
tr	10	private static int maxNode3 ( BSTNode root , int maxSoFar ) throws InvalidBSTException { if ( root == null ) return maxSoFar ; if ( maxNode3 ( root . getLeft ( ) , maxSoFar ) > ( ( Integer ) root . getData ( ) ) ) { throw new InvalidBSTException ( ) ; } maxSoFar = ( ( Integer ) root . getData ( ) ) . intValue ( ) ; return maxNode3 ( root . getRight ( ) , maxSoFar ) ; }
tr	2	public LinerProblingHashST ( ) { this ( INIT_SIZE ) ; }
tr	8	public void add ( ArimaaMove one , ArimaaMove two ) { for ( int i = 0 ; i < 12 ; i ++ ) { piece_bb [ i ] = one . piece_bb [ i ] ^ two . piece_bb [ i ] ; } steps = one . steps + two . steps ; move_ordering_value = one . move_ordering_value + two . move_ordering_value ; }
tr	3	public static double rawToNumber ( Object value ) { if ( value instanceof double ) return ( double ) value ; return null ; }
tr	9	RPCErrorResponseMessage ( JSONObject jsonObj ) throws JSONException { super ( jsonObj ) ; mObject . put ( "type" , "ERROR" ) ; mObject . put ( "message" , jsonObj . getString ( "message" ) ) ; if ( jsonObj . has ( "callargs" ) ) mObject . put ( "callargs" , jsonObj . getJSONObject ( "callargs" ) ) ; }
tr	8	@ Override public String getCode ( ) { if ( ! uncheckedGenes . isEmpty ( ) ) { throw new IllegalStateException ( "Breeding operator forgot to repair mortal after modification. Unchecked internal tree structure might be invalid. Aborting. DEBUG: " + uncheckedGenes ) ; } return getRootGene ( ) . getCode ( new SourceCompositionTask ( ) ) ; }
tr	8	@ Override public void setStationToPlayer ( Player player , String station ) { stationList . put ( player , station ) ; }
tr	6	public void updateRef ( int columnIndex , Ref x ) throws SQLException { throw new UnsupportedOperationException ( "Not supported yet." ) ; }
tr	1	public Time2 ( ) { this ( 0 , 0 , 0 ) ; }
tr	4	@ Override public long now ( ) { return System . currentTimeMillis ( ) / 1000 ; }
tr	4	public static TransferFunctionType valueOf ( String code ) { return valueOf ( TransferFunctionType . class , code ) ; }
tr	9	@ Test public void removeConnection ( ) { assertTrue ( n3 . removeConnectionFrom ( n1 ) ) ; assertFalse ( n3 . removeConnectionFrom ( n1 ) ) ; assertTrue ( n3 . removeConnectionTo ( n5 ) ) ; assertFalse ( n3 . removeConnectionTo ( n5 ) ) ; }
tr	1	public LiveCall ( ) { }
tr	10	public static < R , T > R reduce ( Collection < T > c , Function2 < R , T > f , R z ) { for ( T e : c ) { z = f . apply ( z , e ) ; } return z ; }
tr	6	private void addFontColor ( Node node , String color ) { addStyleProperty ( node , "color: " + color ) ; }
tr	8	@ Override public boolean equals ( Object obj ) { if ( ! ( obj instanceof Tuple ) ) return false ; Tuple tup = ( Tuple ) obj ; return direction == tup . direction && playable . equals ( tup . playable ) ; }
tr	3	public static IUStatusDao create ( ) { return new UStatusDaoImpl ( ) ; }
tr	7	public User ( int id , String name , String email , String passwd , byte [ ] avatar ) { this . id = id ; this . name = name ; this . email = email ; this . passwd = passwd ; this . avatar = avatar ; }
tr	8	public void putAll ( BSONObject o ) { for ( String key : o . keySet ( ) ) { put ( key , o . get ( key ) ) ; } }
tr	3	public String getJid ( ) { return jid ; }
tr	10	public byte DecodeNormal ( SevenZip . Compression . RangeCoder . Decoder rangeDecoder ) throws IOException { int symbol = 1 ; do symbol = symbol << 1 | rangeDecoder . DecodeBit ( m_Decoders , symbol ) ; while ( symbol < 256 ) ; return ( byte ) symbol ; }
tr	7	private void miEditarActionPerformed ( java . awt . event . ActionEvent evt ) { desbloquearCampos ( ) ; }
tr	5	@ Override public String toString ( ) { return "o(" + blackPlayerPoints + " " + whitePlayerPoints + ")" ; }
tr	6	public static Object getObject ( String key ) { return data . get ( key ) ; }
tr	2	public LightInteger ( int data ) { this . data = data ; }
tr	5	public void setMainMessageLabel ( String message ) { mainMessageLabel . setText ( message ) ; }
tr	5	@ Override public String toString ( ) { return user_nome + " " + user_sobrenome ; }
tr	8	private void displayEvent ( int line ) { SMPPEventDialog dialog = new SMPPEventDialog ( parent , events . elementAt ( line ) ) ; dialog . setVisible ( true ) ; }
tr	3	public XMLReaderDOM getDOMReader ( ) { if ( domReader == null ) { domReader = new XMLReaderDOM ( ) ; } return domReader ; }
tr	5	@ Override public MyDatabase getMysql ( ) { if ( client == null ) { return SgdBase . getMysql ( ) ; } else { return client . getMysql ( ) ; } }
tr	8	@ Override public Angle add ( final Angle a ) { IntegerAngle anotherAngle = cast ( a ) ; return new IntegerAngle ( angle + anotherAngle . angle ) ; }
tr	10	private void optionallyClearStats ( ) { System . out . println ( "Would you like to clear these stats? (N/y) " ) ; boolean shouldClearStats = userInput . getYesNo ( ) ; if ( shouldClearStats ) { StatsState . getStatsState ( ) . clearStatistics ( ) ; } }
tr	4	public void setOMerchant ( Merchant merchant ) { oMerchant = merchant ; }
tr	1	public Assignments ( ) { }
tr	3	synchronized public String getName ( ) { return name ; }
tr	6	protected void installHandler ( YSAXHandler o ) { this . handlers . add ( o ) ; o . installParent ( this ) ; }
tr	5	private int swapByte ( int a ) { int ret = ( int ) ( ( ( a & F0 ) >> 4 ) & 0F ) ; ret |= ( ( a & 0F ) << 4 ) & F0 ; return ret ; }
tr	8	@ Override public Map < Name , String > getMainAttributes ( ) { return Collections . unmodifiableMap ( attributes ) ; }
tr	6	public void setActionListener ( ActionListener lis ) { BotModificar . addActionListener ( lis ) ; BotNuevo . addActionListener ( lis ) ; }
tr	9	public void setTileSetFileName ( int layer , String tileSetFileName ) { System . err . println ( "Using tileset for layer " + layer + ": " + tileSetFileName ) ; layers . get ( layer ) . setTileSetFileName ( tileSetFileName ) ; }
tr	9	Event ( char tp , int tm , int cusNum , int serNum ) { type = tp ; time = tm ; customerNum = cusNum ; serverNum = serNum ; }
tr	1	public GraphNodePriorityQueue ( ) { }
tr	9	public static boolean edgeTest ( double [ ] [ ] a , double [ ] [ ] b ) { double tmpPoint [ ] ; if ( a [ 0 ] [ X ] > a [ 1 ] [ X ] ) { tmpPoint = a [ 0 ] ; a [ 0 ] = a [ 1 ] ; a [ 1 ] = tmpPoint ; } if ( b [ 0 ] [ X ] > b [ 1 ] [ X ] ) { tmpPoint = b [ 0 ] ; b [ 0 ] = b [ 1 ] ; b [ 1 ] = tmpPoint ; } if ( a [ 0 ] [ Y ] == a [ 1 ] [ Y ] && b [ 0 ] [ Y ] == b [ 1 ] [ Y ] ) { if ( ( a [ 0 ] [ Y ] == b [ 0 ] [ Y ] ) && ( between ( b , a [ 0 ] [ X ] , X ) || between ( b , a [ 1 ] [ X ] , X ) ) ) { return true ; } return false ; } if ( a [ 0 ] [ X ] == a [ 1 ] [ X ] ) { if ( b [ 0 ] [ X ] == b [ 1 ] [ X ] ) { if ( ( a [ 0 ] [ X ] == b [ 0 ] [ X ] ) && ( between ( b , a [ 0 ] [ Y ] , Y ) || between ( b , a [ 1 ] [ Y ] , Y ) ) ) { return true ; } return false ; } return wallTest ( b , a ) ; } else if ( b [ 0 ] [ X ] == b [ 1 ] [ X ] ) return wallTest ( a , b ) ; return segmentTest ( a , b ) ; }
tr	4	public static void swap ( int a , int b ) { int t ; t = a ; a = b ; b = t ; }
tr	1	public TestSetup ( ) { }
tr	6	public static _Fields findByThriftIdOrThrow ( int fieldId ) { _Fields fields = findByThriftId ( fieldId ) ; if ( fields == null ) throw new IllegalArgumentException ( "Field " + fieldId + " doesn't exist!" ) ; return fields ; }
tr	8	protected void criarMetaObjeto ( ) { framePai . dispose ( ) ; switch ( listaSemiPontos . size ( ) ) { case 1 : this . criarPonto ( ) ; break ; case 2 : this . criarReta ( ) ; break ; default : this . criarPoligono ( ) ; } }
tr	4	public MatchingPatternCube ( Geometry world , int dimension ) { super ( world , dimension ) ; }
tr	1	public All ( ) { super ( "+" ) ; }
tr	1	protected Learner ( ) { this ( 1 ) ; }
tr	1	public CustomerContact ( ) { }
tr	6	public Object [ ] formatoTabela ( FonteFinanciamento fontefinanciamento ) { return new Object [ ] { fontefinanciamento . getId ( ) , fontefinanciamento . getNome ( ) } ; }
tr	6	public String getOption ( int index ) { return options . get ( index ) . getText ( ) ; }
tr	1	public AlphaLabel ( ) { super ( ) ; }
tr	3	public String getObservacoes ( ) { return observacoes ; }
tr	9	private void makeObjects ( ) { ellipse1 = new Ellipse ( new Point ( 2 , 2 ) , new Point ( 8 , 2 ) , new Point ( 2 , 6 ) , new Point ( 8 , 6 ) ) ; ellipse2 = new Ellipse ( new Point ( 0 , - 4 ) , new Point ( 20 , - 4 ) , new Point ( 0 , 12 ) , new Point ( 20 , 12 ) ) ; ellipse3 = new Ellipse ( ellipse1 ) ; circle1 = new Circle ( new Point ( 3 , 3 ) , 6 ) ; circle2 = new Circle ( new Point ( 5 , 4 ) , 2 ) ; }
tr	2	private ImageIcon getImageIcon ( ) { return null ; }
tr	9	private void assertRejected ( State < ? > s , Throwable reason ) { assertEquals ( REJECTED , s . getState ( ) ) ; assertEquals ( reason , s . getReason ( ) ) ; }
tr	7	@ Override public void addObject ( int index , MapObject object ) { data . insert ( index , object ) ; }
tr	8	@ XmlElementDecl ( namespace = "com/firstdata/Merchant/gmfV3.10" , name = "UPCPrice" ) public JAXBElement < String > createUPCPrice ( String value ) { return new JAXBElement < String > ( _UPCPrice_QNAME , String . class , null , value ) ; }
tr	7	public synchronized Environment addFullGlobalTree ( Object g ) { iterateDeep ( g , deepGlobalSetter ) ; return addGlobalInstance ( g ) ; }
tr	9	public static String [ ] readAllStrings ( ) { String [ ] tokens = WHITESPACE_PATTERN . split ( readAll ( ) ) ; if ( tokens . length == 0 || tokens [ 0 ] . length ( ) > 0 ) return tokens ; String [ ] decapitokens = new String [ tokens . length - 1 ] ; for ( int i = 0 ; i < tokens . length - 1 ; i ++ ) decapitokens [ i ] = tokens [ i + 1 ] ; return decapitokens ; }
tr	6	public ShippedPanel ( ) { company = new TextField ( "Shipping Company" ) ; tracking = new TextField ( "Tracking" ) ; recipient = new TextField ( "To" ) ; addComponent ( company ) ; addComponent ( tracking ) ; addComponent ( recipient ) ; }
tr	3	public void setNext ( PermuLeafNode next ) { this . next = next ; }
tr	2	public boolean isSituacao ( ) { return situacao ; }
tr	2	public int getDoubleInJail ( ) { return this . doubleInWormhole ; }
tr	4	public Hipodromo seleccionarHipodromo ( Hipodromo hipodromo ) { return ssHipodromos . seleccionarHipodromo ( hipodromo ) ; }
tr	5	public void start ( ) { try { ss . accept ( ) ; } catch ( IOException e ) { } }
tr	8	public static int addDef ( int piece , boolean isPieceWhite ) { if ( isPieceWhite && piece == DraughtsState . WHITEPIECE || piece == DraughtsState . WHITEKING ) { return 5 ; } if ( ! isPieceWhite && piece == DraughtsState . BLACKPIECE || piece == DraughtsState . BLACKKING ) { return 5 ; } return 0 ; }
tr	10	private void initRegionList ( ) { ArrayList < String > regionNomList = RegionNoyauFonctionnel . getRegVecNom ( ) ; for ( String lst : regionNomList ) { cmbReg . addItem ( lst ) ; } cmbReg . setSelectedIndex ( 0 ) ; }
tr	10	@ Override public void paintBorder ( EComponent c , Graphics2D g2 , int x , int y , int width , int height ) { }
tr	2	public void setCosto ( double costo ) { this . costo = costo ; }
tr	9	public static void pairsAndValues ( ) { int [ ] arr = { 1 , 2 , 3 } ; for ( int i = 0 ; i < arr . length ; i ++ ) for ( int j = 0 ; j < arr . length ; j ++ ) { System . out . print ( "Value : " + ( arr [ i ] + arr [ j ] ) ) ; System . out . println ( "  Pair : " + arr [ i ] + " and " + arr [ j ] ) ; } }
tr	10	public Service _this ( org . omg . CORBA . ORB orb ) { return ServiceHelper . narrow ( super . _this_object ( orb ) ) ; }
tr	8	public SMWithinBox ( String field , SMDouble latLL , SMDouble lonLL , SMDouble latUR , SMDouble lonUR ) { this . field = field ; this . latLL = latLL ; this . lonLL = lonLL ; this . latUR = latUR ; this . lonUR = lonUR ; }
tr	4	@ Override public void execute ( ) { light . on ( ) ; }
tr	7	public RemoteMonitor ( String label , int x , int y , int width , int height ) { this . label = label ; this . x = x ; this . y = y ; this . width = width ; this . height = height ; }
tr	7	@ SuppressWarnings ( "unchecked" ) public static String enumToString ( enum _enum ) { if ( _enum . toString ( ) . startsWith ( "_" ) ) { return _enum . toString ( ) . substring ( 1 ) ; } else { return _enum . toString ( ) ; } }
tr	5	public static void removeConnection ( String identifier ) { htConnections . remove ( identifier ) ; }
tr	5	public synchronized void delete ( ) { if ( swigCPtr != 0 ) { if ( swigCMemOwn ) { swigCMemOwn = false ; otapiJNI . delete_Storable ( swigCPtr ) ; } swigCPtr = 0 ; } }
tr	5	public void init ( ) { for ( AbstractFeaturizer f : featurizerList ) { f . init ( m ) ; } }
tr	2	public boolean checkInput ( ) { return ( mdpData != null ) ; }
tr	8	public Sheets ( byte A2 , byte A3 , byte A4 , byte A5 ) { sizes = new byte [ 4 ] ; sizes [ 0 ] = A2 ; sizes [ 1 ] = A3 ; sizes [ 2 ] = A4 ; sizes [ 3 ] = A5 ; hash = ( short ) ( A2 * 512 + A3 * 128 + A4 * 16 + A5 ) ; area = ( byte ) ( 8 * A2 + 4 * A3 + 2 * A4 + A5 ) ; }
tr	10	@ Test public void testStep4Status ( ) { Event event = new Event ( ) ; Logic tester = new Logic ( event , new DataManager ( ) ) ; assertEquals ( "Result" , 0 , tester . step4Status ( ) ) ; event . setSelectedHotelIdx ( 1 ) ; assertEquals ( "Result" , 1 , tester . step4Status ( ) ) ; }
tr	5	@ Override public void mouseMoved ( MouseEvent e ) { updateWidgets ( e ) ; }
tr	6	@ Override public boolean hasTopBorder ( ) { return topBorder . getStyle ( ) != Style . NONE ; }
tr	8	public boolean needsAlgorithmicProcessing ( ) { long start = System . currentTimeMillis ( ) ; for ( int i = 0 ; i < array . length / 10 ; i ++ ) { } return ( start - System . currentTimeMillis ( ) > maxSeconds * 1000 ) ; }
tr	9	public final Vector getOptionValues ( Option option ) { Vector result = new Vector ( ) ; while ( true ) { Object o = getOptionValue ( option , null ) ; if ( o == null ) { return result ; } else { result . addElement ( o ) ; } } }
tr	10	@ Override public boolean isEmpty ( ) { for ( MapSegment < K , V > mapSegment : mapSegments ) { mapSegment . lock . readLock ( ) . lock ( ) ; } try { for ( MapSegment < K , V > mapSegment : mapSegments ) { if ( ! mapSegment . isEmpty ( ) ) return false ; } return true ; } finally { for ( MapSegment < K , V > mapSegment : mapSegments ) { mapSegment . lock . readLock ( ) . unlock ( ) ; } } }
tr	6	protected void setCenter ( ) { m_dpTable = ( NTable ) new NTable ( 8 , 8 ) ; m_dpTable . setCellListener ( this ) ; m_gridScrollArea . add ( m_dpTable ) ; }
tr	5	@ Override public void visit ( Comment comment ) { printIndent ( "// " + comment . comment ) ; }
tr	8	public static void main ( String [ ] args ) { Shelter sh = new Shelter ( ) ; sh . enqueue ( new Dog ( ) ) ; sh . enqueue ( new Cat ( ) ) ; }
tr	4	private static boolean isNegativeKeyword ( String str ) { return str . equals ( "\u10D0\u10E0\u10D0" ) || str . equals ( "\u10D0\u10E0" ) ; }
tr	4	public String getDescription ( Locale locale ) { return "JPEG ISO 10918-1  JFIF V1.02" ; }
tr	10	private void jEditorPane3MouseClicked ( MouseEvent evt ) { Color c = JColorChooser . showDialog ( this , "Symbolfarbe Schaltplaneditor Wirkschaltplan:" , Color . black ) ; jEditorPane3 . setBackground ( c ) ; }
tr	7	public final void Init ( ) throws IOException { Code = 0 ; Range = - 1 ; for ( int i = 0 ; i < 5 ; i ++ ) Code = ( Code << 8 | Stream . read ( ) ) ; }
tr	2	public char [ ] getPIN ( ) { return passVal ; }
tr	4	public THashMap < String , String > getSpecialEntities ( ) { return specialEntities ; }
tr	9	private void initNodes ( Object [ ] arguments ) { if ( arguments . length <= 0 || ! ( arguments [ 2 ] instanceof Map ) ) { return ; } nodeAgents = ( HashMap < AID , Coordinates > ) arguments [ 0 ] ; }
tr	5	public boolean attack ( Position target ) { return attack_native ( pointer , target ) ; }
tr	10	public void create ( ) { persist ( PersistAction . CREATE , ResourceBundle . getBundle ( "/resoruces/Bundle" ) . getString ( "HardstateCreated" ) ) ; if ( ! JsfUtil . isValidationFailed ( ) ) { items = null ; } }
tr	2	public int getSelected ( ) { return selected ; }
tr	4	protected void addReference ( AddressBook theContainer ) { containerRefAddressBook = theContainer ; }
tr	4	@ Override public void setDelta_rot ( Vector3d _delta_rot ) { this . _delta_rot = _delta_rot ; }
tr	10	public UStatus findByPrimaryKey ( String uStatus ) throws UStatusDaoException { UStatus ret [ ] = findByDynamicSelect ( SQL_SELECT + " WHERE ustatus = ?" , new Object [ ] { uStatus } ) ; return ret . length == 0 ? null : ret [ 0 ] ; }
tr	9	public LetExp ( int p , DecList d , Exp b ) { pos = p ; decs = d ; body = b ; }
tr	4	public Object getNextPanelDescriptor ( ) { return OAT_Analysis_Panel3_Descriptor . IDENTIFIER ; }
tr	7	public TestArrayWorld ( int w , int h ) { width = w ; height = h ; generation = 0 ; cells = new boolean [ height ] [ width ] ; }
tr	2	public int getNum ( ) { return num ; }
tr	6	public void tick ( ) { pollInput ( ) ; for ( int i = 0 ; i < keys . size ( ) ; i ++ ) { keys . get ( i ) . tick ( ) ; } }
tr	3	@ Override protected void finalize ( ) { close ( ) ; }
tr	6	public static boolean allPrime ( long ... nums ) { for ( long num : nums ) { if ( ! sieve . primes . contains ( num ) ) { return false ; } } return true ; }
tr	10	public JSONArray toJSONArray ( JSONArray names ) throws JSONException { if ( names == null || names . length ( ) == 0 ) { return null ; } JSONArray ja = new JSONArray ( ) ; for ( int i = 0 ; i < names . length ( ) ; i += 1 ) { ja . put ( this . opt ( names . getString ( i ) ) ) ; } return ja ; }
tr	8	@ Override public String toString ( ) { return "Background ID: " + backgroundID + "\n" + "Foreground ID: " + foregroundID + "\n" + "Background Color ID: " + backgroundColorID + "\n" + "Foreground Primary Color ID: " + foregroundPrimaryColorID + "\n" + "Foreground Secondary Color ID: " + foregroundSecondaryColorID + "\n" ; }
tr	8	public static boolean isRotatedString ( String base , String rotated ) { if ( base . length ( ) != rotated . length ( ) ) { return false ; } String concatenated = rotated . concat ( rotated ) ; return concatenated . indexOf ( base ) != - 1 ; }
tr	7	public ItemContainer ( Item item , int x , int y ) { this . item = item ; this . x = x ; this . y = y ; actionSet = new ActionSet ( ) ; }
tr	9	public NotificationThreads ( final AppleNotificationServer server , final int numberOfThreads ) { super ( "javapns notification thread pool (" + numberOfThreads + " threads)" ) ; for ( int i = 0 ; i < numberOfThreads ; i ++ ) { threads . add ( new NotificationThread ( this , new PushNotificationManager ( ) , server ) ) ; } }
tr	2	public void setEndY ( int endY ) { this . endY = endY ; }
tr	5	@ Override public String generateNewId ( ) { return "test-" + IdGenerator . createSecureId ( ) ; }
tr	8	@ Override public String repr ( int d , boolean displayPosition ) { return ( displayPosition ? "@" + cursor . getPosition ( ) + pref ( d ) : "" ) + "Array" ; }
tr	7	public static void main ( String [ ] args ) { MongodbDAO mongodbDAO = new MongodbDAO ( ) ; mongodbDAO . printData ( ) ; mongodbDAO . documentsCounter ( ) ; }
tr	10	private static String getScoreCard ( List < Team > teams ) { StringBuffer retVal = new StringBuffer ( ) ; for ( Team t : teams ) { retVal . append ( t . toString ( ) ) ; } return retVal . toString ( ) ; }
tr	8	public OfficeObject getByValue ( String selectedValue ) { for ( OfficeObject curObj : data ) { if ( curObj . getName ( ) . equals ( selectedValue ) ) { return curObj ; } } return null ; }
tr	3	public String getName ( ) { return getClass ( ) . getName ( ) ; }
tr	9	public ImageProcessingDialog ( ImageProcessingMainForm parentFrame , String [ ] selectedString ) { initComponents ( ) ; setLocationRelativeTo ( parentFrame ) ; setResizable ( false ) ; this . parentFrame = parentFrame ; this . selectedString = selectedString ; setTextFields ( ) ; }
tr	8	private String getSelectedSoundNameFromID ( int selectedSoundID ) { for ( int i = 0 ; i < soundIDs . length ; i ++ ) { int ID = soundIDs [ i ] ; if ( ID == selectedSoundID ) return soundNames [ i ] ; } return "" ; }
tr	3	public String getFirstName ( ) { return firstName ; }
tr	2	@ Override public int size ( ) { return size ; }
tr	2	public void setCD_prof ( float CD_prof ) { this . CD_prof = CD_prof ; }
tr	4	public void save ( ) { if ( this . id > 0 ) { update ( ) ; } else { insert ( ) ; } }
tr	6	public RandomDateMignightGenerator ( ReadableInstant start , final ReadablePeriod period ) { this ( constant ( start ) , period ) ; }
tr	2	public int getDelay ( ) { return delay ; }
tr	5	public char next ( char c ) throws JSONException { char n = next ( ) ; if ( n != c ) { throw syntaxError ( "Expected '" + c + "' and instead saw '" + n + "'" ) ; } return n ; }
tr	6	@ Test public void shouldCurrentPositionBe1WhenCurrentPositionIs67WithStep4 ( ) { assertThat ( PositionUpdate . getCurrentPositionWithDistance ( 67 , 4 ) , is ( 1 ) ) ; }
tr	8	@ Override public < S , T > T visit ( SMPLVisitor < S , T > visitor , S state ) { return visitor . visitVecExp ( this , state ) ; }
tr	2	public boolean isEmpty ( ) { return participants . isEmpty ( ) ; }
tr	10	@ Test public void testInsertionsortArrayStr ( ) { String [ ] arrayStr = new String [ ] { "Camila" , "Mayara" , "Julia" , "Ana" , "Talita" } ; assert . assertTrue ( 5 == arrayStr . length ) ; assert . assertEquals ( "[Camila  Mayara  Julia  Ana  Talita]" , toShow ( arrayStr ) ) ; bidirecionalBubblesortString . sort ( arrayStr ) ; assert . assertEquals ( "[Ana  Camila  Julia  Mayara  Talita]" , toShow ( arrayStr ) ) ; }
tr	5	public static int [ ] intsFromSeparatedString ( String text ) { return ArraysExt . intsFromSeparatedString ( text , 	 ) ; }
tr	10	public JFrameGUI ( ) { initComponents ( ) ; musicTime . setDisplays ( measureDisplay , beatDisplay , tempoDisplay ) ; new Timer ( ) ; new Console ( ) ; new WSSListener ( ) ; }
tr	10	public void exporterImage ( File f ) throws IOException { ImageIO . write ( pan . getImage ( ) , Outils . getExtension ( f ) , f ) ; }
tr	7	@ Override public void processGroupStart ( ) { handleEvent ( GROUP_START ) ; stack . push ( state ) ; }
tr	1	public NuevoFarmaceutico ( ) { super ( ) ; }
tr	1	public NotEnoughHolidaysException ( ) { }
tr	4	public void addPropertyChangeListener ( PropertyChangeListener pcl ) { pcs . addPropertyChangeListener ( pcl ) ; }
tr	4	@ Override public String toString ( ) { return super . toString ( ) + " pin: " + pin ; }
tr	6	@ Override public Ast [ ] getVariables ( ) { Ast [ ] list = { this . op , this . term } ; return list ; }
tr	5	public void updateUserBtnText ( ) { btnChangeUser . setText ( "Change User " + coach . getUser ( ) ) ; }
tr	2	public int getAnchor ( ) { return anchor ; }
tr	3	Point ( ) { x = 0 ; y = 0 ; }
tr	8	private void jMenuItem1ActionPerformed ( java . awt . event . ActionEvent evt ) { System . exit ( 0 ) ; }
tr	2	public String toString ( ) { return "Case coloree" ; }
tr	5	public void remove ( ) { if ( isAlive ( ) ) eng . removeObject ( this ) ; is_alive = false ; }
tr	2	public void setDoubleValue ( double doubleValue ) { this . doubleValue = doubleValue ; }
tr	5	public void setCurrency ( java . lang . String currency ) { this . currency = currency ; }
tr	2	public double [ ] getO ( ) { return o ; }
tr	8	@ XmlElementDecl ( namespace = "" , name = "terms-discount-due-days" ) public JAXBElement < String > createTermsDiscountDueDays ( String value ) { return new JAXBElement < String > ( _TermsDiscountDueDays_QNAME , String . class , null , value ) ; }
tr	2	public String toString ( ) { return "lra" ; }
tr	5	public T get ( Identifier id ) { return data . get ( id ) ; }
tr	2	public void addScore ( int score ) { this . score = this . score + score ; }
tr	3	public String getSendTime ( ) { return sendTime ; }
tr	10	public void obtainReservations ( ) { BigDecimal [ ] reservations = { BigDecimal . valueOf ( long . valueOf ( "1" ) ) , BigDecimal . valueOf ( long . valueOf ( "2" ) ) } ; System . out . println ( "Invoking Managed Tasks" ) ; ejbFacade . getReservations ( reservations ) ; setReservationListMessage ( "The reservation report has been initated" ) ; }
tr	9	private void quickSort ( int [ ] data , int low , int high , int order , Random random ) { if ( low < high ) { int sentry = partition ( data , low , high , order , random ) ; quickSort ( data , low , sentry - 1 , order , random ) ; quickSort ( data , sentry + 1 , high , order , random ) ; } }
tr	7	public Node mergeList ( Node head1 , Node head2 ) { if ( head1 == null ) { return head2 ; } else if ( head2 == null ) { return head1 ; } Node mergeHead = null ; if ( head1 . value < head2 . value ) { mergeHead = head1 ; mergeHead . pNext = mergeList ( head1 . pNext , head2 ) ; } else { mergeHead = head2 ; mergeHead . pNext = mergeList ( head1 , head2 . pNext ) ; } return mergeHead ; }
tr	2	public void showAddAnimalDialog ( ) { setup ( ) ; }
tr	10	private void log ( String message ) { if ( DEBUG ) { System . out . println ( "[" + new java . util . Date ( ) + "]" + message ) ; } }
tr	3	public AckCode getAck ( ) { return ack ; }
tr	7	public Connection getConnection ( ) { Database . start ( ) ; Database . login ( "guest" , "guest" ) ; Connection connection = Database . getConnection ( Database . SOFTWARE_FACTORY_SCHEMA_NAME ) ; return connection ; }
tr	3	public BoardInitException ( Throwable e ) { super ( e ) ; }
tr	10	public static Shell Create ( ByteList messageBytes ) throws Exception { Shell result ; if ( messageBytes == null || messageBytes . getLength ( ) < 6 ) { throw new Exception ( "Invalid message byte array" ) ; } if ( messageBytes . peekInt ( ) != Shell . getClassID ( ) ) { throw new Exception ( "Invalid message type" ) ; } else { result = new Shell ( ) ; result . decode ( messageBytes ) ; } return result ; }
tr	9	public int delMin ( ) { if ( N == 0 ) throw new RuntimeException ( "Priority queue underflow" ) ; int min = pq [ 1 ] ; exch ( 1 , N -- ) ; sink ( 1 ) ; qp [ min ] = - 1 ; keys [ pq [ N + 1 ] ] = null ; pq [ N + 1 ] = - 1 ; return min ; }
tr	10	public static boolean onOneLine ( XY xy , XY xy2 ) { if ( xy2 . getX ( ) == xy . getX ( ) ) { return true ; } if ( xy2 . getY ( ) == xy . getY ( ) ) { return true ; } int dx = Math . abs ( xy2 . getX ( ) - xy . getX ( ) ) ; int dy = Math . abs ( xy2 . getY ( ) - xy . getY ( ) ) ; if ( dx == dy ) { return true ; } return false ; }
tr	9	@ Override public void sendRawMessage ( final String message ) { IRC . sendNotice ( sender , ColorUtils . formatGametoIRC ( message ) ) ; }
tr	8	public String getString ( String key ) throws JSONException { Object object = get ( key ) ; if ( object instanceof String ) { return ( String ) object ; } throw new JSONException ( "JSONObject[" + quote ( key ) + "] not a string." ) ; }
tr	10	public static boolean hiiriPaalla ( Point p ) { return p . x >= X + REUNUS && p . x <= X + LEV - REUNUS && p . y >= Y + REUNUS && p . y <= Y + KOR - REUNUS ; }
tr	2	@ Override public void reset ( ) { }
tr	7	public void mouseReleased ( MouseEvent e ) { GameAction gameAction = getMouseButtonAction ( e ) ; if ( gameAction != null ) { gameAction . release ( ) ; } }
tr	8	int BitTreeDecode ( int [ ] paramArrayOfInt , int paramInt1 , int paramInt2 ) throws IOException { int i = 1 ; for ( int j = paramInt2 ; j > 0 ; j -- ) { i = i + i + BitDecode ( paramArrayOfInt , paramInt1 + i ) ; } return i - ( 1 << paramInt2 ) ; }
tr	2	public byte [ ] get_Body ( ) { return _body ; }
tr	2	public int getCol ( ) { return col ; }
tr	3	public LayoutParameters ( int width , int height ) { this ( width , height , 0 ) ; }
tr	10	public static Node createBST ( int [ ] arr , int start , int end ) { if ( start > end ) { return null ; } int rootIndex = ( end + start ) / 2 ; int rootValue = arr [ rootIndex ] ; Node node = new Node ( rootValue ) ; node . left = createBST ( arr , start , rootIndex - 1 ) ; node . right = createBST ( arr , rootIndex + 1 , end ) ; return node ; }
tr	4	public JSONWriter value ( double d ) throws JSONException { return this . value ( new double ( d ) ) ; }
tr	10	private static void createPanel ( ) { schedulePanel = new JPanel ( ) ; schedulePanel . setLayout ( new BorderLayout ( ) ) ; JScrollPane scheduleScrollPane = new JScrollPane ( scheduleTable ) ; schedulePanel . add ( scheduleScrollPane , BorderLayout . CENTER ) ; }
tr	7	protected void setRedoText ( String arg ) { if ( ! cmdRedo . getToolTipText ( ) . equals ( arg ) ) { cmdRedo . setToolTipText ( arg ) ; } }
tr	6	public TicketSummary ( Ticket ticket , int avalible , int paid , int ordered ) { this ( ) ; this . ticket = ticket ; this . avalible = avalible ; this . paid = paid ; this . ordered = ordered ; }
tr	4	public void setAvailable ( ) { state = FuState . AVAILABLE ; }
tr	2	public boolean isfCommunity ( ) { return fCommunity ; }
tr	5	public void setCategory ( String category ) { Dispatch . put ( this , "Category" , category ) ; }
tr	7	@ Override public void windowDeactivated ( WindowEvent e ) { smile = false ; face . repaint ( ) ; }
tr	3	protected BooleanBean create ( boolean value ) { return new BooleanBean ( value ) ; }
tr	2	public double getYCoord ( ) { return this . y ; }
tr	1	public Port ( ) { }
tr	7	public DefaultComboBoxModel getCbmodel ( NombreTablas tabla ) throws SQLException { setDataComboBoxModel ( tabla ) ; return cbmodel ; }
tr	6	public double mutate ( double val , double div ) { double r = ( rand . nextDouble ( ) - .5 ) * div ; return val + r ; }
tr	2	public void agregarNavesRandom ( ) { this . juego . agregarNavesRandom ( ) ; }
tr	1	public AlphebeticFilter ( ) { this ( false ) ; }
tr	1	private ComplexRationalNumberBuilder ( ) { }
tr	4	public List < Word > getWords ( ) { return this . words ; }
tr	10	public String hurt ( int value ) { String s ; int damage ; if ( armor != null ) { damage = value - ( armor . getValue ( ) * defence ) ; } else { damage = value ; } if ( damage <= 0 ) { damage = 0 ; s = "nothing happend" ; } else { s = damage + " damage taken by " + name ; } health = health - damage ; if ( health <= 0 ) { health = 0 ; s = s + "\n" + name + " has died" ; } return s ; }
tr	4	public String toString ( ) { return this . identificador + ": " + this . nombre ; }
tr	5	public void shuffle ( ) { Collections . shuffle ( sample , Globals . rng ) ; }
tr	6	private void txtRutActionPerformed ( java . awt . event . ActionEvent evt ) { }
tr	6	public static void test2 ( ) { { byte [ ] b = new byte [ 6 * 1024 * 1024 ] ; b = null ; } System . gc ( ) ; System . out . println ( "test2 fist explict gc over" ) ; }
tr	1	private ExceptionUtils ( ) { }
tr	1	public ContactUpdateFailed ( ) { super ( ) ; }
tr	1	public int bonusUniteAttaque ( ) { return 0 ; }
tr	2	@ Override public int getUniqueSerializerId ( ) { return 123499 ; }
tr	4	public static void notGreaterThanCheck ( final int a , final int upperBound ) { if ( a > upperBound ) throw new IllegalArgumentException ( "Input argument " + a + " should not be greater than " + upperBound ) ; }
tr	9	public BigInteger Calculate_Big_nCr ( int n , int r ) { Factorializer factorializer = new Factorializer ( ) ; return factorializer . Factorialize ( n ) . divide ( factorializer . Factorialize ( r ) . multiply ( factorializer . Factorialize ( n - r ) ) ) ; }
tr	10	public double getDouble ( int index ) throws JSONException { Object object = get ( index ) ; double result = JSON . toDouble ( object ) ; if ( result == null ) { throw JSON . typeMismatch ( index , object , "double" ) ; } return result ; }
tr	8	public String readString ( ) throws IOException { int length = readInt ( ) ; in . read ( strBuffer , 0 , length ) ; return new String ( strBuffer , 0 , length ) ; }
tr	3	public String getPassword ( ) { return password ; }
tr	4	public static void setPassword ( String pass ) { password = pass ; }
tr	5	String stringifyRoads ( ) { return BitSetPorter . bitsToString ( roads ) ; }
tr	10	private void busy ( boolean bool ) { jTextFieldNomorTujuan . setEnabled ( ! bool ) ; jTextAreaPesan . setEnabled ( ! bool ) ; jProgressBarKirim . setVisible ( bool ) ; jButtonKirim . setEnabled ( ! bool ) ; jButtonKirimKe . setEnabled ( ! bool ) ; jButtonTutup . setEnabled ( ! bool ) ; }
tr	7	public void setExercicio ( String exercicio ) { String oldExercicio = this . exercicio ; this . exercicio = exercicio ; propertyChangeSupport . firePropertyChange ( PROP_EXERCICIO , oldExercicio , exercicio ) ; }
tr	7	public String toJSONString ( ) { return "{" + JSONObject . quote ( this . aString ) + ":" + JSONObject . doubleToString ( this . aNumber ) + "}" ; }
tr	5	public int length ( ) { LinkedListNode iter = this ; int acc = 0 ; while ( iter != null ) { acc ++ ; iter = iter . next ; } return acc ; }
tr	2	public int getCurrentDefence ( ) { return this . currentDefence ; }
tr	1	public ClientImp ( ) { }
tr	6	@ Override public boolean setPacketFields ( Map < String , Object > in ) { return true ; }
tr	4	public synchronized List getList ( ) { return ( List ) completedThreads . clone ( ) ; }
tr	5	private int getNextIndicator ( ) throws IOException { if ( this . indicator == 0 ) { this . indicator = in . read ( ) ; } return this . indicator ; }
tr	5	public void removeDayOfMonthException ( String exceptionName ) { this . workingDayMonthExceptions . removeException ( exceptionName ) ; }
tr	3	public Type getType ( ) { return type ; }
tr	5	public Image createImage ( ImageProducer arg0 ) { return render . createImage ( arg0 ) ; }
tr	7	protected boolean isSameDouble ( double d1 , double d2 ) { if ( d1 - d2 == 0.0 ) return true ; else { INEXACT_COMPARED = true ; if ( d1 == 0.0 ) return Math . abs ( d2 ) < TOLERANCE ; if ( d2 == 0.0 ) return Math . abs ( d1 ) < TOLERANCE ; else return Math . abs ( d1 - d2 ) / ( Math . abs ( ( d1 + d2 ) / 2 ) ) < TOLERANCE ; } }
tr	8	public void Register ( int x , int y ) { loc [ x ] [ y ] = IndoorTiles . ChairWest ; world [ x ] [ y ] = loc [ x ] [ y ] ; OverTiles [ x ] [ y ] = true ; }
tr	1	public Mouse ( ) { }
tr	2	public int getRadius ( ) { return radius ; }
tr	3	public int getCompletionTime ( ) { return convertTime ( completionTime ) ; }
tr	4	@ JsonProperty ( "label" ) public void setLabel ( String label ) { this . label = label ; }
tr	7	public void setTextSize ( bwapi . Text . Size . enum size ) { setTextSize_native ( pointer , size ) ; }
tr	3	public void setSocket ( CPUSocket socket ) { this . socket = socket ; }
tr	9	public void method382 ( int i , int j , String s , int l , boolean flag ) { method389 ( flag , j - getTextWidth ( s ) / 2 , i , s , l ) ; }
tr	3	public void setUserPassword ( String userPassword ) { this . userPassword = userPassword ; }
tr	1	public Feature ( ) { super ( ) ; }
tr	1	public Board ( ) { }
tr	4	public static List < String > RedirectList ( ) { return redirectList ; }
tr	1	public void lukitse ( ) { this . lukitse = true ; }
tr	6	@ Override public String toString ( ) { return String . format ( "{%s = %s}" , this . name , this . value ) ; }
tr	8	public void queuePlayerJoinedForSend ( Player p ) { queueForSend ( new PlayerJoinedCmd ( p , p . getName ( ) . compareTo ( player . getName ( ) ) == 0 ) ) ; }
tr	7	public static void pairwiseMultiply ( float [ ] a , float [ ] b , float [ ] result ) { if ( a . length != b . length ) { throw new RuntimeException ( ) ; } for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = a [ i ] * b [ i ] ; } }
tr	3	public void setDate_registration ( Date date_registration ) { this . date_registration = date_registration ; }
tr	8	public synchronized void paint ( Graphics g ) { g . drawLine ( xstartpos , ystartpos , xendpos , yendpos ) ; }
tr	3	public String getTitle ( ) { return _title ; }
tr	10	public void Pause ( ) { if ( player != null ) { try { pauseLocation = archivo . available ( ) ; player . close ( ) ; } catch ( IOException ex ) { JOptionPane . showMessageDialog ( null , "Error" ) ; } } }
tr	7	public int hyppaaTulevaSana ( String syote ) { int matka = 0 ; while ( matka < syote . length ( ) && ( ! syote . substring ( matka , matka + 1 ) . contentEquals ( " " ) ) && ( ! syote . substring ( matka , matka + 1 ) . contentEquals ( ")" ) ) ) { matka ++ ; } return matka ; }
tr	5	@ Override public boolean isFull ( ) { return ( elements == table . length ) ; }
tr	1	public GenericException ( ) { }
tr	8	public NovoArquivo ( java . awt . Frame parent , boolean modal ) { super ( parent , modal ) ; initComponents ( ) ; setVisible ( true ) ; }
tr	10	private static List < Expression > trad59 ( TreeNode tree ) { int r = tree . getRule ( ) ; switch ( r ) { case 0 : { return null ; } case 1 : { List < Expression > x1 = trad58 ( tree . getChild ( 1 ) ) ; return x1 ; } default : return null ; } }
tr	7	@ Override public final List < ChessMovement > getMovements ( ) { return Collections . unmodifiableList ( movements ) ; }
tr	5	public void requestShiftRight ( ) { boolean continueToMakeNew = true ; if ( ! saved ) { continueToMakeNew = promptToSaveState ( ) ; } if ( continueToMakeNew ) { continueToMakeNew = promptShiftRight ( ) ; if ( continueToMakeNew ) { } } }
tr	3	public String getName ( ) { return name ; }
tr	8	public static List < QuizResult > getTopPerformances ( int quizID , int numResults ) { String query = "SELECT * FROM history WHERE quizID=" + quizID + " ORDER BY score DESC  timeUsed ASC;" ; return getNumberOfQuizzes ( quizID , numResults , query ) ; }
tr	1	public ObjectFactory ( ) { }
tr	7	public String toString ( ) { return this . getString ( ) + " " + this . getNumber ( ) + " " + this . isBoolean ( ) + "." + this . getBENT ( ) + " " + this . getX ( ) ; }
tr	7	@ Override public void process ( Turtle turtle , double [ ] values ) { returnValue = turtle . setTowards ( values [ 0 ] , values [ 1 ] ) ; }
tr	10	public JSONObject getJSONObject ( String name ) throws JSONException { Object object = get ( name ) ; if ( object instanceof JSONObject ) { return ( JSONObject ) object ; } else { throw JSON . typeMismatch ( name , object , "JSONObject" ) ; } }
tr	1	public Player ( ) { }
tr	4	public JSONArray put ( int value ) { put ( new Integer ( value ) ) ; return this ; }
tr	10	@ Override public int getInt ( long i ) { if ( ptr != 0 ) { return ( int ) ( Utilities . UNSAFE . getShort ( ptr + sizeof * i ) ) ; } else { if ( isConstant ( ) ) { return ( int ) data [ 0 ] ; } else { return ( int ) data [ ( int ) i ] ; } } }
tr	3	public Builder age ( int value ) { age = value ; return this ; }
tr	3	public Parler ( String message ) { this ( 0 , message ) ; }
tr	9	public boolean getBoolean ( int index ) throws JSONException { Object object = this . get ( index ) ; if ( object . equals ( boolean . false ) || ( object instanceof String && ( ( String ) object ) . equalsIgnoreCase ( "false" ) ) ) { return false ; } else if ( object . equals ( boolean . true ) || ( object instanceof String && ( ( String ) object ) . equalsIgnoreCase ( "true" ) ) ) { return true ; } throw new JSONException ( "JSONArray[" + index + "] is not a boolean." ) ; }
tr	8	public RobotUpdateEventImpl ( long time , final String name , final Vector velocity , final Vector position , final double energy ) { super ( time ) ; this . name = name ; this . velocity = velocity ; this . position = position ; this . energy = energy ; }
tr	6	protected Entity ( HttpStatus statusCode , ModelMap body ) { super ( body , statusCode ) ; this . model = body ; }
tr	9	@ Override public void onBulletHit ( BulletHitEvent e ) { out . printf ( "Debug: Fired bullet hit %s at %s.\n" , e . getName ( ) , e . getBullet ( ) . getPosition ( ) ) ; }
tr	9	public ArrayPriorityQueueItem < T > insert ( T item , double key ) { ArrayPriorityQueueItem < T > newItem = new ArrayPriorityQueueItem < T > ( item , key , numberOfElements ) ; if ( minItem == null || key < minItem . key ) { minItem = newItem ; } a [ numberOfElements ++ ] = newItem ; return newItem ; }
tr	9	protected boolean areNonBLOBsAccepted ( String deviceName ) { DevicePropertyBLOBEnableTuple aux = getBLOBEnableRule ( deviceName ) ; if ( aux == null ) { return true ; } if ( aux . getBLOBEnable ( ) == BLOBEnables . ONLY ) { return false ; } return true ; }
tr	10	@ Override public List < IProducto > filtrarProductos ( List < IProducto > productos ) { List < IProducto > prodsAplican = new ArrayList < IProducto > ( productos ) ; for ( IProducto producto : productos ) { if ( esProductoEnOferta ( producto ) ) { prodsAplican . add ( producto ) ; } } return prodsAplican ; }
tr	8	public void addScrollBar ( int x , int y , int width , int height ) { _graphics . drawRect ( x , y , width , height ) ; _graphics . fillRect ( x + 2 , y + 2 , width - 3 , width - 3 ) ; }
tr	9	@ Override public boolean equals ( Object o ) { if ( this == o ) return true ; if ( o == null || getClass ( ) != o . getClass ( ) ) return false ; PhpposSuppliersEntity that = ( PhpposSuppliersEntity ) o ; if ( personId != that . personId ) return false ; if ( accountNumber != null ? ! accountNumber . equals ( that . accountNumber ) : that . accountNumber != null ) return false ; return true ; }
tr	9	private static String decimalToBinary ( double d ) { if ( d >= 1 || d <= 0 ) { return "ERROR" ; } StringBuilder result = new StringBuilder ( "0." ) ; while ( d > 0 ) { if ( result . length ( ) > 32 ) { return "ERROR" ; } double multiplied = d * 2 ; if ( multiplied >= 1 ) { result . append ( "1" ) ; d = multiplied - 1 ; } else { result . append ( "0" ) ; d = multiplied ; } } return result . toString ( ) ; }
tr	6	public void setRunMenuItemsEnabled ( boolean enable ) { for ( JMenuItem item : menuItemsDisabledDuringRun ) item . setEnabled ( enable ) ; }
tr	4	public Email ( int id , String endereco ) { this . id = id ; this . endereco = endereco ; }
tr	1	public ColorDisplay ( ) { }
tr	8	public boolean cast ( Sorcerer sorcerer , Trigger trigger , Event event ) { return magicSpell . cast ( sorcerer , trigger , event ) ; }
tr	6	@ Override public LogicalArea getChildArea ( int index ) throws ArrayIndexOutOfBoundsException { return ( LogicalArea ) getChildAt ( index ) ; }
tr	6	public void println ( ) throws IOException { outputStream . write (  ) ; outputStream . write (  ) ; outputStream . flush ( ) ; }
tr	1	public UMBELWebServiceURLS ( ) { }
tr	8	public String getKeterangan ( ) { char idx = getIndex ( ) ; switch ( idx ) { case A : return "Sangat Baik" ; case B : return "Baik" ; case C : return "Cukup" ; case D : return "Kurang" ; default : return "Sangat Kurang" ; } }
tr	2	public void setMinRefreshPeriod ( double minRefreshPeriod ) { this . minRefreshPeriod = minRefreshPeriod ; }
tr	4	public Set < String > getOccupantClasses ( ) { return occupantClassNames ; }
tr	10	private static < E > void mergeSort ( E [ ] array , E [ ] temp , int begin , int end , Comparator < E > comparator ) { if ( begin - end < 0 ) { int middle = ( begin + end ) / 2 ; mergeSort ( array , temp , begin , middle , comparator ) ; mergeSort ( array , temp , middle + 1 , end , comparator ) ; merge ( array , temp , begin , end , comparator ) ; } }
tr	1	public boolean isFaulty ( ) { return isFaulty ; }
tr	9	private void init ( ) { int n = mapInfo . getMapSize ( ) ; visited = new boolean [ n ] [ n ] ; for ( int column = 0 ; column < n ; column ++ ) visited [ 0 ] [ column ] = visited [ n - 1 ] [ column ] = true ; for ( int row = 0 ; row < n ; row ++ ) visited [ row ] [ 0 ] = visited [ row ] [ n - 1 ] = true ; for ( int column = 0 ; column < n ; column ++ ) for ( int row = 0 ; row < n ; row ++ ) mapInfo . setCell ( row , column , new Cell ( true , true , true , true ) ) ; }
tr	8	@ Override protected Object clone ( ) throws CloneNotSupportedException { PowerMeter ret = new PowerMeter ( ) ; ret . setMeter ( getMeter ( ) ) ; return ret ; }
tr	1	public GetUserSettingsRequest ( ) { }
tr	8	private String getRemoteAddress ( Socket socket ) { return ( ( InetSocketAddress ) socket . getRemoteSocketAddress ( ) ) . getAddress ( ) . getHostAddress ( ) ; }
tr	1	public void setPlayerName ( ) { }
tr	6	@ Override public ArrayList obtenerTodos ( Object aux ) { return this . objB . obtenerTodos ( aux ) ; }
tr	2	public Connection getConnection ( ) { return this ; }
tr	3	public TableRowTransferHandler ( JTable table ) { this . table = table ; }
tr	9	private void auditarMovieEstado ( int pos ) { if ( pos < items . size ( ) ) { BlockBusterItem bi = items . get ( pos ) ; if ( bi instanceof MovieItem ) ( ( MovieItem ) bi ) . evaluarEstado ( ) ; auditarMovieEstado ( pos + 1 ) ; } }
tr	1	public boolean isTaunting ( ) { return false ; }
tr	5	public void addValue ( String value ) { if ( value == null ) { throw new NullPointerException ( "value" ) ; } this . value . add ( value ) ; }
tr	9	private static int productOfDigits ( String digits ) { int product = 1 ; for ( int position = 0 ; position < digits . length ( ) ; position ++ ) { product *= Integer . parseInt ( "" + digits . charAt ( position ) ) ; } return product ; }
tr	10	public static void main ( String [ ] args ) { StreamSortCC s = new StreamSortCC ( ) ; s . track ( 5 ) ; s . track ( 1 ) ; s . track ( 4 ) ; s . track ( 5 ) ; s . track ( 9 ) ; s . track ( 7 ) ; s . track ( 13 ) ; s . track ( 3 ) ; s . track ( 4 ) ; System . out . println ( s . getRankOfNumber ( 1 ) ) ; System . out . println ( s . getRankOfNumber ( 3 ) ) ; System . out . println ( s . getRankOfNumber ( 4 ) ) ; System . out . println ( s . getRankOfNumber ( 5 ) ) ; System . out . println ( s . getRankOfNumber ( 9 ) ) ; System . out . println ( s . getRankOfNumber ( 7 ) ) ; System . out . println ( s . getRankOfNumber ( 13 ) ) ; System . out . println ( s . getRankOfNumber ( 10 ) ) ; System . out . println ( s . getRankOfNumber ( 15 ) ) ; }
tr	4	public Command clone ( ) { return new DecrementFontSizeCommand ( receiver ) ; }
tr	5	private static void log ( String message ) { if ( DEBUG ) { log . debug ( message ) ; } }
tr	8	protected URL resolveURL ( ) { if ( this . clazz != null ) { return this . clazz . getResource ( this . path ) ; } else if ( this . classLoader != null ) { return this . classLoader . getResource ( this . path ) ; } else { return ClassLoader . getSystemResource ( this . path ) ; } }
tr	3	public ResourceBundle getResources ( ) { return myResources ; }
tr	1	public StringObject ( ) { this ( "" ) ; }
tr	8	public JSONObject putOpt ( String key , Object value ) throws JSONException { if ( key != null && value != null ) { put ( key , value ) ; } return this ; }
tr	5	private void jjCheckNAddStates ( int start , int end ) { do { jjCheckNAdd ( jjnextStates [ start ] ) ; } while ( start ++ != end ) ; }
tr	5	public String getTitle ( ) { return ( ( TitledBorder ) scrollPane . getBorder ( ) ) . getTitle ( ) ; }
tr	1	public double s ( ) { return s ; }
tr	5	public HashMap < String , Avion > getAvions ( ) { return this . avions ; }
tr	5	public String getGui_label ( ) { return otapiJNI . Acct_gui_label_get ( swigCPtr , this ) ; }
tr	3	public String format ( int season ) { return String . format ( format , season ) ; }
tr	5	@ Override public void gobble ( ) { System . out . println ( "gobble" ) ; }
tr	6	public Passenger ( String name , float speed , Station dest ) { this . name = name ; this . dest = dest ; this . speed = speed ; }
tr	1	public final boolean readBoolean ( ) { return readBoolean ( null ) ; }
tr	8	@ Test public void shouldProvidePlayersScore ( ) { int score = gameScore . of ( ANY_PLAYER_ID ) ; assertThat ( score ) . isEqualTo ( 0 ) ; }
tr	9	public WasEndedBy ( Object identifier , Activity ended , Entity trigger , Date time ) { this ( identifier , ended , trigger , null , time ) ; }
tr	6	public boolean checkForFever ( final Person p , final Megameter m ) { return m . isBreathing ( p ) ; }
tr	4	protected PropertyAdaptorImpl ( FODriverImpl driver ) { super ( driver , TYPE ) ; }
tr	4	@ Override public void windowDeactivated ( WindowEvent e ) { }
tr	10	@ Override public int hashCode ( ) { return new HashCodeBuilder ( ) . append ( Associations ) . append ( MaxStreams ) . append ( Type ) . append ( Version ) . append ( additionalProperties ) . toHashCode ( ) ; }
tr	6	public void setAltitudeMode ( String value ) { this . altitudeMode = value ; this . isAltitudeModeDirty = true ; setDirty ( ) ; }
tr	9	Basket ( int id , String name , String shortName , String tinyName , Fundamental ... stats ) { super ( id , name , shortName , tinyName ) ; this . components = stats ; }
tr	8	private static CC getCC ( ComponentWrapper comp , Map < ComponentWrapper , CC > ccMap ) { CC cc = ccMap . get ( comp ) ; return cc != null ? cc : new CC ( ) ; }
tr	7	private void activarActionPerformed ( java . awt . event . ActionEvent evt ) { activar_desactivarEstudiante ( 0 ) ; }
tr	6	public String getFormattedTiePercentage ( int player ) { return formatter . format ( ties [ player ] ) ; }
tr	3	public void setVariacao51 ( Integer variacao51 ) { this . variacao51 = variacao51 ; }
tr	10	private void travelTree ( TreeNode node , List < Integer > result ) { TreeNode left = node . left ; TreeNode right = node . right ; if ( null != left ) travelTree ( left , result ) ; result . add ( node . val ) ; if ( null != right ) travelTree ( right , result ) ; }
tr	8	@ XmlElementDecl ( namespace = "com/firstdata/Merchant/gmfV3.10" , name = "OfferPubID" ) public JAXBElement < String > createOfferPubID ( String value ) { return new JAXBElement < String > ( _OfferPubID_QNAME , String . class , null , value ) ; }
tr	8	public void setClientId ( String clientId ) { String oldValue = this . clientId ; this . clientId = clientId ; buildGrantUrl ( ) ; fireListenerEvent ( new PropertyChangeEvent ( this , CLIENT_ID , oldValue , this . clientId ) ) ; }
tr	9	public boolean fireballCollideCheck ( Fireball fireball ) { if ( deadTime != 0 ) return false ; float xD = fireball . x - x ; float yD = fireball . y - y ; if ( xD > - 16 && xD < 16 ) { if ( yD > - height && yD < fireball . height ) { return true ; } } return false ; }
tr	1	public User ( ) { }
tr	6	public K getKey ( V value ) { return valueToKey . get ( value ) ; }
tr	7	public String getColumnName ( int c ) { switch ( c ) { case COL_RANK : return "#" ; case COL_NAME : return "Name" ; case COL_PRESENT : return "Present" ; case COL_BIDS : return "Bids" ; default : return "" ; } }
tr	8	public GuardedSingleton ( ) { super ( ) ; synchronized ( INSTANCE_COUNTS ) { Integer count = INSTANCE_COUNTS . get ( getClass ( ) ) ; if ( count == null ) { INSTANCE_COUNTS . put ( getClass ( ) , 1 ) ; } else if ( count >= 1 ) { count += 1 ; INSTANCE_COUNTS . put ( getClass ( ) , count ) ; throw new IllegalStateException ( "Singleton was instantiated more than once. " + "Instance count: " + count ) ; } } }
tr	6	@ Override public void write ( String message ) { write ( message , false , OutputType . NORMAL ) ; }
tr	2	public boolean isIsconnectvalidatereq ( ) { return isconnectvalidatereq ; }
tr	5	public MessageThread ( Message message , IMessageObserver observer ) { this . message = message ; this . observer = observer ; }
tr	1	public ApiMacroTransformation ( ) { super ( "api" ) ; }
tr	3	public Paivitettava getPaivitettava ( ) { return this . piirto ; }
tr	9	public synchronized void writeWithException ( final String text ) throws Exception { bufferLines = bufferLines . concat ( text ) ; if ( bufferLines . length ( ) > bufferLimit ) { saveToDiskWithException ( bufferLines ) ; bufferLines = "" ; } }
tr	10	@ XmlElementDecl ( namespace = "" , name = "age" ) @ XmlJavaTypeAdapter ( CollapsedStringAdapter . class ) public JAXBElement < String > createAge ( String value ) { return new JAXBElement < String > ( _Age_QNAME , String . class , null , value ) ; }
tr	10	public void actionPerformed ( ActionEvent evt ) { AutomatonComponent . this . expose ( automaton . getCanvas ( ) . getGraphics ( ) ) ; AutomatonComponent . this . remove ( ) ; automaton . getCanvas ( ) . commitTransaction ( true ) ; }
tr	9	public byte [ ] readBytes ( int amount ) { if ( this . bytes . length - this . position < amount ) { throw new IllegalStateException ( "Not enough bytes left." ) ; } byte [ ] r = new byte [ amount ] ; System . arraycopy ( this . bytes , this . position , r , 0 , amount ) ; this . position += amount ; return r ; }
tr	7	public void putSymbol ( String string , Symbol symbol ) { symbols . put ( string , symbol ) ; }
tr	6	public void update ( double ad [ ] , double d ) { for ( int i = 0 ; i < mFilters . length ; i ++ ) { mFilters [ i ] . update ( ad [ i ] , d ) ; } }
tr	7	public < A , R > R visit ( Visitor < A , R > v , A o ) { return v . visitIdentifier ( this , o ) ; }
tr	6	@ BeforeClass public static void setUp ( ) throws Exception { client = ConnectionHelper . create ( ) ; }
tr	4	public static void main ( String args [ ] ) { new ProjectileGui ( ) ; }
tr	7	@ Override protected InventorySlot getSlot ( Game game , int i ) { return game . getCrafting ( ) [ i ] ; }
tr	2	public long getClimateBonus ( ) { return climateBonus ; }
tr	3	public String getXms ( ) { return xms ; }
tr	2	public String getQuestionTypeString ( ) { return "Fill-in-the-Blank" ; }
tr	3	public void setMainWindow ( MainWindow mainWindow ) { this . mainWindow = mainWindow ; }
tr	7	public ScAxis ( double min , double max ) { axisScale . setMinMaxPoints ( min , max ) ; axisScale . setMaxTicks ( 10 ) ; this . setMinMax ( min , max ) ; }
tr	9	public static void main ( String [ ] args ) { int x , y , z ; x = y = z = 1 ; System . out . println ( "x = " + x + "  y = " + y + "  z = " + z ) ; System . out . println ( 32 % 7 % 3 ) ; System . out . println ( ( 32 % 7 ) % 3 ) ; System . out . println ( 32 % ( 7 % 3 ) ) ; }
tr	1	public DummyClass ( ) { }
tr	5	public void setCall ( String call ) { firePropertyChange ( MODEL_CALL , call , this . call = call ) ; }
tr	4	@ Override public Type type ( ) { return symbol . type ( ) ; }
tr	10	@ XmlElementDecl ( namespace = "" , name = "fOpen" ) @ XmlJavaTypeAdapter ( CollapsedStringAdapter . class ) public JAXBElement < String > createFOpen ( String value ) { return new JAXBElement < String > ( _FOpen_QNAME , String . class , null , value ) ; }
tr	3	public void incrementNodeQuantity ( int increment ) { nodeQuantity += increment ; }
tr	4	public Iterator < ? > iterator ( ) { outprint += "iterator()\n" ; return new HashSetIterator ( ) ; }
tr	2	public int getMaxXCoordinate ( ) { return maxXCoordinate ; }
tr	7	private static List < ModuleInfoBean > readModuleInfo ( ) { int size = mMdoduleList . size ( ) ; print ( ">>>>mMdoduleList.size:" + size + " list content:" + mMdoduleList . toString ( ) ) ; return mMdoduleList ; }
tr	4	public void setArg2 ( String value ) { this . arg2 = value ; }
tr	4	public void setFavouriteSince ( XMLGregorianCalendar value ) { this . favouriteSince = value ; }
tr	3	public NotFoundException ( String s ) { super ( s ) ; }
tr	7	public MessageView ( String message , AbstractView vueSuivante , boolean isPopup ) { this ( message ) ; this . isGo = true ; this . isPopup = isPopup ; this . vueSuivante = vueSuivante ; }
tr	2	public boolean isInterested ( ) { return this . interested ; }
tr	3	public void setFilename ( String filename ) { this . filename = filename ; }
tr	8	private void selectElement ( MouseEvent e ) { if ( e . getButton ( ) == MouseEvent . BUTTON1 && e . getSource ( ) != table ) table . clearSelection ( ) ; }
tr	3	@ Override public int size ( ) { return pixels ; }
tr	9	private void bankItems ( ) { if ( Bank . isOpen ( ) ) { while ( Inventory . isFull ( ) ) { Bank . depositInventory ( ) ; Time . sleep ( 3000 ) ; } } else { Bank . open ( ) ; } }
tr	2	protected static Container getPanel_1 ( ) { return null ; }
tr	2	public boolean hasRootElement ( ) { return rootElement != null ; }
tr	1	public Person ( ) { }
tr	4	@ Override public String watIsHet ( ) { return ITEM ; }
tr	8	protected void updateInitCells ( ) { int i ; CellElement tmpCell ; for ( i = 1 ; i < m_s1_size ; ++ i ) { tmpCell = m_dpTable . getCell ( i , i + 1 ) ; tmpCell . setIntVal ( 0 ) ; } for ( i = 0 ; i < m_s1_size ; ++ i ) { tmpCell = m_dpTable . getCell ( i + 1 , i + 1 ) ; tmpCell . setIntVal ( 0 ) ; } }
tr	5	public Message ( String body , InetSocketAddress dest ) { this . body = body ; this . dest = dest ; }
tr	6	public void back ( ) throws JSONException { if ( this . usePrevious || this . index <= 0 ) { throw new JSONException ( "Stepping back two steps is not supported" ) ; } this . index -= 1 ; this . character -= 1 ; this . usePrevious = true ; this . eof = false ; }
tr	9	public void print ( boolean showPrintDialog , ITPlaylistPrintKind printKind , String theme ) { Dispatch . call ( this , "Print" , new Variant ( showPrintDialog ) , printKind , theme ) ; }
tr	6	private final void processItems ( final List < Step > items ) { for ( final Step item : items ) { item . process ( ) ; } }
tr	10	public void renderUnit ( VGame vg , VObject vo , VPoint cam , VGraphics g ) { i . renderUnit ( vg , vo , cam , g ) ; }
tr	9	public WallObject getWallObject ( int x , int y , int z ) { Ground tile = groundArray [ z ] [ x ] [ y ] ; if ( tile == null ) return null ; else return tile . wallObject ; }
tr	2	@ Override public int size ( ) { return size ; }
tr	3	public void isiOperan2 ( double x ) { op2 = x ; }
tr	7	public void serverCutText ( String str ) { if ( viewer . acceptClipboard . getValue ( ) ) clipboardDialog . serverCutText ( str ) ; }
tr	6	public boolean isBuildable ( TilePosition position , boolean includeBuildings ) { return isBuildable_native ( pointer , position , includeBuildings ) ; }
tr	2	public int getWaitTime ( ) { return waitTime ; }
tr	4	public List < Campaign > getCamlist ( ) { return camlist ; }
tr	9	public String peek ( int count ) { return str . substring ( cursor , cursor + Math . min ( count , str . length ( ) - cursor ) ) ; }
tr	8	public V get ( K key , V def ) { return data [ hash ( key ) ] . getValue ( key , def ) ; }
tr	6	public static int safeLongToInt ( long l ) { if ( l < Integer . MIN_VALUE || l > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( l + " cannot be cast to int without changing its value." ) ; } return ( int ) l ; }
tr	8	public void add ( Location loc , T occupant ) { getGrid ( ) . put ( loc , occupant ) ; repaint ( ) ; }
tr	1	public AST ( ) { }
tr	6	public void setPFWrap ( boolean wrapx , boolean wrapy , int shiftx , int shifty ) { el . setPFWrap ( wrapx , wrapy , shiftx , shifty ) ; }
tr	1	public void showRallyDetails ( ) { }
tr	5	public static boolean isText ( int c ) { if ( isEnd ( c ) || isBreak ( c ) || isSpecial ( c ) ) return false ; return true ; }
tr	2	public ItemModel ( int id ) { this ( "" , id , "" , 0 , 0 , 0 , 0 , 0 ) ; }
tr	4	int step5Status ( ) { if ( event . getSeatsPerTable ( ) . isEmpty ( ) ) return 0 ; else return 1 ; }
tr	6	public ContextManager ( ) { this . contextGroup = new HashMap < String , Stack < ChatContext >> ( ) ; }
tr	2	public int getCost ( ) { return cost ; }
tr	2	@ Override public void capturePhotos ( ) { }
tr	5	void sendMessage ( String msg ) { sendQueue . add ( msg ) ; }
tr	10	public Bouton ( Image imageUp , Image imageDown , Tuple coord ) { this . coord = coord ; this . imageDown = imageDown ; this . imageUp = imageUp ; hauteur = imageUp . getHeight ( ) ; largeur = imageUp . getWidth ( ) ; }
tr	9	@ Override Tuple2 < E , AbsNode < E >> popLeft ( ) { E key = keys . get ( 0 ) ; keys . remove ( 0 ) ; return new Tuple2 < E , AbsNode < E >> ( key , null ) ; }
tr	5	@ Override public ResponseTIPPBuilder setCreator ( TIPPCreator creator ) { return ( ResponseTIPPBuilder ) super . setCreator ( creator ) ; }
tr	1	public Style ( ) { this ( null , null , null , null ) ; }
tr	2	public int getEmbargoCount ( ) { return embargoCount ; }
tr	7	public void initFrame ( ) { super . initFrame ( ) ; setTitle ( "Show Class Attendance Report" ) ; mainPanel . setLayout ( ( LayoutManager ) new BoxLayout ( mainPanel , BoxLayout . PAGE_AXIS ) ) ; }
tr	3	public String getRowId ( ) { return rowId ; }
tr	3	public User getUser ( ) { return user ; }
tr	8	public void addAndSerialize ( Result r ) { this . load ( ) ; this . getTopResults ( ) . add ( r ) ; this . trim ( ) ; this . save ( ) ; }
tr	8	public String toString ( ) { String ret = "" ; String predString = "" ; predString = high + "; " + precip + "; " ; ret = "dailyPred; " + todayDate + "; " + predictionDate + "; " + predString ; return ret ; }
tr	7	protected ApnsConnection initialValue ( ) { ApnsConnection newCopy = prototype . copy ( ) ; prototypes . add ( newCopy ) ; return newCopy ; }
tr	8	public Task getTask ( String name ) { for ( int i = 0 ; i < taskCount ; i ++ ) { if ( tasks [ i ] . getName ( ) == name ) { return tasks [ i ] ; } } return null ; }
tr	9	private void nomenclatureMenuItemActionPerformed ( java . awt . event . ActionEvent evt ) { RBGoodsPanel goodsPanel = new RBGoodsPanel ( ) ; setFrontPanel ( goodsPanel ) ; }
tr	2	public int getiSortOrder ( ) { return iSortOrder ; }
tr	8	@ XmlElementDecl ( namespace = "" , name = "reqsummary" ) public JAXBElement < String > createReqsummary ( String value ) { return new JAXBElement < String > ( _Reqsummary_QNAME , String . class , null , value ) ; }
tr	3	public static Automaton makeAnyChar ( ) { return BasicAutomata . makeAnyChar ( ) ; }
tr	3	@ Override public void commit ( ) { if ( currentTransaction != null ) currentTransaction . commit ( ) ; }
tr	10	@ Override public Set < Integer > missingSourceSymbols ( ) { Set < Integer > missingSourceSymbols = new LinkedHashSet < Integer > ( ) ; for ( int i = receivedSourceSymbols . nextClearBit ( 0 ) ; i < K ; i = receivedSourceSymbols . nextClearBit ( i + 1 ) ) missingSourceSymbols . add ( i ) ; return missingSourceSymbols ; }
tr	1	public LineItem ( ) { }
tr	1	public int hashCode ( ) { return super . hashCode ( ) ; }
tr	6	@ Override public boolean equals ( Object object ) { if ( object instanceof AtomChar ) { return ( ( AtomChar ) object ) . value == value ; } else { return false ; } }
tr	7	public SimulatorBuilder addPlayer ( PlayerProfile profile ) { if ( this . profiles == null ) { this . profiles = new ArrayList < > ( ) ; } this . profiles . add ( profile ) ; return this ; }
tr	1	public int cdlGapSideSideWhiteLookback ( ) { return super . cdlGapSideSideWhiteLookback ( ) ; }
tr	4	public void onAttack ( AttackComponent p ) { if ( ! dead ) { } }
tr	8	private Coords imageToPanelCoords ( Coords p ) { return new Coords ( ( p . x * scale ) + originX , ( p . y * scale ) + originY ) ; }
tr	2	public void setCount ( int count ) { this . count = count ; }
tr	6	@ Override public int hashCode ( ) { final int prime = 31 ; int result = 1 ; result = prime * result + ( ( left == null ) ? 0 : left . hashCode ( ) ) ; result = prime * result + ( ( right == null ) ? 0 : right . hashCode ( ) ) ; return result ; }
tr	6	public BSTNode ( BSTNode left , BSTNode right , BSTNode parent , Object data ) { super ( ) ; this . left = left ; this . right = right ; this . parent = parent ; this . data = data ; }
tr	1	private DateResultSetMapper ( ) { }
tr	9	@ Override public YamlPermissionOp getOP ( ) throws DataLoadFailedException { checkCache ( PermissionType . OP , "op" ) ; return ( YamlPermissionOp ) cache . get ( PermissionType . OP ) . get ( null ) ; }
tr	10	private VirtualRebarPlugin ( Plugin plugin ) { dataDir = new File ( plugin . getDataFolder ( ) . getParentFile ( ) , "Rebar" ) ; dataDir . mkdirs ( ) ; RebarInstance . setInstance ( this ) ; }
tr	3	public String getNombre_usuario ( ) { return nombre_usuario ; }
tr	8	private static void checkSort ( Integer [ ] a ) { for ( int i = 0 ; i < a . length ; i ++ ) if ( a [ i ] != i ) System . out . println ( "Error at " + i ) ; System . out . println ( "Finished checksort" ) ; }
tr	4	public ArrayList < Tile > getBlockingTiles ( ) { return blockingTiles ; }
tr	10	protected Integer getTerminalHeight ( ) { String ansicon = System . getenv ( "ANSICON" ) ; if ( IS_OS_WINDOWS && null != ansicon ) { return Integer . valueOf ( ansicon . trim ( ) . replaceAll ( "^d+xd+ (d+x(d+))" , "1" ) ) ; } return null ; }
tr	7	java . math . BigDecimal getKey ( String value ) { java . math . BigDecimal key ; key = new java . math . BigDecimal ( value ) ; return key ; }
tr	7	public void transportError ( Exception error ) { this . lastException = error ; setState ( STATE_INTERRUPTED ) ; reconnect ( ) ; }
tr	8	public TelePoint ( int points ) { super ( "+" + points ) ; this . points = points ; setBackground ( teleColor ) ; setFont ( buttonFont ) ; addActionListener ( new AddPoints ( ) ) ; }
tr	5	@ Before ( "execution(* do*(..))" ) public void track ( ) { System . out . println ( ">>>> something is doing" ) ; }
tr	2	public int getTotalBits ( ) { return totalBits ; }
tr	7	private void emitQuadTo ( final float x1 , final float y1 , final float x2 , final float y2 ) { out . quadTo ( x1 , y1 , x2 , y2 ) ; }
tr	5	public ShadowInfo ( Matrix4f projection , float bias , boolean flipFaces ) { this . projection = projection ; this . bias = bias ; this . flipFaces = flipFaces ; }
tr	2	private ProposalBySellerPredicate ( long sellerId ) { super ( ) ; this . sellerId = sellerId ; }
tr	3	public void cargarDialogoCrearPersona ( ) { dialogoCrearPersona . setVisible ( true ) ; }
tr	4	public Laptop ( ) { this . setType ( Type . LAPTOP ) ; }
tr	4	public static double getTime ( ) { return ( double ) System . nanoTime ( ) / ( double ) SECOND ; }
tr	5	@ Override public void setPrev ( Filter f ) { throw new UnsupportedOperationException ( "This is an endpoint." ) ; }
tr	3	public String getSReplyEmail ( ) { return sReplyEmail ; }
tr	4	public void registrarDevolucion ( ) { JOptionPane . showMessageDialog ( null , "La funci\u00F3n escogida no se encuentra definida para" + "el estado en que se encuentra la Obra" , "Funcionalidad no permitida" , JOptionPane . INFORMATION_MESSAGE ) ; }
tr	8	protected void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { this . doPost ( request , response ) ; }
tr	1	public SingleEvent ( ) { }
tr	10	public String getDemoteGroup ( String before ) { Set < String > keys = mapping . keySet ( ) ; for ( String key : keys ) { if ( mapping . get ( key ) . equalsIgnoreCase ( before ) ) { return key ; } } return null ; }
tr	5	private short readClassId ( ) { switch ( classIntType ) { case byte : return byteBuffer . get ( ) ; default : return byteBuffer . getShort ( ) ; } }
tr	5	@ Override public int getBid ( String winningPlayerId , int currentBid ) { return 0 ; }
tr	7	public ShaderBuilder recolour ( ) { _fsh . addVariable ( "uniform vec4" , "in_recolour = vec4(1  1  1  1)" ) ; _fsh . addFunction ( "void" , "recolour" , fn -> { fn . addLine ( "gl_FragData[0] = gl_FragData[0] * in_recolour;" ) ; } ) ; return this ; }
tr	4	public AddIngredientCommandIterator ( LinkedList < AddIngredientCommand > addIngredientCommands ) { this . addIngredientCommands = addIngredientCommands ; }
tr	2	public void setId ( long id ) { this . id = id ; }
tr	8	public void setContent ( ChannelBuffer content ) { if ( content == null ) { content = ChannelBuffers . EMPTY_BUFFER ; } if ( content . readable ( ) && isChunked ( ) ) { throw new IllegalArgumentException ( "non-empty content disallowed if this.chunked == true" ) ; } this . content = content ; }
tr	5	public void invokeOperation ( ) { System . out . println ( "Blokuje numer.... " + this . number ) ; }
tr	5	@ Override public int compareTo ( CategoryDetails t ) { return t . getCategoryName ( ) . compareTo ( t . getCategoryName ( ) ) ; }
tr	3	public String getCapkhenthuong ( ) { return this . capkhenthuong ; }
tr	1	public InformationTecnologyNGTest ( ) { }
tr	3	public DeletedFieldImpl ( String fieldName ) { this . fieldName = fieldName ; }
tr	2	public TimeStamp ( long t ) { this . t = t ; }
tr	2	private double getLatestOutput ( ) { return this . latestoutput ; }
tr	1	public Bulldog ( ) { super ( "Bulldog" ) ; }
tr	1	public ControlAcceso ( ) { }
tr	3	public LHSMSBState ( EvlAssignFSM fsm ) { super ( fsm ) ; }
tr	6	public static < T > NodeWithParent < T > findParent ( NodeWithParent < T > n ) { NodeWithParent < T > curr = n ; while ( curr != null ) { curr = curr . parent ; } return curr ; }
tr	3	@ Override public IInventory getInventory ( ) { return this ; }
tr	2	public int getTtl ( ) { return ttl ; }
tr	10	public void showInsertPopup ( ) { final String title = "Insert New Player" ; final String message = "Enter new player name(s):" ; String args = JOptionPane . showInputDialog ( null , message , title , JOptionPane . PLAIN_MESSAGE ) ; if ( args != null ) console . invoke ( "insert " + args ) ; }
tr	1	public PayLoad ( ) { }
tr	6	@ Override public String getServerHost ( ) { return ( ( AppleNotificationServer ) getServer ( ) ) . getNotificationServerHost ( ) ; }
tr	1	public static boolean isSigned_interval ( ) { return false ; }
tr	9	@ Test ( expected = LuaScriptException . class ) public void testAtLeastOneArgumentMustBePassed ( ) throws LuaScriptException { List < String > noValue = new ArrayList < String > ( ) ; testArgsException ( noValue , noValue , "Must provide at least one queue to pause" ) ; }
tr	3	private int getBit ( int i , int k ) { return ( ( i >> k ) & 1 ) ; }
tr	3	public String getValidFrom ( ) { return validFrom ; }
tr	5	public static NEQ NEQ ( NumericExpression expression1 , Number number ) { return new NEQ ( expression1 , new const ( number ) ) ; }
tr	6	public void setDescription ( String value ) { this . description = value ; this . isDescriptionDirty = true ; setDirty ( ) ; }
tr	5	public byte getLanguageIndicator ( ) { if ( languageIndicator . getText ( ) . length ( ) == 0 ) { return null ; } return byte . valueOf ( languageIndicator . getText ( ) ) ; }
tr	2	public void setHeight ( int height ) { this . height = height ; }
tr	3	public void setShapeDrawer ( ShapeDrawer shapeDrawer ) { this . shapeDrawer = shapeDrawer ; }
tr	2	public void setInteraction ( boolean interaction ) { this . interaction = interaction ; }
tr	10	@ Override public boolean equals ( Object obj ) { if ( this == obj ) return true ; if ( obj == null ) return false ; if ( getClass ( ) != obj . getClass ( ) ) return false ; SchoolYear other = ( SchoolYear ) obj ; if ( end == null ) { if ( other . end != null ) return false ; } else if ( ! end . equals ( other . end ) ) return false ; if ( name == null ) { if ( other . name != null ) return false ; } else if ( ! name . equals ( other . name ) ) return false ; if ( start == null ) { if ( other . start != null ) return false ; } else if ( ! start . equals ( other . start ) ) return false ; return true ; }
tr	2	public int getId ( ) { return id ; }
tr	2	public double getZeroStaminaHockeyistEffectivenessFactor ( ) { return zeroStaminaHockeyistEffectivenessFactor ; }
tr	3	public String getAuthor ( ) { return author ; }
tr	9	public static void main ( String [ ] args ) { boolean a , b ; System . out . println ( "a\tb\ta and b\ta or b\tnot a\tnot b \n" ) ; a = 3 > 5 ; b = 12 != 8 ; System . out . print ( "(3>5)\t(12!=8)\t" + ( a && b ) ) ; System . out . print ( "\t" ) ; System . out . print ( a || b ) ; System . out . print ( "\t" ) ; System . out . print ( ! a ) ; System . out . print ( "\t" ) ; System . out . println ( ! b + "\n" ) ; a = 5 >= 6 ; b = 3 != 3 ; System . out . print ( "(5>=6)\t(3!=3)\t" + ( a && b ) ) ; System . out . print ( "\t" ) ; System . out . print ( a || b ) ; System . out . print ( "\t" ) ; System . out . print ( ! a ) ; System . out . print ( "\t" ) ; System . out . println ( ! b + "\n" ) ; a = - 7 == 8 ; System . out . print ( "(-7=8)\t(22)\t" + ( a && b ) ) ; System . out . print ( "\t" ) ; System . out . print ( a || b ) ; System . out . print ( "\t" ) ; System . out . print ( ! a ) ; System . out . print ( "\t" ) ; System . out . println ( ! b + " NO SE PUEDE USAR EL 22\n" ) ; a = 21 != 12 ; b = true ; System . out . print ( "21!=12\t(true)\t" + ( a && b ) ) ; System . out . print ( "\t" ) ; System . out . print ( a || b ) ; System . out . print ( "\t" ) ; System . out . print ( ! a ) ; System . out . print ( "\t" ) ; System . out . println ( ! b + "\n" ) ; a = 4 == 2 ; b = 7 >= - 9 ; System . out . print ( "(4==2)\t(7>=-9)\t" + ( a && b ) ) ; System . out . print ( "\t" ) ; System . out . print ( a || b ) ; System . out . print ( "\t" ) ; System . out . print ( ! a ) ; System . out . print ( "\t" ) ; System . out . println ( ! b + "\n" ) ; }
tr	2	public void setCurrentIndex ( int currentIndex ) { this . currentIndex = currentIndex ; }
tr	9	@ Override public boolean equals ( Object o ) { if ( this == o ) return true ; if ( o == null || getClass ( ) != o . getClass ( ) ) return false ; PosListaPrecioEntityPK that = ( PosListaPrecioEntityPK ) o ; if ( pcaIdElemento != that . pcaIdElemento ) return false ; if ( pcaPosId != null ? ! pcaPosId . equals ( that . pcaPosId ) : that . pcaPosId != null ) return false ; return true ; }
tr	4	@ Override public Log getLogger ( ) { if ( client == null ) { return new Log ( ) ; } else { return client . getLogger ( ) ; } }
tr	10	@ Override public void onPairFailed ( ) { synchronized ( mListeners ) { for ( DiscoveryListener listener : mListeners ) { try { listener . onPairFailed ( ) ; } catch ( RuntimeException e ) { System . out . println ( "Error notifying listener." ) ; } } } System . out . println ( "onPairFailed" ) ; }
tr	1	public double typeModifier ( ) { return 0 ; }
tr	6	@ SuppressWarnings ( "unused" ) private static Polygon getTest3 ( ) { Polygon p = new Polygon ( ) ; p . addPoint ( 0 , new Point ( 10 , 10 ) ) ; p . addPoint ( 0 , new Point ( 15 , 15 ) ) ; p . addPoint ( 0 , new Point ( 20 , 10 ) ) ; p . addPoint ( 0 , new Point ( 25 , 15 ) ) ; p . addPoint ( 0 , new Point ( 30 , 10 ) ) ; p . addPoint ( 0 , new Point ( 15 , 40 ) ) ; return p ; }
tr	4	public WorldListener ( TotalPermissions p ) { plugin = p ; }
tr	5	public STO ( Processor cpu , Memory memory ) { super ( cpu , memory ) ; }
tr	10	public AddCategory ( java . awt . Frame parent , boolean modal ) { super ( parent , modal ) ; initComponents ( ) ; ( ( SquashedSpinner ) squashedDays ) . initComponents ( 5 , "Days:" ) ; ( ( SquashedSpinner ) squashedWeeks ) . initComponents ( 0 , "Weeks:" ) ; }
tr	10	public List < Status > getFavorites ( String id ) throws WeiboException { return Status . constructStatuses ( get ( getBaseURL ( ) + "favorites/" + id + ".json" , new PostParameter [ 0 ] , true ) ) ; }
tr	8	@ Override public void updateAsciiStream ( String columnLabel , InputStream x , long length ) throws SQLException { }
tr	2	public void setMinute ( int minute ) { this . minute = minute ; }
tr	5	Rule AssignmentStatement ( ) { return Sequence ( Identifier ( ) , WhiteSpace ( ) , "<- " , Identifier ( ) ) ; }
tr	9	@ Test public void shouldAddDifferentValues ( ) { BinarySearchTree < Integer > tree = new BinarySearchTree < Integer > ( ) ; assertNotNull ( tree ) ; boolean result = tree . add ( 5 ) ; assertTrue ( result ) ; result = tree . add ( - 5 ) ; assertTrue ( result ) ; result = tree . add ( 1 ) ; assertTrue ( result ) ; result = tree . add ( 0 ) ; assertTrue ( result ) ; result = tree . add ( - 1 ) ; assertTrue ( result ) ; }
tr	4	public List < Ant > getAnts ( ) { return ants ; }
tr	4	public void setIndex ( int i ) { sen . index = i ; }
tr	3	public void setLastItem ( String lastItem ) { this . lastItem = lastItem ; }
tr	3	public void setNbRows ( int nb ) { rows = nb ; }
tr	1	public PoolThreadTaskExecutor ( ) { this ( 8 ) ; }
tr	8	@ Override public String toString ( ) { return "CuentaBancaria{" + "numero=" + numero + "  cliente=" + cliente + "  saldo=" + saldo + "  fechaApertura=" + fechaApertura + } ; }
tr	8	public String getImgType ( String [ ] fileNames ) { String imgType = "" ; for ( String s : fileNames ) { String [ ] sa = s . split ( "_" ) ; imgType += sa [ 1 ] . charAt ( 0 ) ; } return imgType ; }
tr	2	public void setHolesAllowedInFiles ( boolean holesAllowedInFiles ) { this . holesAllowedInFiles = holesAllowedInFiles ; }
tr	10	public String invokeManualReservation ( ) { return createReservation ( reservation . getFirstName ( ) , reservation . getLastName ( ) , reservation . getNumAdults ( ) , reservation . getNumChild ( ) , reservation . getNumDays ( ) , reservation . getTripStartDate ( ) ) ; }
tr	6	@ Override public void exitRule ( ParseTreeListener listener ) { if ( listener instanceof EnquantoListener ) ( ( EnquantoListener ) listener ) . exitBoolPar ( this ) ; }
tr	3	public Agent getActer ( ) { return _acter ; }
tr	6	public static final byte product ( byte u , byte v ) { if ( u == 0 || v == 0 ) return 0 ; if ( u == 1 ) return v ; if ( v == 1 ) return u ; else { byte product = getExp ( UNSIGN ( getLog ( u - 1 ) ) + UNSIGN ( getLog ( v - 1 ) ) ) ; return product ; } }
tr	4	public final void EstablecerNombres ( String entrada_Nombres ) { this . Nombres = entrada_Nombres ; }
tr	3	public String getImage0 ( ) { return image0 ; }
tr	5	DataFile ( File file , int number ) throws IOException { this ( file , number , false ) ; }
tr	3	public synchronized static float rndFloat ( ) { return RND . nextFloat ( ) ; }
tr	10	public DefaultArea ( List < Box > boxList ) { this ( boxList . get ( 0 ) ) ; for ( Box box : boxList ) addBox ( box ) ; setBounds ( new Rectangular ( contentBounds ) ) ; }
tr	1	public KulButton ( ) { this ( "" ) ; }
tr	6	public static UnitValue getUnitValueX ( String unit ) { return HOR_DEFS . get ( unit ) ; }
tr	7	@ Override public String getNome ( ) { if ( pessoa == null ) { pessoa = PessoaDao . getPessoaByName ( this . nome ) ; } return pessoa . getNome ( ) ; }
tr	4	private void help ( ) { System . out . println ( "- (d i j)show the cell i  j" ) ; System . out . println ( "- (m i j x)put a mine flag on the cell i  j" ) ; System . out . println ( "- (m i j ?)put an interrogation flag on the cell i  j" ) ; System . out . println ( "- (m i j #) remove any flag on the cell i  j" ) ; System . out . println ( "- (o) jump to the option pannel" ) ; System . out . println ( "- (r) restart the current game" ) ; System . out . println ( "- (h) print the help" ) ; System . out . println ( "- (q) exit the game" ) ; System . out . println ( ) ; }
tr	2	public boolean empty ( ) { return currentSize == 0 ; }
tr	8	@ XmlElementDecl ( namespace = "" , name = "invoice-amount" ) public JAXBElement < BigDecimal > createInvoiceAmount ( BigDecimal value ) { return new JAXBElement < BigDecimal > ( _InvoiceAmount_QNAME , BigDecimal . class , null , value ) ; }
tr	8	public static String decodeURIComponent ( String s ) { if ( s == null ) { return null ; } String result = null ; try { result = URLDecoder . decode ( s , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { result = s ; } return result ; }
tr	2	public void clearTracker ( ) { this . setQuestTracker ( null ) ; }
tr	5	public void setInicio ( java . sql . Time inicio ) { this . inicio = inicio ; }
tr	2	public int getX ( ) { return x ; }
tr	7	@ Override public String toString ( ) { String time = getTime ( ) ; String text = getText ( ) ; return time + " Admin: " + text ; }
tr	8	private void monCheckActionPerformed ( java . awt . event . ActionEvent evt ) { applyButton . setEnabled ( true ) ; }
tr	3	@ Override public void imprimirFormaDePago ( ) { this . imprimirDatos ( ) ; }
tr	7	private String getRandomBannerMirror ( ) { return this . bannerMirrors . get ( ( int ) Math . random ( ) * this . bannerMirrors . size ( ) ) ; }
tr	4	public static SelectParameter Select ( String parameterName ) { return new SelectParameter ( parameterName ) ; }
tr	1	public int statDrop ( ) { return 0 ; }
tr	7	public Comando crearAtacar ( final Direccion direccion , final Unidad unidad ) { return new Atacar ( direccion , unidad ) ; }
tr	2	void clear ( ) { stack = "" ; }
tr	6	@ Override public String visit ( final FunctionHeadingNode node ) { return handleThreeFieldNode ( node , "FunctionHeading" ) ; }
tr	1	public int getPercent ( ) { return % ; }
tr	1	public int process_id ( ) { return 0 ; }
tr	4	public void setGroup ( PasswordGroup group ) { this . group = group ; setEntry ( null ) ; }
tr	2	public double getY ( ) { return y ; }
tr	9	public Condition lessThan ( @ NotNull Value < Integer > value ) { return Condition . condition ( Operator . LESS , this , value ) ; }
tr	6	public TasquesPendents ( String any , IClient client ) { this . client = client ; this . any = any ; initialize ( ) ; }
tr	7	public static URI getProfileURI ( String login ) { return newURI ( PROTOCOL + LEPRA_HOSTNAME + "/users/" + login ) ; }
tr	7	@ Test public void test ( ) { Simulator sim = new Simulator ( ) ; ConfigController c = new ConfigController ( sim ) ; c . getButtons ( ) ; }
tr	2	public void setHeight ( int height ) { this . height = height ; }
tr	4	public Object getRecipient ( ) { if ( toName != null ) { return toName ; } return to ; }
tr	6	@ Override public XMLReader getXMLReader ( ) { XMLReader reader = super . getXMLReader ( ) ; if ( reader == null ) { reader = new SAX_FI_Decoder ( ) ; setXMLReader ( reader ) ; } return reader ; }
tr	1	public int get_key_num ( ) { return 1 ; }
tr	2	public void setNillable ( boolean nillable ) { this . nillable = nillable ; }
tr	2	protected void setIndex ( int index ) { this . index = index ; }
tr	7	public String toString ( ) { String util = "" ; util += "Nume utilizator: " + nume_utilizator + "\n" ; util += "Parola: " + parola + "\n" ; util += "Nume: " + nume + " " + " Prenume: " + prenume + "\n" ; return util ; }
tr	10	protected void writeImpl ( short [ ] samples , int offs , int len ) throws JavaLayerException { if ( source == null ) createSource ( ) ; byte [ ] b = toByteArray ( samples , offs , len ) ; source . write ( b , 0 , len * 2 ) ; }
tr	4	public Color getTabUnselectedColor ( ) { return ( blackTabbedPaneUI . colorUnSel == null ) ? new Color ( 192 , 192 , 192 ) : blackTabbedPaneUI . colorUnSel ; }
tr	4	public static void main ( String [ ] args ) { new RoboGame ( ) ; }
tr	3	public String getUsernameRaw ( ) { return usernameRaw ; }
tr	8	public Type parse ( int i ) { switch ( i ) { case 1 : return HASHTAG ; case 2 : return USER ; case 3 : return EMOTICON ; case 4 : return URL ; } return OTHER ; }
tr	2	public boolean isOrganic ( ) { return organic ; }
tr	3	public Date getDataReserva ( ) { return dataReserva ; }
tr	6	public Iterator < Entry < K , V >> iterator ( ) { return new EntrySetIterator ( ) ; }
tr	8	public void genK ( PW pw , boolean putParenthesis ) { pw . print ( "super." ) ; pw . print ( getMethod ( ) . getName ( ) ) ; pw . print ( "(" ) ; if ( getExprList ( ) != null ) { getExprList ( ) . genK ( pw ) ; } pw . print ( ")" ) ; }
tr	5	private static class < ? > getPrimitiveClass ( final class < ? > componentType ) { if ( Integer . class . isAssignableFrom ( componentType ) ) { return int . class ; } if ( double . class . isAssignableFrom ( componentType ) ) { return double . class ; } throw new UnsupportedOperationException ( "Mapping not implemented" ) ; }
tr	2	@ Override public int getSize ( ) { return 0 ; }
tr	5	Context ( String originalText , Position position ) { this . originalText = originalText ; this . position = position ; }
tr	3	public Object getOwner ( ) { return owner ; }
tr	10	public boolean optBoolean ( String name , boolean fallback ) { Object object = opt ( name ) ; boolean result = JSON . toBoolean ( object ) ; return result != null ? result : fallback ; }
tr	9	final public String toString ( ) { return getClass ( ) . getName ( ) + ". Value=" + value + "  unit=" + unit + "  unitString: " + unitStr + "  oper=" + oper + "  isHor: " + isHor ; }
tr	8	private static Unit create ( int id , String name ) { Unit result = new Unit ( id , name ) ; UNIT_MAP . put ( name , result ) ; return result ; }
tr	3	public void setName ( String name ) { this . name = name ; }
tr	7	void clearHeaders ( ) { for ( int i = 0 ; i < entries . length ; i ++ ) { entries [ i ] = null ; } head . before = head . after = head ; }
tr	5	public void reset ( ) { setDrawing ( true ) ; setKeyHandling ( true ) ; setMouseHandling ( true ) ; clearComps ( ) ; }
tr	8	protected void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doPost ( request , response ) ; }
tr	4	public void shutdown ( ) { datagramSocket . close ( ) ; this . exit = true ; }
tr	9	public static Map < String , String > readStringValues ( int hkey , String key ) throws IllegalArgumentException , IllegalAccessException , InvocationTargetException { return readStringValues ( getUnderlyingObject ( hkey ) , hkey , key ) ; }
tr	6	public String randomMove ( ) { Random r = new Random ( ) ; String [ ] exits = new String [ ] { "east" , "west" , "south" , "north" } ; return exits [ r . nextInt ( 4 ) ] ; }
tr	10	private void addListeners ( ) { this . submitButton . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { StringAdvancePanel . this . submitAction ( ) ; } } ) ; }
tr	9	public void method278 ( int i , int j , int k , int l ) { Ground class30_sub3 = groundArray [ i ] [ j ] [ k ] ; if ( class30_sub3 != null ) { groundArray [ i ] [ j ] [ k ] . anInt1321 = l ; } }
tr	9	private void viewtweetsBtnActionPerformed ( java . awt . event . ActionEvent evt ) { viewTweets vt = new viewTweets ( ) ; vt . setVisible ( true ) ; }
tr	7	public void damage ( int amount ) { if ( System . currentTimeMillis ( ) > DAMAGE_DELAY + lastDamaged ) { life -= amount ; if ( life < 0 ) life = 0 ; lastDamaged = System . currentTimeMillis ( ) ; } }
tr	2	public long getUsed ( ) { return used ; }
tr	10	public void testToStringReconstruction ( ) { assertTrue ( "Integer(0) cannot be reconstructed from its toString() value!" , int0 . equals ( new Integer ( int0 . toString ( ) ) ) ) ; assertTrue ( "Integer(1) cannot be reconstructed from its toString() value!" , int1 . equals ( new Integer ( int1 . toString ( ) ) ) ) ; assertTrue ( "Integer(-1) cannot be reconstructed from its toString() value!" , intNeg1 . equals ( new Integer ( intNeg1 . toString ( ) ) ) ) ; assertTrue ( "Integer(Long.MAX_VALUE) cannot be reconstructed from its toString() value!" , intLongMax . equals ( new Integer ( intLongMax . toString ( ) ) ) ) ; assertTrue ( "Integer(Long.MIN_VALUE) cannot be reconstructed from its toString() value!" , intLongMin . equals ( new Integer ( intLongMin . toString ( ) ) ) ) ; }
tr	5	@ Override public void setLevel ( int level ) { this . level = level ; this . setChanged ( ) ; this . notifyObservers ( ) ; }
tr	3	@ Override public int hashCode ( ) { return id ; }
tr	4	public String getValue ( String defaultValue ) { String value = getValue ( ) ; return ( value != null ) ? value : defaultValue ; }
tr	3	public Player getPlayer ( ) { return player ; }
tr	1	public Ggg ( ) { }
tr	10	public void meta ( MetaMessage event ) { if ( event . getType ( ) == END_OF_TRACK_MESSAGE ) { if ( sequencer != null && sequencer . isOpen ( ) && loop ) { sequencer . setTickPosition ( 0 ) ; sequencer . start ( ) ; } } }
tr	3	@ Override public int getSize ( ) { return size ; }
tr	4	public static void main ( String [ ] args ) { new TerminalWindowIde ( ) ; }
tr	2	@ Override public void onReplacement ( ) { }
tr	7	public static URL getURL ( String filName ) { return staticSound . getClass ( ) . getResource ( filName ) ; }
tr	7	private void writeObject ( java . io . ObjectOutputStream out ) throws IOException { out . defaultWriteObject ( ) ; }
tr	9	public String QueryString ( String strFolder , String oneStr , String twoStr , String threeStr ) { return otapiJNI . Storage_QueryString__SWIG_0 ( swigCPtr , this , strFolder , oneStr , twoStr , threeStr ) ; }
tr	2	private void finaliza ( ) { this . dispose ( ) ; }
tr	2	public boolean isEmpty ( ) { return contents . isEmpty ( ) ; }
tr	6	public Vector3 subtract ( Vector3 other ) { x -= other . x ; y -= other . y ; z -= other . z ; return this ; }
tr	2	public void setFavorited ( boolean favorited ) { this . favorited = favorited ; }
tr	6	@ Override public void toucher ( int value ) { toucherDmg = true ; setVie ( getVie ( ) - value ) ; }
tr	4	public Builder setFontId ( int id ) { fontId = id ; return this ; }
tr	10	@ Override public synchronized void onDartMissedPressed ( ) { for ( GameStatusUpdateListener g : listeners ) { try { g . onDartMissedPressed ( ) ; } catch ( RuntimeException e ) { logger . warn ( e . getMessage ( ) , e ) ; } } }
tr	8	private void menuDeleteVertexActionPerformed ( java . awt . event . ActionEvent evt ) { drawing . removeVertex ( ) ; }
tr	10	private static File checkDirectory ( String dir ) { final File file = dir == null ? null : new File ( dir ) ; if ( file != null && ( ! file . isDirectory ( ) || ! file . canWrite ( ) ) ) { throw new RuntimeException ( String . format ( "%s is not a writeable directory." , file . getAbsolutePath ( ) ) ) ; } return file ; }
tr	5	@ Override public Component setImage ( ) { return new JLabel ( new ImageIcon ( "./images/p-human.png" ) ) ; }
tr	1	public Grundmass ( ) { }
tr	6	public float length ( ) { return ( float ) Math . sqrt ( x * x + y * y + z * z ) ; }
tr	8	private void setDefaultRules ( ) { joker . setSelected ( true ) ; strip . setSelected ( false ) ; reneging . setSelected ( true ) ; autowin . setSelected ( true ) ; cutRightPlayLeft . setSelected ( true ) ; deal_3_2 . setSelected ( true ) ; }
tr	6	@ Override public Object write ( T value ) { return value . name ( ) ; }
tr	3	protected Logger getLogger ( ) { return this . logger ; }
tr	1	protected GamePanel ( ) { super ( ) ; }
tr	9	@ Override public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( ) != obj . getClass ( ) ) { return false ; } final FormadePagamento other = ( FormadePagamento ) obj ; if ( ! Objects . equals ( this . nome , other . nome ) ) { return false ; } return true ; }
tr	5	@ Override public void releaseSavepoint ( Savepoint savepoint ) throws SQLException { }
tr	10	public String toString ( ) { String str = "" ; if ( frameData != null ) { for ( int s = 0 ; s < getNumSignals ( ) ; s ++ ) { String st = "" ; for ( int f = 0 ; f < frameData . length ; f ++ ) if ( frameData [ f ] [ s ] >= 0 ) st += ( st . length ( ) == 0 ? "" : " " ) + f + "=" + frameData [ f ] [ s ] ; str += "(" + st + ")" ; } for ( int f = 0 ; f < pauseData . length ; f ++ ) if ( pauseData [ f ] ) str += " " + f ; } return str ; }
tr	7	public static RuntimeException throwCauseOrElseException ( Exception e ) { if ( e . getCause ( ) != null ) { throw SneakyThrow . sneakyThrow ( e . getCause ( ) ) ; } throw SneakyThrow . sneakyThrow ( e ) ; }
tr	4	public void setTo ( String value ) { this . to = value ; }
tr	10	public boolean stateEquals ( Object o ) { if ( o == this ) return true ; if ( o == null || ! ( o instanceof MersenneTwister ) ) return false ; MersenneTwister other = ( MersenneTwister ) o ; if ( mti != other . mti ) return false ; for ( int x = 0 ; x < mag01 . length ; x ++ ) if ( mag01 [ x ] != other . mag01 [ x ] ) return false ; for ( int x = 0 ; x < mt . length ; x ++ ) if ( mt [ x ] != other . mt [ x ] ) return false ; return true ; }
tr	10	@ Override public JPClass getParsedClass ( File f ) throws Exception { return jsr . parseJavaSourceFile ( f , JPModelFactory . createJPClass ( ) ) ; }
tr	5	public boolean mustProceedSecondScan ( ) { for ( IStringAnalyser analyzer : stringAnalysers ) { if ( analyzer . isTwoScansAnalyzer ( ) ) { return true ; } } return false ; }
tr	10	@ Test public void shouldGetInitiatingDocumentSameObject ( ) throws Exception { outcomingDoc . setInitiatingDocument ( incomingDoc ) ; org . junit . assert . assertSame ( outcomingDoc . getInitiatingDocument ( ) , incomingDoc ) ; }
tr	7	public void setCoord ( Coord newCoord ) { x = newCoord . getX ( ) ; y = newCoord . getY ( ) ; }
tr	9	@ BeforeMethod public void setUp ( ) throws Exception { MockitoAnnotations . initMocks ( this ) ; crudService = Mockito . mock ( SoundCrudService . class ) ; }
tr	7	public void addInOrder ( Object ... objects ) { for ( int i = 1 ; i < objects . length ; ++ i ) { for ( int j = 0 ; j < i ; ++ j ) { add ( objects [ j ] , objects [ i ] ) ; } } }
tr	10	@ Test public void testRenderLong ( ) { long value = long . MIN_VALUE ; byte [ ] data = null ; data = ByteUtil . renderLong ( value ) ; assertTrue ( ByteUtil . retrieveLong ( data , 0 ) == long . MIN_VALUE ) ; value = long . MAX_VALUE ; data = ByteUtil . renderLong ( value ) ; assertTrue ( ByteUtil . retrieveLong ( data , 0 ) == long . MAX_VALUE ) ; value = - 1 ; data = ByteUtil . renderLong ( value ) ; assertTrue ( ByteUtil . retrieveLong ( data , 0 ) == - 1 ) ; }
tr	4	@ Override public int getOutputsNum ( ) { return this . outputSynapses . size ( ) ; }
tr	3	public static ServiceFactory getInstance ( ) { if ( instance == null ) instance = new ServiceFactory ( ) ; return instance ; }
tr	2	public int [ ] [ ] getGraph ( ) { return graph ; }
tr	4	public void setFilters ( List < BufferedImageOp > filters ) { this . filters = filters ; }
tr	5	public Bispo ( TipoCorJogador corJogador ) { super ( TipoPeca . BISPO , corJogador ) ; }
tr	6	private static Bullet get ( long pointer ) { if ( pointer == 0 ) { return null ; } Bullet instance = instances . get ( pointer ) ; if ( instance == null ) { instance = new Bullet ( pointer ) ; instances . put ( pointer , instance ) ; } return instance ; }
tr	2	public void setUserId ( long userId ) { this . userId = userId ; }
tr	7	public Integer executeHql ( String hql ) { return this . getCurrentSession ( ) . createQuery ( hql ) . executeUpdate ( ) ; }
tr	9	public LogLine < Date > parseLine ( String item ) throws LogItemParsingException { Date d = getDate ( item ) ; return new UnstructuredLogLine < Date > ( item , d ) ; }
tr	5	public void setDocumentTable ( Hashtable < String , ArrayList < String >> documentTable ) { this . documentTable = documentTable ; }
tr	1	public RandomSet ( ) { }
tr	9	public BooleanColumn ( String name , String title , int width ) { this ( name , title , width , AlignType . MIDDLE_LEFT , Format . YES_NO ) ; }
tr	7	private boolean r_Step_5b ( ) { ket = cursor ; if ( ! ( eq_s_b ( 1 , "l" ) ) ) { return false ; } bra = cursor ; if ( ! r_R2 ( ) ) { return false ; } if ( ! ( eq_s_b ( 1 , "l" ) ) ) { return false ; } slice_del ( ) ; return true ; }
tr	10	public static boolean getBoolValue ( Node node , String name ) { Node att = get_named_attribute ( node , name ) ; if ( att != null ) { return boolean . valueOf ( att . getNodeValue ( ) ) . booleanValue ( ) ; } else { return false ; } }
tr	1	public ObjectFactory ( ) { }
tr	7	@ Test ( expected = NullObjectInsertionException . class ) public void shouldRaiseExceptionForAddingNullCashOffice ( ) { Cinema cinema = new Cinema ( ) ; cinema . addCashOffice ( null ) ; }
tr	10	public LinkedList < E > toLinkedList ( ) { LinkedList < E > result = new LinkedList < > ( ) ; Node n = head ; while ( n != null ) { result . add ( n . value ) ; n = n . next ; } return result ; }
tr	1	public MainGame ( ) { }
tr	8	private final void bsW ( int n , int v ) throws IOException { while ( bsLive >= 8 ) { int ch = ( bsBuff >> 24 ) ; bsBuff <<= 8 ; bsLive -= 8 ; bytesOut ++ ; } bsBuff |= ( v << ( 32 - bsLive - n ) ) ; bsLive += n ; }
tr	1	public static int assertions ( ) { return assertions ; }
tr	10	public static byte [ ] toByteArray ( final String data ) { byte [ ] result = new byte [ ( data . length ( ) + 1 ) / 2 ] ; int pos = 0 ; for ( int i = 0 ; i < data . length ( ) ; i += 2 ) { result [ pos ++ ] = short . decode ( "#" + data . substring ( i , i + 2 ) ) . byteValue ( ) ; } return result ; }
tr	8	public void IsElementPresent_xp ( String element , String Jenkins_job ) { Print_out ( "==================  Is UI element -< " + element + " >- present?" ) ; isElementPresent ( By . xpath ( element ) , Jenkins_job ) ; Print_out ( "Success ..." ) ; }
tr	5	@ Override public double calculateDiscount ( double price , int qty ) { return ( qty * dollarAmt ) ; }
tr	7	public void stop ( ) { started . set ( false ) ; shouldContinue = false ; thread . interrupt ( ) ; service . stop ( ) ; }
tr	7	public static void sortTopicsList ( ArrayList < TopicOutput > list ) { Collections . sort ( list , new MyComparator ( ) ) ; }
tr	8	@ XmlElementDecl ( namespace = "" , name = "ship-request-date" ) public JAXBElement < String > createShipRequestDate ( String value ) { return new JAXBElement < String > ( _ShipRequestDate_QNAME , String . class , null , value ) ; }
tr	3	public void valueChanged ( ListSelectionEvent e ) { }
tr	3	public BufferedReader getBufferedReader ( ) { return this . in ; }
tr	2	public void setCoeffSeats ( double coeffSeats ) { this . coeffSeats = coeffSeats ; }
tr	6	public void procFile ( String filepath , String restart ) { this . lastItem = restart ; copyTable ( filepath ) ; }
tr	6	public ArithmeticExpression ( String data , ArithmeticExpression left , ArithmeticExpression right , ArithmeticExpression parent ) { super ( data , left , right , parent ) ; }
tr	3	public boolean isClockRunning ( ) { synchronized ( LOCK ) { return runSimulation ; } }
tr	1	public void init ( ) { }
tr	10	public void close ( ) { try { stream . close ( ) ; input . close ( ) ; } catch ( IOException e ) { Log . x ( e . getMessage ( ) ) ; if ( Log . debug ) e . printStackTrace ( ) ; } }
tr	4	public RangedAction ( Entity actor , int skillId ) { super ( actor , skillId ) ; }
tr	1	private Science ( ) { }
tr	1	SecretarAddMaterie ( ) { }
tr	10	@ Override public String toString ( ) { String result = null ; for ( SNode < E > nodeIt = this . frontNode ; nodeIt != null ; nodeIt = nodeIt . nextNode ) { if ( result == null ) { result = "[" + nodeIt . getElement ( ) . toString ( ) + "]" ; } else { result += " " + nodeIt . getElement ( ) . toString ( ) ; } } return result == null ? "empty" : result ; }
tr	7	public JSConfirmDialogWithCheckbox ( String message , String title , String checkboxLabel , String iconFilePath ) { init ( message , title , checkboxLabel , iconFilePath ) ; }
tr	9	public static int countDayInMonth ( long month ) { Date d = new Date ( month ) ; int monthIndex = d . getMonth ( ) ; int year = d . getYear ( ) ; switch ( monthIndex ) { case 0 : case 2 : case 4 : case 6 : case 7 : case 9 : case 11 : return 31 ; case 1 : return isLeapYear ( year ) ? 29 : 28 ; default : return 30 ; } }
tr	1	public Table ( ) { }
tr	6	public static void update ( ) { for ( String key : settings . keySet ( ) ) { settings . get ( key ) . update ( ) ; } }
tr	9	public SingleInstanceThread ( final SimpleExecutor executor , final Concurrency con ) { super ( ) ; this . executor = executor ; this . isRunning = con . newAtomicBoolean ( false ) ; this . notifiyer = new Notifiyer ( ) ; }
tr	10	public Task ( String taskName , Task taskParent ) { this . taskName = taskName ; this . taskParent = taskParent ; initParent ( ) ; dependentNodes = new ArrayList < > ( ) ; children = new ArrayList < > ( ) ; taskIsComplete = false ; initParent ( ) ; addToTasks ( ) ; }
tr	2	public int getVersion ( ) { return getInt ( 1 ) ; }
tr	2	public int hashCode ( ) { return Cafe123 ; }
tr	10	public void setValue ( final DATA newValue ) { if ( newValue == null ) return ; if ( this . possibleValues . isEmpty ( ) || this . possibleValues . contains ( newValue ) ) this . model . setValue ( newValue ) ; else throw new IllegalArgumentException ( "Invalid value \"" + newValue + "\"\nAllowed values are: " + this . possibleValues . toArray ( ) . toString ( ) ) ; }
tr	2	public boolean isConnected ( ) { return clientConnection . isConnected ( ) ; }
tr	8	@ XmlElementDecl ( namespace = "com/firstdata/Merchant/gmfV3.10" , name = "ServCode" ) public JAXBElement < String > createServCode ( String value ) { return new JAXBElement < String > ( _ServCode_QNAME , String . class , null , value ) ; }
tr	4	@ Override public void newMedia ( MediaPlayer arg0 ) { }
tr	2	public void setHeight ( int height ) { this . height = height ; }
tr	5	public T getEntity ( int index ) { return ( T ) entityList . get ( index ) ; }
tr	9	public void deleteValue ( int variable , int value ) { LinkedHashSet < Integer > dom = domains . get ( variable ) ; dom . remove ( value ) ; }
tr	10	@ Test public void testEmptyArraySort ( ) { Integer [ ] arrayInt = new Integer [ ] { } ; assert . assertTrue ( 0 == arrayInt . length ) ; assert . assertEquals ( "[]" , toShow ( arrayInt ) ) ; combsort . sort ( arrayInt ) ; assert . assertEquals ( "[]" , toShow ( arrayInt ) ) ; }
tr	2	public static void hobby ( ) { playFootball ( ) ; }
tr	4	public static Length getLength ( Element e ) { return e . getLength ( ) ; }
tr	6	public IdentifierBracketsValue ( String value , boolean hasColon , Brackets brackets ) { super ( value ) ; this . hasColon = hasColon ; this . brackets = brackets ; }
tr	9	public BidirectionalAStarFinder ( final PriorityQueue < T , double > heap ) { checkNotNull ( heap , "'heap' is 'null'." ) ; heap . clear ( ) ; this . OPENA = heap ; this . OPENB = heap . spawn ( ) ; }
tr	1	public void aboutToDisplayPanel ( ) { }
tr	1	protected int size ( ) { return 5 ; }
tr	9	private void jButton2ActionPerformed ( java . awt . event . ActionEvent evt ) { Librarian lib = new Librarian ( ) ; lib . setVisible ( true ) ; }
tr	5	public void setToken ( AccessToken accessToken ) { this . setToken ( accessToken . getToken ( ) , accessToken . getTokenSecret ( ) ) ; }
tr	2	public void setPresenca ( boolean presenca ) { this . presenca = presenca ; }
tr	1	public void initialize ( ) { }
tr	10	public static void pipe ( InputStream is , OutputStream out , byte [ ] buf ) throws IOException { for ( ; ; ) { int amt = is . read ( buf ) ; if ( amt < 0 ) { break ; } out . write ( buf , 0 , amt ) ; } }
tr	10	public RowInsertionChange ( String tableReference , Map < String , Data > newValues ) throws InvalidReferenceException , InvalidSchemaException , InvalidTargetException { this ( new TableReference ( tableReference ) , newValues ) ; }
tr	7	@ Override @ Transactional ( readOnly = false ) public Account save ( Account account ) { return this . accountRepository . save ( account ) ; }
tr	3	public String getOp ( ) { return op ; }
tr	9	@ Test public void TestCanSwitchWhenTrappedThenGivenShedShell ( ) { ap . activateTrapped ( ) ; ap . setItem ( Item . SHED_SHELL ) ; assertTrue ( ap . canSwith ( ) ) ; }
tr	6	public void calLongestSnakeSequence ( ) { int n = A . length ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { } } }
tr	10	public static Node reverseK ( Node head , int k ) { Node current = head ; Node next = null ; Node prev = null ; int count = 0 ; while ( current != null && count < k ) { next = current . getNext ( ) ; current . setNext ( prev ) ; prev = current ; current = next ; count ++ ; } if ( next != null ) { head . setNext ( reverseK ( next , k ) ) ; } return prev ; }
tr	9	@ Test public void testFlow_ensure_should_return_a_promise ( ) throws Exception { Promise < Object > p = resolved ( null ) . ensure ( null ) ; assertNotNull ( p ) ; }
tr	9	@ Override public boolean equals ( Object obj ) { if ( this == obj ) return true ; if ( obj == null ) return false ; if ( getClass ( ) != obj . getClass ( ) ) return false ; T2 < ? , ? > other = ( T2 < ? , ? > ) obj ; if ( _first == null ) { if ( other . _first != null ) return false ; } else if ( ! _first . equals ( other . _first ) ) return false ; if ( _second == null ) { if ( other . _second != null ) return false ; } else if ( ! _second . equals ( other . _second ) ) return false ; return true ; }
tr	2	public Arctg ( double acc ) { super ( acc ) ; }
tr	9	private static void pintar ( double newX , double newY , int angulo , boolean caneta , int r , int g , int b ) { board . pintar ( ( int ) newX , ( int ) newY , angulo , caneta , r , g , b ) ; }
tr	4	@ Override public List < String > getDeclaredPermissions ( ) { return getDeclaredPermissions ( null ) ; }
tr	10	private void pop ( char c ) throws JSONException { if ( this . top <= 0 ) { throw new JSONException ( "Nesting error." ) ; } char m = this . stack [ this . top - 1 ] == null ? a : k ; if ( m != c ) { throw new JSONException ( "Nesting error." ) ; } this . top -= 1 ; this . mode = this . top == 0 ? d : this . stack [ this . top - 1 ] == null ? a : k ; }
tr	10	private int [ ] getRecipeData ( ) { int [ ] r = new int [ 4 ] ; int counter = 0 ; for ( int y = 0 ; y < craftingArea . length ; y ++ ) { for ( int x = 0 ; x < craftingArea [ 0 ] . length ; x ++ ) { if ( craftingArea [ x ] [ y ] . getContent ( ) != null ) { r [ counter ] = craftingArea [ x ] [ y ] . getContent ( ) . getType ( ) . getId ( ) ; } else { r [ counter ] = - 1 ; } counter ++ ; } } return r ; }
tr	9	public static void main ( String [ ] args ) { int x , y , z ; x = y = z = 1 ; System . out . println ( "x = " + x + "  y = " + y + "  z = " + z ) ; x = ( y = ( z = z + 1 ) + 1 ) + 1 ; System . out . println ( "x = " + x + "  y = " + y + "  z = " + z ) ; x = ( y = 1 ) + ( z = 1 ) ; System . out . println ( "x = " + x + "  y = " + y + "  z = " + z ) ; }
tr	4	private FingerprintType ( final String strName ) { m_strName = strName ; }
tr	9	public static void main ( String [ ] args ) { String test = "     a    b   " ; System . out . println ( ReverseWordsInString . reverseWords ( test ) ) ; }
tr	10	public void openFile ( ) throws Exception { outFile = new File ( fileName ) ; fWriter = new FileWriter ( outFile ) ; pWriter = new PrintWriter ( fWriter ) ; pWriter . println ( "<root>" ) ; }
tr	8	public VentaDAOJDBC ( Connection connection ) { logger = Logger . getLogger ( VentaDAOJDBC . class ) ; logger . info ( "-->> init with connection:" + connection ) ; conn = connection ; }
tr	4	public boolean isHigh ( ) { if ( state == NetState . HIGH ) { return true ; } else { return false ; } }
tr	7	void remove ( ) { sl . size -- ; if ( sl . first == this ) sl . first = next ; else prev . next = next ; if ( sl . last == this ) sl . last = prev ; else next . prev = prev ; }
tr	7	public Vector3f setAdd ( final Vector3f vector1 , final Vector3f vector2 ) { return setAdd ( vector1 . x , vector1 . y , vector1 . z , vector2 . x , vector2 . y , vector2 . z ) ; }
tr	3	public void setXzView ( boolean value ) { this . xzView = value ; }
tr	1	public int weight ( ) { return weight ; }
tr	2	public static int getMailCount ( ) { return mailCount ; }
tr	7	@ Override public void cerrarOrdenCompra ( ) { System . out . println ( "Orden codigo " + ordenCompra . getCodigo ( ) + " en estado cerrado" ) ; }
tr	7	private void setupComponents ( ) { frame . setLayout ( new BorderLayout ( ) ) ; frame . add ( mainPane , BorderLayout . CENTER ) ; }
tr	10	@ Test public void testFromString ( ) { final ChessBoard board2 = ChessBoard . fromString ( "rbkqn/ppppp/5/5/PPPPP/NQKBR" ) ; assertEquals ( 5 , board2 . getNumberOfColumns ( ) ) ; assertEquals ( 6 , board2 . getNumberOfRows ( ) ) ; assertEquals ( "rbkqn/ppppp/5/5/PPPPP/NQKBR" , board2 . toString ( ) ) ; final ChessBoard board3 = ChessBoard . fromString ( "rbkqn/ppppp/5/2P2/PP1PP/NQKBR" ) ; assertEquals ( 5 , board2 . getNumberOfColumns ( ) ) ; assertEquals ( 6 , board2 . getNumberOfRows ( ) ) ; assertEquals ( "rbkqn/ppppp/5/2P2/PP1PP/NQKBR" , board3 . toString ( ) ) ; }
tr	3	public BlankPOIToken ( POIQuestionMarkToken reverse ) { super ( reverse ) ; }
tr	7	public JSONArray put ( double value ) throws JSONException { double d = new double ( value ) ; JSONObject . testValidity ( d ) ; put ( d ) ; return this ; }
tr	1	protected void execute ( ) { }
tr	6	public void setAmount_sold ( String value ) { otapiJNI . TradeDataNym_amount_sold_set ( swigCPtr , this , value ) ; }
tr	4	@ Override public int getY ( ) { return location . y ; }
tr	4	public TileWoodWall ( ) { super ( TileID . WOOD_WALL ) ; isSolid = true ; }
tr	6	@ Override protected PuzzleCellEditor createCellEditor ( Options options ) { return new SamuraiPuzzleCellEditor ( options ) ; }
tr	2	public float getMinDesolvPolar ( ) { return minDesolvPolar ; }
tr	7	public String serialize ( Object o ) throws IOException { return o == null ? "" : format . format ( ( Date ) o ) ; }
tr	4	@ Override public void mouseExited ( EngineMouseMoveEvent event ) { }
tr	4	public void removeVertex ( Vertex point ) { vertices . removeVertex ( point ) ; }
tr	10	private void jSlider8StateChanged ( javax . swing . event . ChangeEvent evt ) { jTextField11 . setText ( jSlider8 . getValue ( ) / 100 + "." + jSlider8 . getValue ( ) % 100 ) ; }
tr	8	public static void main ( String [ ] arg ) { for ( int i = 0 ; i < SIZE ; i ++ ) { exec . execute ( new SerialChecker ( ) ) ; } }
tr	3	public void setParam ( boolean b ) { value = b ; }
tr	1	private HttpResponse ( ) { }
tr	10	private static void setupAnalyzer ( ) throws IOException , TesseractException { mediator = ImageAnalyzerFactory . createFactory ( new File ( "." ) ) ; analyzer = mediator . createImageAnalyzer ( image ) ; }
tr	1	public static final int StateInit ( ) { return 0 ; }
tr	7	@ Override public void write ( String [ ] fieldnames , Object [ ] values ) throws IOException { write ( null , fieldnames , values ) ; }
tr	2	public void setEast ( boolean east ) { this . east = east ; }
tr	6	public String rReadConsole ( Rengine arg0 , String arg1 , int arg2 ) { return null ; }
tr	10	public static int checkDuplicatesBruteForce ( int [ ] a ) { int n = a . length ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { count ++ ; if ( a [ i ] == a [ j ] && i != j ) { System . out . println ( "No.of comparisons BruteForce" + count ) ; return a [ i ] ; } } } System . out . println ( "No.of comparisons BruteForce" + count ) ; return - 1 ; }
tr	7	public RequestToken getOAuthRequestToken ( String callback_url ) throws WeiboException { return http . getOauthRequestToken ( callback_url ) ; }
tr	7	@ Override public String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( "{" ) ; if ( getPolicyNames ( ) != null ) sb . append ( "PolicyNames: " + getPolicyNames ( ) + " " ) ; sb . append ( "}" ) ; return sb . toString ( ) ; }
tr	1	public NullObjectInsertionException ( ) { this ( "Null object cannot be added" ) ; }
tr	4	private static ByteBuffer prepareTransportBuffer ( byte [ ] data ) { return ByteBuffer . wrap ( data ) ; }
tr	6	public double timesRestart ( Character c ) { if ( restart . containsKey ( c ) ) { return restart . getValue ( c ) ; } else { return 0 ; } }
tr	7	public void add ( DependencyInstance gold , DependencyInstance predict , boolean evalWithPunc ) { evaluateDependencies ( gold , predict , evalWithPunc ) ; evaluateSemanticLabeling ( gold , predict ) ; }
tr	8	public List < Entry > getPiecesForFile ( Path file ) { if ( file == null ) { throw new NullPointerException ( ) ; } return filesToPieces . get ( file ) ; }
tr	5	public Hashtable < Integer , Person > getDictionaryOfCharacters ( ) { return settlers ; }
tr	9	@ Override public Dimension getWindowSize ( ) { return new Dimension ( ( STATUS_BAR_MAP_WIDTH + zone . getBlockSizeX ( ) ) * TILE_X , zone . getBlockSizeY ( ) * TILE_Y ) ; }
tr	9	public void setUp ( ) { task1 = new Task ( "task1" , user1 , user2 ) ; task2 = new Task ( "task2" , user1 , user2 ) ; task3 = new Task ( "task3" , user1 , user2 ) ; task4 = new Task ( "task4" , user1 , user2 ) ; task5 = new Task ( "task5" , user1 , user2 ) ; }
tr	8	public Buff ( JSONObject json ) throws JSONException { if ( json != null ) { this . skillID = new Integer ( json . getString ( "skill_id" ) ) ; this . description = json . getString ( "description" ) ; } else { this . skillID = null ; this . description = null ; } }
tr	6	public IntegerSetting ( final String name_ , final String title , final Integer initValue ) { this ( name_ , title , initValue , null , null ) ; }
tr	7	@ Override public List < String > getGroupInheritance ( String group ) { return plugin . config . getGroupInheritance ( group ) ; }
tr	3	@ BeforeMethod public void setUpMethod ( ) throws Exception { }
tr	2	public void setX ( float x ) { this . x = x ; }
tr	7	public static void main ( String [ ] args ) { MeasurementVertices m = new MeasurementVertices ( ) ; m . readValuesFromUser ( ) ; m . execute ( ) ; }
tr	3	public Seance getSeance ( ) { return seance ; }
tr	4	public Client ( Thread . UncaughtExceptionHandler h ) { this . h = h ; }
tr	6	public void imprimirPontuacoes ( Jogador brancas , Jogador pretas ) { imprimirLinha ( ":: Pontua\u00E7\u00E3o dos jogadores" ) ; imprimirLinha ( ":: -----------------------" ) ; imprimirLinha ( ":: " + getDescricaoPecasCapturadas ( brancas ) ) ; imprimirLinha ( ":: " + getDescricaoPecasCapturadas ( pretas ) ) ; }
tr	6	public ElGamalCipher ( BigInteger q , BigInteger g , BigInteger y , BigInteger x ) { this . q = q ; this . g = g ; this . y = y ; this . x = x ; }
tr	9	public double getTime ( int R , int T , int Vrat , int Vcat ) { double ratDist = Math . min ( Math . PI * R , T * Vrat ) ; if ( Vrat >= Vcat ) return - 1.0 ; else { return ratDist / ( Vcat - Vrat ) ; } }
tr	3	protected FalloverTargetingStrategy ( TargetingStrategy ... strategies ) { this . strategies = strategies ; }
tr	3	public GameVector PlusX ( ) { ++ this . xIndex ; return this ; }
tr	2	public boolean isEmpty ( ) { return N == 0 ; }
tr	1	public void init ( ) { }
tr	4	protected void handleConstantValue ( final Object value ) { throw newUnimplementedException ( ) ; }
tr	4	public List < Accession > getCore ( ) { return core ; }
tr	7	private static SchemeObject createEmptyList ( ) { SchemeObject obj = new SchemeObject ( ) ; obj . mData = null ; obj . mType = type . EMPTY_LIST ; return obj ; }
tr	2	public void setSensitivity ( float sensitivity ) { this . sensitivity = sensitivity ; }
tr	7	public void setLen ( Integer len ) { Integer oldLen = this . len ; this . len = len ; propertyChangeSupport . firePropertyChange ( PROP_LEN , oldLen , len ) ; }
tr	1	public DecodeMtxToINS ( ) { }
tr	6	public void init ( String map ) { this . initFromString ( new Loader ( ) . loadMap ( map ) ) ; }
tr	1	private FileChooserFactory ( ) { super ( ) ; }
tr	4	public Matrix m ( ) { return matrix [ top ] ; }
tr	7	public void winActions ( ) { if ( recorder != null ) recorder . fillGamePlayMetrics ( ( RandomLevel ) level ) ; marioComponent . win ( ) ; }
tr	4	public void setEnabled ( boolean enabled ) { super . setEnabled ( enabled ) ; comboBox . setEnabled ( enabled ) ; if ( spinner != null ) { spinner . setEnabled ( enabled ) ; } }
tr	3	public String getReturn ( ) { return _return ; }
tr	8	public int numCoreArgs ( ) { int cnt = 0 ; for ( int i = 0 , n = arglbids . length ; i < n ; ++ i ) if ( arglbids [ i ] >= 0 && arglbs [ i ] . length ( ) < 3 && arglbs [ i ] . startsWith ( "A" ) ) ++ cnt ; return cnt ; }
tr	1	public VariableAppearance ( ) { }
tr	5	@ Override public void titleChanged ( MediaPlayer mp , int i ) { }
tr	9	private boolean printErrMsg ( String msg ) { System . out . println ( ) ; connection . printResponse ( ) ; System . err . println ( msg ) ; return false ; }
tr	7	public static void fun4 ( ScriptObjectMirror person ) { System . out . println ( "Full Name is: " + person . callMember ( "getFullName" ) ) ; }
tr	6	public List < Integer > reverse ( List < Integer > list ) { List < Integer > reversed = new ArrayList < Integer > ( ) ; reverse ( list , reversed ) ; return reversed ; }
tr	5	public void request ( ) { lobby . joinGame ( view . getSelectedRow ( ) ) ; }
tr	1	public Cuenta ( ) { }
tr	9	public void setFieldValue ( _Fields field , Object value ) { switch ( field ) { case SUCCESS : if ( value == null ) { unset_success ( ) ; } else { set_success ( ( Integer ) value ) ; } break ; } }
tr	7	protected String mapKeyCode ( int keycode , int modifiers ) { return getTerminal ( ) . getKeyMapper ( ) . map ( keycode , modifiers ) ; }
tr	1	public boolean isLast ( ) { return isLast ; }
tr	9	@ Override public String toString ( ) { if ( pad_bits == 0 ) { return "#Bin<" + bin . length + ">" ; } if ( bin . length == 0 ) { throw new java . lang . IllegalStateException ( "Impossible length" ) ; } return "#Bin<" + bin . length + "-" + pad_bits + ">" ; }
tr	7	public NFAState ( ) { super ( NFA . this , getAutoName ( ) + Integer . toString ( states . size ( ) , 10 ) ) ; }
tr	6	private void txtGradeActionPerformed ( java . awt . event . ActionEvent evt ) { }
tr	4	public static void setNombre ( String mNombre ) { Conexion . mNombre = mNombre ; }
tr	9	@ Override public boolean equals ( Object other ) { if ( other == null ) { return false ; } if ( other == this ) { return true ; } if ( other . getClass ( ) . equals ( this . getClass ( ) ) ) { DayMonthInYear otherDayOfMonth = ( DayMonthInYear ) other ; return this . day == otherDayOfMonth . day && this . month == otherDayOfMonth . month ; } return false ; }
tr	9	@ Override public int compare ( Course course1 , Course course2 ) { if ( sortOrder == SortOrder . ASCENDING ) { if ( course1 . getStudents ( ) < course2 . getStudents ( ) ) { return - 1 ; } else if ( course1 . getStudents ( ) == course2 . getStudents ( ) ) { return 0 ; } else { return 1 ; } } else { if ( course1 . getStudents ( ) < course2 . getStudents ( ) ) { return 1 ; } else if ( course1 . getStudents ( ) == course2 . getStudents ( ) ) { return 0 ; } else { return - 1 ; } } }
tr	7	protected SimpleAttributeSet createAttributes ( ) { SimpleAttributeSet res = super . createAttributes ( ) ; res . addAttribute ( Constants . ATTRIBUTE_REPLACED_CONTENT , content ) ; return res ; }
tr	9	private void survivalSelection ( ) { sortPopulation ( ) ; while ( population . size ( ) > ( popSize + RANDOM_SURVIVAL ) ) { population . remove ( population . size ( ) - 1 ) ; } while ( population . size ( ) > popSize ) { population . remove ( rg . nextInt ( population . size ( ) - 1 ) + 1 ) ; } }
tr	1	public boolean isUp ( ) { return isUp ; }
tr	2	public static boolean isActive ( ) { return active ; }
tr	5	private void enqueueCommands ( String command ) { queue . offer ( command ) ; }
tr	9	SyntaxTreeNode ( String name , SyntaxTreeNode node ) { this . rule = node . rule ; this . ruleName = name ; this . token = node . token ; this . children = node . children ; this . range = node . range ; }
tr	10	public String [ ] splitByCommas ( String rowToParse ) { StringTokenizer tokenizer = new StringTokenizer ( rowToParse , " " ) ; String [ ] tokens = new String [ tokenizer . countTokens ( ) ] ; for ( int i = 0 ; i < tokens . length ; i ++ ) { tokens [ i ] = tokenizer . nextToken ( ) ; } return tokens ; }
tr	2	int getBlockSize ( ) { return topFrame ( ) . getBlockSize ( ) ; }
tr	5	public void setExecuted ( java . util . Calendar executed ) { this . executed = executed ; }
tr	4	public List < City > getCities ( ) { return myCities ; }
tr	7	public static MinObject newArray ( MinObject [ ] items ) { ArrayList < MinObject > array = new ArrayList < MinObject > ( ) ; Collections . addAll ( array , items ) ; return newArray ( array ) ; }
tr	10	public double getTotalAmount ( Calendar from , Calendar to ) { double sum = 0 ; for ( int index = 0 ; index < poster . size ( ) ; index ++ ) { sum += ( ( Post ) poster . elementAt ( index ) ) . getTotalAmount ( from , to ) ; } return sum ; }
tr	4	public void set_block_id ( String in ) { _block_id = in ; }
tr	6	@ Override public Move getMove ( DraughtsState s ) { throw new UnsupportedOperationException ( "should never be called!!!" ) ; }
tr	9	public Action poolCurrentAction ( ) { if ( actions . isEmpty ( ) ) { return null ; } Action next = actions . poll ( ) ; if ( loop ) { next . reset ( ) ; actions . add ( next ) ; } return next ; }
tr	2	public void setPreserveEscapeString ( boolean preserveEscapeString ) { this . preserveEscapeString = preserveEscapeString ; }
tr	3	public LearningDataModel getLearningData ( ) { return learningData ; }
tr	10	@ Override public void dispose ( ) { for ( ObjectMap < String , Object > entry : data . values ( ) ) { for ( Object resource : entry . values ( ) ) { if ( resource instanceof Disposable ) ( ( Disposable ) resource ) . dispose ( ) ; } } }
tr	8	@ Override public V get ( K key ) { if ( key == null ) { throw new IllegalArgumentException ( ) ; } int index = index ( key ) ; return table [ index ] == null ? null : table [ index ] . get ( key ) ; }
tr	8	public int getSize ( ) { int ret = restart . size ( ) ; for ( State st : next . values ( ) ) { ret += st . getSize ( ) + 1 ; } return ret ; }
tr	5	public void setPieceX ( int x ) { if ( ! m_dropping ) { m_pieceX = x ; repaint ( ) ; } }
tr	6	public ColorComboBoxEditor ( Color initialColor ) { editor = new JButton ( "" ) ; editor . setBackground ( initialColor ) ; }
tr	1	private void preferences ( ) { }
tr	5	public UserDaoImpl ( final java . sql . Connection userConn ) { this . userConn = userConn ; }
tr	8	@ Override public void clearView ( ) { reference . getSubviews ( ) . remove ( title ) ; reference . setRemoveEntityState ( false ) ; reference . clearCurrentView ( ) ; title = null ; reference = null ; }
tr	2	public double getDomesticMig2010 ( ) { return domesticMig2010 ; }
tr	2	public int getT_tap ( ) { return t_tap ; }
tr	3	public static long getTime ( ) { return System . nanoTime ( ) ; }
tr	9	public String encode ( String plain ) { char [ ] [ ] block = build_block ( plain , - 1 , period , 0 ) ; String cipher_text = read_block ( block , key ) ; return cipher_text ; }
tr	10	public ArrayList < ArrayList < double >> buildCommentsVector ( double [ ] [ ] matrix , int numOfComments ) { ArrayList < ArrayList < double >> commentsVectors = new ArrayList < ArrayList < double >> ( ) ; ArrayList < double > vector ; for ( int i = 0 ; i < numOfComments ; i ++ ) { vector = new ArrayList < double > ( ) ; for ( int j = 0 ; j < numOfWords ; j ++ ) vector . add ( ( double ) matrix [ j ] [ i ] ) ; vector . add ( ( double ) 1 ) ; commentsVectors . add ( vector ) ; } return commentsVectors ; }
tr	3	public String getJarFileName ( ) { return jarFileName ; }
tr	10	@ Override protected void parse ( URL source , String data ) { document = Parsers . parseHTML ( data , source . toExternalForm ( ) ) ; }
tr	4	public AssignGate ( String name ) { super ( "assign" , name , new OneBusOutOneBusIn ( ) ) ; }
tr	7	private static byte [ ] constructorValueHelper ( byte [ ] left , byte [ ] right ) { byte [ ] value = new byte [ left . length + right . length ] ; for ( int i = 0 ; i < left . length ; i ++ ) { value [ i ] = left [ i ] ; } for ( int j = left . length ; j < value . length ; j ++ ) { value [ j ] = right [ j - left . length ] ; } return value ; }
tr	8	@ XmlElementDecl ( namespace = "com/firstdata/Merchant/gmfV3.10" , name = "SttlmDate" ) public JAXBElement < String > createSttlmDate ( String value ) { return new JAXBElement < String > ( _SttlmDate_QNAME , String . class , null , value ) ; }
tr	5	public boolean isOpen ( ) { assert ( readystate == READYSTATE . OPEN ? ! flushandclosestate : true ) ; return readystate == READYSTATE . OPEN ; }
tr	4	public void setModel ( ExternalBFieldModel value ) { this . model = value ; }
tr	6	public scanner ( ) throws java . io . IOException { this ( System . in ) ; }
tr	7	@ Override public AcceptEntityBuilder toast ( String message , String title ) { return builder . toast ( message , title ) ; }
tr	6	public Entry ( Student . Grade grade , String message ) { this . grade = grade ; this . message = message ; }
tr	3	public String getStoreg ( ) { return storeg ; }
tr	6	public static < T > Iterable < Pair < T >> getCombinationsNonReflexive ( Iterable < T > objects ) { return getCombinations ( objects , false ) ; }
tr	2	public byte nextByte ( ) { return ( byte ) ( next ( 8 ) ) ; }
tr	3	public Game getGame ( ) { return this . game ; }
tr	1	public DoubtfulMoveToken ( ) { }
tr	5	public synchronized void togglePause ( ) { if ( pause == 0 ) { pause = 999999 ; } else { pause = 0 ; if ( inpause ) { gcodepainter . interrupt ( ) ; } } }
tr	6	@ Override public String getFileName ( String abspath ) { return new File ( abspath ) . getName ( ) ; }
tr	10	public boolean contientClient ( int id ) { Client client ; for ( int i = 0 , l = clients . size ( ) ; i < l ; i ++ ) { client = clients . get ( i ) ; if ( client . getConnecteId ( ) == id ) { return true ; } } return false ; }
tr	3	public EndGameException ( String string ) { super ( string ) ; }
tr	5	public PermissionDeniedException ( String message , Throwable cause ) { super ( message , cause ) ; }
tr	7	public InstructorPanel ( ) { name = new JLabel ( "Name: " ) ; phoneNumber = new JLabel ( "Phone: 555-555-5555" ) ; dateOfSubmission = new JLabel ( "Submitted: " ) ; preferredDays = new JLabel ( "Preferred Days: " ) ; preferredCoursesLabel = new JLabel ( "Preferred Courses: " ) ; }
tr	7	@ Override public void onFXThreadSuccess ( Backup backup ) { mBackup = backup ; mStage . close ( ) ; }
tr	4	public void setShipVia ( String value ) { this . shipVia = value ; }
tr	7	public void setPosition ( final float x , final float y , final float z ) { affineTransform . setTranslation ( x , y , z ) ; updateTranslation = true ; }
tr	8	public String queryWQL_VALUES ( String startNodeURI , String type , String path ) { deb_print ( "\n[QUERY WQL_VALUES]___________________________________" ) ; return sendSSAPMsg ( this . xmlTools . queryWQL_VALUES ( startNodeURI , type , path ) ) ; }
tr	10	@ Test public void addNullValue ( ) { AVLTree < Integer , Integer > b = new AVLTree < Integer , Integer > ( ) ; try { b . add ( 1 , null ) ; fail ( IllegalArgumentException . class ) ; } catch ( IllegalArgumentException e ) { } catch ( Exception e ) { fail ( IllegalArgumentException . class , e ) ; } }
tr	1	public CSha1Hash ( ) { }
tr	10	private static byte [ ] constructorHelperShift ( byte color1 , byte color2 , byte color3 , int index1 , int index2 , int index3 ) { byte [ ] colors = new byte [ ValueDefinitions . VALUE_COUNT_MAX + 1 ] ; colors [ index1 ] = color1 ; colors [ index2 ] = color2 ; colors [ index3 ] = color3 ; return colors ; }
tr	2	private boolean isPersistent ( ) { return persistent ; }
tr	5	private static void swap ( char [ ] chars , int i , int j ) { char tmp = chars [ i ] ; chars [ i ] = chars [ j ] ; chars [ j ] = tmp ; }
tr	6	public TestListNotification ( HashMap < String , Object > applyNotificationTo , boolean silent ) { this . applyNotificationTo = applyNotificationTo ; this . silent = silent ; }
tr	10	private void backup ( File file ) { new File ( file . getAbsolutePath ( ) ) . renameTo ( new File ( file . getParentFile ( ) + File . separator + BACKUP_PREFIX + file . getName ( ) + BACKUP_SUFFIX ) ) ; }
tr	7	public boolean addAll ( Collection < T > metadataList ) { for ( T metadata : metadataList ) { add ( metadata ) ; } return ! metadataList . isEmpty ( ) ; }
tr	10	public static void main ( String [ ] args ) { int [ ] A = { 6 , 7 , 8 , 9 , 10 , 1 , 2 , 3 , 4 , 5 } ; int [ ] A1 = { 3 , 3 , 4 , 5 , 5 , 1 , 1 , 2 } ; int index = rotatedSearch ( A1 , 4 ) ; if ( index == - 1 ) System . out . println ( "element not found" ) ; else System . out . println ( "index of the element is: " + index ) ; }
tr	8	@ XmlElementDecl ( namespace = "com/firstdata/Merchant/gmfV3.10" , name = "HBINTblVer" ) public JAXBElement < String > createHBINTblVer ( String value ) { return new JAXBElement < String > ( _HBINTblVer_QNAME , String . class , null , value ) ; }
tr	9	public static void disconnect ( ) throws CardException , FileNotFoundException , IOException { card . disconnect ( false ) ; Logger . log ( "Cartao: " + card . toString ( ) ) ; card = null ; terminal = null ; }
tr	3	public String getFilesystemName ( ) { return fFileName ; }
tr	8	@ Test public void min_mth_should_return_first_element ( ) { DoubleLinkedList list = new DoubleLinkedList ( ) ; list . add ( 1 ) ; list . add ( 2 ) ; assertEquals ( 1 , utils . min ( list ) ) ; }
tr	1	protected void initialize ( ) { }
tr	7	public case ( final List < String > words ) { this . words = words ; pairs = Lists . newArrayList ( ) ; pairWords ( ) ; }
tr	4	@ Override public String toString ( ) { return text ; }
tr	2	public void setLooping ( boolean looping ) { this . looping = looping ; }
tr	4	public void setCardGrp ( CardGrp value ) { this . cardGrp = value ; }
tr	6	@ Test public void testApplesAndOranges ( ) { Course courseA = new Course ( "CMSC" , "120" ) ; assertFalse ( courseA . equals ( "CMSC-120" ) ) ; }
tr	1	public Zodiac ( ) { super ( "Zodiac" , 2 ) ; }
tr	10	@ Override public void paint ( Graphics g ) { super . paint ( g ) ; int fila = 0 ; for ( int rojo = 0 ; rojo <= 255 ; rojo ++ ) { Color col = new Color ( rojo , 0 , 0 ) ; g . setColor ( col ) ; g . drawLine ( 0 , fila , 800 , fila ) ; fila ++ ; } }
tr	8	public static void loge ( String msg ) { if ( error ) { System . out . println ( "E: " + getCallerInfo ( ) + " msg: " + msg ) ; } }
tr	9	public void close ( ) { setState ( State . DISCONNECTED ) ; sendQ . clear ( ) ; try { conn . close ( ) ; } catch ( Exception e ) { } }
tr	9	@ Override public void quadTo ( float x1 , float y1 , float x2 , float y2 ) { out . quadTo ( x1 * sx , y1 * sy , x2 * sx , y2 * sy ) ; }
tr	4	public PatternGroupStructure ( int nameGroup , Pattern pattern ) { this ( 0 , nameGroup , pattern ) ; }
tr	9	private LayeredMap makeDungeonMap ( ) { Properties props = new Properties ( ) ; props . setProperty ( "map_layers" , "4" ) ; props . setProperty ( "roomGapHoriz" , "7" ) ; props . setProperty ( "roomGapVert" , "3" ) ; props . setProperty ( "floors" , ".:s" ) ; props . setProperty ( "room_floors" , ".:s" ) ; props . setProperty ( "corridor_floors" , ".:s" ) ; Dungeon dungeon = new Dungeon ( "" , props ) ; LayeredMap map = dungeon . generate ( 65 , 40 ) ; return map ; }
tr	7	@ Override public RejectPageBuilder alertIf ( boolean condition , AlertIfHandler then ) { return builder . alertIf ( condition , then ) ; }
tr	4	public String getLogName ( ) { return CommunicatorTest . class . getName ( ) ; }
tr	7	public int getArrayIndex ( String f , String [ ] sa ) { for ( int i = 0 ; i < sa . length ; i ++ ) { if ( sa [ i ] . equals ( f ) ) return i ; } return 0 ; }
tr	8	private void init ( ) { this . function = new Func ( ) ; this . submitB = new JButton ( ) ; this . staff = new Vector ( ) ; this . function . fillStaff ( staff ) ; }
tr	7	private void miEditarActionPerformed ( java . awt . event . ActionEvent evt ) { desbloquearCampos ( ) ; }
tr	9	private static void print ( int [ ] array , String string ) { System . out . println ( string + ":" ) ; for ( int j = 0 ; j < array . length ; j ++ ) { System . out . print ( array [ j ] ) ; if ( j < array . length - 1 ) System . out . print ( "  " ) ; } System . out . println ( ) ; }
tr	4	public void setFullname ( String value ) { this . fullname = value ; }
tr	3	public String getCode ( ) { return code ; }
tr	1	public EstadoEditable ( ) { }
tr	6	public void adjustBrightness ( BufferedWrapper bw , int adjustQuantity ) { Brightness . AdjustBrightness ( bw , adjustQuantity ) ; }
tr	1	public SendEvent ( ) { super ( ) ; }
tr	7	@ Override public Vector3 L ( ShadeRec sr ) { return material . getLe ( sr ) ; }
tr	9	public Object invoke ( ) { try { return method . invoke ( me , args ) ; } catch ( Exception e ) { throw Lang . uncheck ( e ) ; } }
tr	6	public double removeKey ( E key ) { double d = entries . remove ( key ) ; return ( d == null ? 0.0 : d ) ; }
tr	7	@ Override public void actionPerformed ( ActionEvent arg0 ) { new PageController ( logger , sourceButton ) ; }
tr	4	public double getDouble ( int columnIndex ) throws SQLException { return rs . getDouble ( columnIndex ) ; }
tr	6	public final Matrix rotateZ ( double theta ) { makeRotationMatrix ( tmp2 , 0 , 1 , theta ) ; return preMultiply ( tmp2 ) ; }
tr	2	public int getPeso ( ) { return peso ; }
tr	5	private SET_NumericVariable ( NumericVariable variable , NumericExpression expression ) { this . variable = variable ; this . expression = expression ; }
tr	9	@ Override public boolean equals ( Object o ) { if ( this == o ) return true ; if ( o == null || getClass ( ) != o . getClass ( ) ) return false ; Rectangular that = ( Rectangular ) o ; if ( length != that . length ) return false ; return width == that . width ; }
tr	4	public void setAcceptingStates ( Set < State > acceptingStates ) { this . acceptingStates = acceptingStates ; }
tr	8	@ Override public void writeInteger ( final int value ) { byte [ ] data = new byte [ 4 ] ; if ( order == ByteOrder . LITTLE_ENDIAN ) { data [ 0 ] = ( byte ) value ; data [ 1 ] = ( byte ) ( value >>> 8 ) ; data [ 2 ] = ( byte ) ( value >>> 16 ) ; data [ 3 ] = ( byte ) ( value >>> 24 ) ; } else { data [ 3 ] = ( byte ) ( value >>> 32 ) ; data [ 2 ] = ( byte ) ( value >>> 40 ) ; data [ 1 ] = ( byte ) ( value >>> 48 ) ; data [ 0 ] = ( byte ) ( value >>> 56 ) ; } write ( data ) ; }
tr	10	public void writeToFile ( String str ) { try { p . println ( str ) ; } catch ( Exception e ) { System . err . println ( "Error writing to file" ) ; e . printStackTrace ( ) ; } }
tr	1	public int [ ] getWarps ( ) { return new int [ ] { 0 , 0 , 0 , 0 } ; }
tr	6	@ Override public int getInt ( long index , int offset ) { assert offset <= structLength - 4 : offset ; return ohm . getInt ( index * structLength + offset ) ; }
tr	4	public LinkedBlockingQueue < Message > getMessageQueue ( ) { return messageQueue ; }
tr	9	public static void main ( String args [ ] ) { Subsets s = new Subsets ( ) ; int array [ ] = { 23 , 2 , 45 } ; int result [ ] = new int [ 3 ] ; boolean bits [ ] = new boolean [ 3 ] ; s . permutations ( array , bits , result , 2 ) ; }
tr	2	public void setId_etude ( int id_etude ) { this . id_etude = id_etude ; }
tr	8	protected void execute ( ) { if ( shooter . left . getD ( ) - accuracy > pos ) { shooter . set ( - holdVel ) ; } else if ( shooter . left . getD ( ) + accuracy < pos ) { shooter . set ( holdVel ) ; } else { shooter . set ( 0.0 ) ; } }
tr	4	public void setEBenExDt ( String value ) { this . eBenExDt = value ; }
tr	10	@ Override public Orientation getStepOrientation ( int lineIndex ) { switch ( lineIndex ) { case 0 : case 5 : return Orientation . DOWN_LEFT ; case 1 : case 6 : return Orientation . UP_LEFT ; case 2 : case 7 : return Orientation . CENTER ; case 3 : case 8 : return Orientation . UP_RIGHT ; case 4 : case 9 : return Orientation . DOWN_RIGHT ; default : return Orientation . NONE ; } }
tr	8	public Clause ( Iterator i , Clause c ) { this ( ) ; for ( Literal lit : c . literals ) { literals . add ( new Literal ( i , lit ) ) ; } }
tr	4	public boolean inGameStateNextFrame ( String state ) { return el . inGameStateNextFrame ( state ) ; }
tr	3	public void close ( ) throws IOException { is . close ( ) ; }
tr	8	public void checkServerTrusted ( X509Certificate chain [ ] , String authType ) throws CertificateException { this . x509CertificateChain = chain ; x509TrustManager . checkServerTrusted ( chain , authType ) ; }
tr	7	public List < ABObject > findPigsRealShape ( ) { if ( visionRealShape == null ) { visionRealShape = new VisionRealShape ( image ) ; } return visionRealShape . findPigs ( ) ; }
tr	4	@ Before public void setUp ( ) { undertest = new MedianStore ( ) ; }
tr	6	public static Hashtable < CallFrame , List < String >> getBridgeLines ( ) { return bridgeLines ; }
tr	2	@ Override public void handleGuiKeyInput ( ) { super . handleGuiKeyInput ( ) ; }
tr	6	Search ( String desc , T [ ] sorted , int [ ] keys ) { super ( desc , sorted ) ; this . keys = keys ; }
tr	7	public String getMCstring ( ) { String s = "" ; for ( int i = 0 ; i < mc . length ; i ++ ) { if ( mc [ i ] ) { s = s . concat ( "1" ) ; } else { s = s . concat ( "0" ) ; } } return s ; }
tr	6	@ Test ( expected = IndexOutOfBoundsException . class ) public void testIndexOutOfBoundsExceptionLong ( ) { s . getLongAt ( 100 ) ; }
tr	4	public void setJobStatus ( JobStatus status ) { jobStatus = status ; }
tr	1	public boolean hasMany ( ) { return hasMany ; }
tr	4	public final void addListener ( final NetTrainerListener listener ) { this . listener . add ( listener ) ; }
tr	8	@ Test public void STEEL_attacking_FLYING ( ) { assertEquals ( 1.0 , tc . getWeaknessResistance ( Type . STEEL , Type . FLYING ) , 0.0 ) ; }
tr	4	public static void main ( String [ ] args ) { print ( 4 ) ; }
tr	7	public static double L2Norm ( double [ ] a ) { double result = 0.0 ; for ( double d : a ) { result += Math . pow ( d , 2 ) ; } return Math . sqrt ( result ) ; }
tr	2	public final int getSolutionMemoryMegabytes ( ) { return this . solutionMemoryMegabytes ; }
tr	4	public Integer get ( String entityReference ) { return get ( entityReference , false ) ; }
tr	10	public static void main ( String [ ] args ) { float x = 1.3f ; float y = 1.8f ; System . out . println ( ( int ) ( x + y ) ) ; System . out . println ( ( int ) x + ( int ) y ) ; }
tr	7	@ Test public void shouldRightTrimStringsCorrectly ( ) throws UnsupportedEncodingException { assertEquals ( "" , BufferTools . trimStringRight ( "" ) ) ; assertEquals ( "" , BufferTools . trimStringRight ( " " ) ) ; assertEquals ( "TEST" , BufferTools . trimStringRight ( "TEST" ) ) ; assertEquals ( "TEST" , BufferTools . trimStringRight ( "TEST   " ) ) ; assertEquals ( "   TEST" , BufferTools . trimStringRight ( "   TEST" ) ) ; assertEquals ( "   TEST" , BufferTools . trimStringRight ( "   TEST   " ) ) ; assertEquals ( "TEST" , BufferTools . trimStringRight ( "TEST\t\r\n" ) ) ; assertEquals ( "TEST" , BufferTools . trimStringRight ( "TEST" + BufferTools . byteBufferToString ( new byte [ ] { 0 , 0 } , 0 , 2 ) ) ) ; }
tr	5	@ Override public void handleCustomerQueries ( ) { System . out . println ( "Handle job related queries" ) ; }
tr	3	public Job ( ActorID actorID ) { this . actorID = actorID ; }
tr	9	public void disconnect ( ) { Presence offline = new Presence ( Presence . Type . unavailable , "" , 1 , Presence . Mode . away ) ; xmpp_conn . sendPacket ( offline ) ; xmpp_conn . disconnect ( ) ; }
tr	4	public void writeSpace ( ) throws IOException { writer . write (   ) ; }
tr	10	public static void test ( String s ) { String - ; for ( int c = 0 ; c < s . length ( ) ; c ++ ) { for ( int i = 1 ; i <= s . length ( ) - c ; i ++ ) { - = s . substring ( c , c + i ) ; System . out . println ( - ) ; } } }
tr	6	@ Override public Auction update ( Integer id , Auction a ) { return null ; }
tr	6	public Material setColor ( double dr , double dg , double db ) { return setDiffuse ( dr , dg , db , 1 ) ; }
tr	2	@ Override public boolean isList ( ) { return false ; }
tr	2	public long getId ( ) { return id ; }
tr	7	public SoundSource setPitch ( float pitch ) { this . pitch = pitch ; AL10 . alSourcef ( source , AL10 . AL_PITCH , pitch ) ; return this ; }
tr	7	public static StringBuilder append ( StringBuilder sb , HackFilter ... filters ) { return append ( sb , Arrays . asList ( filters ) ) ; }
tr	3	public String getFullName ( ) { return fullName ; }
tr	6	public ItemPlayerHelp ( ) { super ( Material . MAGMA_CREAM ) ; this . setName ( ChatColor . DARK_GREEN + "Player Help" ) ; }
tr	6	@ Override public SimpleArithmeticalOperator resolve ( ) { return new SimpleArithmeticalOperator ( a . resolve ( ) . getValue ( ) + b . resolve ( ) . getValue ( ) ) ; }
tr	6	public boolean RemoveContact ( long nIndexContact ) { return otapiJNI . AddressBook_RemoveContact ( swigCPtr , this , removeRefContact ( nIndexContact ) ) ; }
tr	4	public AnalogInput ( Toucan toucan , int channel ) { this . toucan = toucan ; this . channel = channel ; }
tr	8	public MidnightRunWindow ( SDOManager manager , List < JShape > initShapes ) { this . manager = manager ; initComponents ( ) ; setShapes ( initShapes ) ; }
tr	5	public static String collectionToCommaDelimitedString ( Collection < ? > coll ) { return collectionToDelimitedString ( coll , " " ) ; }
tr	5	public Map < MappingField , Integer > getMap ( ) { return freezedMap ; }
tr	4	public Picture ( String source ) { load ( source ) ; }
tr	2	public void setZ ( int z ) { this . z = z ; }
tr	8	public static void main ( String [ ] args ) { cached ( ) ; nonCached ( ) ; cachedUnboxing ( ) ; nonCachedUnboxing ( ) ; npe ( ) ; }
tr	4	public ByteBuffer createBuffer ( ) { return ByteBuffer . allocate ( INITIAL_FAMESIZE ) ; }
tr	7	@ Override public void recordVisitAssessment ( String matriculation , UoGGrade grade , String description ) { }
tr	1	public boolean isTerminated ( ) { return false ; }
tr	6	public static SpotLight [ ] getSpotLights ( ) { SpotLight [ ] lights = new SpotLight [ spotLights . size ( ) ] ; return spotLights . toArray ( lights ) ; }
tr	7	protected int countNeighbours ( int col , int row ) { int c = 0 ; for ( int i = - 1 ; i < 2 ; i ++ ) { for ( int j = - 1 ; j < 2 ; j ++ ) { if ( ! ( i == 0 && j == 0 ) && getCell ( j + col , i + row ) ) { c ++ ; } } } return c ; }
tr	3	public static void sort ( Comparable [ ] array ) { }
tr	5	protected Map < String , Path > getFiles ( ) { return files ; }
tr	6	public Triangle ( MyPoint p1 , MyPoint p2 , MyPoint p3 ) { super ( p1 , p2 ) ; this . p3 = p3 ; calcSides ( ) ; }
tr	6	public Dimension getMaximumSize ( ) { return new Dimension ( this . getEditorPanelSize ( ) . width , Integer . MAX_VALUE ) ; }
tr	3	public void setSizeWithHead ( Integer sizeWithHead ) { this . sizeWithHead = sizeWithHead ; }
tr	5	public Set < Key > getKeys ( ) { return map . keySet ( ) ; }
tr	1	public AnchorLayout ( ) { super ( ) ; }
tr	8	@ Override public void addPostMoveChoices ( Player player , List < Choice > choices ) { super . addPostMoveChoices ( player , choices ) ; addChoices ( player , choices ) ; }
tr	2	public int getTestInt ( ) { return testInt ; }
tr	9	@ Override public Object handle ( List < ? extends Object > parameters ) { Object arg = parameters . get ( 0 ) ; if ( arg instanceof double ) return Math . round ( ( double ) arg ) ; if ( arg instanceof long ) return Math . round ( ( long ) arg ) ; return null ; }
tr	5	public boolean percolates ( ) { return uf . connected ( theBOTTOM , theTOP ) ; }
tr	7	public void insert ( Object value , int index ) { int space = index ; while ( rawget ( space ) != null ) space ++ ; while ( space != index ) rawset ( space , rawget ( -- space ) ) ; rawset ( space , value ) ; }
tr	6	@ Override public void exitCall_strlit ( @ NotNull DecafParser . Call_strlitContext ctx ) { }
tr	9	@ Test public void ShouldGetWordFor21 ( ) { int number = 21 ; NumberToWordTranslator translator = new NumberToWordTranslator ( ) ; String result = translator . GetWord ( number ) ; assert . assertEquals ( "twentyone" , result ) ; }
tr	10	public String [ ] getDisAssembly ( ) { String [ ] sDisAssembly = new String [ m_mainRoutine . length ( ) ] ; for ( int i = 0 ; i < sDisAssembly . length ; i ++ ) { Instruction instruction = m_mainRoutine . getInstruction ( i ) ; sDisAssembly [ i ] = instruction . toString ( ) ; } return sDisAssembly ; }
tr	8	public void goToLocation ( Component comp , int x , int y ) { goToLocation ( comp , new Rectangle ( x , y , comp . getWidth ( ) , comp . getHeight ( ) ) ) ; }
tr	8	@ Override protected void setUp ( ) throws Exception { weatherData = new WeatherData ( ) ; display = new CurrentConditionsDisplay ( ) ; weatherData . addObserver ( display ) ; }
tr	5	private FileIterator ( File start ) { files . add ( start ) ; }
tr	1	public int numAnswers ( ) { return 1 ; }
tr	4	public List < ErrorData > getError ( ) { return error ; }
tr	3	public Authority_Service ( ) { super ( WSDL_LOCATION , SERVICE ) ; }
tr	1	public VertexParser ( ) { }
tr	10	public SaploFuture < boolean > relatedGroupsAsync ( final SaploText saploText ) { return new SaploFuture < boolean > ( es . submit ( new Callable < boolean > ( ) { public boolean call ( ) throws SaploClientException { relatedGroups ( saploText ) ; return true ; } } ) ) ; }
tr	1	public TabFrame ( ) { }
tr	6	public Currency getCurrency ( ) { if ( ! isA ( VariantCurrency ) ) illegal ( "getCurrency" , "VariantCurrency" ) ; return ( Currency ) value ; }
tr	9	public int checkHorizontalLinePieces ( int row , Symbol sym ) { int flag = 0 ; int column = 0 ; while ( column < board . length ) { if ( board [ row ] [ column ] != null && board [ row ] [ column ] . getSym ( ) == sym ) column += 1 ; else { flag = - 1 ; break ; } } return flag ; }
tr	2	public void setPos ( int pos ) { this . pos = pos ; }
tr	4	public Quest ( String name ) { setCurrentStage ( 0 ) ; this . name = name ; }
tr	6	public Cell ( boolean [ ] direction ) { this . east = direction [ 0 ] ; this . south = direction [ 1 ] ; this . west = direction [ 2 ] ; this . north = direction [ 3 ] ; }
tr	10	@ Override public GameQuery query ( GameQuery q ) { return playHandler . query ( q . setState ( game . getState ( ) . setHand ( getHand ( ) ) ) ) ; }
tr	7	@ Override public DataEntry clone ( ) { DataEntry retval = new DataEntry ( this . x . clone ( ) , this . y ) ; retval . extra = this . extra ; return retval ; }
tr	3	private void setPositionForCase2 ( int [ ] [ ] position , int padding ) { position [ 0 ] [ 0 ] = 0 + padding ; position [ 0 ] [ 1 ] = 0 ; position [ 1 ] [ 0 ] = 0 + padding ; position [ 1 ] [ 1 ] = 1 ; position [ 2 ] [ 0 ] = 1 + padding ; position [ 2 ] [ 1 ] = 1 ; position [ 3 ] [ 0 ] = 2 + padding ; position [ 3 ] [ 1 ] = 1 ; }
tr	4	public static boolean isLeftPunc ( char c ) { return LeftPunc . contains ( c ) ; }
tr	10	public static void closeQuietly ( Closeable cl ) { if ( cl != null ) { try { cl . close ( ) ; } catch ( Throwable t ) { LogFactory . getLog ( IOUtils . class ) . error ( "Problem closing a source or destination." , t ) ; } } }
tr	1	public TSquare ( ) { }
tr	4	public void SetTemperature ( ) { System . out . println ( "Hot tub temperature set" ) ; }
tr	4	public TimerThread ( Timeable what , int howOften ) { this ( what , howOften , - 1 ) ; }
tr	10	@ Override public void dispell ( ) { for ( Modifier mod : mods ) { if ( mod . isDispellable ( ) ) { if ( mod . isTemporary ( ) ) { modTotal -= mod . getTotal ( ) ; } mods . remove ( mod ) ; } } }
tr	3	@ Override public String toString ( ) { return toString ( 0 ) ; }
tr	10	public void playAudio ( Applet applet , String clipid ) { if ( clipstriggered . containsKey ( clipid ) ) return ; clipstriggered . put ( clipid , "yes" ) ; playAudio ( applet , "_unnamed" + unnamedchnr , clipid , false ) ; unnamedchnr = ( unnamedchnr + 1 ) % nr_unnamedch ; }
tr	9	public static void main ( String [ ] args ) { System . out . println ( byte . MIN_VALUE ) ; System . out . println ( byte . MAX_VALUE ) ; System . out . println ( short . MIN_VALUE ) ; System . out . println ( short . MAX_VALUE ) ; System . out . println ( Integer . MIN_VALUE ) ; System . out . println ( Integer . MAX_VALUE ) ; System . out . println ( long . MIN_VALUE ) ; System . out . println ( long . MAX_VALUE ) ; }
tr	9	@ Test public void testAddTags ( ) { final Document document = this . documents [ 0 ] ; document . addTag ( "baby" ) ; document . addTag ( "cats" ) ; assertTrue ( document . hasTag ( "baby" ) ) ; assertTrue ( document . hasTag ( "cats" ) ) ; assertFalse ( document . hasTag ( "fragrance" ) ) ; }
tr	9	@ Test public void testPlayerLightGrenadeOnRightDown ( ) throws InvalidActionException { new MoveRightDown ( ) . doAction ( playerLightGrenade , gridLightGrenade ) ; assertEquals ( - 1 , playerLightGrenade . getRemainingTurns ( ) ) ; }
tr	5	public int paint ( Graphics g ) { return draw ( g , text ) ; }
tr	4	@ Column ( name = "CATEGORY_ID" ) public long getCategoryId ( ) { return categoryId ; }
tr	6	public int optInt ( int index , int defaultValue ) { try { return getInt ( index ) ; } catch ( Exception e ) { return defaultValue ; } }
tr	5	public double mag ( ) { return Math . sqrt ( x * x + y * y ) ; }
tr	5	public void setNama ( String nama ) { namaTextField . setText ( nama ) ; }
tr	6	private Field getField ( String modelField ) { return getModelFields ( ) . get ( modelField ) ; }
tr	10	@ Test public void testMyAskListSameValue ( ) { MyAskList myAskList = new MyAskList ( ) ; myAskList . add ( 30 , 40 , 100 , Time . valueOf ( "12:00:00" ) ) ; myAskList . add ( 32 , 40 , 100 , Time . valueOf ( "12:30:00" ) ) ; myAskList . add ( 34 , 40 , 100 , Time . valueOf ( "12:50:00" ) ) ; myAskList . add ( 36 , 40 , 100 , Time . valueOf ( "12:51:00" ) ) ; myAskList . add ( 38 , 40 , 100 , Time . valueOf ( "12:55:00" ) ) ; assert . assertEquals ( "Error in insert!" , Time . valueOf ( "12:00:00" ) , myAskList . get ( 0 ) . getTime ( ) ) ; myAskList . add ( 30 , 30 , 100 , Time . valueOf ( "12:56:00" ) ) ; myAskList . add ( 32 , 42 , 100 , Time . valueOf ( "12:57:00" ) ) ; myAskList . add ( 34 , 40 , 100 , Time . valueOf ( "12:58:00" ) ) ; myAskList . add ( 36 , 45 , 100 , Time . valueOf ( "12:59:00" ) ) ; myAskList . add ( 38 , 40 , 100 , Time . valueOf ( "13:00:00" ) ) ; assert . assertEquals ( "Error in insert!" , Time . valueOf ( "12:00:00" ) , myAskList . get ( 1 ) . getTime ( ) ) ; assert . assertEquals ( "Error in insert!" , Time . valueOf ( "13:00:00" ) , myAskList . get ( 7 ) . getTime ( ) ) ; }
tr	3	public static void setBreedingAge ( int value ) { BREEDING_AGE = value ; }
tr	5	public ServiceFactoryInitException ( final String message , final Throwable cause ) { super ( message , cause ) ; }
tr	8	public ApnsPooledConnection ( ApnsConnection prototype , int max , ExecutorService executors ) { this . prototype = prototype ; this . max = max ; this . executors = executors ; this . prototypes = new ConcurrentLinkedQueue < ApnsConnection > ( ) ; }
tr	2	public int getIterations ( ) { return iterationCount ; }
tr	9	public static void testRemoveTail ( ) { List < String > ll = new List < String > ( ) ; ll . add ( "foo" ) ; System . out . println ( ll ) ; ll . add ( "bar" ) ; System . out . println ( ll ) ; ll . add ( "baz" ) ; System . out . println ( ll ) ; System . out . println ( ) ; ll . removeTail ( ) ; System . out . println ( ll ) ; ll . removeTail ( ) ; System . out . println ( ll ) ; ll . removeTail ( ) ; System . out . println ( ll ) ; ll . removeTail ( ) ; System . out . println ( ll ) ; }
tr	7	public SQLiteImpl ( String name ) throws Exception { this . sTempDb = name ; class . forName ( sDriverName ) ; }
tr	2	public String value ( ) { return value ; }
tr	8	@ XmlElementDecl ( namespace = "http://resource.faturamento.soa32/" , name = "updateResponse" ) public JAXBElement < UpdateResponse > createUpdateResponse ( UpdateResponse value ) { return new JAXBElement < UpdateResponse > ( _UpdateResponse_QNAME , UpdateResponse . class , null , value ) ; }
tr	8	@ Override public RobotResponse accept ( RobotExceptionVisitor visitor , OutputStream os ) { return visitor . handle ( this , os ) ; }
tr	5	@ Override public Point2D . float getSize ( ) { return new Point2D . float ( getWidth ( ) , getHeight ( ) ) ; }
tr	5	@ Override public String toString ( ) { return "[" + x + " " + y + "]" ; }
tr	8	@ XmlElementDecl ( namespace = "" , name = "fMergedFromRequest" ) public JAXBElement < BigInteger > createFMergedFromRequest ( BigInteger value ) { return new JAXBElement < BigInteger > ( _FMergedFromRequest_QNAME , BigInteger . class , null , value ) ; }
tr	2	@ Override public int length ( ) { return 8 ; }
tr	5	public void setNomeTF ( String nomeTF ) { jTextField1 . setText ( nomeTF ) ; }
tr	3	public static String truncateText ( String text ) { return truncateText ( text , 60 ) ; }
tr	5	public HexValidator ( ) { pattern = Pattern . compile ( HEX_PATTERN ) ; }
tr	9	public static Word resume ( int index , String str ) { int p = str . lastIndexOf ( / ) ; return new Word ( index , str . substring ( 0 , p ) , str . substring ( p + 1 ) ) ; }
tr	6	public static String upper ( String text ) { String s = "" ; if ( text != null && ! text . isEmpty ( ) ) { s = text . toUpperCase ( ) ; } return s ; }
tr	5	@ Override public List < POS [ ] > getPOSPairs ( ) { return posPairs ; }
tr	7	public int onClick ( int wX , int wY , int mouseX , int mouseY ) { if ( isOnButton ( wX , wY , mouseX , mouseY ) ) { return buttonID ; } return - 1 ; }
tr	5	@ Override public void mousePressed ( MouseEvent e ) { maybeShowPopup ( e ) ; }
tr	9	@ Override public String toString ( ) { return String . format ( "%s creado el %s.\nArea: %.2f\nPerimetro: %.2f" , this . getClass ( ) . getSimpleName ( ) , this . fechaCreacion . toString ( ) , this . getArea ( ) , this . getPerimetro ( ) ) ; }
tr	9	public Symbol ( int id , int l , int r , Object o ) { this ( id ) ; left = l ; right = r ; value = o ; }
tr	4	public void setConditioning ( FermentationStageType value ) { this . conditioning = value ; }
tr	7	public static boolean EraseValueByKey ( String strFolder , String oneStr , String twoStr ) { return otapiJNI . EraseValueByKey__SWIG_1 ( strFolder , oneStr , twoStr ) ; }
tr	6	public Ability getAbility ( String tag ) { return availableAbilities . get ( tag ) ; }
tr	3	public JButton getButtonClose ( ) { return btnClose ; }
tr	4	@ Test public void createsound ( ) { assert . assertEquals ( createsound . getLocation ( ) , "galaxy" ) ; }
tr	9	static final public void sum ( ) throws ParseException { term ( ) ; label_1 : while ( true ) { switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case + : case MINUS : ; break ; default : jj_la1 [ 1 ] = jj_gen ; break label_1 ; } switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case + : jj_consume_token ( + ) ; break ; case MINUS : jj_consume_token ( MINUS ) ; break ; default : jj_la1 [ 2 ] = jj_gen ; jj_consume_token ( - 1 ) ; throw new ParseException ( ) ; } term ( ) ; } }
tr	8	public Employee ( String name , String address , int number ) { System . out . println ( "Constructing an Employee" ) ; this . name = name ; this . address = address ; this . number = number ; }
tr	5	public boolean isVisible ( TilePosition position ) { return isVisible_native ( pointer , position ) ; }
tr	1	public HostList ( ) { super ( ) ; }
tr	4	public void setPINGrp ( PINGrp value ) { this . pinGrp = value ; }
tr	10	public JButton getNewButtonWithBorder_Icon_ActionListener ( Icon icon , ActionListener actionListener ) { JButton jButtonTmp = getNewButtonWithBorder ( ) ; jButtonTmp . setIcon ( icon ) ; jButtonTmp . addActionListener ( actionListener ) ; return jButtonTmp ; }
tr	9	public int getc ( ) { try { return mBufIn . read ( ) ; } catch ( IOException e ) { e . printStackTrace ( System . err ) ; System . exit ( 1 ) ; } return - 1 ; }
tr	1	public boolean checkTower ( ) { return false ; }
tr	1	public retgertge ( ) { }
tr	3	public void setCredentials ( PropertiesCredentials credentials ) { this . credentials = credentials ; }
tr	3	public int getSize ( ) { return model . size ( ) ; }
tr	5	@ Override public Collection < Match > getMatchList ( ) { return matchList ; }
tr	8	@ XmlElementDecl ( namespace = "http://ssc.spdf.gsfc.nasa.gov/" , name = "getAllSpaseObservatories" ) public JAXBElement < GetAllSpaseObservatories > createGetAllSpaseObservatories ( GetAllSpaseObservatories value ) { return new JAXBElement < GetAllSpaseObservatories > ( _GetAllSpaseObservatories_QNAME , GetAllSpaseObservatories . class , null , value ) ; }
tr	3	public String get_route_text_color ( ) { return _route_text_color ; }
tr	10	public ShowTime getShowTimebyMovie ( Date time , Movie movie ) { for ( ShowTime showTime : showTimeDAO . getShowTimes ( movie ) ) { if ( time == showTime . getTime ( ) ) { return showTime ; } } return null ; }
tr	1	protected MemberNamesMatchesArray ( ) { }
tr	7	public boolean createAccount ( String login , String password ) { if ( logins . containsKey ( login + password ) ) { return false ; } else { logins . put ( login + password , null ) ; return true ; } }
tr	6	public final void set ( int col , int row , int value ) { texels [ col + width * row ] = value ; }
tr	3	public String getFrom_user ( ) { return from_user ; }
tr	4	public boolean isWrapperFor ( class < ? > iface ) throws SQLException { throw new UnsupportedOperationException ( "Not supported yet." ) ; }
tr	6	public void updateDouble ( String columnLabel , double x ) throws SQLException { throw new UnsupportedOperationException ( "Not supported yet." ) ; }
tr	7	@ Override public void processCommand ( Command command , int parameter , boolean hasParameter , boolean optional ) { }
tr	1	public void act ( ) { }
tr	5	protected String getCellAsString ( int col , int row ) { return getCell ( col , row ) ? "#" : "_" ; }
tr	8	@ Override public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( ) != obj . getClass ( ) ) { return false ; } final AreaStats other = ( AreaStats ) obj ; if ( this . averageWeather != other . averageWeather ) { return false ; } return true ; }
tr	10	public ExactCoverPart ( final ExactCover puzzle , final int row ) { super ( puzzle ) ; this . puzzle = puzzle ; this . row = row ; for ( int col = 0 ; col < puzzle . matrixCols ( ) ; ++ col ) { if ( puzzle . hasPoint ( row , col ) ) { atoms . add ( puzzle . atomAt ( col ) ) ; } } }
tr	6	@ Override public void setString ( int index , String value ) { set ( index , value ) ; }
tr	4	public void run ( ) { if ( program != null ) { program . execute ( this ) ; } else { defaultProgram ( ) ; } }
tr	3	public JTextField getTextNombre ( ) { return TextNombre ; }
tr	8	private static char getNrMinesCornerCase ( char [ ] [ ] m , int r , int c , int rAdjInd , int cAdjInd ) { int n = 0 ; if ( m [ r ] [ c + cAdjInd ] == MINE ) { n ++ ; } if ( m [ r + rAdjInd ] [ c ] == MINE ) { n ++ ; } if ( m [ r + rAdjInd ] [ c + cAdjInd ] == MINE ) { n ++ ; } return ( char ) ( 0 + n ) ; }
tr	7	private void jButton1ActionPerformed ( java . awt . event . ActionEvent evt ) { this . setVisible ( false ) ; }
tr	7	public UsuarioDao ( enum . Connection tipoConexion ) throws Exception { oMysql = new Mysql ( ) ; enumTipoConexion = tipoConexion ; }
tr	1	public int size ( ) { return size ; }
tr	8	@ Override public String toString ( ) { return returnType . toString ( ) + " " + symbolName + "(" + Main . join ( argumentTypes , "  " ) + ")" ; }
tr	6	public void addOption ( String name , String shortcut , int mode ) { addOption ( name , shortcut , mode , EMPTY ) ; }
tr	4	public static boolean isValidHtml ( byte [ ] html ) { return isValidHtml ( new InputSource ( new ByteArrayInputStream ( html ) ) ) ; }
tr	6	public boolean isOpPost ( ) { return Arrays . equals ( this . parentHash , EncryptionProvider . EMPTY_HASH_SHA256 ) ; }
tr	7	@ Test public void revers_on_empty_list_should_be_equals_to_itself ( ) { DoubleLinkedList list = new DoubleLinkedList ( ) ; assertEquals ( utils . reverse ( list ) , list ) ; }
tr	10	@ BeforeClass public static void setUpBeforeClass ( ) throws Exception { TestHelper . setupLogging ( ) ; TEST_UTIL . startMiniCluster ( 1 ) ; IndexManager . createIndexMetaTable ( TEST_UTIL . getConfiguration ( ) ) ; }
tr	5	private class < ? > findClass ( byte [ ] b ) throws ClassNotFoundException { return defineClass ( null , b , 0 , b . length ) ; }
tr	8	public void insert ( T elem ) throws Exception { if ( size >= MAX_SIZE ) throw new Exception ( "Size limit reached : " + MAX_SIZE ) ; internalArray [ size ] = elem ; bubbleUp ( size , elem ) ; size ++ ; }
tr	5	public List < E > getModifiableCollection ( ) { return new ArrayList < > ( ls ) ; }
tr	3	@ JsonProperty ( "PreLRMSWaitingJobs" ) public void setPreLRMSWaitingJobs ( long PreLRMSWaitingJobs ) { this . PreLRMSWaitingJobs = PreLRMSWaitingJobs ; }
tr	1	public SelfDiscoveryTest ( ) { super ( "runTests" ) ; }
tr	9	public ListNode reverseKGroup1 ( ListNode head , int k ) { ListNode curr = head ; int count = 0 ; while ( curr != null && count != k ) { curr = curr . next ; count ++ ; } if ( count == k ) { curr = reverseKGroup ( curr , k ) ; while ( count -- > 0 ) { ListNode tmp = head . next ; head . next = curr ; curr = head ; head = tmp ; } head = curr ; } return head ; }
tr	3	public String getFirstName ( ) { return firstName ; }
tr	4	public boolean isAlive ( ) { if ( ! isAlive ) { if ( location != null ) { field . clear ( location ) ; location = null ; field = null ; } } return isAlive ; }
tr	5	public void setMinSelectableDate ( Date min ) { jcalendar . setMinSelectableDate ( min ) ; dateEditor . setMinSelectableDate ( min ) ; }
tr	10	@ Before public void before ( ) throws IOException { Assume . assumeNotNull ( FLAC_BINARY ) ; OUTDIR . mkdirs ( ) ; FileUtils . cleanDirectory ( OUTDIR ) ; }
tr	9	private void initialize ( String [ ] values ) { if ( hasTooLessEntries ( values ) ) { values = fillMissingFields ( values ) ; } for ( Type t : Type . values ( ) ) { setField ( t , values [ t . ordinal ( ) ] ) ; } }
tr	9	public static GitlabAPI connect ( String hostUrl , String apiToken ) { return new GitlabAPI ( hostUrl , apiToken , TokenType . PRIVATE_TOKEN , AuthMethod . HEADER ) ; }
tr	8	public boolean equals ( Object obj ) { boolean returnMe = true ; if ( ! obj . getClass ( ) . equals ( this . getClass ( ) ) ) { returnMe = false ; } else { if ( docID != ( ( Pair ) obj ) . docID ) { returnMe = false ; } else { if ( score != ( ( Pair ) obj ) . score ) { returnMe = false ; } } } return returnMe ; }
tr	10	public void method359 ( ) { byte abyte0 [ ] = new byte [ anInt1452 * anInt1453 ] ; int i = 0 ; for ( int j = anInt1453 - 1 ; j >= 0 ; j -- ) { for ( int k = 0 ; k < anInt1452 ; k ++ ) abyte0 [ i ++ ] = aByteArray1450 [ k + j * anInt1452 ] ; } aByteArray1450 = abyte0 ; anInt1455 = anInt1457 - anInt1453 - anInt1455 ; }
tr	2	public float getA ( ) { return a ; }
tr	2	public String getTranslationText ( ) { return "" ; }
tr	9	public boolean isWallhugPosition ( int x , int y ) { if ( getFreeCount ( x , y ) != 2 ) return false ; else if ( isEmpty ( moveLeft ( x ) , y ) && isEmpty ( moveRight ( x ) , y ) ) return false ; else if ( isEmpty ( x , moveUp ( y ) ) && isEmpty ( x , moveDown ( y ) ) ) return false ; else return true ; }
tr	8	public boolean put ( int key , int value ) { LinkedNode root = this ; if ( root == null ) { return false ; } while ( root . getNext ( ) != null ) { if ( root . getKey ( ) == key ) return false ; root = root . getNext ( ) ; } if ( root . getKey ( ) == key ) return false ; root . setNext ( new LinkedNode ( key , value ) ) ; return true ; }
tr	5	public static String Message_GetUsageCredits ( String THE_MESSAGE ) { return otapiJNI . OTAPI_Basic_Message_GetUsageCredits ( THE_MESSAGE ) ; }
tr	1	public boolean isActive ( ) { return true ; }
tr	10	public boolean getBooleanInfo ( Object key ) { try { return ( ( boolean ) info . get ( key ) ) . booleanValue ( ) ; } catch ( Exception e ) { log . error ( "Failed to parse a boolean in information object" , e ) ; } return false ; }
tr	1	public SmoothGraph ( ) { this ( true ) ; }
tr	3	public void setIdProfesor ( String idProfesor ) { this . idProfesor = idProfesor ; }
tr	1	public boolean allowHtml ( ) { return false ; }
tr	2	public int getFj ( ) { return fj ; }
tr	10	public static File buildFileFromResult ( ResultSet r ) throws SQLException { return new File ( r . getInt ( "id" ) , r . getString ( "filename" ) , r . getLong ( "size" ) , FileType . getFromId ( r . getInt ( "file_type_id" ) ) ) ; }
tr	4	public void setSManualCashbackStatusDescription ( String manualCashbackStatusDescription ) { sManualCashbackStatusDescription = manualCashbackStatusDescription ; }
tr	5	@ Override public HandlerList getHandlers ( ) { return IRCKickEvent . handlers ; }
tr	8	private void bitSizeButtonActionPerformed ( java . awt . event . ActionEvent evt ) { bitInputButton . setSelected ( false ) ; }
tr	2	public int getCom_codigo ( ) { return com_codigo ; }
tr	8	public LinkSetNode ( int s , int d , NodeColor nodeColor , LinkSetNode left , LinkSetNode right ) { if ( s > d ) { this . s = s ; this . d = d ; } else { this . s = d ; this . d = s ; } this . color = nodeColor ; this . left = left ; this . right = right ; }
tr	7	@ Test ( expected = LexicalException . class ) public void testIllegalChar ( ) throws LexicalException { String input = "this is # an test \nwith an illegal char" ; String expected = "dummy" ; compareText ( input , expected ) ; }
tr	3	@ SuppressWarnings ( "unused" ) private void setNotGettable ( short notGettable ) { this . notGettable = notGettable ; }
tr	3	public int getTotalFourmis ( ) { return this . getFourmi ( ) . size ( ) ; }
tr	9	@ Override protected void checkPD ( ) { switch ( pd ) { case CLOCK6 : case CLOCK12 : sqNumWidth = 1 ; sqNumHeight = 4 ; break ; case CLOCK3 : case CLOCK9 : default : sqNumWidth = 4 ; sqNumHeight = 1 ; break ; } }
tr	5	public String getOptionValue ( char opt , String defaultValue ) { return getOptionValue ( String . valueOf ( opt ) , defaultValue ) ; }
tr	10	private void jButton3ActionPerformed ( java . awt . event . ActionEvent evt ) { GestionEquipos gEquipos = new GestionEquipos ( ) ; gEquipos . inicializarGUIgestionEquipos ( ) ; dispose ( ) ; }
tr	1	public User ( ) { this ( "mydrox" ) ; }
tr	6	private void showToolBar ( ) { add ( toolBar , BorderLayout . NORTH ) ; revalidate ( ) ; }
tr	2	@ Override public boolean hasLineOfSight ( ) { return false ; }
tr	3	public OAuth2TokenType getType ( ) { return type ; }
tr	6	public contacto ( String usuario , String nombre , String estado , int inSession ) { this . usuario = usuario ; this . nombre = nombre ; this . estado = estado ; this . inSession = inSession ; }
tr	6	public JSONWriter endObject ( ) throws JSONException { return this . end ( k , } ) ; }
tr	7	@ Override public boolean contains ( K key ) { if ( key == null ) { throw new IllegalArgumentException ( ) ; } return get ( root , key ) != null ; }
tr	10	public < K , V > ListenableAtomicMap < K , V > removeListenableAtomicMapNamed ( String name ) { return atomic ( ( ) -> { ListenableAtomicMap < ? , ? > map = ListenableAtomicMapsByName . remove ( name ) ; return ( ListenableAtomicMap < K , V > ) map ; } ) ; }
tr	9	public TRECThread ( String name , IndexerGUI parserGUI , IndexerCTRL indexerCTRL ) { super ( name ) ; localTimer = new Timer ( ) ; this . indexerCTRL = indexerCTRL ; }
tr	5	public void writeVariable ( String variable , int toAdd ) { getWorkspaceView ( ) . writeVariable ( variable , toAdd ) ; }
tr	9	private void addMountanSides ( ) { for ( int i = 0 ; i < map . length - 2 ; i ++ ) { for ( int j = 0 ; j < map [ 0 ] . length - 2 ; j ++ ) { if ( map [ i ] [ j ] . existTileOfType ( new Mountains ( ) ) ) { map [ i ] [ j + 1 ] . add ( new MountainSide ( ) ) ; map [ i ] [ j + 2 ] . add ( new MountainSide ( ) ) ; } } } }
tr	9	public List < Trends > getTrendsDaily ( ) throws WeiboException { return Trends . constructTrendsList ( client . get ( WeiboConfig . getValue ( "baseURL" ) + "trends/daily.json" ) ) ; }
tr	7	public AddOrigen ( java . awt . Frame parent , boolean modal ) { super ( parent , modal ) ; initComponents ( ) ; }
tr	8	@ Override public void visit ( Apple apple ) { System . out . println ( "\u6536\u94F6\u5458" + name + "\u7ED9\u82F9\u679C\u8FC7\u79E4\uFF0C\u7136\u540E\u8BA1\u7B97\u5176\u4EF7\u683C\u3002" ) ; }
tr	10	protected MemoryEfficientString subSequence ( int start , int end ) { if ( start < 0 || end > ( data . length ) ) { throw new IllegalArgumentException ( "Illegal range " + start + "-" + end + " for sequence of length " + data . length ) ; } byte [ ] newdata = new byte [ end - start ] ; System . arraycopy ( data , start , newdata , 0 , end - start ) ; return new MemoryEfficientString ( newdata ) ; }
tr	5	public Node < String , Integer > getRoot ( ) { return root ; }
tr	2	public void resetFrames ( ) { frames = 0 ; }
tr	5	public Vec2f performOp ( Vec2f v1 , Vec2f operand2 ) { v1 . _vals [ 0 ] += operand2 . _vals [ 0 ] ; v1 . _vals [ 1 ] += operand2 . _vals [ 1 ] ; return v1 ; }
tr	3	public Node23 getRightchild ( ) { return rightchild ; }
tr	8	protected void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { this . doPost ( request , response ) ; }
tr	6	public final void addRole ( RoleSchool role ) { if ( roles == null ) { roles = new ArrayList ( ) ; } roles . add ( role ) ; }
tr	1	public int process_id ( ) { return 2 ; }
tr	3	public LinearRing getLinearRing ( ) { if ( this . objectNode instanceof LinearRing ) { return ( LinearRing ) this . objectNode ; } return null ; }
tr	7	@ Override protected String getCellAsString ( int x , int y ) { int age = getCellAge ( x , y ) ; if ( age > 9 ) return "_" ; if ( age == 0 ) return "#" ; return age + "" ; }
tr	4	public int getMenuID ( MenuClass menu ) { return menuDB . getMenuID ( menu ) ; }
tr	6	private static boolean iguales ( Nodo nodo1 , Nodo nodo2 ) { if ( nodo1 == null && nodo2 == null ) return true ; if ( nodo1 . equals ( nodo2 ) ) return iguales ( nodo1 . getSiguiente ( ) , nodo2 . getSiguiente ( ) ) ; return false ; }
tr	8	@ Override public boolean cancel ( boolean mayInterruptIfRunning ) { lock . lock ( ) ; try { if ( cancelled ) { return false ; } cancelled = true ; dataReady . signalAll ( ) ; } finally { lock . unlock ( ) ; } return true ; }
tr	8	public String getResultDetail ( int index ) { if ( ! detail ) return null ; if ( index < 0 || index >= getResultCount ( ) ) throw new IllegalArgumentException ( class + ": illegal value for index" ) ; return details . get ( index ) ; }
tr	5	public T getElementAt ( int index ) { return this . elements . get ( index ) ; }
tr	9	@ Override public void beginSelected ( Polygon polygonBegin ) { if ( polygonBegin == null ) { jLabelPosition1Begin . setText ( "Case non" ) ; jLabelPosition2Begin . setText ( "selectionn\u00E9e" ) ; } else { jLabelPosition1Begin . setText ( polygonBegin . getS_nameDistrict ( ) ) ; jLabelPosition2Begin . setText ( polygonBegin . getS_nameInDistrict ( ) ) ; } }
tr	2	public int getId ( ) { return id ; }
tr	5	public void apply ( Mob mob ) { def . apply ( mob , caster ) ; }
tr	8	private void printSpaces ( int num ) { String s = "" ; for ( int i = 0 ; i < num ; i ++ ) { s +=   ; } System . out . print ( s ) ; }
tr	10	public String [ ] adjudicate ( final int lineNumber , final String orig , final String [ ] hdr , final String [ ] flds ) { final int n = hdr . length ; String [ ] res = new String [ n ] ; for ( int i = 0 ; ( i < flds . length ) && ( i < n ) ; ++ i ) { res [ i ] = flds [ i ] ; } for ( int i = flds . length ; i < n ; ++ i ) { res [ i ] = "" ; } return res ; }
tr	1	public ParkingLot ( ) { }
tr	7	public Snake ( Player player , int [ ] xInitial , int [ ] yInitial , short initDirection ) { super ( xInitial , yInitial ) ; this . player = player ; this . direction = initDirection ; }
tr	9	public void delete ( Users persistentInstance ) { log . debug ( "deleting " + entitySimpleName + " instance" ) ; try { super . delete ( persistentInstance ) ; log . debug ( entitySimpleName + " delete successful" ) ; } catch ( RuntimeException re ) { log . error ( entitySimpleName + " delete failed" , re ) ; throw re ; } }
tr	10	public void minusElixir ( String player , int amount ) { if ( elixir . containsKey ( player ) ) elixir . put ( player , elixir . get ( player ) - amount ) ; COBAPI . updateStats ( player ) ; }
tr	5	public void addPOS ( POS pos ) { posArray . add ( pos ) ; }
tr	5	@ Before public void setUp ( ) { DB . setDataSource ( new SQLite ( ) ) ; }
tr	3	public String getciudad ( ) { return ciudad ; }
tr	2	public boolean regenerates ( ) { return this == REGENERATOR ; }
tr	6	@ Override public void shareMemberData ( String key , Object object ) { }
tr	1	public B_A_estudiante ( ) { }
tr	9	public static DummyKVStorable [ ] merge ( DummyKVStorable [ ] ... arrays ) { int size = 0 ; for ( DummyKVStorable [ ] A : arrays ) size += A . length ; DummyKVStorable [ ] all = new DummyKVStorable [ size ] ; int k = 0 ; for ( DummyKVStorable [ ] A : arrays ) { for ( DummyKVStorable d : A ) { all [ k ++ ] = d ; } } return all ; }
tr	5	@ Override public void setRotation ( float rotation ) { super . setRotation ( rotation ) ; dispatchEvent ( new MapObjectChangeEvent ( this ) ) ; }
tr	5	private int numberOfDigits ( int n ) { Preconditions . checkArgument ( n > 0 ) ; int count = 0 ; while ( n > 0 ) { n /= 10 ; count ++ ; } return count ; }
tr	5	@ Override public E actual ( ) { if ( actual == null ) { throw new NullPointerException ( "Error: no se puede acceder el dato actual!" ) ; } return actual . getDato ( ) ; }
tr	3	public String getName ( ) { return name ; }
tr	3	public String getName ( ) { return name ; }
tr	1	private SpecialOperations ( ) { }
tr	4	public List < Node > getChildren ( ) { return children ; }
tr	3	public String toString ( ) { return "Expert Attack:\t" + getDescription ( ) ; }
tr	7	public void setPreferredSize ( Dimension d ) { super . setPreferredSize ( d ) ; this . main . setWidth ( ( int ) this . getPreferredSize ( ) . getWidth ( ) ) ; }
tr	2	public Discriminator ( ) throws TypeException { super ( ) ; }
tr	1	public OutgoingCarrierRoutingFactory ( ) { }
tr	4	public void setSmiles ( String value ) { this . smiles = value ; }
tr	10	public char BeginToken ( ) throws java . io . IOException { if ( inBuf > 0 ) { -- inBuf ; if ( ++ bufpos == bufsize ) bufpos = 0 ; tokenBegin = bufpos ; return buffer [ bufpos ] ; } tokenBegin = 0 ; bufpos = - 1 ; return readChar ( ) ; }
tr	8	@ XmlElementDecl ( namespace = "com/firstdata/Merchant/gmfV3.10" , name = "OrigTranDateTime" ) public JAXBElement < String > createOrigTranDateTime ( String value ) { return new JAXBElement < String > ( _OrigTranDateTime_QNAME , String . class , null , value ) ; }
tr	10	public void method358 ( ) { byte abyte0 [ ] = new byte [ anInt1452 * anInt1453 ] ; int j = 0 ; for ( int k = 0 ; k < anInt1453 ; k ++ ) { for ( int l = anInt1452 - 1 ; l >= 0 ; l -- ) abyte0 [ j ++ ] = aByteArray1450 [ l + k * anInt1452 ] ; } aByteArray1450 = abyte0 ; anInt1454 = anInt1456 - anInt1452 - anInt1454 ; }
tr	4	@ Override protected EntityManager getEntityManager ( ) { return em ; }
tr	1	public SGFTree ( ) { }
tr	2	public static double getPenRadius ( ) { return penRadius ; }
tr	1	public void print ( ) { print ( "" ) ; }
tr	6	public String getId ( ) { if ( StringUtils . isNotBlank ( object . optString ( "_id" ) ) ) { return object . optString ( "_id" ) ; } else { return object . optString ( "id" ) ; } }
tr	6	public Node vet ( int cell ) { Node node = get ( cell ) ; if ( node == null ) { node = new Node ( ) ; set ( cell , node ) ; } return node ; }
tr	6	@ Override public String readMessageAsString ( ) throws IOException { byte [ ] buf = readMessageAsBytes ( ) ; return new String ( buf ) ; }
tr	7	private static File findFile ( String filePath , File classPath ) { File file = new File ( classPath , filePath ) ; return file . exists ( ) ? file : null ; }
tr	1	public double v ( ) { return v ; }
tr	1	public int getBestMove ( ) { return 0 ; }
tr	3	public void setStateVector ( StateVector stateVector ) { this . stateVector = stateVector ; }
tr	10	public static void loop ( Mat mat , ImgWindow window , VideoCapture video ) { video . read ( mat ) ; if ( ! mat . empty ( ) ) { window . setImage ( mat ) ; } }
tr	6	public void requestOpenPose ( int id ) { boolean continueToOpen = true ; if ( ! saved ) { continueToOpen = promptToSave ( ) ; } if ( continueToOpen ) { promptToOpen ( id ) ; } }
tr	5	public void setCustomWordCount ( HashMap < String , Integer > customWordCount ) { this . customWordCount = customWordCount ; }
tr	4	public void setDetalles ( Set < OrdenPinturaDetalle > detalles ) { this . detalles = detalles ; }
tr	6	public OrNode ( Node l , Node r ) { left = l ; right = r ; }
tr	1	public ImmutableSet ( ) { super ( ) ; }
tr	5	private static String trad4 ( TreeNode tree ) { return tree . getStringValue ( ) ; }
tr	2	public static int getDefaultHorizontalUnit ( ) { return DEF_H_UNIT ; }
tr	3	public TableColumnAdjuster ( JTable table ) { this ( table , 6 ) ; }
tr	8	@ Override public < S , T > T visit ( SMPLVisitor < S , T > visitor , S state ) { return visitor . visitCarExp ( this , state ) ; }
tr	1	public ReservaInformation ( ) { }
tr	7	public static void main ( String [ ] args ) { String u = "MM\u65E5\u5386\uFF1A\u82F1\u96C4\u8054\u76DF-\u5747\u8861\u6559\u6D3E-\u9EBB\u5143\u5C0F\u5C0F" ; System . out . println ( u ) ; }
tr	4	public List < Publish > getSitelist ( ) { return sitelist ; }
tr	6	private void addScrollPane ( ) { scrollPane = new JScrollPane ( tablePanel , JScrollPane . VERTICAL_SCROLLBAR_ALWAYS , JScrollPane . HORIZONTAL_SCROLLBAR_NEVER ) ; }
tr	9	public void method278 ( int i , int j , int k , int l ) { Ground class30_sub3 = groundArray [ i ] [ j ] [ k ] ; if ( class30_sub3 != null ) { groundArray [ i ] [ j ] [ k ] . anInt1321 = l ; } }
tr	3	public InvalidRuleException ( String msg ) { super ( msg ) ; }
tr	6	public int min_number_of_frames ( int streamsize ) { if ( h_vbr == true ) return h_vbr_frames ; else { if ( ( framesize + 5 - h_padding_bit ) == 0 ) return 0 ; else return ( streamsize / ( framesize + 5 - h_padding_bit ) ) ; } }
tr	3	public Aaa getPrivateMethod ( ) { return privateMethod ; }
tr	2	public long getNextCursor ( ) { return nextCursor ; }
tr	1	public GenericMatcher ( ) { }
tr	1	ExamplesBasicTypes ( ) { }
tr	1	public boolean isFaulty ( ) { return isFaulty ; }
tr	5	public FIXMLBuilder ( Account a ) { id = a . getId ( ) ; }
tr	5	public Problem7 ( ) { knownPrimes = new TreeSet < Integer > ( ) ; knownPrimes . add ( 2 ) ; knownPrimes . add ( 3 ) ; }
tr	3	public void setValue ( String value ) { this . value = value ; }
tr	5	public String format ( CommandLineConfiguration config ) { return format ( config , CommandLineFormatType . short ) ; }
tr	6	public void addNode ( Node node ) { if ( ! nodeAlreadyExists ( node ) ) nodes . add ( node ) ; }
tr	5	private void setTitle ( ) { String intercepting = intercepting ( ) ? "intercepting" : "not intercepting" ; this . getFrame ( ) . setTitle ( "Gizmo. Proxying on [" + port + "]  " + intercepting ) ; }
tr	10	private void OpenAppointment ( MeetingModel meeting ) { if ( newAppointmentPane != null ) CloseAppointment ( ) ; newAppointmentPane = new NewAppointmentPanel ( meeting ) ; optionTabbedPane . addTab ( "Avtale" , newAppointmentPane ) ; newAppointmentPane . addPropertyChangeListener ( this ) ; optionTabbedPane . setSelectedComponent ( newAppointmentPane ) ; }
tr	9	public void sendTheChat ( ) throws IOException { String s = "SAY " + userName + " " + compose . getText ( ) ; send ( s ) ; compose . setText ( "" ) ; }
tr	4	BitReserve ( ) { offset = 0 ; totbit = 0 ; buf_byte_idx = 0 ; }
tr	3	public static synchronized SondageDao getInstance ( ) { if ( instance == null ) instance = new SondageDao ( ) ; return instance ; }
tr	3	public Vector3f getAmbientColor ( ) { return ambientColor ; }
tr	5	public final void testGetName ( ) { Player player = new Player ( "Fred" ) ; assert . assertEquals ( player . getName ( ) , "Fred" ) ; }
tr	5	public void addValueSource ( ValueSource valueSource ) { valueSources . add ( valueSource ) ; }
tr	10	public void elsolve ( final double [ ] b , final double [ ] y ) { int i , j ; double sum ; if ( b . length != n || y . length != n ) throw new IllegalArgumentException ( "bad lengths" ) ; for ( i = 0 ; i < n ; i ++ ) { for ( sum = b [ i ] , j = 0 ; j < i ; j ++ ) sum -= el [ i ] [ j ] * y [ j ] ; y [ i ] = sum / el [ i ] [ i ] ; } }
tr	8	public Comuna buscarComuna ( String strcomuna ) { for ( Comuna comuna : listacomunas ) { if ( comuna . getCom_nombre ( ) . equals ( strcomuna ) ) { return comuna ; } } return null ; }
tr	8	@ Override public StringBuffer read ( Input input ) { StringBuffer stringBuffer = new StringBuffer ( input . readString ( ) ) ; addReferenceForDeserialization ( stringBuffer ) ; return stringBuffer ; }
tr	5	public BuildFile ( ProjectFile projectFile , Dict dict ) { super ( projectFile , dict ) ; }
tr	9	public Products asProducts ( ) throws DiffbotParseException { try { return this . getFactory ( ) . createJsonParser ( super . toString ( ) ) . parse ( Products . class ) ; } catch ( IOException e ) { throw new DiffbotParseException ( "The classified object cannot be parsed as a Products." , e ) ; } }
tr	6	@ Test public void testGetThreadName ( ) { Communicator comm = new Communicator ( 12010 ) ; assertEquals ( comm . getThreadName ( ) , "Communicator" ) ; }
tr	4	public String toString ( ) { return getThroughputPerSecond ( ) + " docs/sec with " + threads + " threads" ; }
tr	10	public static void printList ( String listName , Vector < Integer > arg ) { System . out . print ( listName + "=" ) ; printList ( arg ) ; System . out . println ( "" ) ; }
tr	7	private void setTreeLineas ( ) { jScrollPane1 . setVerticalScrollBarPolicy ( JScrollPane . VERTICAL_SCROLLBAR_ALWAYS ) ; Utilitaria . setTreeLineas ( treeLineas ) ; }
tr	9	@ Override public int compare ( Field f1 , Field f2 ) { if ( ! f1 . getName ( ) . equals ( f2 . getName ( ) ) ) { return f1 . getName ( ) . compareTo ( f2 . getName ( ) ) ; } else if ( ! f1 . getType ( ) . equals ( f2 . getType ( ) ) ) { return f1 . getType ( ) . getName ( ) . compareTo ( f2 . getType ( ) . getName ( ) ) ; } return 0 ; }
tr	7	protected HRect ( HPoint vmin , HPoint vmax ) { min = ( HPoint ) vmin . clone ( ) ; max = ( HPoint ) vmax . clone ( ) ; }
tr	10	public boolean getBoolean ( String key ) throws JSONException { Object o = get ( key ) ; if ( o == null ) return false ; if ( o . equals ( boolean . false ) || ( o instanceof String && ( ( String ) o ) . equalsIgnoreCase ( "false" ) ) ) { return false ; } else if ( o . equals ( boolean . true ) || ( o instanceof String && ( ( String ) o ) . equalsIgnoreCase ( "true" ) ) ) { return true ; } throw new JSONException ( "JSONObject[" + quote ( key ) + "] is not a Boolean." ) ; }
tr	9	public void addPoint ( float p ) { if ( p < this . min || p > this . max ) return ; if ( p == this . max ) { this . bins [ count - 1 ] ++ ; return ; } float temp = ( p - this . min ) / ( this . max - this . min ) ; for ( int i = 0 ; i < this . count ; i ++ ) if ( temp >= this . h * i && temp < this . h * ( i + 1 ) ) { this . bins [ i ] ++ ; return ; } }
tr	4	@ Override public void deleteItem ( long itemId ) { repository . deleteItem ( itemId ) ; }
tr	10	public static void main ( String [ ] args ) { for ( int i = 00 ; i <= FF ; i ++ ) { byte b = ( byte ) i ; int j = b < 0 ? 256 + b : b ; System . out . println ( "i = " + i + "\tb = " + j ) ; } }
tr	4	protected void init ( String filename ) { fFilename = filename ; }
tr	9	@ Override public void accept ( YSpecVisitor v ) { v . visit ( this ) ; for ( YNetElement e : outwardFlows ( ) ) { if ( ! v . visited ( e ) ) e . accept ( v ) ; } }
tr	7	public static Object fnc$ ( String string , mVar p$f ) { throw new UnsupportedOperationException ( ) ; }
tr	6	@ Override public void run ( ) { switch ( rand . nextInt ( 2000 ) ) { case 1 : Time . sleep ( rand . nextInt ( 1 ) ) ; break ; } }
tr	7	public NewCollectionDialog ( java . awt . Frame parent , boolean modal ) { super ( parent , modal ) ; initComponents ( ) ; }
tr	3	public static ApplicationContext getContext ( ) { if ( applicationContext == null ) { applicationContext = new ApplicationContext ( ) ; } return applicationContext ; }
tr	2	public short [ ] [ ] action_table ( ) { return _action_table ; }
tr	4	@ Override public String imprimirme ( ) { return "T\u00EDtulo: " + this . titulo ; }
tr	4	public static double interpolate ( double last , double now , double dtime ) { return last + ( now - last ) * dtime ; }
tr	3	public void mouseExited ( MouseEvent e ) { }
tr	10	public int getAverageScore ( boolean noCurrentScore ) { int averageScore = gameStatus . players [ playerIndex ] . getScore ( ) ; int scoreCount = 1 ; if ( noCurrentScore ) { averageScore = 0 ; scoreCount = 0 ; } if ( previousScores != null ) { for ( int score : previousScores ) { averageScore += score ; scoreCount ++ ; } averageScore /= scoreCount ; } return averageScore ; }
tr	1	public void unexecute ( ) { }
tr	4	public List < Calificacion > getCalificaciones ( ) { return calificaciones ; }
tr	9	public static String getEmailFromContent ( String str ) { int startIndex = str . indexOf ( < ) ; int endIndex = str . indexOf ( ">" ) ; String s = str . substring ( startIndex + 1 , endIndex ) ; return s ; }
tr	1	public HiloBean ( ) { }
tr	3	public static void castM3 ( final float result [ ] , final float [ ] matrix ) { result [ 0 ] = matrix [ 0 ] ; result [ 1 ] = matrix [ 1 ] ; result [ 2 ] = matrix [ 2 ] ; result [ 3 ] = matrix [ 4 ] ; result [ 4 ] = matrix [ 5 ] ; result [ 5 ] = matrix [ 6 ] ; result [ 6 ] = matrix [ 8 ] ; result [ 7 ] = matrix [ 9 ] ; result [ 8 ] = matrix [ 10 ] ; }
tr	7	public void render ( int x , int y , Graphics g ) { GameScreen . rendertile ( 0 , 0 , x , y , g ) ; GameScreen . rendertile ( 0 , 0 , x + 1 , y , g ) ; GameScreen . rendertile ( 0 , 0 , x + 2 , y , g ) ; GameScreen . rendertile ( 0 , 0 , x , y + 1 , g ) ; GameScreen . rendertile ( 0 , 0 , x + 1 , y + 1 , g ) ; GameScreen . rendertile ( 0 , 0 , x + 2 , y + 1 , g ) ; GameScreen . rendertile ( 13 , 0 , x , y , g ) ; GameScreen . rendertile ( 14 , 0 , x + 1 , y , g ) ; GameScreen . rendertile ( 15 , 0 , x + 2 , y , g ) ; GameScreen . rendertile ( 13 , 1 , x , y + 1 , g ) ; GameScreen . rendertile ( 14 , 1 , x + 1 , y + 1 , g ) ; GameScreen . rendertile ( 15 , 1 , x + 2 , y + 1 , g ) ; }
tr	7	@ Override public void setFont ( Font font , int row , int column ) { if ( isOutOfBounds ( row , column ) ) { return ; } this . font [ row ] [ column ] = font ; }
tr	3	public String getProvincia ( ) { return provincia ; }
tr	5	public T call ( ) throws Exception { return future . get ( ) ; }
tr	3	public String toString ( ) { return "Fruit-" + ( id ) ; }
tr	1	public int error_sym ( ) { return 1 ; }
tr	1	public boolean descriptionFromSgf ( ) { return descriptionFromSgf ; }
tr	9	@ Override public void info ( Object message , Throwable t ) { log ( message , t , Level . INFO ) ; }
tr	5	public void setHumidityOffset ( float humidityOffset ) { this . humidityOffset = new float ( humidityOffset ) ; humidityOffsetField . setText ( this . humidityOffset . toString ( ) ) ; }
tr	6	public static byte getWorth ( final MineType mt ) { switch ( mt ) { case COAL : return 1 ; case GOLD : return 4 ; case IRON : return 2 ; default : return 0 ; } }
tr	10	public T deleteMin ( ) { if ( isEmpty ( ) ) return null ; T x = findMin ( ) ; root . element = null ; if ( root . leftChild == null ) root = null ; else root = combineSiblings ( root . leftChild ) ; theSize -- ; return x ; }
tr	6	public static byte [ ] getValues ( ) { byte [ ] values = { ENCODED_VOICE , RAW_BINARY_DATA , APPLICATION_SPECIFIC_DATA , DATABASE_INDEX } ; return values ; }
tr	10	@ Test public void testPersoncompression ( ) { String s = "person" ; String t = "compression" ; FindOneStringInAnother f = new FindOneStringInAnother ( ) ; String value = f . algorithm ( s , t ) ; assert . assertEquals ( "No" , value ) ; }
tr	6	private boolean isWeapon ( ItemStack item ) { return weapons . contains ( item . getType ( ) ) ; }
tr	5	public static void main ( String [ ] args ) { new JavaEResourceFinder ( ) . lookUp ( "String" , null ) ; }
tr	4	@ Override public Key getKey ( ) { return Key . PartOfSpeech ; }
tr	10	@ Override public boolean equals ( Object o ) { if ( this == o ) return true ; if ( o == null || getClass ( ) != o . getClass ( ) ) return false ; ComplexNumber that = ( ComplexNumber ) o ; if ( double . compare ( that . im , im ) != 0 ) return false ; if ( double . compare ( that . re , re ) != 0 ) return false ; return true ; }
tr	1	private Singleton4 ( ) { }
tr	2	public int getViewLevels ( ) { return levels ; }
tr	1	public SocketIO ( ) { }
tr	10	@ Override public List < MessageInfo > getMessages ( int start , int pageSize , String username , String password ) { return mytxtbuddySoapApi . getMessages ( start , pageSize , username , password ) ; }
tr	4	@ Override public boolean isCellEditable ( int row , int column ) { return ( column < 2 ) ; }
tr	5	public void saveMappable ( Properties props , Mappable mappable ) { saveMappable ( props , 0 , mappable ) ; }
tr	9	private JButton createButton ( String action , String label ) { JButton button = new JButton ( label ) ; button . addActionListener ( factory . createAction ( action ) ) ; return button ; }
tr	8	@ Test public void FIGHTING_attacking_GRASS ( ) { assertEquals ( 1.0 , tc . getWeaknessResistance ( Type . FIGHTING , Type . GRASS ) , 0.0 ) ; }
tr	4	public OlogClientBuilder withExecutor ( ExecutorService executor ) { this . executor = executor ; return this ; }
tr	10	@ Test public void shouldVerifyExistanceOfPlace ( ) { Row row = new Row ( 1 ) ; Place place = new Place ( 22 ) ; assertFalse ( row . exists ( place ) ) ; row . addPlace ( place ) ; assertTrue ( row . exists ( place ) ) ; }
tr	2	public void decCount ( ) { if ( count == 0 ) return ; count -- ; }
tr	4	public void behaveAs ( Gravitable g ) { model = g ; }
tr	4	public JsonExportOptions getJsonExportOptions ( ) { return ( JsonExportOptions ) getDataWriter ( ) . getOptions ( ) ; }
tr	3	public String getCod4 ( ) { return cod4 ; }
tr	10	public JSONArray toJSONArray ( JSONArray names ) throws JSONException { if ( names == null || names . length ( ) == 0 ) { return null ; } JSONArray ja = new JSONArray ( ) ; for ( int i = 0 ; i < names . length ( ) ; i += 1 ) { ja . put ( this . opt ( names . getString ( i ) ) ) ; } return ja ; }
tr	4	@ Override public void Lands ( Player P ) { }
tr	6	public void info ( ) { System . out . println ( sequencer . getTickPosition ( ) ) ; }
tr	7	@ Override public boolean equals ( Object o ) { if ( ! ( o instanceof BooleanWrapper ) ) { return false ; } BooleanWrapper obj = ( BooleanWrapper ) o ; return obj . getBooleanValue ( ) == this . getBooleanValue ( ) ; }
tr	10	@ Test public void Attack_page2 ( ) { tester . setHiddenField ( "page2" , "22'/> <a href=www.google.com>evil link</a> <br '" ) ; tester . setHiddenField ( "page" , "1" ) ; Support_Function . addSubmitButton ( "/html//form[@name='admin']" , tester ) ; tester . setWorkingForm ( "admin" ) ; tester . submit ( ) ; tester . assertMatch ( "Manage Parents" ) ; tester . assertLinkNotPresentWithText ( "evil link" ) ; }
tr	3	@ JsonProperty ( "WaitingJobs" ) public void setWaitingJobs ( long WaitingJobs ) { this . WaitingJobs = WaitingJobs ; }
tr	4	public void add ( C resource ) { add ( resource . asRange ( ) ) ; }
tr	5	public NodeUnion ( Link [ ] links ) { if ( links == null || links . length < 2 || links . length > 4 ) { throw new IllegalArgumentException ( "Links size must be >=2 and <=4" ) ; } this . links = links ; }
tr	9	private void before ( ) { attackerHB = attacker . getHealth ( ) ; attackerEB = attacker . getExp ( ) ; defenderHB = defender . getHealth ( ) ; defenderEB = defender . getExp ( ) ; }
tr	1	public CDoseList ( ) { super ( true ) ; }
tr	9	@ Override public boolean addEntity ( int level , Entity < ? extends Engine > entity ) { if ( entity != null ) { addRenderable ( level , entity ) ; addLogicable ( entity ) ; entity . setStage ( this ) ; return true ; } return false ; }
tr	8	private static void splitReciprocal ( final double in [ ] , final double result [ ] ) { final double b = 1.0 / 4194304.0 ; final double a = 1.0 - b ; if ( in [ 0 ] == 0.0 ) { in [ 0 ] = in [ 1 ] ; in [ 1 ] = 0.0 ; } result [ 0 ] = a / in [ 0 ] ; result [ 1 ] = ( b * in [ 0 ] - a * in [ 1 ] ) / ( in [ 0 ] * in [ 0 ] + in [ 0 ] * in [ 1 ] ) ; if ( result [ 1 ] != result [ 1 ] ) { result [ 1 ] = 0.0 ; } resplit ( result ) ; for ( int i = 0 ; i < 2 ; i ++ ) { double err = 1.0 - result [ 0 ] * in [ 0 ] - result [ 0 ] * in [ 1 ] - result [ 1 ] * in [ 0 ] - result [ 1 ] * in [ 1 ] ; err = err * ( result [ 0 ] + result [ 1 ] ) ; result [ 1 ] += err ; } }
tr	9	protected char [ ] move_array ( char [ ] array , int offset , boolean left ) { int total = array . length ; char [ ] new_array = new char [ total ] ; for ( int i = 0 ; i < total ; i ++ ) { int new_pos ; if ( ! left ) { new_pos = ( i + offset ) % total ; } else { new_pos = ( i - offset ) % total ; if ( new_pos < 0 ) { new_pos += total ; } } new_array [ new_pos ] = array [ i ] ; } return new_array ; }
tr	5	public java . awt . Frame getFrame ( ) { return parent ; }
tr	3	public ScrolledNotesCanvas getScrolledNotesCanvas ( ) { return scrolledNotesCanvas ; }
tr	8	@ Override public String getMessage ( ) { if ( this . server != null && this . server2 != null ) { return String . format ( "%s %s %s" , this . getCommandName ( ) , this . server , this . server2 ) ; } if ( this . server != null && this . server2 == null ) { return String . format ( "%s %s" , this . getCommandName ( ) , this . server ) ; } if ( this . server == null && this . server2 != null ) { return String . format ( "%s :%s" , this . getCommandName ( ) , this . server2 ) ; } throw new RuntimeException ( "This state should not happen. There is probably a bug in a constructor." ) ; }
tr	7	public GameEntity getEntityAt ( double x , double y ) { for ( GameEntity e : entities ) { if ( e . contains ( x , y ) ) { return e ; } } return null ; }
tr	8	@ GET @ Produces ( MediaType . APPLICATION_JSON ) public Comentario [ ] getComentarios ( ) { Comentario [ ] comentarios = COM_CONTROLLER . getComentarios ( ) ; return comentarios ; }
tr	7	public boolean intersects ( Rect2 rect ) { return ! ( x - w / 2 > rect . x + rect . w / 2 || x + w / 2 < rect . x - rect . w / 2 || y + h / 2 < rect . y - rect . h / 2 || y - h / 2 > rect . y + rect . h / 2 ) ; }
tr	8	public int getCellAge ( int x , int y ) { if ( y < 0 || y >= getHeight ( ) ) return Integer . MAX_VALUE ; if ( x < 0 || x >= getWidth ( ) ) return Integer . MAX_VALUE ; return world [ y ] [ x ] ; }
tr	3	protected void setup ( ) throws IOException , InterruptedException { }
tr	8	public void linkLast ( int element ) { final Node l = this . last ; final Node newNode = new Node ( null , l , element ) ; this . last = newNode ; if ( l == null ) this . first = newNode ; else l . next = newNode ; }
tr	7	public Henkilo valitaHenkiloOlio ( String nimi ) { return henkilo = henkilot . get ( nimi ) ; }
tr	6	@ Override public void enterRead ( @ NotNull SSTParser . ReadContext ctx ) { }
tr	3	public void setStatus ( String status ) { this . status = status ; }
tr	9	private String toString ( Object obj ) { if ( null == obj ) { return "" ; } if ( obj . getClass ( ) . isArray ( ) ) { return Utils . join ( ( Object [ ] ) obj ) ; } if ( obj instanceof Collection ) { return Utils . join ( ( Collection < ? > ) obj ) ; } return obj . toString ( ) ; }
tr	9	private void setView ( ViewBase view ) { this . clearView ( ) ; this . activeView = view ; viewContainerPanel . add ( view ) ; view . LoadData ( ) ; viewContainerPanel . revalidate ( ) ; }
tr	8	public String queryWQL_NODETYPES ( String nodeURI ) { String wql_query_nodes [ ] = new String [ 10 ] ; int i = - 1 ; wql_query_nodes [ ++ i ] = newXmlNodeTAG ( nodeURI ) ; return this . queryWQLSurround ( wql_query_nodes , this . WQL_NODETYPES ) ; }
tr	3	public void teleop ( ) { toucan . enableCanipede ( ) ; }
tr	1	protected void setupInitialState ( ) { }
tr	8	protected void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { this . doPost ( request , response ) ; }
tr	8	@ Test public void testSizeMethod1 ( ) { ArrayStackImplementationVG < String > stack = new ArrayStackImplementationVG < String > ( ) ; int result = stack . size ( ) ; assertEquals ( result , 16 ) ; }
tr	1	public void keyEvent ( ) { }
tr	7	public boolean isOnRightPosition ( int index ) { return cardList . get ( index ) . value . equals ( sortedValues . get ( index ) ) ; }
tr	5	@ Override public String toString ( ) { return "" + getJvmID ( ) + "/" + getActorName ( ) ; }
tr	7	public InterpolationException ( String message , String expression , Throwable cause ) { super ( buildMessage ( message , expression ) , cause ) ; this . expression = expression ; }
tr	8	private void orderPaths ( ) { for ( int i = 0 ; i < workingPaths . size ( ) ; i ++ ) { Path path = ( Path ) workingPaths . get ( i ) ; orderPath ( path ) ; } }
tr	3	public void setFinalGrades ( boolean value ) { this . finalGrades = value ; }
tr	7	public Sonido getNewSonido ( int nombreSonido ) { return nombreSonido < sonidos . size ( ) ? sonidos . get ( nombreSonido ) . clonar ( ) : null ; }
tr	10	@ Test public void testHasView ( ) { GameViewManager viewManager = new GameViewManager ( ) ; assertFalse ( viewManager . hasView ( GameView . class ) ) ; assertFalse ( viewManager . hasView ( MockGameView . class ) ) ; viewManager . addView ( new MockGameView ( ) ) ; assertTrue ( viewManager . hasView ( GameView . class ) ) ; assertTrue ( viewManager . hasView ( MockGameView . class ) ) ; }
tr	8	public static void main ( String [ ] args ) { int num1 = 2147483647 ; System . out . println ( num1 ) ; System . out . println ( num1 + 1 ) ; int num2 = - 2147483648 ; System . out . println ( num2 ) ; System . out . println ( num2 - 1 ) ; }
tr	9	public String toString ( ) { StringBuffer buf = new StringBuffer ( "{MacOSX Device: " ) ; String prod = descriptor . getProduct ( 0 ) ; buf . append ( path ) ; if ( prod != null ) { buf . append ( " " ) ; buf . append ( prod ) ; } buf . append ( "}" ) ; return buf . toString ( ) ; }
tr	2	public int getPeopleOnStation ( ) { return peopleOnStation ; }
tr	8	@ Deprecated public WebSocketImpl ( WebSocketListener listener , Draft draft , Socket socket ) { this ( listener , draft ) ; }
tr	8	@ Override public boolean equals ( Object otherObject ) { if ( this == otherObject ) return true ; if ( null == otherObject ) return false ; if ( getClass ( ) != otherObject . getClass ( ) ) return false ; StringsList other = ( StringsList ) otherObject ; return super . equals ( other ) && count == other . count ; }
tr	6	public void testConnectedClientCount ( ) { assert ( DLE . connectedClientCount ( ) == 0 ) ; DLE . addUser ( user ) ; DLE . addClientConnection ( "A" , "C" ) ; assert ( DLE . connectedClientCount ( ) == 1 ) ; }
tr	6	@ Override public void onDamageReceived ( int id , double value ) { points ++ ; changed = true ; }
tr	1	public NotConfiguredException ( ) { }
tr	3	@ BeforeClass public static void setUpClass ( ) throws Exception { }
tr	1	public boolean isCheckBoxSelected ( ) { return false ; }
tr	4	public edge ( int source , int destination , int weight ) { this . source = source ; this . destination = destination ; this . weight = weight ; }
tr	7	public void setAttribute ( String name , String value ) { if ( attributes == null ) attributes = new HashMap < String , String > ( ) ; attributes . put ( name , value ) ; }
tr	2	public int getLabelInAssembler ( ) { return labelInAssembler ; }
tr	8	public void addLight ( double x , double y , double z , double r , double g , double b ) { renderer . addLight ( x , y , z , r , g , b ) ; }
tr	8	public static void setPanelInsets ( UnitValue top , UnitValue left , UnitValue bottom , UnitValue right ) { if ( top != null ) PANEL_INS [ 0 ] = top ; if ( left != null ) PANEL_INS [ 1 ] = left ; if ( bottom != null ) PANEL_INS [ 2 ] = bottom ; if ( right != null ) PANEL_INS [ 3 ] = right ; MOD_COUNT ++ ; }
tr	7	public < S , T > T visit ( SMPLVisitor < S , T > visitor , S state ) { return visitor . visitRead ( this , state ) ; }
tr	7	public void reloadPresets ( ) { this . setModel ( new DefaultComboBoxModel ( AppManager . getInstance ( ) . getPresets ( ) . getFractalPresets ( ) ) ) ; }
tr	10	public void actionPerformed ( ActionEvent arg0 ) { if ( arg0 . getSource ( ) . equals ( bShowDatePanel ) ) { if ( popup == null ) { showPopup ( ) ; } else { hidePopup ( ) ; } } else if ( arg0 . getSource ( ) . equals ( datePanel ) ) { hidePopup ( ) ; } }
tr	5	public String getUsernameSplit ( ) { String raw = getUsername ( ) ; String [ ] split = raw . split ( ";" ) ; return split [ 0 ] ; }
tr	10	public void deleteShowTime ( Date time , Movie movie ) { for ( ShowTime showTime : showTimeDAO . getShowTimes ( movie ) ) { if ( time == showTime . getTime ( ) ) { showTimeDAO . deleteShowTime ( showTime ) ; } } }
tr	6	@ Column ( name = "PRP_MOA_TIPO" ) @ Id public String getPrpMoaTipo ( ) { return prpMoaTipo ; }
tr	4	private boolean setPlayerTwoType ( String playerTwoType ) { m_PlayerTwoType = playerTwoType ; return true ; }
tr	3	private void init ( ) { createChat ( ) ; createDrawingUDP ( ) ; }
tr	6	public final void update ( Graphics g ) { if ( graphics == null ) graphics = g ; shouldClearScreen = true ; raiseWelcomeScreen ( ) ; }
tr	4	public FeatureDataItem ( FeatureVector fv , double score ) { this . fv = fv ; this . score = score ; }
tr	8	@ Override public < T > T accept ( ParseTreeVisitor < ? extends T > visitor ) { if ( visitor instanceof SSTVisitor ) return ( ( SSTVisitor < ? extends T > ) visitor ) . visitComparesignals ( this ) ; else return visitor . visitChildren ( this ) ; }
tr	2	public double getMaxx ( ) { return maxx ; }
tr	9	public void addDiploma ( Diploma diploma ) { boolean notFound = true ; for ( Diploma item : diplomas ) { if ( diploma . getName ( ) . equalsIgnoreCase ( item . getName ( ) ) ) { notFound = false ; break ; } } if ( notFound ) { diplomas . add ( diploma ) ; } }
tr	2	@ Override public void playSound ( ) { }
tr	10	@ Override public void scale ( double x , double y , double z ) { for ( int i = 0 ; i < 4 ; i ++ ) for ( int j = 0 ; j < 4 ; j ++ ) temp . set ( j , i , 0 ) ; temp . set ( 0 , 0 , x ) ; temp . set ( 1 , 1 , y ) ; temp . set ( 2 , 2 , z ) ; temp . set ( 3 , 3 , 1 ) ; this . rightMultiply ( temp ) ; }
tr	10	@ Test public void testMaxPriorityQueueWithSmallSetOfInts ( ) { MaxPriorityQueue < Integer > pq = new MaxPriorityQueue < Integer > ( 20 ) ; pq . insert ( 9 ) ; pq . insert ( 11 ) ; pq . insert ( 2 ) ; pq . insert ( 9 ) ; pq . insert ( 19 ) ; pq . insert ( 2 ) ; assertThat ( pq . delAndGetMaximum ( ) , is ( equalTo ( 19 ) ) ) ; assertThat ( pq . delAndGetMaximum ( ) , is ( equalTo ( 11 ) ) ) ; assertThat ( pq . delAndGetMaximum ( ) , is ( equalTo ( 9 ) ) ) ; }
tr	4	public static RoleDAO getRoleDAO ( ) { if ( roleDAO == null ) { roleDAO = new RoleDAOImpl ( ) ; } return roleDAO ; }
tr	8	public void rectEffect2 ( Graphics g ) { g . fillRect ( ( int ) ( 120 - 60 * Math . sin ( ( double ) effectTime2 * Math . PI / 180 ) ) , ( int ) ( 280 - 60 * Math . sin ( ( double ) effectTime2 * Math . PI / 180 ) ) , ( int ) ( 120 * Math . sin ( ( double ) effectTime2 * Math . PI / 180 ) ) , ( int ) ( 120 * Math . sin ( ( double ) effectTime2 * Math . PI / 180 ) ) ) ; if ( this . effectTime2 != 120 ) { this . effectTime2 += 10 ; } }
tr	2	public Tela_Usuario_Cadastro ( ) { initComponents ( ) ; }
tr	5	public boolean isOfType ( String tipus ) { return this . tipus . getNom ( ) . equals ( tipus ) ; }
tr	2	public void setButtonFunction ( int buttonFunction ) { this . buttonFunction = buttonFunction ; }
tr	10	public WordnetBLOOMS ( String outputFile ) { this . outputFile = "" ; ontology1 = null ; ontology2 = null ; ont1NameMapper = new HashMap ( ) ; ont2NameMapper = new HashMap ( ) ; ont1ConceptToTreeMap = new HashMap ( ) ; ont2ConceptToTreeMap = new HashMap ( ) ; this . outputFile = outputFile ; }
tr	10	@ Before public void setUp ( ) { ExecutionEnvironment environment = new ExecutionEnvironment ( ) ; publicService = new PublicService ( "Improvements service" , environment ) ; infoRequestsDep = new PublicServiceDepartment ( publicService , "infoRequestsDep_0" ) ; informationResponsibleServant = new InformationResponsible ( infoRequestsDep , "Karpenko" , "Petro" , "Ivanovych" ) ; }
tr	4	public HashMap < double , Integer > getResult ( ) { return this . result ; }
tr	2	public int getScore ( ) { return scroe ; }
tr	6	Node ( String current , Node parent , double distance ) { this . state = current ; this . parent = parent ; this . distance = distance ; }
tr	2	public void setGold ( int oro ) { this . oro = oro ; }
tr	5	@ Override public synchronized FingerprintSettings setRadius ( final int iRadius ) { this . m_iRadius = iRadius ; return this ; }
tr	5	@ Override public void tableChanged ( TableModelEvent e ) { fireTableStructureChanged ( ) ; }
tr	1	public void getNewAbility ( ) { }
tr	10	protected void refreshConfig ( ) { try { getConfig ( ) . save ( configFile ) ; reloadConfig ( ) ; } catch ( IOException e ) { getLogger ( ) . warning ( "Failed to write changed config.yml: " + e . getMessage ( ) ) ; } }
tr	9	@ Override protected synchronized int computeMove ( Board b , long endTime ) { try { wait ( ) ; } catch ( InterruptedException e ) { } return nextMove ; }
tr	4	@ XmlAttribute public Date getModifiedDate ( ) { return modifiedDate ; }
tr	1	public boolean isFinished ( ) { return this . isFinished ; }
tr	1	public weight ( double weight ) { this . weight = weight ; }
tr	7	public ClientProxy ( String host , int port , String username , String password ) { this . host = host ; this . port = port ; this . username = username ; this . password = password ; this . secure = true ; }
tr	8	public void printTopDownBorder ( ) { printLine ( getStyle ( ) . getTopDownLeftIntersection ( ) , getStyle ( ) . getTopDownRightIntersection ( ) , getStyle ( ) . getTopDownCenterIntersection ( ) , getStyle ( ) . getTopDownRightLeftIntersection ( ) , getStyle ( ) . getTopDownRightIntersection ( ) , getStyle ( ) . getTopDownBorder ( ) ) ; }
tr	9	public LogService ( Writer writer ) { this . queue = new LinkedBlockingQueue < String > ( ) ; this . loggerThread = new LoggerThread ( ) ; this . writer = new PrintWriter ( writer ) ; }
tr	10	public ListNode rotateRight ( ListNode head , int n ) { int length = 0 ; if ( head == null ) { return null ; } if ( n == 0 ) { return head ; } ListNode currentNode = head ; while ( currentNode != null ) { length ++ ; currentNode = currentNode . next ; } n = n % length ; if ( length == 1 || n == 0 ) { return head ; } int count = 0 ; currentNode = head ; while ( count != n ) { count ++ ; currentNode = currentNode . next ; } currentNode = currentNode . next ; ListNode temp = head ; ListNode tempLast = null ; while ( currentNode != null ) { if ( currentNode . next == null ) { tempLast = currentNode ; } temp = temp . next ; currentNode = currentNode . next ; } currentNode = temp . next ; temp . next = null ; if ( tempLast == null ) { tempLast = currentNode ; while ( tempLast . next != null ) { tempLast = tempLast . next ; } } tempLast . next = head ; head = currentNode ; return head ; }
tr	4	@ Override public EOF getEOF ( ) { return this . eof ; }
tr	6	private Activity getActivity ( String edgeType ) throws ProvBuildException { if ( _current == null || ! ( _current instanceof Activity ) ) { throw new ProvBuildException ( edgeType + " only applies to activities" ) ; } return ( Activity ) _current ; }
tr	2	public int getMinuteTickMarkFrequency ( ) { return minuteTickMarkFrequency ; }
tr	10	public User destroyBlock ( String id ) throws WeiboException { return new User ( http . post ( getBaseURL ( ) + "blocks/destroy.json" , new PostParameter [ ] { new PostParameter ( "id" , id ) } , true ) . asJSONObject ( ) ) ; }
tr	10	public Set < Suit > getAllUniqueSuits ( ) { Set < Suit > suitSet = new HashSet < Suit > ( ) ; for ( Card c : cards ) { suitSet . add ( c . suit ) ; } return suitSet ; }
tr	7	public void setPopulation ( Population p ) { for ( int i = 0 ; i < operators . size ( ) ; ++ i ) { operators . get ( i ) . setPopulation ( p ) ; } }
tr	4	byte getState ( ) { super . setupFields ( ) ; return ( byte ) fields [ 0 ] . getValue ( ) ; }
tr	2	public int getEndX ( ) { return endX ; }
tr	1	public TeXWordFinder ( ) { super ( ) ; }
tr	1	public FloatPatternFormat ( ) { }
tr	5	@ Override public Shape getShape ( int shapeIndex ) { return myShapePalette . getShape ( shapeIndex ) ; }
tr	3	public Matrix m ( ) { return core . m ( ) ; }
tr	9	@ Override public boolean equals ( Object other ) { if ( other instanceof Entity ) { return originalObject . getId ( ) == ( ( Entity ) other ) . getObject ( ) . getId ( ) && originalObject . getClass ( ) . equals ( ( ( Entity ) other ) . getObject ( ) . getClass ( ) ) ; } else { return false ; } }
tr	3	public void setResult ( Object result ) { this . result = result ; }
tr	9	public EnumIdColumn ( String n , Field f , Field embedded , boolean key , boolean generatedValue , boolean foreignKey ) { super ( n , f , embedded , key , generatedValue , foreignKey ) ; }
tr	6	public void setClient ( ) throws IOException { client = new SocketClient ( ip , this ) ; client . start ( ) ; }
tr	2	public int getMask ( ) { return mask ; }
tr	2	public int getCurUserId ( ) { return curUserId ; }
tr	6	private static InputStream openResourceStream ( String resourcePath ) { return ClassUsecaseTest . class . getResourceAsStream ( resourcePath ) ; }
tr	1	private RobotPreProcessorsProvider ( ) { }
tr	7	@ Override public int hashCode ( ) { final int prime = 31 ; int result = 1 ; result = prime * result + ( ( declaration == null ) ? 0 : declaration . hashCode ( ) ) ; result = prime * result + ( ( ident == null ) ? 0 : ident . hashCode ( ) ) ; result = prime * result + ( ( statementSequence == null ) ? 0 : statementSequence . hashCode ( ) ) ; return result ; }
tr	2	public long getId ( ) { return id ; }
tr	9	@ Override public boolean equals ( Object obj ) { boolean result = false ; if ( this == obj ) { result = true ; } else if ( obj != null && obj instanceof Contributor ) { Contributor other = ( Contributor ) obj ; if ( ( this . domain == null && this . domain == other . domain ) || ( this . domain != null && this . domain . equals ( other . domain ) ) ) { if ( ( this . name == null && this . name == other . name ) || ( this . name != null && this . name . equals ( other . name ) ) ) { result = true ; } } } return result ; }
tr	9	public static void main ( String [ ] args ) { PairManager pm1 = new ExplicitPairManager1 ( ) ; PairManager pm2 = new ExplicitPairManager2 ( ) ; testApproaches ( pm1 , pm2 ) ; }
tr	1	public PacketRegistered ( ) { }
tr	1	protected RSession ( ) { }
tr	4	public void activateTerminal ( ) { new Thread ( terminalReader ) . start ( ) ; }
tr	2	public int getLineBufferSize ( ) { return lineBufferSize ; }
tr	4	public int getIntWidth ( ) { return ( int ) Math . ceil ( width ) ; }
tr	1	public PlacementListToken ( ) { }
tr	8	protected static void validateCertificateChain ( Certificate [ ] ownCerts , Certificate [ ] native_certs ) throws Exception { if ( ownCerts == null ) return ; if ( native_certs == null ) throw new Exception ( "Unable to validate certificate chain. Native entry did not have a certificate chain at all" ) ; if ( ownCerts . length != native_certs . length ) throw new Exception ( "Unable to validate certificate chain. Chain differs in length [" + ownCerts . length + " vs " + native_certs . length + "]" ) ; for ( int i = 0 ; i < ownCerts . length ; i ++ ) if ( ! ownCerts [ i ] . equals ( native_certs [ i ] ) ) throw new Exception ( "Certificate mismatch: " + ownCerts [ i ] + " != " + native_certs [ i ] ) ; }
tr	5	public Tile get ( int x , int y ) { return mapData [ x ] [ y ] ; }
tr	10	public void addElixir ( String player , int amount ) { if ( elixir . containsKey ( player ) ) elixir . put ( player , elixir . get ( player ) + amount ) ; COBAPI . updateStats ( player ) ; }
tr	4	@ Before public void runBeforeEveryTest ( ) { AIDebuggingOutput . debugOn = false ; }
tr	8	public boolean setGroup ( String newGroup ) { if ( Group . existGroup ( newGroup ) ) { group = newGroup . toLowerCase ( ) ; dirty = true ; return true ; } return false ; }
tr	1	public void remove ( ) { }
tr	7	public Vector2f add ( Vector2f r ) { return new Vector2f ( x + r . getX ( ) , y + r . getY ( ) ) ; }
tr	2	public boolean getFadeTooltip ( ) { return fadeTooltip ; }
tr	2	public IntegerModComparator ( int n ) { this . n = n ; }
tr	2	private void doActionExit ( ) { saveChanges ( ) ; }
tr	1	public GenArrayList ( ) { this ( 10 ) ; }
tr	9	public static void main ( String [ ] args ) { SearchInsertPosition o = new SearchInsertPosition ( ) ; System . out . println ( "2\t" + o . searchInsert ( new int [ ] { 1 , 3 , 5 , 6 } , 5 ) ) ; System . out . println ( "1\t" + o . searchInsert ( new int [ ] { 1 , 3 , 5 , 6 } , 2 ) ) ; System . out . println ( "4\t" + o . searchInsert ( new int [ ] { 1 , 3 , 5 , 6 } , 7 ) ) ; System . out . println ( "0\t" + o . searchInsert ( new int [ ] { 1 , 3 , 5 , 6 } , 0 ) ) ; System . out . println ( "0\t" + o . searchInsert ( new int [ ] { 1 , 3 , 5 , 6 , 7 } , 0 ) ) ; System . out . println ( "1\t" + o . searchInsert ( new int [ ] { 1 , 3 , 5 , 6 , 7 } , 2 ) ) ; }
tr	9	public void readGrades ( ) { System . out . println ( "Number of grades for A:  " + a ) ; System . out . println ( "Number of grades for B:  " + b ) ; System . out . println ( "Number of grades for C:  " + c ) ; System . out . println ( "Number of grades for D:  " + d ) ; System . out . println ( "Number of grades for F:  " + f ) ; }
tr	8	public void sendText ( String text ) { Packet2Text test = new Packet2Text ( ) ; test . text = text ; Packet . send ( out , test ) ; }
tr	9	public Gun ( Calibre newCalibre , FiringStyle newStyle , GunType newType ) { this . calibre = newCalibre ; this . type = newType ; }
tr	3	public final void setDebugMode ( boolean debug ) { if ( debug != this . debug ) { this . debug = debug ; doSetDebugMode ( ) ; } }
tr	1	public void levelWon ( ) { levelWon = true ; }
tr	3	public Money getOCashbackAmount ( ) { return oCashbackAmount ; }
tr	10	public void declareStartSymbol ( String symbol ) { final Symbol nonTerm = grammar . getSymbol ( symbol ) ; if ( nonTerm instanceof NonTerminal ) { grammar . setStartSymbol ( ( NonTerminal ) nonTerm ) ; } else { throw new GrammarBuilderError ( "Start symbol has to be a Non Terminal" ) ; } }
tr	1	private static short [ ] init__Scanner_indicies_0 ( ) { return new short [ ] { 0 , 2 , 3 , 4 , 5 , 6 , 8 , 9 , 7 , 0 , 7 , 7 , 7 , 1 , 10 , 11 , 10 , 10 , 10 , 10 , 10 , 1 , 12 , 13 , 12 , 12 , 12 , 12 , 12 , 1 , 14 , 15 , 16 , 17 , 18 , 19 , 21 , 22 , 20 , 14 , 20 , 20 , 20 , 1 , 23 , 25 , 24 , 24 , 24 , 24 , 1 , 27 , 26 , 26 , 26 , 26 , 1 , 28 , 29 , 31 , 30 , 32 , 30 , 30 , 30 , 1 , 34 , 33 , 33 , 33 , 33 , 1 , 35 , 36 , 36 , 38 , 39 , 40 , 35 , 37 , 1 , 42 , 41 , 1 , 43 , 44 , 42 , 43 , 41 , 1 , 45 , 46 , 45 , 1 , 21 , 47 , 49 , 48 , 21 , 48 , 48 , 48 , 1 , 51 , 50 , 50 , 50 , 50 , 1 , 52 , 53 , 53 , 50 , 54 , 51 , 55 , 53 , 50 , 53 , 53 , 52 , 50 , 50 , 50 , 50 , 1 , 56 , 57 , 57 , 58 , 59 , 57 , 57 , 57 , 56 , 1 , 60 , 1 , 61 , 62 , 63 , 64 , 66 , 65 , 61 , 65 , 65 , 65 , 1 , 67 , 68 , 69 , 70 , 72 , 71 , 67 , 71 , 71 , 71 , 1 , 73 , 74 , 75 , 73 , 73 , 1 , 76 , 77 , 76 , 1 , 78 , 59 , 78 , 1 , 73 , 79 , 74 , 75 , 73 , 73 , 80 , 73 , 80 , 73 , 80 , 73 , 73 , 1 , 74 , 75 , 73 , 73 , 73 , 1 , 74 , 75 , 73 , 73 , 81 , 73 , 81 , 73 , 81 , 73 , 73 , 1 , 74 , 75 , 73 , 73 , 82 , 73 , 82 , 73 , 82 , 73 , 73 , 1 , 74 , 75 , 73 , 73 , 83 , 73 , 83 , 73 , 83 , 73 , 73 , 1 , 74 , 75 , 73 , 73 , 84 , 73 , 84 , 73 , 84 , 73 , 73 , 1 , 74 , 75 , 73 , 73 , 85 , 73 , 85 , 73 , 85 , 73 , 73 , 1 , 74 , 75 , 73 , 73 , 73 , 1 , 86 , 74 , 87 , 86 , 86 , 1 , 86 , 88 , 74 , 87 , 86 , 86 , 89 , 86 , 89 , 86 , 89 , 86 , 86 , 1 , 74 , 87 , 86 , 86 , 86 , 1 , 74 , 87 , 86 , 86 , 90 , 86 , 90 , 86 , 90 , 86 , 86 , 1 , 74 , 87 , 86 , 86 , 91 , 86 , 91 , 86 , 91 , 86 , 86 , 1 , 74 , 87 , 86 , 86 , 92 , 86 , 92 , 86 , 92 , 86 , 86 , 1 , 74 , 87 , 86 , 86 , 93 , 86 , 93 , 86 , 93 , 86 , 86 , 1 , 74 , 87 , 86 , 86 , 94 , 86 , 94 , 86 , 94 , 86 , 86 , 1 , 74 , 87 , 86 , 86 , 86 , 1 , 96 , 95 , 95 , 95 , 95 , 1 , 76 , 95 , 96 , 77 , 95 , 76 , 95 , 95 , 95 , 95 , 1 , 95 , 95 , 95 , 97 , 97 , 97 , 95 , 1 , 98 , 95 , 96 , 77 , 95 , 98 , 99 , 99 , 95 , 99 , 95 , 95 , 1 , 98 , 95 , 96 , 77 , 95 , 98 , 100 , 100 , 95 , 100 , 95 , 95 , 1 , 98 , 95 , 96 , 77 , 95 , 98 , 101 , 101 , 95 , 101 , 95 , 95 , 1 , 98 , 95 , 96 , 77 , 95 , 98 , 102 , 102 , 95 , 102 , 95 , 95 , 1 , 98 , 95 , 96 , 77 , 95 , 98 , 103 , 103 , 95 , 103 , 95 , 95 , 1 , 98 , 95 , 96 , 77 , 95 , 98 , 95 , 95 , 95 , 95 , 1 , 50 , 50 , 50 , 104 , 104 , 104 , 50 , 1 , 105 , 53 , 53 , 50 , 54 , 51 , 55 , 53 , 50 , 53 , 53 , 105 , 106 , 106 , 50 , 106 , 50 , 50 , 1 , 105 , 53 , 53 , 50 , 54 , 51 , 55 , 53 , 50 , 53 , 53 , 105 , 107 , 107 , 50 , 107 , 50 , 50 , 1 , 105 , 53 , 53 , 50 , 54 , 51 , 55 , 53 , 50 , 53 , 53 , 105 , 108 , 108 , 50 , 108 , 50 , 50 , 1 , 105 , 53 , 53 , 50 , 54 , 51 , 55 , 53 , 50 , 53 , 53 , 105 , 109 , 109 , 50 , 109 , 50 , 50 , 1 , 105 , 53 , 53 , 50 , 54 , 51 , 55 , 53 , 50 , 53 , 53 , 105 , 110 , 110 , 50 , 110 , 50 , 50 , 1 , 105 , 53 , 53 , 50 , 54 , 51 , 55 , 53 , 50 , 53 , 53 , 105 , 50 , 50 , 50 , 50 , 1 , 111 , 44 , 112 , 112 , 111 , 1 , 111 , 112 , 112 , 111 , 1 , 112 , 112 , 113 , 1 , 43 , 44 , 43 , 113 , 1 , 114 , 1 , 115 , 1 , 116 , 1 , 43 , 44 , 43 , 1 , 117 , 1 , 116 , 1 , 33 , 33 , 33 , 118 , 118 , 118 , 33 , 1 , 119 , 119 , 119 , 120 , 120 , 120 , 119 , 1 , 121 , 123 , 122 , 122 , 122 , 122 , 1 , 123 , 122 , 122 , 122 , 122 , 1 , 122 , 122 , 122 , 124 , 124 , 124 , 122 , 1 , 125 , 125 , 125 , 126 , 126 , 126 , 125 , 1 , 26 , 26 , 26 , 127 , 127 , 127 , 26 , 1 , 128 , 128 , 128 , 129 , 129 , 129 , 128 , 1 , 130 , 125 , 125 , 125 , 125 , 1 , 131 , 131 , 131 , 132 , 132 , 132 , 131 , 1 , 133 , 133 , 133 , 134 , 134 , 134 , 133 , 1 , 135 , 137 , 136 , 136 , 136 , 136 , 1 , 139 , 138 , 138 , 138 , 138 , 1 , 140 , 141 , 143 , 142 , 144 , 142 , 142 , 142 , 1 , 146 , 145 , 145 , 145 , 145 , 1 , 147 , 148 , 148 , 150 , 151 , 152 , 147 , 149 , 1 , 154 , 153 , 1 , 155 , 156 , 154 , 155 , 153 , 1 , 157 , 158 , 157 , 1 , 159 , 160 , 162 , 161 , 159 , 161 , 161 , 161 , 1 , 164 , 163 , 163 , 163 , 163 , 1 , 165 , 166 , 166 , 163 , 167 , 164 , 168 , 166 , 163 , 166 , 166 , 165 , 163 , 163 , 163 , 163 , 1 , 169 , 170 , 170 , 171 , 172 , 170 , 170 , 170 , 169 , 1 , 173 , 1 , 174 , 175 , 176 , 177 , 179 , 178 , 174 , 178 , 178 , 178 , 1 , 180 , 181 , 182 , 183 , 185 , 184 , 180 , 184 , 184 , 184 , 1 , 186 , 187 , 188 , 186 , 186 , 1 , 189 , 190 , 189 , 1 , 191 , 172 , 191 , 1 , 186 , 192 , 187 , 188 , 186 , 186 , 193 , 186 , 193 , 186 , 193 , 186 , 186 , 1 , 187 , 188 , 186 , 186 , 186 , 1 , 187 , 188 , 186 , 186 , 194 , 186 , 194 , 186 , 194 , 186 , 186 , 1 , 187 , 188 , 186 , 186 , 195 , 186 , 195 , 186 , 195 , 186 , 186 , 1 , 187 , 188 , 186 , 186 , 196 , 186 , 196 , 186 , 196 , 186 , 186 , 1 , 187 , 188 , 186 , 186 , 197 , 186 , 197 , 186 , 197 , 186 , 186 , 1 , 187 , 188 , 186 , 186 , 198 , 186 , 198 , 186 , 198 , 186 , 186 , 1 , 187 , 188 , 186 , 186 , 186 , 1 , 199 , 187 , 200 , 199 , 199 , 1 , 199 , 201 , 187 , 200 , 199 , 199 , 202 , 199 , 202 , 199 , 202 , 199 , 199 , 1 , 187 , 200 , 199 , 199 , 199 , 1 , 187 , 200 , 199 , 199 , 203 , 199 , 203 , 199 , 203 , 199 , 199 , 1 , 187 , 200 , 199 , 199 , 204 , 199 , 204 , 199 , 204 , 199 , 199 , 1 , 187 , 200 , 199 , 199 , 205 , 199 , 205 , 199 , 205 , 199 , 199 , 1 , 187 , 200 , 199 , 199 , 206 , 199 , 206 , 199 , 206 , 199 , 199 , 1 , 187 , 200 , 199 , 199 , 207 , 199 , 207 , 199 , 207 , 199 , 199 , 1 , 187 , 200 , 199 , 199 , 199 , 1 , 209 , 208 , 208 , 208 , 208 , 1 , 189 , 208 , 209 , 190 , 208 , 189 , 208 , 208 , 208 , 208 , 1 , 208 , 208 , 208 , 210 , 210 , 210 , 208 , 1 , 211 , 208 , 209 , 190 , 208 , 211 , 212 , 212 , 208 , 212 , 208 , 208 , 1 , 211 , 208 , 209 , 190 , 208 , 211 , 213 , 213 , 208 , 213 , 208 , 208 , 1 , 211 , 208 , 209 , 190 , 208 , 211 , 214 , 214 , 208 , 214 , 208 , 208 , 1 , 211 , 208 , 209 , 190 , 208 , 211 , 215 , 215 , 208 , 215 , 208 , 208 , 1 , 211 , 208 , 209 , 190 , 208 , 211 , 216 , 216 , 208 , 216 , 208 , 208 , 1 , 211 , 208 , 209 , 190 , 208 , 211 , 208 , 208 , 208 , 208 , 1 , 163 , 163 , 163 , 217 , 217 , 217 , 163 , 1 , 218 , 166 , 166 , 163 , 167 , 164 , 168 , 166 , 163 , 166 , 166 , 218 , 219 , 219 , 163 , 219 , 163 , 163 , 1 , 218 , 166 , 166 , 163 , 167 , 164 , 168 , 166 , 163 , 166 , 166 , 218 , 220 , 220 , 163 , 220 , 163 , 163 , 1 , 218 , 166 , 166 , 163 , 167 , 164 , 168 , 166 , 163 , 166 , 166 , 218 , 221 , 221 , 163 , 221 , 163 , 163 , 1 , 218 , 166 , 166 , 163 , 167 , 164 , 168 , 166 , 163 , 166 , 166 , 218 , 222 , 222 , 163 , 222 , 163 , 163 , 1 , 218 , 166 , 166 , 163 , 167 , 164 , 168 , 166 , 163 , 166 , 166 , 218 , 223 , 223 , 163 , 223 , 163 , 163 , 1 , 218 , 166 , 166 , 163 , 167 , 164 , 168 , 166 , 163 , 166 , 166 , 218 , 163 , 163 , 163 , 163 , 1 , 224 , 156 , 225 , 225 , 224 , 1 , 224 , 225 , 225 , 224 , 1 , 225 , 225 , 226 , 1 , 155 , 156 , 155 , 226 , 1 , 227 , 1 , 228 , 1 , 229 , 1 , 155 , 156 , 155 , 1 , 230 , 1 , 229 , 1 , 145 , 145 , 145 , 231 , 231 , 231 , 145 , 1 , 232 , 232 , 232 , 233 , 233 , 233 , 232 , 1 , 234 , 236 , 235 , 235 , 235 , 235 , 1 , 236 , 235 , 235 , 235 , 235 , 1 , 235 , 235 , 235 , 237 , 237 , 237 , 235 , 1 , 238 , 238 , 238 , 239 , 239 , 239 , 238 , 1 , 138 , 138 , 138 , 240 , 240 , 240 , 138 , 1 , 241 , 241 , 241 , 242 , 242 , 242 , 241 , 1 , 243 , 243 , 243 , 244 , 244 , 244 , 243 , 1 , 245 , 245 , 245 , 246 , 246 , 246 , 245 , 1 , 248 , 247 , 247 , 247 , 247 , 1 , 247 , 247 , 247 , 249 , 249 , 249 , 247 , 1 , 250 , 251 , 252 , 253 , 254 , 255 , 257 , 258 , 256 , 250 , 256 , 256 , 256 , 1 , 259 , 260 , 259 , 259 , 259 , 259 , 259 , 1 , 261 , 262 , 263 , 264 , 265 , 266 , 267 , 268 , 264 , 261 , 264 , 264 , 264 , 264 , 1 , 269 , 270 , 269 , 1 , 271 , 273 , 272 , 272 , 272 , 272 , 1 , 275 , 274 , 274 , 274 , 274 , 1 , 276 , 277 , 278 , 274 , 279 , 280 , 281 , 275 , 274 , 276 , 274 , 274 , 274 , 274 , 1 , 282 , 284 , 283 , 285 , 283 , 283 , 283 , 1 , 287 , 286 , 286 , 286 , 286 , 1 , 288 , 289 , 290 , 291 , 286 , 292 , 293 , 294 , 287 , 286 , 288 , 286 , 286 , 286 , 286 , 1 , 295 , 296 , 296 , 298 , 299 , 300 , 295 , 297 , 1 , 302 , 301 , 1 , 303 , 304 , 302 , 303 , 301 , 1 , 305 , 306 , 305 , 1 , 307 , 251 , 308 , 254 , 255 , 257 , 307 , 1 , 257 , 309 , 311 , 310 , 257 , 310 , 310 , 310 , 1 , 313 , 312 , 312 , 312 , 312 , 1 , 314 , 315 , 315 , 312 , 316 , 313 , 317 , 315 , 312 , 315 , 315 , 314 , 312 , 312 , 312 , 312 , 1 , 318 , 319 , 319 , 320 , 321 , 319 , 319 , 319 , 318 , 1 , 322 , 1 , 323 , 324 , 325 , 326 , 328 , 327 , 323 , 327 , 327 , 327 , 1 , 329 , 330 , 331 , 332 , 334 , 333 , 329 , 333 , 333 , 333 , 1 , 335 , 336 , 337 , 335 , 335 , 1 , 338 , 339 , 338 , 1 , 340 , 321 , 340 , 1 , 335 , 341 , 336 , 337 , 335 , 335 , 342 , 335 , 342 , 335 , 342 , 335 , 335 , 1 , 336 , 337 , 335 , 335 , 335 , 1 , 336 , 337 , 335 , 335 , 343 , 335 , 343 , 335 , 343 , 335 , 335 , 1 , 336 , 337 , 335 , 335 , 344 , 335 , 344 , 335 , 344 , 335 , 335 , 1 , 336 , 337 , 335 , 335 , 345 , 335 , 345 , 335 , 345 , 335 , 335 , 1 , 336 , 337 , 335 , 335 , 346 , 335 , 346 , 335 , 346 , 335 , 335 , 1 , 336 , 337 , 335 , 335 , 347 , 335 , 347 , 335 , 347 , 335 , 335 , 1 , 336 , 337 , 335 , 335 , 335 , 1 , 348 , 336 , 349 , 348 , 348 , 1 , 348 , 350 , 336 , 349 , 348 , 348 , 351 , 348 , 351 , 348 , 351 , 348 , 348 , 1 , 336 , 349 , 348 , 348 , 348 , 1 , 336 , 349 , 348 , 348 , 352 , 348 , 352 , 348 , 352 , 348 , 348 , 1 , 336 , 349 , 348 , 348 , 353 , 348 , 353 , 348 , 353 , 348 , 348 , 1 , 336 , 349 , 348 , 348 , 354 , 348 , 354 , 348 , 354 , 348 , 348 , 1 , 336 , 349 , 348 , 348 , 355 , 348 , 355 , 348 , 355 , 348 , 348 , 1 , 336 , 349 , 348 , 348 , 356 , 348 , 356 , 348 , 356 , 348 , 348 , 1 , 336 , 349 , 348 , 348 , 348 , 1 , 358 , 357 , 357 , 357 , 357 , 1 , 338 , 357 , 358 , 339 , 357 , 338 , 357 , 357 , 357 , 357 , 1 , 357 , 357 , 357 , 359 , 359 , 359 , 357 , 1 , 360 , 357 , 358 , 339 , 357 , 360 , 361 , 361 , 357 , 361 , 357 , 357 , 1 , 360 , 357 , 358 , 339 , 357 , 360 , 362 , 362 , 357 , 362 , 357 , 357 , 1 , 360 , 357 , 358 , 339 , 357 , 360 , 363 , 363 , 357 , 363 , 357 , 357 , 1 , 360 , 357 , 358 , 339 , 357 , 360 , 364 , 364 , 357 , 364 , 357 , 357 , 1 , 360 , 357 , 358 , 339 , 357 , 360 , 365 , 365 , 357 , 365 , 357 , 357 , 1 , 360 , 357 , 358 , 339 , 357 , 360 , 357 , 357 , 357 , 357 , 1 , 312 , 312 , 312 , 366 , 366 , 366 , 312 , 1 , 367 , 315 , 315 , 312 , 316 , 313 , 317 , 315 , 312 , 315 , 315 , 367 , 368 , 368 , 312 , 368 , 312 , 312 , 1 , 367 , 315 , 315 , 312 , 316 , 313 , 317 , 315 , 312 , 315 , 315 , 367 , 369 , 369 , 312 , 369 , 312 , 312 , 1 , 367 , 315 , 315 , 312 , 316 , 313 , 317 , 315 , 312 , 315 , 315 , 367 , 370 , 370 , 312 , 370 , 312 , 312 , 1 , 367 , 315 , 315 , 312 , 316 , 313 , 317 , 315 , 312 , 315 , 315 , 367 , 371 , 371 , 312 , 371 , 312 , 312 , 1 , 367 , 315 , 315 , 312 , 316 , 313 , 317 , 315 , 312 , 315 , 315 , 367 , 372 , 372 , 312 , 372 , 312 , 312 , 1 , 367 , 315 , 315 , 312 , 316 , 313 , 317 , 315 , 312 , 315 , 315 , 367 , 312 , 312 , 312 , 312 , 1 , 373 , 304 , 374 , 374 , 373 , 1 , 373 , 374 , 374 , 373 , 1 , 374 , 374 , 375 , 1 , 303 , 304 , 303 , 375 , 1 , 376 , 1 , 377 , 1 , 378 , 1 , 303 , 304 , 303 , 1 , 379 , 1 , 378 , 1 , 286 , 286 , 286 , 380 , 380 , 380 , 286 , 1 , 381 , 289 , 290 , 291 , 286 , 292 , 293 , 294 , 287 , 286 , 381 , 382 , 382 , 286 , 382 , 286 , 286 , 1 , 381 , 289 , 290 , 291 , 286 , 292 , 293 , 294 , 287 , 286 , 381 , 383 , 383 , 286 , 383 , 286 , 286 , 1 , 381 , 289 , 290 , 291 , 286 , 292 , 293 , 294 , 287 , 286 , 381 , 384 , 384 , 286 , 384 , 286 , 286 , 1 , 381 , 289 , 290 , 291 , 286 , 292 , 293 , 294 , 287 , 286 , 381 , 385 , 385 , 286 , 385 , 286 , 286 , 1 , 381 , 289 , 290 , 291 , 286 , 292 , 293 , 294 , 287 , 286 , 381 , 386 , 386 , 286 , 386 , 286 , 286 , 1 , 381 , 289 , 290 , 291 , 286 , 292 , 293 , 294 , 287 , 286 , 381 , 286 , 286 , 286 , 286 , 1 , 288 , 289 , 290 , 291 , 286 , 292 , 293 , 294 , 287 , 286 , 387 , 288 , 286 , 286 , 286 , 286 , 1 , 288 , 289 , 290 , 291 , 286 , 292 , 293 , 294 , 287 , 286 , 388 , 288 , 286 , 286 , 286 , 286 , 1 , 288 , 289 , 291 , 286 , 292 , 293 , 294 , 287 , 286 , 288 , 286 , 286 , 286 , 286 , 1 , 274 , 274 , 274 , 389 , 389 , 389 , 274 , 1 , 390 , 277 , 278 , 274 , 279 , 280 , 281 , 275 , 274 , 390 , 391 , 391 , 274 , 391 , 274 , 274 , 1 , 390 , 277 , 278 , 274 , 279 , 280 , 281 , 275 , 274 , 390 , 392 , 392 , 274 , 392 , 274 , 274 , 1 , 390 , 277 , 278 , 274 , 279 , 280 , 281 , 275 , 274 , 390 , 393 , 393 , 274 , 393 , 274 , 274 , 1 , 390 , 277 , 278 , 274 , 279 , 280 , 281 , 275 , 274 , 390 , 394 , 394 , 274 , 394 , 274 , 274 , 1 , 390 , 277 , 278 , 274 , 279 , 280 , 281 , 275 , 274 , 390 , 395 , 395 , 274 , 395 , 274 , 274 , 1 , 390 , 277 , 278 , 274 , 279 , 280 , 281 , 275 , 274 , 390 , 274 , 274 , 274 , 274 , 1 , 264 , 264 , 264 , 396 , 396 , 396 , 264 , 1 , 397 , 262 , 263 , 264 , 265 , 266 , 267 , 268 , 264 , 397 , 398 , 398 , 264 , 398 , 264 , 264 , 1 , 397 , 262 , 263 , 264 , 265 , 266 , 267 , 268 , 264 , 397 , 399 , 399 , 264 , 399 , 264 , 264 , 1 , 397 , 262 , 263 , 264 , 265 , 266 , 267 , 268 , 264 , 397 , 400 , 400 , 264 , 400 , 264 , 264 , 1 , 397 , 262 , 263 , 264 , 265 , 266 , 267 , 268 , 264 , 397 , 401 , 401 , 264 , 401 , 264 , 264 , 1 , 397 , 262 , 263 , 264 , 265 , 266 , 267 , 268 , 264 , 397 , 402 , 402 , 264 , 402 , 264 , 264 , 1 , 397 , 262 , 263 , 264 , 265 , 266 , 267 , 268 , 264 , 397 , 264 , 264 , 264 , 264 , 1 , 403 , 404 , 405 , 406 , 407 , 408 , 403 , 1 , 410 , 409 , 409 , 409 , 409 , 1 , 403 , 404 , 405 , 409 , 406 , 407 , 408 , 410 , 409 , 403 , 409 , 409 , 409 , 409 , 1 , 409 , 409 , 409 , 411 , 411 , 411 , 409 , 1 , 412 , 404 , 405 , 409 , 406 , 407 , 408 , 410 , 409 , 412 , 413 , 413 , 409 , 413 , 409 , 409 , 1 , 412 , 404 , 405 , 409 , 406 , 407 , 408 , 410 , 409 , 412 , 414 , 414 , 409 , 414 , 409 , 409 , 1 , 412 , 404 , 405 , 409 , 406 , 407 , 408 , 410 , 409 , 412 , 415 , 415 , 409 , 415 , 409 , 409 , 1 , 412 , 404 , 405 , 409 , 406 , 407 , 408 , 410 , 409 , 412 , 416 , 416 , 409 , 416 , 409 , 409 , 1 , 412 , 404 , 405 , 409 , 406 , 407 , 408 , 410 , 409 , 412 , 417 , 417 , 409 , 417 , 409 , 409 , 1 , 412 , 404 , 405 , 409 , 406 , 407 , 408 , 410 , 409 , 412 , 409 , 409 , 409 , 409 , 1 , 418 , 419 , 420 , 421 , 243 , 422 , 423 , 420 , 424 , 425 , 243 , 420 , 418 , 243 , 243 , 243 , 243 , 1 , 426 , 15 , 16 , 427 , 428 , 17 , 18 , 19 , 427 , 21 , 22 , 20 , 427 , 426 , 20 , 20 , 20 , 1 , 418 , 429 , 420 , 421 , 131 , 430 , 431 , 420 , 432 , 433 , 131 , 420 , 418 , 131 , 131 , 131 , 131 , 1 , 434 , 435 , 436 , 437 , 438 , 439 , 436 , 440 , 436 , 434 , 1 , 441 , 442 , 443 , 444 , 26 , 445 , 446 , 443 , 447 , 27 , 26 , 443 , 441 , 26 , 26 , 26 , 26 , 1 , 448 , 449 , 450 , 451 , 452 , 33 , 453 , 454 , 451 , 455 , 34 , 33 , 451 , 448 , 33 , 33 , 33 , 33 , 1 , 456 , 15 , 457 , 458 , 18 , 19 , 457 , 21 , 457 , 456 , 1 , 459 , 449 , 450 , 451 , 452 , 33 , 453 , 454 , 451 , 455 , 34 , 33 , 451 , 459 , 460 , 460 , 33 , 460 , 33 , 33 , 1 , 448 , 449 , 450 , 16 , 451 , 452 , 461 , 453 , 454 , 451 , 455 , 463 , 462 , 451 , 448 , 33 , 462 , 462 , 462 , 1 , 448 , 449 , 450 , 451 , 452 , 33 , 453 , 454 , 451 , 455 , 464 , 119 , 451 , 448 , 33 , 119 , 119 , 119 , 1 , 465 , 466 , 450 , 467 , 468 , 119 , 469 , 470 , 467 , 471 , 464 , 119 , 467 , 465 , 119 , 119 , 119 , 119 , 1 , 472 , 466 , 450 , 467 , 468 , 119 , 469 , 470 , 467 , 471 , 464 , 119 , 467 , 472 , 473 , 473 , 119 , 473 , 119 , 119 , 1 , 465 , 466 , 450 , 16 , 467 , 468 , 462 , 469 , 470 , 467 , 471 , 463 , 462 , 467 , 465 , 119 , 462 , 462 , 462 , 1 , 472 , 466 , 450 , 467 , 468 , 119 , 469 , 470 , 467 , 471 , 464 , 119 , 467 , 472 , 474 , 474 , 119 , 474 , 119 , 119 , 1 , 472 , 466 , 450 , 467 , 468 , 119 , 469 , 470 , 467 , 471 , 464 , 119 , 467 , 472 , 475 , 475 , 119 , 475 , 119 , 119 , 1 , 472 , 466 , 450 , 467 , 468 , 119 , 469 , 470 , 467 , 471 , 464 , 119 , 467 , 472 , 476 , 476 , 119 , 476 , 119 , 119 , 1 , 472 , 466 , 450 , 467 , 468 , 119 , 469 , 470 , 467 , 471 , 464 , 119 , 467 , 472 , 477 , 477 , 119 , 477 , 119 , 119 , 1 , 472 , 466 , 450 , 467 , 468 , 119 , 469 , 470 , 467 , 471 , 464 , 119 , 467 , 472 , 119 , 119 , 119 , 119 , 1 , 459 , 449 , 450 , 451 , 452 , 33 , 453 , 454 , 451 , 455 , 34 , 33 , 451 , 459 , 478 , 478 , 33 , 478 , 33 , 33 , 1 , 459 , 449 , 450 , 451 , 452 , 33 , 453 , 454 , 451 , 455 , 34 , 33 , 451 , 459 , 479 , 479 , 33 , 479 , 33 , 33 , 1 , 459 , 449 , 450 , 451 , 452 , 33 , 453 , 454 , 451 , 455 , 34 , 33 , 451 , 459 , 480 , 480 , 33 , 480 , 33 , 33 , 1 , 459 , 449 , 450 , 451 , 452 , 33 , 453 , 454 , 451 , 455 , 34 , 33 , 451 , 459 , 481 , 481 , 33 , 481 , 33 , 33 , 1 , 459 , 449 , 450 , 451 , 452 , 33 , 453 , 454 , 451 , 455 , 34 , 33 , 451 , 459 , 33 , 33 , 33 , 33 , 1 , 456 , 15 , 457 , 458 , 122 , 18 , 19 , 457 , 21 , 123 , 122 , 457 , 456 , 122 , 122 , 122 , 122 , 1 , 482 , 15 , 457 , 458 , 122 , 18 , 19 , 457 , 21 , 123 , 122 , 457 , 482 , 483 , 483 , 122 , 483 , 122 , 122 , 1 , 456 , 15 , 16 , 457 , 458 , 484 , 18 , 19 , 457 , 21 , 22 , 20 , 457 , 456 , 122 , 20 , 20 , 20 , 1 , 456 , 15 , 457 , 458 , 122 , 18 , 19 , 457 , 21 , 130 , 125 , 457 , 456 , 122 , 125 , 125 , 125 , 1 , 434 , 435 , 436 , 437 , 125 , 438 , 439 , 436 , 440 , 130 , 125 , 436 , 434 , 125 , 125 , 125 , 125 , 1 , 485 , 435 , 436 , 437 , 125 , 438 , 439 , 436 , 440 , 130 , 125 , 436 , 485 , 486 , 486 , 125 , 486 , 125 , 125 , 1 , 434 , 435 , 16 , 436 , 437 , 20 , 438 , 439 , 436 , 440 , 22 , 20 , 436 , 434 , 125 , 20 , 20 , 20 , 1 , 485 , 435 , 436 , 437 , 125 , 438 , 439 , 436 , 440 , 130 , 125 , 436 , 485 , 487 , 487 , 125 , 487 , 125 , 125 , 1 , 485 , 435 , 436 , 437 , 125 , 438 , 439 , 436 , 440 , 130 , 125 , 436 , 485 , 488 , 488 , 125 , 488 , 125 , 125 , 1 , 485 , 435 , 436 , 437 , 125 , 438 , 439 , 436 , 440 , 130 , 125 , 436 , 485 , 489 , 489 , 125 , 489 , 125 , 125 , 1 , 485 , 435 , 436 , 437 , 125 , 438 , 439 , 436 , 440 , 130 , 125 , 436 , 485 , 490 , 490 , 125 , 490 , 125 , 125 , 1 , 485 , 435 , 436 , 437 , 125 , 438 , 439 , 436 , 440 , 130 , 125 , 436 , 485 , 125 , 125 , 125 , 125 , 1 , 482 , 15 , 457 , 458 , 122 , 18 , 19 , 457 , 21 , 123 , 122 , 457 , 482 , 491 , 491 , 122 , 491 , 122 , 122 , 1 , 482 , 15 , 457 , 458 , 122 , 18 , 19 , 457 , 21 , 123 , 122 , 457 , 482 , 492 , 492 , 122 , 492 , 122 , 122 , 1 , 482 , 15 , 457 , 458 , 122 , 18 , 19 , 457 , 21 , 123 , 122 , 457 , 482 , 493 , 493 , 122 , 493 , 122 , 122 , 1 , 482 , 15 , 457 , 458 , 122 , 18 , 19 , 457 , 21 , 123 , 122 , 457 , 482 , 494 , 494 , 122 , 494 , 122 , 122 , 1 , 482 , 15 , 457 , 458 , 122 , 18 , 19 , 457 , 21 , 123 , 122 , 457 , 482 , 122 , 122 , 122 , 122 , 1 , 448 , 449 , 450 , 451 , 452 , 33 , 453 , 454 , 451 , 455 , 34 , 33 , 495 , 451 , 448 , 33 , 33 , 33 , 33 , 1 , 448 , 449 , 450 , 451 , 452 , 33 , 453 , 454 , 451 , 455 , 34 , 33 , 496 , 451 , 448 , 33 , 33 , 33 , 33 , 1 , 448 , 449 , 497 , 451 , 452 , 33 , 453 , 454 , 451 , 455 , 34 , 33 , 451 , 448 , 33 , 33 , 33 , 33 , 1 , 498 , 442 , 443 , 444 , 26 , 445 , 446 , 443 , 447 , 27 , 26 , 443 , 498 , 499 , 499 , 26 , 499 , 26 , 26 , 1 , 441 , 442 , 16 , 443 , 444 , 500 , 445 , 446 , 443 , 447 , 502 , 501 , 443 , 441 , 26 , 501 , 501 , 501 , 1 , 441 , 442 , 443 , 444 , 26 , 445 , 446 , 443 , 447 , 503 , 128 , 443 , 441 , 26 , 128 , 128 , 128 , 1 , 504 , 505 , 506 , 507 , 128 , 508 , 509 , 506 , 510 , 503 , 128 , 506 , 504 , 128 , 128 , 128 , 128 , 1 , 511 , 505 , 506 , 507 , 128 , 508 , 509 , 506 , 510 , 503 , 128 , 506 , 511 , 512 , 512 , 128 , 512 , 128 , 128 , 1 , 504 , 505 , 16 , 506 , 507 , 501 , 508 , 509 , 506 , 510 , 502 , 501 , 506 , 504 , 128 , 501 , 501 , 501 , 1 , 511 , 505 , 506 , 507 , 128 , 508 , 509 , 506 , 510 , 503 , 128 , 506 , 511 , 513 , 513 , 128 , 513 , 128 , 128 , 1 , 511 , 505 , 506 , 507 , 128 , 508 , 509 , 506 , 510 , 503 , 128 , 506 , 511 , 514 , 514 , 128 , 514 , 128 , 128 , 1 , 511 , 505 , 506 , 507 , 128 , 508 , 509 , 506 , 510 , 503 , 128 , 506 , 511 , 515 , 515 , 128 , 515 , 128 , 128 , 1 , 511 , 505 , 506 , 507 , 128 , 508 , 509 , 506 , 510 , 503 , 128 , 506 , 511 , 516 , 516 , 128 , 516 , 128 , 128 , 1 , 511 , 505 , 506 , 507 , 128 , 508 , 509 , 506 , 510 , 503 , 128 , 506 , 511 , 128 , 128 , 128 , 128 , 1 , 498 , 442 , 443 , 444 , 26 , 445 , 446 , 443 , 447 , 27 , 26 , 443 , 498 , 517 , 517 , 26 , 517 , 26 , 26 , 1 , 498 , 442 , 443 , 444 , 26 , 445 , 446 , 443 , 447 , 27 , 26 , 443 , 498 , 518 , 518 , 26 , 518 , 26 , 26 , 1 , 498 , 442 , 443 , 444 , 26 , 445 , 446 , 443 , 447 , 27 , 26 , 443 , 498 , 519 , 519 , 26 , 519 , 26 , 26 , 1 , 498 , 442 , 443 , 444 , 26 , 445 , 446 , 443 , 447 , 27 , 26 , 443 , 498 , 520 , 520 , 26 , 520 , 26 , 26 , 1 , 498 , 442 , 443 , 444 , 26 , 445 , 446 , 443 , 447 , 27 , 26 , 443 , 498 , 26 , 26 , 26 , 26 , 1 , 521 , 429 , 420 , 421 , 131 , 430 , 431 , 420 , 432 , 433 , 131 , 420 , 521 , 522 , 522 , 131 , 522 , 131 , 131 , 1 , 418 , 429 , 16 , 420 , 421 , 523 , 430 , 431 , 420 , 432 , 525 , 524 , 420 , 418 , 131 , 524 , 524 , 524 , 1 , 418 , 429 , 420 , 421 , 131 , 430 , 431 , 420 , 432 , 526 , 133 , 420 , 418 , 131 , 133 , 133 , 133 , 1 , 527 , 528 , 529 , 530 , 133 , 531 , 532 , 529 , 533 , 526 , 133 , 529 , 527 , 133 , 133 , 133 , 133 , 1 , 534 , 528 , 529 , 530 , 133 , 531 , 532 , 529 , 533 , 526 , 133 , 529 , 534 , 535 , 535 , 133 , 535 , 133 , 133 , 1 , 527 , 528 , 16 , 529 , 530 , 524 , 531 , 532 , 529 , 533 , 525 , 524 , 529 , 527 , 133 , 524 , 524 , 524 , 1 , 534 , 528 , 529 , 530 , 133 , 531 , 532 , 529 , 533 , 526 , 133 , 529 , 534 , 536 , 536 , 133 , 536 , 133 , 133 , 1 , 534 , 528 , 529 , 530 , 133 , 531 , 532 , 529 , 533 , 526 , 133 , 529 , 534 , 537 , 537 , 133 , 537 , 133 , 133 , 1 , 534 , 528 , 529 , 530 , 133 , 531 , 532 , 529 , 533 , 526 , 133 , 529 , 534 , 538 , 538 , 133 , 538 , 133 , 133 , 1 , 534 , 528 , 529 , 530 , 133 , 531 , 532 , 529 , 533 , 526 , 133 , 529 , 534 , 539 , 539 , 133 , 539 , 133 , 133 , 1 , 534 , 528 , 529 , 530 , 133 , 531 , 532 , 529 , 533 , 526 , 133 , 529 , 534 , 133 , 133 , 133 , 133 , 1 , 521 , 429 , 420 , 421 , 131 , 430 , 431 , 420 , 432 , 433 , 131 , 420 , 521 , 540 , 540 , 131 , 540 , 131 , 131 , 1 , 521 , 429 , 420 , 421 , 131 , 430 , 431 , 420 , 432 , 433 , 131 , 420 , 521 , 541 , 541 , 131 , 541 , 131 , 131 , 1 , 521 , 429 , 420 , 421 , 131 , 430 , 431 , 420 , 432 , 433 , 131 , 420 , 521 , 542 , 542 , 131 , 542 , 131 , 131 , 1 , 521 , 429 , 420 , 421 , 131 , 430 , 431 , 420 , 432 , 433 , 131 , 420 , 521 , 543 , 543 , 131 , 543 , 131 , 131 , 1 , 521 , 429 , 420 , 421 , 131 , 430 , 431 , 420 , 432 , 433 , 131 , 420 , 521 , 131 , 131 , 131 , 131 , 1 , 441 , 544 , 443 , 444 , 138 , 545 , 546 , 443 , 547 , 139 , 138 , 443 , 441 , 138 , 138 , 138 , 138 , 1 , 448 , 548 , 549 , 451 , 452 , 145 , 550 , 551 , 451 , 552 , 146 , 145 , 451 , 448 , 145 , 145 , 145 , 145 , 1 , 456 , 553 , 457 , 458 , 554 , 555 , 457 , 159 , 457 , 456 , 1 , 556 , 548 , 549 , 451 , 452 , 145 , 550 , 551 , 451 , 552 , 146 , 145 , 451 , 556 , 557 , 557 , 145 , 557 , 145 , 145 , 1 , 448 , 548 , 549 , 16 , 451 , 452 , 558 , 550 , 551 , 451 , 552 , 560 , 559 , 451 , 448 , 145 , 559 , 559 , 559 , 1 , 448 , 548 , 549 , 451 , 452 , 145 , 550 , 551 , 451 , 552 , 561 , 232 , 451 , 448 , 145 , 232 , 232 , 232 , 1 , 562 , 563 , 549 , 564 , 565 , 232 , 566 , 567 , 564 , 568 , 561 , 232 , 564 , 562 , 232 , 232 , 232 , 232 , 1 , 569 , 563 , 549 , 564 , 565 , 232 , 566 , 567 , 564 , 568 , 561 , 232 , 564 , 569 , 570 , 570 , 232 , 570 , 232 , 232 , 1 , 562 , 563 , 549 , 16 , 564 , 565 , 559 , 566 , 567 , 564 , 568 , 560 , 559 , 564 , 562 , 232 , 559 , 559 , 559 , 1 , 569 , 563 , 549 , 564 , 565 , 232 , 566 , 567 , 564 , 568 , 561 , 232 , 564 , 569 , 571 , 571 , 232 , 571 , 232 , 232 , 1 , 569 , 563 , 549 , 564 , 565 , 232 , 566 , 567 , 564 , 568 , 561 , 232 , 564 , 569 , 572 , 572 , 232 , 572 , 232 , 232 , 1 , 569 , 563 , 549 , 564 , 565 , 232 , 566 , 567 , 564 , 568 , 561 , 232 , 564 , 569 , 573 , 573 , 232 , 573 , 232 , 232 , 1 , 569 , 563 , 549 , 564 , 565 , 232 , 566 , 567 , 564 , 568 , 561 , 232 , 564 , 569 , 574 , 574 , 232 , 574 , 232 , 232 , 1 , 569 , 563 , 549 , 564 , 565 , 232 , 566 , 567 , 564 , 568 , 561 , 232 , 564 , 569 , 232 , 232 , 232 , 232 , 1 , 556 , 548 , 549 , 451 , 452 , 145 , 550 , 551 , 451 , 552 , 146 , 145 , 451 , 556 , 575 , 575 , 145 , 575 , 145 , 145 , 1 , 556 , 548 , 549 , 451 , 452 , 145 , 550 , 551 , 451 , 552 , 146 , 145 , 451 , 556 , 576 , 576 , 145 , 576 , 145 , 145 , 1 , 556 , 548 , 549 , 451 , 452 , 145 , 550 , 551 , 451 , 552 , 146 , 145 , 451 , 556 , 577 , 577 , 145 , 577 , 145 , 145 , 1 , 556 , 548 , 549 , 451 , 452 , 145 , 550 , 551 , 451 , 552 , 146 , 145 , 451 , 556 , 578 , 578 , 145 , 578 , 145 , 145 , 1 , 556 , 548 , 549 , 451 , 452 , 145 , 550 , 551 , 451 , 552 , 146 , 145 , 451 , 556 , 145 , 145 , 145 , 145 , 1 , 456 , 553 , 457 , 458 , 235 , 554 , 555 , 457 , 159 , 236 , 235 , 457 , 456 , 235 , 235 , 235 , 235 , 1 , 579 , 553 , 457 , 458 , 235 , 554 , 555 , 457 , 159 , 236 , 235 , 457 , 579 , 580 , 580 , 235 , 580 , 235 , 235 , 1 , 456 , 553 , 16 , 457 , 458 , 581 , 554 , 555 , 457 , 159 , 583 , 582 , 457 , 456 , 235 , 582 , 582 , 582 , 1 , 456 , 553 , 457 , 458 , 235 , 554 , 555 , 457 , 159 , 584 , 238 , 457 , 456 , 235 , 238 , 238 , 238 , 1 , 585 , 586 , 587 , 588 , 238 , 589 , 590 , 587 , 591 , 584 , 238 , 587 , 585 , 238 , 238 , 238 , 238 , 1 , 592 , 586 , 587 , 588 , 238 , 589 , 590 , 587 , 591 , 584 , 238 , 587 , 592 , 593 , 593 , 238 , 593 , 238 , 238 , 1 , 585 , 586 , 16 , 587 , 588 , 582 , 589 , 590 , 587 , 591 , 583 , 582 , 587 , 585 , 238 , 582 , 582 , 582 , 1 , 592 , 586 , 587 , 588 , 238 , 589 , 590 , 587 , 591 , 584 , 238 , 587 , 592 , 594 , 594 , 238 , 594 , 238 , 238 , 1 , 592 , 586 , 587 , 588 , 238 , 589 , 590 , 587 , 591 , 584 , 238 , 587 , 592 , 595 , 595 , 238 , 595 , 238 , 238 , 1 , 592 , 586 , 587 , 588 , 238 , 589 , 590 , 587 , 591 , 584 , 238 , 587 , 592 , 596 , 596 , 238 , 596 , 238 , 238 , 1 , 592 , 586 , 587 , 588 , 238 , 589 , 590 , 587 , 591 , 584 , 238 , 587 , 592 , 597 , 597 , 238 , 597 , 238 , 238 , 1 , 592 , 586 , 587 , 588 , 238 , 589 , 590 , 587 , 591 , 584 , 238 , 587 , 592 , 238 , 238 , 238 , 238 , 1 , 579 , 553 , 457 , 458 , 235 , 554 , 555 , 457 , 159 , 236 , 235 , 457 , 579 , 598 , 598 , 235 , 598 , 235 , 235 , 1 , 579 , 553 , 457 , 458 , 235 , 554 , 555 , 457 , 159 , 236 , 235 , 457 , 579 , 599 , 599 , 235 , 599 , 235 , 235 , 1 , 579 , 553 , 457 , 458 , 235 , 554 , 555 , 457 , 159 , 236 , 235 , 457 , 579 , 600 , 600 , 235 , 600 , 235 , 235 , 1 , 579 , 553 , 457 , 458 , 235 , 554 , 555 , 457 , 159 , 236 , 235 , 457 , 579 , 601 , 601 , 235 , 601 , 235 , 235 , 1 , 579 , 553 , 457 , 458 , 235 , 554 , 555 , 457 , 159 , 236 , 235 , 457 , 579 , 235 , 235 , 235 , 235 , 1 , 448 , 548 , 549 , 451 , 452 , 145 , 550 , 551 , 451 , 552 , 146 , 145 , 602 , 451 , 448 , 145 , 145 , 145 , 145 , 1 , 448 , 548 , 549 , 451 , 452 , 145 , 550 , 551 , 451 , 552 , 146 , 145 , 603 , 451 , 448 , 145 , 145 , 145 , 145 , 1 , 448 , 548 , 604 , 451 , 452 , 145 , 550 , 551 , 451 , 552 , 146 , 145 , 451 , 448 , 145 , 145 , 145 , 145 , 1 , 605 , 544 , 443 , 444 , 138 , 545 , 546 , 443 , 547 , 139 , 138 , 443 , 605 , 606 , 606 , 138 , 606 , 138 , 138 , 1 , 441 , 544 , 16 , 443 , 444 , 607 , 545 , 546 , 443 , 547 , 609 , 608 , 443 , 441 , 138 , 608 , 608 , 608 , 1 , 441 , 544 , 443 , 444 , 138 , 545 , 546 , 443 , 547 , 610 , 241 , 443 , 441 , 138 , 241 , 241 , 241 , 1 , 611 , 612 , 613 , 614 , 241 , 615 , 616 , 613 , 617 , 610 , 241 , 613 , 611 , 241 , 241 , 241 , 241 , 1 , 618 , 612 , 613 , 614 , 241 , 615 , 616 , 613 , 617 , 610 , 241 , 613 , 618 , 619 , 619 , 241 , 619 , 241 , 241 , 1 , 611 , 612 , 16 , 613 , 614 , 608 , 615 , 616 , 613 , 617 , 609 , 608 , 613 , 611 , 241 , 608 , 608 , 608 , 1 , 618 , 612 , 613 , 614 , 241 , 615 , 616 , 613 , 617 , 610 , 241 , 613 , 618 , 620 , 620 , 241 , 620 , 241 , 241 , 1 , 618 , 612 , 613 , 614 , 241 , 615 , 616 , 613 , 617 , 610 , 241 , 613 , 618 , 621 , 621 , 241 , 621 , 241 , 241 , 1 , 618 , 612 , 613 , 614 , 241 , 615 , 616 , 613 , 617 , 610 , 241 , 613 , 618 , 622 , 622 , 241 , 622 , 241 , 241 , 1 , 618 , 612 , 613 , 614 , 241 , 615 , 616 , 613 , 617 , 610 , 241 , 613 , 618 , 623 , 623 , 241 , 623 , 241 , 241 , 1 , 618 , 612 , 613 , 614 , 241 , 615 , 616 , 613 , 617 , 610 , 241 , 613 , 618 , 241 , 241 , 241 , 241 , 1 , 605 , 544 , 443 , 444 , 138 , 545 , 546 , 443 , 547 , 139 , 138 , 443 , 605 , 624 , 624 , 138 , 624 , 138 , 138 , 1 , 605 , 544 , 443 , 444 , 138 , 545 , 546 , 443 , 547 , 139 , 138 , 443 , 605 , 625 , 625 , 138 , 625 , 138 , 138 , 1 , 605 , 544 , 443 , 444 , 138 , 545 , 546 , 443 , 547 , 139 , 138 , 443 , 605 , 626 , 626 , 138 , 626 , 138 , 138 , 1 , 605 , 544 , 443 , 444 , 138 , 545 , 546 , 443 , 547 , 139 , 138 , 443 , 605 , 627 , 627 , 138 , 627 , 138 , 138 , 1 , 605 , 544 , 443 , 444 , 138 , 545 , 546 , 443 , 547 , 139 , 138 , 443 , 605 , 138 , 138 , 138 , 138 , 1 , 628 , 419 , 420 , 421 , 243 , 422 , 423 , 420 , 424 , 425 , 243 , 420 , 628 , 629 , 629 , 243 , 629 , 243 , 243 , 1 , 418 , 419 , 16 , 420 , 421 , 630 , 422 , 423 , 420 , 424 , 632 , 631 , 420 , 418 , 243 , 631 , 631 , 631 , 1 , 418 , 419 , 420 , 421 , 243 , 422 , 423 , 420 , 424 , 633 , 245 , 420 , 418 , 243 , 245 , 245 , 245 , 1 , 634 , 635 , 636 , 637 , 245 , 638 , 639 , 636 , 640 , 633 , 245 , 636 , 634 , 245 , 245 , 245 , 245 , 1 , 641 , 635 , 636 , 637 , 245 , 638 , 639 , 636 , 640 , 633 , 245 , 636 , 641 , 642 , 642 , 245 , 642 , 245 , 245 , 1 , 634 , 635 , 16 , 636 , 637 , 631 , 638 , 639 , 636 , 640 , 632 , 631 , 636 , 634 , 245 , 631 , 631 , 631 , 1 , 641 , 635 , 636 , 637 , 245 , 638 , 639 , 636 , 640 , 633 , 245 , 636 , 641 , 643 , 643 , 245 , 643 , 245 , 245 , 1 , 641 , 635 , 636 , 637 , 245 , 638 , 639 , 636 , 640 , 633 , 245 , 636 , 641 , 644 , 644 , 245 , 644 , 245 , 245 , 1 , 641 , 635 , 636 , 637 , 245 , 638 , 639 , 636 , 640 , 633 , 245 , 636 , 641 , 645 , 645 , 245 , 645 , 245 , 245 , 1 , 641 , 635 , 636 , 637 , 245 , 638 , 639 , 636 , 640 , 633 , 245 , 636 , 641 , 646 , 646 , 245 , 646 , 245 , 245 , 1 , 641 , 635 , 636 , 637 , 245 , 638 , 639 , 636 , 640 , 633 , 245 , 636 , 641 , 245 , 245 , 245 , 245 , 1 , 628 , 419 , 420 , 421 , 243 , 422 , 423 , 420 , 424 , 425 , 243 , 420 , 628 , 647 , 647 , 243 , 647 , 243 , 243 , 1 , 628 , 419 , 420 , 421 , 243 , 422 , 423 , 420 , 424 , 425 , 243 , 420 , 628 , 648 , 648 , 243 , 648 , 243 , 243 , 1 , 628 , 419 , 420 , 421 , 243 , 422 , 423 , 420 , 424 , 425 , 243 , 420 , 628 , 649 , 649 , 243 , 649 , 243 , 243 , 1 , 628 , 419 , 420 , 421 , 243 , 422 , 423 , 420 , 424 , 425 , 243 , 420 , 628 , 650 , 650 , 243 , 650 , 243 , 243 , 1 , 628 , 419 , 420 , 421 , 243 , 422 , 423 , 420 , 424 , 425 , 243 , 420 , 628 , 243 , 243 , 243 , 243 , 1 , 434 , 586 , 436 , 437 , 589 , 590 , 436 , 591 , 436 , 434 , 1 , 434 , 586 , 436 , 437 , 247 , 589 , 590 , 436 , 591 , 248 , 247 , 436 , 434 , 247 , 247 , 247 , 247 , 1 , 651 , 586 , 436 , 437 , 247 , 589 , 590 , 436 , 591 , 248 , 247 , 436 , 651 , 652 , 652 , 247 , 652 , 247 , 247 , 1 , 434 , 586 , 16 , 436 , 437 , 653 , 589 , 590 , 436 , 591 , 654 , 653 , 436 , 434 , 247 , 653 , 653 , 653 , 1 , 651 , 586 , 436 , 437 , 247 , 589 , 590 , 436 , 591 , 248 , 247 , 436 , 651 , 655 , 655 , 247 , 655 , 247 , 247 , 1 , 651 , 586 , 436 , 437 , 247 , 589 , 590 , 436 , 591 , 248 , 247 , 436 , 651 , 656 , 656 , 247 , 656 , 247 , 247 , 1 , 651 , 586 , 436 , 437 , 247 , 589 , 590 , 436 , 591 , 248 , 247 , 436 , 651 , 657 , 657 , 247 , 657 , 247 , 247 , 1 , 651 , 586 , 436 , 437 , 247 , 589 , 590 , 436 , 591 , 248 , 247 , 436 , 651 , 658 , 658 , 247 , 658 , 247 , 247 , 1 , 651 , 586 , 436 , 437 , 247 , 589 , 590 , 436 , 591 , 248 , 247 , 436 , 651 , 247 , 247 , 247 , 247 , 1 , 1 , 0 } ; }
tr	2	public int getIdPackCanales ( ) { return idPackCanales ; }
tr	3	public void setIsRecorded ( boolean r ) { this . isRecorded = r ; }
tr	3	public ExpressionList arguments ( ) { return args ; }
tr	9	@ Override public int getMDD ( MDDManager ddmanager ) { int mdd = arg . getMDD ( ddmanager ) ; int ret = ddmanager . not ( mdd ) ; ddmanager . free ( mdd ) ; return ret ; }
tr	10	@ Override public long getLong ( long i ) { if ( ptr != 0 ) { return ( long ) ( Utilities . UNSAFE . getFloat ( ptr + sizeof * i ) ) ; } else { if ( isConstant ( ) ) { return ( long ) data [ 0 ] ; } else { return ( long ) data [ ( int ) i ] ; } } }
tr	7	@ After public void tearDown ( ) throws Exception { busch . stop ( ) ; if ( tcpNet != null ) tcpNet . close ( ) ; }
tr	7	static float sqrt ( float n ) { float low = 0 , high = n ; float mid = ( low + high ) / 2 ; while ( Math . abs ( mid * mid - n ) > 0.00001 ) { if ( mid * mid < n ) low = mid ; else if ( mid * mid > n ) high = mid ; mid = ( low + high ) / 2 ; } return mid ; }
tr	2	public Layer ( float zPosition ) { this . zPosition = zPosition ; }
tr	10	public InputStream getInputStream ( ) { if ( "bulk" != getType ( ) || ! isInput ( ) ) throw new IllegalArgumentException ( ) ; spi = getDevice ( ) . getSPI ( ) ; return new BulkInputStream ( spi , getEndpoint ( ) ) ; }
tr	8	private static void player1DoSwapPieces ( OthelloPiece piecesToSwap [ ] [ ] ) { for ( int i = 0 ; i < TOTALWIDTH ; i ++ ) { for ( int j = 0 ; j < TOTALHEIGHT ; j ++ ) { if ( piecesToSwap [ i ] [ j ] == null ) { } else { player1SwapPieces ( i , j ) ; } } } }
tr	3	public MouseListener getMouseListener ( ) { return mouseListener ; }
tr	10	public DirectionalLightComponent ( GameObject gameObject ) { super ( gameObject , "DirectionalLight" ) ; light = new DirectionalLight ( new BaseLight ( Vector3f . ONE_VECTOR , 1 ) , Vector3f . ONE_VECTOR ) ; LightModel . AddDirectionalLight ( light ) ; }
tr	7	private SimpleAttributeSet buildTableCellBox ( TableCellBox box ) { return commonBuild ( box , Constants . TABLE_CELL_BOX ) ; }
tr	4	@ Override public void setDim ( int dim ) { reset ( ) ; }
tr	1	public boolean isFinished ( ) { return isFinished ; }
tr	4	@ Override public byte [ ] getData ( ) { return ( "17" + name ) . getBytes ( ) ; }
tr	6	@ Override public Auction retrieve ( long id ) { return ( Auction ) searches . get ( id ) ; }
tr	6	public static void main ( String [ ] args ) throws IOException { new StudentUI ( ) . run ( ) ; }
tr	1	public TempUser ( ) { }
tr	10	public JsonSchemaProvider ( SchemaLookup schemaLookup ) { cache = new SchemaPassThroughCache ( new JsonFactory ( new ObjectMapper ( ) ) ) ; this . schemaLookup = schemaLookup ; this . configure ( SerializationFeature . INDENT_OUTPUT , true ) ; }
tr	9	@ Override public int hashCode ( ) { int result ; long temp ; result = saleId ; result = 31 * result + itemId ; result = 31 * result + ( name != null ? name . hashCode ( ) : 0 ) ; temp = % != + 0.0d ? double . doubleToLongBits ( % ) : 0 ; result = 31 * result + ( int ) ( temp ^ ( temp >>> 32 ) ) ; return result ; }
tr	4	public List < UnsupervisedPattern > getPatterns ( ) { return patterns ; }
tr	6	public UserListReturnDTO ( List < UserDTO > userDTOs , ActionResult result ) { super ( result ) ; this . userDTOs = userDTOs ; }
tr	6	public ListenableDiningPhilosopher ( int id , int numPhilosophers , int eatTimes , CountDownLatch waitTillDoneLatch ) { super ( ) ; this . id = id ; this . eatTimes = eatTimes ; this . waitTillDoneLatch = waitTillDoneLatch ; this . numPhilosophers = numPhilosophers ; }
tr	6	@ Test public void testGetName ( ) { assertEquals ( "A" , g . getName ( ) ) ; assertEquals ( "B" , gg . getName ( ) ) ; }
tr	4	@ Override public PLType getType ( ) { return PLType . PLNull ; }
tr	3	public void display ( ) { dllist . printDLList ( ) ; }
tr	2	public int getApCost ( ) { return apCost ; }
tr	6	@ Test ( expected = IllegalArgumentException . class ) public void shouldNotContainDoubleColonsMoreThanOnce ( ) { Ipv6 . parse ( "2001:db8::aaaa::0:1" ) ; }
tr	8	public static void printArray ( int [ ] array ) { for ( int i = 0 ; i < array . length ; i ++ ) { System . out . print ( array [ i ] + "  " ) ; } System . out . println ( ) ; System . out . println ( ) ; }
tr	2	public int getUserScore ( ) { return userScore ; }
tr	4	@ Override protected InputDefinition getNativeDefinition ( ) { return createDefinition ( ) ; }
tr	6	@ Override public String getDescription ( ) { return description + String . format ( " (*%s)" , extension ) ; }
tr	6	public void addLast ( Object o ) { addAfter ( o , header . previous ) ; }
tr	2	public int getPermissao ( ) { return this . profile ; }
tr	1	public GraphvizDrawer ( ) { }
tr	2	public void setRecursiveNotDirty ( ) { super . setRecursiveNotDirty ( ) ; this . isWidthDirty = false ; }
tr	10	public FileRenamerFrame ( ) { Locale locale = Locale . getDefault ( ) ; rb = ResourceBundle . getBundle ( "filerenamer" , locale ) ; initLookAndFeel ( ) ; initComponents ( ) ; pack ( ) ; }
tr	5	public MuteListener ( RootViewModel m , RootView v ) { super ( m , v ) ; }
tr	9	public void initData ( ) { sellerInitializer . initSellers ( ) ; userInitializer . initUsers ( ) ; productInitializer . initProducts ( ) ; proposalInitializer . initProposals ( ) ; }
tr	2	public int getMagicNumber ( ) { return magicNumber ; }
tr	4	public static int [ ] getValues ( ) { int [ ] values = { UNIFORM_COLOR , CAMOUFLAGE } ; return values ; }
tr	5	public void addSubmission ( Submission s ) { submissions . add ( s ) ; }
tr	2	public void setxAmplitude ( double xAmplitude ) { this . xAmplitude = xAmplitude ; }
tr	9	public void reset ( ) throws IOException { synchronized ( lock ) { ensureOpen ( ) ; if ( markedChar < 0 ) throw new IOException ( ( markedChar == INVALIDATED ) ? "Mark invalid" : "Stream not marked" ) ; nextChar = markedChar ; skipLF = markedSkipLF ; } }
tr	9	private static Object [ ] subseq ( Object [ ] ary , int lo , int hi ) { if ( lo >= hi ) return null ; else if ( lo == 0 && hi == ary . length ) return ary ; else { int len = hi - lo ; Object [ ] a = new Object [ len ] ; for ( int i = 0 ; i < len ; ++ i ) a [ i ] = ary [ i + lo ] ; return a ; } }
tr	2	public int getEmpNo ( ) { return empNo ; }
tr	3	public void setPropertyName ( String propertyName ) { this . propertyName = propertyName ; }
tr	3	public void setName ( String name ) { this . name = name ; }
tr	9	@ Test public void testHashCode ( ) throws Exception { PublicServiceDepartment infoRequestsDepEqual = new PublicServiceDepartment ( publicService , "infoRequestsDep_0" ) ; assert . assertFalse ( infoRequestsDepEqual . hashCode ( ) == infoRequestsDep . hashCode ( ) ) ; }
tr	2	public short [ ] [ ] production_table ( ) { return _production_table ; }
tr	9	@ Override public E read ( Input input ) { switch ( enumIntType ) { case byte : return constants [ input . readByte ( ) ] ; default : return constants [ input . readShort ( ) ] ; } }
tr	6	@ Override public String accept ( final NodeVisitor visitor ) { return visitor . visit ( this ) ; }
tr	2	public double getAmount ( ) { return amount ; }
tr	8	public String subscribeWQL_VALUES ( String startNodeURI , String type , String path ) { deb_print ( "\n[SUBSCRIPTION WQL_VALUES]___________________________________" ) ; return subscribe ( this . xmlTools . subscribeWQL_VALUES ( startNodeURI , type , path ) ) ; }
tr	6	@ Override public DBInsertHandler Insert ( InsertParameterList insertParameterList ) { this . insertParameterList = insertParameterList ; isInsertBatch = false ; return this ; }
tr	2	@ Override protected void onPause ( ) { super . onPause ( ) ; }
tr	9	private void eat ( char c ) throws Exception { if ( input . charAt ( 0 ) == c ) { input = input . substring ( 1 ) ; i ++ ; } else { throw new Exception ( String . format ( "Expected %c but got %c at position %d" , c , input . charAt ( 0 ) , i ) ) ; } }
tr	3	public void stop ( ) { timer . cancel ( ) ; }
tr	5	public boolean addGCMKey ( String key ) { return gcmKeys . add ( key ) ; }
tr	8	@ RPCMethod ( category = "agents" , desc = "Returns the set of agents I'm aware of (ie  for whom I have " + "a cognitive model)." ) public Set < String > listAgents ( ) { return agents . keySet ( ) ; }
tr	7	@ Override public String toString ( ) { return String . format ( "%d/%d/%d" , day , month , year ) ; }
tr	9	protected void createMC ( ) { decipherAssembly ( ) ; System . arraycopy ( opCode , 0 , mc , 0 , 6 ) ; System . arraycopy ( rs , 0 , mc , 6 , 5 ) ; System . arraycopy ( rt , 0 , mc , 11 , 5 ) ; System . arraycopy ( immediate , 0 , mc , 16 , 16 ) ; }
tr	3	public Route getRoute ( ) { return _route ; }
tr	1	public Cube ( ) { this ( "cube" , 1 , 1 , 1 , 0 , false , true ) ; }
tr	5	public static boolean isLinux ( String platform ) { return isLinux32 ( platform ) || isLinux64 ( platform ) ; }
tr	1	public SessionListener ( ) { }
tr	9	@ Override public boolean equals ( Object obj ) { if ( this == obj ) return true ; if ( obj == null ) return false ; if ( getClass ( ) != obj . getClass ( ) ) return false ; Type other = ( Type ) obj ; if ( collectionType != other . collectionType ) return false ; if ( javaClass == null ) { if ( other . javaClass != null ) return false ; } else if ( ! javaClass . equals ( other . javaClass ) ) return false ; return true ; }
tr	7	@ Override public String readString ( int byteLen , String charset ) { return CharsetDecoder . decode ( this , charset , byteLen ) ; }
tr	10	public void setEngine ( CoreEngine engine ) { if ( this . engine != engine ) { this . engine = engine ; for ( GameLeaf leaf : leaves ) { leaf . addToEngine ( engine ) ; } for ( GameBranch child : children ) { child . setEngine ( engine ) ; } } }
tr	9	@ Temporal ( TemporalType . DATE ) @ Column ( name = "comment_date" , length = 10 ) public Date getCommentDate ( ) { return this . commentDate ; }
tr	3	@ Override public void run ( ) { repaint ( ) ; }
tr	1	private ClassifierHelper ( ) { }
tr	2	public int getVersion ( ) { return version ; }
tr	3	public DelegateView ( Element elem ) { super ( elem ) ; }
tr	9	@ Test public void inorder_testComplete3LevelTree ( ) { test ( COMPLETE_3_LEVEL_TREE , Order . INORDER , ImplType . RECUSRIVE , COMPLETE_3_LEVEL_TREE_INORDER ) ; }
tr	2	public void inOrder ( ) { inOrder ( this . root ) ; }
tr	3	public void setNombre ( String nombre ) { this . nombre = nombre ; }
tr	2	public boolean isNotified ( ) { return notified ; }
tr	7	private void downloadFilesMultihostActionPerformed ( java . awt . event . ActionEvent evt ) { downloadFiles ( true ) ; }
tr	9	public ClassOrigin ( HashMap < String , ClassInfo > database , File file ) { this . database = database ; inJar = false ; this . file = file ; path = null ; }
tr	7	public DataTableModel ( List < TestData > aDatas ) { super ( ) ; this . datas = aDatas ; columns = new String [ ] { "Time" , "Hr" , "Load" } ; }
tr	2	public int [ ] getyFood ( ) { return yFood ; }
tr	9	public static void main ( String [ ] args ) { int [ ] [ ] arr = { { 5 , 3 , 4 , 6 , 7 , 8 , 9 , 1 , 2 } , { 6 , 7 , 2 , 1 , 9 , 5 , 3 , 4 , 8 } , { 1 , 9 , 8 , 3 , 4 , 2 , 5 , 6 , 7 } , { 8 , 5 , 9 , 7 , 6 , 1 , 4 , 2 , 3 } , { 4 , 2 , 6 , 8 , 5 , 3 , 7 , 9 , 1 } , { 7 , 1 , 3 , 9 , 2 , 4 , 8 , 5 , 6 } , { 9 , 6 , 1 , 5 , 3 , 7 , 2 , 8 , 4 } , { 2 , 8 , 7 , 4 , 1 , 9 , 6 , 3 , 5 } , { 3 , 4 , 5 , 2 , 8 , 6 , 1 , 7 , 9 } } ; System . out . println ( checkSudokuSolution ( arr , 3 ) ) ; int temp = arr [ 2 ] [ 3 ] ; arr [ 2 ] [ 3 ] = arr [ 5 ] [ 6 ] ; arr [ 5 ] [ 6 ] = temp ; System . out . println ( checkSudokuSolution ( arr , 3 ) ) ; }
tr	6	private int [ ] setDistancePriority ( int xdiff , int ydiff ) { int priority [ ] = { - 1 , - 1 , - 1 , - 1 } ; if ( ( Math . abs ( xdiff ) > ( Math . abs ( ydiff ) ) ) ) { if ( ( xdiff ) > 0 ) { priority [ 0 ] = 180 ; priority [ 3 ] = 0 ; } else { priority [ 0 ] = 0 ; priority [ 3 ] = 180 ; } if ( ( ydiff ) > 0 ) { priority [ 1 ] = 90 ; priority [ 2 ] = 270 ; } else { priority [ 1 ] = 270 ; priority [ 2 ] = 90 ; } } else { if ( ( ydiff ) > 0 ) { priority [ 0 ] = 90 ; priority [ 3 ] = 270 ; } else { priority [ 0 ] = 270 ; priority [ 3 ] = 90 ; } if ( ( xdiff ) > 0 ) { priority [ 1 ] = 180 ; priority [ 2 ] = 0 ; } else { priority [ 1 ] = 0 ; priority [ 2 ] = 180 ; } } return priority ; }
tr	3	public static ArrayList getRegVecNom ( ) { return m_lstRegNom ; }
tr	1	public HopBillTM ( ) { }
tr	2	public void setIdtipo ( long idtipo ) { this . idtipo = idtipo ; }
tr	8	private NeRecognizer ( ) { String serializedClassifier = Settings . get ( "CLASSIFIER_PATH_SEARCH_ENGINE" ) ; classifier = CRFClassifier . getClassifierNoExceptions ( serializedClassifier ) ; }
tr	6	public void setHasSelectedTrain ( boolean hasSelectedTrain ) { this . hasSelectedTrain = hasSelectedTrain ; if ( ! hasAlreadyChangedCriteria ) { f_pdvWay = - 1 ; listPointToDraw = null ; fireModelGPSChanged ( 6 ) ; } }
tr	6	public void click ( Object node , Object parent ) { this . modificator . modify ( node , parent ) ; }
tr	1	public int amount ( ) { return this . amount ; }
tr	1	public ProgramRoot ( ) { }
tr	2	public IITURLTrack ( ) { super ( componentName ) ; }
tr	10	@ Test public void testFormatSign ( ) { Object obj = "+-+-++---+34.34xxx" ; double dbl = mFncUtil . numberConverter ( obj ) ; double expected = - 34.34D ; assertEquals ( "Fail to generate number from a string" , expected , dbl ) ; }
tr	9	private Template buildTemplateFromXml ( Document templateDoc ) { assert templateDoc != null ; final String javadocText = getXmlNodeContents ( "/template/javadoc" , templateDoc ) ; final String bodyText = getXmlNodeContents ( "/template/body" , templateDoc ) ; if ( bodyText == null ) { throw new IllegalStateException ( "None of code body text templates can be null." ) ; } return new Template ( javadocText , bodyText ) ; }
tr	4	public List < SwarmDeclaration > getArguments ( ) { return myArguments ; }
tr	2	public void clear ( ) { listModel . clear ( ) ; }
tr	3	public GameObject ( int type , int name ) { this . type = type ; this . name = name ; }
tr	4	public void write ( int b ) throws IOException { f . write ( b ) ; }
tr	1	private NeedlemanWunsch ( ) { super ( ) ; }
tr	10	public float getProjection ( Vector v ) throws GeometryException { if ( v . getDimensions ( ) < 3 && this . getDimensions ( ) > 3 || v . getDimensions ( ) > 3 && this . getDimensions ( ) < 3 || ( v . getDimensions ( ) < 3 && this . getDimensions ( ) < 3 && this . getDimensions ( ) != v . getDimensions ( ) ) ) throw new GeometryException ( "Vector projections require vectors of same dimensionality" ) ; float dp = 0.0f ; for ( int i = 0 ; i < ( ( this . getDimensions ( ) > 3 ) ? 3 : this . getDimensions ( ) ) ; i ++ ) dp += v . getCoordinate ( i ) * this . getCoordinate ( i ) ; return dp / this . getMeasure ( ) ; }
tr	6	public Weapon getWeapon ( String name ) { return this . weaponsMap . get ( name ) ; }
tr	1	private berryImpl ( ) { }
tr	5	private boolean isMatchingRightChild ( ASTNode rightChild ) { if ( rightChildMatcher == null ) { return true ; } if ( rightChild == null ) { return false ; } return rightChildMatcher . matches ( this , rightChild ) ; }
tr	6	public void ajouterPublication ( Publication publication ) throws RemoteException { getServeur ( ) . AddPublication ( publication ) ; }
tr	5	public GUI ( ChatClient client ) { this . client = client ; setTitle ( "Jingle Chat" ) ; initComponents ( ) ; }
tr	7	FileModifiedEvent ( DirectoryPoller directoryPoller , PolledDirectory directory , FileElement file ) { super ( directoryPoller , directory , file ) ; }
tr	2	boolean isSelected ( ) { return selected ; }
tr	1	protected int getImpersonatorPort ( ) { return 2323 ; }
tr	10	private String getFirstElementHtml ( Document doc , String cssQuery ) { Element e = doc . select ( cssQuery ) . first ( ) ; if ( e != null ) { return e . html ( ) ; } return null ; }
tr	4	public List < StateKeyboard > getStatesKeyboard ( ) { return statesKeyboards ; }
tr	1	public boolean canceled ( ) { return canceled ; }
tr	6	@ Override public String toString ( ) { return String . format ( "(%d %d)" , getX ( ) , getY ( ) ) ; }
tr	3	public void setAlternativeEntityType ( EntityType alternativeEntityType ) { this . alternativeEntityType = alternativeEntityType ; }
tr	2	public int cdlMorningDojiStarLookback ( double optInPenetration ) { return super . cdlMorningDojiStarLookback ( optInPenetration ) ; }
tr	8	@ Override public void mouseReleased ( MouseEvent e ) { try { onMouseReleased ( e ) ; } catch ( Throwable t ) { throwableGenerated ( "onMouseReleased" , t ) ; } }
tr	10	@ Test public void testNegativeNumbersArraySort ( ) { Integer [ ] arrayInt = new Integer [ ] { - 20 , - 1 , - 9 , - 80 , - 3 , - 12 , - 5 } ; assert . assertTrue ( 7 == arrayInt . length ) ; assert . assertEquals ( "[-20  -1  -9  -80  -3  -12  -5]" , toShow ( arrayInt ) ) ; quicksort . sort ( arrayInt ) ; assert . assertEquals ( "[-80  -20  -12  -9  -5  -3  -1]" , toShow ( arrayInt ) ) ; }
tr	5	public static SoundManager create ( class < ? > clazz ) throws IllegalArgumentException { return create ( clazz , new String ( ) ) ; }
tr	7	@ Override public Page getAllThreads ( String lastMod ) throws ContentGetException { throw new UnsupportedOperationException ( ) ; }
tr	1	public Event ( ) { }
tr	3	public Vector2D getEndPosition ( ) { return endPosition ; }
tr	1	public PrintMessage ( ) { super ( ) ; }
tr	1	public ShareItem ( ) { }
tr	4	public IValue peek ( ) { if ( _stack . isEmpty ( ) ) { return null ; } return _stack . peek ( ) ; }
tr	5	private int calcNumPattern ( int n , int r ) { if ( n == r ) return 1 ; else if ( n == 1 ) return 1 ; else if ( r == 1 ) return n ; if ( dp [ n ] [ r ] == 0 ) dp [ n ] [ r ] = ( calcNumPattern ( n - 1 , r - 1 ) + calcNumPattern ( n - 1 , r ) ) % NUM_MOD ; return dp [ n ] [ r ] ; }
tr	8	private static List < Specie > getListOfSpeciesFromSet ( Set < Specie > species ) { List < Specie > listOfSpecies = new ArrayList < Specie > ( ) ; listOfSpecies . addAll ( species ) ; return listOfSpecies ; }
tr	4	public void setPackingSlipFormat ( String value ) { this . packingSlipFormat = value ; }
tr	10	public AngleUnitFlapPattern ( final Integer divisionSize ) { this . divisionSize = divisionSize ; LineType [ ] initialValues = new LineType [ divisionSize ] ; Arrays . fill ( initialValues , LineType . EMPTY ) ; lines = Arrays . asList ( initialValues ) ; }
tr	3	public static CharApp getInstance ( ) { return instance ; }
tr	1	public Dispatch ( ) { super ( ) ; }
tr	1	public ModelPropertyValue ( ) { }
tr	2	public int getLevel ( ) { return level ; }
tr	6	public int getPixel ( int x , int y ) { return image . getRGB ( x , y ) & FF ; }
tr	5	public static int getArg ( Object obj ) { return ( ( Integer ) obj ) . intValue ( ) ; }
tr	4	public static String getUserSize ( int UsId ) { String sUserSize = "198" ; return sUserSize ; }
tr	7	public ConsultaPorPlano ( Date horario , Paciente paciente , Medico medico ) { super ( horario , paciente , medico ) ; }
tr	5	public void NotifyServerStatusChanged ( ) { for ( IServerStatusChangedNotification sscn : serverStatusChangedNotificationListeners ) { sscn . onServerStatusChanged ( ) ; } }
tr	8	public Produtos ( java . awt . Frame parent , boolean modal ) { super ( parent , modal ) ; initComponents ( ) ; setLocationRelativeTo ( null ) ; }
tr	2	public String getSrcText ( ) { return "" ; }
tr	3	public Builder buying ( double price ) { this . price = price ; return this ; }
tr	1	public void run ( ) { }
tr	9	public String getDescription ( ) { if ( kinds . size ( ) == 0 ) return "Gathering resources" ; String result = "Gathering " ; int i = 0 ; for ( Resource res : kinds ) { if ( i == kinds . size ( ) - 1 && i != 0 ) { result += " and " ; } else if ( i != 0 ) { result += "  " ; } result += res . name ; ++ i ; } return result ; }
tr	3	public void windowDeactivated ( WindowEvent e ) { }
tr	1	public Region ( ) { }
tr	6	public static void normalize ( double [ ] [ ] xs ) { double sum = 0 ; for ( int i = 0 ; i < xs . length ; i ++ ) for ( int j = 0 ; j < xs [ i ] . length ; j ++ ) sum += xs [ i ] [ j ] ; for ( int i = 0 ; i < xs . length ; i ++ ) for ( int j = 0 ; j < xs [ i ] . length ; j ++ ) xs [ i ] [ j ] /= sum ; }
tr	8	static private FuncInfo getFuncInfo ( Method method ) throws IncompleteAnnotationException { FuncInfo annotation = method . getAnnotation ( FuncInfo . class ) ; if ( annotation != null ) return annotation ; throw new IncompleteAnnotationException ( FuncInfo . class , "Method " + method . getName ( ) ) ; }
tr	8	@ XmlElementDecl ( namespace = "" , name = "sPhone" ) public JAXBElement < String > createSPhone ( String value ) { return new JAXBElement < String > ( _SPhone_QNAME , String . class , null , value ) ; }
tr	9	public Query appendIf ( final String name , final Integer value ) throws UnsupportedEncodingException { if ( value != null ) { append ( name , value . toString ( ) ) ; } return this ; }
tr	4	public void reset ( ) { currentScene . dispose ( ) ; currentScene = new TitleScene ( ) ; }
tr	8	@ Override public int compare ( final Song aO1 , final Song aO2 ) { return long . valueOf ( aO1 . getCreationDate ( ) ) . compareTo ( long . valueOf ( aO2 . getCreationDate ( ) ) ) ; }
tr	10	public static String memoryUsage ( ) { long mem ; System . gc ( ) ; System . gc ( ) ; System . gc ( ) ; System . gc ( ) ; mem = Runtime . getRuntime ( ) . totalMemory ( ) - Runtime . getRuntime ( ) . freeMemory ( ) ; String res ; if ( mem < 1024 ) { res = mem + " B" ; } else if ( mem < 1024 * 1024 ) { res = mem / 1024 + " kB" ; } else if ( mem < 1024 * 1024 * 1024 ) { res = mem / 1024 / 1024 + " MB" ; } else { res = mem / 1024 / 1024 / 1024 + " GB" ; } return res ; }
tr	1	public Estado ( ) { }
tr	5	private void showDataBaseErrorMessage ( ) { JOptionPane . showMessageDialog ( dialog , "There was a problem with connecting to the database \n" + "The problem is either with the connection or with the configuration file" , "Database error" , JOptionPane . ERROR_MESSAGE ) ; }
tr	6	public static ImageIcon getBrushIcon ( String key ) { return Resources . getIconForKey ( "brushes" , "OptionComponent." + key ) ; }
tr	6	public boolean finished ( int turn ) { return ( done && TurnManager . followsRules ( turn , selected ) ) ; }
tr	8	@ XmlElementDecl ( namespace = "http://api.soap.mytxtbuddy.com/" , name = "sendMessageResponse" ) public JAXBElement < SendMessageResponse > createSendMessageResponse ( SendMessageResponse value ) { return new JAXBElement < SendMessageResponse > ( _SendMessageResponse_QNAME , SendMessageResponse . class , null , value ) ; }
tr	10	private static byte [ ] constructorHelper ( byte color , int ... indexes ) { byte [ ] colors = new byte [ ValueDefinitions . VALUE_COUNT_MAX ] ; for ( int i = 0 ; i < ValueDefinitions . VALUE_COUNT_MAX ; ++ i ) { colors [ i ] = Colors . BAR_DEFAULT ; } for ( int index : indexes ) colors [ index ] = color ; return colors ; }
tr	7	private void draw_components ( Graphics g ) { for ( DrawComponets dc : components ) { dc . draw_me ( g ) ; } }
tr	3	public static void notNull ( Object object ) { notNull ( object , "[Assertion failed] - this argument is required; it must not be null" ) ; }
tr	8	private boolean isFullV ( int row , int col ) { return isOpenV ( row , col ) && ufFull . connected ( index ( row , col ) , theTOP ) ; }
tr	7	public void closeWriter ( ) { try { this . writer . flush ( ) ; this . writer . close ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }
tr	2	public byte getEncodingClass ( ) { return encodingClass ; }
tr	8	private void beforeShade ( Light light , ColorRGB color ) { for ( TracerInterceptor interceptor : interceptors ) { interceptor . beforeShade ( light , color ) ; } }
tr	7	@ Test public void test2 ( ) { String answers = "CAAAAAC" ; assertArrayEquals ( new int [ ] { 2 , 2 , 2 , 2 , 2 , 2 , 1 } , new CheatingQuiz ( ) . howMany ( answers ) ) ; }
tr	7	public String readLine ( ) { String line ; try { line = scanner . nextLine ( ) ; } catch ( Exception e ) { line = null ; } return line ; }
tr	4	public void chooseImage ( ) { FileChooser . createAndShowGUI ( client ) ; }
tr	3	public ReservationSchedule ( BigDecimal id ) { this . id = id ; }
tr	9	protected void addSchoolclass ( final Schoolclass schoolclass ) { classes . add ( schoolclass ) ; addElement ( String . format ( "%s" , schoolclass . getName ( ) ) ) ; }
tr	1	public GeneradorInstruccionesSQL ( ) { }
tr	9	public void setCoords ( final Integer x1 , final Integer x2 , final Integer y1 , final Integer y2 , final Integer z1 , final Integer z2 ) { this . x1 = x1 ; this . x2 = x2 ; this . y1 = y1 ; this . y2 = y2 ; this . z1 = z1 ; this . z2 = z2 ; this . refresh ( ) ; }
tr	5	private String averageGrade ( final Student student ) { double averageGrade = student . averageGrade ( ) ; if ( averageGrade == - 1 ) { return "-" ; } return String . format ( "%.02f" , averageGrade ) ; }
tr	1	public int size ( ) { return 0 ; }
tr	2	public boolean isMoving ( ) { return moving ; }
tr	6	private PerfProfile ( PerfProfileBuilder builder ) { buckets = ImmutableList . copyOf ( builder . buckets ) ; }
tr	5	@ Override public boolean isNOT ( ) { return this . type == OperatorType . NOT ; }
tr	3	public AirCableChannel ( ) { super ( ) ; setProperty ( "iChanNo" , 0 ) ; setProperty ( "iChanVpid" , 2 ) ; setProperty ( "iChanMpid" , 4 ) ; setProperty ( "iChanSid" , 6 ) ; setProperty ( "iChanStatus" , 8 ) ; setProperty ( "iChanQam" , 12 ) ; setProperty ( "iChanSType" , 15 ) ; setProperty ( "iChanFav" , 16 ) ; setProperty ( "iChanEnc" , 24 ) ; setProperty ( "iChanSymbR" , 28 ) ; setProperty ( "iChanLock" , 31 ) ; setProperty ( "iChanONid" , 32 ) ; setProperty ( "iChanNid" , 34 ) ; setProperty ( "iChanBouqet" , 36 ) ; setProperty ( "iChanProvId" , 38 ) ; setProperty ( "iChanFreq" , 42 ) ; setProperty ( "iChanLcn" , 44 ) ; setProperty ( "iChanTSid" , 48 ) ; setProperty ( "iChanName" , 64 ) ; setProperty ( "lChanName" , 100 ) ; setProperty ( "iChanSName" , 164 ) ; setProperty ( "lChanSName" , 9 ) ; setProperty ( "iChanVFmt" , 182 ) ; setProperty ( "iChanFav79" , 290 ) ; setProperty ( "iChanCRC" , 291 ) ; setProperty ( "qam" , QAM64 ) ; setProperty ( "nid" , - 1 ) ; setProperty ( "freq" , - 1 ) ; setProperty ( "symbr" , - 1 ) ; setProperty ( "lcn" , 0 ) ; }
tr	7	public SeaFieldPanel ( ) { setLayout ( null ) ; seaButtonMatrix = createSeaField ( ) ; for ( int row = 0 ; row < 10 ; row ++ ) for ( int col = 0 ; col < 10 ; col ++ ) add ( seaButtonMatrix [ row ] [ col ] ) ; }
tr	1	public SongDAO ( ) { }
tr	10	public Characters ( String training ) { bigrams = new HashMap < String , Integer > ( ) ; trigrams = new HashMap < String , Integer > ( ) ; bigramTotal = 0 ; trigramTotal = 0 ; countGrams ( training ) ; }
tr	8	public boolean hasSlot ( String name ) { if ( slots . containsKey ( name ) ) return true ; for ( MinObject proto : protos ) { if ( proto . hasSlot ( name ) ) return true ; } return false ; }
tr	3	public void setCreatedDate ( Date createdDate ) { this . createdDate = createdDate ; }
tr	8	@ Override public void answerRightFast ( ) { answerField . setEditable ( false ) ; answerField . setBackground ( Color . GREEN ) ; this . resetBackground ( ) ; }
tr	3	public String getTitle ( ) { return title ; }
tr	10	public BigDecimal getGesamtGuthaben ( ) { BigDecimal guthaben = new BigDecimal ( 0 ) ; for ( Flasche f : abgeleiferteFlaschen ) { guthaben = guthaben . add ( f . getPfandwert ( ) . multiply ( new BigDecimal ( f . getAnzahl ( ) ) ) ) ; } return guthaben ; }
tr	9	static void SETARG_C ( InstructionPtr i , int u ) { i . set ( ( i . get ( ) & ( MASK_NOT_C ) ) | ( ( u << POS_C ) & MASK_C ) ) ; }
tr	5	@ Override public String toString ( ) { return "CorrelationResult: sessionId=" + getSessionId ( ) + " taskId=" + getTaskId ( ) ; }
tr	6	public static boolean isValidPropertyState ( String state ) { try { parsePropertyState ( state ) ; } catch ( IllegalArgumentException e ) { return false ; } return true ; }
tr	7	@ Override public void step ( ) { for ( AgentModel m : agents . values ( ) ) { m . model . step ( ) ; } }
tr	7	public ScriptRunner ( Connection connection , String delimiter , Charset charset ) { this . connection = connection ; this . delimiter = delimiter ; this . charset = charset ; }
tr	1	public void initDefaultCommand ( ) { }
tr	4	public int compareTo ( Layer other ) { return this . depth - other . depth ; }
tr	7	@ Override public void startNewGame ( Set < Line2D > walls , int numLights , int numCollectors ) { this . numLights = numLights ; this . numCollectors = numCollectors ; this . walls = walls ; }
tr	5	public void store ( List < StrawEventHandler > handlers ) { if ( handlers == null ) { return ; } for ( StrawEventHandler handler : handlers ) { this . store ( handler ) ; } }
tr	2	private int getCapacidad ( ) { return capacidad ; }
tr	9	private boolean esDeTipo ( String extensiones , String archivo ) { tokens = new StringTokenizer ( extensiones , "-" ) ; while ( tokens . hasMoreTokens ( ) ) { if ( archivo . endsWith ( tokens . nextToken ( ) ) ) return true ; } return false ; }
tr	5	@ Override public String toString ( ) { return rank + " of " + suit ; }
tr	7	public boolean equals ( Object obj ) { if ( this == obj ) return true ; if ( obj == null ) return false ; if ( getClass ( ) != obj . getClass ( ) ) return false ; FileImageSource other = ( FileImageSource ) obj ; if ( file == null ) { if ( other . file != null ) return false ; } else if ( ! file . equals ( other . file ) ) return false ; return true ; }
tr	3	public Object getTree ( ) { return tree ; }
tr	5	@ BeforeClass public static void before ( ) throws Exception { a = new Account ( ) ; }
tr	5	protected BitstreamException newBitstreamException ( int errorcode , Throwable throwable ) { return new BitstreamException ( errorcode , throwable ) ; }
tr	7	@ Override protected final V convert ( String argument ) { return convertWith ( converter , argument ) ; }
tr	2	public int getCurrentScore ( ) { return currentScore ; }
tr	4	public void setPageFooter ( Band newValue ) { pageFooter = newValue ; }
tr	5	public ArrayList < Comanda > listarTodos ( ) { return ComandaController . obterInstancia ( ) . listarTodos ( ) ; }
tr	1	public ProgressPrinter ( ) { this ( - 1 , false , null ) ; }
tr	1	public ESDate ( ) { }
tr	3	void removeWindow ( ) { if ( viewport != null ) viewport . dispose ( ) ; viewport = null ; }
tr	6	public final Option addLongOption ( String longForm ) { return addOption ( new Option . LongOption ( longForm ) ) ; }
tr	4	public String toString ( ) { if ( getFormula ( ) . length ( ) > 0 ) return "Effect:" + getFormula ( ) ; else return "" ; }
tr	2	public float getYhvec ( ) { return Yhvec ; }
tr	7	@ Test public void testReflexive ( ) { VGoverriddenAdress test = new VGoverriddenAdress ( "Elm" ) ; test . setCity ( "N-sk" ) ; test . setZipCode ( "00-000" ) ; test . equals ( test ) ; test . equals ( "123" ) ; }
tr	8	public static void main ( String [ ] args ) { DefaultActorTest at = new DefaultActorTest ( ) ; at . run ( args ) ; logger . trace ( "Done" ) ; }
tr	1	private bookkeeper ( ) { }
tr	8	public static void main ( String args [ ] ) { Q4 ob = new Q4 ( ) ; ob . input ( ) ; ob . bubble_sort ( ) ; ob . display ( ) ; }
tr	6	public JSTableDialog ( String title , String [ ] headings , int rows ) { this ( title , headings , getDefaultButtonArray ( ) , rows ) ; }
tr	7	public Maquina ( String nome , TipoCorJogador cor , TipoJogador tipoJogador ) { super ( nome , cor , tipoJogador ) ; }
tr	3	public String getDrugName ( ) { return drugName ; }
tr	3	public VarietyInformation . Inventory createVarietyInformationInventory ( ) { return new VarietyInformation . Inventory ( ) ; }
tr	4	public ErrorDataQueryResult ( String errorMessage ) { _errorMessage = errorMessage ; }
tr	10	private void RequestNameFieldFocusGained ( java . awt . event . FocusEvent evt ) { if ( DBWorker . id == 0 ) { RequestNameField . setText ( "" ) ; } }
tr	2	public boolean isVegetarian ( ) { return vegetarian ; }
tr	3	public Mailbox getMailbox ( ) { return mailbox ; }
tr	4	public String getBranch_id ( ) { retrieve ( ) ; return branch_id ; }
tr	7	@ Override public boolean equals ( Object obj ) { if ( this == obj ) return true ; if ( obj == null ) return false ; if ( obj instanceof DescribeComponentsResult == false ) return false ; DescribeComponentsResult other = ( DescribeComponentsResult ) obj ; if ( other . getComponentInfos ( ) == null ^ this . getComponentInfos ( ) == null ) return false ; if ( other . getComponentInfos ( ) != null && other . getComponentInfos ( ) . equals ( this . getComponentInfos ( ) ) == false ) return false ; return true ; }
tr	6	public Matrix4f initScale ( float x , float y , float z ) { m [ 0 ] [ 0 ] = x ; m [ 0 ] [ 1 ] = 0 ; m [ 0 ] [ 2 ] = 0 ; m [ 0 ] [ 3 ] = 0 ; m [ 1 ] [ 0 ] = 0 ; m [ 1 ] [ 1 ] = y ; m [ 1 ] [ 2 ] = 0 ; m [ 1 ] [ 3 ] = 0 ; m [ 2 ] [ 0 ] = 0 ; m [ 2 ] [ 1 ] = 0 ; m [ 2 ] [ 2 ] = z ; m [ 2 ] [ 3 ] = 0 ; m [ 3 ] [ 0 ] = 0 ; m [ 3 ] [ 1 ] = 0 ; m [ 3 ] [ 2 ] = 0 ; m [ 3 ] [ 3 ] = 1 ; return this ; }
tr	4	public List < Topic > getThreads ( ) { return threads ; }
tr	3	public String getStyle ( ) { return style ; }
tr	3	protected void setClient ( IMqttAsyncClient client ) { this . client = client ; }
tr	6	public static boolean Nym_VerifyOutmailByIndex ( String NYM_ID , int nIndex ) { return otapiJNI . OTAPI_Basic_Nym_VerifyOutmailByIndex ( NYM_ID , nIndex ) ; }
tr	2	@ Override public int getNumberOfRows ( ) { return 0 ; }
tr	9	public void update ( CourseRoles instance ) { log . debug ( "updating " + entitySimpleName + " instance" ) ; try { super . update ( instance ) ; log . debug ( entitySimpleName + " update successful" ) ; } catch ( RuntimeException re ) { log . error ( entitySimpleName + " update failed" , re ) ; throw re ; } }
tr	6	public void wait ( String message , TimeSpan timeout ) { wait ( message , timeout , DEFAULT_INTERVAL ) ; }
tr	8	@ Test public void shouldLoadMp3WithId3Tags ( ) throws IOException , UnsupportedTagException , InvalidDataException { loadAndCheckTestMp3WithTags ( MP3_WITH_ID3V1_AND_ID3V23_TAGS , 41 ) ; loadAndCheckTestMp3WithTags ( MP3_WITH_ID3V1_AND_ID3V23_TAGS , 256 ) ; loadAndCheckTestMp3WithTags ( MP3_WITH_ID3V1_AND_ID3V23_TAGS , 1024 ) ; loadAndCheckTestMp3WithTags ( MP3_WITH_ID3V1_AND_ID3V23_TAGS , 5000 ) ; loadAndCheckTestMp3WithTags ( new File ( MP3_WITH_ID3V1_AND_ID3V23_TAGS ) , 41 ) ; loadAndCheckTestMp3WithTags ( new File ( MP3_WITH_ID3V1_AND_ID3V23_TAGS ) , 256 ) ; loadAndCheckTestMp3WithTags ( new File ( MP3_WITH_ID3V1_AND_ID3V23_TAGS ) , 1024 ) ; loadAndCheckTestMp3WithTags ( new File ( MP3_WITH_ID3V1_AND_ID3V23_TAGS ) , 5000 ) ; }
tr	5	public JSONTokener ( InputStream inputStream ) throws JSONException { this ( new InputStreamReader ( inputStream ) ) ; }
tr	1	public Alphabet ( ) { this ( 10000 ) ; }
tr	9	@ Override protected void postRenderState ( GameContainer container , Graphics g ) throws SlickException { if ( gui != null ) { gui . draw ( ) ; } }
tr	8	public static WIMenuItem Footer ( IWIRoad road , Text name ) { return new WIMenuItem ( road , "//*[@id='footer']//*[text()='" + name . getValue ( ) + "']" , name . getName ( ) ) ; }
tr	9	private void PostOrder ( Node node ) { if ( node == null ) return ; PostOrder ( node . left ) ; PostOrder ( node . right ) ; System . out . println ( node . key + " " ) ; }
tr	1	public TollFreeNumberRental ( ) { }
tr	7	private static void testSplit ( ) { String src = "var arrayImg = new Array();" + "arrayImg[0] = \"http://srimg1.meimei22.com/big/suren/2014-8-22/1/407899112014050822400403_640.jpg\";" + "arrayImg[0] = \"http://srimg1.meimei22.com/big/suren/2014-8-22/1/4078991120140508224023013_640.jpg\";" + "arrayImg[0] = \"http://srimg1.meimei22.com/big/suren/2014-8-22/1/407899112014050822404702_640.jpg\";" + "arrayImg[0] = \"http://srimg1.meimei22.com/big/suren/2014-8-22/1/4078991120140508224114010_640.jpg\";" + "getImgString()" ; String [ ] arrs = src . split ( ";" ) ; for ( String arr : arrs ) { printStr ( arr ) ; } }
tr	9	private static void testWriteUnsignedByte ( ByteArrayTool baa ) { byte [ ] b = new byte [ 128 ] ; baa . putUnsignedByte ( b , 43 , ( short ) fe ) ; assertEquals ( ( byte ) fe , b [ 43 ] ) ; baa . putByte ( b , 44 , ( byte ) 2a ) ; assertEquals ( ( byte ) 2a , b [ 44 ] ) ; }
tr	9	protected TextIDPair readNextDocText ( BufferedReader docIn ) throws IOException { String line = docIn . readLine ( ) ; if ( line != null ) { docID ++ ; return new TextIDPair ( line , docID ) ; } else { return null ; } }
tr	8	private void CopiarBotonActionPerformed ( java . awt . event . ActionEvent evt ) { areaPrincipal . copy ( ) ; }
tr	4	public Elf ( Elf e ) { this ( e . gameToNotice ) ; e . health /= 2 ; this . health = e . health ; }
tr	3	public byte [ ] getTerminator ( ) { return terminators [ textEncoding ] ; }
tr	10	@ Override public void actionPerformed ( ActionEvent e ) { releaseTimer . stop ( ) ; map . remove ( keyCode ) ; keyReleased ( keyCode ) ; }
tr	1	public PoblacioTest ( ) { }
tr	8	@ Test public void testGetParkingLotNumbersOfColor ( ) throws Exception { initialize ( ) ; assertEquals ( 0 , command . getParkingLotNumbersOfColor ( "GreenWhite" ) . size ( ) ) ; }
tr	1	public Vertex ( ) { }
tr	6	@ AfterClass public static void tearDownAfterClass ( ) throws Exception { System . out . println ( "AfterClass test##########################################################" ) ; }
tr	1	public Messenger ( ) { super ( ) ; }
tr	5	private String getDifficultyName ( ) { if ( numHints < ( boardSegs * boardSegs ) + boardSegs ) return "diablolical" ; if ( numHints < boardWidth * 2 ) return "tough" ; if ( numHints < boardWidth * boardSegs ) return "moderate" ; return "gentle" ; }
tr	2	public float getMaxz ( ) { return maxz ; }
tr	2	public int getX ( ) { return ( int ) this . getSqCoordinate ( ) . getX ( ) ; }
tr	1	public void ejecutar ( ) { }
tr	10	public OptionSet getMatchingSet ( boolean ignoreUnmatched , boolean requireDataLast ) { for ( String setName : optionSets . keySet ( ) ) if ( check ( setName , ignoreUnmatched , requireDataLast ) ) return optionSets . get ( setName ) ; return null ; }
tr	4	public Vector2D ( final Vector2D v ) { this . x = v . x ; this . y = v . y ; }
tr	1	public InvalidActionException ( ) { super ( ) ; }
tr	8	@ Override public void finalizeConnector ( ) throws OntologyConnectorException { if ( server != null ) { try { server . close ( ) ; } catch ( IOException e ) { throw new OntologyConnectorException ( "Could not close the socket server!" ) ; } } keepOn = false ; }
tr	5	private int getBaseScore ( Sequence sequence ) { int length = sequence . getSequence ( ) . length ( ) ; if ( length < 4 ) return 10 ; if ( length < 7 ) return 20 ; else return 40 ; }
tr	5	public ListNode min ( ) { if ( isEmpty ( ) ) { throw new RuntimeException ( "Heap is empty!" ) ; } return array [ 0 ] ; }
tr	4	public SecurityServiceException ( String code , String message ) { this ( code , message , null ) ; }
tr	8	public void testPick ( ) { game . processCommand ( new Command ( "pick" , "Tree" ) , true ) ; assertEquals ( null , game . getPlayer ( ) . getItem ( "Tree" ) ) ; game . processCommand ( new Command ( "pick" , "Plant" ) , true ) ; assertEquals ( "Plant" , game . getPlayer ( ) . getItem ( "Plant" ) . getItemName ( ) ) ; }
tr	8	@ Override public void handleGameWon ( Team winningTeam ) { System . out . println ( winningTeam . getTeamName ( ) + " Win!" ) ; }
tr	6	private IdentNode constIdent ( ) { IdentNode fu = new IdentNode ( read ( ID , "identifier" ) . text ( ) + "" ) ; return fu ; }
tr	10	@ Test public void testFormatStartWithZero ( ) { Object obj = "0000034.34xxx" ; double dbl = mFncUtil . numberConverter ( obj ) ; double expected = 34.34D ; assertEquals ( "Fail to generate number from a string" , expected , dbl ) ; }
tr	7	private void jMenuItemEditSelectAllActionPerformed ( java . awt . event . ActionEvent evt ) { selectAll ( ) ; }
tr	3	public ParserException ( String message ) { super ( message ) ; }
tr	8	public static Complex complex ( Complex x ) { if ( x == null ) System . out . println ( "moo" ) ; return complex ( x . real , x . imag ) ; }
tr	4	public int compareTo ( Account other ) { return this . number . compareTo ( other . number ) ; }
tr	9	public static ProcessorLayer createProcessorLayerWithProcessorNeuron ( int neuronsNum , boolean bias ) { ProcessorLayer layer = new ProcessorLayer ( ) ; if ( bias ) { layer . addNeuron ( new BiasNeuron ( ) ) ; } for ( int i = 0 ; i < neuronsNum ; i ++ ) layer . addNeuron ( new ProcessorNeuron ( ) ) ; return layer ; }
tr	10	static int ccw ( Point a , Point b , Point c , Point world ) { b = b . subtract ( a ) ; c = c . subtract ( a ) ; double d = world . . ( b . cross ( c ) ) ; if ( d > EPS ) return + 1 ; if ( d + EPS < 0 ) return - 1 ; return 0 ; }
tr	4	static public IconCache zam56 ( HttpCache hc ) { return new IconCache ( hc , 56 , 1 , "http://wow.zamimg.com/images/wow/icons/large/$.jpg|dir=56" ) ; }
tr	3	public void setConceptSchemeRef ( String conceptSchemeRef ) { this . conceptSchemeRef = conceptSchemeRef ; }
tr	6	private void crearLista ( int [ ] datos , boolean ordenado ) { for ( int i : datos ) { if ( ordenado ) this . insertarOrdenado ( i ) ; else this . insertarInicio ( i ) ; } }
tr	7	public synchronized void remove ( Connection connection ) { if ( connections_ . remove ( connection ) ) { PluginManager . Instance . disconnect ( connection ) ; } }
tr	3	public void setSequenceNumber ( int sentSequenceNumber ) { this . sequenceNumber = sentSequenceNumber ; }
tr	2	public int getNumber ( ) { return number ; }
tr	2	public synchronized boolean shouldTerminate ( ) { return terminate ; }
tr	7	private void init ( ) { table_fullticket . getColumnModel ( ) . getColumn ( 2 ) . setCellRenderer ( new ImageRenderer ( ) ) ; initTable ( ) ; }
tr	10	private void deleteOrder ( Order order ) throws Exception { for ( Order o : orders ) { if ( o . getId ( ) . equals ( order . getId ( ) ) ) { orders . remove ( o ) ; return ; } } throw new OrderNotFoundException ( ) ; }
tr	7	public Totales_estudiantes ( java . awt . Frame parent , boolean modal ) { super ( parent , modal ) ; initComponents ( ) ; }
tr	4	@ Override public void keyPressed ( KeyEvent e ) { }
tr	4	public void setCONTACTS_ISACTIVE ( Integer cONTACTS_ISACTIVE ) { CONTACTS_ISACTIVE = cONTACTS_ISACTIVE ; }
tr	8	@ Test public void FLYING_attacking_BUG ( ) { assertEquals ( 2.0 , tc . getWeaknessResistance ( Type . FLYING , Type . BUG ) , 0.0 ) ; }
tr	6	public static String getString ( String substr , int count ) { String str = "" ; for ( int i = 0 ; i < count ; i ++ ) { str += substr ; } return str ; }
tr	4	public InputFileInfo ( String fileName ) { this . setFileName ( fileName ) ; }
tr	7	public Geometry tube ( int m , double taper ) { double T [ ] = { - 1 , 1 } ; double C [ ] = { 1 , taper } ; return latheGen ( m , T , C , false ) ; }
tr	2	@ Override public void stop ( ) { }
tr	5	public Iterator < ChannelUser > iterChannelUsers ( ) { return users . iterator ( ) ; }
tr	9	private static void loadDomains ( char domains [ ] [ ] , Buffer stream ) { for ( int d = 0 ; d < domains . length ; d ++ ) { char domain [ ] = new char [ stream . getUnsignedByte ( ) ] ; for ( int c = 0 ; c < domain . length ; c ++ ) domain [ c ] = ( char ) stream . getUnsignedByte ( ) ; domains [ d ] = domain ; } }
tr	6	public void setSize ( double w , double h ) throws IllegalArgumentException { setWidth ( w ) ; setHeight ( h ) ; }
tr	4	public int getBoton ( Botones boton ) { return this . boton . get ( boton ) ; }
tr	6	private void option2ActionPerformed ( java . awt . event . ActionEvent evt ) { }
tr	2	public int getTurnRadius ( ) { return turnRadius ; }
tr	10	public void addShutDownHook ( ) { Runtime . getRuntime ( ) . addShutdownHook ( new Thread ( ) { public void run ( ) { try { shutDown ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } } ) ; }
tr	2	public int getPars ( ) { return pars ; }
tr	10	public void actionPerformed ( ActionEvent e ) { if ( ! myController . getNextTile ( ) ) { JOptionPane . showMessageDialog ( CarcassoneBoard . getInstance ( ) , "Player must submit last move. Please submit and try again!" , "Not Your Turn" , JOptionPane . PLAIN_MESSAGE ) ; } }
tr	8	public static byte [ ] hash ( byte [ ] data ) throws NoSuchAlgorithmException { MessageDigest md = MessageDigest . getInstance ( "SHA-1" ) ; md . update ( data ) ; return md . digest ( ) ; }
tr	6	public ServiceBImpl ( ServiceA serviceA ) { this . serviceA = serviceA ; System . out . println ( "calling constructor of ServiceBImpl" ) ; }
tr	8	@ XmlElementDecl ( namespace = "http://test.cxf.grails.org/" , name = "getCustomersByNameResponse" ) public JAXBElement < GetCustomersByNameResponse > createGetCustomersByNameResponse ( GetCustomersByNameResponse value ) { return new JAXBElement < GetCustomersByNameResponse > ( _GetCustomersByNameResponse_QNAME , GetCustomersByNameResponse . class , null , value ) ; }
tr	5	public String description ( ) { return "Custom SSS: " + brawl + "/" + melee + " stages  " + stages + " total stages defined" ; }
tr	1	protected GetShellReply ( ) { }
tr	1	private OrderManager ( ) { }
tr	8	public SubProcess ( String [ ] args ) throws IOException { this ( args , true , System . out , true , System . in , true , System . err ) ; }
tr	2	public void markDirty ( ) { this . dirty = true ; }
tr	1	public MFloat ( ) { }
tr	6	public Node reverseGetNext ( ) { Node node = current ; if ( node == head ) { current = null ; return null ; } else { current = node . prev ; return node ; } }
tr	5	public RoadAgent ( int length , AID firstRoadEnd , AID secondRoadEnd ) { new RoadAgent ( length , firstRoadEnd , secondRoadEnd , 0 ) ; }
tr	4	public void setObject ( List < T > object ) { this . object = object ; }
tr	9	boolean inside ( int x , int y ) { int a = centerPoint . x - x ; int b = centerPoint . y - y ; return ( int ) Math . sqrt ( a * a + b * b ) <= wholeRadius ; }
tr	10	public Inventory ( ) { contents = new Item [ ROWS ] [ COLUMNS ] ; contents [ 0 ] [ 0 ] = new Pickaxe ( Quality . STONE ) ; contents [ 0 ] [ 1 ] = new Pickaxe ( Quality . IRON ) ; contents [ 0 ] [ 2 ] = new Pickaxe ( Quality . SILVER ) ; }
tr	2	public void stopTest ( ) { testController . stopTest ( ) ; }
tr	6	private IStatusManager createStatusManager ( ) { return new StatusManager ( managers . messageManager , gpioUtility ) ; }
tr	2	public boolean isAuthenticated ( ) { return authenticated ; }
tr	6	public void addMouseListener ( MouseListener mouseListener ) { super . addMouseListener ( mouseListener ) ; for ( Component component : getComponents ( ) ) { component . addMouseListener ( mouseListener ) ; } }
tr	6	public static _Fields findByThriftIdOrThrow ( int fieldId ) { _Fields fields = findByThriftId ( fieldId ) ; if ( fields == null ) throw new IllegalArgumentException ( "Field " + fieldId + " doesn't exist!" ) ; return fields ; }
tr	7	@ Override public String toString ( ) { return "IDs{" + "ids=" + ids + "  previousCursor=" + previousCursor + "  nextCursor=" + nextCursor + } ; }
tr	7	public static void main ( String [ ] args ) { Integer integer = new Integer ( 5 ) ; Integer integer2 = new Integer ( 10 ) ; Integer result = integer + integer2 ; }
tr	6	@ Test public void testSymetric ( ) { VGoverriddenPoint3D test = new VGoverriddenPoint3D ( 1 , 2 , 3 ) ; VGoverriddenPoint3D test2 = new VGoverriddenPoint3D ( 1 , 2 , 3 ) ; test . equals ( test2 ) ; test2 . equals ( test ) ; }
tr	8	public static void copyElements ( DArray src , int srcInd , DArray dest , int destInd , int length ) { copyElements ( src . n , srcInd , dest . n , destInd , length ) ; }
tr	7	public static < T extends Comparable < ? super T >> void exchange ( T [ ] arr , int i , int j ) { T temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; }
tr	6	private void jTextField1ActionPerformed ( java . awt . event . ActionEvent evt ) { }
tr	8	public static void freeInts ( ) { if ( ! unusedInts . isEmpty ( ) ) { unusedInts . clear ( ) ; } if ( ! unusedBigInts . isEmpty ( ) ) { unusedBigInts . clear ( ) ; } unusedInts . addAll ( usedInts ) ; unusedBigInts . addAll ( usedBigInts ) ; usedInts . clear ( ) ; usedBigInts . clear ( ) ; }
tr	9	public MapMerge ( Genome genome , String name , String version , String jobID , int mapID ) { super ( genome , Genome . namespace , name , version , jobID ) ; this . mapID = mapID ; }
tr	8	public void parseArgumentList ( final List < Tree > list ) { do { list . add ( parseArgument ( ) ) ; } while ( poll ( kComma ) ) ; }
tr	4	@ Override public String toString ( ) { return "db.Client[ idClient=" + idClient + " ]" ; }
tr	7	public NetworkClient ( ClientCommIF cCommIF ) { this . cCommIF = cCommIF ; activeConnections = new Connections ( ) ; msgProto = new MessageProtocol ( this , activeConnections ) ; }
tr	8	private void doSelectGoal ( ) { if ( board . setGoal ( this . boardPosition ) ) { selectGoal = false ; board . setRobots ( currentPosition ) ; updateBoardGetRobots ( ) ; } }
tr	6	@ Test public void testMovelNl2 ( ) { write ( "hello\nmister\njohn doe" ) ; cursor . movel ( "\nmister\njohn doe" , 0 ) ; assertPosition ( "-:l1:c5" ) ; }
tr	1	public Assignment ( ) { this ( null , null , null ) ; }
tr	4	public void onUnitDestroy ( Unit unit ) { if ( eventListener != null ) { eventListener . onUnitDestroy ( unit ) ; } }
tr	1	public Endereco ( ) { }
tr	3	@ Override public String getTableName ( ) { return "COMPONENT" ; }
tr	8	public static List < Integer > commonDivisors ( final int a , final int b ) { notZeroCheck ( a ) ; notZeroCheck ( b ) ; return listIntersection ( divisors ( a ) , divisors ( b ) ) ; }
tr	1	public static synchronized void InitSTA ( ) { InitSTA ( false ) ; }
tr	8	@ Override protected void connectionWithClientBroken ( INDIClient client ) { System . err . println ( "Connection with client " + client . getInetAddress ( ) + " has been broken." ) ; }
tr	5	public Collection < Playable > getPlayables ( ) { return playables . values ( ) ; }
tr	4	EventExposingDirectoryPoller ( DirectoryPoller directoryPoller ) { dp = directoryPoller ; }
tr	10	public Factory ( org . apache . thrift . async . TAsyncClientManager clientManager , org . apache . thrift . protocol . TProtocolFactory protocolFactory ) { this . clientManager = clientManager ; this . protocolFactory = protocolFactory ; }
tr	9	public void Largo ( ) { NodosLista aux = PrimerNodo ; int Lar = 0 ; while ( aux != null ) { Lar ++ ; aux = aux . siguiente ; } System . out . println ( "El largo de la Lista es: " + Lar ) ; }
tr	10	public ReportPublish ( Publish publish , int totalImpressions , int totalClicks , BigDecimal totalCost , Set < ReportrDaily > reportrDailies ) { this . publish = publish ; this . totalImpressions = totalImpressions ; this . totalClicks = totalClicks ; this . totalCost = totalCost ; this . reportrDailies = reportrDailies ; }
tr	5	private void zero ( ) throws JSONException { if ( probe ) { log ( 0 ) ; } write ( 0 , 1 ) ; }
tr	5	protected RejectPageBuilder reject ( String viewName ) { return WebPageUtils . reject ( viewName ) ; }
tr	1	public FeedScrollBar ( ) { }
tr	3	public Cliente ( ) { mascotas = new ArrayList ( ) ; }
tr	7	public void drawDotScreen ( int x , int y , Color color ) { drawDotScreen_native ( pointer , x , y , color ) ; }
tr	5	public Object remove ( String key ) { return this . map . remove ( key ) ; }
tr	3	@ Override public void dispose ( ) { super . dispose ( ) ; hpCaption . dispose ( ) ; }
tr	7	public boolean useTech ( TechType tech , Unit target ) { return useTech_native ( pointer , tech , target ) ; }
tr	8	public lecMSMomentum ( ) { counting = 0 ; arrayIsFull = false ; mode = BUY_MODE ; average = 0 ; shareQuantity = 0 ; lastAverage = 0 ; }
tr	3	public void OnMenuBar ( boolean menuBar ) { received ( "OnMenuBlur" , menuBar ) ; }
tr	4	public NoDetallado ( String p ) { this . setPais ( p ) ; }
tr	2	public FormFuncionario ( ) { initComponents ( ) ; }
tr	5	public OAuth2 ( AuthorizationCallback authCallback , OAuth2Settings settings ) { this ( authCallback , settings , null ) ; }
tr	10	@ Override public Object getProperty ( Object instance ) { try { field . setAccessible ( true ) ; return field . get ( instance ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
tr	10	public synchronized void produce ( ) { try { if ( product != 0 ) { wait ( ) ; } } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } product = 1 ; System . out . println ( "Producer produce : " + product ) ; notifyAll ( ) ; }
tr	4	private Architecture ( final String name , final String ... aliases ) { this . name = name ; this . aliases = aliases ; }
tr	6	public Client ( String dni , String nom , String cognoms , String email ) { this . dni = dni ; this . nom = nom ; this . cognoms = cognoms ; this . email = email ; }
tr	7	public HighlightPoint ( SearchLayer layer , Node node , BufferedImage shape ) { this . layer = layer ; this . node = node ; this . shape = shape ; }
tr	10	@ Override public MDDVariable getVariableForKey ( Object key ) { MDDVariable var = store . getVariableForKey ( key ) ; int idx = store2custom [ var . order ] ; if ( idx < 0 ) { return null ; } return var ; }
tr	3	public void setName ( String name ) { this . name = name ; }
tr	1	private External ( ) { }
tr	4	public void setName ( String value ) { this . name = value ; }
tr	10	public void paintFrameInGame ( ) { displayScore ( ) ; if ( lives_img == null ) { drawString ( "Lives " + lives , viewWidth ( ) - status_r_margin , 0 , 1 ) ; } else { drawCount ( lives - 1 , lives_img , viewWidth ( ) - status_r_margin , 0 , - getImageSize ( lives_img ) . x - 2 ) ; } }
tr	7	private void initPanelDBarComponents ( ) { kPxy = new XKPanel [ 18 ] [ 2 ] ; for ( int i = 0 ; i < 18 ; i ++ ) for ( int j = 0 ; j < 2 ; j ++ ) kPxy [ i ] [ j ] = new XKPanel ( i , j ) . init ( c ) ; }
tr	3	public void setObject ( String object ) { this . object = object ; }
tr	6	public BitVector ( long unsigned , long length ) { this . length = length ; if ( unsigned < 0 ) { g = null ; } else { g = new byte [ ( int ) ( length / 8 ) + ( length % 8 > 0 ? 1 : 0 ) ] ; for ( int i = 0 ; i < g . length ; i ++ ) { g [ i ] = unsignedToByte ( ( int ) ( unsigned % 256 ) ) ; unsigned /= 256 ; } } }
tr	7	public OperatingEnvironment operatingEnvironmentBuilder ( ) { OperatingEnvironment OEB = new OperatingEnvironment ( ) ; OEB . setFactors ( factorsBuilder ( ) ) ; OEB . setSubFactors ( subFactorsBuilder ( ) ) ; return OEB ; }
tr	7	@ Override public void putByte ( long index , int offset , byte value ) { assert offset <= structLength - 1 : offset ; ohm . putByte ( index * structLength + offset , value ) ; }
tr	4	public boolean bateauxPlaces ( ) { return flotte . equals ( bateaux_places ) ; }
tr	8	private IBSTree < Integer > makeBalanced ( ) { IBSTree < Integer > t = new BSTree < Integer > ( ) ; t . insert ( 5 ) ; t . insert ( 3 ) ; t . insert ( 2 ) ; t . insert ( 4 ) ; t . insert ( 7 ) ; t . insert ( 6 ) ; t . insert ( 8 ) ; assertEquals ( "[[[ 2 ] 3 [ 4 ]] 5 [[ 6 ] 7 [ 8 ]]]" , t . toString ( ) ) ; return t ; }
tr	5	@ Override public void addLast ( E e ) { add ( e ) ; }
tr	4	HttpHeaders ( ) { head . before = head . after = head ; }
tr	9	public void setFieldValue ( _Fields field , Object value ) { switch ( field ) { case SUCCESS : if ( value == null ) { unset_success ( ) ; } else { set_success ( ( QueueInfo ) value ) ; } break ; } }
tr	4	@ Override public bank . Bank getBank ( ) { return bank ; }
tr	4	public ArrayList < Integer > getOutputNums ( ) { return outputNums ; }
tr	1	public SystemPreferences ( ) { }
tr	1	public Value ( ) { }
tr	4	@ Before public void setUp ( ) { fakeFileSystem = new MockFileManager ( ) ; }
tr	2	public int getPoints ( ) { return points ; }
tr	3	protected void setCommunicator ( Communicator communicator ) { this . communicator = communicator ; }
tr	9	public SessionFactory getSessionFactory ( ) { try { return ( SessionFactory ) new InitialContext ( ) . lookup ( "SessionFactory" ) ; } catch ( Exception e ) { log . error ( "Could not locate SessionFactory in JNDI" , e ) ; throw new IllegalStateException ( "Could not locate SessionFactory in JNDI" ) ; } }
tr	6	@ BeforeTest protected void setUp ( ) throws Exception { try { assert true == false ; throw new RuntimeException ( "Please enable assertions." ) ; } catch ( AssertionError e ) { } }
tr	7	public JSONObject put ( String key , Map value ) throws JSONException { this . put ( key , new JSONObject ( value ) ) ; return this ; }
tr	3	private static TermURIs getURISet ( ) { if ( _singleton == null ) { _singleton = new TermURIs ( ) ; } return _singleton ; }
tr	5	public void setAdmins ( ArrayList < Administrator > a ) { this . admins = a ; }
tr	10	private static void print ( String msg ) { String name = Thread . currentThread ( ) . getName ( ) ; System . out . println ( name + ": " + msg ) ; }
tr	10	protected void setUp ( ) throws XmlPullParserException { factory = factoryNewInstance ( ) ; xpp = factory . newPullParser ( ) ; assertEquals ( false , xpp . getFeature ( XmlPullParser . FEATURE_PROCESS_NAMESPACES ) ) ; }
tr	7	public void paint ( Graphics g ) { super . paint ( g ) ; if ( enabled ) return ; g . setColor ( new Color ( 180 , 180 , 180 , 120 ) ) ; g . fillRect ( 0 , 0 , 174 , 34 ) ; }
tr	6	@ Override public List < ProjectilesData . SingleProjectileData > getSubs ( ) { return projectiles ; }
tr	6	private void BotonActualizarEmpleadoActionPerformed ( java . awt . event . ActionEvent evt ) { }
tr	8	public static void main ( String [ ] args ) { int numCases = in . nextInt ( ) ; for ( int i = 0 ; i < numCases ; i ++ ) { processCase ( i + 1 ) ; } }
tr	4	public byte getRegisteredDelivery ( ) { return byte . parseByte ( "0" + registeredDelivery . getText ( ) , 10 ) ; }
tr	6	@ Override public void RemoveLogHander ( Handler h ) { logger . removeHandler ( h ) ; }
tr	2	public void setTipoDeTitulo ( int mTipoDeTitulo ) { this . mTipoDeTitulo = mTipoDeTitulo ; }
tr	6	@ Test public void valuesMatchKnownTripletForThirty ( ) throws Exception { assertThat ( calculate ( 30 ) , is ( new int [ ] { 5 , 12 , 13 } ) ) ; }
tr	10	@ Override public void rightMultiply ( Matrix other ) { for ( int i = 0 ; i < 4 ; i ++ ) for ( int j = 0 ; j < 4 ; j ++ ) copy [ i ] [ j ] = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { for ( int k = 0 ; k < 4 ; k ++ ) { copy [ i ] [ j ] = copy [ i ] [ j ] + this . get ( k , i ) * other . get ( j , k ) ; } } } for ( int i = 0 ; i < 4 ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { this . set ( j , i , copy [ i ] [ j ] ) ; } } }
tr	10	public static void main ( String [ ] args ) { ApiJunk test = new Junk ( ) ; System . err . println ( test . nopMethods ( ) ) ; }
tr	8	@ XmlElementDecl ( namespace = "com/firstdata/Merchant/gmfV3.10" , name = "OfferProvName" ) public JAXBElement < String > createOfferProvName ( String value ) { return new JAXBElement < String > ( _OfferProvName_QNAME , String . class , null , value ) ; }
tr	4	private void applyWeightChange ( ) { this . weight += this . weightUpdate * this . learningrate ; this . weightUpdate = 0 ; }
tr	6	@ Override public void setReply ( Object reply ) { boolean bool = ( boolean ) reply ; this . reply = bool . booleanValue ( ) ; }
tr	5	public void set ( int x , int y , float value ) { m [ x ] [ y ] = value ; }
tr	3	public AddMaterialCommand ( Material material ) { this . material = material ; }
tr	10	private void postOrder ( T [ ] array , BSTNode < T > node ) { if ( ! node . isEmpty ( ) ) { postOrder ( array , ( BSTNode < T > ) node . getLeft ( ) ) ; postOrder ( array , ( BSTNode < T > ) node . getRight ( ) ) ; array [ index ++ ] = node . getData ( ) ; } }
tr	4	@ Override public PageType getType ( ) { return PageType . FRONTPAGE ; }
tr	5	public InteractivePlayer ( Mark mark , Prompt prompt ) { super ( mark ) ; this . prompt = prompt ; }
tr	7	public final Option addLongOption ( char shortForm , String longForm ) { return addOption ( new Option . LongOption ( shortForm , longForm ) ) ; }
tr	3	public TriggerTiming getWhen ( ) { return when ; }
tr	3	public void setType ( String type ) { this . type = type ; }
tr	1	public PhotographTest ( ) { }
tr	6	public T get ( class < T > c , Serializable id ) { return ( T ) this . getCurrentSession ( ) . get ( c , id ) ; }
tr	7	private String greet ( ) { String [ ] greetings = { "Bonjour \u00E0 vous." , "Salutation." , "Quel belle temp\u00E9rature avons-nous ces temps-ci!" , "Au revoir!" } ; int n = ( int ) ( Math . random ( ) * greetings . length ) ; return greetings [ n ] ; }
tr	8	private void btnBackallActionPerformed ( java . awt . event . ActionEvent evt ) { i = 0 ; btnPesquisarActionPerformed ( evt ) ; }
tr	1	public SqlRepairer ( ) { }
tr	10	public void delBackgroundAtSelector ( ) { int row = selectorLocation . y / Util . GRID_SECTIONS ; int col = selectorLocation . x / Util . GRID_SECTIONS ; levelLayout [ row ] [ col ] . setLocation ( 0 , 0 ) ; }
tr	7	private void drawEllipse ( CustomCanvas canvas , Graphics2D g ) { drawEllipse ( g ) ; canvas . repaint ( getDirtyRectangle ( ) ) ; }
tr	5	public final void setLoc ( final short x , final short y ) { loc . set ( x , y ) ; }
tr	7	boolean isOnBoard ( Position position ) { return 0 <= position . x && position . x < width && 0 <= position . y && position . y < height ; }
tr	10	public EvalField getCopy ( ) { EvalField copy = new EvalField ( getWidth ( ) , getHeight ( ) ) ; for ( int x = 0 ; x < getWidth ( ) ; ++ x ) { for ( int y = 0 ; y < getHeight ( ) ; ++ y ) { int originalValue = getValueAt ( x , y ) ; copy . setValueAt ( x , y , originalValue ) ; } } return copy ; }
tr	6	@ Test public void incrementingNumbers ( ) { assertMapped ( ( Integer x ) -> x + 2 , asList ( 1 , 2 , 3 ) , asList ( 3 , 4 , 5 ) ) ; }
tr	1	public SimpleResponseBody ( ) { }
tr	6	public void randomRoll ( ) { roll = new Random ( ) . nextInt ( Integer . MAX_VALUE ) ; }
tr	1	public ProjectUser ( ) { }
tr	9	public TaskID ( JobID jobID , TaskType taskType , int taskID , int taskAttemptID ) { this . jobID = jobID ; this . taskType = taskType ; this . taskID = taskID ; this . taskAttemptID = taskAttemptID ; this . ID = createID ( jobID , taskType , taskID , taskAttemptID ) ; }
tr	6	public PluginLoader ( ) throws FileNotFoundException { pluginDirectory = new File ( "plugins/" ) ; if ( ! pluginDirectory . exists ( ) ) { throw new FileNotFoundException ( "Unable to find the plugins directory" ) ; } if ( ! pluginDirectory . isDirectory ( ) ) { throw new FileNotFoundException ( "Unable to find the plugins directory" ) ; } }
tr	2	public void setMax_force ( float max_force ) { this . max_force = max_force ; }
tr	5	public Creditos ( ) { JOptionPane . showMessageDialog ( null , message , "About..." , JOptionPane . INFORMATION_MESSAGE ) ; }
tr	6	public static void main ( String [ ] argumentVector ) { SchedulePlanner schedulePlanner = new SchedulePlanner ( argumentVector ) ; schedulePlanner . execute ( ) ; }
tr	6	public CellEvent ( View v , EventObject aEv ) { super ( v ) ; this . action = aEv ; }
tr	10	@ Override public void insertUpdate ( DocumentEvent de ) { System . out . println ( "Hello World!" ) ; stateChanged ( new ChangeEvent ( de . getDocument ( ) ) ) ; }
tr	3	public int getLineNumber ( ) { return TokenStream . this . getLineNumber ( beg ) ; }
tr	4	@ Override public void setView ( CardCreateView view ) { this . view = view ; }
tr	8	public DirectoryPollerBuilder addPolledDirectory ( PolledDirectory directory ) { if ( directory == null ) { throw new NullPointerException ( NULL_ARGUMENT_ERROR_MESSAGE ) ; } directories . add ( directory ) ; return this ; }
tr	3	public void setChosenAnswer ( String chosenAnswer ) { this . chosenAnswer = chosenAnswer ; }
tr	5	public void setZin ( String zin ) { if ( ! zin . equals ( this . zin ) ) { this . zin = zin ; fireInvalidationEvent ( ) ; } }
tr	8	public final T get ( ) throws DiffbotException { if ( executed ) { return getResult ( ) ; } else { synchronized ( client ) { if ( ! executed ) { request . runBatch ( this ) ; return getResult ( ) ; } else { return getResult ( ) ; } } } }
tr	8	public List < Entity > getEntities ( WorldLocation l1 , WorldLocation l2 ) { return getEntities ( l1 . x , l1 . y , l2 . x , l2 . y ) ; }
tr	7	public LIST ( String adminName , byte [ ] adminPass ) { super ( Operation . LIST ) ; this . adminName = adminName ; this . admin = true ; adminPW = adminPass ; }
tr	5	private static StringBuilder buildGCD ( final int a , final int b ) { return new StringBuilder ( ) . append ( "(" ) . append ( a ) . append ( "  " ) . append ( b ) . append ( ")" ) ; }
tr	3	public void setClientSocket ( Socket sock ) { this . sock = sock ; }
tr	4	public void setHarmonic ( int i , int val ) { harmonicamps [ i ] = val ; }
tr	9	@ Override public short readShort ( ) { byte [ ] data = new byte [ 2 ] ; read ( data ) ; short value ; if ( order == ByteOrder . LITTLE_ENDIAN ) { value = ( short ) ( ( FF & data [ 0 ] ) ) ; value |= ( short ) ( ( FF & data [ 1 ] ) << 8 ) ; } else { value = ( short ) ( ( FF & data [ 1 ] ) ) ; value |= ( short ) ( ( FF & data [ 0 ] ) << 8 ) ; } return value ; }
tr	10	public static InfoSet getBasicInfo ( ) { InfoSet info = new InfoSet ( ) ; info . add ( "Architecture" , System . getProperty ( "os.arch" ) ) ; info . add ( "OS" , System . getProperty ( "os.name" ) ) ; info . add ( "OS Version" , System . getProperty ( "os.version" ) ) ; info . add ( "Current JVM Max Memory" , Runtime . getRuntime ( ) . maxMemory ( ) ) ; info . add ( "Current JVM Free Memory" , Runtime . getRuntime ( ) . freeMemory ( ) ) ; return info ; }
tr	3	public Gun ( SuperTank bot ) { this . bot = bot ; }
tr	3	public QueryResults ( ResultSet rs ) { this . rs = rs ; }
tr	5	public int getData ( int row , int col ) { return data [ getIndex ( row , col ) ] ; }
tr	1	private void GameUtilites ( ) { }
tr	8	public void updateObservers ( UpdateData data ) { for ( int i = 0 ; i < _Observers . size ( ) ; i ++ ) { _Observers . get ( i ) . update ( data ) ; } }
tr	9	@ Test ( expected = ServiceFailure . class ) public void testValidateInputInvalidBadType ( ) throws ServiceFailure { final String inputString = "{\"name\":\"randl\" \"value\":\"prabce\"}" ; final TestService service = new TestService ( ) ; service . validateInput ( inputString ) ; }
tr	8	synchronized public int getPlayerIndex ( String ip , int port ) { for ( int i = 0 ; i < playersArr . length ; i ++ ) { if ( ( playersArr [ i ] != null ) && ( playersArr [ i ] . matches ( ip , port ) ) ) return i ; } return - 1 ; }
tr	8	public void debugf ( String fmt , Object ... args ) { core ( Level . DEBUG , fmt , null , args ) ; }
tr	1	public LinearRing ( ) { super ( ) ; }
tr	4	public ArrayList < Ticket > showAllTicket ( ) { return Ticket . showAll ( ) ; }
tr	8	public void onWebsocketClosing ( WebSocket conn , int code , String reason , boolean remote ) { onClosing ( conn , code , reason , remote ) ; }
tr	4	public void removeAll ( ) { for ( int i = getRowCount ( ) - 1 ; i >= 0 ; i -- ) { removeRow ( i ) ; } }
tr	10	public void setDestination ( Destination destination ) { currChatRoom = destination ; try { currChatRoomProducer = session . createProducer ( destination ) ; } catch ( JMSException e ) { throw new RuntimeException ( e ) ; } }
tr	6	@ SuppressWarnings ( "unchecked" ) public List < String > getTags ( ) { return ( List < String > ) _attributes . get ( "tags" ) ; }
tr	10	public static void main ( String [ ] args ) { double [ ] examples = { 0.1 , 3.05 , 3.4499 , 3.55 , 3.565 , 3.00005 } ; for ( int i = 0 ; i < examples . length ; i ++ ) System . out . println ( cycleRange ( examples [ i ] ) ) ; }
tr	1	private Singleton ( ) { }
tr	7	public void write ( short [ ] samples , int offs , int len ) throws JavaLayerException { if ( isOpen ( ) ) { writeImpl ( samples , offs , len ) ; } }
tr	7	public static void reloadDatabase ( ActionEvent evt ) { InitializationManager . addTask ( InitializationManager . LOAD_DATABASE , "     Loading Database" ) ; InitializationManager . processTasks ( ) ; }
tr	7	public int getIndex ( ) { return Dispatch . get ( this , "Index" ) . changeType ( Variant . VariantInt ) . getInt ( ) ; }
tr	2	public int getClazz ( ) { return clazz ; }
tr	9	@ Override @ Transactional ( propagation = Propagation . SUPPORTS ) public Waves find ( String s ) { return null ; }
tr	3	public ObservationEvent ( Observable source ) { this . source = source ; }
tr	1	private Constants ( ) { super ( ) ; }
tr	1	public RoleSchool ( ) { }
tr	4	private Role ( Strategy s ) { associatedStrategy = s ; }
tr	4	public List < Points > getPoints ( ) { return points ; }
tr	3	public CharArraySource ( char [ ] data ) { this ( data , 0 , ( data != null ) ? data . length : - 1 ) ; }
tr	3	public String getDLDateOfBirth ( ) { return dlDateOfBirth ; }
tr	9	@ Test public void testFilterConjunctive ( ) { this . shard . filterConjunctive ( this . nonmatches , 1 , 0 ) ; assertEquals ( 1024 , this . countMatches ( ) ) ; this . shard . filterConjunctive ( this . nonmatches , 1 , 1 ) ; assertEquals ( 1024 , this . countMatches ( ) ) ; this . shard . filterConjunctive ( this . nonmatches , 1 , ( 1 ) | ( 1 << 1 ) ) ; assertEquals ( 512 , this . countMatches ( ) ) ; assertMatches ( 0 ) ; assertNotMatches ( 1 ) ; this . shard . filterConjunctive ( this . nonmatches , 0 , ( 1 << 2 ) ) ; assertEquals ( 64 , this . countMatches ( ) ) ; assertMatches ( 2 ) ; assertNotMatches ( 4 ) ; this . shard . filterConjunctive ( this . nonmatches , 0 , ( 1 << 2 ) ) ; assertEquals ( 64 , this . countMatches ( ) ) ; this . shard . filterConjunctive ( this . nonmatches , 0 , ( 1 << 2 ) | ( 1 << 1 ) ) ; assertEquals ( 0 , this . countMatches ( ) ) ; }
tr	9	@ Override public void setAllowedNatures ( Collection < Nature > natures ) { allowedNatures = Collections . synchronizedSet ( new HashSet < > ( natures ) ) ; }
tr	3	Partido ( Manager [ ] managers ) { this . managers = managers ; }
tr	10	public Remapper ( PersistenceVersionViewSource ... specs ) { versionMapper = new KonceptVersionRemapper ( specs ) ; genericiser = new ReflectionObjectGenericiser ( ( MetaSoure ) versionMapper , persistentFieldOperator ) ; validate ( ) ; }
tr	3	public Set getDonviquanlies ( ) { return this . donviquanlies ; }
tr	1	public void tick ( ) { }
tr	5	public StringBuilder Htmlproduct ( Integer ID ) { return HtmlModel . Htmlproduct ( ID ) ; }
tr	4	public Eye ( Organism organism1 ) { this ( ) ; setOrganism ( organism1 ) ; }
tr	10	public static float signedPhi ( Vector2f pv1 , Vector2f pv2 ) { final double a1 = Math . atan2 ( pv2 . y , pv2 . x ) ; final double a2 = Math . atan2 ( pv1 . y , pv1 . x ) ; return ( float ) ( a1 - a2 ) ; }
tr	10	private void endExpression ( ) { String s = textHandler . end ( ) ; if ( s . length ( ) > 0 ) { container . add ( new Expression ( s , pass2 ) ) ; } }
tr	4	public ConfigManager config ( ) { check ( "getConfig" ) ; return mConfig ; }
tr	1	public Schedule ( ) { }
tr	10	@ Override public void mouseReleased ( MouseEvent e ) { if ( e . getModifiers ( ) == 16 ) { fillEditor ( ) ; getParent ( ) . invalidate ( ) ; } else if ( e . getModifiers ( ) == 4 ) { showTimeoutColor = false ; repaint ( ) ; } }
tr	5	public void scale ( double x , double y , double z ) { m ( ) . scale ( x , y , z ) ; }
tr	9	@ Override public void visit ( WhileLoop node ) { println ( node ) ; depth ++ ; node . condition ( ) . accept ( this ) ; node . body ( ) . accept ( this ) ; depth -- ; }
tr	4	public void setCategory ( Category c ) { currentCategory = c ; }
tr	1	public static boolean returnNull ( ) { return null ; }
tr	4	public void keyTyped ( Graphics g , char c ) { }
tr	7	public void paintComponent ( Graphics gr ) { if ( _graph != null ) { _graph . draw ( gr , _index1 , _index2 ) ; } }
tr	3	public String getHamQTHPass ( ) { return hamQTHPass ; }
tr	9	public FileChooserButton ( File startDir , FileFilter filter ) { super ( "..." ) ; this . addActionListener ( this ) ; fileChooser = new JFileChooser ( startDir ) ; fileChooser . setFileFilter ( filter ) ; }
tr	4	public List < long > getStudentIDs ( ) { if ( studentIDs == null ) { studentIDs = new ArrayList < long > ( ) ; } return this . studentIDs ; }
tr	4	public void setSrc1 ( IntegerRegister src1 ) { Src1 = src1 ; }
tr	8	private void btnAjouterActionPerformed ( java . awt . event . ActionEvent evt ) { this . ajouterComp ( ) ; afficherNoyauFonctionnel ( ) ; }
tr	8	public static boolean SavePurse ( String SERVER_ID , String ASSET_TYPE_ID , String USER_ID , String THE_PURSE ) { return otapiJNI . OTAPI_Basic_SavePurse ( SERVER_ID , ASSET_TYPE_ID , USER_ID , THE_PURSE ) ; }
tr	4	private int getLastPageNumber ( ) { return elements . size ( ) / pageSize + ( ( elements . size ( ) % pageSize != 0 ) ? 1 : 0 ) ; }
tr	7	private void delFile ( String fileName ) { File file = new File ( fileName ) ; if ( file . exists ( ) ) { file . delete ( ) ; } }
tr	2	public double [ ] getGyroBias ( ) { return mGyroBias ; }
tr	4	public void setUsername ( String value ) { this . username = value ; }
tr	9	public static short [ ] getValues ( ) { short [ ] values = { OTHER , ENTITY_INFORMATION_INTERACTION , WARFARE , LOGISTICS , RADIO_COMMUNICATION , SIMULATION_MANAGEMENT , DISTRIBUTED_EMISSION_REGENERATION } ; return values ; }
tr	8	private ParseException error ( final String message ) { return new ParseException ( message , getOffset ( ) , getCurrentLineNumber ( ) , getColumnNumber ( ) , getLastCharacterRead ( ) ) ; }
tr	4	@ Override public void reset ( ) { actual = first ; }
tr	7	public Sentient getNextEvent ( ) { float timePassed = timeQueue . remove ( 0 ) ; this . adjustPriority ( - timePassed ) ; return sentientQueue . remove ( 0 ) ; }
tr	4	public String getFile ( ) { if ( file == null ) return null ; else return file . getName ( ) ; }
tr	2	public void setId ( int id ) { this . id = id ; }
tr	5	public static double distance ( double x0 , double y0 , double x1 , double y1 ) { return distance ( x1 - x0 , y1 - y0 ) ; }
tr	3	public Value getResult ( ) { return value ; }
tr	3	public void setMaxMwt ( float value ) { this . maxMwt = value ; }
tr	8	public void setVitesseY ( float vitesseY ) { this . vitesseY = vitesseY ; this . nouvelleMaxvelY = maxVelY * this . vitesseY ; if ( nouvelleMaxvelX == 0 ) { body . setMaxVelocity ( maxVelX , nouvelleMaxvelY ) ; } else { body . setMaxVelocity ( nouvelleMaxvelX , nouvelleMaxvelY ) ; } }
tr	3	public void setId ( String id ) { this . id = id ; }
tr	7	@ Override public boolean equals ( Object object ) { if ( ! ( object instanceof ProjectUser ) ) { return false ; } ProjectUser other = ( ProjectUser ) object ; if ( ( this . projectUserPK == null && other . projectUserPK != null ) || ( this . projectUserPK != null && ! this . projectUserPK . equals ( other . projectUserPK ) ) ) { return false ; } return true ; }
tr	5	public Integer apply ( Collection value ) { return value . size ( ) ; }
tr	4	public boolean getFeature ( String name ) { return f . getFeature ( name ) ; }
tr	2	public long getTransitionOffTime ( ) { return transitionOffTime ; }
tr	8	public void testRunDelayedCmd ( ) { roomCmd ( "bees" , "!botcreategame false" ) ; roomCmd ( "bob" , "!join" ) ; roomCmd ( "neel" , "!join" ) ; roomCmd ( "grue" , "!join" ) ; privCmd ( "bees" , "!botdelaycmd #channel !botdeal7 bob" ) ; privCmd ( "bees" , "!botdelaycmd #channel !botdeal7 neel" ) ; privCmd ( "bees" , "!botdelaycmd #channel !botdeal7 grue" ) ; roomCmd ( "bob" , "!start" ) ; privCmd ( "bees" , "!botplay #channel" ) ; privCmd ( "bees" , "!botdeal7 bob" ) ; privCmd ( "bees" , "!botdeal7 neel" ) ; privCmd ( "bees" , "!botdeal7 grue" ) ; privCmd ( "bees" , "!botshowplayercards #channel" ) ; privCmd ( "bees" , "!botsettime #channel" ) ; roomCmd ( "neel" , "!play 5" ) ; roomCmd ( "id10t" , "!join" ) ; privCmd ( "bees" , "!botdelaycmd #channel !botdeal7 id10t" ) ; roomCmd ( "grue" , "!play 4" ) ; privCmd ( "bees" , "!botchoose #channel" ) ; roomCmd ( "bob" , "!choose 2" ) ; privCmd ( "bees" , "!botcleanup #channel" ) ; List < Message > responses = privCmd ( "bees" , "!botplay #channel" ) ; assertMessage ( "bees" , "!botdeal7 id10t" , responses . get ( 0 ) ) ; }
tr	4	private boolean isFactionMember ( GameBoardElement element ) { return ( element instanceof FactionMember ) ; }
tr	3	public void testConnection ( ) throws NetworkIOException { prototype . testConnection ( ) ; }
tr	1	public HistorialBean ( ) { }
tr	6	@ Override public void run ( ) { if ( ServerUpdateChecker . Instance ( ) . GetResult ( ) ) new ServerUpdateFrame ( ) ; }
tr	2	public DSGrp createDSGrp ( ) { return new DSGrp ( ) ; }
tr	2	public double getSpeed ( ) { return speed ; }
tr	6	public void zip ( JSONArray jsonarray ) throws JSONException { begin ( ) ; writeJSON ( jsonarray ) ; }
tr	10	void processSecurityMsg ( ) { vlog . debug ( "processing security message" ) ; int rc = security . processMsg ( this ) ; if ( rc == 0 ) throwAuthFailureException ( ) ; if ( rc == 1 ) { state_ = RFBSTATE_SECURITY_RESULT ; processSecurityResultMsg ( ) ; } }
tr	3	public void requestUpdate ( ) { regExListenerManager . updateRequested ( ) ; }
tr	2	public void setTopeaut ( float topeaut ) { this . topeaut = topeaut ; }
tr	8	public void Imprimir ( ) { for ( int f = 0 ; f < 3 ; f ++ ) { for ( int c = 0 ; c < 5 ; c ++ ) { System . out . print ( matriz [ f ] [ c ] + " " ) ; } System . out . println ( ) ; } }
tr	4	private static byte method228 ( Class32 class32 ) { return ( byte ) method230 ( 8 , class32 ) ; }
tr	2	public void signal ( Signal signal ) { }
tr	10	@ Override public void addColumn ( TableColumn column ) { if ( tableColumns . size ( ) == 4 ) { column . setCellRenderer ( renderer ) ; column . setCellEditor ( editor ) ; } super . addColumn ( column ) ; }
tr	7	private void cmbMesItemStateChanged ( java . awt . event . ItemEvent evt ) { configDias ( ) ; }
tr	9	synchronized public boolean removePlayer ( String ip , int port ) { for ( int i = 0 ; i < playersArr . length ; i ++ ) { if ( ( playersArr [ i ] != null ) && ( playersArr [ i ] . matches ( ip , port ) ) ) { numOfPlayers -- ; playersArr [ i ] = null ; return true ; } } return false ; }
tr	2	public long getOffset ( ) { return offset ; }
tr	10	public BowShot ( MyObject obj ) { super ( "\u0412\u044B\u0441\u0442\u0440\u0435\u043B" , "\u0412\u044B\u0441\u0442\u0440\u0435\u043B \u0438\u0437 \u043B\u0443\u043A\u0430" , obj , "bow.jpg" ) ; setDamage ( 1 , 2 , Damage . Type . Physical ) ; setDistance ( 60 ) ; addEffects ( new Poison ( 1 ) ) ; }
tr	2	public static void apply ( ) { setLookAndFeel ( ) ; }
tr	4	public Node < E > getNext ( ) { return _next ; }
tr	7	public void agregarFila ( ) { Object [ ] [ ] nuevaTabla = new Object [ this . getRowCount ( ) + 1 ] [ 3 ] ; int i = 0 ; while ( i < this . getRowCount ( ) ) { nuevaTabla [ i ] [ 0 ] = this . filasColumnasTabla [ i ] [ 0 ] ; nuevaTabla [ i ] [ 1 ] = this . filasColumnasTabla [ i ] [ 1 ] ; nuevaTabla [ i ] [ 2 ] = this . filasColumnasTabla [ i ] [ 2 ] ; i ++ ; } this . filasColumnasTabla = nuevaTabla ; this . tablaModificada ( ) ; }
tr	1	public PipeMap ( ) { }
tr	1	public DataSent ( ) { }
tr	5	private static int posOfElement ( final byte element , final byte [ ] state ) { for ( int i = state . length - 1 ; i >= 0 ; -- i ) { if ( state [ i ] == element ) { return i ; } } return - 1 ; }
tr	1	public void setWeight ( ) { }
tr	8	@ Test public void testGet ( ) { assert . assertEquals ( "Name of TEST_FEATURE_1" , "testFeature1" , featureHolder . get ( TEST_FEATURE_1 ) . getName ( ) ) ; assert . assertEquals ( "Name of TEST_FEATURE_2" , "testFeature2" , featureHolder . get ( TEST_FEATURE_2 ) . getName ( ) ) ; }
tr	2	public void checkForNewVersion ( ) { start ( ) ; }
tr	3	public boolean isZero ( ) { return compareTo ( ZERO ) == 0 ; }
tr	2	public int getVie ( ) { return vie ; }
tr	4	@ Override public String toString ( ) { return "Properties<" + lines + ">" ; }
tr	7	public List < ColourConnection . Colours . Colour > getColour ( ) { if ( colour == null ) { colour = new ArrayList < ColourConnection . Colours . Colour > ( ) ; } return this . colour ; }
tr	1	public JMonthChooser ( ) { this ( true ) ; }
tr	9	public GraphX ( String pname ) { _vertexs = new DoubleList < > ( new VertexComparator < Vertex < E >> ( ) ) ; _name = pname ; }
tr	9	public void move ( int dx , int dy ) { dy = dy * - 1 ; if ( ScreenX + dx > 0 && ScreenX + Width + dx < 800 ) { ScreenX += dx ; } if ( ScreenY + dy > 0 && ScreenY + dy + getTotalHeight ( ) < Standards . W_HEIGHT ) { ScreenY += dy ; } }
tr	4	public BubbleCityWithCurvedRoadOne ( int row , int col ) { super ( IMAGE_PATH , row , col ) ; }
tr	2	public long getLastModified ( ) { return lastModified ; }
tr	5	public CommandLineConfiguration ( String osName ) { this ( "appname" , "" , CommandLineProperties . getSystemProperties ( osName ) ) ; }
tr	4	public List < AST > getChild ( ) { return child ; }
tr	9	private static void errorPrint ( Throwable e ) { if ( e instanceof SQLException ) SQLExceptionPrint ( ( SQLException ) e ) ; else { System . out . println ( "A non SQL error occured." ) ; e . printStackTrace ( ) ; } }
tr	6	private void loadKeyActions ( ) { replPanel . addKeyAction ( "F1" , new HelpAction ( ) ) ; replPanel . addKeyAction ( "ctrl S" , new SaveAction ( ) ) ; replPanel . addKeyAction ( "ctrl O" , new LoadAction ( ) ) ; }
tr	5	public void testGetStandardDeviation ( ) { assertEquals ( 69.26818477643415 , Util . getStandardDeviation ( data ) ) ; }
tr	3	public NotConfiguredException ( String message ) { this . message = message ; }
tr	10	private void searchResultsMouseClicked ( java . awt . event . MouseEvent evt ) { downloadButton . setEnabled ( searchResults . getSelectedRow ( ) >= 0 ) ; }
tr	2	public boolean isBlsSpecialBonusAvailable ( ) { return blsSpecialBonusAvailable ; }
tr	6	@ Column ( name = "job_description" , length = 3000 ) public String getJobDescription ( ) { return this . jobDescription ; }
tr	6	public int getLayoutHashCode ( ) { long n = System . nanoTime ( ) ; int h = super . getLayoutHashCode ( ) ; if ( isLeftToRight ( ) ) h += 416343 ; return 0 ; }
tr	8	public boolean inBounds ( MouseEvent e ) { return ( e . getX ( ) < ( 680 - ( width - size ) ) && e . getY ( ) < ( 680 - ( height - size ) ) ) ; }
tr	8	public void setXY ( int x , int y ) { this . x = x ; this . y = y ; self = new Rectangle ( x , y , width , height ) ; outer = new Rectangle ( x - height / 4 , y - height / 4 , width + height / 2 , height + height / 2 ) ; }
tr	1	public Description ( ) { }
tr	8	public String getNumber ( ) { Random rnd = new Random ( ) ; return numbers . get ( rnd . nextInt ( numbers . size ( ) ) ) ; }
tr	10	@ Override protected void onMouseReleased ( MouseEvent e ) { try { topScreen . onMouseReleased ( e ) ; } catch ( NullPointerException exception ) { System . out . println ( "There is no current Screen" ) ; } }
tr	9	public void setPlayingOrder ( Player player1 , Player player2 ) { double randomValue = Math . random ( ) ; if ( randomValue < 0.5 ) { this . currentPlayer = player1 ; this . otherPlayer = player2 ; } else { this . otherPlayer = player2 ; this . currentPlayer = player1 ; } }
tr	9	public TipusHabitacio ( String nom , Integer capacitat , String descripcio ) { this . nom = nom ; this . capacitat = capacitat ; this . descripcio = descripcio ; this . habitacions = new HashSet < Habitacio > ( ) ; }
tr	3	public void setIndId ( Integer indId ) { this . indId = indId ; }
tr	1	public int docID ( ) { return docID ; }
tr	8	private static String intToKOrMilLongName ( int i ) { String s = String . valueOf ( i ) ; for ( int k = s . length ( ) - 3 ; k > 0 ; k -= 3 ) s = s . substring ( 0 , k ) + " " + s . substring ( k ) ; if ( s . length ( ) > 8 ) s = "@gre@" + s . substring ( 0 , s . length ( ) - 8 ) + " million @whi@(" + s + ")" ; else if ( s . length ( ) > 4 ) s = "@cya@" + s . substring ( 0 , s . length ( ) - 4 ) + "K @whi@(" + s + ")" ; return " " + s ; }
tr	3	boolean isGapAfterPush ( ) { return gapAfter != null && gapAfter . getGapPush ( ) ; }
tr	6	public String getLongVersion ( ) { if ( false == "UNKNOWN" . equals ( getName ( ) ) && false == "UNKNOWN" . equals ( getVersion ( ) ) ) { return String . format ( "<info>%s</info> version <comment>%s</comment>" , getName ( ) , getVersion ( ) ) ; } return "<info>Console Tool</info>" ; }
tr	6	private boolean whenToken ( TokenType t ) { if ( testToken ( t ) ) { data . pop ( ) ; return true ; } else { return false ; } }
tr	3	public ASTNode rightMatch ( ) { return matchedRightChild ; }
tr	1	public Comentari ( ) { }
tr	2	public Consulta_cantidad_acreditaciones ( ) { initComponents ( ) ; }
tr	4	public MenuIteratorAllItems ( LinkedList < MenuItem > menu ) { this . menu = menu ; }
tr	4	public static KbUtils getInstance ( ) { return SingletonHolder . instance ; }
tr	8	@ Test public void ICE_attacking_NO_TYPE ( ) { assertEquals ( 1.0 , tc . getWeaknessResistance ( Type . ICE , Type . NO_TYPE ) , 0.0 ) ; }
tr	8	@ Override public void marshal ( Element e , Document d ) { if ( this . id != null ) e . setAttribute ( "ID" , this . id ) ; }
tr	4	@ SuppressWarnings ( "unused" ) private void setHandle ( long handle ) { this . handle . set ( handle ) ; }
tr	6	public ArrayList < Score > getScores ( ) { loadScoreFile ( ) ; sort ( ) ; return scores ; }
tr	5	@ Override public PersistentList < Object > rest ( ) { throw new NoSuchElementException ( ) ; }
tr	7	public CharacterDimensions ( int width , int height , int lineSpacing ) { m_width = width ; m_height = height ; m_lineSpacing = lineSpacing ; }
tr	1	public void play ( ) { }
tr	2	public boolean isWhiteTurn ( ) { return this . whiteTurn ; }
tr	1	private vslConfig ( ) { }
tr	5	public AbstractResponse ( String url , boolean failed ) { this . urlString = url ; this . failed = failed ; }
tr	10	private void builtThatAwesomeRegisterFrame ( ) { OnAction onAction = new OnAction ( ) ; jRecoverPanel = new RecoverPanel ( ) ; jRecoverPanel . getQuestionBox ( ) . addActionListener ( onAction ) ; jRecoverPanel . getCancelButton ( ) . addActionListener ( onAction ) ; jRecoverPanel . getRecoveryButton ( ) . addActionListener ( onAction ) ; add ( jRecoverPanel ) ; }
tr	8	public Transition getFor ( char c ) { Transition result = defaultTransition ; if ( transitions . length > c ) { Transition tableValue = transitions [ c ] ; if ( tableValue != null ) result = tableValue ; } return result ; }
tr	5	protected RmiAccountProxy ( Account a ) throws RemoteException { super ( ) ; acc = a ; }
tr	9	public DecisionNode getBranch ( Game game ) { int i ; for ( i = 0 ; i < Game . NUM_GHOSTS ; i ++ ) { if ( game . isEdible ( i ) == true ) return this . trueNode ; } return this . falseNode ; }
tr	4	public double sum ( ) { double sum = 0.0 ; for ( int i = 0 ; i < n ; i ++ ) sum += x [ i ] ; return sum ; }
tr	2	public GUIgestionPiezas ( ) { initComponents ( ) ; }
tr	7	public int getLeft ( ) { return Dispatch . get ( this , "Left" ) . changeType ( Variant . VariantInt ) . getInt ( ) ; }
tr	4	public static void main ( String [ ] args ) { launch ( args ) ; }
tr	10	public List < V > listValues ( ) { List < V > list = new ArrayList < V > ( ) ; if ( this . left != null ) { list . addAll ( this . left . listValues ( ) ) ; } list . add ( getValue ( ) ) ; if ( this . right != null ) { list . addAll ( this . right . listValues ( ) ) ; } return list ; }
tr	4	private void clearAddTaxPanel ( ) { addTaxNameField . setText ( "" ) ; addTaxRateField . setText ( "" ) ; }
tr	9	@ Test public void buildId ( ) throws ResponseBuilderParseException { builder . openStream ( stream ) ; String id = builder . buildId ( ) ; assert . assertEquals ( "4a40cfdbc9b56427a363c4a2c5aa05eb2c45d7d4" , id ) ; }
tr	1	protected boolean affectsPalettes ( ) { return false ; }
tr	4	public Address ( ) { this . abonentId = abonentIdCreator . incrementAndGet ( ) ; }
tr	6	@ Override public Object vistaLocale ( String token , String idDinosauro ) { return null ; }
tr	6	@ Override public void declareOutputFields ( OutputFieldsDeclarer outputFieldsDeclarer ) { outputFieldsDeclarer . declare ( new Fields ( "delta" , "time" , "imsi" ) ) ; }
tr	7	public CloturerCommanderAction ( Fenetre fenetre , Commande commande ) { super ( Langue . getTraduction ( "ok" ) ) ; this . fenetre = fenetre ; this . commande = commande ; }
tr	6	public long getLong_safe ( final long i ) { if ( i < 0 || i >= length ) { throw new ArrayIndexOutOfBoundsException ( long . toString ( i ) ) ; } return getLong ( i ) ; }
tr	6	public void addParam ( String key , String value ) { params . put ( key , value ) ; }
tr	10	public static DecoderTask newDecoderTask ( DecodedDataChecker dataChecker , ReadableByteChannel readable , int numIterations ) { checkDataChecker ( dataChecker ) ; checkReadable ( readable ) ; checkNumIterations ( numIterations ) ; return new DecoderTask ( dataChecker , readable , numIterations ) ; }
tr	9	@ Test ( expected = DuplicateInsertionException . class ) public void shouldRaiseExceptionForAddDuplicateSeance ( ) { Cinema cinema = new Cinema ( ) ; Seance seance = new Seance ( ) ; cinema . addSeance ( seance ) ; cinema . addSeance ( seance ) ; }
tr	9	public int getRoundStatus ( int match , int round ) { MatchHistory hist = ( MatchHistory ) matchHistory . get ( new Integer ( match ) ) ; if ( hist == null ) return MatchHistory . ROUND_ABORTED ; return hist . getRoundStatus ( round ) ; }
tr	7	FilterBox ( SynthCanvas pa ) { super ( pa , IDENT ) ; setLabel ( "Filter" ) ; addInput ( new Input ( this , "in" ) ) ; }
tr	9	public Connection getConnection ( ) { Database . start ( ) ; Database . login ( userName , password ) ; Connection connection = Database . getConnection ( databaseName ) ; return connection ; }
tr	9	void write ( long offset , ByteBuffer bf ) throws IOException { int size = 0 ; while ( bf . hasRemaining ( ) ) { int l = this . fc . write ( bf , offset + size ) ; size += l ; if ( l < 0 ) { break ; } } }
tr	2	public OtpErlangFloat ( final float f ) { super ( f ) ; }
tr	6	public Glyph find ( int x , int y ) { if ( intersects ( new Point ( x , y ) ) ) { return this ; } else { return null ; } }
tr	3	public Integer getProvinceID ( ) { return provinceID ; }
tr	3	public void removeTreeModelListener ( TreeModelListener l ) { }
tr	4	double getRight ( ) { return origin . x + size . x ; }
tr	9	public static int getNumberTimesQuizTaken ( int quizID ) { String query = "SELECT score FROM history WHERE quizID=" + quizID + ";" ; ResultSet rs = MyDB . queryDatabase ( query ) ; return MyDB . numberEntries ( rs ) ; }
tr	9	private CategorieMotClef findCategoryFromString ( String categorieMotClef ) { for ( CategorieMotClef c : categories ) { if ( c . getNom ( ) . equals ( categorieMotClef ) ) { return c ; } } throw new IllegalArgumentException ( "Etonnant : la cat\u00E9gorie de mot clef n'existe pas !" ) ; }
tr	5	@ Override public void setPopulation ( TspPopulation p ) { population = p ; }
tr	8	public void pesquisar ( String x ) throws Exception { list = new InstituicaoSubmissaoDAO ( ) . listar ( x ) ; preencherTabela ( ) ; }
tr	5	@ Test public void test3SortingTasks ( ) throws Exception { final int threads = 1 ; testImpl ( 1024 * 1024 * 3 , 1024 * 1024 * 1 * 4 , threads ) ; }
tr	9	private void start ( ) { model . start ( ) ; play . setVisible ( false ) ; restart . setVisible ( true ) ; backgroundSound . start ( ) ; backgroundSound . loop ( Clip . LOOP_CONTINUOUSLY ) ; }
tr	8	@ Override @ Transactional ( propagation = Propagation . NOT_SUPPORTED ) public List < daycare > findAll ( ) { return null ; }
tr	6	@ Override public InetSocketAddress getLocalSocketAddress ( WebSocket conn ) { if ( socket != null ) return ( InetSocketAddress ) socket . getLocalSocketAddress ( ) ; return null ; }
tr	8	private Node < V > addNextLessGreater ( Node < V > node , char c ) { while ( node . letter != c ) { if ( c < node . letter ) { if ( node . less == null ) { node . less = new Node < V > ( c ) ; return node . less ; } node = node . less ; } else { if ( node . greater == null ) { node . greater = new Node < V > ( c ) ; return node . greater ; } node = node . greater ; } } return node ; }
tr	3	public String getModificat ( ) { return modificat ; }
tr	3	public Object getNextPanelDescriptor ( ) { return FINISH ; }
tr	4	public int getHeight ( int layer ) { return layers . get ( layer ) . getHeight ( ) ; }
tr	4	public boolean isCompatible ( Key key ) { return this . key . equals ( key ) ; }
tr	9	void onMouseHover ( int entered ) { switch ( entered ) { case GL_TRUE : for ( MouseHoverEvent e : _mouseHoverIn ) { e . run ( ) ; } break ; case GL_FALSE : for ( MouseHoverEvent e : _mouseHoverOut ) { e . run ( ) ; } break ; } }
tr	8	public Control ( ) { register = new Register ( ) ; String [ ] fieldNames = register . getFieldNames ( ) ; mainWindow = new MainWindow ( this , fieldNames ) ; }
tr	4	public void setVersionName ( String value ) { this . versionName = value ; }
tr	6	public Field fieldAfterLabel ( String label ) { return getField ( new FieldIdentifier ( label ) ) ; }
tr	2	public LockKeeper ( ) { this ( 10 ) ; classed = false ; }
tr	2	public void setX ( double x ) { this . x = x ; }
tr	8	public static ByteBuffer stringToBuffer ( int id ) { String s = Integer . valueOf ( id ) . toString ( ) ; return stringToBuffer ( s ) ; }
tr	2	public long numOfTerms ( ) { return this . totalTermFrequency ; }
tr	1	public UsernameAlreadyTakenException ( ) { }
tr	8	@ Override public String getMessage ( ) { String msg = super . getMessage ( ) ; for ( String name : badValues . keySet ( ) ) { msg += "\n\t" + name + " = " + badValues . get ( name ) ; } return msg ; }
tr	9	void prVar ( Var v , int d ) { indent ( d ) ; if ( v instanceof SimpleVar ) prVar ( ( SimpleVar ) v , d ) ; else if ( v instanceof FieldVar ) prVar ( ( FieldVar ) v , d ) ; else if ( v instanceof SubscriptVar ) prVar ( ( SubscriptVar ) v , d ) ; else throw new Error ( "Print.prVar" ) ; }
tr	10	private static void initRendering ( ) { GL11 . glEnable ( GL11 . GL_DEPTH_TEST ) ; GL11 . glEnable ( GL11 . GL_NORMALIZE ) ; GL11 . glShadeModel ( GL11 . GL_SMOOTH ) ; GL11 . glHint ( GL11 . GL_PERSPECTIVE_CORRECTION_HINT , GL11 . GL_NICEST ) ; }
tr	6	public void update ( ) { super . update ( ) ; if ( this . isClicked ( ) && ( Timer . getTime ( ) - this . lastClick ) > 200 ) { this . state = ! this . state ; this . lastClick = Timer . getTime ( ) ; } }
tr	5	@ Override public ITimeSeries < T > getLower ( ) { return this . tsLower ; }
tr	2	public long getTimeToWait ( ) { return this . timeToWait ; }
tr	9	@ Override public int versionCount ( String a , String b ) { return table . get ( Hash . get ( a , b ) ) . size ( ) ; }
tr	5	public AsnRange to ( long end ) { return to ( Asn . of ( end ) ) ; }
tr	7	public Flac2PcmAudioInputStream ( InputStream in , AudioFormat format , long length ) { this ( in , format , length , DEFAULT_BUFFER_SIZE ) ; }
tr	10	@ Test public void shouldSetCityArea ( ) throws Exception { cityArea = "Shevchenkivski" ; citizenAddress . setCityArea ( cityArea ) ; org . junit . assert . assertEquals ( cityArea , citizenAddress . getCityArea ( ) ) ; }
tr	5	public static void main ( String args [ ] ) { Beethoven me = new Beethoven ( ) ; }
tr	7	public void aumentar ( ) { xMax += 5 ; yMax += 5 ; zMax += 5 ; xMin -= 5 ; yMin -= 5 ; zMin -= 5 ; }
tr	5	public void setChannel ( java . lang . String channel ) { this . channel = channel ; }
tr	6	@ Override public long getQuantity ( Mineral mineral ) { return minerals [ mineral . ordinal ( ) ] ; }
tr	8	public void drawButtons ( ) { for ( int x = 0 ; x < buttons . size ( ) ; x ++ ) { buttons . get ( x ) . draw ( ScreenX , ScreenY ) ; } }
tr	9	@ Test public void testMoverY ( ) throws Exception { Nave nave = new Nave ( new Posicion ( 5 , 5 ) , new Posicion ( 0 , 0 ) , 4 ) ; nave . mover ( ) ; this . assertEquals ( true , nave . estoyEnPosicion ( new Posicion ( 0 , 1 ) ) ) ; }
tr	7	@ BeforeClass public static void setUpClass ( ) { testRule1 = new Rule ( "test rule" , "http://localhost/" , RULE1_TEST_REGEXP , true ) ; rdtpTestRule1 = new RuleDrivenTextParser ( testRule1 ) ; }
tr	2	public double getNear ( ) { return near ; }
tr	5	public static void sort ( int [ ] a ) { int [ ] aux = new int [ a . length ] ; sort ( a , aux , 0 , a . length - 1 ) ; assert isSorted ( a ) ; }
tr	5	final protected RepetitionParser zeroOrMore ( final Parser parser ) { return Parsers . zeroOrMore ( parser ) ; }
tr	2	public boolean isEmpty ( ) { return empty ; }
tr	1	public Builder ( ) { }
tr	2	public static String getBaseUrl ( ) { return "http://www.bezpecnepanelaky.eu/" ; }
tr	9	public void render ( GameContainer gc , StateBasedGame sbg , Graphics g ) { g . draw ( body ) ; }
tr	4	public HelpDeskMainFrame ( ) { initComponents ( ) ; landingPage . setVisible ( false ) ; }
tr	3	public static boolean isNull ( byte [ ] key ) { if ( key == null ) { return true ; } return isNull ( key , key . length ) ; }
tr	4	void setField ( String className , String fieldName ) { this . className = className ; this . fieldName = fieldName ; }
tr	4	public void run ( ) { m$ . Cmd . do ( methodName ) ; }
tr	8	public static void main ( String [ ] args ) { System . out . println ( new Fibonacci_9 ( ) . getFibonacci ( 6 ) ) ; }
tr	2	public void setK ( int k ) { this . k = k ; }
tr	2	public int getTimeleft ( ) { return timeleft ; }
tr	8	public void set_location_type ( String in ) { try { _location_type = Integer . parseInt ( in ) ; } catch ( NumberFormatException e ) { ; } }
tr	3	public ProcedimentoNaoDeclaradoException ( Id id ) { super ( "Procedimento " + id + " n\u00E3o declarado." ) ; }
tr	8	public void bloquearBoton ( ) { if ( this . tipoBarco == A ) { this . main . desactivarBotonUbicar ( 2 ) ; } else if ( this . tipoBarco == B ) { this . main . desactivarBotonUbicar ( 3 ) ; } else if ( this . tipoBarco == C ) { this . main . desactivarBotonUbicar ( 4 ) ; } else if ( this . tipoBarco == D ) { this . main . desactivarBotonUbicar ( 5 ) ; } }
tr	10	public int size ( ) { int size = 0 ; for ( int layerIndex = 0 ; layerIndex < layers . size ( ) - 1 ; layerIndex ++ ) { Layer layer = layers . get ( layerIndex ) ; for ( Neuron neuron : layer . getNeurons ( ) ) { if ( layer . getOutGoingConnections ( ) != null ) size += layer . getOutGoingConnections ( ) . get ( neuron ) . size ( ) ; } } return size ; }
tr	1	public LinkArrayCorrupt ( ) { super ( "link array corrupt." ) ; }
tr	7	public Map < String , Object > getRawMetadata ( ) { return Collections . unmodifiableMap ( metadata ) ; }
tr	3	public Region getRegion ( ) { return this . region ; }
tr	3	public String getFname ( ) { return fname ; }
tr	6	public final String getBindUser ( ) { return this . properties . get ( LDAPResource . BIND_USER ) ; }
tr	9	public String toString ( ) { String result = OntologyManager . getInstance ( ) . getClassNameByID ( classID ) ; result = result + "\n\thasDeviceVendorName: " + hasDeviceVendorName ; result = result + "\n\tisDeviceVendorOf: " + isDeviceVendorOf ; return result ; }
tr	2	public int GetX ( ) { return x ; }
tr	2	public long getMinInterval ( ) { return minInterval ; }
tr	10	public MerchantDeal getMerchantDeal ( int merchantDealId ) { MerchantDeal merchantDeal = null ; try { session = mySessionFactory . getCurrentSession ( ) ; merchantDeal = ( MerchantDeal ) session . get ( MerchantDeal . class , merchantDealId ) ; } catch ( Exception e ) { } return merchantDeal ; }
tr	10	@ Override public String toString ( ) { final StringBuilder sb = new StringBuilder ( 2048 ) ; super . toString ( sb ) . append ( " { " ) ; for ( int i = 0 ; i < MAX ; i ++ ) { if ( stats [ i ] . count != 0 ) { sb . append ( "\n        " ) . append ( stats [ i ] . toString ( ) ) ; } } return sb . append ( " }" ) . toString ( ) ; }
tr	9	public Mushroom ( ) { super ( ) ; picX = 606 ; picY = 480 ; String uri = "./res/pic/tileset01.png" ; if ( pic == null ) pic = Toolkit . getDefaultToolkit ( ) . getImage ( uri ) ; }
tr	6	@ Override public double getOutputError ( double [ ] outputError ) { double squareErrorSum = 0d ; for ( double error : outputError ) squareErrorSum += ( error * error ) * 0.5 ; return squareErrorSum ; }
tr	9	public static void main ( String [ ] args ) { TelaInicial tela = new TelaInicial ( ) ; tela . setDefaultCloseOperation ( TelaInicial . EXIT_ON_CLOSE ) ; tela . setSize ( 800 , 600 ) ; tela . setVisible ( true ) ; }
tr	5	public int confBlok ( Sudoku s ) { int sum = 0 ; for ( int i = 0 ; i < 9 ; i ++ ) sum += confBlok ( i , s ) ; return sum ; }
tr	5	public void killData ( Object object , int i ) { throw new UnsupportedOperationException ( ) ; }
tr	9	public static boolean allA ( String line ) { char last = A ; int count = 1 ; for ( int i = 0 ; i < line . length ( ) ; i ++ ) { if ( line . charAt ( i ) != last ) return false ; last = line . charAt ( i ) ; } return true ; }
tr	2	public int getValue ( ) { return val ; }
tr	8	public static void main ( String [ ] args ) { int numbers [ ] = { 1 , 2 , 3 , 5 , 8 , 13 } ; System . out . println ( "First member of this array is " + numbers [ 0 ] ) ; System . out . println ( "Last member of this array is " + numbers [ numbers . length - 1 ] ) ; }
tr	5	public Exception getException ( ) { return this . infoList . get ( infoList . size ( ) - 1 ) . getException ( ) ; }
tr	1	public void execute ( ) { }
tr	1	public draw ( ) { }
va	2	public int getDelayCount ( ) { return delayCount ; }
va	7	public int performOp ( Vec3i v ) { return Math . max ( Math . min ( v . _vals [ 0 ] , v . _vals [ 1 ] ) , v . _vals [ 2 ] ) ; }
va	5	private ServiceManager ( ) { services_ = new HashMap < String , ServiceDefinition > ( ) ; }
va	4	public void choicesForTicketPrices ( ) { System . out . println ( "1 - Students" ) ; System . out . println ( "2 - Senior citizens" ) ; System . out . println ( "3 - Platinum ticket pricing" ) ; System . out . println ( "4 - Thursday prices" ) ; System . out . println ( "5 - Sat and sun prices" ) ; System . out . println ( "6 - Mon - wed" ) ; System . out . println ( "7 - Fri after 6" ) ; System . out . println ( "8 - Fri before 6" ) ; }
va	3	public IODialog getDialog ( ) { return myDialog ; }
va	7	public List < VariableDefinition > getLocalVariableDefinitions ( ) { return new ArrayList < > ( namespace . names . values ( ) ) ; }
va	10	public JSONArray toJSONArray ( JSONArray names ) throws JSONException { if ( names == null || names . length ( ) == 0 ) { return null ; } JSONArray ja = new JSONArray ( ) ; for ( int i = 0 ; i < names . length ( ) ; i += 1 ) { ja . put ( this . opt ( names . getString ( i ) ) ) ; } return ja ; }
va	6	private PoolEntryFactory < T > createPoolEntryFactory ( ) { return new BasicPoolEntryFactory < T > ( pooledObjectfactory , pooledObjectValidator ) ; }
va	7	private void setEnabledZoomControls ( boolean isEnabled ) { zoomInButton . setEnabled ( isEnabled ) ; zoomOutButton . setEnabled ( isEnabled ) ; zoomLabel . setEnabled ( isEnabled ) ; dimensionsButton . setEnabled ( isEnabled ) ; }
va	10	@ Test public void parseEcho ( ) throws RecognitionException , IOException { LinkedList < String > textLines = new LinkedList < > ( ) ; textLines . add ( "echo true && (1 == 2)" ) ; textLines . add ( "echo min(1 max(1 2))" ) ; buildAST ( textLines ) ; }
va	10	public static List < PostParameter > toParamList ( PostParameter [ ] params ) { List < PostParameter > paramList = new ArrayList < PostParameter > ( params . length ) ; paramList . addAll ( Arrays . asList ( params ) ) ; return paramList ; }
va	8	public BIFID ( String key ) { Random random_gen = new Random ( ) ; period = 5 + random_gen . nextInt ( 8 ) ; keyword = key ; }
va	8	public boolean getBooleanData ( Document doc , String tagName ) { String data = getTextData ( doc , tagName ) ; if ( data == null ) { return null ; } else { return boolean . parseBoolean ( data ) ; } }
va	1	public CasaDeCambioTest ( ) { }
va	7	private boolean equals ( Object tree1 , Object tree2 ) { if ( tree1 == tree2 ) return true ; int size1 = treeSize ( tree1 ) , size2 = treeSize ( tree2 ) ; if ( size1 != size2 ) return false ; else return equals ( tree1 , 0 , tree2 , 0 , 0 , size1 ) ; }
va	6	public boolean optBoolean ( int index , boolean defaultValue ) { try { return getBoolean ( index ) ; } catch ( Exception e ) { return defaultValue ; } }
va	8	public void save ( ) throws IOException { FileOutputStream fout = new FileOutputStream ( fileProperties ) ; appProperties . store ( fout , "jZamok" ) ; fout . close ( ) ; }
va	10	@ Override public void aplicarDescuento ( Factura factura ) { if ( esMedioPagoPromo ( factura . getMedioDePago ( ) ) ) { double monto_descuento = factura . getMontoTotalConDescuentos ( ) * ( descuento / 100 ) ; factura . descontarMonto ( monto_descuento ) ; } }
va	2	public float getHrsOrigEst ( ) { return hrsOrigEst ; }
va	8	@ XmlElementDecl ( namespace = "com/firstdata/Merchant/gmfV3.10" , name = "VehIDNum" ) public JAXBElement < String > createVehIDNum ( String value ) { return new JAXBElement < String > ( _VehIDNum_QNAME , String . class , null , value ) ; }
va	8	@ Test public void testGcd ( ) { assertEquals ( 1 , NumberUtil . gcd ( 2 * 3 , 5 * 7 ) ) ; assertEquals ( 7 , NumberUtil . gcd ( 2 * 7 , 5 * 7 ) ) ; System . out . printf ( "%s==%s\n" , 1 , NumberUtil . gcd ( 5 , 27 ) ) ; assertEquals ( 1 , NumberUtil . gcd ( 5 , 27 ) ) ; assertEquals ( 1 , NumberUtil . gcd ( 5 , 32 ) ) ; assertEquals ( 1 , NumberUtil . gcd ( 27 , 32 ) ) ; }
va	2	@ Override public int getColumnCount ( ) { return 3 ; }
va	4	public void setElement ( Element e ) { this . element = e ; }
va	9	@ Override public boolean equals ( Object o ) { if ( this == o ) return true ; if ( ! ( o instanceof OAuthToken ) ) return false ; OAuthToken that = ( OAuthToken ) o ; if ( secretKeySpec != null ? ! secretKeySpec . equals ( that . secretKeySpec ) : that . secretKeySpec != null ) return false ; if ( ! token . equals ( that . token ) ) return false ; if ( ! tokenSecret . equals ( that . tokenSecret ) ) return false ; return true ; }
va	3	@ Override public Color getLightFontColor ( ) { return new Color ( 76 , 96 , 145 ) ; }
va	8	public void eliminarItem ( ) { if ( ConexionServidor . estaConectado ( ) ) { comando = new EliminarItem ( ) ; setMomento ( ) ; } else Inventario . setStatusBarText ( "No esta conectado!!!" ) ; }
va	4	BuildResults ( MultiServerMultiQueueSystem mysys ) { sys = mysys ; }
va	4	public List < ScheduleElementImpl > getScheduleElements ( ) { return scheduleElements ; }
va	3	public void setLevel ( int newLevel ) { this . level = newLevel ; }
va	10	public ArrayList < Organism > getLivingOrganisms ( ) { ArrayList < Organism > list = new ArrayList < Organism > ( ) ; for ( int o = 0 ; o < getOrganisms ( ) . size ( ) ; o ++ ) { if ( getOrganisms ( ) . get ( o ) . isAlive ( ) ) { list . add ( getOrganisms ( ) . get ( o ) ) ; } } return list ; }
va	6	public IdentPacket ( short version ) { data = new byte [ 3 ] ; data [ 0 ] = CLIENT_PACKET_HEADER_IDENT ; data [ 1 ] = ( byte ) ( ( version & FF00 ) >> 8 ) ; data [ 2 ] = ( byte ) ( version & 00FF ) ; }
va	3	public final String getAlbumArtist ( ) { return albumArtist ; }
va	7	Basket ( int id , Fundamental a , Fundamental b ) { this ( id , a . name + "/" + b . name , a . tinyName + "/" + b . tinyName , null , a , b ) ; }
va	4	public Variant ( int in ) { this ( new Integer ( in ) , VariantInt , false ) ; }
va	5	@ Override public float getStartU ( ) { return ( float ) this . startU / ( float ) this . parent . getWidth ( ) ; }
va	5	public Stock ( String companyName , BigDecimal price ) { this . companyName = companyName ; this . price = price ; }
va	2	public STA ( ) { start ( ) ; }
va	3	public void setEarlyStopping ( final boolean value ) { this . earlystop = value ; }
va	2	boolean isSelected ( ) { return mEnableBox . isSelected ( ) ; }
va	8	private void addTags ( final String prefix , final int count , final Document target ) { for ( int j = 0 ; j <= count ; j ++ ) { target . addTag ( prefix + j ) ; } }
va	3	public String getNom ( ) { return nom ; }
va	8	private void construct ( int height , int width ) { this . width = width ; this . height = height ; square = ( width == height ) ; vals = new double [ width * height ] ; hLabels = new String [ width ] ; vLabels = new String [ height ] ; }
va	1	public DebugCommand ( ) { super ( "Debug" ) ; }
va	8	@ Override public void focusGained ( FocusEvent e ) { if ( this . getText ( ) . equals ( hint ) ) super . setText ( "" ) ; }
va	4	public void Sanatize ( ) { mMessage = StringSanitizer . Sanitize ( mMessage ) ; }
va	1	public EchoTCPMessageHandler ( ) { super ( "echotcpmessagehandler" ) ; }
va	4	public void setThreadFunction ( SwarmThreadFunction threadFunction ) { myThreadFunction = threadFunction ; }
va	1	public boolean getScrollableTracksViewportHeight ( ) { return false ; }
va	10	private void tryNext ( ) { if ( _indexI < _readings . size ( ) && _indexJ < _readings . size ( ) ) { _next = Tuples . pair ( _readings . get ( _indexI ) , _readings . get ( _indexJ ) ) ; _indexJ ++ ; if ( _indexJ >= _readings . size ( ) ) { _indexI ++ ; _indexJ = _includeReflexive ? _indexI : _indexI + 1 ; } } else { _next = null ; } }
va	6	public Edge ( int x , int y , boolean isDirected ) { if ( x == y ) throw new IllegalArgumentException ( ) ; this . x = x ; this . y = y ; this . weight = weight ; this . isDirected = isDirected ; }
va	10	public Show ( DefaultTreeModel model , String title , String url , String referer ) { super ( model , title , new RTMPTool ( ) ) ; this . url = url ; this . ref = referer ; refresh ( ) ; }
va	9	public SidewaysFallingObject ( ) { dx = Math . random ( ) < 0.5 ? 1 : - 1 ; size = 1 + ( int ) ( Math . random ( ) * 6 ) ; xPosition = new int [ size ] ; int start = ( int ) ( Math . random ( ) * 31 ) ; for ( int i = 0 ; i < xPosition . length ; i ++ ) { xPosition [ i ] = ( start + i ) % 30 ; } }
va	1	public Configuracion ( ) { }
va	1	protected void deplacementOK ( ) { }
va	5	public double [ ] [ ] getTerm ( int index ) { if ( vars . isEmpty ( ) ) return null ; return vars . get ( index ) ; }
va	2	public final int [ ] getReverseBoard ( ) { return _reverseboard ; }
va	4	public MsgSubject ( ) { this . observers = new ArrayList < Observer > ( ) ; }
va	6	@ Override public void setDefBase ( int defBase ) { baseStats [ DEF ] = defBase ; reCalcStats ( ) ; }
va	1	public Freckle ( ) { }
va	9	@ Override public void onCommand ( SMTPSession session ) { String responseStr = null ; String argument = session . getCurRemainCommandStr ( ) ; if ( argument != null ) { responseStr = "500 syntax error" ; } else { responseStr = "250 OK " + argument ; } session . sendResponse ( responseStr ) ; }
va	9	public void addBall ( int x , int y , int velocityX , int velocityY ) { Ball b = new Ball ( x , y , velocityX , velocityY ) ; ballList . add ( b ) ; }
va	10	public void update ( Quest q ) { qp . sp . model . clear ( ) ; qp . olist . refreshList ( q ) ; qp . slist . refreshList ( q ) ; }
va	3	private float [ ] add ( float [ ] v1 , float [ ] v2 ) { return new float [ ] { v1 [ 0 ] + v2 [ 0 ] , v1 [ 1 ] + v2 [ 1 ] , v1 [ 2 ] + v2 [ 2 ] } ; }
va	8	public static Integer [ ] triangulate ( List < Vector2D > contour ) { Vector2D [ ] contourArray = contour . toArray ( new Vector2D [ contour . size ( ) ] ) ; return triangulate ( contourArray ) ; }
va	10	@ Override protected boolean inLineOfSight ( Point x , Point Abs ) { dx = ( x . x == 0 ) ? 0 : ( x . x > 0 ) ? 1 : - 1 ; dy = ( x . y == 0 ) ? 0 : ( x . y > 0 ) ? 1 : - 1 ; if ( x . x == 1 && x . y == 0 || x . y == 1 && x . x == 0 || x . x == - 1 && x . y == 0 || x . y == - 1 && x . x == 0 ) return true ; if ( C . isFigure ( new Point ( Abs . x - dx , Abs . y - dy ) ) ) return false ; return inLineOfSight ( new Point ( x . x - dx , x . y - dy ) , new Point ( Abs . x - dx , Abs . y - dy ) ) ; }
va	3	public String getAvaliationCriteria ( ) { return avaliationCriteria ; }
va	10	private int tileintToCid ( int tileint ) { if ( tileint == 0 ) return 0 ; Integer tileid = ( Integer ) images_tilecid . get ( new Integer ( tileint ) ) ; if ( tileid == null ) { System . out . println ( "Warning: unknown tile '" + tileint + "'." ) ; return 0 ; } return tileid . intValue ( ) ; }
va	3	public static Singleton1 getInstance ( ) { if ( uniqueInstance == null ) { uniqueInstance = new Singleton1 ( ) ; } return uniqueInstance ; }
va	2	public int getWalkingRightHandY ( ) { return walkingRightHandY ; }
va	4	public void tick ( ) { if ( absorbs < presses ) { absorbs ++ ; clicked = true ; } else { clicked = false ; } }
va	2	public int getSize ( ) { return _size ; }
va	2	public void setAppearanceGroup ( int appearanceGroup ) { this . appearanceGroup = appearanceGroup ; }
va	6	@ Override public void execute ( ) { if ( ServletFileUpload . isMultipartContent ( request ) ) { processMultipartRequest ( request ) ; } }
va	3	public void setRootNodePrefix ( String rootNodePrefix ) { this . rootNodePrefix = rootNodePrefix ; }
va	4	public void setComposite ( final int k ) { assert ( k >= 3 ) && ( ( k % 2 ) == 1 ) ; sieve . set ( ( k - 3 ) / 2 ) ; }
va	2	public HeightException ( int height ) { super ( "The height : " + height + " is not allowed." ) ; }
va	9	public void setColor ( int colorIndex , int r , int g , int b ) throws IndexOutOfBoundsException { myColors . set ( colorIndex , new Color ( r , g , b ) ) ; }
va	8	public static long gcd ( long i , long j ) { List < long > iFactors = SievePrimeFactors . primeFactors ( i ) ; List < long > jFactors = SievePrimeFactors . primeFactors ( j ) ; return gcd ( iFactors , jFactors ) ; }
va	8	public void set ( Vector2f vector ) { GL20 . glUniform2f ( _id , vector . x , vector . y ) ; }
va	1	public boolean isNumeric ( ) { return false ; }
va	1	public boolean handleReOpenApplication ( ) { return true ; }
va	6	@ Override public void updateString ( int columnIndex , String x ) throws SQLException { }
va	7	public void store ( Matrix x , double t ) { trajectory . add ( x ) ; time . add ( t ) ; }
va	6	@ Override public void actionPerformed ( final ActionEvent e ) { setVisible ( false ) ; dispose ( ) ; }
va	6	@ Override public byte [ ] retrieve ( Pointer pointer ) throws IOException { return pointer . getStorageBlock ( ) . retrieve ( pointer ) ; }
va	8	public BSTNode ( E d ) { data = d ; count = 1 ; left = null ; right = null ; size ++ ; }
va	4	private static boolean isDiffLegal ( long toCheck , long ref ) { return ( ( toCheck - ref ) % TIME_UNIT ) == 0 ; }
va	3	public void setYOffset ( double param ) { yOffset = param ; }
va	1	ProfesorAdModAbsente ( ) { }
va	4	public double getThroughputPerSecond ( ) { return ( 1000000000d / time ) * docs ; }
va	8	public add ( ) { this . requireLogin = true ; this . info = "add an appointmemt" ; this . addParamConstraint ( "name" ) ; this . addParamConstraint ( "venueId" , ParamCons . INTEGER ) ; this . addParamConstraint ( "startTime" , ParamCons . INTEGER ) ; this . addParamConstraint ( "endTime" , ParamCons . INTEGER ) ; this . addParamConstraint ( "info" ) ; this . addParamConstraint ( "frequency" , ParamCons . INTEGER ) ; this . addParamConstraint ( "lastDay" , ParamCons . INTEGER ) ; this . addParamConstraint ( "reminderAhead" , ParamCons . INTEGER , true ) ; this . addParamConstraint ( "aWaitingId" , ParamCons . STRING , "JSON array object" , true ) ; this . addRtnCode ( 405 , "venue not found" ) ; this . addRtnCode ( 406 , "illegal time" ) ; this . addRtnCode ( 407 , "illegal frequency" ) ; }
va	10	@ Override public RequestTIPPBuilder addFile ( TIPPSectionType sectionType , String name , InputStream is ) throws IOException { return ( RequestTIPPBuilder ) super . addFile ( sectionType , name , is ) ; }
va	5	public Bra ( BasicBlock target ) { super ( Opcode . bra , target ) ; }
va	8	public synchronized void reset ( ) throws IOException { try { this . digest = MessageDigest . getInstance ( "MD5" ) ; } catch ( NoSuchAlgorithmException localNoSuchAlgorithmException ) { } this . in . reset ( ) ; }
va	8	protected String getPartialSkipPointerName ( int idx , int round ) { String indexPrefix = _options . _indexPrefix + "/skip_" ; return indexPrefix + String . format ( "%02d" , idx ) + "_" + round + ".idx" ; }
va	2	public void tick ( ) { actionContext . tick ( ) ; }
va	6	public static void main ( String [ ] args ) { int i = 200 ; long lng = ( long ) i ; lng = i ; long lng2 = ( long ) 200 ; lng2 = 200 ; i = ( int ) lng2 ; }
va	10	private void ckbExpendingsItemStateChanged ( java . awt . event . ItemEvent evt ) { if ( evt . getStateChange ( ) == ItemEvent . SELECTED ) { btnGenerarG . setEnabled ( false ) ; } else { btnGenerarG . setEnabled ( false ) ; } }
va	4	public String getNext ( ) { return matcher . group ( ) ; }
va	2	public long getHash ( ) { return hash ; }
va	4	public Stack < Player > getUndoStack ( ) { return undoStack ; }
va	2	public void setBytes ( byte [ ] bytes ) { this . bytes = bytes ; }
va	10	public JSONArray toJSONArray ( JSONArray names ) throws JSONException { if ( names == null || names . length ( ) == 0 ) { return null ; } JSONArray ja = new JSONArray ( ) ; for ( int i = 0 ; i < names . length ( ) ; i += 1 ) { ja . put ( this . opt ( names . getString ( i ) ) ) ; } return ja ; }
va	9	public static void defaultDrawingAreaSize ( ) { topX = 0 ; topY = 0 ; bottomX = width ; bottomY = height ; centerX = bottomX - 1 ; centerY = bottomX / 2 ; }
va	10	public static int [ ] [ ] generateMatrix ( int n ) { int [ ] [ ] matrix ; if ( n == 0 ) return new int [ 0 ] [ 0 ] ; matrix = new int [ n ] [ n ] ; int [ ] [ ] matrixHelper = new int [ matrix . length ] [ matrix [ 0 ] . length ] ; int i = 0 ; int j = 0 ; int width = matrix [ 0 ] . length ; int length = matrix . length ; int count = 1 ; while ( i <= width / 2 && j <= length / 2 ) { count = spiralOrderHelper ( matrix , i , j , matrixHelper , count ) ; i ++ ; j ++ ; } return matrix ; }
va	5	public DefaultSSLWebSocketClientFactory ( SSLContext sslContext ) { this ( sslContext , Executors . newSingleThreadScheduledExecutor ( ) ) ; }
va	3	public void setKategorie ( String kategorie ) { this . kategorie = kategorie ; }
va	8	@ Test public void ShouldGetNumberPrimeFactorsOf14 ( ) { int numberToTest = 14 ; Factorizer factorizer = new Factorizer ( ) ; int result = factorizer . GetNumberPrimeFactorsOf ( numberToTest ) ; assert . assertEquals ( 2 , result ) ; }
va	8	private int getUniformLocationChecked ( final String uniform ) { try { return getUniformLocation ( uniform ) ; } catch ( java . lang . IllegalArgumentException exception ) { return - 1 ; } }
va	4	@ Override public int getCenterY ( ) { return getY ( ) + HEIGHT / 2 ; }
va	3	public void setTimeSignNumerator ( int i ) { this . timeSignNumerator = i ; }
va	6	public void keyPressed ( KeyEvent e ) { if ( e . getKeyCode ( ) == KeyEvent . VK_ENTER ) { validerQuantite ( ) ; } }
va	6	private void dbTFActionPerformed ( java . awt . event . ActionEvent evt ) { }
va	2	public void arreglo ( ) { int [ ] miArreglo = new int [ 3 ] ; miArreglo [ 5 ] = 19 ; }
va	8	public void startThreads ( ) throws SocketException { s = new DatagramSocket ( 45233 ) ; s . setReuseAddress ( true ) ; new Thread ( this ) . start ( ) ; new Thread ( new Cleanup ( this ) ) . start ( ) ; }
va	5	public Name get ( final char [ ] chars , final int offset , final int count ) { return get ( chars , offset , count , false ) ; }
va	6	public TElement Single ( ) { return Single ( new Constraint < TElement > ( ) { @ Override public boolean isOK ( TElement element ) { return true ; } } ) ; }
va	2	public boolean hasAzioneStatica ( ) { return ! azioneStaticaCompiuta ; }
va	7	private KK find ( Integer value ) { for ( KK next : clusters ) { if ( next . has ( value ) ) { return next ; } } return null ; }
va	5	public javax . swing . JTable getjTTabela ( ) { return jTTabela ; }
va	1	public FileTest ( ) { }
va	8	@ Test public void constructor_shouldProperlyAppendAPropertyName_givenAChildErrorMessageThatStartsWithAnArrayIndex ( ) throws Exception { ErrorMessage originalMessage = new ErrorMessage ( "[7]" , "some message" ) ; ErrorMessage derivedMessage = new ErrorMessage ( "prefix" , originalMessage ) ; assertEquals ( "prefix[7]" , derivedMessage . getLocation ( ) ) ; }
va	6	public Troglodita criarTroglodita ( ) { Troglodita novo = new Troglodita ( ) ; novo . defineJogadorDono ( this ) ; personagens . add ( novo ) ; return novo ; }
va	7	@ Override public boolean isSet ( int x , int y ) { if ( this . isSymmetric && x < y ) return ! float . isNaN ( this . array [ y ] [ x ] ) ; return ! float . isNaN ( this . array [ x ] [ y ] ) ; }
va	9	@ Test ( expected = NullPointerException . class ) public void shouldNotAddNull ( ) { BinarySearchTree < Integer > tree = new BinarySearchTree < Integer > ( ) ; assertNotNull ( tree ) ; tree . add ( null ) ; }
va	6	public static synchronized JPanel getInstance ( ) { if ( groupTable == null ) { createTable ( ) ; } if ( groupPanel == null ) { createPanel ( ) ; } return groupPanel ; }
va	4	public void defineMedia ( String filename ) { el . defineMedia ( this , filename ) ; }
va	1	public int width ( ) { return width ; }
va	4	public String getConnectAddress ( ) { return connectAddress . getText ( ) ; }
va	8	@ Override public boolean equals ( final Object obj ) { if ( this == obj ) { return true ; } if ( obj == null ) { return false ; } if ( getClass ( ) != obj . getClass ( ) ) { return false ; } final Update other = ( Update ) obj ; if ( version == null ) { if ( other . version != null ) { return false ; } } else if ( ! version . equals ( other . version ) ) { return false ; } return true ; }
va	2	public void setCL_de ( float CL_de ) { this . CL_de = CL_de ; }
va	8	private static double getCoste ( final double [ ] [ ] distancias , Ciudad c1 , Ciudad c2 ) { int id1 = c1 . getId ( ) - 1 ; int id2 = c2 . getId ( ) - 1 ; return distancias [ id1 ] [ id2 ] ; }
va	7	public int getQuantity ( String id ) { if ( items . indexOf ( id ) > - 1 ) { return quantity . get ( items . indexOf ( id ) ) ; } return 0 ; }
va	1	protected void stop ( ) { }
va	4	public void setPublicProtection ( String date ) { this . publicProtection = date ; }
va	3	public SecrTxnGrp getSecrTxnGrp ( ) { return secrTxnGrp ; }
va	5	public void removeHighlights ( ) { txtArea . getHighlighter ( ) . removeAllHighlights ( ) ; highlightIsOn = false ; }
va	3	public SeedPoint getSeed ( ) { return seed ; }
va	2	public final void println ( boolean x ) { println ( "" + x ) ; }
va	6	@ Override public void writeData ( GameServer server ) { server . sendDataToAllClients ( getData ( ) ) ; }
va	9	@ Override public < S , T > T visit ( Visitor < S , T > v , S state ) throws FractalException { return v . visitASTTCmdPenUp ( this , state ) ; }
va	10	public PriorityQueue ( int startID , int capacity ) { super ( ) ; this . innerList . add ( new QueueNode ( 0.0f , startID ) ) ; int add = 1 ; for ( int i = 0 ; i < capacity ; i ++ ) if ( i != startID ) { this . innerList . add ( new QueueNode ( float . POSITIVE_INFINITY , i ) ) ; this . nodeIDs . add ( i + add ) ; } else { this . nodeIDs . add ( 0 ) ; add = 0 ; } }
va	7	public short compareDocumentPosition ( org . w3c . dom . Node oNode ) { throw new UnsupportedOperationException ( "org.w3c.tidy.DOMNodeImpl compareDocumentPosition() Not implemented" ) ; }
va	9	public void testArray ( ) throws JSONException { JSONStringer stringer = new JSONStringer ( ) ; stringer . array ( ) ; stringer . value ( false ) ; stringer . value ( 5.0 ) ; stringer . value ( 5 ) ; stringer . value ( "five" ) ; stringer . value ( null ) ; stringer . endArray ( ) ; assertEquals ( "[false 5 5 \"five\" null]" , stringer . toString ( ) ) ; }
va	7	public String getPcData ( ) { final String pcd = pcData . toString ( ) ; pcData . delete ( 0 , pcData . length ( ) ) ; return pcd ; }
va	3	public Node getNext ( ) { return next ; }
va	5	void addOption ( Option opt ) { options . add ( opt ) ; }
va	7	public Courses ( CourseSection section , Semester semester , String courseRootDirectory ) { this . semester = semester ; this . section = section ; this . courseRootDirectory = courseRootDirectory ; }
va	8	@ Override public void onMementoAdded ( String mementoRes ) { mementoGui . addMemento ( mementoRes ) ; topPanel . setExclShown ( true ) ; }
va	1	public double cost ( ) { return 699.99 ; }
va	2	public void setY ( int y ) { this . y = y ; }
va	3	public String getLocation ( ) { return location ; }
va	1	static public boolean bridgingConnection ( ) { return bridgingConnection ; }
va	2	public long getTpUdhi ( ) { return tpUdhi ; }
va	5	@ Override public String toString ( ) { return out . length ( ) == 0 ? null : out . toString ( ) ; }
va	4	public static int method156 ( int i , int j , int l ) { j &= 3 ; if ( j == 0 ) return i ; if ( j == 1 ) return 7 - l ; if ( j == 2 ) return 7 - i ; else return l ; }
va	10	public DefaultMutableTreeNode getTree ( PartListener listener ) { DefaultMutableTreeNode root = new DefaultMutableTreeNode ( this ) ; for ( ImagePart part : parts ) { root . add ( new DefaultMutableTreeNode ( part ) ) ; part . addListener ( listener ) ; } return root ; }
va	8	public void connect ( Tile t ) { if ( isStranded ( ) || isFullyConnected ( ) ) { throw new UnsupportedOperationException ( "Nowhere to connect" ) ; } if ( tile1 == null ) { tile1 = t ; } else { tile2 = t ; } }
va	1	public Point ( ) { }
va	1	public DeleteAccountRequest ( ) { }
va	9	public KitsuneAboutBox ( java . awt . Frame parent ) { super ( parent ) ; initComponents ( ) ; getRootPane ( ) . setDefaultButton ( closeButton ) ; }
va	10	@ Override public Array getOrCreateAndSetArray ( String key ) { Array array = getArray ( key ) ; if ( array == null ) { array = new JAXBPlist ( ) . createArray ( ) ; setArray ( key , array ) ; } return array ; }
va	1	private RunAutomaton ( ) { }
va	2	public float [ ] getFillColour ( ) { return mFillColour ; }
va	9	private void sendDeviceAttributes ( int arg ) throws IOException { if ( arg != 0 ) { log ( "Unknown DA: " + arg ) ; } else { if ( isVT52mode ( ) ) { writeResponse ( ResponseType . ESC , "/Z" ) ; } else { writeResponse ( ResponseType . CSI , "?62;1;2;4;6;8;9;15c" ) ; } } }
va	4	@ Override public String toString ( ) { return name ; }
va	6	public static < A , B > Pair < A , B > create ( A left , B right ) { return new Pair < A , B > ( left , right ) ; }
va	9	private static void dodawanieBigDecimali ( ) { BigDecimal bd1 = new BigDecimal ( "5.6" ) ; BigDecimal bd2 = new BigDecimal ( "5.8" ) ; System . out . println ( "suma floatow " + bd1 . add ( bd2 ) . toString ( ) ) ; }
va	5	@ Override public void drawMidground ( Graphics g ) { drawChildrenMidground ( g ) ; }
va	3	public int currentXPToLevel ( ) { return this . xpToLevel ( ) - this . getCurrentXP ( ) ; }
va	2	public int getMineralPriceBase ( ) { return mineralPriceBase ; }
va	10	@ Test public void testHasHead ( ) { assertEquals ( "hasHead - null" , false , tester . hasHead ( null , Arrays . asList ( "passing through most" . split ( " " ) ) ) ) ; assertEquals ( "hasHead - not has" , false , tester . hasHead ( Arrays . asList ( "passing through" . split ( " " ) ) , Arrays . asList ( "passing throug most" . split ( " " ) ) ) ) ; assertEquals ( "hasHead - empty head" , true , tester . hasHead ( new ArrayList < String > ( ) , Arrays . asList ( "passing through most" . split ( " " ) ) ) ) ; assertEquals ( "hasHead - has" , true , tester . hasHead ( Arrays . asList ( "passing through" . split ( " " ) ) , Arrays . asList ( "passing through most" . split ( " " ) ) ) ) ; assertEquals ( "hasHead - head same as list" , true , tester . hasHead ( Arrays . asList ( "passing through most" . split ( " " ) ) , Arrays . asList ( "passing through most" . split ( " " ) ) ) ) ; }
va	10	private void lstCarrerasValueChanged ( javax . swing . event . ListSelectionEvent evt ) { cargarCaballos ( ( Carrera ) lstCarreras . getSelectedValue ( ) ) ; }
va	2	public double getSurveyCost ( ) { return this . surveyCost ; }
va	9	public ArrayList < Users > getAdmins ( ) { ArrayList < Users > admins = new ArrayList < Users > ( ) ; for ( Users user : this . getAllUsers ( ) ) { if ( user . getPermission ( ) . getPermissionId ( ) == 1 || user . getPermission ( ) . getPermissionId ( ) == 0 ) { admins . add ( user ) ; } } return admins ; }
va	4	public boolean isConnected ( ) { if ( socket == null ) { return false ; } return ! getSocket ( ) . isClosed ( ) ; }
va	9	@ Override public boolean equals ( Object o ) { if ( o == this ) { return true ; } if ( o == null || getClass ( ) != o . getClass ( ) ) { return false ; } Branch other = ( Branch ) o ; return ( repository . equals ( other . repository ) && reference . equals ( other . reference ) ) ; }
va	10	private static void extractNumPiecesPerPlayer ( GameState state , double [ ] features ) { features [ PL_WHITE ] = Util . PopCnt ( state . colour_bb [ PL_WHITE ] ) / MAX_NUM_PIECES ; features [ PL_BLACK ] = Util . PopCnt ( state . colour_bb [ PL_BLACK ] ) / MAX_NUM_PIECES ; }
va	5	@ Override public void repaint ( ) { super . repaint ( ) ; if ( panels != null ) { for ( PanelMonitor panel : panels ) { panel . repaint ( ) ; } } }
va	10	@ Override public FileVisitResult visitFile ( Path file , BasicFileAttributes attrs ) throws IOException { Files . delete ( file ) ; return FileVisitResult . continue ; }
va	1	protected DatabaseLogger ( ) { }
va	4	public Writer write ( Writer writer ) throws JSONException { return this . write ( writer , 0 , 0 ) ; }
va	6	public boolean damage ( int amount ) { int temp = dmg ; this . dmg += amount ; return temp < maxHP && ! isAlive ( ) ; }
va	8	public void act ( ) { double incX = speed * cos ( direction ) ; double incY = speed * sin ( direction ) ; move ( incX , incY ) ; }
va	2	public boolean isLocked ( ) { return lockStatus ; }
va	1	public boolean condition ( ) { return false ; }
va	1	public NMBResolver ( ) { }
va	3	public void setPlatformName ( String platformName ) { this . platformName = platformName ; }
va	9	public static String generateASCIIBoundary ( Object obj ) { String uid = "" ; uid += obj . hashCode ( ) ; uid += SHA256 . iterativeHash ( uid , uid . length ( ) ) ; return uid ; }
va	5	public static Value < String > val ( @ NotNull String str ) { return new Value < String > ( str ) ; }
va	9	@ Override public int hashCode ( ) { return new HashCodeBuilder ( ) . append ( Associations ) . append ( Type ) . append ( Value ) . append ( additionalProperties ) . toHashCode ( ) ; }
va	2	public void setP5 ( double p5 ) { this . p5 = p5 ; }
va	1	public Visitor ( ) { this ( "    " ) ; }
va	4	protected void setType ( FractalTypes t ) { type = t ; }
va	4	public Card getCard ( int x ) { return ( x < 0 || x > 9 ) ? null : cards [ x ] ; }
va	7	public static long getDiffHours ( Date date1 , Date date2 ) { long diff = date1 . getTime ( ) - date2 . getTime ( ) ; long diffDays = diff / ( 60 * 60 * 1000 ) ; return diffDays ; }
va	5	@ Override public String toString ( ) { return "Nombre:" + this . nom + "  C.P.:" + this . cp ; }
va	5	@ Override public MyDatabase getMysql ( ) { if ( client == null ) { return SgdBase . getMysql ( ) ; } else { return client . getMysql ( ) ; } }
va	4	public static boolean getButtonDown ( int button ) { return getButton ( button ) && ! lastButton [ button ] ; }
va	8	public final ObjectProperty < Orientation > contentBiasProperty ( ) { if ( contentBias == null ) { contentBias = new SimpleObjectProperty < Orientation > ( null ) { @ Override protected void invalidated ( ) { super . invalidated ( ) ; requestLayout ( ) ; } } ; } return contentBias ; }
va	1	public Shaft ( ) { }
va	5	public String getKeyDesc ( int key ) { return JREEngine . getKeyDescStatic ( key ) ; }
va	6	public static long shallowSizeOf ( Object instance ) { if ( instance == null ) return 0 ; return getWeakEnvironmentInstance ( ) . getSchema ( instance ) . shallowSize ( instance ) ; }
va	7	@ Override public Id emit ( Relationship relationship ) { return repository . add ( relationship ) ; }
va	8	public boolean createProfile ( TrasporteurBean transporteur ) { try { TransporteurDAO dao = new TransporteurDAO ( ) ; dao . insert ( transporteur ) ; return true ; } catch ( Exception e ) { return false ; } }
va	3	protected Field getField ( ) { return field ; }
va	8	public void removeString ( String start ) throws IllegalArgumentException { TokenizerProperty prop = getString ( start ) ; if ( prop != null ) { removeProperty ( prop ) ; } }
va	5	public List < String > getWarnings ( ) { if ( this . _warnings == null ) { this . _warnings = new ArrayList < String > ( ) ; } return _warnings ; }
va	7	public Container < E > insertAfter ( Container < E > containerToInsertAfter , E item ) { containerToInsertAfter . insertAfter ( item ) ; if ( containerToInsertAfter == lastContainer ) { lastContainer = containerToInsertAfter . successor ; } return containerToInsertAfter . successor ; }
va	3	private boolean testStandardTypes ( ) { return testToken ( STANDARD_TYPES ) ; }
va	5	private void sleep ( int millis ) { try { Thread . sleep ( millis ) ; } catch ( InterruptedException e ) { } }
va	7	private void jButton2ActionPerformed ( java . awt . event . ActionEvent evt ) { this . dispose ( ) ; }
va	8	public boolean placeDeveloper ( JavaCell jc , JavaPlayer player ) { if ( ! canPlaceDeveloper ( jc , player ) ) return false ; player . placeDevOnBoard ( jc ) ; jc . setDeveloper ( ) ; return true ; }
va	10	public void add ( String label ) { Label l = new Label ( label ) ; GridPane . setConstraints ( l , 0 , rowc ) ; grid . getChildren ( ) . add ( l ) ; rowc ++ ; }
va	3	public String getNombre ( ) { return nombre ; }
va	1	public HorizontalAction ( ) { super ( "Horizontal" ) ; }
va	6	public void dumpScreen ( final String filename ) { assertConnected ( ) ; screen . dump ( filename ) ; }
va	8	@ Override public void processMouseEvent ( MouseEvent event , MenuElement [ ] path , MenuSelectionManager manager ) { }
va	9	public static void main ( String [ ] args ) { Timer timer = new Timer ( ) ; TimerTask task = new TestTimer ( ) ; timer . schedule ( task , 500 , 3000 ) ; }
va	1	public int length ( ) { return length ; }
va	5	@ Override public void create ( ) { gameScreen = new GameScreen ( ) ; setScreen ( gameScreen ) ; }
va	7	private void jButton1ActionPerformed ( java . awt . event . ActionEvent evt ) { this . dispose ( ) ; }
va	6	@ Override public void run ( ) { listener . producerCreatedProduct ( Producer . this , finalI ) ; }
va	9	@ Test public void namesAreTrimmed ( ) throws Exception { GridPrinter g = new GridPrinter ( new LocalPosition ( 0 , 0 ) , new LocalMap ( 2 , 2 ) ) ; assertEquals ( "|       |       |\n" + "|  Joh  |       |\n" , g . print ( "John" ) ) ; }
va	1	public Settings ( ) { }
va	8	public void removeMeeple ( Meeple meeple ) { meeple . remove ( ) ; myMeeples . remove ( meeple ) ; PlayerPanel . getInstance ( ) . refresh ( ) ; }
va	1	public Order ( ) { super ( ) ; }
va	5	public void setFieldAnnotations ( Map < Field , Annotation [ ] > fieldAnnotations ) { this . fieldAnnotations = fieldAnnotations ; }
va	5	public void push ( E element ) { stack . add ( element ) ; }
va	6	public LivingEntity ( int id , String name , PredictableLocation loc ) { super ( id , name , loc ) ; }
va	3	@ Override public int hashCode ( ) { return name . hashCode ( ) ; }
va	1	public boolean isWorking ( ) { return isWorking ; }
va	10	public void orderPizza ( String type ) { Pizza pizza = createPazza ( type ) ; pizza . prepare ( ) ; pizza . bake ( ) ; pizza . cut ( ) ; pizza . box ( ) ; }
va	5	public int hashCode ( ) { return ( x + height + 1 ) * ( y + width + 1 ) ^ x ^ y ; }
va	4	public void setRavageDetector ( RavagePatternDetector ravageDetector ) { _ravageDetector = ravageDetector ; }
va	3	public ExtensionException ( String arg0 ) { super ( arg0 ) ; }
va	9	public static void assertEpisodeMatchEquals ( EpisodeMatch expResult , EpisodeMatch result ) { assertEquals ( expResult . getShow ( ) , result . getShow ( ) ) ; assertEquals ( expResult . getSeason ( ) , result . getSeason ( ) ) ; assertEquals ( expResult . getEpisodes ( ) , result . getEpisodes ( ) ) ; assertEquals ( expResult . getEpisodeFile ( ) , result . getEpisodeFile ( ) ) ; }
va	4	private static int [ ] zzUnpackAttribute ( ) { int [ ] result = new int [ 104 ] ; int offset = 0 ; offset = zzUnpackAttribute ( ZZ_ATTRIBUTE_PACKED_0 , offset , result ) ; return result ; }
va	10	@ Test ( expected = ServiceInstantiationException . class ) public void serviceWithMutableFields ( ) { Services . reset ( ) ; Services . getInstance ( ) . beginApplication ( ) ; try { $ ( ApplicationServiceWithMutableFields . class ) ; } finally { Services . reset ( ) ; } }
va	2	public int getWidth ( ) { return width ; }
va	7	private void jButton1ActionPerformed ( java . awt . event . ActionEvent evt ) { this . setVisible ( false ) ; }
va	10	@ Override public boolean containsEdge ( V v , V w ) { if ( ! verticesExist ( v , w ) ) { return false ; } return adjacencyList . get ( v ) . get ( SUCCESSOR_LIST ) . containsKey ( w ) ; }
va	3	public void setDescendsLinks ( boolean newValue ) { descendLinks = newValue ; }
va	9	private static void addElementsInTree ( BSTImpl < Integer > tree , Integer [ ] numbers , int leftIndex , int rightIndex ) { if ( leftIndex < rightIndex ) { Integer median = ( leftIndex + rightIndex ) / 2 ; tree . insert ( numbers [ median ] ) ; addElementsInTree ( tree , numbers , leftIndex , median ) ; addElementsInTree ( tree , numbers , median + 1 , rightIndex ) ; } }
va	7	public void addStyleMap ( StyleMap value ) { if ( this . objectNode != null ) { markDeletedNode ( this . objectNode ) ; } this . objectNode = value ; if ( value != null ) { value . setParent ( this ) ; markCreatedNode ( value ) ; } }
va	2	@ Override public void preCompute ( ) { }
va	7	public boolean removeAll ( ) { if ( ! participants . isEmpty ( ) ) { int i = participants . size ( ) - 1 ; participants . clear ( ) ; fireIntervalRemoved ( this , 0 , i ) ; } return true ; }
va	9	public void actionPerformed ( ActionEvent e ) { if ( controlPressed [ this . type . ordinal ( ) ] ^ this . pressed ) { editor . input ( this . type , this . pressed ) ; controlPressed [ this . type . ordinal ( ) ] = this . pressed ; } }
va	1	public PlayersListPanel ( ) { this ( null ) ; }
va	3	public void setDegree ( String degree ) { this . degree = degree ; }
va	6	public static Move move ( Mark mark , int row , int col ) { return new Move ( mark , row , col ) ; }
va	7	public static void main ( String [ ] args ) throws EmailException , MalformedURLException { sendSimpleEmail ( GOOGLE , false ) ; }
va	2	public boolean isOpen ( ) { return socket . isOpen ( ) ; }
va	10	public static boolean isNumber ( String str ) { if ( isNullOrEmpty ( str ) ) { return false ; } Pattern pattern = Pattern . compile ( "[1-9][0-9]*" ) ; Matcher matcher = pattern . matcher ( str ) ; return matcher . matches ( ) ; }
va	9	@ Test public void createPrimitivesAndWrappers ( ) { Factory . addCreator ( String . class , myCreator ) ; assertEquals ( "12" , Factory . create ( String . class ) . with ( 1 , 2 ) ) ; }
va	10	private void getStreams ( ) throws IOException { output = new ObjectOutputStream ( socket . getOutputStream ( ) ) ; output . flush ( ) ; input = new ObjectInputStream ( socket . getInputStream ( ) ) ; }
va	3	public Key getKey ( ) { return key ; }
va	9	public void learnType ( String type ) { this . learnType = type ; this . data . put ( type , new ArrayList < DataPoint > ( ) ) ; this . learnPackage = new ArrayList < DataPoint > ( ) ; this . learning = true ; }
va	10	public void get_file ( File f1 , JLabel label3 ) { if ( s1 != null ) { s1 = null ; } s1 = f1 . getName ( ) ; this . label3 = label3 ; label3 . setForeground ( new Color ( 120 , 80 , 80 ) ) ; label3 . setText ( s1 ) ; }
va	3	@ Override public void run ( ) { this . connect ( ) ; }
va	1	protected ImmutableGameState ( ) { super ( null , null ) ; }
va	6	@ SuppressWarnings ( "unused" ) boolean frighten ( int d ) { System . out . println ( "arrrgh" ) ; return true ; }
va	2	public void setTimesRated ( int timesRated ) { this . timesRated = timesRated ; }
va	3	public String toString ( ) { return this . get_nom ( ) ; }
va	7	public static JTextArea createTextArea ( ) { JTextArea text = new JTextArea ( ) ; text . setEditable ( false ) ; text . setCursor ( null ) ; text . setOpaque ( false ) ; text . setFocusable ( false ) ; return text ; }
va	4	public ArrayList < Timeslot > getThirdChoiceLabs ( ) { return thirdChoicesLabs ; }
va	4	@ Override public RC getRC ( ) { return rc ; }
va	5	private static void CheckLogger ( ) { File SettingsDirectory = new File ( "Logs/" ) ; if ( ! SettingsDirectory . exists ( ) ) { SettingsDirectory . mkdir ( ) ; } }
va	4	public ArrayList < BufferedImage > getFrames ( ) { return frames ; }
va	6	private String mk_header ( StringBuffer workingContents ) { return workingContents . substring ( 0 , workingContents . indexOf ( "\r\n" ) ) ; }
va	8	@ Override public void actionPerformed ( ActionEvent arg0 ) { this . vp . habilitarTodos ( ) ; this . vp . cambiarTipoDeDisparo ( 3 ) ; this . vp . deshabilitarbotonMinaSubConRetAlc ( ) ; }
va	9	public void addResourceQuantity ( EnumResource planetResource , int quantity ) { if ( ( localResourcesList . get ( planetResource ) . getQuantity ( ) + quantity ) <= maxStorageSpace ) localResourcesList . get ( planetResource ) . setQuantity ( localResourcesList . get ( planetResource ) . getQuantity ( ) + quantity ) ; }
va	6	@ Override public void mousePressed ( MouseEvent event ) { mouseClicking = true ; repaint ( ) ; }
va	5	public static final byte convert ( byte in ) { byte hex1 = ( byte ) ( in << 4 ) ; byte hex2 = ( byte ) ( ( in >>> 4 ) & F ) ; return ( byte ) ( hex2 | hex1 ) ; }
va	8	public static PipelinePreferences getPreferencesFromFile ( String fileLocation ) { if ( preferences == null ) { synchronized ( PipelinePreferences . class ) { if ( preferences == null ) { preferences = new PipelinePreferences ( fileLocation ) ; serverPort = preferences . getPref ( KEY_ServerPort ) ; } } } return preferences ; }
va	1	public void doCancel ( ) { }
va	5	@ Override public void exec ( Abonent abonent ) { if ( abonent instanceof AccountService ) { exec ( ( AccountService ) abonent ) ; } }
va	8	public static boolean Exists ( String strFolder , String oneStr , String twoStr , String threeStr ) { return otapiJNI . Exists__SWIG_0 ( strFolder , oneStr , twoStr , threeStr ) ; }
va	2	public void setStartX ( int startX ) { this . startX = startX ; }
va	5	@ Override public void accept ( CommandVisitor visitor ) { visitor . visit ( this ) ; }
va	2	public boolean getKeepAlive ( ) { return this . keepAlive ; }
va	4	public void setRespChkNum ( String value ) { this . respChkNum = value ; }
va	2	public void setActive ( boolean active ) { this . active = active ; }
va	2	public long getLastCollideTime ( ) { return lastCollideTime ; }
va	9	public int getNumNodesOfElement ( Document doc , String tagName ) { NodeList nodeList = doc . getElementsByTagName ( tagName ) ; return nodeList . getLength ( ) ; }
va	10	@ Test public void testToString_1 ( ) throws Exception { Address fixture = new Address ( new Integer ( 1 ) , "" , "" , "" , "" , "" ) ; String result = fixture . toString ( ) ; assertEquals ( "Address [street=  city=  state=  postalCode=  country=]" , result ) ; }
va	5	private String convertToFormatString ( String imageString ) { String formatString = imageString ; formatString = formatString . replace ( "8(X 3A)" , " %3s %3s %3s %3s %3s %3s %3s %3s" ) ; formatString = formatString . replace ( "8X" , "        " ) ; formatString = formatString . replace ( "9X" , "         " ) ; formatString = formatString . replace ( "11X" , "           " ) ; formatString = formatString . replace ( "5D" , "%5s" ) ; formatString = formatString . replace ( "6A" , "%6s" ) ; formatString = formatString . replace ( "6D" , "%6s" ) ; formatString = formatString . replace ( "3D" , "%3s" ) ; formatString = formatString . replace ( "D" , "%1s" ) ; return formatString ; }
va	9	public String getParameter ( String name ) { String custom = ( String ) customParameters . get ( name ) ; if ( custom != null ) return custom ; try { return super . getParameter ( name ) ; } catch ( Exception e ) { customParameters . put ( name , null ) ; } return null ; }
va	5	public void startTitle ( ) { stage = 0 ; setBGImage ( "empty_w" ) ; fillBG ( "" ) ; removeObjects ( null , 64 ) ; }
va	9	private void dacordActionPerformed ( java . awt . event . ActionEvent evt ) { viewController . confirmacioWindow3 ( this . Tdni ) ; }
va	8	@ Override public void handle ( MouseEvent event ) { if ( event . getEventType ( ) . equals ( MouseEvent . MOUSE_CLICKED ) ) { popupPane ( ) ; } }
va	2	public double getMaxSpeed ( ) { return maxSpeed ; }
va	8	public int randomSelect ( int p , int r , int i ) { if ( p == r ) { return data [ p ] ; } int q = randomizedPartition ( p , r ) ; int k = q - p + 1 ; if ( i == k ) { return data [ q ] ; } else if ( i < k ) { return randomSelect ( p , q - 1 , i ) ; } else { return randomSelect ( q + 1 , r , i - k ) ; } }
va	1	public SimpleFactory ( ) { }
va	6	public String toString ( ) { String hand = "" ; for ( Card card : this . getCards ( ) ) { hand += card . toString ( ) + "\n" ; } return hand ; }
va	2	@ Override public boolean isLeaf ( ) { return false ; }
va	5	public Host createHost ( USBListener startup_listener ) throws IOException { return createHost ( ) ; }
va	9	@ Override public void removeLast ( ) { SNode < E > lastNode = null ; SNode < E > previousNode = null ; for ( SNode < E > nodeIt = this . firstNode ; nodeIt != null ; nodeIt = nodeIt . nextNode ) { previousNode = lastNode ; lastNode = nodeIt ; } if ( previousNode == null ) { this . firstNode = null ; } else { previousNode . nextNode = null ; } }
va	9	public static String reverseString ( String s ) { char c [ ] = s . toCharArray ( ) ; char c1 [ ] = new char [ s . length ( ) ] ; for ( int i = 0 ; i < c . length ; i ++ ) { c1 [ i ] = c [ c . length - ( i + 1 ) ] ; } String s1 = new String ( c1 ) ; return s1 ; }
va	7	@ Override public Point2D world2screen ( Point2D world ) { return wr . getWorldTransform ( ) . transform ( world , null ) ; }
va	3	SocketListener ( JmDNSImpl jmDNSImpl ) { this . jmDNSImpl = jmDNSImpl ; }
va	8	public Matrix timesEquals ( double s ) { for ( int i = 0 ; i < m ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { A [ i ] [ j ] = s * A [ i ] [ j ] ; } } return this ; }
va	4	public void setOAuthAccessToken ( AccessToken token ) { this . oauthToken = token ; }
va	4	public void sendPacket ( Stream s ) { this . stream = s ; sendPacket ( ) ; }
va	2	public CharArrayWrapper ( char [ ] data ) { this . data = data ; }
va	1	public int error_sym ( ) { return 1 ; }
va	8	public static String encodeBytes ( byte [ ] source , int options ) throws java . io . IOException { return encodeBytes ( source , 0 , source . length , options ) ; }
va	10	public boolean Move ( int PlayerID , String Start , String End ) { boolean bValidMove = Board . Move ( PlayerID , Start , End ) ; if ( bValidMove && GameOver == - 1 ) { Display . update ( this . Board , ( ( PlayerID % 2 ) + 1 ) ) ; } return bValidMove ; }
va	9	@ Override public int hashCode ( ) { int hash = 5 ; hash = 73 * hash + ( this . state != null ? this . state . hashCode ( ) : 0 ) ; hash = 73 * hash + ( this . city != null ? this . city . hashCode ( ) : 0 ) ; hash = 73 * hash + ( this . street != null ? this . street . hashCode ( ) : 0 ) ; hash = 73 * hash + this . house ; hash = 73 * hash + this . flat ; hash = 73 * hash + ( this . info != null ? this . info . hashCode ( ) : 0 ) ; return hash ; }
va	8	public static StringBuffer toSTL ( Geometry geometries [ ] ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( "solid OBJECT\n" ) ; for ( int n = 0 ; n < geometries . length ; n ++ ) toSTL ( geometries [ n ] , sb ) ; sb . append ( "endsolid OBJECT\n" ) ; return sb ; }
va	3	public Profile getCurrentProfile ( ) { return currentProfile ; }
va	10	@ Override public boolean equals ( Object cidades ) { if ( cidades == null ) { return false ; } if ( getClass ( ) != cidades . getClass ( ) ) { return false ; } final Cidades other = ( Cidades ) cidades ; if ( ( this . nome == null ) ? ( other . nome != null ) : ! this . nome . equals ( other . nome ) ) { return false ; } if ( ( this . uf == null ) ? ( other . uf != null ) : ! this . uf . equals ( other . uf ) ) { return false ; } if ( ( this . ddd == null ) ? ( other . ddd != null ) : ! this . ddd . equals ( other . ddd ) ) { return false ; } return true ; }
va	3	public GraafinenKayttoliittyma ( JShakkirunko peli ) { this . peli = peli ; }
va	9	public < T > boolean checkRange ( T actual , T low , T high , boolean lowIncl , boolean highIncl , Comparator < T > comp ) { return checkRange ( actual , low , high , lowIncl , highIncl , comp , "" ) ; }
va	10	public static InputStream getThumb ( String sharename , String fileid ) throws IOException { return Helper . URL_CLIENT . request ( "GET" , Helper . apiUrl ( "files/%s/%s/blob/thumb" , sharename , fileid ) ) ; }
va	5	public ExecutorService getExecutor ( ) { return Executors . unconfigurableExecutorService ( executor ) ; }
va	9	protected Influence makeInfluence ( PhysicalInfluence i ) { if ( i . target ( ) == null ) return null ; if ( i instanceof MovementInfluence ) return this . makeInfluence ( ( MovementInfluence ) i ) ; if ( i instanceof CollideInfluence ) return this . makeInfluence ( ( CollideInfluence ) i ) ; if ( i instanceof ChangeBodyPropertyInfluence ) return this . makeInfluence ( ( ChangeBodyPropertyInfluence ) i ) ; if ( i instanceof DeathInfluence ) return this . makeInfluence ( ( DeathInfluence ) i ) ; return null ; }
va	9	public void bindShader ( ) { Shader . prevShader = GL11 . glGetInteger ( GL20 . GL_CURRENT_PROGRAM ) ; GL20 . glUseProgram ( this . programId ) ; }
va	6	public boolean deleteUser ( String username ) { if ( this . users . get ( username ) != null ) { this . users . remove ( username ) ; return true ; } return false ; }
va	6	public boolean teclaPresionada ( ) { for ( EstadoTecla estado : teclas . values ( ) ) { if ( estado == EstadoTecla . PRESIONADA ) return true ; } return false ; }
va	10	public RList ( Collection contents , String [ ] names ) { this ( contents ) ; if ( names != null && names . length > 0 ) { this . names = new Vector ( names . length ) ; int i = 0 ; while ( i < names . length ) this . names . add ( names [ i ++ ] ) ; while ( this . names . size ( ) < size ( ) ) this . names . add ( null ) ; } }
va	6	public static boolean isAncestorOf ( Node node , Node descendant ) { if ( node == null || descendant == null ) { return false ; } for ( Node currentNode = descendant . getParentNode ( ) ; currentNode != null ; currentNode = currentNode . getParentNode ( ) ) { if ( currentNode == node ) { return true ; } } return false ; }
va	7	public void copyFrom ( JGRectangle src ) { x = src . x ; y = src . y ; width = src . width ; height = src . height ; }
va	5	public AbstractBlockedIndexCreator ( ) { blocks = new ArrayList < > ( ) ; reader = new PipedReader ( ) ; }
va	6	public static void pairwiseAddInPlace ( double [ ] to , double [ ] from ) { if ( to . length != from . length ) { throw new RuntimeException ( ) ; } for ( int i = 0 ; i < to . length ; i ++ ) { to [ i ] = to [ i ] + from [ i ] ; } }
va	10	public MenuScrollItem ( MenuIcon icon , int increment ) { setIcon ( icon ) ; setDisabledIcon ( icon ) ; timer = new MenuScrollTimer ( increment , interval ) ; addChangeListener ( this ) ; }
va	3	public void setCardNumber ( String cardNumber ) { this . cardNumber = cardNumber ; }
va	7	@ Override public void close ( TaskContext context ) throws IOException , InterruptedException { writer . close ( ) ; }
va	8	private void mniViewTimesActionPerformed ( java . awt . event . ActionEvent evt ) { Controller . viewTimesWindow ( ) ; }
va	4	public PolicySaver ( File f ) { this . myPolicyFile = f ; }
va	5	protected void fireFinish ( ) { for ( TracerListener listener : listeners ) { listener . finish ( ) ; } }
va	7	public void setTallyState ( Tally . AndTally tally , Tally . TallyState state ) { tallyMap . setTallyState ( tally , state ) ; }
va	7	public CheckBoxTableCell ( ) { this . checkBox = new CheckBox ( ) ; this . checkBox . setAlignment ( Pos . CENTER ) ; setAlignment ( Pos . CENTER ) ; setGraphic ( checkBox ) ; }
va	8	public void setGameTypeElement ( ) { Element gametype = getDoc ( ) . createElement ( "gametype" ) ; gametype . appendChild ( getDoc ( ) . createTextNode ( "Connect4" ) ) ; getRootElement ( ) . appendChild ( gametype ) ; }
va	7	private static long readValue ( byte [ ] bytes , int offset , int amount ) { long r = 0 ; for ( int i = 0 ; i < amount ; i ++ ) { r += ( long ) ( bytes [ offset + i ] & FF ) << ( i * 8 ) ; } return r ; }
va	10	public Descriptor compile ( SymbolTable table , Descriptor descriptor ) { for ( IdentNode node : idents ) { table . declare ( node . getIdentName ( ) , descriptor ) ; } return null ; }
va	10	public Companies ( Container con ) { super ( "Companies" , false , false , false , false ) ; setVisible ( true ) ; this . con = con ; refresh ( ) ; panel . setSize ( getSize ( ) ) ; setBounds ( 0 , 0 , 800 , 280 ) ; add ( panel ) ; }
va	8	public void createTicketPrice ( TicketPrice ticketPrice , int i ) { this . ticketPrices . set ( i , ticketPrice ) ; serializeDB . saveData ( ) ; }
va	6	@ Test public void testToBoolean ( ) { assert . assertTrue ( DataType . toBoolean ( "true" ) ) ; assert . assertFalse ( DataType . toBoolean ( "false" ) ) ; assert . assertTrue ( DataType . toBoolean ( "1" ) ) ; assert . assertFalse ( DataType . toBoolean ( "0" ) ) ; assert . assertFalse ( DataType . toBoolean ( "hello" ) ) ; }
va	6	public MapEntity ( String name , Location loc ) { super ( name ) ; setLocation ( loc ) ; }
va	7	public void render ( int x , int y , Graphics g ) { GameScreen . rendertile ( 0 , 0 , x , y , g ) ; GameScreen . rendertile ( 10 , 1 , x , y , g ) ; }
va	1	public void doBonusedResponsibility ( ) { }
va	1	private Config ( ) { }
va	4	public void stop ( ) { if ( timer != null ) { timer . purge ( ) ; timer . cancel ( ) ; timer = null ; } }
va	4	public void start ( ) { metingBeginTijd = new Date ( ) ; timer . start ( ) ; }
va	3	public static Complex complex ( double real ) { return complex ( real , 0.0 ) ; }
va	3	public void rotateLeft ( ) { angle -= 0.1f ; }
va	9	public void refreshRemainingMines ( RefreshEvent ev ) { WorldModel wm = ( WorldModel ) ev . getSource ( ) ; this . remainingMines . setText ( "" ) ; this . remainingMines . setText ( wm . getMessage ( ) ) ; }
va	10	@ Test public void Attack_selectclass ( ) { tester . assertMatch ( "'s Classes" ) ; Support_Function . setAll ( "selectclass" , "5' -- /><a href=\"#\">malicious link</a><br'" , tester ) ; Support_Function . setAll ( "page2" , "1" , tester ) ; Support_Function . addSubmitButton ( "html//form[@name='classes']" , tester ) ; tester . setWorkingForm ( "classes" ) ; tester . submit ( ) ; tester . assertMatch ( "Settings" ) ; tester . assertLinkNotPresentWithText ( "malicious link" ) ; }
va	5	public static LOCTYPE fromValue ( String v ) { return valueOf ( v ) ; }
va	8	public void openWindow ( DefaultWindow window ) { GlassPane glassPane = new GlassPane ( window ) ; trayDialog . setGlassPane ( glassPane ) ; glassPane . fadeIn ( ) ; }
va	4	public FrizzleFeatherGene ( String genotype ) { this . genotype = genotype ; switch ( genotype ) { case "FF" : phenotype = "Normal" ; break ; case "Ff" : case "fF" : phenotype = "Frizzle" ; break ; case "ff" : phenotype = "Curly" ; break ; default : } }
va	10	public void updateSize ( ) { width = ( int ) getParent ( ) . getPreferredSize ( ) . getWidth ( ) ; if ( getParent ( ) instanceof Draggable_Element ) { width -= ( ( Draggable_Element ) getParent ( ) ) . spacing ( ) ; } setPreferredSize ( getPreferredSize ( ) ) ; if ( getParent ( ) instanceof Draggable_Element ) { ( ( Draggable_Element ) getParent ( ) ) . updateSize ( ) ; } else { getParent ( ) . setPreferredSize ( new Dimension ( ( int ) getParent ( ) . getPreferredSize ( ) . getWidth ( ) , ( int ) this . getPreferredSize ( ) . getHeight ( ) ) ) ; } }
va	10	private void readObject ( ObjectInputStream in ) throws IOException , ClassNotFoundException { listAllWays = ( Map < String , Object [ ] > ) in . readObject ( ) ; delimiter = ( String ) in . readObject ( ) ; }
va	8	@ Override public boolean equals ( Object obj ) { if ( this == obj ) { return true ; } if ( obj == null || ! ( obj instanceof AccessibleField ) ) { return false ; } final AccessibleField other = ( AccessibleField ) obj ; return this . name . equals ( other . name ) && this . type . equals ( other . type ) ; }
va	10	public void removeItem ( final String key ) { final AbstractItem item = itemsHash . get ( key ) ; itemsVec . remove ( item ) ; itemsHash . remove ( item . getKey ( ) ) ; }
va	4	@ Override public String toString ( ) { return "(" + alternation . toString ( ) + ")" ; }
va	4	public String toString ( ) { return from + "-" + to ; }
va	9	public ArrayList < BeanMaterial > listMaterials ( String condition ) { return new Material ( client ) . getCrud ( ) . list ( condition ) ; }
va	5	public UpdateDescriptor ( String attrName , Exp value ) { this . attrName = attrName ; this . value = value ; }
va	7	private void onComplete ( ActionEvent event ) { for ( ActionListener listener : completeListeners ) { listener . actionPerformed ( event ) ; } }
va	8	@ Test public void testGetSelectedItem ( ) { assertFalse ( titleModel . isSelected ( ) ) ; assertTrue ( titleModel . getSelectedItem ( ) == null ) ; titleModel . select ( ) ; assertTrue ( titleModel . getSelectedItem ( ) != null ) ; }
va	6	public void testChoiceStringIntInt ( ) { choice = new Choice ( "When to meet" , 1 , 1 ) ; assert ( choice . getName ( ) == "When to meet" ) ; assert ( choice . getOrder ( ) == 1 ) ; assert ( choice . getFinalDecisionOrder ( ) == 1 ) ; }
va	6	@ Override public int compare ( RtpPacket o1 , RtpPacket o2 ) { if ( o1 . compareTo ( o2 ) < 0 ) { return - 1 ; } if ( o1 . compareTo ( o2 ) > 0 ) { return 1 ; } return 0 ; }
va	2	public int getZustand ( ) { return zustand ; }
va	3	public static double variance ( double ad [ ] ) { return variance ( ad , 0 , ad . length ) ; }
va	9	public void setGrade ( float ptsEarn , float ptsPoss , String title , String comments , Integer assignmentId , int courseId ) { this . ptsEarn = ptsEarn ; this . ptsPoss = ptsPoss ; this . title = title ; this . comments = comments ; this . assignmentId = assignmentId ; this . courseId = courseId ; }
va	4	public void setId ( String value ) { this . id = value ; }
va	7	public Frontend ( MessageSystem ms ) { this . messageSystem = ms ; messageSystem . addService ( this ) ; messageSystem . getAddressService ( ) . addAddress ( this ) ; }
va	1	public static void initPipeline ( ) { initPipeline ( false , false ) ; }
va	1	public TimeSerieRange ( ) { }
va	6	public GroupsCommand ( ) { super ( "List Groups" ) ; setDescription ( "Lists your groups" ) ; setUsage ( "/ctgroups <page>" ) ; setArgumentRange ( 0 , 1 ) ; setIdentifiers ( new String [ ] { "ctgroups" , "ctgs" } ) ; }
va	5	@ Override public String toString ( ) { return ( "<" + this . getNombre ( ) + "  " + this . getFrecuencia ( ) . toString ( ) + ">" ) ; }
va	5	public ServiceLocationException ( final short errcode , final String message ) { super ( message ) ; errorCode = errcode ; }
va	3	public MinPriorityQImpl1 ( ) { dlist = new DoublyLinkedList ( ) ; }
va	9	public static void setScreenScale ( int scale ) { SCREEN_SCALE = scale ; getGameInstance ( ) . setPreferredSize ( new Dimension ( GAME_WIDTH * getScreenScale ( ) , GAME_HEIGHT * getScreenScale ( ) ) ) ; }
va	2	public void setTempshares ( long tempshares ) { this . tempshares = tempshares ; }
va	10	private static boolean includeNode ( IEclipsePreferences node ) { if ( node == null ) return false ; String nodeName = node . absolutePath ( ) ; String [ ] nodeParts = nodeName . split ( "/" , 5 ) ; if ( nodeParts . length < 2 ) return false ; if ( nodeParts . length == 2 ) if ( nodeParts [ 1 ] . compareTo ( "instance" ) == 0 || nodeParts [ 1 ] . compareTo ( "" ) == 0 ) return false ; return true ; }
va	3	public NodoDeLista getSiguiente ( ) { return siguiente ; }
va	9	public LexerRule ( String pattern ) { regex = Pattern . compile ( pattern ) ; this . type = TYPE . VALID ; }
va	6	@ Override public void windowClosing ( WindowEvent e ) { System . exit ( 0 ) ; }
va	2	public int getTurn ( ) { return turn ; }
va	5	Customer ( int i , int arvTime ) { num = i ; arriveTime = arvTime ; }
va	9	public static BigInteger getAkkerman ( BigInteger m , BigInteger n ) { if ( m . compareTo ( ZERO ) == 0 ) { return n . add ( ONE ) ; } if ( n . compareTo ( ZERO ) == 0 ) { return getAkkerman ( m . subtract ( ONE ) , ONE ) ; } return getAkkerman ( m . subtract ( ONE ) , getAkkerman ( m , n . subtract ( ONE ) ) ) ; }
va	5	public KmlException ( String arg0 , Throwable arg1 ) { super ( arg0 , arg1 ) ; }
va	5	public void removeAllEntities ( ) { synchronized ( addQueue ) { synchronized ( removeQueue ) { synchronized ( entitySet ) { addQueue . clear ( ) ; removeQueue . clear ( ) ; entitySet . clear ( ) ; } } } }
va	9	public static int maxProfit ( int [ ] prices ) { if ( prices . length == 0 ) return 0 ; int [ ] maxdiff = new int [ prices . length ] ; int max = prices [ prices . length - 1 ] ; maxdiff [ prices . length - 1 ] = 0 ; for ( int i = prices . length - 1 ; i > 0 ; i -- ) { max = Math . max ( max , prices [ i ] ) ; maxdiff [ i - 1 ] = Math . max ( maxdiff [ i ] , max - prices [ i ] ) ; } int min = prices [ 0 ] ; int summax = 0 ; for ( int i = 0 ; i < prices . length ; i ++ ) { if ( prices [ i ] < min ) min = prices [ i ] ; summax = Math . max ( prices [ i ] - min + maxdiff [ i ] , summax ) ; } return summax ; }
va	6	public boolean ghostRequiresAction ( int whichGhost ) { return ( isJunction ( curGhostLocs [ whichGhost ] ) && ( edibleTimes [ whichGhost ] == 0 || edibleTimes [ whichGhost ] % GHOST_SPEED_REDUCTION != 0 ) ) ; }
va	5	public void setSender ( int id ) throws NetworkMessageException { if ( id < 0 || id > byte . MAX_VALUE ) { throw new NetworkMessageException ( "SenderID out of range" ) ; } data [ 1 ] = ( byte ) id ; }
va	7	public static void main ( String [ ] args ) { System . out . println ( isPalindrome ( - 2147447412 ) ) ; }
va	6	public boolean isValidBST ( TreeNode root ) { if ( root == null ) { return true ; } return validate ( root , min , max ) ; }
va	7	public Comment ( String id , ArrayList < double > vec ) { this . comment_id = id ; this . vector = new ArrayList < double > ( vec ) ; }
va	8	private void buildMap5 ( ) { numRobots = 2 ; starts = new Loc [ numRobots ] ; finishes = new Loc [ numRobots ] ; starts [ 0 ] = new Loc ( 39 , 39 ) ; finishes [ 0 ] = new Loc ( 39 , 0 ) ; starts [ 1 ] = new Loc ( 38 , 39 ) ; finishes [ 1 ] = new Loc ( 0 , 2 ) ; gridSize = 41 ; current_map = new String [ gridSize ] ; current_map [ 0 ] = ".....................##...##............." ; current_map [ 1 ] = "...............#####....#....######......" ; current_map [ 2 ] = ".########################################" ; current_map [ 3 ] = "........................................." ; current_map [ 4 ] = "..############################..........." ; current_map [ 5 ] = "..............#.........................." ; current_map [ 6 ] = "..............#.........................." ; current_map [ 7 ] = "..............#..#......................." ; current_map [ 8 ] = "..............#.....#####................" ; current_map [ 9 ] = "..............#..#..#.#.#................" ; current_map [ 10 ] = "..............#..#..#.#.#................" ; current_map [ 11 ] = "..............#..#..#.#.#................" ; current_map [ 12 ] = "..............#.........................." ; current_map [ 13 ] = "..............#.......###................" ; current_map [ 14 ] = "..............#.......#.................." ; current_map [ 15 ] = "..............#....#..###................" ; current_map [ 16 ] = "..............#....#....#................" ; current_map [ 17 ] = "..............#....#..###................" ; current_map [ 18 ] = "..............#.........................." ; current_map [ 19 ] = "..............#.........................." ; current_map [ 20 ] = "........................................." ; current_map [ 21 ] = "......##................................." ; current_map [ 22 ] = ".....#..#..........###..................." ; current_map [ 23 ] = "....#........#...#.#....................." ; current_map [ 24 ] = "...########..#.#.#.###.#################." ; current_map [ 25 ] = ".. #......#..#.#.#.#....................." ; current_map [ 26 ] = "...#......#..#####.###..................." ; current_map [ 27 ] = "..............................#...#......" ; current_map [ 28 ] = "...#####.............######...#...#......" ; current_map [ 29 ] = "...#......####.#####.#........#...#......" ; current_map [ 30 ] = "...#####..#..#.#.#.#.####.....#...#......" ; current_map [ 31 ] = ".......#..#..#.#.#.#.#........#...#......" ; current_map [ 32 ] = "...#####..####.#.#.#.######...#...#......" ; current_map [ 33 ] = "..............................#...#......" ; current_map [ 34 ] = "..............................#...#......" ; current_map [ 35 ] = "........................................." ; current_map [ 36 ] = "..............................#...#......" ; current_map [ 37 ] = "........................................." ; current_map [ 38 ] = ".########################################" ; current_map [ 39 ] = "........................................." ; current_map [ 40 ] = "#########################################" ; }
va	3	public String get_block_id ( ) { return _block_id ; }
va	9	@ Override public boolean isInternal ( Position < E > v ) throws InvalidPositionException { checkPosition ( v ) ; return ( hasLeft ( v ) || hasRight ( v ) ) ; }
va	6	@ Override public void setFloat ( long i , float value ) { set ( i , float . toString ( value ) ) ; }
va	4	@ Override protected void handleMouseEvent ( MouseEvent e ) { }
va	5	@ Override public void setNature ( Nature nature ) { this . nature = nature ; reCalcStats ( ) ; }
va	10	@ Override protected void delete ( Message request , Message response ) { if ( response == null ) { response = new Message ( request . getContext ( ) ) ; } response . put ( System . RESULT_CODE , "-1" ) ; response . put ( System . RESULT_MSG , "Not implemented" ) ; }
va	3	public String getProblemClassName ( ) { return problemClassName ; }
va	9	public static void main ( String [ ] args ) throws Exception { int result = new Main ( ) . mainImpl ( args ) ; System . exit ( result ) ; }
va	10	public ArrayList < ArrayList < Integer >> combinationSum ( final int [ ] candidates , final int target ) { final ArrayList < ArrayList < Integer >> res = new ArrayList < ArrayList < Integer >> ( ) ; if ( candidates == null || candidates . length == 0 ) { return res ; } Arrays . sort ( candidates ) ; helper ( candidates , 0 , target , new ArrayList < Integer > ( ) , res ) ; return res ; }
va	8	@ Test public void ELECTRIC_attacking_GROUND ( ) { assertEquals ( 0.0 , tc . getWeaknessResistance ( Type . ELECTRIC , Type . GROUND ) , 0.0 ) ; }
va	1	public void postDelete ( ) { }
va	4	public Color getTableForeground ( ) { return this . table . getForeground ( ) ; }
va	2	public double getX ( ) { return x ; }
va	2	public int getResult ( ) { return result ; }
va	3	public String getPostBody ( ) { return body ; }
va	6	public String getOptionalParam ( ParameterNames paramName ) { if ( params == null ) return null ; return params . get ( paramName ) ; }
va	8	@ Override public final boolean [ ] [ ] $$ ( ) { final boolean [ ] [ ] r = new boolean [ t . length ] [ ] ; for ( int i = 0 ; i < t . length ; i ++ ) { r [ i ] = new boolean [ t [ i ] . length ] ; System . arraycopy ( t [ i ] , 0 , r [ i ] , 0 , t [ i ] . length ) ; } return r ; }
va	3	public Users getUser ( ) { return this . user ; }
va	5	public INDIValueException ( INDIElement element , String msg ) { super ( msg ) ; this . element = element ; }
va	1	public RubberBand ( ) { }
va	6	public double getPrecio ( ) { if ( tipo == TipoConsola . XBOX ) { return 299 ; } else if ( tipo == TipoConsola . WII ) { return 199 ; } else if ( tipo == TipoConsola . PS3 ) { return 320 ; } else { return - 1 ; } }
va	8	private static byte [ ] generateHeapColor ( int lastElement ) { byte [ ] result = new byte [ lastElement + 1 ] ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = Colors . BAR_DEFAULT ; } if ( lastElement > 0 ) { result [ 1 ] = Colors . BAR_COMPARE ; result [ lastElement - 1 ] = Colors . BAR_COMPARE ; } return result ; }
va	5	public void put ( JsonObject source , String sourceAndDestinationKey ) { put ( source , sourceAndDestinationKey , sourceAndDestinationKey ) ; }
va	10	public Mapping ( ) { nodesMapping = new HashMap < VirtualNode , PhysicalNode > ( ) ; linksMapping = new HashMap < VirtualLink , ArrayList < PhysicalLink >> ( ) ; handleResourcesLoad = true ; }
va	6	public Rectangle setLocation ( Point p ) { return setLocation ( p . x ( ) , p . y ( ) ) ; }
va	2	public void setWidth ( int width ) { this . width = width ; }
va	1	protected void setEmbeddableKeys ( ) { }
va	1	public OtpNodeStatus ( ) { }
va	8	@ Override public BitSet createQueryFingerprint ( final String strSmiles , final boolean isCanonSmiles ) { return createFingerprint ( strSmiles , isCanonSmiles , m_settingsQueryFps ) ; }
va	8	public PlasmaWave FirePlasmaWave ( ) { return new PlasmaWave ( getName ( ) + "-plasmaWave" , getX ( ) , getY ( ) , getDirection ( ) , getSpeed ( ) + plasmaWaveSpeedAdditions , this ) ; }
va	3	public void setWireframeMode ( boolean s ) { wireframeMode = s ; }
va	7	public String getStats ( ) { String result = "" ; result += Util . ProbStats ( "Test HH" , test_calls , test_hash_hits ) ; return result ; }
va	1	public int cdlClosingMarubozuLookback ( ) { return super . cdlClosingMarubozuLookback ( ) ; }
va	9	public boolean equals ( Object obj ) { if ( obj instanceof Hand ) { Hand hand = ( Hand ) obj ; if ( hand . hand . size ( ) == this . hand . size ( ) && hand . numberOfCard == this . numberOfCard ) { for ( int i = 0 ; i < this . hand . size ( ) ; ++ i ) { if ( ! hand . hand . get ( i ) . equals ( this . hand . get ( i ) ) ) { return false ; } } return true ; } } return false ; }
va	3	@ Override public void setDistance ( float distance ) { }
va	8	private void createList ( class < ? > c ) { if ( map . containsKey ( c ) ) { if ( map . get ( c ) == null ) { map . put ( c , new ArrayList < Listener > ( ) ) ; } } else { map . put ( c , new ArrayList < Listener > ( ) ) ; } }
va	10	public void paintComponent ( Graphics graphics ) { super . paintComponent ( graphics ) ; _graphics = graphics ; if ( _font != null ) { _graphics . setFont ( _font ) ; _fm = _graphics . getFontMetrics ( ) ; } _window . draw ( ) ; }
va	1	public RemitoDetalle ( ) { }
va	4	@ Override public void setObjectBehind ( GameObject object ) { }
va	7	public Segment prev ( Segment segment ) { if ( segment == null ) { return null ; } int index = sweepline . indexOf ( segment ) ; if ( index == - 1 || index == 0 ) { return null ; } return sweepline . get ( index - 1 ) ; }
va	7	@ Override public void resetAmmo ( ) { super . resetAmmo ( ) ; synchronized ( this . explosions ) { this . explosions . clear ( ) ; } this . ammoLeft = Landmine . DEFAULT_AMMO ; }
va	2	public boolean isLocked ( ) { return lockLogique ; }
va	9	public void addValuacion ( Obra o ) throws SQLException { if ( o . getValuacion ( ) != 0 ) { double valor = o . getValuacion ( ) ; sql = "UPDATE Obra SET valuacion=" + valor + " WHERE sensor= " + o . getSensor ( ) ; super . realizarUpdate ( sql ) ; } }
va	4	public Additional_datum ( String id , byte [ ] data ) { this . id = id ; this . data = data ; }
va	9	public Geometry makePath ( double [ ] [ ] Pn , int nP ) { if ( nP == this . nP && same ( Pn , this . Pn ) ) return this ; if ( this . Pn == null || this . Pn . length != Pn . length ) this . Pn = new double [ Pn . length ] [ 3 ] ; for ( int n = 0 ; n < Pn . length ; n ++ ) for ( int k = 0 ; k < Pn [ n ] . length ; k ++ ) this . Pn [ n ] [ k ] = Pn [ n ] [ k ] ; return makePath ( resample ( Pn , nP ) ) ; }
va	7	public ReaderThread ( Socket socket , WhiteboardServer server , User user ) { this . socket = socket ; this . user = user ; }
va	6	public int compare ( Point arg0 , Point arg1 ) { if ( arg0 . x == arg1 . x ) return arg0 . y - arg1 . y ; return arg0 . x - arg1 . x ; }
va	8	public Room ( int clickedX , int clickedY , String text ) { this ( ) ; setName ( text ) ; setX ( clickedX ) ; setY ( clickedY ) ; }
va	9	public static void noSpace ( String string ) throws JSONException { int i , length = string . length ( ) ; if ( length == 0 ) { throw new JSONException ( "Empty string." ) ; } for ( i = 0 ; i < length ; i += 1 ) { if ( Character . isWhitespace ( string . charAt ( i ) ) ) { throw new JSONException ( "'" + string + "' contains a space character." ) ; } } }
va	2	public int obtenirNombreDeTourEtat ( ) { return this . nombreDeTourEtat ; }
va	8	@ Override public void recvOfferExceeded ( String userName , String serviceName ) { loggerNetwork . info ( "Received offer exceeded feedback from " + userName + " for service " + serviceName ) ; med . recvOfferExceeded ( userName , serviceName ) ; }
va	6	public final String first_input_available ( ) { String r = null ; for ( String s : input_names ( ) ) { if ( input_names . get ( s ) == null ) { r = s ; } } return r ; }
va	7	@ Override public Object pow ( Object left , Object right ) { return ( ( double ) Math . pow ( ( float ) left , ( float ) right ) ) . floatValue ( ) ; }
va	10	public synchronized long touch ( ) { last = System . currentTimeMillis ( ) ; out . println ( Util . getMethodName ( ) + " @" + Util . time2String ( last ) + ": Delay " + ( delay / 1000 ) + " seconds." ) ; return last ; }
va	1	public GameBoard ( ) { this ( 10 , 8 , 8 ) ; }
va	8	private static void verifyCollection ( SaploText saploText ) throws SaploClientException { if ( saploText . getCollection ( ) == null || saploText . getCollection ( ) . getId ( ) <= 0 ) throw new SaploClientException ( MSG_CLIENT_FIELD , CODE_CLIENT_FIELD , "text.collection" , "text.collection.id" ) ; }
va	4	private GPSFunctionalityVerfiedActivity getVerifyGPSActvity ( ) { if ( gpsFunctionalityVerfiedActiviy == null ) { gpsFunctionalityVerfiedActiviy = new GPSFunctionalityVerfiedActivity ( clientFactory ) ; } return gpsFunctionalityVerfiedActiviy ; }
va	2	public RegistroTupleScheme getScheme ( ) { return new RegistroTupleScheme ( ) ; }
va	9	private static void testRemoveDuplicates ( ) { String s = "aabc" ; char [ ] array = s . toCharArray ( ) ; removeDuplicates ( array ) ; s = new String ( array ) ; System . out . println ( s ) ; }
va	9	public List < Route > getAllRoutes ( ) { log . debug ( "Start getAllRoutes select" ) ; List < Route > results = em . createQuery ( "from Route" ) . getResultList ( ) ; return results ; }
va	2	public double getViewRefreshTime ( ) { return viewRefreshTime ; }
va	8	public MobTile ( int id , Sprite sprite , boolean solid , int transitionPeriod , int frames ) { super ( id , sprite , solid , transitionPeriod , frames ) ; mob = true ; solid = true ; }
va	6	public void testDoesNotBlowUp ( ) { ROT2TestThread threads [ ] = new ROT2TestThread [ 4 ] ; for ( int i = 0 ; i < threads . length ; i ++ ) { threads [ i ] = new ROT2TestThread ( "thread-" + i , 3000 ) ; } for ( int i = 0 ; i < threads . length ; i ++ ) { threads [ i ] . start ( ) ; } }
va	6	private void moverEsq ( ) { InterfaceGrafica . getInstance ( ) . moverJanela ( Direcoes . ESQUERDA ) ; }
va	9	protected void setMarginToPanel ( JPanel panel , int top , int right , int bottom , int left ) { panel . setBorder ( new EmptyBorder ( top , left , bottom , right ) ) ; }
va	10	public Object visitIdRef ( IdRef ref , String arg ) { show ( arg , ref ) ; ref . id . visit ( this , indent ( arg ) ) ; return null ; }
va	4	public void setAgency ( Agency in ) { mAgency = in ; }
va	1	public Piece ( ) { }
va	6	public void removeBoxes ( Collection < Box > box ) { boxes . removeAll ( box ) ; }
va	10	public TurnManager ( Player p1 , Player p2 , Player p3 ) { g = new TriGame ( this ) ; triple = true ; this . p1 = p1 ; this . p2 = p2 ; this . p3 = p3 ; dealCards ( ) ; turn = p1 ; }
va	6	public void addReferenceGroup ( ReferenceGroup referenceGroup ) { sessionFactory . getCurrentSession ( ) . save ( referenceGroup ) ; }
va	4	public Set < Book > getBook ( ) { return book ; }
va	8	@ Override public int hashCode ( ) { return new HashCodeBuilder ( ) . append ( DomainID ) . append ( ServiceID ) . append ( additionalProperties ) . toHashCode ( ) ; }
va	3	public DistanceUnitType getLength ( ) { return length ; }
va	3	public Link ( AbstractNode destinationNode ) { this . destinationNode = destinationNode ; }
va	2	public double getTimePressed ( ) { return timePressed ; }
va	3	public void setItems ( List < long > items ) { this . items = items ; }
va	8	@ Override public void moderatorGranted ( String participant ) { commands . handleStatus ( new StatusImpl ( StatusImpl . Type . moderatorGranted , participant ) ) ; }
va	8	@ Override public int hashCode ( ) { final int prime = 31 ; int result = 1 ; result = prime * result + ( ( elseifs == null ) ? 0 : elseifs . hashCode ( ) ) ; result = prime * result + ( ( exp1 == null ) ? 0 : exp1 . hashCode ( ) ) ; result = prime * result + ( ( stateSeq1 == null ) ? 0 : stateSeq1 . hashCode ( ) ) ; result = prime * result + ( ( stateSeq2 == null ) ? 0 : stateSeq2 . hashCode ( ) ) ; return result ; }
va	1	public HousePlanner ( ) { }
va	1	private ChatRoomManager ( ) { }
va	7	public ConfigurationNode getNode ( String path , ConfigurationNode def ) { return getOf ( path , nodeLB , def ) ; }
va	2	public boolean isEmpty ( ) { return ( top == - 1 ) ; }
va	5	public Tile getLocation ( ) { Tile Location = Players . getLocal ( ) . getLocation ( ) ; return Location ; }
va	8	@ Override public String toString ( ) { StringBuilder sb = new StringBuilder ( "inserir_args(" ) ; boolean first = true ; sb . append ( "registro:" ) ; if ( this . registro == null ) { sb . append ( "null" ) ; } else { sb . append ( this . registro ) ; } first = false ; sb . append ( ")" ) ; return sb . toString ( ) ; }
va	6	private void SeekjSliderMouseClicked ( java . awt . event . MouseEvent evt ) { }
va	8	private void checkForBurstOutput ( ) throws IOException { String output = null ; if ( ! ( output = this . getBurstOutput ( ) ) . isEmpty ( ) ) { this . outputWriter . write ( output ) ; } }
va	5	public FunctionType ( final FunctionSymbol symbol ) { super ( symbol ) ; bases = new HashSet < > ( 1 ) ; }
va	7	public ColumnSymbolValue ( String column , SymbolEnum symbol , Object [ ] value ) { this . column = column ; this . symbol = symbol ; this . value = value ; }
va	3	public String getColor ( ) { return color ; }
va	6	public String getPropertyName ( int index ) { return properties . get ( index ) . getName ( ) ; }
va	5	@ Override public int hashCode ( ) { int result = node != null ? node . hashCode ( ) : 0 ; result = 31 * result + ( type != null ? type . hashCode ( ) : 0 ) ; return result ; }
va	7	@ Override public void setReply ( Object reply ) { this . reply = ( List < Map < String , Object >> ) reply ; }
va	10	public static Question sports_question ( Connection conn , String league ) throws ClassNotFoundException , SQLException , IOException { return laegue_question ( conn , league ) ; }
va	6	< T > ClassStats < T > classStatsFor ( ClassCollector < T > cc ) { if ( cc == null ) return null ; return new MyClassStats < > ( cc ) ; }
va	10	private void buildFromDatabase ( HashMap < String , ClassInfo > db ) { for ( ClassInfo info : db . values ( ) ) { if ( checkClass ( db , info ) ) { list . add ( info ) ; } } }
va	3	public String getReplyIp ( ) { return replyIp ; }
va	8	public static double clampd ( Number number , Range range ) { return clamp_double ( number , range . getMin ( ) , range . getMax ( ) ) ; }
va	7	public String getWinningMessage ( ) { this . scoreBoard . listScores ( ) ; return "\n\t*******************************************************************************" + "\n\t Congratulations " + winner . getName ( ) + "! You won the game." + "\n\t Your score was " + winner . getCurrentScore ( ) + "\n\t*******************************************************************************" ; }
va	8	@ XmlElementDecl ( namespace = "" , name = "head" ) public JAXBElement < Head > createHead ( Head value ) { return new JAXBElement < Head > ( _Head_QNAME , Head . class , null , value ) ; }
va	8	@ Override public void actionPerformed ( ActionEvent e ) { match . popLastPoints ( ) ; scoreDisplay . update ( ) ; }
va	10	public Bgp4Update ( byte [ ] header , InetAddress peerIP , AS peerAS , Prefix prefix , Attributes updateAttr ) { super ( header ) ; this . peerIP = peerIP ; this . peerAS = peerAS ; this . prefix = prefix ; this . updateAttr = updateAttr ; }
va	5	public boolean equals ( Loc r ) { return r . x == this . x && r . y == this . y ; }
va	2	@ BeforeClass public static void setUpClass ( ) { }
va	2	public float getViewPlaneDistance ( ) { return viewPlaneDistance ; }
va	2	public Instant to ( ) { return to ; }
va	5	public Channel ( Server server , String channel ) { this . server = server ; this . channel = channel ; }
va	10	public boolean contains ( String word ) { if ( sensitiveWords . isEmpty ( ) || StringUtils . isEmpty ( word ) ) { return false ; } for ( Keyword w : sensitiveWords ) { if ( word . equals ( w . getWord ( ) ) ) { return true ; } } return false ; }
va	8	@ Test public void testIsCrossable ( ) { for ( Direction dir : Direction . values ( ) ) { assertFalse ( testTile . isCrossable ( dir ) ) ; } }
va	4	public static boolean isUriLetterOrDigit ( char c ) { return ( isUriLetter ( c ) || isUriDigit ( c ) ) ; }
va	7	private void ensureTokensIsMutable ( ) { if ( ! ( ( bitField0_ & 00000004 ) == 00000004 ) ) { tokens_ = new com . google . protobuf . LazyStringArrayList ( tokens_ ) ; bitField0_ |= 00000004 ; } }
va	3	public String [ ] getTicks ( ) { return ticks ; }
va	8	public void readExternal ( ObjectInput in ) throws IOException , ClassNotFoundException { LayoutUtil . setSerializedObject ( this , LayoutUtil . readAsXML ( in ) ) ; }
va	1	public InvalidDTOException ( ) { }
va	5	public Joueur ( String nom , int monnaie ) { this . nom = nom ; this . argent = monnaie ; }
va	6	private void txtPrecoProduto1ActionPerformed ( java . awt . event . ActionEvent evt ) { }
va	7	public static boolean isUserLevelMethod ( Method method ) { assert . notNull ( method , "Method must not be null" ) ; return ( method . isBridge ( ) || ( ! method . isSynthetic ( ) && ! isGroovyObjectMethod ( method ) ) ) ; }
va	7	public String interpolate ( String input , String thisPrefixPattern , RecursionInterceptor recursionInterceptor ) throws InterpolationException { return interpolate ( input , recursionInterceptor ) ; }
va	8	@ Override public boolean equals ( Object other ) { if ( other == this ) { return true ; } if ( other == null ) { return false ; } if ( other instanceof HourMinuteInDay ) { HourMinuteInDay otherDayTime = ( HourMinuteInDay ) other ; return ( this . hour == otherDayTime . hour && this . minute == otherDayTime . minute ) ; } else { return false ; } }
va	5	public void setYUVtoRGB ( YUVtoRGB yuv2rgb ) { if ( yuv2rgb == null ) throw new NullPointerException ( ) ; m_videoDecoder . setYUVtoRGB ( yuv2rgb ) ; }
va	5	@ Override public int compareTo ( PhysicalNode node ) { return node . getNodeAvailability ( ) . compareTo ( this . getNodeAvailability ( ) ) ; }
va	4	public static double max ( double [ ] flag ) { double max = flag [ 0 ] ; for ( int i = 1 ; i < flag . length ; i ++ ) { if ( flag [ i ] > max ) max = flag [ i ] ; } return max ; }
va	7	@ Override public DirectionVector clone ( ) { try { return ( DirectionVector ) super . clone ( ) ; } catch ( CloneNotSupportedException e ) { throw new InternalError ( e . toString ( ) ) ; } }
va	1	ClassSearch ( ) { }
va	2	public int getCID ( ) { return cID ; }
va	5	@ Override public Iterator < Templatable > iterator ( ) { return this . tokenizedTemplate . iterator ( ) ; }
va	4	public static final int bitsInBytes ( int numBits ) { if ( numBits < 0 ) throw new IllegalArgumentException ( "numBits < 0" ) ; return ( int ) ( ( numBits + ( byte . SIZE - 1 ) ) / byte . SIZE ) ; }
va	1	public FinallyLord ( ) { }
va	6	public boolean setCredentials ( int boardWidth , int boardHeight ) { this . boardWidth = boardWidth ; this . boardHeight = boardHeight ; this . name = conn . setCredentials ( id , boardWidth , boardHeight ) ; return this . name != null ; }
va	8	public void executeImport ( String file ) { if ( imported . contains ( file ) ) return ; addedImports . add ( file ) ; execute ( ) ; }
va	6	private boolean isTitleWord ( String firstOccur ) { String first = firstOccur . split ( "_" ) [ 0 ] ; if ( first . equalsIgnoreCase ( "0" ) ) return true ; return false ; }
va	2	public void setHotelBudgetSpent ( double hotelBudgetSpent ) { this . hotelBudgetSpent = hotelBudgetSpent ; }
va	5	private void copy_from ( danishStemmer other ) { I_p1 = other . I_p1 ; S_ch = other . S_ch ; super . copy_from ( other ) ; }
va	4	@ Override public void setLevelStage ( final Integer levelStage ) { this . levelStage = levelStage ; }
va	5	@ Test public void testIsNumeric ( ) { assertTrue ( datatype . isNumeric ( ) ) ; }
va	3	public Player getPlayer ( ) { return player ; }
va	9	public void setType ( int type ) { this . type = type ; this . iconName = AnuncisDefinition . mapDefined . get ( type ) . getResourceIcon ( ) ; this . iconType = RESOURCE_ICON ; }
va	3	public void setPropertyChange ( PropertyChangeSupport propertyChange ) { this . propertyChange = propertyChange ; }
va	3	public Object getObject ( ) { return v ; }
va	6	public CountryObject ( int _countryId , String _countryName ) { this ( ) ; countryId = _countryId ; countryName = _countryName ; }
va	7	public Vec3f set ( int i , float val ) { switch ( i ) { case 0 : x = val ; return this ; case 1 : y = val ; return this ; default : z = val ; return this ; } }
va	4	@ Override public File getMusicFolder ( ) { return get ( "My Music" ) ; }
va	6	@ Override public void exitRule ( ParseTreeListener listener ) { if ( listener instanceof DecafParserListener ) ( ( DecafParserListener ) listener ) . exitSentencia5 ( this ) ; }
va	10	protected int get_allocationlength ( Header header ) { if ( header . version ( ) == Header . MPEG1 ) { int channel_bitrate = header . bitrate_index ( ) ; if ( header . mode ( ) != Header . SINGLE_CHANNEL ) if ( channel_bitrate == 4 ) channel_bitrate = 1 ; else channel_bitrate -= 4 ; if ( channel_bitrate == 1 || channel_bitrate == 2 ) if ( subbandnumber <= 1 ) return 4 ; else return 3 ; else if ( subbandnumber <= 10 ) return 4 ; else if ( subbandnumber <= 22 ) return 3 ; else return 2 ; } else { if ( subbandnumber <= 3 ) return 4 ; else if ( subbandnumber <= 10 ) return 3 ; else return 2 ; } }
va	6	public Force forceOn ( Gravitable g ) throws CollisionException { return model . forceOn ( g ) ; }
va	1	public MTListTr ( ) { }
va	7	public void fullscreen_toggle ( ) { fullscreen = ! fullscreen ; try { Display . setFullscreen ( fullscreen ) ; } catch ( LWJGLException e ) { e . printStackTrace ( ) ; } }
va	5	public void insertXIntoDB ( ) { System . out . println ( "Outer x is " + x ) ; }
va	1	public DBWord ( ) { }
va	5	public Muckyluat ( String noidung , Set kyluats ) { this . noidung = noidung ; this . kyluats = kyluats ; }
va	5	public ArrayList < Challenge > getInbox ( int id ) { return getChallenges ( id , "SELECT * FROM challenges WHERE friendToID = " ) ; }
va	7	@ Override public boolean equals ( Object o ) { return o != null && o . getClass ( ) . equals ( this . getClass ( ) ) && ( ( ( ( EduAVLTree ) o ) . root == null && this . root == null ) || ( this . root != null && this . root . equals ( ( ( EduAVLTree ) o ) . root ) ) ) ; }
va	8	private void writeObject ( ObjectOutputStream out ) throws IOException { if ( getClass ( ) == UnitValue . class ) LayoutUtil . writeAsXML ( out , this ) ; }
va	6	public static JSONArray toJSONArray ( String string ) throws JSONException { return toJSONArray ( new JSONTokener ( string ) ) ; }
va	6	@ Override public ToastBuilder toastIf ( boolean condition , ToastIfHandler then ) { return toastIf ( condition , then , ToastIfHandler . null ) ; }
va	10	public void enable ( ) throws IOException { synchronized ( optOutLock ) { if ( isOptOut ( ) ) { configuration . set ( "opt-out" , false ) ; configuration . save ( configurationFile ) ; } if ( task == null ) { start ( ) ; } } }
va	10	@ Override public void mark ( int readAheadLimit ) throws IOException { if ( readAheadLimit < 0 ) { throw new IllegalArgumentException ( "Read-ahead limit < 0" ) ; } ensureOpen ( ) ; this . readAheadLimit = readAheadLimit ; markedChar = nextChar ; markedSkipLF = skipLF ; }
va	1	public void startStartGame ( ) { }
va	5	public boolean getSub ( ) { return ( boolean ) boolean . valueOf ( map . get ( "sub" ) . toString ( ) ) ; }
va	7	@ Override public void updateBinaryStream ( String columnLabel , InputStream x ) throws SQLException { }
va	3	public JTextField getTextFieldUserName ( ) { return txtUserName ; }
va	10	public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; YourPlayer player = new YourPlayer ( ) ; while ( true ) { player . run ( sc ) ; } }
va	2	public void setMask ( int mask ) { this . mask = mask ; }
va	10	private void printMessage ( String message ) { String name = Thread . currentThread ( ) . getName ( ) ; System . out . printf ( "[%s]: %s%n" , name , message ) ; }
va	5	@ Override public void setReciever ( String reciever ) { recieve = reciever ; }
va	10	public void drawBackground ( Graphics g ) { g . setColor ( Color . white ) ; g . drawRect ( 0 , 0 , ( int ) dimension . getWidth ( ) , ( int ) dimension . getWidth ( ) ) ; g . fillRect ( 0 , 0 , ( int ) dimension . getWidth ( ) , ( int ) dimension . getWidth ( ) ) ; }
va	9	private double getDistance ( int x1 , int y1 , int x2 , int y2 ) { int dx = x2 - x1 ; int dy = y2 - y1 ; return Math . sqrt ( dx * dx + dy * dy ) ; }
va	9	@ Override public void keyReleased ( KeyEvent e ) { Dependencias . Teclado . getInstance ( ) . liberarTecla ( e . getKeyCode ( ) ) ; }
va	8	@ XmlElementDecl ( namespace = "com/firstdata/Merchant/gmfV3.10" , name = "EcommTxnInd" ) public JAXBElement < String > createEcommTxnInd ( String value ) { return new JAXBElement < String > ( _EcommTxnInd_QNAME , String . class , null , value ) ; }
va	5	public Item getItem ( int x , int y ) { return bufferBoard . getItem ( x , y ) ; }
va	4	public Instance ( String identifier ) { super ( ) ; this . identifier = identifier ; label = null ; }
va	9	@ Test ( timeout = TIMEOUT ) public void testOrderAfterTwoInserts ( ) { heap . insert ( 0 ) ; heap . insert ( 1 ) ; assertEquals ( "Testing order after two inserts" , heap . deleteMin ( ) , ( Integer ) 0 ) ; }
va	1	public UStatusPk ( ) { }
va	7	private void btnRecarregaPesqActionPerformed ( java . awt . event . ActionEvent evt ) { exibePesquisa ( ) ; }
va	7	public Light ( Color c , int intensity ) { this ( new Color ( c . getRed ( ) , c . getGreen ( ) , c . getBlue ( ) , intensity ) ) ; }
va	2	public int getScore ( ) { return points ; }
va	9	@ Override public boolean equals ( Object o ) { if ( this == o ) return true ; if ( o == null || getClass ( ) != o . getClass ( ) ) return false ; Square square = ( Square ) o ; if ( x != square . x ) return false ; if ( y != square . y ) return false ; return true ; }
va	6	public String getModDateStr ( ) { if ( moddate . getTime ( ) == 0 ) { return ( "" ) ; } return ( dtfmt . format ( moddate ) ) ; }
va	7	@ Override public BufferedImage getSprite ( ) { return ( ( ! faceRight ) ? Art . player1 : Art . player2 ) [ 0 ] [ 1 ] ; }
va	3	private static int swapBits ( int number ) { return ( ( number & aaaaaaaa ) >> 1 ) | ( ( number & 55555555 ) << 1 ) ; }
va	4	public ArrayList < Day > getPreferredDays ( ) { return preferredDays ; }
va	1	public Employee ( ) { }
va	1	private boolean hasMoved ( ) { return this . hasMoved ; }
va	9	public MapRules ( ) { this . mapHeight = MapRules . MAP_HEIGHT_DEFAULT ; this . mapWidth = MapRules . MAP_WIDTH_DEFAULT ; this . forestNbZombies = MapRules . FOREST_NB_ZOMBIES_DEFAULT ; this . plainNbZombies = MapRules . PLAIN_NB_ZOMBIES_DEFAULT ; }
va	6	public boolean allEquivalent ( ) { return ks [ wildcard_ordinal ] == size || countEquivalent ( arbitraryNonWildcard ( ) ) == size ; }
va	8	@ Override public void hitEffectTo ( ShootingObject target ) { hittedObjects . add ( target ) ; target . damage ( getPower ( ) ) ; }
va	2	public double getPuberty ( ) { return puberty ; }
va	8	public static void connectHelper2 ( TreeLinkNode root ) { if ( root == null ) return ; if ( root . left != null && root . right != null ) { TreeLinkNode rootLeft = root . right . left ; TreeLinkNode rootRight = root . left . right ; while ( rootLeft != null && rootRight != null ) { rootRight . next = rootLeft ; rootRight = rootRight . right ; rootLeft = rootLeft . left ; } connectHelper2 ( root . left ) ; connectHelper2 ( root . right ) ; } }
va	1	public void clear ( ) { clear ( 0 ) ; }
va	5	public Map < MappingField , Direction > getAdjDirMap ( ) { return adjacentDirection ; }
va	6	public static Timer createTimer ( long ms ) { Timer t = new Timer ( ms ) ; timers . add ( t ) ; return t ; }
va	3	public WindowHandler ( Game game ) { this . game = game ; }
va	4	public static Integer valueOf ( Object o ) { if ( o == null ) { return null ; } else if ( o instanceof byte ) { return ( int ) ( byte ) o ; } else if ( o instanceof Integer ) { return ( Integer ) o ; } else if ( o instanceof double ) { return ( int ) ( double ) ( double ) o ; } else if ( o instanceof float ) { return ( int ) ( float ) ( float ) o ; } else if ( o instanceof long ) { return ( int ) ( long ) ( long ) o ; } else { return null ; } }
va	8	public ITransferMock ( String name , boolean active , long length , long transfered , TransferStatus status ) { super ( ) ; this . name = name ; this . active = active ; this . length = length ; this . transfered = transfered ; this . status = status ; }
va	7	public static void main ( String [ ] args ) { HashTable table = new HashTable ( ) ; table . put ( 10 , 10 ) ; table . put ( 60 , 20 ) ; table . printMap ( ) ; }
va	5	private void resizeTab ( ) { tab = Arrays . copyOf ( tab , tab . length * 2 ) ; }
va	3	public BattleShipClient ( BattleShipProtocol parent ) { this ( ) ; this . parent = parent ; }
va	9	public void setFill ( int i ) { constr . fill = i ; if ( i == GridBagConstraints . HORIZONTAL ) { setWeight ( 100 , 0 ) ; } else if ( i == GridBagConstraints . VERTICAL ) { setWeight ( 0 , 100 ) ; } else if ( i == GridBagConstraints . BOTH ) { setWeight ( 100 , 100 ) ; } else { setWeight ( 0 , 0 ) ; } }
va	10	private boolean isNavigable ( final AbstractElement e ) { return asList ( Earth . SYMBOL , EmptyCell . SYMBOL , Lambda . SYMBOL ) . contains ( e . getSymbol ( ) ) ; }
va	6	String getString ( String name ) { synchronized ( syncObject ) { return new String ( databaseTable . get ( name ) ) ; } }
va	9	public MnuDictionaryTbl ( TblDictionaryList table ) { this . table = table ; this . setText ( "Funktionen" ) ; this . add ( getMniSearch ( ) ) ; this . addSeparator ( ) ; this . add ( getMniNew ( ) ) ; this . add ( getMniDelete ( ) ) ; }
va	3	public boolean cancelMorph ( ) { return cancelMorph_native ( pointer ) ; }
va	3	static public float random ( float range ) { return random . nextFloat ( ) * range ; }
va	1	public IgnoreResponseException ( ) { super ( ) ; }
va	6	public static void main ( String [ ] args ) { MiniMusicPlayer2 player = new MiniMusicPlayer2 ( ) ; player . go ( ) ; }
va	4	@ Override public Vector3f get_selection_coords ( int selection ) { return null ; }
va	1	public OptionsPanel ( ) { }
va	5	public void setShare ( Share share ) { this . sharename = share . getSharename ( ) ; this . share = share ; }
va	9	static List < Stmt > resolveStmts ( List < SyntaxTreeNode > nodes ) { return ListUtils . transform ( nodes , n -> resolveStmt ( n ) ) ; }
va	4	public static void print ( double x ) { out . print ( x ) ; out . flush ( ) ; }
va	10	private void rbTickItemStateChanged ( java . awt . event . ItemEvent evt ) { if ( rbTick . isSelected ( ) ) { rbMens . setSelected ( false ) ; } }
va	8	@ Override protected void configure ( ) { super . configure ( ) ; install ( new FactoryModuleBuilder ( ) . build ( new TypeLiteral < GenericJobFactory < SimpleTestJob >> ( ) { } ) ) ; }
va	2	boolean verify ( ) { return verify ( tree ) ; }
va	1	public MapLayerChangeEvent ( ) { super ( ) ; }
va	7	protected BuffSpeedGraphic ( ContentPane parent , Game game , Point position ) { super ( game , position ) ; this . parent = parent ; }
va	5	@ Override public boolean containsValue ( Object value ) { return map . containsValue ( value ) ; }
va	4	@ Before public void setUp ( ) { serviceEmTeste = new NotificacaoDeAusenciaService ( ) ; }
va	6	@ Override public void actionPerformed ( ActionEvent arg0 ) { machine . loadFile ( ) ; }
va	7	@ Override public String toString ( ) { return "DataEvent [socketChannel=" + socketChannel + "  data=" + Arrays . toString ( data ) + "  processedData=" + processedData + "]" ; }
va	8	@ Override public boolean equals ( Object obj ) { if ( this == obj ) return true ; if ( obj == null ) return false ; if ( getClass ( ) != obj . getClass ( ) ) return false ; PersistentEntry < ? , ? > other = ( PersistentEntry < ? , ? > ) obj ; if ( entry == null ) { if ( other . entry != null ) return false ; } else if ( ! entry . equals ( other . entry ) ) return false ; return true ; }
va	7	@ Override public Account getAccount ( String number ) { return accounts . get ( number ) ; }
va	7	@ JsonProperty ( "Share" ) public void setShare ( List < org . ogf . glue2 . Share > Share ) { this . Share = Share ; }
va	5	public void setInitial ( State < C > state ) { _initial = state ; }
va	8	public void store ( OutputStream stream ) throws IOException { ObjectOutputStream s = new ObjectOutputStream ( stream ) ; s . writeObject ( this ) ; s . flush ( ) ; }
va	7	public MessageRecipient ( Message message , CourseUsers recipient , boolean deleted , boolean isNew ) { this . message = message ; this . recipient = recipient ; this . deleted = deleted ; this . isNew = isNew ; }
va	7	@ Override public void execute ( ) { ambiente . put ( id , exp . getValor ( ) ) ; }
va	4	public void setPageSettings ( List < PageSettings > pageSettings ) { this . pageSettings = pageSettings ; }
va	10	@ Override public void translate ( ) { super . setTitle ( TranslationManager . getinstance ( ) . getText ( "create" ) ) ; this . question . setText ( TranslationManager . getinstance ( ) . getText ( "question" ) ) ; this . answer . setText ( TranslationManager . getinstance ( ) . getText ( "answer" ) ) ; this . boxname . setText ( TranslationManager . getinstance ( ) . getText ( "boxname" ) ) ; }
va	5	public void setWriteStatus ( String s ) { lblWriteStatus . setText ( s ) ; }
va	8	@ Override public void warn ( String msg ) { logger . warn ( msg + "\nPlease check it in " + getFilePath ( ) + ": at row=" + rowNum + "  col=" + colNum ) ; }
va	5	public void setTranslateY ( double transY ) { this . transY = transY ; transform . setToTranslation ( transX , transY ) ; }
va	3	public X_BS_ACL getAcl ( ) { return this . acl ; }
va	1	public ObjectFactory ( ) { }
va	2	public void setKeyPress ( int keyPress ) { this . keyPress = keyPress ; }
va	2	public int getOro ( ) { return this . oro ; }
va	10	public Host getOrCreateHost ( InetAddress address ) { Host host = new Host ( address , "foo" , Host . UNKNOWN_PORT ) ; if ( this . knownHosts . containsKey ( address ) ) { host = this . knownHosts . get ( address ) ; host . Seen ( ) ; return host ; } return host ; }
va	4	public Scope createNewScope ( Scope scope ) { return scope . createFunctionScope ( ) ; }
va	1	public void removePacket ( ) { removePacket ( "" , 0 ) ; }
va	10	public Geometry lathe ( int m , int n , double Z [ ] , double R [ ] ) { double T [ ] = new double [ n + 1 ] ; double C [ ] = new double [ n + 1 ] ; makeCurve ( Z , R , T , C ) ; return latheGen ( m , T , C , true ) ; }
va	4	public Axis < T > axesDefaultsInstance ( ) { if ( axesDefaults == null ) { axesDefaults = new Axis < T > ( ) ; } return axesDefaults ; }
va	3	public FiltroSaldoMenorQue100Reais ( Filtro outroFiltro ) { super ( outroFiltro ) ; }
va	9	public void start ( ) { checkAllPlayersJoinedTheGame ( ) ; resetGame ( ) ; for ( int i = 0 ; i < configuration . getPlayCount ( ) ; i ++ ) { executor . execute ( this ) ; } fireGameStartedEvent ( ) ; }
va	10	public JSONWriter object ( ) throws JSONException { if ( this . mode == i ) { this . mode = o ; } if ( this . mode == o || this . mode == a ) { this . append ( "{" ) ; this . push ( new JSONObject ( ) ) ; this . , = false ; return this ; } throw new JSONException ( "Misplaced object." ) ; }
va	8	public void clearMap ( GameAction gameAction ) { for ( int i = 0 ; i < keyActions . length ; i ++ ) { if ( keyActions [ i ] == gameAction ) { keyActions [ i ] = null ; } } for ( int i = 0 ; i < mouseActions . length ; i ++ ) { if ( mouseActions [ i ] == gameAction ) { mouseActions [ i ] = null ; } } gameAction . reset ( ) ; }
va	9	public static ObjectClass fromValue ( String v ) { for ( ObjectClass c : ObjectClass . values ( ) ) { if ( c . value . equals ( v ) ) { return c ; } } throw new IllegalArgumentException ( v ) ; }
va	1	public int points ( ) { return points ; }
va	7	public Watcher ( String name , long watch_period_millis ) { this . name_ = name ; this . watch_period_millis_ = watch_period_millis ; this . watcher_thread_ = null ; }
va	8	@ Test public void testIntConstructor_Red ( ) { int intColor = FF0000 ; ColorRGB color = new ColorRGB ( intColor ) ; assert . assertEquals ( color , ColorRGB . RED ) ; }
va	1	public long op ( ) { return 1 ; }
va	5	public void addQueries ( String [ ] queries ) { for ( String q : queries ) { this . addQuery ( q ) ; } }
va	4	public void setType ( String value ) { this . type = value ; }
va	1	public boolean checked ( ) { return this . checked ; }
va	5	public String getExternThemesType ( ) { return externThemesComboBox . getSelectedItem ( ) . toString ( ) ; }
va	2	public void setcurrentsprite ( int currentspritenumber ) { this . currentspritenumber = currentspritenumber ; }
va	10	public static void main ( String [ ] args ) { String zipCode9 = "123456789" ; String zipCodeFirst5Nums = zipCode9 . substring ( 0 , 5 ) ; String zipCodeLast4Nums = zipCode9 . substring ( 5 , 9 ) ; System . out . println ( "ZIP Code 9: " + zipCode9 ) ; System . out . println ( "ZIP Code - First 5 Numbers: " + zipCodeFirst5Nums ) ; System . out . println ( "ZIP Code - Last 4 Numbers: " + zipCodeLast4Nums ) ; }
va	3	public int kontrolle ( ) { if ( a < 0 && b < 0 ) return 1 ; else return 0 ; }
va	6	@ Override public SearchRequestBuilder withRadius ( double radius ) { getParameters ( ) . setRadius ( radius ) ; return this ; }
va	5	public PositionAtom getAtomAt ( int row , int col ) { return atomsOnBoard [ row ] [ col ] ; }
va	4	public void setUserDictionary ( SpellDictionary dictionary ) { userdictionary = dictionary ; }
va	6	public void addNodeInfo ( int node , String info ) { gui . gp . addNodeInfo ( node , info ) ; }
va	1	public void bye ( ) { }
va	1	public void destroy ( ) { }
va	10	@ Test public void Attack_onpage ( ) { tester . setWorkingForm ( "classes" ) ; tester . assertMatch ( "Manage Classes" ) ; tester . getElementByXPath ( "//form/table[1]/tbody/tr/td/center/a[text()='1']" ) . setAttribute ( "href" , "javascript:document.classes.submit()" ) ; tester . setHiddenField ( "onpage" , "1'> <a href=www.google.com>evil link</a> <br '" ) ; tester . setHiddenField ( "page" , "1" ) ; tester . setHiddenField ( "page2" , "0" ) ; tester . clickLinkWithText ( "1" ) ; tester . assertMatch ( "Manage Classes" ) ; tester . assertLinkNotPresentWithText ( "evil link" ) ; }
va	7	private void limparCampos ( ) { tfHost . setText ( "" ) ; tfUsuario . setText ( "" ) ; pfSenha . setText ( "" ) ; snPorta . setValue ( 3306 ) ; }
va	4	@ Override public int getRowCount ( ) { if ( levels == null ) return 0 ; return levels . size ( ) ; }
va	1	public JelllyTotsTestCrudService ( ) { }
va	7	void removeNullValues ( int firstidx ) { for ( int i = firstidx ; i < size ; i ++ ) { if ( values [ i ] != null ) { keys [ firstidx ] = keys [ i ] ; values [ firstidx ++ ] = values [ i ] ; } } clear ( firstidx ) ; }
va	3	public Sequence getSequenceNumber ( ) { return sequenceNumber ; }
va	6	public void setUserAgent ( String ua ) { setRequestHeader ( "User-Agent" , Configuration . getUserAgent ( ua ) ) ; }
va	6	public void testStringConstructorParseFail ( ) { try { new JSONArray ( "[" ) ; fail ( ) ; } catch ( JSONException e ) { } catch ( StackOverflowError e ) { fail ( "Stack overflowed on input: \"[\"" ) ; } }
va	5	@ Override public void setFrameNumber ( int frameNumber ) throws IndexOutOfBoundsException { if ( backgroundSprite != null ) { backgroundSprite . setFrameNumber ( frameNumber ) ; } }
va	4	public static int getRelayExpansionModulesInstalled ( short rem ) { int qty = 0 ; for ( int i = 7 ; i >= 0 ; i -- ) { if ( ( rem & ( 1 << i ) ) == ( 1 << i ) ) { qty = i + 1 ; break ; } } return qty ; }
va	8	@ Test ( expected = IllegalArgumentException . class ) public void testArgumentsNoFaceValuesTwos ( ) { faceValues [ 0 ] = 1 ; faceValues [ 1 ] = 5 ; faceValues [ 2 ] = 3 ; faceValues [ 3 ] = 4 ; faceValues [ 4 ] = 10 ; ScoreCardCategories . TWOS . getScore ( faceValues ) ; }
va	2	public Person ( ) { name = "No name yet" ; }
va	8	@ Override public boolean equals ( Object obj ) { if ( this == obj ) return true ; if ( obj == null ) return false ; if ( getClass ( ) != obj . getClass ( ) ) return false ; RecordTypeNode other = ( RecordTypeNode ) obj ; if ( fieldLists == null ) { if ( other . fieldLists != null ) return false ; } else if ( ! fieldLists . equals ( other . fieldLists ) ) return false ; return true ; }
va	2	public final int getMeasuredWidth ( ) { return measuredWidth ; }
va	4	@ Override public int hashCode ( ) { return key . hashCode ( ) * 31 + value . hashCode ( ) ; }
va	2	public boolean isSelected ( ) { return selected ; }
va	2	public int getRegenDelay ( ) { return regenDelay ; }
va	5	public javax . swing . JMenuItem getVentaeliminarProdMenu ( ) { return ventaeliminarProdMenu ; }
va	3	public static byte readByte ( ) { return scanner . nextByte ( ) ; }
va	2	public double getTotalTime ( ) { return total_t ; }
va	5	public void delItem ( String astr ) { int idx = getIndex ( astr ) ; if ( idx >= 0 ) delItem ( idx ) ; }
va	7	@ Override public Component getComponentAfter ( Container container , Component component ) { return cycle ( component , 1 ) ; }
va	7	Rule ExpressionFunctionCall ( ) { return Sequence ( Identifier ( ) , WhiteSpace ( ) , "( " , ZeroOrMore ( Identifier ( ) , WhiteSpace ( ) , Optional ( "  " ) ) , ") " ) ; }
va	9	public static FastFilter at ( final int ... indexes ) { return new FastFilter ( ) { @ Override public boolean filter ( Context context ) { for ( int i : indexes ) { if ( i == context . elementIndex ( ) ) { return true ; } } return false ; } } ; }
va	9	private void btnNovoListagemActionPerformed ( java . awt . event . ActionEvent evt ) { limparCamposFormulario ( ) ; tabs . setSelectedIndex ( 1 ) ; }
va	9	public void paintComponent ( Graphics g ) { super . paintComponent ( g ) ; g . setColor ( Color . GRAY ) ; g . drawString ( "Reads: " + ratio [ 0 ] , 50 , 50 ) ; g . drawString ( "Writes: " + ratio [ 1 ] , 50 , 90 ) ; g . drawString ( "-------------------" , 50 , 110 ) ; g . drawString ( "Size: " + size , 50 , 130 ) ; }
va	7	public int compareTo ( Individual other ) { double mine = this . fitness ( ) ; double its = other . fitness ( ) ; if ( mine == its ) return 0 ; return ( fitness . maximization ( ) ? 1 : - 1 ) * ( mine > its ? 1 : - 1 ) ; }
va	5	public boolean isHP ( ) { return this . type == Item . Type . HP ; }
va	2	public void setDuration ( double duration ) { this . duration = duration ; }
va	10	@ Test public void Attack_page ( ) { tester . setHiddenField ( "page" , "1'/> <a href=www.google.com>evil link</a> <br '" ) ; tester . setHiddenField ( "page2" , "2" ) ; Support_Function . addSubmitButton ( "/html//form[@name='admin']" , tester ) ; tester . setWorkingForm ( "admin" ) ; tester . submit ( ) ; tester . assertMatch ( "Manage Students" ) ; tester . assertLinkNotPresentWithText ( "evil link" ) ; }
va	3	public Axis getYAxis ( ) { return yAxis ; }
va	1	public LSystemKochCurve ( ) { this ( 0 ) ; }
va	2	public long getGroupId ( ) { return groupId ; }
va	3	public float getTop ( ) { return minY + dY ; }
va	6	public JSONObject put ( String key , double value ) throws JSONException { put ( key , new double ( value ) ) ; return this ; }
va	3	public void Clear ( ) { ClearKeys ( ) ; ClearMouse ( ) ; }
va	5	public static void sleep ( long timeToSleep ) { if ( timeToSleep <= 0 ) return ; try { Thread . sleep ( timeToSleep ) ; } catch ( InterruptedException e ) { } }
va	9	@ Override public void actionPerformed ( ActionEvent e ) { int newColumn = column + 1 ; if ( newColumn > limit ) newColumn = 0 ; moveToCell ( row , newColumn ) ; }
va	10	public TileRect ( TileMap param , int x , int y , int lengthX , int lengthY ) { startX = x ; startY = y ; createRect ( param , lengthX , lengthY ) ; }
va	3	static Object sharedMainFrame ( ) { throw new UnsupportedOperationException ( "Not supported yet." ) ; }
va	4	public SequenceTypist ( Typist < T > singleTypist ) { super ( ) ; this . singleTypist = singleTypist ; }
va	3	public void undo ( ) { light . on ( ) ; }
va	4	public String toString ( ) { return String . valueOf ( number ) ; }
va	10	private void registerUsedFeatures ( ) { target . addFeature ( createWordFeature ( ) ) ; for ( Feature feature : usedFeatures . values ( ) ) { feature . addFeaturevalue ( createNotBoundFeaturevalue ( ) ) ; target . addFeature ( feature ) ; } }
va	3	public boolean canMove ( ) { return canMove_native ( pointer ) ; }
va	2	public HalfWedge ( final int orientation ) { super ( null , true , true , true , true , true , true ) ; this . orientation = orientation ; }
va	4	public void mouseMoved ( MouseEvent mouseEvent ) { if ( paintType == null ) return ; paintType . mouseMoved ( mouseEvent ) ; }
va	3	public Date getDate ( ) { return d ; }
va	6	private void jRadioButton1ActionPerformed ( java . awt . event . ActionEvent evt ) { }
va	3	public String getsCategory ( ) { return sCategory ; }
va	5	public ScriptRunner ( Connection connection , boolean autoCommit , boolean stopOnError ) { this . connection = connection ; this . autoCommit = autoCommit ; this . stopOnError = stopOnError ; }
va	1	public OCPCorrectionTest ( ) { }
va	3	public void setKeepAliveInterval ( long interval ) { this . keepAlive = interval ; }
va	9	public boolean isInsertConfirmed ( String xml ) { String id [ ] = { "transaction_type" , "message_type" } ; String ref [ ] = { "INSERT" , "CONFIRM" } ; return autoCheckSibMessage ( xml , id , ref ) && getParameterElement ( xml , "name" , "status" ) . getValue ( ) . equals ( "m3:Success" ) ; }
va	5	public MultOperatorFactory ( FormulaFactory [ ] factories , LiteralFactory literalFactory ) { super ( factories , literalFactory ) ; }
va	7	public boolean canPlaceCOP ( TilePosition target , boolean checkCanIssueCommandType , boolean checkCommandibility ) { return canPlaceCOP_native ( pointer , target , checkCanIssueCommandType , checkCommandibility ) ; }
va	8	@ Override public void mouseClicked ( MouseEvent e ) { int index = locationToIndex ( e . getPoint ( ) ) ; invertChecked ( index ) ; }
va	9	public void testAUnBuqueLeSaca1DeResistencia ( ) { unaMinaSubmarinaSubmarinaPuntualConRetardo . setTurnosRestantes ( 0 ) ; unaMinaSubmarinaSubmarinaPuntualConRetardo . atacar ( unBuque ) ; assertEquals ( 0 , unBuque . getCuerpo ( ) . get ( 0 ) . getResistencia ( ) ) ; }
va	3	public String getDeptNum ( ) { return deptNum ; }
va	6	@ Override public void enterRule ( ParseTreeListener listener ) { if ( listener instanceof DecafParserListener ) ( ( DecafParserListener ) listener ) . enterSentencia4 ( this ) ; }
va	1	public boolean isContainer ( ) { return isContainer ; }
va	7	public Session newSession ( Request request , Response response ) { return new MySession ( request ) ; }
va	2	public String value ( ) { return value ; }
va	6	public JSONArray optJSONArray ( int index ) { Object o = this . opt ( index ) ; return o instanceof JSONArray ? ( JSONArray ) o : null ; }
va	5	Level ( XmlLevel xmlLevel ) { this . name = xmlLevel . getName ( ) ; }
va	7	private OSGiMetaDataBuilder ( String symbolicName , Version version ) { metadata = new DynamicMetaDataInternal ( symbolicName , version ) ; }
va	5	public Collection < ItemStack > getInventory ( ) { return inventory . values ( ) ; }
va	6	default public < T > Set < T > set ( T object ) { Set < T > set = new HashSet < > ( ) ; set . add ( object ) ; return set ; }
va	5	public Object getValue ( String expression ) { return getDelegate ( ) . getValue ( expression ) ; }
va	1	public ResizeableTableHeader ( ) { this ( null ) ; }
va	2	public boolean permitidoAdministrarCatalogo ( ) { return this . cargo . permitidoAdministrarCatalogo ( ) ; }
va	5	public String getString ( String key ) throws vslConfigException { return getVal ( key ) ; }
va	3	public MousepadListener getMouseListener ( ) { return mouseListener ; }
va	10	@ Test public void adjacencyMatrixDfsTest ( ) { adj . addEdge ( 1 , 1 ) ; adj . addEdge ( 1 , 4 ) ; adj . addEdge ( 1 , 2 ) ; adj . addEdge ( 2 , 3 ) ; adj . addEdge ( 2 , 3 ) ; adj . addEdge ( 4 , 6 ) ; List < Integer > dfsT = adj . dfs ( 1 ) ; assert . assertEquals ( dfsT . get ( 0 ) , new Integer ( 1 ) ) ; assert . assertEquals ( dfsT . get ( 1 ) , new Integer ( 4 ) ) ; assert . assertEquals ( dfsT . get ( 2 ) , new Integer ( 6 ) ) ; assert . assertEquals ( dfsT . get ( 3 ) , new Integer ( 2 ) ) ; assert . assertEquals ( dfsT . get ( 4 ) , new Integer ( 3 ) ) ; }
va	6	@ Test public void nullTest ( ) { Point3d a = new Point3d ( 1.0 , 0.0 , 2.0 ) ; assertEquals ( false , a . equals ( null ) ) ; }
va	9	public UserDefinedSpecialForm ( String name , SparseList parameters , Code code ) { super ( name ) ; functionBody = new FunctionBody ( parameters , code ) ; }
va	5	public void setCurrency ( java . lang . String currency ) { this . currency = currency ; }
va	4	public void setY2 ( final int y ) { if ( this . y2 != null && this . y2 == y ) return ; this . y2 = y ; this . refresh ( ) ; }
va	3	public Action getCloseAction ( ) { return closeAction ; }
va	1	private SizeOf ( ) { }
va	3	public String getName ( ) { return name ; }
va	2	public void accept ( int value ) { accept ( ( long ) value ) ; }
va	5	public void clear ( ) { clearArea ( 0 , 0 , data . getColumns ( ) , data . getRows ( ) ) ; }
va	4	public boolean equals ( Auction auction ) { if ( this . id == auction . id ) { return true ; } else { return false ; } }
va	7	private String createSimpleSVFromList ( @ NotNull List < ? > list , String separator ) { return createSVFromList ( list , "" , separator , "" ) ; }
va	7	@ Override public String getFieldValue ( String name ) { String s = map . get ( name ) ; if ( s == null ) { return "" ; } return s ; }
va	9	@ Override public void submit ( Message msg ) { System . out . println ( msg . getText ( ) ) ; System . out . println ( "Sent to: " + msg . getRecipients ( ) ) ; }
va	6	@ SuppressWarnings ( "unused" ) public static void main ( String [ ] args ) { ServerWindow serverWindow = new ServerWindow ( ) ; }
va	7	public static void main ( String [ ] args ) throws Exception { UWCANDataset dataset = new UWCANDataset ( "/media/disk/master/Master/datasets/WU-CAN/webdata" ) ; dataset . loadDocuments ( ) ; }
va	1	public boolean areMessagesDirty ( ) { return areMessagesDirty ; }
va	6	static private void swap ( Highscore a [ ] , int i , int j ) { Highscore T ; T = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = T ; }
va	2	public String getDescription ( ) { return "CSV files (*.csv)" ; }
va	10	void exportExpense ( File out ) { if ( ! out . toString ( ) . toUpperCase ( ) . endsWith ( ".CSV" ) ) { out = new File ( out . toString ( ) . concat ( ".CSV" ) ) ; } dm . exportExpense ( out , event . getExpense ( ) ) ; }
va	2	public int getTEMPOMAXIMO ( ) { return TEMPO_MAXIMO ; }
va	4	public Tree < Board > getTree ( ) { return this . tree ; }
va	8	@ XmlElementDecl ( namespace = "http://api.soap.mytxtbuddy.com/" , name = "removeContactsFromGroupResponse" ) public JAXBElement < RemoveContactsFromGroupResponse > createRemoveContactsFromGroupResponse ( RemoveContactsFromGroupResponse value ) { return new JAXBElement < RemoveContactsFromGroupResponse > ( _RemoveContactsFromGroupResponse_QNAME , RemoveContactsFromGroupResponse . class , null , value ) ; }
va	4	public List < List < CellModel >> getColumnValues ( ) { return columnValues ; }
va	8	public double lengthDistance ( GameEntity other ) { double y = getCenterY ( ) - other . getCCenterY ( ) ; return Math . abs ( y ) ; }
va	7	@ Override public int getLayoutRowPadding ( ) { return Integer . valueOf ( this . jTextField_layout_row_padding . getText ( ) . replace ( "px" , "" ) ) ; }
va	2	public boolean finishWrite ( ) { return this . fileSizeLeft > 0 ? false : true ; }
va	9	@ Override public void moveTo ( float x0 , float y0 ) { out . moveTo ( x0 * mxx + y0 * mxy , x0 * myx + y0 * myy ) ; }
va	8	public static int count123 ( String str ) { int szCount = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { char c = str . charAt ( i ) ; if ( c >= 0 && c <= 9 ) { szCount ++ ; } } return szCount ; }
va	5	public void put ( K toPut ) { evicted . remove ( toPut ) ; }
va	8	public TreeNode deserialize ( String data ) { if ( data . equals ( "NULL" ) ) return null ; String [ ] nodes = data . split ( " " ) ; return rebuild ( nodes , new int [ ] { 0 } ) ; }
va	6	@ Override public List < CorpusUnit > getSentences ( ) { return Collections . singletonList ( ( CorpusUnit ) this ) ; }
va	3	public void setTelefone ( String telefone ) { this . telefone = telefone ; }
va	9	public Visitor ( int myId ) { this . id = myId ; string2State = new HashMap < String , State > ( ) ; acceptStates = new HashSet < String > ( ) ; }
va	7	public boolean isPlaying ( ) { try { return player . isPlaying ( ) ; } catch ( SlimConnectionException e ) { System . out . println ( "Failed to get isPlaying with " + e ) ; return false ; } }
va	1	public boolean isContainer ( ) { return false ; }
va	1	public void printInvoices ( ) { }
va	3	public String getSharename ( ) { return sharename ; }
va	9	public double perplexity ( Distribution base , Distribution actual ) { double result = 0 ; double crossEntropy = this . crossEntropy ( base , actual ) ; result = Math . pow ( ENTROPY_BASE , crossEntropy ) ; return result ; }
va	10	public ScriptTokenizer ( ) { whitespaceReader = new AbstractTokenReader ( ) { @ Override protected TokenType getType ( ) { return null ; } @ Override protected boolean belongs ( int c ) { return Character . isWhitespace ( c ) ; } } ; }
va	8	@ Override public void set ( long index , long value ) { assert index < size : index ; ohm . putLong ( index * ELEMENT_LENGTH , value ) ; }
va	3	public String getSku ( ) { return sku ; }
va	3	public int getCurrentRound ( ) { return getFinalRound ( currentMatch ) ; }
va	8	public static void getNum ( ) { long n = 2 * 3 * 5 * 7 * 11 ; while ( true ) { long sq = n * n ; int count = 2 ; for ( int i = 2 ; i < n ; i ++ ) { if ( sq % i == 0 ) { count ++ ; } } if ( count > 1000 ) { System . out . println ( n + " " + count ) ; break ; } n += 2 * 3 * 5 * 7 * 11 ; } }
va	9	public HourlyEmployee ( String first , String last , String ssn , double hourlyWage , double hoursWorked ) { super ( first , last , ssn ) ; setWage ( hourlyWage ) ; setHours ( hoursWorked ) ; }
va	4	public void setProxyUsername ( String paramString ) { this . proxyUsername = paramString ; }
va	8	private static File getOutputDir ( ) { File file = new File ( properties . getProperty ( "usecase.outputdir" ) + "/class" ) ; if ( ! file . mkdirs ( ) && ! file . exists ( ) ) { throw new RuntimeException ( "Fail to create output directory at " + file ) ; } return file ; }
va	2	public void setNoOfAssistants ( int noOfAssistants ) { this . noOfAssistants = noOfAssistants ; }
va	10	public void print_text_by_css ( String element ) { String actual_text = driver . findElement ( By . cssSelector ( element ) ) . getText ( ) ; Print_out ( "" ) ; Print_out ( actual_text ) ; }
va	8	@ Override public Image getImage ( ) { if ( endPortal == this ) return grey ; return isOrange ? orange : blue ; }
va	4	public StatusModel newStatus ( ) { StatusModel sta = new StatusModel ( ) ; this . statusmodel = sta ; return sta ; }
va	7	public void windowClosing ( WindowEvent e ) { System . out . println ( "Window closed; exiting." ) ; closeWindow ( ) ; }
va	4	@ AfterClass public static void testCleanup ( ) { JediORMEngine . droptables ( ) ; }
va	2	public static int hashCode ( boolean bool ) { return ( bool ? 1231 : 1237 ) ; }
va	8	public void writeArrayHeader ( int elementCount ) throws IllegalArgumentException , IOException { if ( elementCount < 0 ) throw new IllegalArgumentException ( "elementCount [" + elementCount + "] must be >= 0." ) ; if ( elementCount < 256 ) { write ( ARRAY_COMPACT ) ; write ( elementCount ) ; } else { write ( ARRAY ) ; writeInt32Impl ( elementCount ) ; } }
va	7	@ Override public int hashCode ( ) { int result = con != null ? con . hashCode ( ) : 0 ; result = 31 * result + ( type != null ? type . hashCode ( ) : 0 ) ; result = 31 * result + ( var != null ? var . hashCode ( ) : 0 ) ; result = 31 * result + ( proc != null ? proc . hashCode ( ) : 0 ) ; return result ; }
va	9	AccessToken ( String str ) { super ( str ) ; screenName = getParameter ( "screen_name" ) ; String sUserId = getParameter ( "user_id" ) ; if ( sUserId != null ) userId = Integer . parseInt ( sUserId ) ; }
va	2	public ContactInfo createContactInfo ( ) { return new ContactInfo ( ) ; }
va	10	public void create ( ) { mesh = new Mesh ( vertices , indices ) ; for ( int i = 0 ; i < grassPatches . size ( ) ; i ++ ) grassPatches . get ( i ) . create ( ) ; vertices = null ; indices = null ; isCreated = true ; }
va	4	public oGraphType ( ) { setName ( "Typ wykresu" , "Graph type" ) ; addOpt ( "ciag\u0142y" , "continuous" ) ; addOpt ( "punktowy" , "punctual" ) ; addAsk ( ) ; }
va	6	private void valider ( java . awt . event . ActionEvent evt ) { }
va	9	@ Override public String toCSV ( ) { String var = String . valueOf ( getSpeed ( ) ) ; var += ";" + 0 ; var += ";" + distance ; var += ";" + timeaccel ; var += ";" + fanspeed ; return var ; }
va	7	public RowSelection ( int startPage , int pageSize , String order ) { this . startPage = startPage ; this . pageSize = pageSize ; this . firstRow = startPage * pageSize ; this . lastRow = firstRow + pageSize ; this . order = order ; }
va	2	public int [ ] getPix ( ) { return pix ; }
va	9	public void testAsSet ( ) { String input = "3 2 1 2 3" ; Set < String > three = Strings . asSet ( input ) ; assert three . size ( ) == 3 : "Expected set from \"" + input + "\" to contain 3 values" ; assert three . contains ( "1" ) : input + ": expected to contain \"1\"" ; assert three . contains ( "2" ) : input + ": expected to contain \"2\"" ; assert three . contains ( "3" ) : input + ": expected to contain \"3\"" ; }
va	1	public static int findNextLargestNumber ( ) { return 1 ; }
va	5	@ Override public String toString ( ) { return Integer . toString ( data ) ; }
va	9	static int findNonWhitespace ( String sb , int offset ) { int result ; for ( result = offset ; result < sb . length ( ) ; result ++ ) { if ( ! Character . isWhitespace ( sb . charAt ( result ) ) ) { break ; } } return result ; }
va	9	@ Override protected void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { processRequest ( request , response ) ; }
va	6	public void reset ( ) { for ( int i = 0 ; i < internalTables . length ; i ++ ) internalTables [ i ] . truncate ( internalInitialindexes [ i ] ) ; }
va	3	@ Override public float getError ( ) { return w . getError ( ) ; }
va	6	@ Override public NodeRelation getRelation ( int first , int other ) { return store . getRelation ( first , other ) ; }
va	2	public Journal build ( ) { return new Journal ( this ) ; }
va	1	public StyleProp ( ) { this ( null , null , null ) ; }
va	1	public MapLayersChangeEvent ( ) { super ( ) ; }
va	7	protected byte getMessageInfo ( ) { byte info = ( byte ) ( message . getQos ( ) << 1 ) ; if ( message . isRetained ( ) ) { info |= 01 ; } if ( message . isDuplicate ( ) || duplicate ) { info |= 08 ; } return info ; }
va	6	@ Test ( expected = CashOfficeManipulationException . class ) public void shouldRaiseExceptionWhenSaleNullTicket ( ) { new CashOffice ( ) . saleTicket ( null ) ; }
va	3	public String getPostalCode ( ) { return postalCode ; }
va	6	@ Override public String toString ( ) { return power + "/" + attackDelay + "/" + health ; }
va	3	public String getColor ( ) { return color ; }
va	6	public Queen ( int x , int y , boolean c , int iD , boolean s ) { super ( x , y , c , iD , s ) ; }
va	9	private void determineAdvantageOrDeuce ( Player player ) { Player opponent = getOpponent ( player ) ; if ( opponent . getScore ( ) == ADVANTAGE ) { opponent . setScore ( DEUCE ) ; } else { player . setScore ( ADVANTAGE ) ; } }
va	10	@ Override public void init ( Headquater hq ) { super . init ( hq ) ; bests = new HashMap < boolean , Map < Playable , Playable >> ( ) ; bests . put ( true , new HashMap < Playable , Playable > ( ) ) ; bests . put ( false , new HashMap < Playable , Playable > ( ) ) ; primaryTable = new HashMap < Playable , Playable > ( ) ; }
va	6	@ Override public void gameFinished ( Player winnerPlayer , List < Player > players ) { }
va	1	public boolean availableForSwamp ( ) { return true ; }
va	6	public int getFibonacci ( int n ) { int i = 0 ; int j = 1 ; int fib = 0 ; while ( fib < n ) { fib = i + j ; i = j ; j = fib ; } if ( ! isPrime ( fib ) ) { while ( ! isPrime ( fib ) ) { fib = i + j ; i = j ; j = fib ; } } return fib ; }
va	9	public static < T > T newInstance ( String type , class < T > cast ) throws ClassNotFoundException , InstantiationException , IllegalAccessException { return forName ( type , cast ) . newInstance ( ) ; }
va	9	public void addEdge ( Edge e ) { int v = e . either ( ) , w = e . other ( v ) ; adj [ v ] . add ( e ) ; adj [ w ] . add ( e ) ; }
va	2	public void setInitialPrice ( double initialPrice ) { this . initialPrice = initialPrice ; }
va	6	public void log ( final Object data ) { if ( timeStamped ) { this . log ( logType , data ) ; } else { this . logTimeless ( logType , data ) ; } }
va	9	public static void main ( String [ ] args ) { String str1 = "string" ; String str2 = new String ( "string" ) ; System . out . println ( str1 . intern ( ) ) ; System . out . println ( str1 . intern ( ) == str2 . intern ( ) ? "the same" : "not the same" ) ; }
va	8	public int maxProfit ( final int length ) { int profit = ( length <= prices . size ( ) ) ? prices . get ( length - 1 ) : 0 ; for ( int i = 1 ; i < length ; i ++ ) { int priceWhenCut = maxProfit ( i ) + maxProfit ( length - i ) ; if ( profit < priceWhenCut ) { profit = priceWhenCut ; } } return profit ; }
va	1	public int getColumnCount ( ) { return 2 ; }
va	6	protected Variable ( Pipe defaultPipe ) { this . label = defaultPipe . getLabel ( ) ; this . type = defaultPipe . type ( ) ; this . defaultPipe = defaultPipe ; }
va	9	public String query ( String sparql , int softLimit ) throws MalformedURLException , ProtocolException , IOException { return query ( sparql , OutputFormat . SPARQL_XML , softLimit ) ; }
va	10	public void test_asList ( ) { Stack < String > stack = new Stack < String > ( ) ; stack . add ( "aaa" ) ; stack . add ( "bbb" ) ; stack . add ( "ccc" ) ; List < String > list = stack ; assertEquals ( "aaa" , list . get ( 0 ) ) ; assertEquals ( "bbb" , list . get ( 1 ) ) ; assertEquals ( "ccc" , list . get ( 2 ) ) ; assertEquals ( 3 , stack . size ( ) ) ; }
va	1	static final public void enable_tracing ( ) { }
va	6	public HtmlRender ( Cube < T > cube ) { super ( cube ) ; this . comparator = new NaturalKeyComparator ( ) ; }
va	5	public Entry ( K key , V value ) { this . key = key ; this . value = value ; }
va	7	protected final GenericUrl set ( final String fieldName , final Object value ) { return url . set ( fieldName , value ) ; }
va	3	SHE ( ) { configured = false ; blockNo = 0 ; }
va	1	protected Professor ( ) { }
va	5	public void addPlotter ( final Plotter plotter ) { plotters . add ( plotter ) ; }
va	4	@ Override public int getRowCount ( ) { return devices . size ( ) ; }
va	2	public void setCineplexCode ( int cineplexCode ) { this . cineplexCode = cineplexCode ; }
va	10	public void shutDown ( ) { try { valid = false ; if ( theConnection != null ) { theConnection . close ( ) ; theConnection = null ; } } catch ( Exception e ) { CLogError . logError ( errfile , errecho , "CDbConnect.shutDown" , e ) ; } }
va	10	private void jTFUsuarioKeyPressed ( java . awt . event . KeyEvent evt ) { if ( evt . getKeyCode ( ) == KeyEvent . VK_ENTER ) { jPFSenha . requestFocusInWindow ( ) ; } }
va	6	private void formMouseMoved ( java . awt . event . MouseEvent evt ) { }
va	2	@ Override public boolean isValidating ( ) { return false ; }
va	2	public int getNumWant ( ) { return numWant ; }
va	3	public void setHandler ( ClientHandler handler ) { this . handler = handler ; }
va	8	@ Test public void testDouble ( ) throws Exception { PrimitiveUtils . testDouble ( 2.7d , SUBJECT , 2.7d , 3.2d , 4.1d ) ; }
va	7	@ Override public org . w3c . dom . Document getDocument ( ) { return w3cdoc ; }
va	6	private void close ( ) { try { if ( resultSet != null ) { resultSet . close ( ) ; } if ( statement != null ) { statement . close ( ) ; } if ( connect != null ) { connect . close ( ) ; } } catch ( Exception e ) { } }
va	7	public String depthFirst ( Object searchData ) { this . searchData = searchData ; v = new DataListener ( searchData ) ; return getDepthFirstS ( ) ; }
va	9	private int getPlayerSize ( int index ) { int iPlayerFactorIndex = 0 ; if ( index == 0 ) iPlayerFactorIndex = getRegister ( NUSIZ0 ) & 07 ; else if ( index == 1 ) iPlayerFactorIndex = getRegister ( NUSIZ1 ) & 07 ; else return 1 ; switch ( iPlayerFactorIndex ) { case 0 : case 1 : case 2 : case 3 : case 4 : case 6 : return PLAYER_SINGLE_SIZE ; case 5 : return PLAYER_DOUBLE_SIZE ; case 7 : return PLAYER_QUAD_SIZE ; } return 1 ; }
va	7	public AcercaDe ( java . awt . Frame parent , boolean modal ) { super ( parent , modal ) ; initComponents ( ) ; }
va	9	@ Override protected void prepareProblemLaTeX ( ) { final String tmp = Utils . prepareFractionsMath ( problemPlaintext ) ; problemLaTeX = Utils . prepareDisplayMath ( tmp ) ; }
va	5	public void setBodyTokens ( Vector < Integer > bodyTokens ) { _bodyTokens = bodyTokens ; }
va	8	public void setBaseInfo ( String username , int rank , int submitted , int solved , int submissions , int accepted ) { this . username = username ; this . rank = rank ; this . submitted = submitted ; this . solved = solved ; this . submissions = submissions ; this . accepted = accepted ; }
va	6	public void registerObserver ( Observer o ) { if ( ! _Observers . contains ( o ) ) _Observers . add ( o ) ; }
va	4	public Position getPosition ( ) { return new Position ( x , y ) ; }
va	5	public void setDate ( Date date ) { this . date = date ; console . refreshEntry ( this ) ; }
va	10	public double describe ( GameState state , Player player ) { double dominance = dom . describe ( state , player ) ; double diceDominance = diceDom . describe ( state , player ) ; return ( diceParam * ( 1 - ( dominance / 2 + 0.5 ) * ( diceDominance / 2 + 0.5 ) ) + ( dominance / 2 + 0.5 ) - 0.5 ) * 2.0 ; }
va	6	@ OneToMany ( mappedBy = "stationByIdStation1" ) public Collection < Way > getWaysById ( ) { return waysById ; }
va	10	@ Test public void testBorrarElemento2 ( ) { int elemento = 8 ; arbolito . borrarElemento ( elemento ) ; String expected = "10316471413" ; String actual = arbolito . toString ( ) ; assertEquals ( expected , actual ) ; }
va	1	public boolean isEnabled ( ) { return super . isEnabled ( ) ; }
va	6	@ Override public String toString ( ) { return _service_id + " " + _date + " " + _exception_type + "\n" ; }
va	6	public boolean removeAlbum ( AlbumBean album ) { albums . remove ( album ) ; if ( albums . isEmpty ( ) ) { return true ; } return false ; }
va	4	public List < FileProxyListener > getFileListeners ( ) { return listeners ; }
va	4	@ Override public String toString ( ) { return textRepresentation ; }
va	1	public SavedEntityState ( ) { this ( null ) ; }
va	6	private void notifyObserver ( ) { if ( observer != null ) { observer . setText ( Integer . toString ( viewSize ) ) ; } }
va	8	public Object get ( String key ) throws JSONException { if ( key == null ) { throw new JSONException ( "Null key." ) ; } Object object = opt ( key ) ; if ( object == null ) { throw new JSONException ( "JSONObject[" + quote ( key ) + "] not found." ) ; } return object ; }
va	1	public Group ( ) { }
va	10	@ Override protected Map < String , Object > getSaveData ( ) { Map < String , Object > mappings = super . getSaveData ( ) ; mappings . put ( "inheritence" , inheritence ) ; mappings . put ( "rank" , rank ) ; mappings . put ( "default" , defaultGroup ) ; return mappings ; }
va	1	public DefaultGlyph ( ) { }
va	6	@ Override public K floor ( K key ) { if ( key == null ) { throw new IllegalArgumentException ( ) ; } return key ( floor ( root , key ) ) ; }
va	6	@ Override public String toString ( ) { return "(" + x + "  " + y + "  " + z + ")" ; }
va	2	public void setInactive ( ) { active = false ; }
va	8	@ ManyToOne @ JoinColumn ( name = "id_way" , referencedColumnName = "id" , nullable = false ) public Way getWayByIdWay ( ) { return wayByIdWay ; }
va	3	public int getComponetType ( boolean disregardScrollPane ) { return TYPE_CONTAINER ; }
va	3	@ Test public void testGetSerialversionuid ( ) { fail ( "Not yet implemented" ) ; }
va	9	@ Test public void testDeleteByPhysicalClzObject ( ) { int i = dao . deleteByPhysical ( UserNotifyPO . class , 1 ) ; System . out . println ( "size:" + i ) ; }
va	3	public boolean isEmpty ( ) { return ( id == null ) && ( name == null ) ; }
va	10	public boolean change ( int key , E data ) { Node current = root ; while ( current . iData != key ) { if ( key < current . iData ) current = current . leftChild ; else current = current . rightChild ; if ( current == null ) return false ; } current . data = data ; return true ; }
va	10	public < T > boolean isSameIterable ( Iterable < T > obj1 , Iterable < T > obj2 ) { this . hashmap . clear ( ) ; INEXACT_ALLOWED = false ; INEXACT_COMPARED = false ; return isSameIterablePrivate ( obj1 , obj2 ) ; }
va	5	public Set < Symbol > bases ( ) { return Collections . emptySet ( ) ; }
va	4	public static UnidadNombrada construirStubNombrado ( String nombre ) { return new UnidadNombrada ( nombre ) ; }
va	10	@ Override public String toString ( ) { return "Triangle{" + "p1=" + getP1 ( ) + "p2=" + getP2 ( ) + "p3=" + p3 + "  sideA=" + sideA + "  sideB=" + sideB + "  sideC=" + sideC + } ; }
va	1	public Node ( ) { }
va	7	protected void readScaleFactors ( ) { for ( int i = 0 ; i < num_subbands ; ++ i ) subbands [ i ] . read_scalefactor ( stream , header ) ; }
va	10	default Function < T , R > curry1 ( U u ) { return new Function < T , R > ( ) { @ Override public R apply ( T t ) { return BiFunctionWithCurrying . this . apply ( t , u ) ; } } ; }
va	7	@ SuppressWarnings ( "unchecked" ) public MaxHeapImpl ( ) { heap = ( T [ ] ) new Comparable [ INITIAL_SIZE ] ; size = 0 ; }
va	3	public Player getPlayer ( ) { return player ; }
va	6	@ Override public void actionPerformed ( ActionEvent ae ) { renderer . unpauseScene ( ) ; }
va	1	public MoreExceptions ( ) { }
va	1	protected void layoutRootPane ( ) { }
va	1	public void ReadLine ( ) { }
va	10	@ Override public < T extends Resource > T getOrLoadResource ( class < ? extends Resource > clazz , String resourceId , T defaultResource ) { try { return getOrLoadResource ( clazz , resourceId ) ; } catch ( MapletResourceLoadException e ) { return defaultResource ; } }
va	10	private static boolean isUnreserved ( byte b ) { return ( b >= a && b <= z ) || ( b >= A && b <= Z ) || ( b >= 0 && b <= 9 ) || b == . || b == - || b == _ || b == ~ ; }
va	8	@ Test public void testNextPosition ( ) { for ( int i = 0 ; i <= 2 ; i ++ ) { assertThat ( "Next position after one byte value at " + i , ByteAlignUtil . nextPosition ( i , shortList ) , is ( i + 1 ) ) ; } assertThat ( "Next position after multi-byte value at 5" , ByteAlignUtil . nextPosition ( 5 , shortList ) , is ( 7 ) ) ; assertThat ( "Next position after multi-byte value at 8" , ByteAlignUtil . nextPosition ( 8 , shortList ) , is ( 11 ) ) ; }
va	10	public void removeBlob ( Geometry g ) { for ( int n = 0 ; n < nGeometries ; n ++ ) if ( geometries [ n ] == g ) { Blob blob = ( Blob ) g . clientObject ; g . clientObject = null ; -- nGeometries ; geometries [ n ] = geometries [ nGeometries ] ; blobs [ n ] = blobs [ nGeometries ] ; geometries [ nGeometries ] = null ; blobs [ nGeometries ] = null ; break ; } }
va	10	@ Test public void breadthFirstCycle ( ) { final Iterable < String > traverser = Traversals . breadthFirst ( "A" , adjacencyFor ( cycle ) ) ; assertTraversalBegins ( traverser , "A" , "B" , "C" , "A" , "B" ) ; }
va	5	public long get ( long index ) { if ( ! map . containsKey ( index ) ) throw new ArrayIndexOutOfBoundsException ( "index is " + index ) ; return map . get ( index ) ; }
va	3	public String getPass ( ) { return pass ; }
va	9	@ Override public String toString ( ) { return "MultipleWall [getX()=" + getX ( ) + "  getY()=" + getY ( ) + "  blockWidth=" + wallWidth + "  getHeight()=" + getHeight ( ) + "  getType()=" + getType ( ) + "  getSprite()=" + getSprite ( ) + "]" ; }
va	6	public boolean rightClick ( PositionOrUnit target , boolean shiftQueueCommand ) { return rightClick_native ( pointer , target , shiftQueueCommand ) ; }
va	6	void checkNotLinked ( ) { if ( min != null && min . isLinkedDeep ( ) || pref != null && pref . isLinkedDeep ( ) || max != null && max . isLinkedDeep ( ) ) throw new IllegalArgumentException ( "Size may not contain links" ) ; }
va	4	public void setView ( View tw ) { view = tw ; }
va	4	@ JsonProperty ( "label" ) public void setLabel ( String label ) { this . label = label ; }
va	7	public static CommandLine newExternalCommand ( String svnPath , String ... args ) { String [ ] commandAndArgs = concat ( new String [ ] { svnPath , "--non-interactive" , "--trust-server-cert" } , args ) ; return new CommandLine ( commandAndArgs ) ; }
va	8	public synchronized String printSummary ( ) { String res = "" ; for ( Object o : clients ) { Client c = ( Client ) o ; res += c . printSummary ( ) + "\n\n\n" ; } return res ; }
va	10	@ EventHandler ( ignoreCancelled = true ) public void onPlayerCommandPreprocess ( PlayerCommandPreprocessEvent event ) { if ( commandRegistration . dispatch ( event . getPlayer ( ) , event . getMessage ( ) ) ) { event . setCancelled ( true ) ; } }
va	4	public DeltaRule setLearningRate ( double learningRate ) { if ( learningRate <= 0 ) throw new IllegalArgumentException ( "Must be greater than 0" ) ; this . learningRate = learningRate ; return this ; }
va	3	public Calendar getFechaInicio ( ) { return fechaInicio ; }
va	6	public Class6 ( ) { anIntArray106 = new int [ 5 ] ; anIntArray107 = new int [ 5 ] ; anIntArray108 = new int [ 5 ] ; anInt110 = 100 ; anInt113 = 500 ; }
va	5	public Game ( CurrentGameState cgs , GameHandler gameHandler ) { this . cgs = cgs ; this . gameHandler = gameHandler ; }
va	5	public Artist getArtistById ( ) throws SQLException { return adb . getArtistId ( ) ; }
va	3	public void clearFeedback ( ) { errorCollector . clear ( ) ; }
va	10	public void test_getTypeFromNameAndType_MethodRef_EmptyClass ( ) throws Exception { final ConstantPool constantPool = getEmptyClassData ( ) ; final String value = "()V" ; assertEquals ( "getTypeFromNameAndType( 13 )" , constantPool . getTypeFromNameAndType ( 13 ) , value ) ; assertEquals ( "strings[5] post get" , value , constantPool . strings [ 5 ] ) ; }
va	10	public void addMessage ( String tmp ) { message . add ( tmp ) ; if ( message . size ( ) > 4 ) { message . remove ( 0 ) ; } Uiswt . getInstance ( ) . updateRollingLabel ( ) ; }
va	4	@ Override public int hashCode ( ) { return row ^ col ; }
va	1	public Paciente ( ) { }
va	3	public ConcreteDecortor_AddAmount ( Component_News _Component_News ) { super ( _Component_News ) ; }
va	4	public static void main ( String [ ] args ) { startEmbededSeleniumServer ( ) ; }
va	6	@ Override public String toString ( ) { return "Network Device: " + this . getNetworkName ( ) + " - " + printArray ( getNames ( ) ) ; }
va	1	public Person ( ) { }
va	8	public String getColumnName ( int index ) { String result = null ; if ( this . columnNames . size ( ) > index ) { result = this . columnNames . get ( index ) . getName ( ) ; } else { result = "Remove" ; } return result ; }
va	2	@ Override public float getZ ( ) { return 0 ; }
va	8	@ Override public boolean equals ( Object obj ) { boolean egale = false ; if ( this . getTitre ( ) . equals ( ( ( Stage ) obj ) . getTitre ( ) ) ) { if ( this . getReg ( ) . equals ( ( ( Stage ) obj ) . getReg ( ) ) ) { egale = true ; } } return egale ; }
va	8	@ XmlElementDecl ( namespace = "" , name = "purchase-order-expiration-date" ) public JAXBElement < String > createPurchaseOrderExpirationDate ( String value ) { return new JAXBElement < String > ( _PurchaseOrderExpirationDate_QNAME , String . class , null , value ) ; }
va	9	public Developer [ ] getDevelopersOnBoard ( ) { ArrayList < Developer > temp = new ArrayList < Developer > ( ) ; for ( int i = 0 ; i < developersArray . length ; i ++ ) { if ( developersArray [ i ] != null ) { temp . add ( developersArray [ i ] ) ; } } return temp . toArray ( new Developer [ 1 ] ) ; }
va	10	public static State [ ] copyOf ( State [ ] original , int newLength ) { State [ ] copy = new State [ newLength ] ; System . arraycopy ( original , 0 , copy , 0 , Math . min ( original . length , newLength ) ) ; return copy ; }
va	4	@ Test public void testDiskTableLargeBlocks ( ) throws IOException { testTable ( 1 << 15 ) ; }
va	1	public ProtectedResourceSwingClient ( ) { }
va	3	public static double real ( Complex x ) { return x . real ; }
va	7	public void exit ( ) { try { driver . disconnect ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } System . exit ( 0 ) ; }
va	6	@ Override public void write ( byte [ ] b , int off , int len ) throws IOException { }
va	9	public static String quote ( String string ) { StringWriter sw = new StringWriter ( ) ; synchronized ( sw . getBuffer ( ) ) { try { return quote ( string , sw ) . toString ( ) ; } catch ( IOException ignored ) { return "" ; } } }
va	2	public boolean repeat ( ) { return this . restart ; }
va	8	public void Register ( int x , int y ) { loc [ x ] [ y ] = IndoorTiles . WallEast ; world [ x ] [ y ] = loc [ x ] [ y ] ; Solid [ x ] [ y ] = true ; }
va	5	static byte [ ] md5sum ( byte [ ] b ) { return Sys . getMessageDigest ( "MD5" ) . digest ( b ) ; }
va	10	public TxtInfo ( final String toRend , final int color , final short x , final short y , final boolean small ) { this . txt = toRend ; col = color ; this . x = x ; this . y = y ; this . useSmall = small ; }
va	8	public Tree parseIdentifier ( ) { if ( ! peek ( kIdentifier ) ) { return expected ( kIdentifier ) ; } return init ( new Identifier ( parseName ( ) ) ) ; }
va	9	@ Test public void ShouldGetWordFor100 ( ) { int number = 100 ; NumberToWordTranslator translator = new NumberToWordTranslator ( ) ; String result = translator . GetWord ( number ) ; assert . assertEquals ( "onehundred" , result ) ; }
va	4	public void setMaxId ( Integer max ) { this . maxId = max ; }
va	6	public SizeTween ( int duration , double dw , double dh ) { this ( duration , Interpolation . LINEAR , dw , dh ) ; }
va	7	@ Override public File getRecentFolder ( ) { File cache = checkCache ( "RECENT" ) ; if ( cache != null ) { return cache ; } File addCache = addCache ( "RECENT" , new DefaultRecentFolder ( ) ) ; return addCache ; }
va	5	public String GenerateLinkID ( ) { return DateUtil . GetTimeString ( ) + getTTenNum ( ) ; }
va	9	public double distanceSquared ( Vector3d v ) { double dx = x - v . x ; double dy = y - v . y ; double dz = z - v . z ; return ( dx * dx + dy * dy + dz * dz ) ; }
va	2	public int getTimeGreen ( ) { return timeGreen ; }
va	7	public ReportField ( BufferedWriter bw , Field field , ReportLine reportLine ) { this . bw = bw ; this . field = field ; this . reportLine = reportLine ; }
va	8	@ Test public void test_getInstance_setNull ( ) { UnlockPackageHandler . setInstance ( null ) ; UnlockPackageHandler handler = UnlockPackageHandler . getInstance ( ) ; assert . assertNotNull ( handler ) ; assert . assertTrue ( handler instanceof UnlockPackageHandler ) ; }
va	6	public void setIdmedicamentos ( Integer idmedicamentos ) { Integer oldIdmedicamentos = this . idmedicamentos ; this . idmedicamentos = idmedicamentos ; changeSupport . firePropertyChange ( "idmedicamentos" , oldIdmedicamentos , idmedicamentos ) ; }
va	1	public boolean hasSelectedBoat ( ) { return hasSelectedBoat ; }
va	9	public GUI_GestorInfo ( GestorInfoClient cliente ) { this . cliente = cliente ; initComponents ( ) ; this . setLocationRelativeTo ( null ) ; btnGroup . add ( rbtnOpcion1 ) ; btnGroup . add ( rbtnOpcion2 ) ; }
va	4	public GestionLogin ( ) { Conexion . GetInstancia ( ) . CadenaConexion ( ) ; }
va	1	private CushyDBUtils ( ) { }
va	7	@ Override public void putAll ( Map < ? extends K , ? extends V > m ) { throw new UnsupportedOperationException ( "Cannot modify OrderedSubsetUnmodifiableMap" ) ; }
va	9	protected void drawLine ( Graphics pen , Location start , Location finish ) { start = translateCoordinates ( start ) ; finish = translateCoordinates ( finish ) ; pen . drawLine ( ( int ) start . getX ( ) , ( int ) start . getY ( ) , ( int ) finish . getX ( ) , ( int ) finish . getY ( ) ) ; }
va	10	@ Override public Collection < DomainEvent > getChanges ( ) { final LinkedList < DomainEvent > changes = new LinkedList < DomainEvent > ( ) ; changes . addAll ( super . getChanges ( ) ) ; for ( final EventProvider eventProvider : childEventProviders ) { changes . addAll ( eventProvider . getChanges ( ) ) ; } return changes ; }
va	2	public void setLife ( int life ) { this . life = life ; }
va	7	static public String readBlock ( BufferedReader r ) throws IOException { String line = readLine ( r ) ; return line == null ? null : readBlock ( r , line ) ; }
va	10	@ Test public void shouldHaveProperNumOfChildren ( ) { HierarchyTreeNode binaryTreeNode = new HierarchyTreeNode ( "TTT" , null ) ; binaryTreeNode . addNode ( "QQQ" ) ; binaryTreeNode . addNode ( "QQQ1" ) ; binaryTreeNode . addNode ( "QQQ2" ) ; org . junit . assert . assertTrue ( binaryTreeNode . getMaxChildrenCount ( ) >= binaryTreeNode . getChildrenCount ( ) ) ; }
va	8	public String getNodePath ( DefaultMutableTreeNode node ) { String path = "" ; for ( int i = 0 ; i < ( node . getPath ( ) . length ) ; i ++ ) { path += "/" + node . getPath ( ) [ i ] ; } return path ; }
va	3	public AppTest ( String testName ) { super ( testName ) ; }
va	1	public boolean isVirtual ( ) { return false ; }
va	10	public void retirerUnePublicationutilisateur ( Utilisateur utilisateur , Publication publication ) throws RemoteException { getPublications ( ) . get ( indexPublication ( publication ) ) . retirerAccesUtilisateur ( utilisateur ) ; }
va	2	public int getRenown ( ) { return renown ; }
va	7	public long optLong ( String key , long defaultValue ) { try { return getLong ( key ) ; } catch ( Exception e ) { return defaultValue ; } }
va	2	public void handlePreGameData ( int [ ] data ) { }
va	3	public SecurityLevel getSecurityLevel ( ) { return securityLevel ; }
va	4	public static final StringParser istr ( final char c ) { return istring ( "" + c ) ; }
va	5	@ Override public void run ( ) { int number = Integer . parseInt ( "INT" ) ; }
va	2	public static int getClock ( ) { return Clock ; }
va	1	public ColumnSubset ( ) { }
va	6	public static void updateQuestionnaire ( Questionnaire questionnaire ) { QuestionnaireDao dao = new QuestionnaireDaoMySQL ( ) ; dao . updateQuestionnaire ( questionnaire ) ; }
va	1	public FileGarbage ( ) { }
va	5	public LinkedList < correo > getListaCorreo ( String username ) { return null ; }
va	8	public static String encodeObject ( java . io . Serializable serializableObject ) throws java . io . IOException { return encodeObject ( serializableObject , NO_OPTIONS ) ; }
va	8	public static String getDescription ( int value ) { String description = "Large" ; switch ( value ) { case LARGE : description = "Large" ; break ; case MEDIUM : description = "Medium" ; break ; case SMALL : description = "Small" ; break ; case NONE : description = "None" ; break ; } return description ; }
va	2	public void setEndurance ( int endurance ) { this . endurance = endurance ; }
va	5	private static byte [ ] encode3to4 ( byte [ ] b4 , byte [ ] threeBytes , int numSigBytes , int options ) { encode3to4 ( threeBytes , 0 , numSigBytes , b4 , 0 , options ) ; return b4 ; }
va	10	public boolean getBoolean ( String key ) throws JSONException { Object object = this . get ( key ) ; if ( object . equals ( boolean . false ) || ( object instanceof String && ( ( String ) object ) . equalsIgnoreCase ( "false" ) ) ) { return false ; } else if ( object . equals ( boolean . true ) || ( object instanceof String && ( ( String ) object ) . equalsIgnoreCase ( "true" ) ) ) { return true ; } throw new JSONException ( "JSONObject[" + quote ( key ) + "] is not a Boolean." ) ; }
va	9	public void filterMin ( final boolean [ ] nonmatches , final int index , final double comparison ) { if ( ! double . isNaN ( comparison ) ) { final double [ ] values = this . minFields [ index ] ; for ( int i = 0 ; i < this . size ; i ++ ) { nonmatches [ i ] |= ( values [ i ] < comparison ) ; } } }
va	8	public com . palmergames . bukkit . TownyChat . Chat getTownyChatHook ( ) { return townychat . getHook ( ) ; }
va	2	public void setActivo ( boolean activo ) { this . activo = activo ; }
va	2	public void setValue ( int value ) { this . value = value ; }
va	3	public Packet06ToggleInvisible ( int uniqueID , boolean invisible ) { super ( 06 ) ; this . uniqueID = uniqueID ; this . invisible = invisible ; }
va	7	public void link ( final OtpErlangPid dest ) throws IOException { super . sendLink ( self . pid ( ) , dest ) ; }
va	10	protected void setUp ( ) throws XmlPullParserException { wrappedFactory = wrappedFactory . newInstance ( ) ; wrappedFactory . setFeature ( XmlPullParser . FEATURE_PROCESS_NAMESPACES , true ) ; assertEquals ( true , wrappedFactory . getFeature ( XmlPullParser . FEATURE_PROCESS_NAMESPACES ) ) ; assertEquals ( false , wrappedFactory . getFeature ( XmlPullParser . FEATURE_VALIDATION ) ) ; }
va	4	public void setInternalModel ( InternalBFieldModel value ) { this . internalModel = value ; }
va	4	@ Override protected Color [ ] getBarColors ( ) { Color [ ] colors = { new Color ( 0 , 0 , 245 ) , new Color ( 20 , 105 , 255 ) , new Color ( 0 , 0 , 245 ) , new Color ( 0 , 0 , 200 ) } ; return colors ; }
va	5	public Diff ( Operation operation , String text ) { this . operation = operation ; this . text = text ; }
va	6	public String getAbsolutePath ( Object pkg_obj , String filename ) { return el . getAbsolutePath ( pkg_obj , filename ) ; }
va	7	public BaseComputer ( Match match , Side side ) { this . side = side ; this . board = match . getBoard ( ) ; }
va	4	synchronized public boolean onSuccess ( ) { if ( done ) return false ; done = true ; success = true ; onAction ( ) ; return true ; }
va	1	public IllegalPropertyAccessException ( ) { }
va	9	public synchronized Peer getNextActivePeer ( ) { for ( int i = ( getOrd ( ) + 1 ) % peers . size ( ) ; ; i = ( i + 1 ) % peers . size ( ) ) { Peer p = peers . get ( i ) ; if ( p . isActive ( ) ) { return p ; } } }
va	4	public QueueList ( ) { list = new LinkedList < Item > ( ) ; }
va	9	@ Override public void removeCanvas ( Canvas canvas ) { Validate . notNull ( canvas , "Canvas cannot be null." ) ; canvases . remove ( canvas ) ; render ( ) ; }
va	5	public String toString ( ) { return this . mode == d ? this . writer . toString ( ) : null ; }
va	7	public List < Accion > obtenerAccionesDePerfil ( int idPerfil ) { DAOPerfil perfilDAO = new DAOPerfil ( ) ; return perfilDAO . consultarAccionesDePerfil ( idPerfil ) ; }
va	9	@ SuppressWarnings ( "unchecked" ) public static < T > T getNativeRequest ( ServletRequest request , class < T > requiredType ) { if ( requiredType != null ) { if ( requiredType . isInstance ( request ) ) { return ( T ) request ; } else if ( request instanceof ServletRequestWrapper ) { return getNativeRequest ( ( ( ServletRequestWrapper ) request ) . getRequest ( ) , requiredType ) ; } } return null ; }
va	3	public static int getPlayer1Score ( ) { return m_player [ 0 ] . getScore ( ) ; }
va	2	public synchronized static boolean isVerbose ( ) { return verbose ; }
va	2	public int getRating ( ) { return rating ; }
va	2	public int getId ( ) { return id ; }
va	7	public static void printStringArray ( String [ ] words ) { System . out . println ( "======Results========" ) ; for ( String word : words ) { System . out . println ( word ) ; } System . out . println ( "=======END===========" ) ; }
va	6	public void incrementWinner ( ) throws TurnException { Player winner = this . getWinner ( ) ; winner . addTurnWin ( ) ; }
va	4	public void updateReturned ( int row ) { ordersTable . setValueAt ( "Yes" , row , 5 ) ; }
va	2	public void setIncominIndex ( int incominIndex ) { this . incominIndex = incominIndex ; }
va	1	public TableRowAuctionConverter ( ) { }
va	9	@ Override public boolean checkSpecificFilter ( String strToCheck ) { int i_value = Integer . valueOf ( strToCheck ) ; if ( i_value >= i_valueMin && i_value <= i_valueMax ) { return true ; } else { return false ; } }
va	2	public double getX ( ) { return x ; }
va	3	public Vec2i ( final int x , final int y ) { this . x = x ; this . y = y ; }
va	4	public void setB ( T2 obj ) { b = obj ; }
va	8	public void removeFromChatters ( String line ) { if ( chatters . getText ( ) . contains ( line ) ) { chatters . setText ( chatters . getText ( ) . replace ( line , "" ) + "\b" ) ; } }
va	9	public CreateNewButtonListener ( JTextArea testNameArea , JPanel mainPanel , CloudPanel cloudPanel , JComboBox testIdComboBox ) { this . testNameArea = testNameArea ; this . mainPanel = mainPanel ; this . cloudPanel = cloudPanel ; this . testIdComboBox = testIdComboBox ; }
va	5	public static boolean isBase64 ( byte octet ) { return octet == PAD || ( octet >= 0 && octet < base64ToInt . length && base64ToInt [ octet ] != - 1 ) ; }
va	7	public OAuth2AccessToken getOAuth2AccessTokenByCode ( String code ) throws TBlogException { return this . http . getOAuth2AccessTokenByCode ( code , redirectURL ) ; }
va	7	public static short longToUshort ( long longvalue ) { if ( longvalue > MAX_USHORT ) { throw new ByteOverflowException ( getExceptionText ( MAX_USHORT , longvalue ) ) ; } else if ( longvalue < 0 ) { throw new SignedNumberException ( getExceptionText ( MAX_USHORT , longvalue ) ) ; } return ( short ) ( longvalue & FFFF ) ; }
va	5	public static void main ( String [ ] args ) { AutomatedJudgeScript . begin ( ) ; }
va	3	public String asString ( ) { return name ; }
va	4	public V get ( K key ) { return get ( key , null ) ; }
va	10	@ Test public void testUnitaryArraySort ( ) { Integer [ ] arrayInt = new Integer [ ] { 2 } ; assert . assertTrue ( 1 == arrayInt . length ) ; assert . assertEquals ( "[2]" , toShow ( arrayInt ) ) ; selectionsortInt . sort ( arrayInt ) ; assert . assertEquals ( "[2]" , toShow ( arrayInt ) ) ; }
va	9	@ Test public void testLose ( ) { fillBoard ( ) ; assertFalse ( boardN . checkWin ( ) ) ; assertFalse ( boardN . winHorizontal ( ) ) ; assertFalse ( boardN . winVertical ( ) ) ; assertFalse ( boardN . winDiagonal ( ) ) ; }
va	10	void prExp ( ArrayExp e , int d ) { say ( "ArrayExp(" ) ; say ( e . typ . toString ( ) ) ; sayln ( " " ) ; prExp ( e . size , d + 1 ) ; sayln ( " " ) ; prExp ( e . init , d + 1 ) ; say ( ")" ) ; }
va	8	protected int findMacroBlock ( int position ) throws BTFMatrixErrorException { if ( position < 0 ) throw new BTFMatrixErrorException ( "Trying to find macro block containing index: " + position ) ; int block = 0 ; for ( int i = 1 ; i < macro_blocks . length ; i ++ ) { if ( position >= ( macro_blocks [ i ] . getStartingRow ( ) ) ) { block ++ ; } } if ( block >= macro_blocks . length ) throw new BTFMatrixErrorException ( "Ran out of macro blocks! position = " + position ) ; return block ; }
va	9	public boolean isAvailable ( ) { if ( state . equals ( FuState . AVAILABLE ) ) { return true ; } else { log . debug ( "Function Unit reserved by: " + opcodeOfReservingInst + "[" + orderOfReservingInst + "]" ) ; return false ; } }
va	1	public Text ( ) { }
va	10	public ForkAndJoinCKYParser ( List < Tree < String >> trainTrees , int threadNum ) { super ( trainTrees ) ; fjp = new ForkJoinPool ( threadNum ) ; ForkJoinCellProcessAction . parser = this ; }
va	2	public boolean isEmpty ( ) { return burst . isEmpty ( ) ; }
va	7	public static void registerTag ( class < ? extends NBTTag > clazz , byte type ) { classToIdMap . put ( clazz , type ) ; idToClassMap . put ( type , clazz ) ; }
va	5	private void zero ( ) throws JSONException { if ( probe ) { log ( 0 ) ; } write ( 0 , 1 ) ; }
va	9	@ Override protected String [ ] getNames ( ) { String [ ] ns = new String [ names . size ( ) ] ; for ( int i = 0 ; i < ns . length ; i ++ ) { ns [ i ] = names . get ( i ) ; } return ns ; }
va	5	public void setMobsTagged ( HashMap < Integer , String > mobsTagged ) { this . mobsTagged = mobsTagged ; }
va	3	public void keyTyped ( KeyEvent e ) { }
va	6	public void setRadius ( int r ) { this . radius = r ; getLocation ( ) . getWorld ( ) . lightUpdate ( ) ; }
va	10	public Rule Comment ( ) { return Sequence ( "/* " , OneOrMore ( FirstOf ( CharRange ( A , Z ) , CharRange ( a , z ) , CharRange ( 0 , 9 ) ) ) , "*/ " ) ; }
va	4	private RecordType ( String code , String name ) { this . code = code ; this . name = name ; }
va	1	public TestEntity2 ( ) { }
va	10	private boolean isRowEmpty ( int rowIndex ) { if ( rowIndex < getRowCount ( ) - 1 ) { return ( ( participantList . get ( rowIndex ) . getFirstName ( ) == null || participantList . get ( rowIndex ) . getFirstName ( ) . trim ( ) . equals ( "" ) ) && ( participantList . get ( rowIndex ) . getLastName ( ) == null || participantList . get ( rowIndex ) . getLastName ( ) . trim ( ) . equals ( "" ) ) ) ; } else { return ( ( lastRow . getFirstName ( ) == null || lastRow . getFirstName ( ) . trim ( ) . equals ( "" ) ) && ( lastRow . getLastName ( ) == null || lastRow . getLastName ( ) . trim ( ) . equals ( "" ) ) ) ; } }
va	1	private Pages ( ) { }
va	4	@ Override public Dough createDouch ( ) { return new ThinCrustDough ( ) ; }
va	10	public void setFromXmlString ( String s ) { if ( s . equals ( "horizontal" ) ) { setOrientation ( Orientations . horizontal ) ; return ; } if ( s . equals ( "90left" ) ) { setOrientation ( Orientations . left ) ; return ; } if ( s . equals ( "90right" ) ) { setOrientation ( Orientations . right ) ; return ; } if ( s . equals ( "180" ) ) { setOrientation ( Orientations . upside ) ; return ; } }
va	2	public Bank ( long bic ) { this . bic = bic ; }
va	5	public void addTask ( Task t ) { pc . newTask ( t ) ; }
va	4	public String toString ( ) { return "Pair[" + this . fst + " " + this . snd + "]" ; }
va	8	private String getIndexText ( int index , int colour ) { assert ( colour == PL_WHITE || colour == PL_BLACK ) ; assert ( index >= 0 && index <= 15 ) ; String result = "" ; result += col_text [ index % 8 ] ; if ( colour == PL_WHITE ) { result += ( index <= 7 ) ? "2" : "1" ; } if ( colour == PL_BLACK ) { result += ( index <= 7 ) ? "7" : "8" ; } return result ; }
va	2	public double getDefense ( ) { return defense ; }
va	1	public ObjectFactory ( ) { }
va	4	public static _Fields findByThriftId ( int fieldId ) { switch ( fieldId ) { case 0 : return SUCCESS ; default : return null ; } }
va	4	public ClasesCollection getClasesCollection ( ) { if ( clasesCollection == null ) { clasesCollection = new ClasesCollection ( ( IClient ) this ) ; } return clasesCollection ; }
va	2	private GOSUB ( int lineNumber ) { this . lineNumber = lineNumber ; }
va	2	public boolean isStarted ( ) { return started ; }
va	8	@ Test public void TestWrapWithoutGripClaw ( ) { ap . activateWrap ( ) ; assertTrue ( ap . isPartiallyTrapped ( ) ) ; assertTrue ( ap . isWrapped ( ) ) ; assertTrue ( ap . getWrapCount ( ) >= 2 ) ; assertTrue ( ap . getWrapCount ( ) < 6 ) ; }
va	5	@ Override public long getLong ( int offset ) { return col . getLong ( index , offset ) ; }
va	9	protected boolean in_grouping_b ( char [ ] s , int min , int max ) { if ( cursor <= limit_backward ) return false ; char ch = current . charAt ( cursor - 1 ) ; if ( ch > max || ch < min ) return false ; ch -= min ; if ( ( s [ ch >> 3 ] & ( 1 << ( ch & 7 ) ) ) == 0 ) return false ; cursor -- ; return true ; }
va	2	public void setListCnt ( int listCnt ) { this . listCnt = listCnt ; }
va	8	@ Override public boolean equals ( Object obj ) { if ( ! ( obj instanceof PositionRange ) ) { return false ; } PositionRange pr = ( PositionRange ) obj ; return ( upper == pr . upper ) & ( lower == pr . lower ) ; }
va	4	@ Override public void keyPressed ( int i , char c ) { }
va	10	public void testDelayCmd ( ) { roomCmd ( "neel" , "!play 5" ) ; roomCmd ( "id10t" , "!join" ) ; privCmd ( "bees" , "!botdelaycmd #channel !botdeal7 id10t" ) ; Game ata = gameManager . getGameByChan ( "#channel" ) ; assertEquals ( 1 , ata . m_delayedCommands . size ( ) ) ; }
va	8	@ EventHandler ( ignoreCancelled = true ) public void changeBlock ( EntityChangeBlockEvent ecbe ) { ecbe . setCancelled ( maybeReinforcementDamaged ( ecbe . getBlock ( ) ) ) ; }
va	9	@ Test public void ID3v2PopmFrameDataIsNotEqualOtherWithDifferentAddress ( ) throws Exception { ID3v2PopmFrameData iD3v2PopmFrameData1 = new ID3v2PopmFrameData ( false , 1 ) ; iD3v2PopmFrameData1 . setAddress ( "Address1" ) ; ID3v2PopmFrameData iD3v2PopmFrameData2 = new ID3v2PopmFrameData ( false , 1 ) ; iD3v2PopmFrameData1 . setAddress ( "Address2" ) ; assertFalse ( iD3v2PopmFrameData1 . equals ( iD3v2PopmFrameData2 ) ) ; }
va	3	public String getDataPag ( ) { return dataPag ; }
va	1	protected HttpContentDecoder ( ) { super ( ) ; }
va	2	public boolean isZ ( ) { return z ; }
va	10	private static Kurssi kurssiResultSetista ( ResultSet rs ) throws SQLException { String kurssinNimi = rs . getString ( "kurssi.nimi" ) ; int kurssinId = rs . getInt ( "kurssiID" ) ; return new Kurssi ( kurssinNimi , kurssinId ) ; }
va	8	@ Test public void GHOST_attacking_FIGHTING ( ) { assertEquals ( 1.0 , tc . getWeaknessResistance ( Type . GHOST , Type . FIGHTING ) , 0.0 ) ; }
va	5	@ Override public boolean contains ( K key ) { return get ( key ) != null ; }
va	10	@ Test public void whenEmptyAllDisconnected ( ) throws Exception { int N = 10 ; QuickUnionUF qu = new QuickUnionUF ( 10 ) ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = i + 1 ; j < N ; j ++ ) { assertFalse ( qu . connected ( i , j ) ) ; } } }
va	10	public void renderBackground ( Graphics g ) { Sprite bg = game . getGUIDecor ( ) . get ( BACKGROUND_TYPE ) ; renderSprite ( g , bg ) ; }
va	3	public void modifierNombreDeTourEtat ( int nombre ) { this . nombreDeTourEtat = nombre ; }
va	10	public void testLauseTotuudetAjaB ( ) { Lause lause = new Lause ( new Konjunktio ( a , b ) , propositiot ) ; totuusarvot = new int [ ] { 1 , 1 } ; assertEquals ( "" + true + " " + true + " " + true , lause . muodostaTotuusrivi ( totuusarvot ) ) ; totuusarvot = new int [ ] { 1 , 0 } ; assertEquals ( "" + true + " " + false + " " + false , lause . muodostaTotuusrivi ( totuusarvot ) ) ; totuusarvot = new int [ ] { 0 , 1 } ; assertEquals ( "" + false + " " + true + " " + false , lause . muodostaTotuusrivi ( totuusarvot ) ) ; totuusarvot = new int [ ] { 0 , 0 } ; assertEquals ( "" + false + " " + false + " " + false , lause . muodostaTotuusrivi ( totuusarvot ) ) ; }
va	9	@ Override public int hashCode ( ) { final int prime = 31 ; int result = 1 ; long temp ; temp = double . doubleToLongBits ( x ) ; result = prime * result + ( int ) ( temp ^ ( temp >>> 32 ) ) ; temp = double . doubleToLongBits ( y ) ; result = prime * result + ( int ) ( temp ^ ( temp >>> 32 ) ) ; temp = double . doubleToLongBits ( z ) ; result = prime * result + ( int ) ( temp ^ ( temp >>> 32 ) ) ; return result ; }
va	9	protected void setUp ( ) { td = new TestData ( ) ; ua = td . getUa ( ) ; testusers = td . createUserData ( ) ; ga = td . getGa ( ) ; }
va	1	public void getSessionUser ( ) { }
va	10	public String getOperacion ( ) { String strOperation = "" ; strOperation += Character . toUpperCase ( this . getClase ( ) . charAt ( 0 ) ) + this . getClase ( ) . substring ( 1 ) ; strOperation += Character . toUpperCase ( this . getMetodo ( ) . charAt ( 0 ) ) + this . getMetodo ( ) . substring ( 1 ) ; strOperation += this . getFase ( ) ; return strOperation ; }
va	10	public static List < List < Pos >> nqueenAll ( int n ) { if ( n <= 0 ) { throw new IllegalArgumentException ( "n must be positive." ) ; } Pos pos = new Pos ( n , n ) ; List < Pos > queens = new ArrayList < NQueen . Pos > ( ) ; return nqueenAllHelp ( pos , n , queens ) ; }
va	6	public static void main ( String [ ] args ) { System . out . println ( 1 + 2 ) ; System . out . println ( 2 - 3 ) ; System . out . println ( 3 * 4 ) ; System . out . println ( 16 / 5 ) ; System . out . println ( 16 % 5 ) ; }
va	2	public void setUexp_CD ( float Uexp_CD ) { this . Uexp_CD = Uexp_CD ; }
va	10	public FlyTo ( org . boehn . kmlframework . kml . AbstractView view ) { this . view = view ; flyToMode = FlyToMode . BOUNCE ; }
va	9	public void windowClosed ( WindowEvent e ) { System . out . println ( "SHUT THE FRONT DOOR!" ) ; GlobalScreen . unregisterNativeHook ( ) ; System . runFinalization ( ) ; }
va	8	@ XmlElementDecl ( namespace = "" , name = "ship-quantity" ) public JAXBElement < BigDecimal > createShipQuantity ( BigDecimal value ) { return new JAXBElement < BigDecimal > ( _ShipQuantity_QNAME , BigDecimal . class , null , value ) ; }
va	8	public static String getFormParamStringWithPrefix ( String name , int value ) { StringBuilder param = new StringBuilder ( ) ; param . append ( "&" ) . append ( name ) . append ( "=" ) . append ( value ) ; return param . toString ( ) ; }
va	3	public DebitResponseDetails getDebitResponse ( ) { return debitResponse ; }
va	10	public final Map < K , V > unmodifiable ( final Function < Map < K , V > , Map < K , V >> function ) { return Collections . unmodifiableMap ( function . apply ( backing ) ) ; }
va	5	public synchronized void delete ( ) { if ( swigCPtr != 0 ) { if ( swigCMemOwn ) { swigCMemOwn = false ; otapiJNI . delete_Server ( swigCPtr ) ; } swigCPtr = 0 ; } super . delete ( ) ; }
va	8	public User [ ] findByProfile ( Integer profileId ) throws UserDaoException { return findByDynamicSelect ( SQL_SELECT + " WHERE profileId = ?" , new Object [ ] { profileId } ) ; }
va	7	public String classifyInput ( List < String > words ) { double posProbability = countProbability ( "pos" , words ) ; double negProbability = countProbability ( "neg" , words ) ; if ( posProbability >= negProbability ) return "pos" ; else return "neg" ; }
va	6	public boolean getBoolean ( String propertyName ) { boolean result = boolean . parseBoolean ( getString ( propertyName ) ) ; return result ; }
va	10	@ Override public boolean equals ( Object obj ) { if ( this == obj ) return true ; if ( obj == null ) return false ; if ( getClass ( ) != obj . getClass ( ) ) return false ; Tela other = ( Tela ) obj ; if ( modulo == null ) { if ( other . modulo != null ) return false ; } else if ( ! modulo . equals ( other . modulo ) ) return false ; if ( nome == null ) { if ( other . nome != null ) return false ; } else if ( ! nome . equals ( other . nome ) ) return false ; if ( nro == null ) { if ( other . nro != null ) return false ; } else if ( ! nro . equals ( other . nro ) ) return false ; return true ; }
va	9	private void buttonFaseActionPerformed ( java . awt . event . ActionEvent evt ) { app . faseSelecionada ( id ) ; }
va	7	public ComboBoxModel getPlayerListModel ( ) { DefaultComboBoxModel m = new DefaultComboBoxModel ( ) ; for ( class c : availablePlayers ) { m . addElement ( c ) ; } return m ; }
va	5	public Atendente ( String nome , Conta conta ) { super ( nome , conta ) ; }
va	1	public AbstractDocumentTest ( ) { }
va	8	public void outlineTriangles ( final Color [ ] [ ] frameBuffer ) { if ( frameBuffer == null ) { throw new NullPointerException ( "'frameBuffer' must not be 'null'" ) ; } for ( Triangle triangle : triangles ) { triangle . outline ( frameBuffer ) ; } }
va	7	private String createFailureString ( String reason ) { String retVal = Message . responseHeader ( clientId , reason ) + "<kickResponse completed='false'/></response>" ; return retVal ; }
va	7	public ReceiverPDU ( PDUHeader header ) { super ( header ) ; if ( header . getPDUType ( ) != PDUType . RECEIVER ) throw new IllegalStateException ( "Invalid PDUType in Header" ) ; }
va	10	public H1D ( String name , String title , int bins , double xMin , double xMax ) { setName ( name ) ; setTitle ( title ) ; set ( bins , xMin , xMax ) ; }
va	5	public List < UserModel > getAllUsers ( ) throws WebshopAppException { return userRepository . getAllUsers ( ) ; }
va	9	private void protocolT0RadioActionPerformed ( java . awt . event . ActionEvent evt ) { protocolT0Radio . setSelected ( true ) ; protocolT1Radio . setSelected ( false ) ; }
va	1	public BubbleChart ( ) { this ( null ) ; }
va	6	public boolean isNull ( String key ) { return JSONObject . null . equals ( opt ( key ) ) ; }
va	9	public String toShow ( String [ ] arrayStr ) { StringBuilder builder = new StringBuilder ( ) ; builder . append ( "[" ) ; for ( int i = 0 ; i < arrayStr . length ; i ++ ) { builder . append ( arrayStr [ i ] ) ; if ( i < arrayStr . length - 1 ) builder . append ( "  " ) ; } builder . append ( "]" ) ; return builder . toString ( ) ; }
va	8	void tryUpcasting ( class < ? > clazz ) throws NoSuchMethodException { method = clazz . getMethod ( name , parameterTypes ) ; name = null ; parameterTypes = null ; upcast = true ; }
va	4	public void setName ( String in ) { name = in ; }
va	2	public int getCurrentQueueSize ( ) { return this . currentQueueSize ; }
va	6	@ Override public WorldCoordinate clone ( ) { return new WorldCoordinate ( x , y , z ) ; }
va	2	public int getOutside ( ) { return outside ; }
va	5	public ArgumentListTest ( java . lang . String testName ) { super ( testName ) ; }
va	4	public static FPoint2 pt ( double x , double y ) { return new FPoint2 ( x , y ) ; }
va	7	protected void log ( String message ) { System . out . println ( toString ( ) + ": " + message ) ; }
va	10	@ Test public void testSetGetInteractive ( ) { ArrayInput input = new ArrayInput ( new HashMap < String , String > ( ) ) ; assertTrue ( "isInteractive() returns whether the input should be interactive or not" , input . isInteractive ( ) ) ; input . setInteractive ( false ) ; assertFalse ( "setInteractive() changes the interactive flag" , input . isInteractive ( ) ) ; }
va	10	public Statement createReadStatement ( ) throws SQLException { Statement stmt = conn . createStatement ( ResultSet . TYPE_FORWARD_ONLY , ResultSet . CONCUR_READ_ONLY ) ; stmt . setFetchSize ( 0 ) ; return stmt ; }
va	1	public DeleteStudent ( ) { super ( ) ; }
va	4	public void setServicID ( String value ) { this . servicID = value ; }
va	9	@ Override public void close ( ) { try { nioServer . stop ( ) ; } catch ( IOException e ) { if ( logger . isWarnEnabled ( ) ) { logger . warn ( "error when stop nioServer" , e ) ; } } }
va	9	public void defineAudioClip ( Object pkg_obj , String clipid , String filename ) { filename = getAbsolutePath ( pkg_obj , filename ) ; audioclips . put ( clipid , filename ) ; }
va	4	public MousepadListener ( ) { thread = null ; mouseX = mouseY = 0 ; }
va	2	public double getDamageBonus ( ) { return this . damageBonus ; }
va	3	public int getAvailableCount ( ) { return table . size ( ) ; }
va	7	private void bFecharActionPerformed ( java . awt . event . ActionEvent evt ) { dispose ( ) ; }
va	8	public int x2pos ( int x ) { return ( int ) Math . round ( x * ( this . juego . getMaximaPosicion ( ) . getX ( ) + 1 ) / this . width ) ; }
va	8	public void appendCodeFragment ( CodeFragment fragment ) { this . addCode ( fragment ) ; this . setRegister ( fragment . getRegister ( ) ) ; this . setType ( fragment . getType ( ) ) ; }
va	7	public void mergeSort ( int [ ] data , int begin , int end ) { if ( data == null || begin > end ) { throw new NullPointerException ( "Error input." ) ; } else if ( begin == end ) { return ; } else { int mid = ( begin + end ) / 2 ; mergeSort ( data , begin , mid ) ; mergeSort ( data , mid + 1 , end ) ; merge ( data , begin , mid , end ) ; } }
va	4	public RmiBankProxy ( ) throws RemoteException { super ( ) ; bank = new MyBank ( ) ; }
va	5	public MsgDaoException ( String message , Throwable cause ) { super ( message , cause ) ; }
va	9	private int derivateZ ( int N_max ) { return ( ceil ( ( double ) Kt / SystematicIndices . KL ( N_max , MAX_SIZE_BLOCK , ALIGN_PARAM , T ) ) ) ; }
va	8	private JPanel createButtonbar ( ) { JPanel panel = new JPanel ( ) ; panel . setLayout ( new FlowLayout ( FlowLayout . CENTER ) ) ; panel . add ( createButton ( "Exit" , "Exit" ) ) ; panel . add ( createButton ( "PlayAgain" , "Play Again" ) ) ; return panel ; }
va	2	public int getNumberOfUsers ( ) { return numberOfUsers ; }
va	5	@ Override public void sort ( int [ ] array ) { comparisonCount = 0 ; sort ( array , 0 , array . length - 1 ) ; }
va	10	@ Test public final void testIsEmpty ( ) { assertTrue ( intRQ . isEmpty ( ) ) ; intRQ . enqueue ( rnd . nextInt ( ) ) ; intRQ . enqueue ( rnd . nextInt ( ) ) ; intRQ . enqueue ( rnd . nextInt ( ) ) ; assertFalse ( intRQ . isEmpty ( ) ) ; intRQ . dequeue ( ) ; intRQ . dequeue ( ) ; intRQ . dequeue ( ) ; assertTrue ( intRQ . isEmpty ( ) ) ; intRQ . enqueue ( rnd . nextInt ( ) ) ; assertFalse ( intRQ . isEmpty ( ) ) ; intRQ . dequeue ( ) ; assertTrue ( intRQ . isEmpty ( ) ) ; intRQ . enqueue ( rnd . nextInt ( ) ) ; assertFalse ( intRQ . isEmpty ( ) ) ; intRQ . dequeue ( ) ; assertTrue ( intRQ . isEmpty ( ) ) ; }
va	6	public static void main ( String [ ] args ) { System . out . println ( "Hello World!" ) ; }
va	6	public static void main ( String [ ] args ) throws Exception { new Application ( createOsSpecificFactory ( ) ) ; }
va	8	@ Test public void addsListWithValues ( ) { int result = BasicStreamOperations_1 . addUp ( Stream . of ( 1 , 3 , - 2 ) ) ; assertEquals ( 2 , result ) ; }
va	10	public static File getHistoryFile ( String sInstrument , String sTimeframe ) { File baseDir = new File ( "src/main/java/history" ) ; String instrument = sInstrument . replace ( "/" , "" ) ; String filename = instrument + sTimeframe ; File file = new File ( baseDir , filename ) ; return file ; }
va	6	public DisallowCommand ( ) { super ( "Disallow Player" ) ; setDescription ( "Removes a player from a group" ) ; setUsage ( "/ctdisallow \u00A78<group-name> <player-name>" ) ; setArgumentRange ( 2 , 2 ) ; setIdentifiers ( new String [ ] { "ctdisallow" , "ctd" } ) ; }
va	4	public void setCompanion ( Object companion ) { _companion = companion ; }
va	3	public String getName ( ) { return name ; }
va	9	public static void useAntialiasing ( Graphics2D g , boolean b ) { if ( b ) { g . setRenderingHint ( RenderingHints . KEY_ANTIALIASING , RenderingHints . VALUE_ANTIALIAS_ON ) ; } else { g . setRenderingHint ( RenderingHints . KEY_ANTIALIASING , RenderingHints . VALUE_ANTIALIAS_OFF ) ; } }
va	3	public boolean isCellEditable ( int rowIndex , int columnIndex ) { return false ; }
va	10	public OtpErlangLong ( final BigInteger v ) { if ( v == null ) { throw new java . lang . NullPointerException ( ) ; } if ( v . bitLength ( ) < 64 ) { val = v . longValue ( ) ; } else { bigVal = v ; } }
va	4	public LeftBattleEvent ( int id , String user ) { this . id = id ; this . user = user ; }
va	8	public void drawText ( Point p1 , Point p2 , int number , String c ) { glapi . drawText ( p1 , p2 , number , c ) ; }
va	6	public void addUSBListener ( USBListener l ) { if ( l == null ) throw new IllegalArgumentException ( ) ; listeners . addElement ( l ) ; }
va	2	AIInterceptPuckOwnerDefence ( long hockeyistId ) { this . hockeyistId = hockeyistId ; }
va	3	public Country getDefendingCountry ( ) { return defendingCountry ; }
va	9	@ Test public void testSetInputQueue ( ) { ConcurrentLinkedQueue queue = new ConcurrentLinkedQueue ( ) ; Communicator comm = new Communicator ( 12013 ) ; comm . setInputQueue ( queue ) ; assertEquals ( queue , comm . getInputQueue ( ) ) ; }
va	2	public void setOid ( int oid ) { this . oid = oid ; }
va	8	public void addItem ( Critere c ) throws CloneNotSupportedException { if ( criteres . contains ( c ) ) { throw new CloneNotSupportedException ( "Ce crit\u00E8re est d\u00E9ja actif." ) ; } else { criteres . add ( c ) ; fireContentsChanged ( ) ; } }
va	4	public Object getNextPanelDescriptor ( ) { return Process_EFAST_Analysis_Descriptor . IDENTIFIER ; }
va	4	public String getColumnName ( int col ) { return columnNames [ col ] ; }
va	5	@ Override public void gotTouched ( AbstractEntity e ) { strategy . gotTouched ( e ) ; }
va	4	public ArrayList < String > getTradersSurname ( ) { return tradersSurname ; }
va	9	public String getCompactTableFile ( String localDir ) { return localDir + "\\" + sampleRows + Integer . toString ( sampleCols ) + collectionDims ( ) + delta + "tableCompact.txt" ; }
va	8	public ProductList ( DefaultTreeModel model , String title , String id ) { super ( model , title ) ; this . id = id ; this . url = "http://viastream.viasat.tv/Products/Category/" + id ; setAllowsChildren ( true ) ; }
va	3	public String getOriginal ( ) { return original ; }
va	3	@ Override public int getExecutionCount ( ) { return this . executionCount ; }
va	10	protected MockQueryHandler ( SocketChannel channel , Map < Bytes , Bytes > table , List < QueryListener > listeners ) { this . channel = channel ; this . queryListeners = listeners ; this . table = table ; }
va	8	@ Test ( expected = InvalidIdentifierException . class ) public void testGetUserNullId ( ) throws DataBaseReadWriteException , IdentifierNotFoundException , InvalidIdentifierException { db . getUser ( null ) ; }
va	10	private void fireEvent ( ) { StatusEvent event = new StatusEvent ( ) ; event . setPercetage ( progress ) ; event . setStatusText ( this . statusText ) ; for ( StatusChangeListener listener : listeners ) { listener . fireEvent ( event ) ; } }
va	3	public int totalCount ( ) { return items . get ( ) ; }
va	10	public static Tuple getHeapTuple ( int n ) { Tuple tup = new Tuple ( getTupleDesc ( 1 ) ) ; tup . setRecordId ( new RecordId ( new HeapPageId ( 1 , 2 ) , 3 ) ) ; tup . setField ( 0 , new IntField ( n ) ) ; return tup ; }
va	7	@ Override public void cleanUp ( ) throws IOException { Files . walkFileTree ( tempDir , new DeletingFileVisitor ( ) ) ; }
va	6	protected String generateOutput ( String expected ) { return repeat ( backspace , 80 ) + expected + repeat ( " " , 80 - expected . length ( ) ) + repeat ( backspace , 80 - expected . length ( ) ) ; }
va	2	@ Override public int [ ] getSortedRanks ( ) { return null ; }
va	1	public AddChoiceController ( ) { }
va	6	public LindenmayerRule ( String from , String to ) { this . findThis = from ; this . replaceWith = to ; }
va	9	public void setStrategy ( TokeniserStrategy strat , boolean reuse ) { strategy = strat ; tokens . clear ( ) ; pos = 0 ; if ( reuse ) { getTokens ( ) ; } }
va	10	public void update ( final float x , final float y , final float z ) { minx = ( ( x < minx ) ? x : minx ) ; maxx = ( ( x > maxx ) ? x : maxx ) ; miny = ( ( y < miny ) ? y : miny ) ; maxy = ( ( y > maxy ) ? y : maxy ) ; minz = ( ( z < minz ) ? z : minz ) ; maxz = ( ( z > maxz ) ? z : maxz ) ; }
va	6	public AndNode ( Node l , Node r ) { left = l ; right = r ; }
va	9	public Animation ( BufferedImage [ ] i , int f ) { imgs = i ; frequency = f ; currentTick = 0 ; currentIndex = 0 ; length = i . length / 2 ; }
va	2	public int getHeight ( int height ) { return height ; }
va	10	@ Before public void setUp ( ) throws Exception { arbol . insertar ( 10 ) ; arbol . insertar ( 6 ) ; arbol . insertar ( 18 ) ; arbol . insertar ( 9 ) ; arbol . insertar ( 4 ) ; arbol . insertar ( 15 ) ; arbol . insertar ( 21 ) ; int [ ] datos1 = { 4 , 8 , 9 , 13 , 14 , 16 , 17 , 18 , 20 , 24 , 25 , 26 , 30 , 32 , 40 , 43 , 45 , 47 , 50 } ; int [ ] datos2 = { 13 , 17 , 25 , 26 , 32 , 45 } ; l1 . setDatos ( datos1 ) ; l2 . setDatos ( datos2 ) ; }
va	7	public static Object [ ] [ ] getRows ( JTable table ) { return tableModelToArray ( TableUtils . getModel ( table ) ) ; }
va	6	public static String [ ] getStrings ( int len , String val ) { String [ ] strings = new String [ len ] ; for ( int i = 0 ; i < len ; ++ i ) strings [ i ] = val + i ; return strings ; }
va	6	public void setMapPosition ( ) { xmap = tileMap . getx ( ) ; ymap = tileMap . gety ( ) ; }
va	10	static int getEmissionIndex ( MarkovModel model , String emission ) throws Exception { for ( int x = 0 ; x < model . getEmissions ( ) . length ; x ++ ) if ( model . getEmissions ( ) [ x ] . equals ( emission ) ) return x ; throw new Exception ( "Could not find " + emission ) ; }
va	2	public void setPositionX ( final float positionX ) { this . positionX = positionX ; }
va	2	public void setLastModified ( long lastModified ) { this . lastModified = lastModified ; }
va	5	public JSONArray ( String source ) throws JSONException { this ( new JSONTokener ( source ) ) ; }
va	5	public static String urlToString ( URL url ) { if ( url == null ) { return null ; } else { return url . toExternalForm ( ) ; } }
va	9	public int getAnswerIndex ( ) { if ( answer == null || options == null || isSurvey || style != CHOICE_QUESTION ) { return - 1 ; } for ( int i = 0 ; i < options . length ; i ++ ) { if ( answer . equals ( options [ i ] ) ) { return i ; } } return - 1 ; }
va	3	public double getProgress ( ) { return progress / ( 0.0 + MAX_PROGRESS ) ; }
va	1	public DuplicateInsertionException ( ) { this ( "This Object already is in collection. Could not be added second time." ) ; }
va	10	protected NavalgoBattle ( ) { this . navesList = new ArrayList < Nave > ( ) ; this . minasList = new ArrayList < Mina > ( ) ; this . convencionalList = new ArrayList < Convencional > ( ) ; this . turno = 0 ; this . puntosPorTurno = - 10 ; }
va	9	public TMDrillModel TMcleanByKeywordsAndDate ( String keywords , String start , String end ) { TMDrillModel tmDrillModel = tweetHandler . TMgetAllTweetsByKeywordAndDate ( keywords , start , end ) ; return tmDrillModel ; }
va	2	public int getT ( ) { return t ; }
va	8	private boolean allArePrimes ( int a , int b , int n ) { boolean areAllPrimes = true ; for ( int i = 0 ; i < n ; i ++ ) { areAllPrimes &= isPrime ( resultant ( a , b , i ) ) ; } return areAllPrimes ; }
va	2	public void setTilt ( double tilt ) { this . tilt = tilt ; }
va	1	public PageLayout ( ) { }
va	3	public boolean equals ( int x , int y ) { return this . x == x && this . y == y ; }
va	4	public String toString ( ) { return toString_native ( pointer ) ; }
va	7	private void createLogfileWriter ( ) throws IOException { try { logfileWriter = new PrintWriter ( new FileWriter ( logFilename ) ) ; } catch ( IOException e ) { throw e ; } }
va	8	public Instance translate ( Vector3 position ) { invTransform . multiply ( Matrix4 . newInvTranslation ( position ) ) ; return this ; }
va	2	public int obtenirVie ( ) { return vie ; }
va	8	public BitSet extractFeatures ( ArimaaMove current_move ) { GameState currState = new GameState ( ) ; currState . playFullClear ( current_move , prev ) ; return extractFeatures ( current_move , currState ) ; }
va	4	protected static String getDefaultName ( ) { return "Actor_" + COUNTER . incrementAndGet ( ) ; }
va	1	public OutilsMatriciels ( ) { }
va	7	private void jRadioButtonSondageChoix2ActionPerformed ( java . awt . event . ActionEvent evt ) { sondageChoix = 2 ; }
va	6	private void ddActionPerformed ( java . awt . event . ActionEvent evt ) { }
va	1	public PutAccountPolicyRequest ( ) { }
va	1	public CreateServlet ( ) { super ( ) ; }
va	7	private berryImpl ( Builder builder ) { id = builder . id ; flavour = builder . flavour ; texture = builder . texture ; size = builder . size ; }
va	4	public void setAdditionalStatusInfoText ( String additionalStatusInfoText ) { if ( additionalStatusInfoText == null ) { this . additionalStatusInfoText . setText ( "" ) ; } else { this . additionalStatusInfoText . setText ( additionalStatusInfoText ) ; } }
va	9	@ Override public boolean equals ( Object obj ) { if ( this == obj ) return true ; if ( obj == null ) return false ; if ( getClass ( ) != obj . getClass ( ) ) return false ; Appointment other = ( Appointment ) obj ; if ( end == null ) { if ( other . end != null ) return false ; } else if ( ! end . equals ( other . end ) ) return false ; if ( start == null ) { if ( other . start != null ) return false ; } else if ( ! start . equals ( other . start ) ) return false ; return true ; }
va	1	private Clamshell ( ) { }
va	9	@ Override public Object clone ( ) { Link [ ] l = new Link [ links . length ] ; for ( int i = 0 ; i < l . length ; i ++ ) { l [ i ] = ( Link ) links [ i ] . clone ( ) ; } return new NodeIntersection ( l ) ; }
va	1	public void float ( float value ) { this . value = value ; }
va	4	public void setTargetEvolution ( SpeciePoolEvolution target ) { this . targetEvolution = target ; }
va	3	public String getMessage ( ) { return message ; }
va	1	boolean isEditMode ( ) { return false ; }
va	3	protected Location getLocation ( ) { return location ; }
va	1	public int statDrop ( ) { return 0 ; }
va	2	public void seteBookAvailable ( boolean eBookAvailable ) { this . eBookAvailable = eBookAvailable ; }
va	4	public RoadCommunicator ( RoadAgent road ) { this . agent = road ; }
va	1	public Line ( ) { }
va	10	public int getIndex ( User user ) { for ( int i = 0 ; i < userList . size ( ) ; i ++ ) { User user1 = userList . get ( i ) ; if ( user1 . getUserID ( ) . equals ( user . getUserID ( ) ) ) return i ; } return - 1 ; }
va	2	public void populateWorld ( ) { setUpBox2D ( ) ; }
va	3	public void setX ( int i ) { this . X = i ; }
va	9	protected void definirJacket ( ) { raz ( ) ; panel_case . removeAll ( ) ; definirObjet ( "jacket" ) ; InterfaceEditeur . tab [ this . x ] [ this . y ] = this ; }
va	9	public FillTempTable ( Statement sourceDB , int databaseID , Statement destDB , String tmpTable , long startTime , long endTime ) { this . sourceDB = sourceDB ; this . databaseID = databaseID ; this . destDB = destDB ; this . tmpTable = tmpTable ; this . startTime = startTime ; this . endTime = endTime ; }
va	1	public Style ( ) { super ( ) ; }
va	6	public boolean examine ( ) { System . out . println ( "A steel broadsword. The hilt is wrapped in leather." ) ; if ( this . name . contains ( "vorpal" ) ) { System . out . println ( "The edge seems very sharp." ) ; } return true ; }
va	8	@ Override public boolean equals ( Object arg0 ) { Female other = ( Female ) arg0 ; return other . femalesGroup . equals ( this . femalesGroup ) && femaleNumber == other . femaleNumber ; }
va	10	protected AP_p9any ( ) { domains = new Vector < String > ( ) ; version = "v.2" ; rdState = STATE_INITIAL ; wrState = STATE_INITIAL ; isServer = false ; id = null ; }
va	3	public static OmahaBuilder < ? > builder ( ) { return new Builder2 ( ) ; }
va	8	@ BeforeClass public static void setUpBeforeClass ( ) throws Exception { String path = "D:\\eclipseWorkspace\\confpath\\" ; RecRemoteOperator rro = new RecRemoteOperator ( ) ; rro . SetLocalConfpath ( path ) ; }
va	8	@ Test public void testIsBuried ( ) { Job j = new DefaultJob ( 1 , "body" . getBytes ( ) , true ) ; assert . assertTrue ( j . isBuried ( ) ) ; }
va	3	public List < String > depends ( ) { return depends ( 0 , 25 ) ; }
va	4	public void setId ( String id ) throws Exception { this . id = id ; }
va	3	public UnknownCommandException ( String message ) { super ( message ) ; }
va	10	public void Atack ( Point Cord ) { if ( isMyMove != getSelFigure ( ) . isWhite ) return ; xNet . send ( 0 , new Packet ( "Attacked" ) . setOX ( 1 , getSelFigure ( ) . Cord ) . setOX ( 2 , Cord ) ) ; getSelFigure ( ) . Atack ( Cord ) ; isMyMove = ! isMyMove ; }
va	5	public String getConnectedHost ( ) { return this . socket . getInetAddress ( ) . getHostName ( ) ; }
va	7	public List < Status > favorites ( String id ) throws WeiboException { return getFavorites ( id ) ; }
va	6	public int size ( ) { int totalConnections = 0 ; for ( int i = 0 ; i < neurons . size ( ) ; i ++ ) totalConnections += neurons . get ( i ) . getNumberOfConnections ( ) ; totalConnections /= 2 ; return totalConnections + neurons . size ( ) * 2 ; }
va	8	@ Override public Punto execute ( ) { Random random = new Random ( ) ; int x = random . nextInt ( 5 ) + 1 ; int y = random . nextInt ( 5 ) + 1 ; return new Punto ( x , y ) ; }
va	10	public TestBed ( String title ) { super ( title , STYLE_ETCH , null ) ; setBackground ( Color . white ) ; if ( DEBUG ) { tools . warning ( "*** myUtils DEBUG is true" ) ; } }
va	7	public boolean isLeftChild ( BinaryTreeNode < K , V > node ) { return node . equals ( left ) ; }
va	2	public int getRudderPosition ( ) { return rudderPosition ; }
va	3	public void setCached ( boolean cached ) { this . cached = cached ; if ( this . cached = false ) this . cache = null ; }
va	7	public boolean isInCircum ( Vector v ) { v = v . subtract ( circumCenter ) ; return v . lengthSquared ( ) <= rSquared ; }
va	5	public final int getIndex ( final K key ) { return this . keys . indexOf ( key ) ; }
va	9	@ Override public void keyPressed ( KeyEvent e ) { Dependencias . Teclado . getInstance ( ) . presionarTecla ( e . getKeyCode ( ) ) ; }
va	2	public Goblin ( ) { super ( "Goblin" , 20 , 10 , 10 , 10 , 10 ) ; setLevel ( 1 ) ; }
va	5	public boolean hasPath ( PositionOrUnit target ) { return hasPath_native ( pointer , target ) ; }
va	7	public static boolean matches ( List < ? > list ) { if ( ! list . isEmpty ( ) ) { Object value = list . get ( 0 ) ; if ( value instanceof boolean ) { return ( boolean ) value ; } else { return true ; } } return false ; }
va	8	@ Override public boolean equals ( Object o ) { if ( o == null ) return false ; return EqualHelper . equal ( value , ( ( CharVal ) o ) . value ) ; }
va	5	public Manager ( int ID ) { if ( ID < 0 || ID > 25 ) { ID = 0 ; } this . ID = ID ; setManagerID ( ID ) ; surveyed = new HashSet ( ) ; }
va	2	public long getDocumentAuthorId ( ) { return documentAuthorId ; }
va	4	@ Override public FormType getType ( ) { return FormType . MANAGERLOGIN ; }
va	5	public void flip ( ) { sim . isRunning = ! sim . isRunning ; playPause . setText ( sim . isRunning ? "Pause" : "Play" ) ; }
va	6	@ After public void tearDown ( ) { passengerDAO = null ; ticketDAO = null ; trainDAO = null ; sirDAO = null ; }
va	7	@ Override public void printJobCanceled ( PrintJobEvent pje ) { System . out . println ( "4" ) ; }
va	7	@ Override public void sort ( ) { int min = provider . getMinIndex ( ) ; int max = provider . getMaxIndex ( ) ; sort ( min , max , true ) ; }
va	2	public void setPeriod ( int period ) { this . period = period ; }
va	1	public boolean failFast ( ) { return failFast ; }
va	4	public boolean hasNext ( ) { return ( position < referenceNames . length ) ; }
va	2	public int getSkip ( ) { return skip ; }
va	8	public void apply ( ) { pa . envelope = ( Envelope ) envelopePanel . getEnvelope ( ) . clone ( ) ; pa . repaint ( ) ; }
va	10	public JSONWriter ( Writer w ) { this . , = false ; this . mode = i ; this . stack = new JSONObject [ maxdepth ] ; this . top = 0 ; this . writer = w ; }
va	2	public double getAbsoluteValue ( double val ) { return ( val < 0 ) ? - val : val ; }
va	7	private void jButton5ActionPerformed ( java . awt . event . ActionEvent evt ) { limpiar ( ) ; }
va	4	public FolderProducer ( ItemProducer < Item > itemProducer ) { this . itemProducer = itemProducer ; }
va	5	ServerSslGreeter ( String serverName , SslHandler sslHandler ) { this . serverName = serverName ; this . sslHandler = sslHandler ; }
va	2	public String getQuestionTypeString ( ) { return "Picture-Response" ; }
va	2	public void setId ( int id ) { this . id = id ; }
va	4	public void setSnippet ( String value ) { this . snippet = value ; }
va	10	@ Override public String toString ( ) { StringBuilder sb = new StringBuilder ( "PieceMessage" ) ; sb . append ( "{Type=" ) . append ( "Piece" ) ; sb . append ( "; Index=" ) . append ( index ) ; sb . append ( "; Offset=" ) . append ( offset ) ; sb . append ( "; Length=" ) . append ( buffer . capacity ( ) ) ; return sb . append ( "}" ) . toString ( ) ; }
va	7	@ Override public Object get ( int pos ) { if ( pos < 0 || pos > size ) throw new IndexOutOfBoundsException ( ) ; return elements [ pos ] ; }
va	5	@ Override public HasText getFirstHeader ( ) { return list . getHeader ( ) ; }
va	10	@ Override public RobotProgramNode parse ( Scanner s , CodeParser cp , NodeProcessor p ) { p . process ( s , cp , this ) ; return this ; }
va	2	public double getEnd ( ) { return end ; }
va	2	public int getHeight ( ) { return this . height ; }
va	6	public StationVoisine ( ControleurStationVoisine aThis ) { initComponents ( ) ; ctrlSV = aThis ; this . setLocationRelativeTo ( null ) ; }
va	3	public T1 getA ( ) { return a ; }
va	5	private static TreeNode createTree2 ( ) { TreeNode root = new TreeNode ( 1 ) ; root . left = new TreeNode ( 2 ) ; root . right = new TreeNode ( 3 ) ; root . right . left = new TreeNode ( 4 ) ; root . right . right = new TreeNode ( 5 ) ; return root ; }
va	2	public int [ ] getForeignKeyPositions ( ) { return foreignKeyPositions ; }
va	5	public Performance ( Connection con , String id ) { super ( con , id ) ; }
va	10	public static void main ( String [ ] args ) { int m = 10 ; int n = 10 ; int [ ] [ ] mat = new int [ m ] [ n ] ; int i , j ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( j == 0 ) { mat [ i ] [ j ] = 1 + ( int ) ( Math . random ( ) * 10 ) ; } else { mat [ i ] [ j ] = mat [ i ] [ j - 1 ] + 1 + ( int ) ( Math . random ( ) * 10 ) ; } } } }
va	9	private boolean method486 ( int i , int j , int k , int l , int i1 , int j1 , int k1 , int l1 ) { if ( j < k && j < l && j < i1 ) return false ; if ( j > k && j > l && j > i1 ) return false ; return ! ( i < j1 && i < k1 && i < l1 ) && ( i <= j1 || i <= k1 || i <= l1 ) ; }
va	6	public FSet < Val > range ( FSet < Val > initial_set ) { initial_set = initial_set . difference ( initial_set ) ; return ( FSet < Val > ) range ( tree , initial_set ) ; }
va	6	public int numTrees ( int n ) { if ( n == 0 || n == 1 ) return 1 ; int total = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int left = i - 1 ; int right = n - i ; total += numTrees ( left ) * numTrees ( right ) ; } return total ; }
va	6	@ Override public int compareTo ( BalanceEntry o ) { if ( price >= o . getPrice ( ) ) { return - 1 ; } else if ( price < o . getPrice ( ) ) { return 1 ; } else return 0 ; }
va	10	public PathPlannerController ( String algorithm , String best_path , float carWidth , float cellWidth ) { this . algorithm = PathPlanner . create ( algorithm , carWidth , cellWidth ) ; this . graph_solucionator = BestPath . create ( best_path ) ; }
va	9	@ Override public Color chooseColorByPoint ( Vertex vertex ) { if ( vertex == leftPoint ) return Color . green ; if ( vertex == rightPoint ) return Color . yellow ; return super . chooseColorByPoint ( vertex ) ; }
va	4	public void setSelectedClasa ( Clasa c ) { this . selected_clasa = c ; }
va	6	@ Test public void testBottomUp ( ) { String [ ] anArr = new String [ ] { "U" , "F" , "A" , "R" , "D" , "P" , "G" , "V" , "J" , "B" } ; MergeSortBottomUp . sort ( anArr ) ; }
va	7	@ Override public void actionPerformed ( ActionEvent e ) { switch ( e . getActionCommand ( ) ) { case "Swap" : swapText ( ) ; break ; case "Exit" : exitWindow ( ) ; break ; } }
va	10	public static void main ( final String [ ] args ) { int value = 0 ; for ( int i = 1 ; i < 10000 ; i ++ ) { if ( i == 6 || i == 28 || i == 496 || i == 8128 ) continue ; if ( isAmicable ( i ) ) { value += i ; } } System . out . println ( value ) ; uptime ( ) ; }
va	10	@ Test public void TelesinaHandTest3 ( ) { int [ ] hand1 = { 1 , 2 , 3 , 4 , 13 } ; TelesinaHand teleHand1 = new TelesinaHand ( hand1 ) ; int [ ] hand2 = { 1 , 3 , 2 , 0 , 5 } ; TelesinaHand teleHand2 = new TelesinaHand ( hand2 ) ; assert . assertTrue ( handRater . getTelesinaHandValue ( teleHand1 ) < handRater . getTelesinaHandValue ( teleHand2 ) ) ; }
va	7	public IITPlaylist createFolder ( String folderName ) { return new IITPlaylist ( Dispatch . call ( this , "CreateFolder" , folderName ) . toDispatch ( ) ) ; }
va	8	private List < String > copyStringList ( List < String > listToCopy ) { List < String > copiedList = new ArrayList ( ) ; for ( String s : listToCopy ) { copiedList . add ( s ) ; } return copiedList ; }
va	9	public GamescreenGameMode ( RenderWindow Render_Window ) { super ( Render_Window ) ; this . Arena = ( Vector < Entity > [ ] [ ] ) new Vector [ 15 ] [ 13 ] ; for ( int i = 0 ; i < this . Arena . length ; i ++ ) { for ( int j = 0 ; j < this . Arena [ i ] . length ; j ++ ) { this . Arena [ i ] [ j ] = new Vector < Entity > ( ) ; } } }
va	9	@ Override public boolean equals ( Object o ) { if ( this == o ) return true ; if ( o == null || getClass ( ) != o . getClass ( ) ) return false ; ProcedureHeadingNode that = ( ProcedureHeadingNode ) o ; if ( fparams != null ? ! fparams . equals ( that . fparams ) : that . fparams != null ) return false ; if ( subject != null ? ! subject . equals ( that . subject ) : that . subject != null ) return false ; return true ; }
va	9	protected PlayableState getPlayableStateOf ( Playable playable ) { PlayableState pstate ; if ( ! playableMap . containsKey ( playable ) ) { pstate = new PlayableState ( ) ; playableMap . put ( playable , pstate ) ; } else { pstate = playableMap . get ( playable ) ; } return pstate ; }
va	1	public boolean isImmutable ( ) { return false ; }
va	3	public boolean isPositive ( ) { return compareTo ( ZERO ) > 0 ; }
va	2	public HandPrintFactory chunkBoundaryMask ( long chunkBoundaryMask ) { this . chunkBoundaryMask = chunkBoundaryMask ; return this ; }
va	9	public Character addCharacter ( String name , int health , int attack , int x , int y ) { if ( tileGrid [ y ] [ x ] == null ) return null ; else return new Character ( name , health , attack , tileGrid [ y ] [ x ] ) ; }
va	3	public void setStartDate ( Date startDate ) { this . startDate = startDate ; }
va	8	public static void sendNote ( String userTo , String userFrom , String note ) { Message message = new Message ( userTo , userFrom , false , false , true , - 1 , - 1 , note ) ; sendMessage ( message ) ; }
va	1	public AbstractLight ( ) { }
va	9	@ Test public void testSetOccupancyRate_1 ( ) throws Exception { Occupancy fixture = new Occupancy ( new Hostel ( ) , new Integer ( 1 ) , new Integer ( 1 ) , 1.0 ) ; double occupancyRate = 1.0 ; fixture . setOccupancyRate ( occupancyRate ) ; }
va	5	public synchronized void removeEventListener ( SocketListener listener ) { _listeners . remove ( listener ) ; }
va	6	static void print ( String text ) { System . out . println ( text ) ; }
va	8	@ SuppressWarnings ( "rawtypes" ) public JSONArray put ( int index , Map value ) throws JSONException { this . put ( index , new JSONObject ( value ) ) ; return this ; }
va	7	public boolean setTracker ( String which , int toWhat ) { this . questTracker . remove ( which ) ; this . questTracker . put ( which , toWhat ) ; return true ; }
va	4	ACTUATE ( String v ) { value = v ; }
va	1	public xss_index_php_149 ( ) { }
va	5	protected int nextHop ( int hash , int iteration ) { return ( ( int ) ( hash + 0.5 * iteration + 0.5 * iteration * iteration ) ) & ( keys . length - 1 ) ; }
va	6	public ITTrackKind getKind ( ) { return ITTrackKind . values ( ) [ Dispatch . get ( this , "Kind" ) . getInt ( ) ] ; }
va	5	public void off ( ) { System . out . println ( location + " stereo is off" ) ; }
va	4	public String concatenarEstatus ( ) { String ret = "#inactivo\n" ; if ( isEstatus ( ) ) { ret = "#activo\n" ; } return ret ; }
va	8	@ Override public < T > T selectHandler ( HandlerContext < T > ctx , ConnectionHolder conn ) throws SQLException { return null ; }
va	6	public void reset ( ) { EnemyLocator . reset ( ) ; map . reset ( ) ; obs . reset ( ) ; uniqueInstance = new Dungeon ( ) ; }
va	1	public Hocham ( ) { }
va	3	@ Override public String getDefaultExtension ( ) { return "Main" ; }
va	4	@ Override Land getLandUnit ( class < ? extends Land > clazz ) { return null ; }
va	7	@ Override public void componentResized ( ComponentEvent e ) { if ( autoscale ) { scale ( ) ; } invalidate ( ) ; }
va	2	public void updateValue ( double value ) { this . value += value ; }
va	4	@ Override public void onReceive ( Entity host ) { }
va	3	public StringBuilder streamOut ( ) { return circ . streamOut ( ) ; }
va	8	public void moveup ( ) { if ( isJumping && jumpSpeed > 0 ) { if ( ! testForColisions ( 0 , - jumpSpeed / 5 ) ) { rect . y -= jumpSpeed / 5 ; jumpSpeed -= 2 ; } else jumpSpeed = 0 ; } else if ( jumpSpeed == 0 ) { jumpSpeed = defaultJumpSpeed ; isFalling = true ; isJumping = false ; } }
va	9	@ Override public final boolean equals ( @ Nullable final Object obj ) { if ( obj instanceof Position ) { final Position other = ( Position ) obj ; return column == other . column && row == other . row ; } return false ; }
va	9	public GizmoAboutBox ( java . awt . Frame parent ) { super ( parent ) ; initComponents ( ) ; getRootPane ( ) . setDefaultButton ( closeButton ) ; }
va	7	public String scoreAdequation ( OffreType offretype ) { String score ; score = String . format ( "%.2f" , ( ( this . scoreTotal ( offretype ) ) / 11 ) * 100 ) + "%" ; return score ; }
va	5	public static byte max ( byte ... values ) { Precondition . checkNotEmptyOrNull ( values ) ; byte max = values [ 0 ] ; for ( byte b : values ) { if ( max < b ) { max = b ; } } return max ; }
va	7	public int sqrt ( int x ) { if ( x == 1 ) return 1 ; double epsilon = 1e-15 ; double high = x ; double low = x ; while ( Math . abs ( low - high / low ) > epsilon * low ) { low = ( high / low + low ) / 2.0 ; } return ( int ) ( low + 0.5 ) ; }
va	5	public final void addToOwned ( final WorldStruct struct ) { this . owned . add ( struct ) ; }
va	8	@ Override public void solve ( final IUpdateInfo uInfo ) { if ( bodyA . isStatic ( ) ) { staticlagrangian ( uInfo ) ; } else { lagrangian ( uInfo ) ; } }
va	2	public void normalizeDocument ( ) { throw new UnsupportedOperationException ( "org.w3c.tidy.DOMDocumentImpl normalizeDocument() Not implemented" ) ; }
va	3	public String getNames ( ) { return names ; }
va	3	public void limpiarSiApeNombres ( ) { txtDNI . setText ( "" ) ; }
va	5	private static int method515 ( char ac [ ] , int i ) { for ( int k = i ; k < ac . length && k >= 0 ; k ++ ) if ( ac [ k ] >= 0 && ac [ k ] <= 9 ) return k ; return - 1 ; }
va	5	public UserHomeState ( AuctionService as , String name ) { this . name = name ; this . as = as ; }
va	9	public static void main ( String [ ] args ) { Shell shell = ShellUtil . getShell ( ) ; new MainMenuScreenUI ( shell ) ; ShellUtil . openShell ( shell ) ; }
va	6	@ Override public boolean isReached ( ) { boolean result = true ; for ( IStopCondition condition : conditions ) result = result && condition . isReached ( ) ; return result ; }
va	1	public ExpreList ( ) { }
va	5	@ Override public int getColumnCount ( ) { return Column . values ( ) . length ; }
va	1	public BoardView ( ) { }
va	6	@ Override protected List < TreeNode > getChildList ( ) { return new ArrayList < TreeNode > ( declarations ) ; }
va	1	public berryTest ( ) { }
va	9	public ListNode partition ( ListNode head , int x ) { ListNode p1 = null , p2 = head , p2Prev = null ; while ( p2 != null ) { if ( p2 . val < x ) { if ( p1 == p2Prev ) { p1 = p2 ; p2 = p2 . next ; p2Prev = p1 ; } else { p2Prev . next = p2 . next ; if ( p1 == null ) { p2 . next = head ; head = p2 ; } else { p2 . next = p1 . next ; p1 . next = p2 ; } p1 = p2 ; p2 = p2Prev . next ; } } else { p2Prev = p2 ; p2 = p2 . next ; } } return head ; }
va	7	public static void normalize ( float [ ] a ) { float total = sum ( a ) ; if ( total == 0.0 || double . isNaN ( total ) ) { throw new RuntimeException ( "Can't normalize an array with sum 0.0 or NaN" ) ; } multiplyInPlace ( a , 1.0 / total ) ; }
va	10	private final static boolean stringAt ( String string , int start , int length , String [ ] list ) { if ( ( start < 0 ) || ( start >= string . length ( ) ) || list . length == 0 ) return false ; String substr = string . substring ( start , start + length ) ; for ( int i = 0 ; i < list . length ; i ++ ) { if ( list [ i ] . equals ( substr ) ) return true ; } return false ; }
va	7	public Order ( Customer customer ) { this . startTime = new Date ( ) ; this . customerId = customer . getId ( ) ; }
va	7	@ Test public void testE ( ) throws IOException { appUITester . expect ( "New end week year: " ) . write ( "2012" ) . expectNothing ( ) ; appUITester . expect ( "New end week number: " ) . write ( "0" ) . expect ( "Invalid week number. Try again." ) ; }
va	7	@ Test public void TestTelekineticLeviationWithGravity ( ) { ap . activateTelekineticLevitation ( ) ; ap . activateGravity ( ) ; assertFalse ( ap . isTelekineticlyLevitated ( ) ) ; }
va	9	@ Override public String getMainAttribute ( String key ) { String value = manifest . getMainAttributes ( ) . getValue ( key ) ; return value != null ? value . trim ( ) : null ; }
va	5	public void setCodigoUsuario ( String codigoUsuario ) { if ( this . estado . permiteModicifacion ( ) ) { this . codigoUsuario = codigoUsuario ; } }
va	4	public void setSpecies ( List < Specie > species ) { this . species = species ; }
va	8	public FSP_OrJoin ( int n ) { ins = n ; for ( int i = 1 ; i <= n ; i ++ ) { this . input_names . put ( "in[" + i + "]" , null ) ; } this . output_names . put ( "out" , null ) ; this . control_names . put ( "o_cond" , null ) ; }
va	2	public int getBiFollowersCount ( ) { return biFollowersCount ; }
va	2	public void clear ( ) { this . map . clear ( ) ; }
va	2	public Corpus createCorpus ( ) { return new Corpus ( ) ; }
va	9	public void undoLastModification ( ) { if ( imageHistory . size ( ) <= 2 ) { System . out . println ( toString ( ) + " No more undos." ) ; return ; } System . out . println ( toString ( ) + " Undo." ) ; imageHistory . pop ( ) ; imageHistory . pop ( ) ; wasModified ( ) ; }
va	6	public boolean hasSmallFish ( ) { return ( fish != null && Size . LITTLE . equals ( fish . getSize ( ) ) ) ; }
va	2	public Builder rampedHalfAndHalf ( boolean rampedHalfAndHalf ) { this . rampedHalfAndHalf = rampedHalfAndHalf ; return this ; }
va	10	public Element insert ( Element item ) throws Exception { if ( search ( item ) > 0 ) { throw new Exception ( "Sorry  the element already exists." ) ; } else { stack . add ( item ) ; hash [ item . key ] = stack . size ( ) - 1 ; } return item ; }
va	2	public BIOSwitch ( ) { super ( ) ; create ( ) ; }
va	3	public void setIndex ( int param ) { index = param ; }
va	2	public void setOriginY ( float originY ) { this . originY = originY ; }
va	2	public double getLat ( ) { return this . lat ; }
va	9	public void prepare ( ) { System . out . println ( "preparing" + name ) ; System . out . println ( "Tossing dough..." ) ; System . out . println ( "Adding sauce..." ) ; System . out . println ( "Adding toppings:" ) ; for ( int i = 0 ; i < toppings . size ( ) ; i ++ ) { System . out . println ( " " + toppings . get ( i ) ) ; } }
va	10	public EveMineralsFrame ( Preferences preferences ) throws HeadlessException { super ( ) ; this . preferences = preferences ; Container contentPane = getContentPane ( ) ; frameBase = new JPanel ( ) ; contentPane . add ( frameBase ) ; }
va	6	public Button ( String text ) { setText ( text . toUpperCase ( ) ) ; init ( ) ; }
va	10	@ Override public void write ( DISOutputStream dos ) throws IOException { dos . writeUI8 ( deadReckoningAlgorithm ) ; dos . write ( deadReckoningOtherParameters ) ; entityLinearAcceleration . write ( dos ) ; entityAngularVelocity . write ( dos ) ; }
va	3	public Post ( String name ) { this . name = name ; }
va	7	public void addPair ( StyleMapPair value ) { if ( value != null ) { value . setParent ( this ) ; markCreatedNode ( value ) ; this . pair . add ( value ) ; } }
va	3	public void readModel ( String file ) { }
va	1	public Plotter ( ) { this ( "Default" ) ; }
va	7	public SkyQuestListener ( SkyQuestPlugin plugin ) { this . plugin = plugin ; qm = plugin . getQuestManager ( ) ; bookTitle = plugin . bookTitle ; bookAuthor = plugin . bookAuthor ; }
va	3	public void setIFeedTransactionId ( int feedTransactionId ) { iFeedTransactionId = feedTransactionId ; }
va	6	@ Override public void setHostname ( String hostname ) { if ( hostname == null || hostname . length ( ) == 0 ) throw new DatabaseException ( "Hostname cannot be null or empty." ) ; this . hostname = hostname ; }
va	4	private void init ( ) { m_tblComps . clear ( ) ; m_size = 0 ; }
va	10	public Canceler ( JmDNSImpl jmDNSImpl , Collection infos , Object lock ) { this . jmDNSImpl = jmDNSImpl ; this . infos = ( ServiceInfoImpl [ ] ) infos . toArray ( new ServiceInfoImpl [ infos . size ( ) ] ) ; this . lock = lock ; }
va	9	private void startProcessDistribute ( ) { while ( noStopRequested ) { try { workers . take ( ) . processResponse ( this . readPool . take ( ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } }
va	1	public Body ( ) { super ( ) ; }
va	6	static AIPoint sum ( AIPoint p_0 , AIPoint p_1 ) { return new AIPoint ( p_0 . x + p_1 . x , p_0 . y + p_1 . y ) ; }
va	2	public void setQtdPixels2 ( int qtdPixels2 ) { this . qtdPixels2 = qtdPixels2 ; }
va	4	public void display ( ) { System . out . println ( "\uB098\uB294 F16" ) ; }
va	4	public void setArticles ( List < Article > articles ) { this . articles = articles ; }
va	7	public int readInt32 ( ) { if ( this . bytes . length - this . position < 4 ) { throw new IllegalStateException ( "Not enough bytes left." ) ; } int r = Bytes . readInt32 ( this . bytes , this . position ) ; this . position += 4 ; return r ; }
va	3	public Date getDateSubmitted ( ) { return this . dateSubmitted ; }
va	2	public float [ ] getPointColour ( ) { return mPointColour ; }
va	9	public String encode ( ) { StringBuffer string = new StringBuffer ( ) ; string . append ( PREFIX ) ; string . append ( "372" ) . append ( " " ) . append ( conn . getNickname ( ) ) . append ( " :" ) ; string . append ( "- Content of MOTD" ) ; return string . toString ( ) ; }
va	7	public LabelDefault ( ) { setForeground ( foreground ) ; setFont ( font ) ; setPreferredSize ( labelDimension ) ; }
va	3	public synchronized void xsetD1RepeatDelay ( int a ) { d1RD = a ; }
va	4	public Cliente ( ) { this . id = 0 ; this . nome = "" ; this . dataNascimento = null ; }
va	10	public void write ( Object value ) { if ( columnCount != - 1 && currentColumnCount >= columnCount ) throw new RuntimeException ( "First line consisted of " + columnCount + " columns  but now trying to one more." ) ; if ( currentColumnCount ++ > 0 ) out . print ( " " ) ; out . print ( escape ( value . toString ( ) ) ) ; }
va	9	public TokenizerProperty getKeyword ( String keyword ) throws IllegalArgumentException { checkArgument ( keyword , "Keyword" ) ; synchronized ( this ) { return doGetProperty ( Token . KEYWORD , keyword ) ; } }
va	8	private static boolean exposeWebAppRoot ( ServletContext servletContext ) { String exposeWebAppRootParam = servletContext . getInitParameter ( EXPOSE_WEB_APP_ROOT_PARAM ) ; return ( exposeWebAppRootParam == null || boolean . valueOf ( exposeWebAppRootParam ) ) ; }
va	2	public void setActive ( boolean active ) { this . active = active ; }
va	9	protected GCode createDefaultGCode ( String line , int linenr , GCDEF code ) { GCode gcd ; gcd = new GCodeMemSave ( line , code ) ; return gcd ; }
va	3	public String getYTitle ( ) { return yaxisTitle ; }
va	7	@ Override public boolean equals ( Object obj ) { if ( obj == null || ! ( obj instanceof Counter ) ) return false ; Counter < ? > c = ( Counter < ? > ) obj ; return _counts . equals ( c . _counts ) ; }
va	4	public void setSCampaignDurationCode ( String campaignDurationCode ) { sCampaignDurationCode = campaignDurationCode ; }
va	5	public void off ( ) { level = 0 ; System . out . println ( "Light is off" ) ; }
va	3	public static SimpleObject getInstance ( ) { if ( simpleObject == null ) simpleObject = new SimpleObject ( ) ; return simpleObject ; }
va	3	public String getMarket_code ( ) { return market_code ; }
va	1	public int start_production ( ) { return 0 ; }
va	10	public ServiceLocationEnumeration findAttributes ( final ServiceType type , final List scopes , final List attributeIds ) throws ServiceLocationException { return findAttributes ( new AttributeRequest ( type , scopes , attributeIds , locale ) ) ; }
va	3	Messages ( String message ) { this . message = message ; }
va	6	private void desabilitarCampos ( ) { tfHost . setEnabled ( false ) ; tfUsuario . setEnabled ( false ) ; pfSenha . setEnabled ( false ) ; snPorta . setEnabled ( false ) ; }
va	8	@ XmlElementDecl ( namespace = "http://MGReply.me.org/" , name = "sendNotificationResponse" ) public JAXBElement < SendNotificationResponse > createSendNotificationResponse ( SendNotificationResponse value ) { return new JAXBElement < SendNotificationResponse > ( _SendNotificationResponse_QNAME , SendNotificationResponse . class , null , value ) ; }
va	6	public static _Fields findByName ( String name ) { return byName . get ( name ) ; }
va	4	public Peer ( String ip , int port ) { this . ip = ip ; this . port = port ; }
va	5	public void setParameters ( Generator freq , Generator phase , Generator & ) { super . setParameters ( triangleWave , freq , phase , & , true ) ; }
va	9	@ Test public void testFilterReturnsEmptyCollectionIfGivenNoPokemonStats ( ) { assertEquals ( 0 , harmAlgorithmFilter . filter ( new HashSet < PokemonStats > ( ) , factorsModel ) . size ( ) ) ; }
va	3	public void setLastMouseY ( int initY ) { lastMouseY = initY ; }
va	7	public void tick ( Input input , double delta ) { for ( TickStrategy s : tickStrategies ) { s . tick ( input , delta ) ; } }
va	5	public int compareTo ( Race r ) { return number - r . getNumber ( ) ; }
va	7	void setupMnemonicAndAccelerator ( KeyStroke keystroke ) { putValue ( MNEMONIC_KEY , keystroke . getKeyCode ( ) ) ; putValue ( ACCELERATOR_KEY , keystroke ) ; }
va	1	public Utils ( ) { }
va	4	public static void main ( String [ ] args ) throws ParseException { }
va	4	public void saveGame ( Game game ) { throw new NotImplementedException ( ) ; }
va	6	public boolean isUnflagged ( ) { return _field . getState ( ) . equals ( FieldState . UNFLAGGED ) ; }
va	5	public String getUpdateID ( String xml ) { return getParameterElement ( xml , "name" , "update_id" ) . getValue ( ) ; }
va	6	private void updateOrdersTable ( ) { order_view . updateReturned ( row ) ; m_order_view . dispose ( ) ; }
va	2	public void setRating ( long rating ) { this . rating = rating ; }
va	1	public int statBoost ( ) { return 0 ; }
va	8	public synchronized void accept ( Runnable r ) { print ( "accept" ) ; queue . add ( r ) ; print ( "accepted. queue.size: " + queue . size ( ) + ". notify" ) ; notifyAll ( ) ; }
va	2	public void setB ( float b ) { this . b = b ; }
va	4	public boolean isCallbackSet ( ) { return otapiJNI . OTCaller_isCallbackSet ( swigCPtr , this ) ; }
va	10	private Action quitAction ( ) { if ( quitAction == null ) { quitAction = new AbstractAction ( ) { @ Override public void actionPerformed ( ActionEvent e ) { eventBus . post ( new ExitEvent ( 0 ) ) ; } } ; } return quitAction ; }
va	3	public ProdCodeGrp getProdCodeGrp ( ) { return prodCodeGrp ; }
va	6	public boolean encontrarele ( String nombre ) { int i = 0 ; while ( i < this . size ) { if ( nombre == this . lista [ i ] ) { return true ; } else { ++ i ; } } return false ; }
va	10	public static RunAutomaton load ( URL url ) throws IOException , OptionalDataException , ClassCastException , ClassNotFoundException , InvalidClassException { return load ( url . openStream ( ) ) ; }
va	9	public void saveBLOBData ( File file ) throws IOException { FileOutputStream fos = new FileOutputStream ( file ) ; fos . write ( BLOBData ) ; fos . close ( ) ; }
va	9	public static < T > BasicPool < T > createPool ( PoolConfig config , IdleEntriesQueue < T > queue , PoolEntryFactory < T > factory ) { return new BasicPool < T > ( config , queue , factory ) ; }
va	6	@ Test public void test_0203_FRAME_TITLE_SRC ( ) throws Exception { doTest ( getClass ( ) . getResource ( "/w3.org/WAI/UA/TS/html401/cp0203/0203-FRAME-TITLE-SRC.html" ) ) ; }
va	4	@ Test public void allStatementsErrors ( ) { parseErrorFromFile ( "C:allstatementsErrors.plp" , } , LSQUARE , ; ) ; }
va	5	public void close ( ) { ChannelFuture future = channel . close ( ) ; future . awaitUninterruptibly ( ) ; }
va	3	public void setBlocSize ( int t ) { m_t = t ; }
va	2	public String getName ( ) { return "Sheep" ; }
va	1	public void removeLast ( ) { }
va	3	public String getNewName ( ) { return newName ; }
va	10	public ExtNullPointerException ( Throwable ex , String fmt , Object [ ] args ) { super ( fmt ) ; if ( ex != null && fmt == null ) { _isWrapper = true ; } else { _isWrapper = false ; } _next = ex ; _args = args ; }
va	5	public String toString ( ) { return " at " + this . index + " [character " + this . character + " line " + this . line + "]" ; }
va	4	public AnimationTreeRenderer ( AnimationTree manager ) { this . animationTree = manager ; }
va	6	private void jComboBoxSportsBookingActionPerformed ( java . awt . event . ActionEvent evt ) { }
va	3	public Builder id ( String id ) { this . id = id ; return this ; }
va	3	public void setName ( String name ) { this . name = name ; }
va	8	public ChartPanel getChart ( ) { ChartPanel cp = new ChartPanel ( createChart ( ) ) ; cp . setPreferredSize ( new Dimension ( width , height ) ) ; return cp ; }
va	7	@ Test public void test_05_getAll ( ) { System . out . println ( User . getAllUsers ( ) ) ; }
va	1	private ByteTestUtil ( ) { }
va	2	public boolean isCookable ( ) { return cookable ; }
va	4	public void dbgShowGameState ( boolean enabled ) { if ( enabled ) debugflags |= GAMESTATE_DEBUG ; else debugflags &= ~ GAMESTATE_DEBUG ; }
va	4	public void setResult ( int res ) { isDone = true ; result = res ; }
va	1	public int recoverHealth ( ) { return 0 ; }
va	9	static void SETARG_A ( InstructionPtr i , int u ) { i . set ( ( i . get ( ) & ( MASK_NOT_A ) ) | ( ( u << POS_A ) & MASK_A ) ) ; }
va	10	public ShipAction getShipAction ( List < Direction > moves , List < Coordinate > shots ) { return new ShipAction ( new ShipIdentifier ( shipId , playerId ) , shots , moves ) ; }
va	10	@ Override public void paintComponent ( Graphics g ) { super . paintComponent ( g ) ; g . setColor ( this . textColor ) ; g . drawString ( text , getWidth ( ) / 2 - 70 , getHeight ( ) / 2 ) ; }
va	9	private boolean isDisambiguationPage ( JsonObject page ) { if ( page . has ( PAGE_PROPERTIES_KEY ) ) { JsonObject pageprops = page . get ( PAGE_PROPERTIES_KEY ) . getAsJsonObject ( ) ; return pageprops . has ( DISAMBIGUATION_PAGE_KEY ) ; } else { return false ; } }
va	4	@ SuppressWarnings ( "null" ) public static void main ( String [ ] args ) { }
va	3	SortCriteria ( String prop ) { this . prop = prop ; }
va	8	public int getGaps2 ( ) { int count = 0 ; for ( int i = 0 , n = sequence2 . length ; i < n ; i ++ ) { if ( sequence2 [ i ] == Alignment . GAP ) { count ++ ; } } return count ; }
va	3	public synchronized void setLineThickness ( float f ) { mLineThickness = f ; }
va	3	public void setGenre ( String genre ) { this . genre = genre ; }
va	1	public void UnLoad ( ) { super . UnLoad ( ) ; }
va	3	public Integer getCI ( ) { return CI ; }
va	9	private static int getAppLogLevel ( ) { String logLevel = ApplicationConfig . getStringProp ( "teatime.common.loglevel" ) ; if ( "debug" . equalsIgnoreCase ( logLevel ) ) { return LOG_LEVEL_DEBUG ; } else if ( "info" . equalsIgnoreCase ( logLevel ) ) { return LOG_LEVEL_INFO ; } else if ( "error" . equalsIgnoreCase ( logLevel ) ) { return LOG_LEVEL_ERROR ; } else { return LOG_LEVEL_DEBUG ; } }
va	6	private static int calcDist ( * * , * star2 ) { return ( int ) ( Math . pow ( * . x - star2 . x , 2 ) + Math . pow ( * . y - star2 . y , 2 ) ) ; }
va	7	public Screen ( int x , int y , int width , int height , RenderManager manager ) { this . x = x ; this . y = y ; this . height = height ; this . width = width ; }
va	7	public void crear ( Issue issue ) throws SQLException { if ( issueDAO . exists ( issue ) == false ) { issueDAO . add ( issue ) ; } else { throw new SQLException ( "No se puede crear un nuevo issue ya que este issue ya existe" ) ; } }
va	9	public static boolean validaCorreo ( String correo ) { String email_pattern = "^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@" + "[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2 })$" ; Pattern patron = Pattern . compile ( email_pattern ) ; return patron . matcher ( correo ) . matches ( ) ; }
va	10	private void jLabel5MouseClicked ( java . awt . event . MouseEvent evt ) { ControlVentanas . crearFace ( this . usuarioLogueado ) ; this . dispose ( ) ; }
va	8	public void pause ( ) { time . stop ( ) ; panel . pause ( ) ; button . setEnabled ( false ) ; dc . pause ( ) ; timeLabel . pause ( ) ; }
va	5	public void println ( double d , int dec ) { this . out . println ( this . formatDouble ( d , dec ) ) ; }
va	4	private void cancel ( ) { closeFrame ( ) ; gui . createAccountClosed ( ) ; }
va	9	public boolean setReadedCharsCount ( int charCount ) { currentPosition += charCount ; String leftString = readUnparsedData ( ) ; if ( leftString . startsWith ( separator ) ) { currentPosition += separator . length ( ) ; return true ; } else { return false ; } }
va	5	public List < Modificationtype > getItemsAvailableSelectOne ( ) { return getFacade ( ) . findAll ( ) ; }
va	2	public Paragraphs createParagraphs ( ) { return new Paragraphs ( ) ; }
va	10	@ ManyToOne ( fetch = FetchType . LAZY ) @ JoinColumn ( name = "loc_id" , nullable = false ) public LocationTbl getLocationTbl ( ) { return this . locationTbl ; }
va	8	public QueryUtil ( Query query , ParameterMapper parameterMapper , ResultSetMapper resultSetMapper ) { super ( query ) ; this . sizeOfParameters = query . sizeOfParameters ( ) ; this . parameterMapper = parameterMapper ; this . resultSetMapper = resultSetMapper ; }
va	9	@ Override public boolean addGenero ( GeneroModel pGenero , String pUsuario ) { RepositoriosFactory repoFactory = new RepositoriosFactory ( ) ; return repoFactory . createRepositorioGeneros ( ) . addGenero ( pGenero , pUsuario ) ; }
va	6	@ Test public void test_0207_IMG_ALT ( ) throws Exception { doTest ( getClass ( ) . getResource ( "/w3.org/WAI/UA/TS/html401/cp0207/0207-IMG-ALT.html" ) ) ; }
va	5	public boolean contains ( long value ) { int i = size - 1 ; long [ ] items = this . items ; while ( i >= 0 ) { if ( items [ i -- ] == value ) { return true ; } } return false ; }
va	6	@ Override public void appendMessage ( String msg ) { this . append ( "AVVISO (" + now ( ) + "): " + msg + ".\n" ) ; }
va	1	public Builder ( ) { }
va	9	@ Override public void actionPerformed ( ActionEvent e ) { ConvertRaiders cr = app . getConvertRaiders ( ) ; cr . activateCode ( 100 ) ; }
va	3	public TimingThreadPool ( ) { super ( 1 , 1 , 0 , TimeUnit . SECONDS , null ) ; }
va	10	public GSprite ( GSprite other ) { super ( ) ; this . images = new ArrayList < Image > ( other . images ) ; this . nineSliceCenter = other . nineSliceCenter == null ? null : new Rectangle ( other . nineSliceCenter ) ; this . primitive = other . primitive ; this . frame = other . frame ; this . playing = other . playing ; }
va	8	public MailboxException ( Mailbox < ? , ? > mbox , String message , Throwable cause ) { super ( message , cause ) ; this . mailbox = mbox ; }
va	7	public static void print ( double [ ] array ) { System . out . println ( ArraysExt . toString ( array ) ) ; }
va	4	@ Override public double [ ] GetInitialParams ( double lp , double rp ) { return null ; }
va	9	@ Override public JsonElement serialize ( boolean src , Type srcType , JsonSerializationContext context ) { return new JsonPrimitive ( src ? 1 : 0 ) ; }
va	1	public DialogHelperTest ( ) { }
va	7	public IITOperationStatus convertTracks ( Variant iTracksToConvert ) { return new IITOperationStatus ( Dispatch . call ( this , "ConvertTracks" , iTracksToConvert ) . toDispatch ( ) ) ; }
va	10	@ Parameters public static Collection < StorageMode [ ] > data ( ) throws IOException { StorageMode [ ] [ ] data = { { StorageMode . PureFile } , { StorageMode . MemoryMappedPlusFile } , { StorageMode . OffHeapPlusFile } } ; return Arrays . asList ( data ) ; }
va	9	public void addLinkFeature ( long code , FeatureVector fv ) { int id = smnAlphabet . lookupIndex ( code , numLinkFeats ) ; if ( id >= 0 ) { fv . addEntry ( id , 1.0 ) ; if ( id == numLinkFeats ) ++ numLinkFeats ; } }
va	6	public void open ( InputStream inputStream ) throws BasicPlayerException { if ( inputStream != null ) { m_dataSource = inputStream ; initAudioInputStream ( ) ; } }
va	9	public static int Cardinality ( Object obj , Collection coll ) { if ( coll == null ) { throw new NullPointerException ( ) ; } if ( obj == null ) { throw new NullPointerException ( ) ; } for ( Object o : coll ) { if ( o . equals ( obj ) ) { total ++ ; } } return total ; }
va	8	@ Test public void STEEL_attacking_GHOST ( ) { assertEquals ( 1.0 , tc . getWeaknessResistance ( Type . STEEL , Type . GHOST ) , 0.0 ) ; }
va	9	@ Test public void konstruktoriAlustaaLuokkamuuttujatOikein ( ) { assertEquals ( "Pit\u00E4isi olla musta" , Vari . VALKOINEN , testattava1 . vari ) ; assertEquals ( "Pit\u00E4isi olla valkoinen" , Vari . MUSTA , testattava2 . vari ) ; }
va	4	HelpVisitor ( boolean showHidden ) { this . showHidden = showHidden ; topLevel . println ( "Global options:" ) ; }
va	1	public void startNewGame ( ) { }
va	3	public Vector2f getCenterPosition ( ) { return centerPosition ; }
va	7	@ SuppressWarnings ( { "unchecked" , "varargs" } ) public static < T > String join ( T ... values ) { return joinWithDelimiter ( DEFAULT_ARRAY_DELIMITER , values ) ; }
va	7	public PlaceDisc ( Integer column ) { this . column = column ; protocolRepresentation = String . format ( "%s %d" , NAME , column ) ; }
va	9	public String toUpdateKML ( boolean suppressEnclosingTags ) { if ( ! isDirty ( ) ) { return "" ; } String change = "" ; boolean isPrimDirty = isPrimitiveDirty ( ) ; if ( isPrimDirty && ! suppressEnclosingTags ) { change += "<Create" ; change += ">\n" ; } change += super . toUpdateKML ( true ) ; if ( this . folder != null && this . folder . isDirty ( ) ) { change += this . folder . toUpdateKML ( ) ; } if ( isPrimDirty && ! suppressEnclosingTags ) { change += "</Create>\n" ; } setNotDirty ( ) ; return change ; }
va	10	public void drawMark ( int x , int y , Color color ) { g . setColor ( color ) ; g . fillRect ( x * xScale , y * yScale , xScale - 1 , yScale - 1 ) ; }
va	4	public Cut ( String delimiter , String [ ] as ) { this ( as ) ; this . delimiter = delimiter ; }
va	9	@ Override public void enterState ( int id , Transition leave , Transition enter ) { if ( gui != null ) { gui . setRootPane ( emptyRootWidget ) ; } super . enterState ( id , leave , enter ) ; }
va	7	public ImageBuffer ( int [ ] pixels , int w , int h ) { pix = pixels ; width = w ; height = h ; }
va	1	public Producer ( ) { }
va	9	public Logger ( String fileName ) { try { _writer = new PrintWriter ( fileName , "UTF-8" ) ; } catch ( FileNotFoundException e ) { e . printStackTrace ( ) ; } catch ( UnsupportedEncodingException e ) { e . printStackTrace ( ) ; } }
va	10	public void warning ( org . xml . sax . SAXParseException sAXParseException ) throws org . xml . sax . SAXException { System . out . println ( "Warning: " + sAXParseException ) ; }
va	4	public void addPropertyChangeListener ( PropertyChangeListener listener ) { changeSupport . addPropertyChangeListener ( listener ) ; }
va	8	@ Override public Struct createStruct ( String typeName , Object [ ] attributes ) throws SQLException { return null ; }
va	3	public void setSqlLoginPassword ( String sqlLoginPassword ) { this . sqlLoginPassword = sqlLoginPassword ; }
va	6	public void addFirst ( Object o ) { addBefore ( o , header . next ) ; }
va	2	public int getY ( ) { return y ; }
va	9	public static String getFileDirPath ( final String path ) { Matcher m = FILENAME_IN_PATH_PATTERN . matcher ( path ) ; if ( ! m . find ( ) ) return null ; return m . group ( 1 ) ; }
va	10	@ Override public boolean equals ( Object o ) { if ( this == o ) return true ; if ( o == null || getClass ( ) != o . getClass ( ) ) return false ; Triplet triplet = ( Triplet ) o ; if ( i != triplet . i ) return false ; if ( j != triplet . j ) return false ; if ( k != triplet . k ) return false ; return true ; }
va	3	public Set getSoyeulyliches ( ) { return this . soyeulyliches ; }
va	4	public static PrintWriter getFilePrintWriter ( String fn ) { return getFilePrintWriter ( fn , false ) ; }
va	9	public void fightTo ( Point2 target ) { aiMode = CharacterAIMode . FIGHT ; pathingTarget . set ( target ) ; clearFailStrikes ( ) ; }
va	9	@ Override public int hashCode ( ) { int hash = 7 ; hash = 29 * hash + ( this . type != null ? this . type . hashCode ( ) : 0 ) ; hash = 29 * hash + ( int ) ( this . length ^ ( this . length >>> 32 ) ) ; hash = 29 * hash + ( int ) ( this . sizeof ^ ( this . sizeof >>> 32 ) ) ; hash = 29 * hash + ( this . isConstant ? 1 : 0 ) ; hash = 29 * hash + ( this . parent != null ? this . parent . hashCode ( ) : 0 ) ; hash = 29 * hash + ( int ) ( this . ptr ^ ( this . ptr >>> 32 ) ) ; return hash ; }
va	6	public void waitUntilGuiClosed ( ) { synchronized ( gui_lock ) { try { while ( gui_open ) { gui_lock . wait ( ) ; } } catch ( InterruptedException e ) { } } }
va	5	public java . lang . String getDesk ( ) { return desk ; }
va	7	@ Override protected void buildInternal ( MultiLabelInstances trainingSet ) throws Exception { br . build ( trainingSet ) ; }
va	9	public Fight ( ArrayList < Character > newPlayers , Character newEnemy ) { this ( ) ; players . addAll ( newPlayers ) ; enemies . add ( newEnemy ) ; }
va	4	public CKeyEvent nextKeyEvent ( ) { return KeysQueue . poll ( ) ; }
va	3	public String getColumnName ( int column ) { switch ( column ) { case 0 : return "Game" ; case 1 : return "\u21BB" ; default : return "" ; } }
va	2	public int getWeight ( ) { return weight ; }
va	1	public int cdlDojiStarLookback ( ) { return super . cdlDojiStarLookback ( ) ; }
va	9	public void handleTag ( XMLParser < Tweets > aParser , boolean aIsStartTag , Tweets aUserObject ) { if ( aIsStartTag ) aUserObject . addTweet ( currentTweet = new Tweet ( ) ) ; }
va	1	public XMLReaderStAXException ( ) { }
va	5	@ Override public String toString ( ) { return m_name + " - " + m_desc ; }
va	6	public void setHintAlignment ( int horizontalAlignment , int verticalAlignment ) { hint . setHorizontalAlignment ( horizontalAlignment ) ; hint . setVerticalAlignment ( verticalAlignment ) ; }
va	3	public Color getColor ( ) { return color ; }
va	3	public String getOsgiName ( ) { return osgiName ; }
va	7	public RowAtom ( final Sudoku sudoku , final int row , final int val ) { super ( sudoku ) ; this . row = row ; this . val = val ; for ( int col = 0 ; col < 9 ; ++ col ) { attach ( row , col , val ) ; } }
va	5	public void addResetButtonListener ( ActionListener reset ) { resetButton . addActionListener ( reset ) ; }
va	9	@ Override protected void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { processRequest ( request , response ) ; }
va	10	public DisplayOrientation ( Orientations o ) { myOrientation = o ; xSize = TFT_X_SIZE ; ySize = TFT_Y_SIZE ; if ( ( o == Orientations . left ) || ( o == Orientations . right ) ) { xSize = TFT_Y_SIZE ; ySize = TFT_X_SIZE ; } }
va	3	public Zustand gibZustand ( ) { return subjektZustand ; }
va	9	public LeaveGameController ( EntityManager em , List < IGame > gameList , MainController mC ) { super ( em ) ; this . gameList = gameList ; this . mainController = mC ; }
va	4	public void mouseEntered ( MouseEvent e ) { updateLocale ( e ) ; }
va	4	public boolean open ( ) { System . out . println ( "The door swings open." ) ; return true ; }
va	8	@ Override public void connect ( String host , String user , String password ) throws MessagingException { throw new UnsupportedOperationException ( ) ; }
va	6	static void register ( CommandID id ) { reverse . put ( id . getId ( ) , id ) ; }
va	4	public addToTextWindow ( String text ) { textToAdd = text ; }
va	3	public int getSongCount ( ) { return getFirstFreeEntryOffset ( ) / SONG_ENTRY_SIZE ; }
va	5	public void setFrom ( String from ) { paramPush ( FROM , from ) ; this . from = from ; }
va	8	@ Override public boolean accept ( File file ) { if ( file . isDirectory ( ) ) { return true ; } return file . getName ( ) . endsWith ( extension ) ; }
va	8	public static String getDeltaT ( GregCalPlus g1 , GregCalPlus g2 , boolean useFuzzyMode ) { return useFuzzyMode ? secsToFuzzyHMS ( getDeltaT ( g1 , g2 ) ) : secsToExactHMS ( getDeltaT ( g1 , g2 ) ) ; }
va	2	synchronized void clear ( ) { thread = null ; }
va	8	@ Override public boolean equals ( Object obj ) { if ( ! ( obj instanceof Type ) ) { return false ; } Type t = ( Type ) obj ; return mSeries == t . mSeries && mShape == t . mShape ; }
va	10	protected int hashValue ( K key ) { return ( int ) ( ( Math . abs ( key . hashCode ( ) * scale + shift ) % prime ) % capacity ) ; }
va	6	@ Override public int compareTo ( Toll o ) { if ( o == null ) { return - 1 ; } return end . compareTo ( o . start ) ; }
va	1	public void debug ( ) { this . debug = ! this . debug ; }
va	8	private void jBCadastrarChamadoActionPerformed ( java . awt . event . ActionEvent evt ) { new TelaGestaoChamado ( this , true ) . setVisible ( true ) ; }
va	7	public final SortedSet < String > output_names ( ) { SortedSet < String > s = new TreeSet < String > ( ) ; s . addAll ( this . output_names . keySet ( ) ) ; return s ; }
va	5	public boolean match ( String identifier ) { return myIdentifier . equals ( identifier ) ; }
va	2	public void setMemberID ( int memberID ) { this . memberID = memberID ; }
va	4	public GeneratorTest ( AbstractGenerator gen ) { this . generator = gen ; }
va	9	@ Override protected void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { processRequest ( request , response ) ; }
va	4	public void setSexo ( String x ) { this . sexo = x ; }
va	1	public int creation ( ) { return creation ; }
va	3	void progIncr ( ) { progress += 1 ; setProgress ( progress ) ; }
va	3	public void setEngine2 ( Engine engine2 ) { this . engine2 = engine2 ; }
va	6	public AbstractItem ( int id , String name , TexInfo texinfo ) { this . name = name ; this . texinfo = texinfo ; this . id = id ; }
va	2	public GetGroupsResponse createGetGroupsResponse ( ) { return new GetGroupsResponse ( ) ; }
va	6	@ BeforeClass public static void setUpBeforeClass ( ) throws Exception { System . out . println ( "before test##############################################################" ) ; }
va	2	public ItemStack getDrop ( ) { return null ; }
va	4	public static void main ( String [ ] args ) { new ConcentricSquaresFrame ( ) ; }
va	1	public get ( ) { super ( "get" ) ; }
va	7	public void displayOutput ( String error ) { history . addOutput ( error ) ; clearLine ( ) ; addOutput ( error ) ; addCommandMarker ( ) ; }
va	4	public void setArch ( TTTGameArch arch ) { _arch = arch ; }
va	3	public void setPesquisadorResponsavel ( Pesquisador pesquisadorResponsavel ) { this . pesquisadorResponsavel = pesquisadorResponsavel ; }
va	3	protected void disableLimits ( ) { sendCommand ( new DisableLimitsCommand ( ) ) ; }
va	3	public Integer getProfessorId ( ) { return professorId ; }
va	4	public static boolean getMouse ( int mouseButton ) { return Mouse . isButtonDown ( mouseButton ) ; }
va	1	public MessageFactory ( ) { }
va	3	public void setDialedCalls ( Call [ ] dialedCalls ) { this . dialedCalls = dialedCalls ; }
va	5	static float Y_to_L ( float Y ) { return 116.0f * lab_f_to ( Y ) - 16.0f ; }
va	7	public PathComparator ( Heuristic < N > heuristic , N target ) { mHeuristic = heuristic ; mTarget = target ; }
va	2	public void setClz ( class < ? > clz ) { this . clz = clz ; }
va	10	@ Override public boolean equals ( Object obj ) { if ( this == obj ) return true ; if ( obj == null ) return false ; if ( getClass ( ) != obj . getClass ( ) ) return false ; Demo other = ( Demo ) obj ; if ( ! getOuterType ( ) . equals ( other . getOuterType ( ) ) ) return false ; if ( method == null ) { if ( other . method != null ) return false ; } else if ( ! method . equals ( other . method ) ) return false ; if ( name == null ) { if ( other . name != null ) return false ; } else if ( ! name . equals ( other . name ) ) return false ; return true ; }
va	4	@ Override public Type get ( ) { return m_type ; }
va	3	public void setValor ( Integer valor ) { this . valor = valor ; }
va	10	public void persist ( Chucvu transientInstance ) { log . debug ( "persisting Chucvu instance" ) ; try { sessionFactory . getCurrentSession ( ) . persist ( transientInstance ) ; log . debug ( "persist successful" ) ; } catch ( RuntimeException re ) { log . error ( "persist failed" , re ) ; throw re ; } }
va	3	public String getUserAnswerName ( ) { return userAnswerName ; }
va	8	@ Test ( expected = ParseException . class ) public void shouldRaiseParseExceptionWhenQuotesCountIsOdd ( ) throws ParseException { new CsvParser ( getStrategy ( ) ) . parse ( "Kronverk \"red\" \"\u041A\u043E\u0440\u043F\u043E\u0440\u0430\u0446\u0438\u044F \"\u041C\u0430\u0440\u0438\u043E\u043D\u0435\u0442\u043A\u0438\" 20.08.2014 5 6 60.00 8" ) ; }
va	2	public double getMaxyearOfProduction ( ) { return maxyearOfProduction ; }
va	10	@ Override public boolean equals ( Object obj ) { if ( this == obj ) return true ; if ( obj == null ) return false ; if ( getClass ( ) != obj . getClass ( ) ) return false ; Tariff other = ( Tariff ) obj ; if ( EndDate == null ) { if ( other . EndDate != null ) return false ; } else if ( ! EndDate . equals ( other . EndDate ) ) return false ; if ( Price == null ) { if ( other . Price != null ) return false ; } else if ( ! Price . equals ( other . Price ) ) return false ; if ( StartDate == null ) { if ( other . StartDate != null ) return false ; } else if ( ! StartDate . equals ( other . StartDate ) ) return false ; return true ; }
va	8	public GUI ( String title , int width , int height ) { m_Title = title ; setWidth ( width ) ; setHeight ( height ) ; }
va	1	public TabelaWynikow ( ) { }
va	5	public javax . swing . JComboBox getjCSexo ( ) { return jCSexo ; }
va	10	@ Test public void testFieldMapping ( ) { final Set < String > expected = new HashSet < > ( ) ; expected . add ( "field-1" ) ; expected . add ( "field-2" ) ; assert . assertEquals ( expected , this . mapper . getDistinctFields ( ) ) ; }
va	9	public static boolean searchMatrix ( int [ ] [ ] matrix , int target ) { if ( matrix == null || matrix . length == 0 || matrix [ 0 ] . length == 0 ) return false ; if ( target < matrix [ 0 ] [ 0 ] ) return false ; int row = search ( matrix , target ) ; int i = 0 ; int j = matrix [ row ] . length - 1 ; while ( i <= j ) { int mid = ( i + j ) / 2 ; if ( matrix [ row ] [ mid ] == target ) { return true ; } else if ( matrix [ row ] [ mid ] < target ) { i = mid + 1 ; } else { j = mid - 1 ; } } return false ; }
va	4	public void removeMouseMotionListener ( MouseMotionListener arg0 ) { render . removeMouseMotionListener ( arg0 ) ; }
va	8	public ISAACRandomGen ( int seed [ ] ) { memory = new int [ 256 ] ; results = new int [ 256 ] ; System . arraycopy ( seed , 0 , results , 0 , seed . length ) ; initializeKeySet ( ) ; }
va	10	protected final short get_action ( int state , int sym ) { short tag ; int first , last , probe ; short [ ] row = action_tab [ state ] ; if ( row . length < 20 ) for ( probe = 0 ; probe < row . length ; probe ++ ) { tag = row [ probe ++ ] ; if ( tag == sym || tag == - 1 ) { return row [ probe ] ; } } else { first = 0 ; last = ( row . length - 1 ) / 2 - 1 ; while ( first <= last ) { probe = ( first + last ) / 2 ; if ( sym == row [ probe * 2 ] ) return row [ probe * 2 + 1 ] ; else if ( sym > row [ probe * 2 ] ) first = probe + 1 ; else last = probe - 1 ; } return row [ row . length - 1 ] ; } return 0 ; }
va	1	public Address ( ) { }
va	8	@ Override public < R , P > R accept ( InstructionVisitor < ? extends R , ? super P > visitor , P parameter ) { return visitor . visitRepeat ( this , parameter ) ; }
va	1	public float getWidth ( ) { return 10 ; }
va	7	public static String generateRandomValue ( int base , int addition ) { return generateRandomString ( base + random . nextInt ( addition ) ) ; }
va	1	public DoubleListValueCreator ( ) { super ( true ) ; }
va	2	@ Override public boolean isLeaf ( ) { return false ; }
va	7	private void fireIOException ( IOException ioe ) { for ( PeerActivityListener listener : this . listeners ) { listener . handleIOException ( this , ioe ) ; } }
va	7	public int getRight ( ) { return Dispatch . get ( this , "Right" ) . changeType ( Variant . VariantInt ) . getInt ( ) ; }
va	4	public EntityManager getEntityManager ( ) { return this . emf . createEntityManager ( ) ; }
va	10	@ Test public void testNeighborsEarth2756 ( ) { int [ ] expectedNeighbors = { 2755 , 2863 , 2864 , 2757 , 2648 , 2647 } ; testNeighbors ( 2756 , expectedNeighbors , "2647 and 2648" ) ; assert . assertEquals ( mesh . getNeighbor ( 2756 , Directions . southwest ) , 2647 , "Expected earth cell 2756's southwest neighbor to be 2647." ) ; assert . assertEquals ( mesh . getNeighbor ( 2756 , Directions . southeast ) , 2648 , "Expected earth cell 2756's southeast neighbor to be 2648." ) ; }
va	10	@ Test public void ShouldIdentifyHandWithAceAsBeginningAsConsecutive ( ) { String hand = "AS 2S 3S 4S 5S" ; boolean expected = true ; Hand thisHand = new Hand ( hand ) ; boolean result = thisHand . IsConsecutive ( ) ; assert . assertEquals ( expected , result ) ; }
va	5	public void push ( T val ) { stackArray [ ++ top ] = val ; }
va	8	@ Test public void unequalKey6 ( ) { byte [ ] key1 = intArrayToByteArray ( - 9 , - 74 , - 117 , 87 , 0 , 0 , 0 , 0 ) ; byte [ ] key2 = intArrayToByteArray ( - 9 , - 74 , - 121 , 23 , 0 , 0 , 0 , 0 , 41 , - 5 , 0 , 0 , 0 , 2 , 0 , 0 , 0 , 0 , 0 , 0 , - 72 , 35 , - 2 , - 74 , - 5 , 124 , 0 , 0 , 0 , 0 , 0 ) ; if ( KeyUtils . compareKey ( key1 , key2 ) == 1 ) { assert . assertTrue ( true ) ; } }
va	1	public double doubleValue ( ) { return doubleValue ; }
va	10	public void fire ( ) { double bulletPower = Rules . MIN_BULLET_POWER ; bot . bulletPower = bulletPower ; if ( bot . getGunHeat ( ) == 0 ) { Bullet b = bot . setFireBullet ( bulletPower ) ; bot . registerBullet ( b ) ; } }
va	5	public void setMessage ( String m ) { messageTextField . setText ( m ) ; }
va	7	public void resetEntities ( ) { final Entity [ ] entities = getEntities ( ) ; for ( final Entity entity : entities ) { if ( entity . isAlive ( ) ) { entity . reset ( ) ; } } }
va	9	public ShipAction ( ShipIdentifier shipID , List < Coordinate > shots , List < Direction > moves ) { this . shipIdentifier = shipID ; this . shots = shots ; this . moves = moves ; }
va	4	AuthMethod ( String value , String ts_value ) { this . value = value ; this . ts_value = ts_value ; }
va	6	@ Test public void testGetContextSwitchNum ( ) { assertEquals ( ContextSwitchNum , cpustat . getContextSwitchNum ( ) ) ; }
va	1	public DummyBoardEventProducer ( ) { }
va	9	private void addCitizenshipToSearchRequest ( HttpServletRequest request , SearchRequest searchRequest ) { searchRequest . addParam ( FormParameter . CITIZENSHIP , getCitizenship ( request ) ) ; }
va	3	public String getName ( ) { return name ; }
va	1	public boolean reinseignerHoraires ( ) { return false ; }
va	1	public void back ( ) { }
va	7	private void btnCancelarActionPerformed ( java . awt . event . ActionEvent evt ) { abilitaDesabilitaBnt ( true ) ; }
va	9	public static void beginTimer ( int x ) { setTime ( x ) ; getTimerLabel ( ) . setText ( "Time elapsed: " + String . format ( "%02d" , ( getTime ( ) / 3600 ) % 60 ) + ":" + String . format ( "%02d" , ( getTime ( ) / 60 ) % 60 ) + ":" + String . format ( "%02d" , getTime ( ) % 60 ) ) ; startTimer ( ) ; }
va	4	public void setArriveBy ( boolean arriveBy ) { paramPush ( ARRIVE_BY , arriveBy ) ; this . arriveBy = arriveBy ; }
va	3	public String getAlbum_Id ( ) { return album_Id ; }
va	2	public void setId ( int id ) { this . id = id ; }
va	5	public ServiceLocatorException ( String message , Exception exception ) { super ( message ) ; this . exception = exception ; return ; }
va	7	@ Test ( expected = IllegalStateException . class ) public void fail_noBinding ( ) { easyDI . getInstance ( A . class ) ; }
va	3	public CommandRegistration ( Plugin plugin ) { this ( plugin , plugin ) ; }
va	7	public static UnitType getPreType ( int value ) { UnitType [ ] list = UnitType . values ( ) ; if ( list != null ) { for ( UnitType obj : list ) { if ( obj . getValue ( ) == value ) { return obj ; } } } return null ; }
va	3	public DistanceComparator ( Vec3f center ) { this . center = center ; }
va	10	public long readLong ( FileChannel fileChannel , long position ) throws IOException { byte [ ] bytes = readBytes ( fileChannel , position , 8 ) ; return ByteBuffer . wrap ( bytes ) . getLong ( ) ; }
va	10	public List < T > getRowsAsList ( int ... rows ) { ArrayList < T > rowData = new ArrayList < T > ( rows . length ) ; for ( int i = 0 ; i < rows . length ; i ++ ) { rowData . add ( getRow ( rows [ i ] ) ) ; } return rowData ; }
va	3	public PopulationRecordTable ( String name ) { this . name = name ; }
va	8	public static void intialiseLogger ( ) { System . out . println ( "Initialising logger" ) ; AbstractLogger logger = new ConsoleAppender ( ) ; logger . initialise ( ) ; }
va	4	public boolean isNumber ( String s ) { return isNumber_01 ( s ) ; }
va	8	private CardCombinator ( CardCombinationCallback callback , List < Card > cards , int handCardsLength ) { this . positions = new int [ handCardsLength ] ; this . callback = callback ; this . cards = cards ; this . handCardsLength = handCardsLength ; }
va	9	public DownloadTask ( String selectedPath , String localPath , long fileSize , FileInfo fileInfo ) { super ( ) ; this . setType ( "Download" ) ; this . localPath = localPath ; this . selectedPath = selectedPath ; this . setMax ( fileSize ) ; this . fileInfo = fileInfo ; }
va	4	public Lista < T > getTail ( ) { return tail ; }
va	10	public CursoTabela ( ) throws Exception { view . setBorder ( new TitledBorder ( new EtchedBorder ( ) , "Curso" ) ) ; list = new CursoDAO ( ) . listar ( "" ) ; preencherTabela ( ) ; }
va	3	public Controller getController ( ) { return myController ; }
va	3	public String getCurrentTime ( ) { return currentTime ; }
va	6	public Edge ( Node sourceNode , Node targetNode , boolean directed , int weight ) { this . sourceNode = sourceNode ; this . targetNode = targetNode ; this . directed = directed ; this . weight = weight ; }
va	2	public long getOsoby_osoba_id ( ) { return osoby_osoba_id ; }
va	6	@ Override public LongWritable getCurrentKey ( ) throws IOException , InterruptedException { return key ; }
va	6	private InsertParameter ( String tableAlias , String parameterName , Object parameterValue ) { super ( tableAlias , parameterName ) ; this . parameterValue = parameterValue ; }
va	8	@ Override public void update ( MouseEvent e ) { getGraphics ( ) . fillArc ( e . getX ( ) , e . getY ( ) , 5 , 5 , 0 , 360 ) ; }
va	1	public boolean percolates ( ) { return percolates ; }
va	2	public void setCollapsable ( boolean collapsable ) { this . collapsable = collapsable ; }
va	1	public void decay ( ) { }
va	7	public MyResult ( int itemID , String brand , String model , String status , String source ) { super ( ) ; this . itemID = itemID ; this . brand = brand ; this . model = model ; this . status = status ; this . source = source ; }
va	5	public List < Room > getRoomList ( ) { return roomService . loadAllRoomsSortedBYBuildungAndNumber ( ) ; }
va	1	public KeytypeController ( ) { }
va	2	public boolean isLarge ( ) { return ptr != 0 ; }
va	5	public static void main ( String [ ] args ) { String [ ] [ ] array = new String [ ] [ ] { new String [ ] { "a1" , "b1" , "c1" } , new String [ ] { "a2" , "b2" , "c2" , "d2" } , new String [ ] { "a3" , "b3" } , new String [ ] { "a4" } } ; print ( array ) ; }
va	8	@ Override public boolean canExecute ( final CommandSender sender , final String [ ] split ) { return split [ 0 ] . contains ( "irc" ) && split [ 1 ] . equalsIgnoreCase ( "connect" ) ; }
va	10	@ Override public String toString ( ) { return "Conference [serverCode=" + serverCode + "  conferenceName=" + conferenceName + "  conferenceRunTime=" + conferenceRunTime + "  conferenceMemberCount=" + conferenceMemberCount + "  members=" + members + "  apiId=" + apiId + "  error=" + error + "]" ; }
va	4	public Room ( final String roomName ) { this . name = roomName ; }
va	10	public void setVoters ( List < ? extends Identifiable > voters ) throws ServerException { votes = new Vote [ voters . size ( ) ] ; for ( int i = 0 ; i < voters . size ( ) ; i ++ ) { if ( voters . get ( i ) == null ) { throw new ServerException ( ) ; } votes [ i ] = new Vote ( voters . get ( i ) ) ; } }
va	5	public synchronized void registerPlayerListener ( AllPlayerStepListener listener ) { listeners . add ( listener ) ; }
va	2	public int getMode ( ) { return modeMon . getMode ( ) ; }
va	9	@ Override public boolean equals ( Object obj ) { if ( null == obj ) { return false ; } if ( this == obj ) { return true ; } if ( obj instanceof PostParameter ) { PostParameter that = ( PostParameter ) obj ; if ( file != null ? ! file . equals ( that . file ) : that . file != null ) return false ; return this . name . equals ( that . name ) && this . value . equals ( that . value ) ; } return false ; }
va	3	public static Posicion construirPosicionConEnemigo ( ) { return new PosicionConEnemigo ( ) ; }
va	8	@ XmlElementDecl ( namespace = "com/firstdata/Merchant/gmfV3.10" , name = "MerchCnty" ) public JAXBElement < String > createMerchCnty ( String value ) { return new JAXBElement < String > ( _MerchCnty_QNAME , String . class , null , value ) ; }
va	3	public void setFuncao ( String funcao ) { this . funcao = funcao ; }
va	6	public void register ( Connector c ) { connectors . add ( c ) ; c . setParent ( this ) ; }
va	2	public boolean getCountsValid ( ) { return countsValid ; }
va	6	@ Test ( expected = ParserException . class ) public void testFPSectionNeg ( ) { createParser ( "varname1  varname2 : " ) . fpSection ( ) ; }
va	9	private JList createEmptyJList ( ) { JList j = new JList ( ) ; j . setLayoutOrientation ( JList . VERTICAL ) ; j . setSelectionMode ( ListSelectionModel . SINGLE_SELECTION ) ; j . setSize ( 200 , 500 ) ; return j ; }
va	8	@ Override public void copy ( byte [ ] input , int inputIndex , byte [ ] output , int outputIndex , int length ) { arraycopy ( input , inputIndex , output , outputIndex , length ) ; }
va	2	public void setNumCallDialed ( int numCallDialed ) { this . numCallDialed = numCallDialed ; }
va	4	public String toString ( ) { return ( "Final grade = " + finalGrade + "\n" + "Letter:  " + letter ) ; }
va	5	public void removePostProcessor ( InterpolationPostProcessor postProcessor ) { postProcessors . remove ( postProcessor ) ; }
va	1	public void right ( ) { }
va	4	@ Override public void windowOpened ( WindowEvent e ) { }
va	3	public static String escape ( String singularPluralVariations ) { return singularPluralVariations ; }
va	7	@ Override public void setLength ( int length ) { if ( isEnd && this . length > length ) { isEnd = false ; findEnd ( ) ; } this . length = length ; if ( start + length > totalLength ) { totalLength = start + length ; isEnd = true ; } }
va	8	public JMSMailbox ( JMSContext context , JMSMessageSerializer < RequestType > serde ) { Util . assertNotNull ( context , "context" ) ; Util . assertNotNull ( serde , "serde" ) ; this . context = context ; this . serde = serde ; }
va	4	public Nota ( long codigo , String mensaje ) { this . codigo = codigo ; this . mensaje = mensaje ; }
va	2	public void setPosX ( int posX ) { this . posX = posX ; }
va	5	< T > ClassSchema < T > getSchema ( class < T > type ) { return getSchema ( type , staticFieldPolicy ) ; }
va	2	public list ( ) { this . info = "list all venues" ; }
va	2	public void setSante ( int sante ) { this . sante = sante ; }
va	10	void loadStorm ( int tile ) { ThermalTrigger trigger ; int y0 = tile * TILE_WIDTH ; trigger = new ThermalTrigger ( app , - 4 , y0 + TILE_WIDTH / 4 , 2 , ( float ) 0.3 , 3 ) ; tiles [ tile ] . triggers . addElement ( trigger ) ; }
va	3	public Properties getHeaders ( ) { return headers ; }
va	8	public static int question ( ) { System . out . println ( "1. \uD30C\uC77C\uCC98\uB9AC 2.DB\uCC98\uB9AC" ) ; Scanner sc = new Scanner ( System . in ) ; return sc . nextInt ( ) ; }
va	3	public String getDiscPOSData ( ) { return discPOSData ; }
va	2	public int getOutputChannels ( ) { return m_iOutputChannels ; }
va	5	public void addChangeListener ( ChangeListener cl ) { subscribers . add ( cl ) ; }
va	5	public void heat ( ) { temperature = 105 ; System . out . println ( "Hottub is heating to a steaming 105 degrees" ) ; }
va	7	public String receive ( ) throws IOException { String response = read ( "\n" ) ; while ( response . equals ( "ping" ) ) { send ( "pong" ) ; response = read ( "\n" ) ; } return response ; }
va	7	@ Override public String toString ( ) { return "api_rate_limits [api=" + api + "  limit=" + limit + "  limitTimeUnit=" + limitTimeUnit + "  remainingHits=" + remainingHits + "]" ; }
va	8	public void modifySlime ( Slime s ) { s . setNumbers ( slowDwarf , slowHobbit , slowElf , slowMan ) ; }
va	5	@ Override public void insertUpdate ( DocumentEvent arg0 ) { updateProperties ( ) ; }
va	5	public void setCorrectlyAnswered ( ) { ++ _correctlyAnswered ; ++ _totalTimesAnswered ; -- _difficulty ; if ( _difficulty < MINIMUM_DIFFICULTY ) { _difficulty = MINIMUM_DIFFICULTY ; } }
va	7	@ Override public void serverConnectionChange ( String change ) { sendRequestForDefaultBuffer ( ) ; ServerConnection . removeServerConnectionListener ( this ) ; }
va	10	private void jButton2ActionPerformed ( java . awt . event . ActionEvent evt ) { new GUIinterfazMenuPresidente ( nombreUsuario ) . setVisible ( true ) ; dispose ( ) ; }
va	4	public int compareTo ( Accession a ) { return name . compareTo ( a . name ) ; }
va	7	public Token ( String readLine ) { String [ ] tmp = readLine . split ( "_" ) ; term = tmp [ 0 ] ; docID = tmp [ 1 ] ; }
va	1	public MeizituEntity ( ) { }
va	5	public Initialization ( String name ) { init ( name , DEFAULT_AGE ) ; }
va	7	public static String getProperty ( String name ) throws TransformException { return instance ( ) . getProperties ( ) . get ( name ) ; }
va	9	public static FloatBuffer asFlippedFloatBuffer ( float ... values ) { FloatBuffer buffer = BufferUtils . createFloatBuffer ( values . length ) ; buffer . put ( values ) ; buffer . flip ( ) ; return buffer ; }
va	6	private boolean whenToken ( TokenType [ ] t ) { if ( testToken ( t ) ) { data . pop ( ) ; return true ; } else { return false ; } }
va	7	public static void sysout ( String text ) { tabulate ( ) ; System . out . println ( text ) ; }
va	4	public boolean setId ( long id ) { if ( stat . qidPath != 0 ) return false ; stat . qidPath = id ; return true ; }
va	5	public IDs getFriendsIDs ( String screenName ) throws WeiboException { return getFriendsIDs ( screenName , - 1 ) ; }
va	7	public boolean contains ( Range range ) { return range . getEnd ( ) >= start && range . getStart ( ) <= end ; }
va	8	private void removeRow ( int row ) { tableModel . removeRow ( row ) ; table . setModel ( tableModel ) ; isSaved = false ; fixTitle ( ) ; table . repaint ( ) ; repaint ( ) ; }
va	2	public void setiData ( int iData ) { this . iData = iData ; }
va	3	public void setBirthDay ( Date birthDay ) { this . birthDay = birthDay ; }
va	10	private IDisplay . Type resolveDisplayType ( ) { final String display = getProperty ( "display" , "none" ) ; if ( "graphics" . equalsIgnoreCase ( display ) ) { return IDisplay . Type . GRAPHICAL ; } else if ( "text" . equalsIgnoreCase ( display ) ) { return IDisplay . Type . TEXT ; } else { return IDisplay . Type . NONE ; } }
va	2	@ Override public float getExtemp ( ) { return 0 ; }
va	6	public GoBoxWrapper ( int center_x , int center_y , int spacing , int numLines ) { this . spacing = spacing ; this . numLines = numLines ; createBoxWrapper ( center_x , center_y ) ; }
va	4	public void setImageParts ( String [ ] imageParts ) { _imageParts = imageParts ; }
va	1	public int statDrop ( ) { return 0 ; }
va	6	private JComboBox < SportDiscipline > getCB_Discipline ( ) throws SQLException , SQLDriverNotFoundException , SQLConnectionException { return getCB_Discipline ( null ) ; }
va	6	@ Override public boolean setPacketFields ( Map < String , Object > in ) { return true ; }
va	8	static int string2Int ( String s ) { try { return s . isEmpty ( ) ? 0 : Integer . parseInt ( s ) ; } catch ( RuntimeException re ) { throw new RuntimeException ( "s=" + s , re ) ; } }
va	9	@ Override public void dispatchEvent ( Event event ) { if ( hasListeners ( ) ) { for ( EventListener listener : listeners ) { listener . onEvent ( this , event ) ; } } }
va	1	public AlumnoBean ( ) { }
va	3	public PlannerError getError ( ) { return error ; }
va	5	@ Override public Option newOption ( ) { Option opOption = new RecOption ( ) ; return opOption ; }
va	3	public void incrementGrossValue ( float increment ) { grossValue += increment ; }
va	6	public JoueurAction ( String nom , int choixB ) { super ( nom ) ; choixBouton = choixB ; this . addMouseListener ( this ) ; }
va	4	private void updatePortionsLabel ( ) { if ( portions == 1 ) { portionsLabel . setText ( "1 portion" ) ; } else { portionsLabel . setText ( portions + " portions" ) ; } }
va	5	public void addAfterExplosion ( Entity e ) { this . toPlace . add ( e ) ; }
va	5	public Location ( Location other ) { __isset_bitfield = other . __isset_bitfield ; this . latitude = other . latitude ; this . longitude = other . longitude ; }
va	3	public Player getPlayer ( ) { return player ; }
va	9	public static StakeholderRoleType fromValue ( String v ) { for ( StakeholderRoleType c : values ( ) ) { if ( c . value . equals ( v ) ) { return c ; } } throw new IllegalArgumentException ( v ) ; }
va	8	@ Test public void testSkipAll ( ) { assertEquals ( 0 , Enumerable . create ( new Integer [ ] { 1 , 2 , 3 , 4 } ) . skip ( 4 ) . size ( ) ) ; }
va	10	public void drawText ( bwapi . CoordinateType . enum ctype , int x , int y , String cstr_format ) { drawText_native ( pointer , ctype , x , y , cstr_format ) ; }
va	9	public void stopListening ( ) { blnRunning = false ; if ( serverSocket != null ) { serverSocket . close ( ) ; serverSocket = null ; } if ( acceptorThread != null ) { try { acceptorThread . join ( ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } acceptorThread = null ; } }
va	4	@ Override public CartAppActionBeanContext getContext ( ) { return ctx ; }
va	6	@ Test public void testHashCode ( ) { System . out . println ( "word hello" . hashCode ( ) ) ; }
va	7	public static void main ( String [ ] args ) throws Exception { SQLServerTest myDbTest = new SQLServerTest ( ) ; myDbTest . displayDbProperties ( ) ; }
va	9	@ Test public void updateTest ( ) { newBoard . equals ( board ) ; newBoard . code ( "B100" ) . build ( ) ; assert . assertEquals ( newBoard . build ( ) . getCode ( ) , "B100" ) ; }
va	10	@ Override public FeatureVector extract ( Sample sample ) { FeatureVector fv = new FeatureVector ( ) ; for ( int [ ] signal : sample . getSignals ( ) ) { fv . add ( computeMAVSLP ( signal ) ) ; } return fv ; }
va	6	public SignatureRenderer ( ) { this . cellRenderer = new JList < > ( ) . getCellRenderer ( ) ; this . dateFormat = new SimpleDateFormat ( "( kk:mm - dd/MM/yyyy)" ) ; }
va	10	@ Override public void run ( ) { if ( i_nbDifferentCalcWay > 0 ) { while ( listWayToBrowse . size ( ) > 0 && ( listWayWithPointStop . size ( ) > 0 || listWayToBrowse . size ( ) < i_nbDifferentCalcWay ) ) { findNextPoint ( ) ; } if ( listWayToBrowse . size ( ) == 0 ) { threadManager . setHasTerminatedFirstThread ( true ) ; } } else { while ( listWayToBrowse . size ( ) > 0 ) { findNextPoint ( ) ; } } threadManager . addListWayPointStop ( listWayWithPointStop ) ; }
va	8	public void RowWiseTraverse ( int width , int height ) { for ( int row = 0 ; row < height ; row ++ ) { for ( int col = 0 ; col < width ; col ++ ) { System . out . printf ( "%d %d " , row , col ) ; } } }
va	7	public double getBand8 ( ) { return Dispatch . get ( this , "Band8" ) . changeType ( Variant . VariantDouble ) . getDouble ( ) ; }
va	5	public GameEntity ( int x , int y ) { startX = x ; startY = y ; }
va	6	public final void addEpisodes ( Collection < EpisodeMatch > episodes ) { for ( EpisodeMatch episode : episodes ) { addEpisode ( episode ) ; } }
va	3	public void setTextDecoded ( String textDecoded ) { this . textDecoded = textDecoded ; }
va	3	@ Override public double getDiscountPct ( ) { return discountPct ; }
va	2	public void setVegetarian ( boolean vegetarian ) { this . vegetarian = vegetarian ; }
va	9	@ Test ( expected = IllegalArgumentException . class ) public void testInvalidCacheConfig ( ) { CacheConfig config = new CacheConfig ( ) . setCapacityPerBlock ( 12 ) . setConcurrencyLevel ( 2345 ) . setInitialNumberOfBlocks ( 27 ) ; }
va	7	public JLabel addLabel ( String s , Container parent ) { JLabel c = new JLabel ( s ) ; addLabel ( c , parent ) ; return c ; }
va	7	@ Override public void viewSearchOnceMoreButton ( ) { searchButton . setEnabled ( false ) ; searchButton . setVisible ( false ) ; searchMoreButton . setEnabled ( false ) ; searchMoreButton . setVisible ( false ) ; searchOnceMoreButton . setVisible ( true ) ; searchOnceMoreButton . setEnabled ( true ) ; }
va	1	public Vendedor ( ) { }
va	7	public static TIPPResponseCode fromSchemaValue ( String value ) { for ( TIPPResponseCode msg : values ( ) ) { if ( msg . value . equals ( value ) ) { return msg ; } } return null ; }
va	3	@ Override public int hashCode ( ) { return this . resource . hashCode ( ) ; }
va	10	@ Override public Object concatFeatures ( Object currentValue , String newFeature ) { List < String > result = currentFeatures ( currentValue ) ; result . add ( newFeature ) ; return result ; }
va	1	public Individual ( ) { }
va	7	protected Map < String , List < String >> decodeParameters ( Map < String , String > parms ) { return this . decodeParameters ( parms . get ( QUERY_STRING_PARAMETER ) ) ; }
va	2	public boolean isGuiOpen ( ) { return gui_open ; }
va	7	public static void x ( String message ) { process ( new LogRecord ( LogType . EXCEPTION , message ) ) ; }
va	7	static boolean isShortOptionToken ( String argument ) { return argument . startsWith ( HYPHEN ) && ! HYPHEN . equals ( argument ) && ! isLongOptionToken ( argument ) ; }
va	3	public void setBodyDesignSpec ( String bodyDesignSpec ) { this . bodyDesignSpec = bodyDesignSpec ; }
va	1	protected UnknownFileTyp ( ) { super ( false ) ; }
va	10	public void testValueObjectMethods ( ) throws JSONException { JSONStringer stringer = new JSONStringer ( ) ; stringer . array ( ) ; stringer . value ( boolean . false ) ; stringer . value ( double . valueOf ( 5.0 ) ) ; stringer . value ( long . valueOf ( 5 ) ) ; stringer . endArray ( ) ; assertEquals ( "[false 5 5]" , stringer . toString ( ) ) ; }
va	5	public ScheduleSelection ( int userID , boolean editable ) { this . userID = userID ; this . editable = editable ; initComponents ( ) ; setSchedule ( userID ) ; }
va	2	public NQuadComparator ( byte mode ) { this . mode = mode ; }
va	4	protected static SettingsManager getSettingsManager ( ) { return MonsterIRC . settings ; }
va	8	protected TIPPFile ( TIPPSectionType sectionType , TIPPResourceType type , String name , int sequence ) { super ( sectionType , type , name , sequence ) ; }
va	1	public URIRefMatcher ( ) { super ( "<" , ">" ) ; }
va	3	public WrappedCoroutine ( Coroutine coroutine ) { this . coroutine = coroutine ; }
va	8	@ XmlElementDecl ( namespace = "http://resource.faturamento.soa32/" , name = "createResponse" ) public JAXBElement < CreateResponse > createCreateResponse ( CreateResponse value ) { return new JAXBElement < CreateResponse > ( _CreateResponse_QNAME , CreateResponse . class , null , value ) ; }
va	2	public int getIconHeight ( ) { return height ; }
va	1	public boolean isConnected ( ) { return isConnected ; }
va	2	boolean getTraceDrop ( ) { return TRACE_DROP ; }
va	4	public Range ( double minmax ) { this . min = minmax ; this . max = minmax ; }
va	6	public Kick ( ) { setCardName ( "Kick" ) ; setCardValue ( 1 ) ; setCardCost ( 2 ) ; setCardDamage ( 2 ) ; setCardImage ( "/Resources/Kick.jpg" ) ; }
va	3	public void setBaselineGroup ( SampleGroup baselineGroup ) { this . baselineGroup = baselineGroup ; }
va	3	public void setLeft ( boolean left ) { isLeft = left ; }
va	1	public int delMax ( ) { return 0 ; }
va	7	private void newGameButtonActionPerformed ( java . awt . event . ActionEvent evt ) { newGame ( ) ; }
va	5	@ Override public void pause ( ) { poller . setPause ( true ) ; sender . setPause ( true ) ; }
va	2	public int getTicksMissed ( ) { return ticksMissed ; }
va	2	public long getId ( ) { return id ; }
va	8	public PayloadBuilder customFields ( final Map < String , ? extends Object > values ) { root . putAll ( values ) ; return this ; }
va	7	public Question getQuestion ( int questionNumber ) { Question res = null ; if ( ( questionNumber >= 0 ) && ( questionNumber < questions . size ( ) ) ) { res = this . questions . get ( questionNumber ) ; } return res ; }
va	9	public void actionPerformed ( ActionEvent e ) { if ( e . getActionCommand ( ) . equals ( "Directory Browser" ) ) { this . lhcParamFileChosen . setText ( this . lhcParamFileChosen . getText ( ) + " " + displayFileChooserDialog ( ) ) ; } }
va	9	private static void printPrimeLessThan ( int n ) { int [ ] marked = new int [ n ] ; for ( int p = 2 ; p < marked . length ; ++ p ) { if ( marked [ p ] == 0 ) { System . out . println ( p ) ; for ( int i = p ; i < marked . length ; i += p ) { marked [ i ] = 1 ; } } } }
va	10	public static < T , A > ParseResult < T , A > failure ( Left < Tuple2 < String , LList < T >> , Tuple2 < LList < T > , A >> pair ) { return of ( pair ) ; }
va	5	@ Override public void accept ( FSPSpecVisitor v ) { v . visit ( this ) ; }
va	7	public AliasParameter ( String name_ , String desc_ , VoidParameter v ) { super ( name_ , desc_ ) ; param = v ; }
va	1	public int bonusUniteAttaque ( ) { return 1 ; }
va	4	public Vector3d scaleToLength ( float length ) { scaleBy ( length / this . length ( ) ) ; return this ; }
va	8	@ Test public void testGetCharacterDirectionInvalid ( ) { try { testTile . getCharacter ( exitDirection ) ; fail ( "IllegalArgumentException was expected" ) ; } catch ( IllegalArgumentException e ) { } }
va	5	private OrderByParameter ( String parameterName , boolean isAscending ) { super ( SINGLE_TABLE_ALIAS , parameterName ) ; this . isAscending = isAscending ; }
va	6	public String getWinnerTeam ( ) { if ( this . homeGoals > this . awayGoals ) return this . homeTeam ; else if ( this . awayGoals > this . homeGoals ) return this . awayTeam ; else return null ; }
va	5	public void openCompetitionFrame ( Competition competition ) { this . competition . setCompetition ( competition ) ; this . competition . openFrame ( ) ; }
va	1	public Announcements ( ) { }
va	6	public boolean gather ( Unit target , boolean shiftQueueCommand ) { return gather_native ( pointer , target , shiftQueueCommand ) ; }
va	2	@ Override public float getS_Ext ( ) { return 0 ; }
va	1	public GetTrains ( ) { super ( ) ; }
va	4	public String getAttributeNS ( String namespaceURI , String localName ) { return null ; }
va	6	public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( obj instanceof Keyword ) { Keyword k = ( Keyword ) obj ; if ( k . toString ( ) . equals ( this . toString ( ) ) ) { return true ; } } return false ; }
va	6	public static void tidyPrint ( PrintWriter p , String msg ) { p . print ( msg ) ; }
va	8	@ Test public void testSetUserChoice ( ) throws Exception { ticTacToeGame . setBoardArray ( boardArray ) ; assert . assertSame ( boardArray [ 2 ] [ 2 ] , ticTacToeGame . getBoardArray ( ) [ 2 ] [ 2 ] ) ; }
va	7	@ Override public int hashCode ( ) { final int prime = 31 ; int result = 1 ; result = prime * result + ( type == null ? 0 : type . hashCode ( ) ) ; result = prime * result + x ; result = prime * result + y ; return result ; }
va	2	public boolean consumesEvents ( ) { return root . consumesEvents ; }
va	1	private ArgsUtil ( ) { }
va	10	public void addDungeonPile ( CardPile monsterPile ) { while ( monsterPile . size ( ) > 0 ) monsterPile . get ( 0 ) . moveTo ( dungeon [ dungeonDeck ] ) ; Collections . shuffle ( dungeon [ dungeonDeck ] ) ; }
va	10	public org . w3c . dom . Node renameNode ( org . w3c . dom . Node oNode , String sStr1 , String sStr2 ) { throw new UnsupportedOperationException ( "org.w3c.tidy.DOMDocumentTypeImpl renameNode() Not implemented" ) ; }
va	9	public Season getSeason ( String show , int season ) throws EpisodesPathNotFoundException { Path episodesPath = getEpisodesPath ( show , season ) ; if ( episodesPath == null ) { throw new EpisodesPathNotFoundException ( show , season ) ; } return new Season ( season , episodesPath ) ; }
va	6	Input ( GeneratorBox parent , String label ) { this . pa = parent ; this . label = label ; }
va	10	private String toUserName ( String str ) { String ret = str . toLowerCase ( ) ; for ( int i = 0 , len = ret . length ( ) ; i < len ; ++ i ) { if ( "abcdefghijklmnopqrstuvwxyz" . indexOf ( ret . charAt ( i ) ) < 0 ) { return null ; } } return ret ; }
va	7	private int seeders ( ) { int count = 0 ; for ( TrackedPeer peer : this . peers . values ( ) ) { if ( peer . isCompleted ( ) ) { count ++ ; } } return count ; }
va	4	@ Override public int hashCode ( ) { int hash = 7 ; hash = 13 * hash + ( this . schema != null ? this . schema . hashCode ( ) : 0 ) ; return hash ; }
va	10	public SwarmSymbolThreadFunction ( String identifier , List < String > argumentTypes , SwarmScope scope ) { myIdentifier = identifier ; myArgumentTypes = argumentTypes ; myScope = scope ; }
va	6	static boolean isValue ( Object v ) { return ( v instanceof Map && ( ( Map < String , Object > ) v ) . containsKey ( "@value" ) ) ; }
va	5	@ Override public INDISwitchElement getElement ( String name ) { return ( INDISwitchElement ) super . getElement ( name ) ; }
va	3	public XbpadButton xgetD3 ( ) { return d3 ; }
va	1	LiteralDecoder ( ) { }
va	8	public static Polynomial createIrreducible ( int degree ) { while ( true ) { Polynomial p = createRandom ( degree ) ; if ( p . getReducibility ( ) == Reducibility . IRREDUCIBLE ) return p ; } }
va	4	private Builder ( final Collection < KEY > keys ) { super ( keys ) ; }
va	8	public JSONObject putOpt ( String key , Object value ) throws JSONException { if ( key != null && value != null ) { this . put ( key , value ) ; } return this ; }
va	6	@ Override public void act ( ) { System . out . println ( "Action: " + actionText ) ; }
va	10	public static void main ( String [ ] args ) { BankSimulator javaBank = new BankSimulator ( 10000 , 10 , 100 ) ; javaBank . runDay ( ) ; System . out . println ( "Capital at close: \u00A3" + javaBank . getCapital ( ) ) ; }
va	4	public Object getBackPanelDescriptor ( ) { return ChooseMethodDescriptor . IDENTIFIER ; }
va	5	public NativeLibrary ( String libraryPath ) { NotNullException . assertValue ( libraryPath , "libraryPath" ) ; this . libraryPath = libraryPath ; }
va	1	final public boolean isRunning ( ) { return isRunning ; }
va	10	public void add ( Student student ) { studentNumber ++ ; serviceTimeSum += student . getExitTick ( ) - student . getEntryTick ( ) ; waitingTimeSum += student . getEntryTick ( ) - student . getCreationTick ( ) ; totalTimeSum += student . getExitTick ( ) - student . getCreationTick ( ) ; }
va	3	@ Override public long getValue ( ) { return value ; }
va	7	@ After public void tearDown ( ) throws Exception { graph . remove ( ) ; graph = null ; quadtree = null ; map = null ; }
va	2	public float getConstant ( ) { return getX ( ) ; }
va	10	@ Test public void postorderHighNull ( ) { try { AVLTree < Integer , Integer > b = new AVLTree < Integer , Integer > ( ) ; b . postorder ( 0 , null ) ; fail ( IllegalArgumentException . class ) ; } catch ( IllegalArgumentException e ) { } catch ( Exception e ) { fail ( IllegalArgumentException . class , e ) ; } }
va	7	public JSONObject put ( String key , int value ) throws JSONException { this . put ( key , new Integer ( value ) ) ; return this ; }
va	6	@ Override public boolean equals ( Object obj ) { if ( ! super . equals ( obj ) ) return false ; if ( ! ( obj instanceof BlockNode ) ) return false ; BlockNode other = ( BlockNode ) obj ; if ( ! - . equals ( other . - ) ) return false ; return true ; }
va	7	public void mover ( ) { if ( ! this . puedoMover ( ) ) this . espejarDireccion ( ) ; for ( ParteNave parte : this . partes ) { parte . mover ( this . direccion ) ; } }
va	5	@ Override public long getLong ( String columnLabel ) throws SQLException { return 0 ; }
va	4	private VueMenuBiblio getVueMenu ( ) { return ( VueMenuBiblio ) _vues . getFirst ( ) ; }
va	4	private void loadData201103 ( ) { histories . get ( "CH0012255151" ) . add ( 40603 , 399.4 , 85328683.7 ) ; histories . get ( "CH0012255151" ) . add ( 40604 , 396 , 90524468.24 ) ; histories . get ( "CH0012255151" ) . add ( 40605 , 394.5 , 128084591.63 ) ; histories . get ( "CH0012255151" ) . add ( 40606 , 390 , 65867250.35 ) ; histories . get ( "CH0012255151" ) . add ( 40609 , 398.4 , 83830806.3 ) ; histories . get ( "CH0012255151" ) . add ( 40610 , 399.6 , 56009438.2 ) ; histories . get ( "CH0012255151" ) . add ( 40611 , 398.6 , 48183336.43 ) ; histories . get ( "CH0012255151" ) . add ( 40612 , 387.9 , 112857446 ) ; histories . get ( "CH0012255151" ) . add ( 40613 , 376.1 , 124945530.6 ) ; histories . get ( "CH0012255151" ) . add ( 40616 , 377.2 , 104776252.59 ) ; histories . get ( "CH0012255151" ) . add ( 40617 , 368.5 , 298444699.63 ) ; histories . get ( "CH0012255151" ) . add ( 40618 , 359.8 , 195975954.3 ) ; histories . get ( "CH0012255151" ) . add ( 40619 , 365.9 , 150081467.35 ) ; histories . get ( "CH0012255151" ) . add ( 40620 , 374.1 , 178425016.68 ) ; histories . get ( "CH0012255151" ) . add ( 40623 , 386.5 , 117388790.3 ) ; histories . get ( "CH0012255151" ) . add ( 40624 , 395 , 124548398.78 ) ; histories . get ( "CH0012255151" ) . add ( 40625 , 390 , 85301101.25 ) ; histories . get ( "CH0012255151" ) . add ( 40626 , 403 , 120994324.12 ) ; histories . get ( "CH0012255151" ) . add ( 40627 , 400.3 , 54130528.2 ) ; histories . get ( "CH0012255151" ) . add ( 40630 , 402.5 , 49696654.6 ) ; histories . get ( "CH0012255151" ) . add ( 40631 , 400 , 64927235.5 ) ; histories . get ( "CH0012255151" ) . add ( 40632 , 407.8 , 92936684.4 ) ; histories . get ( "CH0012255151" ) . add ( 40633 , 406.1 , 71801733.15 ) ; histories . get ( "CH0045039655" ) . add ( 40603 , 53.95 , 94472128.85 ) ; histories . get ( "CH0045039655" ) . add ( 40604 , 54.1 , 70805673.35 ) ; histories . get ( "CH0045039655" ) . add ( 40605 , 54.1 , 70803217.1 ) ; histories . get ( "CH0045039655" ) . add ( 40606 , 53.5 , 49352476.83 ) ; histories . get ( "CH0045039655" ) . add ( 40609 , 54.7 , 95248248.74 ) ; histories . get ( "CH0045039655" ) . add ( 40610 , 55.1 , 77719164.15 ) ; histories . get ( "CH0045039655" ) . add ( 40611 , 54.65 , 71129361.7 ) ; histories . get ( "CH0045039655" ) . add ( 40612 , 53.6 , 87212234.4 ) ; histories . get ( "CH0045039655" ) . add ( 40613 , 52.15 , 64527286.79 ) ; histories . get ( "CH0045039655" ) . add ( 40616 , 51.1 , 165691266.43 ) ; histories . get ( "CH0045039655" ) . add ( 40617 , 49.19 , 340188131.65 ) ; histories . get ( "CH0045039655" ) . add ( 40618 , 47 , 209357424.85 ) ; histories . get ( "CH0045039655" ) . add ( 40619 , 47.95 , 211186953.99 ) ; histories . get ( "CH0045039655" ) . add ( 40620 , 48.62 , 243561792.34 ) ; histories . get ( "CH0045039655" ) . add ( 40623 , 50.15 , 92330926.45 ) ; histories . get ( "CH0045039655" ) . add ( 40624 , 51.8 , 128756111.53 ) ; histories . get ( "CH0045039655" ) . add ( 40625 , 51.15 , 82171739.8 ) ; histories . get ( "CH0045039655" ) . add ( 40626 , 52.25 , 106971941.4 ) ; histories . get ( "CH0045039655" ) . add ( 40627 , 52.05 , 62944420.7 ) ; histories . get ( "CH0045039655" ) . add ( 40630 , 51.9 , 52128784.43 ) ; histories . get ( "CH0045039655" ) . add ( 40631 , 52.05 , 71430043.8 ) ; histories . get ( "CH0045039655" ) . add ( 40632 , 53.2 , 90401756.95 ) ; histories . get ( "CH0045039655" ) . add ( 40633 , 53.05 , 77648727.3 ) ; histories . get ( "CH0012032048" ) . add ( 40603 , 139.8 , 277850071.77 ) ; histories . get ( "CH0012032048" ) . add ( 40604 , 138 , 380129650.79 ) ; histories . get ( "CH0012032048" ) . add ( 40605 , 134.3 , 495028513.24 ) ; histories . get ( "CH0012032048" ) . add ( 40606 , 133.6 , 255287874.48 ) ; histories . get ( "CH0012032048" ) . add ( 40609 , 132.1 , 272667527.09 ) ; histories . get ( "CH0012032048" ) . add ( 40610 , 132.1 , 322863301.95 ) ; histories . get ( "CH0012032048" ) . add ( 40611 , 131.7 , 241989583.42 ) ; histories . get ( "CH0012032048" ) . add ( 40612 , 132 , 490963291.11 ) ; histories . get ( "CH0012032048" ) . add ( 40613 , 131.8 , 422375456.24 ) ; histories . get ( "CH0012032048" ) . add ( 40616 , 130.8 , 244814132.89 ) ; histories . get ( "CH0012032048" ) . add ( 40617 , 127.3 , 672491277.99 ) ; histories . get ( "CH0012032048" ) . add ( 40618 , 125.4 , 461927407.15 ) ; histories . get ( "CH0012032048" ) . add ( 40619 , 125.6 , 347866824.44 ) ; histories . get ( "CH0012032048" ) . add ( 40620 , 125.3 , 677142455.96 ) ; histories . get ( "CH0012032048" ) . add ( 40623 , 127.3 , 317807169.62 ) ; histories . get ( "CH0012032048" ) . add ( 40624 , 128.7 , 249053996.79 ) ; histories . get ( "CH0012032048" ) . add ( 40625 , 129.7 , 252900240.4 ) ; histories . get ( "CH0012032048" ) . add ( 40626 , 130.3 , 247809056.5 ) ; histories . get ( "CH0012032048" ) . add ( 40627 , 130.2 , 226776592.35 ) ; histories . get ( "CH0012032048" ) . add ( 40630 , 130.2 , 186844176.37 ) ; histories . get ( "CH0012032048" ) . add ( 40631 , 130.4 , 200421396.4 ) ; histories . get ( "CH0012032048" ) . add ( 40632 , 131.8 , 255327171.95 ) ; histories . get ( "CH0012032048" ) . add ( 40633 , 131.2 , 204556056.9 ) ; histories . get ( "CH0002497458" ) . add ( 40603 , 1629 , 19943110.04 ) ; histories . get ( "CH0002497458" ) . add ( 40604 , 1607 , 16877177 ) ; histories . get ( "CH0002497458" ) . add ( 40605 , 1625 , 26697036 ) ; histories . get ( "CH0002497458" ) . add ( 40606 , 1609 , 21211730 ) ; histories . get ( "CH0002497458" ) . add ( 40609 , 1606 , 20296154 ) ; histories . get ( "CH0002497458" ) . add ( 40610 , 1608 , 23032812 ) ; histories . get ( "CH0002497458" ) . add ( 40611 , 1628 , 36277303 ) ; histories . get ( "CH0002497458" ) . add ( 40612 , 1625 , 27453107 ) ; histories . get ( "CH0002497458" ) . add ( 40613 , 1597 , 21776379 ) ; histories . get ( "CH0002497458" ) . add ( 40616 , 1599 , 23659070 ) ; histories . get ( "CH0002497458" ) . add ( 40617 , 1554 , 52246209.5 ) ; histories . get ( "CH0002497458" ) . add ( 40618 , 1543 , 47888636 ) ; histories . get ( "CH0002497458" ) . add ( 40619 , 1500 , 57592609 ) ; histories . get ( "CH0002497458" ) . add ( 40620 , 1515 , 72853203 ) ; histories . get ( "CH0002497458" ) . add ( 40623 , 1580 , 45655878 ) ; histories . get ( "CH0002497458" ) . add ( 40624 , 1583 , 26096024 ) ; histories . get ( "CH0002497458" ) . add ( 40625 , 1610 , 21421581 ) ; histories . get ( "CH0002497458" ) . add ( 40626 , 1619 , 23411365 ) ; histories . get ( "CH0002497458" ) . add ( 40627 , 1617 , 24902568 ) ; histories . get ( "CH0002497458" ) . add ( 40630 , 1614 , 21708358 ) ; histories . get ( "CH0002497458" ) . add ( 40631 , 1617 , 18476756 ) ; histories . get ( "CH0002497458" ) . add ( 40632 , 1636 , 27722535 ) ; histories . get ( "CH0002497458" ) . add ( 40633 , 1635 , 34587507.61 ) ; histories . get ( "CH0008742519" ) . add ( 40603 , 410.5 , 35157636.8 ) ; histories . get ( "CH0008742519" ) . add ( 40604 , 410.5 , 31075659.9 ) ; histories . get ( "CH0008742519" ) . add ( 40605 , 410.6 , 30417089.4 ) ; histories . get ( "CH0008742519" ) . add ( 40606 , 412 , 38708344.73 ) ; histories . get ( "CH0008742519" ) . add ( 40609 , 408.4 , 46677224.22 ) ; histories . get ( "CH0008742519" ) . add ( 40610 , 411.2 , 47445667.3 ) ; histories . get ( "CH0008742519" ) . add ( 40611 , 411.1 , 53507820.4 ) ; histories . get ( "CH0008742519" ) . add ( 40612 , 410 , 69124822 ) ; histories . get ( "CH0008742519" ) . add ( 40613 , 407.2 , 37074889.05 ) ; histories . get ( "CH0008742519" ) . add ( 40616 , 402.3 , 64026437.9 ) ; histories . get ( "CH0008742519" ) . add ( 40617 , 393.5 , 90895448.5 ) ; histories . get ( "CH0008742519" ) . add ( 40618 , 389.2 , 66289412.48 ) ; histories . get ( "CH0008742519" ) . add ( 40619 , 394.5 , 73161098.08 ) ; histories . get ( "CH0008742519" ) . add ( 40620 , 394 , 122505924.6 ) ; histories . get ( "CH0008742519" ) . add ( 40623 , 401 , 55470542.3 ) ; histories . get ( "CH0008742519" ) . add ( 40624 , 400.8 , 81262376 ) ; histories . get ( "CH0008742519" ) . add ( 40625 , 404 , 36783027.4 ) ; histories . get ( "CH0008742519" ) . add ( 40626 , 405.5 , 48957623.6 ) ; histories . get ( "CH0008742519" ) . add ( 40627 , 406 , 31455310.6 ) ; histories . get ( "CH0008742519" ) . add ( 40630 , 407.9 , 26986269.6 ) ; histories . get ( "CH0008742519" ) . add ( 40631 , 408.9 , 26410154.5 ) ; histories . get ( "CH0008742519" ) . add ( 40632 , 410.6 , 47504608.6 ) ; histories . get ( "CH0008742519" ) . add ( 40633 , 409.5 , 34246013.5 ) ; histories . get ( "CH0010532478" ) . add ( 40603 , 51.1 , 20273484.75 ) ; histories . get ( "CH0010532478" ) . add ( 40604 , 50.5 , 35074840.99 ) ; histories . get ( "CH0010532478" ) . add ( 40605 , 50.45 , 37609128.8 ) ; histories . get ( "CH0010532478" ) . add ( 40606 , 50.7 , 35390475.67 ) ; histories . get ( "CH0010532478" ) . add ( 40609 , 50.1 , 19325349.1 ) ; histories . get ( "CH0010532478" ) . add ( 40610 , 50.4 , 29449316.96 ) ; histories . get ( "CH0010532478" ) . add ( 40611 , 50.7 , 23030469.91 ) ; histories . get ( "CH0010532478" ) . add ( 40612 , 50.55 , 35988931.65 ) ; histories . get ( "CH0010532478" ) . add ( 40613 , 50.5 , 20597688.65 ) ; histories . get ( "CH0010532478" ) . add ( 40616 , 49.82 , 30804840.18 ) ; histories . get ( "CH0010532478" ) . add ( 40617 , 48.93 , 160130467.65 ) ; histories . get ( "CH0010532478" ) . add ( 40618 , 48.6 , 42931308.22 ) ; histories . get ( "CH0010532478" ) . add ( 40619 , 48.2 , 52507116.72 ) ; histories . get ( "CH0010532478" ) . add ( 40620 , 49.6 , 96444034.54 ) ; histories . get ( "CH0010532478" ) . add ( 40623 , 50.5 , 37367218.62 ) ; histories . get ( "CH0010532478" ) . add ( 40624 , 50.8 , 22696951.5 ) ; histories . get ( "CH0010532478" ) . add ( 40625 , 51.4 , 38192054.8 ) ; histories . get ( "CH0010532478" ) . add ( 40626 , 51.5 , 30743647.3 ) ; histories . get ( "CH0010532478" ) . add ( 40627 , 51.95 , 25010889.23 ) ; histories . get ( "CH0010532478" ) . add ( 40630 , 52.1 , 20653894.61 ) ; histories . get ( "CH0010532478" ) . add ( 40631 , 52.3 , 19001912.5 ) ; histories . get ( "CH0010532478" ) . add ( 40632 , 53 , 27987648.63 ) ; histories . get ( "CH0010532478" ) . add ( 40633 , 52.85 , 17599032 ) ; histories . get ( "CH0010645932" ) . add ( 40603 , 930 , 32718157 ) ; histories . get ( "CH0010645932" ) . add ( 40604 , 930.5 , 18867054.5 ) ; histories . get ( "CH0010645932" ) . add ( 40605 , 938 , 26045155 ) ; histories . get ( "CH0010645932" ) . add ( 40606 , 938.5 , 17031115 ) ; histories . get ( "CH0010645932" ) . add ( 40609 , 931 , 12991336.5 ) ; histories . get ( "CH0010645932" ) . add ( 40610 , 934.5 , 17102328.86 ) ; histories . get ( "CH0010645932" ) . add ( 40611 , 937.5 , 24523690 ) ; histories . get ( "CH0010645932" ) . add ( 40612 , 933 , 16904975 ) ; histories . get ( "CH0010645932" ) . add ( 40613 , 919.5 , 27485901.5 ) ; histories . get ( "CH0010645932" ) . add ( 40616 , 912.5 , 24555075.02 ) ; histories . get ( "CH0010645932" ) . add ( 40617 , 892.5 , 61936629 ) ; histories . get ( "CH0010645932" ) . add ( 40618 , 885 , 37911651.5 ) ; histories . get ( "CH0010645932" ) . add ( 40619 , 894 , 35137781.01 ) ; histories . get ( "CH0010645932" ) . add ( 40620 , 894 , 75442551.54 ) ; histories . get ( "CH0010645932" ) . add ( 40623 , 898 , 29371513.5 ) ; histories . get ( "CH0010645932" ) . add ( 40624 , 897 , 41744857.27 ) ; histories . get ( "CH0010645932" ) . add ( 40625 , 905 , 24114074 ) ; histories . get ( "CH0010645932" ) . add ( 40626 , 918.5 , 18705020.5 ) ; histories . get ( "CH0010645932" ) . add ( 40627 , 915.5 , 29365453.03 ) ; histories . get ( "CH0010645932" ) . add ( 40630 , 902 , 22820263.5 ) ; histories . get ( "CH0010645932" ) . add ( 40631 , 914.5 , 24150936.75 ) ; histories . get ( "CH0010645932" ) . add ( 40632 , 925 , 35771831.5 ) ; histories . get ( "CH0010645932" ) . add ( 40633 , 923.5 , 17783732.5 ) ; histories . get ( "CH0011037469" ) . add ( 40603 , 309.5 , 101650181.65 ) ; histories . get ( "CH0011037469" ) . add ( 40604 , 307.2 , 88744669.92 ) ; histories . get ( "CH0011037469" ) . add ( 40605 , 309 , 71027200.09 ) ; histories . get ( "CH0011037469" ) . add ( 40606 , 309.2 , 74162466.93 ) ; histories . get ( "CH0011037469" ) . add ( 40609 , 308.6 , 63190340.22 ) ; histories . get ( "CH0011037469" ) . add ( 40610 , 308.6 , 73994322.32 ) ; histories . get ( "CH0011037469" ) . add ( 40611 , 305.2 , 88712924.84 ) ; histories . get ( "CH0011037469" ) . add ( 40612 , 300 , 116941460.68 ) ; histories . get ( "CH0011037469" ) . add ( 40613 , 295 , 106265221.73 ) ; histories . get ( "CH0011037469" ) . add ( 40616 , 290.8 , 114142404.38 ) ; histories . get ( "CH0011037469" ) . add ( 40617 , 280.6 , 303125420.15 ) ; histories . get ( "CH0011037469" ) . add ( 40618 , 286.8 , 231907323.76 ) ; histories . get ( "CH0011037469" ) . add ( 40619 , 287.5 , 130850102.08 ) ; histories . get ( "CH0011037469" ) . add ( 40620 , 289.5 , 279639373.26 ) ; histories . get ( "CH0011037469" ) . add ( 40623 , 293.9 , 77565028.17 ) ; histories . get ( "CH0011037469" ) . add ( 40624 , 292.9 , 57762224.2 ) ; histories . get ( "CH0011037469" ) . add ( 40625 , 291.6 , 81663583.4 ) ; histories . get ( "CH0011037469" ) . add ( 40626 , 296.1 , 90753321.11 ) ; histories . get ( "CH0011037469" ) . add ( 40627 , 299.5 , 70553056.28 ) ; histories . get ( "CH0011037469" ) . add ( 40630 , 295 , 69212301.6 ) ; histories . get ( "CH0011037469" ) . add ( 40631 , 298.6 , 52313606.3 ) ; histories . get ( "CH0011037469" ) . add ( 40632 , 297 , 71867034.13 ) ; histories . get ( "CH0011037469" ) . add ( 40633 , 298.5 , 86783226.83 ) ; histories . get ( "CH0011075394" ) . add ( 40603 , 268.4 , 126150936.4 ) ; histories . get ( "CH0011075394" ) . add ( 40604 , 267.7 , 180513360.32 ) ; histories . get ( "CH0011075394" ) . add ( 40605 , 267.5 , 179008393.24 ) ; histories . get ( "CH0011075394" ) . add ( 40606 , 267.8 , 166907193.13 ) ; histories . get ( "CH0011075394" ) . add ( 40609 , 266 , 163732385.48 ) ; histories . get ( "CH0011075394" ) . add ( 40610 , 266.5 , 180461763.35 ) ; histories . get ( "CH0011075394" ) . add ( 40611 , 265.1 , 161637590.96 ) ; histories . get ( "CH0011075394" ) . add ( 40612 , 261.3 , 240007222.1 ) ; histories . get ( "CH0011075394" ) . add ( 40613 , 255 , 293306644.3 ) ; histories . get ( "CH0011075394" ) . add ( 40616 , 250.4 , 267795295.4 ) ; histories . get ( "CH0011075394" ) . add ( 40617 , 243.1 , 453514138.36 ) ; histories . get ( "CH0011075394" ) . add ( 40618 , 240 , 357722382.42 ) ; histories . get ( "CH0011075394" ) . add ( 40619 , 244.6 , 275131014.55 ) ; histories . get ( "CH0011075394" ) . add ( 40620 , 247.1 , 349703784.26 ) ; histories . get ( "CH0011075394" ) . add ( 40623 , 253.6 , 190174306.74 ) ; histories . get ( "CH0011075394" ) . add ( 40624 , 255 , 161342171.8 ) ; histories . get ( "CH0011075394" ) . add ( 40625 , 256.3 , 123613700.25 ) ; histories . get ( "CH0011075394" ) . add ( 40626 , 257.3 , 134767883.32 ) ; histories . get ( "CH0011075394" ) . add ( 40627 , 258.7 , 134726778.26 ) ; histories . get ( "CH0011075394" ) . add ( 40630 , 259.7 , 149540364.54 ) ; histories . get ( "CH0011075394" ) . add ( 40631 , 259.9 , 156245790.44 ) ; histories . get ( "CH0011075394" ) . add ( 40632 , 259.6 , 174512106.75 ) ; histories . get ( "CH0011075394" ) . add ( 40633 , 257.1 , 187432192.53 ) ; histories . get ( "CH0012005267" ) . add ( 40603 , 53.1 , 508736644.04 ) ; histories . get ( "CH0012005267" ) . add ( 40604 , 52.95 , 360228853.8 ) ; histories . get ( "CH0012005267" ) . add ( 40605 , 53.15 , 494688059.13 ) ; histories . get ( "CH0012005267" ) . add ( 40606 , 52.75 , 615935968.72 ) ; histories . get ( "CH0012005267" ) . add ( 40609 , 52.3 , 272678604.23 ) ; histories . get ( "CH0012005267" ) . add ( 40610 , 51.9 , 327005991.06 ) ; histories . get ( "CH0012005267" ) . add ( 40611 , 50.85 , 549264607.85 ) ; histories . get ( "CH0012005267" ) . add ( 40612 , 51.1 , 526277436.48 ) ; histories . get ( "CH0012005267" ) . add ( 40613 , 50.75 , 440158399.58 ) ; histories . get ( "CH0012005267" ) . add ( 40616 , 49.95 , 414762711.6 ) ; histories . get ( "CH0012005267" ) . add ( 40617 , 49.33 , 949003219.4 ) ; histories . get ( "CH0012005267" ) . add ( 40618 , 48.1 , 607990765.84 ) ; histories . get ( "CH0012005267" ) . add ( 40619 , 48.4 , 436480330.36 ) ; histories . get ( "CH0012005267" ) . add ( 40620 , 48.62 , 981512547.23 ) ; histories . get ( "CH0012005267" ) . add ( 40623 , 49.19 , 342675664.85 ) ; histories . get ( "CH0012005267" ) . add ( 40624 , 49.59 , 390753328.62 ) ; histories . get ( "CH0012005267" ) . add ( 40625 , 49.29 , 366669635.87 ) ; histories . get ( "CH0012005267" ) . add ( 40626 , 50 , 738461005.97 ) ; histories . get ( "CH0012005267" ) . add ( 40627 , 50.85 , 564971465.98 ) ; histories . get ( "CH0012005267" ) . add ( 40630 , 50.55 , 406361062.7 ) ; histories . get ( "CH0012005267" ) . add ( 40631 , 50.15 , 382501665.08 ) ; histories . get ( "CH0012005267" ) . add ( 40632 , 50.1 , 375388806.16 ) ; histories . get ( "CH0012005267" ) . add ( 40633 , 49.82 , 517937450.79 ) ; histories . get ( "CH0012138530" ) . add ( 40603 , 42.45 , 178987173.77 ) ; histories . get ( "CH0012138530" ) . add ( 40604 , 42.15 , 264146503.49 ) ; histories . get ( "CH0012138530" ) . add ( 40605 , 42.06 , 251307977.21 ) ; histories . get ( "CH0012138530" ) . add ( 40606 , 40.92 , 423360194.72 ) ; histories . get ( "CH0012138530" ) . add ( 40609 , 40.43 , 317715832.79 ) ; histories . get ( "CH0012138530" ) . add ( 40610 , 40.48 , 256108567.46 ) ; histories . get ( "CH0012138530" ) . add ( 40611 , 40.14 , 298619910.91 ) ; histories . get ( "CH0012138530" ) . add ( 40612 , 40.17 , 331869300.82 ) ; histories . get ( "CH0012138530" ) . add ( 40613 , 40.04 , 245706866.65 ) ; histories . get ( "CH0012138530" ) . add ( 40616 , 39.55 , 326215144.18 ) ; histories . get ( "CH0012138530" ) . add ( 40617 , 38.45 , 479855529.63 ) ; histories . get ( "CH0012138530" ) . add ( 40618 , 37.9 , 367138308.84 ) ; histories . get ( "CH0012138530" ) . add ( 40619 , 37.96 , 355563525.06 ) ; histories . get ( "CH0012138530" ) . add ( 40620 , 38.01 , 554071584.25 ) ; histories . get ( "CH0012138530" ) . add ( 40623 , 38.77 , 278590260.69 ) ; histories . get ( "CH0012138530" ) . add ( 40624 , 39.05 , 231115753.39 ) ; histories . get ( "CH0012138530" ) . add ( 40625 , 39 , 201252125.03 ) ; histories . get ( "CH0012138530" ) . add ( 40626 , 39.12 , 211132541.77 ) ; histories . get ( "CH0012138530" ) . add ( 40627 , 38.92 , 180530026.7 ) ; histories . get ( "CH0012138530" ) . add ( 40630 , 39.17 , 234331270.75 ) ; histories . get ( "CH0012138530" ) . add ( 40631 , 39.47 , 249705753.5 ) ; histories . get ( "CH0012138530" ) . add ( 40632 , 39.52 , 202960037.79 ) ; histories . get ( "CH0012138530" ) . add ( 40633 , 39.03 , 202936556.71 ) ; histories . get ( "CH0012138605" ) . add ( 40603 , 62.3 , 38039478.45 ) ; histories . get ( "CH0012138605" ) . add ( 40604 , 61.7 , 73509766.4 ) ; histories . get ( "CH0012138605" ) . add ( 40605 , 65 , 162253503.6 ) ; histories . get ( "CH0012138605" ) . add ( 40606 , 64.75 , 85982543.02 ) ; histories . get ( "CH0012138605" ) . add ( 40609 , 63.45 , 58370576.65 ) ; histories . get ( "CH0012138605" ) . add ( 40610 , 63.55 , 52058266.71 ) ; histories . get ( "CH0012138605" ) . add ( 40611 , 63.4 , 56191038.6 ) ; histories . get ( "CH0012138605" ) . add ( 40612 , 61.6 , 67884111.75 ) ; histories . get ( "CH0012138605" ) . add ( 40613 , 61.05 , 53479345.9 ) ; histories . get ( "CH0012138605" ) . add ( 40616 , 60.25 , 46562221.55 ) ; histories . get ( "CH0012138605" ) . add ( 40617 , 58.25 , 145253519.97 ) ; histories . get ( "CH0012138605" ) . add ( 40618 , 56.9 , 81078122.45 ) ; histories . get ( "CH0012138605" ) . add ( 40619 , 57.95 , 67019142.51 ) ; histories . get ( "CH0012138605" ) . add ( 40620 , 57.8 , 107923239.75 ) ; histories . get ( "CH0012138605" ) . add ( 40623 , 59.35 , 54009477.1 ) ; histories . get ( "CH0012138605" ) . add ( 40624 , 58.9 , 34930414.49 ) ; histories . get ( "CH0012138605" ) . add ( 40625 , 59.35 , 26501843.8 ) ; histories . get ( "CH0012138605" ) . add ( 40626 , 60.6 , 39392108.05 ) ; histories . get ( "CH0012138605" ) . add ( 40627 , 61.1 , 36156445.45 ) ; histories . get ( "CH0012138605" ) . add ( 40630 , 60.45 , 25628758.4 ) ; histories . get ( "CH0012138605" ) . add ( 40631 , 60.3 , 38206197.7 ) ; histories . get ( "CH0012138605" ) . add ( 40632 , 61.05 , 54668071.45 ) ; histories . get ( "CH0012138605" ) . add ( 40633 , 60.4 , 51473536.33 ) ; histories . get ( "CH0012142631" ) . add ( 40603 , 15.36 , 28749529.01 ) ; histories . get ( "CH0012142631" ) . add ( 40604 , 15.34 , 24784019.89 ) ; histories . get ( "CH0012142631" ) . add ( 40605 , 15.34 , 23356293.15 ) ; histories . get ( "CH0012142631" ) . add ( 40606 , 15.16 , 20803366.77 ) ; histories . get ( "CH0012142631" ) . add ( 40609 , 15.32 , 46618238.89 ) ; histories . get ( "CH0012142631" ) . add ( 40610 , 15.12 , 48930469.57 ) ; histories . get ( "CH0012142631" ) . add ( 40611 , 15.1 , 18322675.14 ) ; histories . get ( "CH0012142631" ) . add ( 40612 , 14.88 , 32309874.07 ) ; histories . get ( "CH0012142631" ) . add ( 40613 , 15.06 , 64604686.49 ) ; histories . get ( "CH0012142631" ) . add ( 40616 , 15.14 , 48802161.94 ) ; histories . get ( "CH0012142631" ) . add ( 40617 , 14.46 , 71737537.4 ) ; histories . get ( "CH0012142631" ) . add ( 40618 , 14.31 , 41001404.93 ) ; histories . get ( "CH0012142631" ) . add ( 40619 , 14.5 , 43752897.2 ) ; histories . get ( "CH0012142631" ) . add ( 40620 , 15.19 , 68928567.52 ) ; histories . get ( "CH0012142631" ) . add ( 40623 , 15.61 , 45110519.64 ) ; histories . get ( "CH0012142631" ) . add ( 40624 , 15.58 , 38871993.73 ) ; histories . get ( "CH0012142631" ) . add ( 40625 , 15.85 , 35148863.61 ) ; histories . get ( "CH0012142631" ) . add ( 40626 , 16.23 , 59073713.3 ) ; histories . get ( "CH0012142631" ) . add ( 40627 , 16.32 , 26305379.63 ) ; histories . get ( "CH0012142631" ) . add ( 40630 , 16.12 , 24455193.49 ) ; histories . get ( "CH0012142631" ) . add ( 40631 , 16.43 , 32131593.91 ) ; histories . get ( "CH0012142631" ) . add ( 40632 , 16.5 , 49028817.55 ) ; histories . get ( "CH0012142631" ) . add ( 40633 , 16.57 , 33982419.27 ) ; histories . get ( "CH0012214059" ) . add ( 40603 , 68.3 , 107073043.19 ) ; histories . get ( "CH0012214059" ) . add ( 40604 , 68 , 166951066.98 ) ; histories . get ( "CH0012214059" ) . add ( 40605 , 68.5 , 107777912.38 ) ; histories . get ( "CH0012214059" ) . add ( 40606 , 69.1 , 112582856.2 ) ; histories . get ( "CH0012214059" ) . add ( 40609 , 69.05 , 99898948 ) ; histories . get ( "CH0012214059" ) . add ( 40610 , 69.85 , 93314414.35 ) ; histories . get ( "CH0012214059" ) . add ( 40611 , 69.3 , 106243188.58 ) ; histories . get ( "CH0012214059" ) . add ( 40612 , 68.65 , 117895352.55 ) ; histories . get ( "CH0012214059" ) . add ( 40613 , 67.9 , 90080443.1 ) ; histories . get ( "CH0012214059" ) . add ( 40616 , 67.35 , 74220834.75 ) ; histories . get ( "CH0012214059" ) . add ( 40617 , 65.75 , 205514882.1 ) ; histories . get ( "CH0012214059" ) . add ( 40618 , 64.85 , 127272487.05 ) ; histories . get ( "CH0012214059" ) . add ( 40619 , 65.3 , 132999177.58 ) ; histories . get ( "CH0012214059" ) . add ( 40620 , 65.2 , 168260063.9 ) ; histories . get ( "CH0012214059" ) . add ( 40623 , 66.05 , 66973600 ) ; histories . get ( "CH0012214059" ) . add ( 40624 , 65.7 , 76728885.67 ) ; histories . get ( "CH0012214059" ) . add ( 40625 , 66.75 , 90327210.6 ) ; histories . get ( "CH0012214059" ) . add ( 40626 , 68.25 , 98322537.65 ) ; histories . get ( "CH0012214059" ) . add ( 40627 , 69.15 , 88709745.25 ) ; histories . get ( "CH0012214059" ) . add ( 40630 , 69.05 , 52287221.2 ) ; histories . get ( "CH0012214059" ) . add ( 40631 , 69.45 , 56403177.96 ) ; histories . get ( "CH0012214059" ) . add ( 40632 , 69.45 , 73987371.35 ) ; histories . get ( "CH0012214059" ) . add ( 40633 , 69.2 , 62564375.2 ) ; histories . get ( "CH0012221716" ) . add ( 40603 , 22.6 , 129264573.92 ) ; histories . get ( "CH0012221716" ) . add ( 40604 , 22.45 , 139862567.86 ) ; histories . get ( "CH0012221716" ) . add ( 40605 , 22.65 , 176845334.9 ) ; histories . get ( "CH0012221716" ) . add ( 40606 , 22.6 , 122412171.7 ) ; histories . get ( "CH0012221716" ) . add ( 40609 , 22.31 , 126833528.55 ) ; histories . get ( "CH0012221716" ) . add ( 40610 , 22.3 , 162198703.3 ) ; histories . get ( "CH0012221716" ) . add ( 40611 , 22.22 , 162306209.14 ) ; histories . get ( "CH0012221716" ) . add ( 40612 , 21.87 , 212498138.77 ) ; histories . get ( "CH0012221716" ) . add ( 40613 , 21.5 , 206430243.87 ) ; histories . get ( "CH0012221716" ) . add ( 40616 , 21.24 , 261281290.75 ) ; histories . get ( "CH0012221716" ) . add ( 40617 , 20.5 , 453933265.01 ) ; histories . get ( "CH0012221716" ) . add ( 40618 , 20.23 , 259570272.1 ) ; histories . get ( "CH0012221716" ) . add ( 40619 , 20.64 , 218998755.35 ) ; histories . get ( "CH0012221716" ) . add ( 40620 , 20.99 , 389296344.26 ) ; histories . get ( "CH0012221716" ) . add ( 40623 , 21.53 , 170194836.26 ) ; histories . get ( "CH0012221716" ) . add ( 40624 , 21.25 , 145712204.41 ) ; histories . get ( "CH0012221716" ) . add ( 40625 , 21.37 , 94480877.6 ) ; histories . get ( "CH0012221716" ) . add ( 40626 , 21.72 , 156199568.4 ) ; histories . get ( "CH0012221716" ) . add ( 40627 , 21.73 , 77705182.7 ) ; histories . get ( "CH0012221716" ) . add ( 40630 , 21.82 , 99913467.09 ) ; histories . get ( "CH0012221716" ) . add ( 40631 , 21.8 , 99224014.79 ) ; histories . get ( "CH0012221716" ) . add ( 40632 , 22.05 , 145527365.48 ) ; histories . get ( "CH0012221716" ) . add ( 40633 , 22.06 , 128747237.55 ) ; histories . get ( "CH0012332372" ) . add ( 40603 , 56.55 , 61740917.4 ) ; histories . get ( "CH0012332372" ) . add ( 40604 , 55.5 , 109694632.45 ) ; histories . get ( "CH0012332372" ) . add ( 40605 , 55.75 , 93000690.7 ) ; histories . get ( "CH0012332372" ) . add ( 40606 , 55.55 , 60934953.09 ) ; histories . get ( "CH0012332372" ) . add ( 40609 , 55.2 , 50107616.65 ) ; histories . get ( "CH0012332372" ) . add ( 40610 , 55.55 , 56389627.1 ) ; histories . get ( "CH0012332372" ) . add ( 40611 , 54.85 , 79673317.8 ) ; histories . get ( "CH0012332372" ) . add ( 40612 , 53.6 , 118011665.11 ) ; histories . get ( "CH0012332372" ) . add ( 40613 , 51.7 , 334016316.82 ) ; histories . get ( "CH0012332372" ) . add ( 40616 , 49.36 , 270243134.18 ) ; histories . get ( "CH0012332372" ) . add ( 40617 , 48.5 , 269515496.97 ) ; histories . get ( "CH0012332372" ) . add ( 40618 , 48 , 164604315.15 ) ; histories . get ( "CH0012332372" ) . add ( 40619 , 49.14 , 134235102.84 ) ; histories . get ( "CH0012332372" ) . add ( 40620 , 50 , 195304779.54 ) ; histories . get ( "CH0012332372" ) . add ( 40623 , 50.85 , 81699593.52 ) ; histories . get ( "CH0012332372" ) . add ( 40624 , 50.55 , 73358956.13 ) ; histories . get ( "CH0012332372" ) . add ( 40625 , 50.55 , 60507974.45 ) ; histories . get ( "CH0012332372" ) . add ( 40626 , 50.9 , 78045292.15 ) ; histories . get ( "CH0012332372" ) . add ( 40627 , 50.55 , 65612176.5 ) ; histories . get ( "CH0012332372" ) . add ( 40630 , 51.5 , 62055759.5 ) ; histories . get ( "CH0012332372" ) . add ( 40631 , 51.05 , 106724073.67 ) ; histories . get ( "CH0012332372" ) . add ( 40632 , 51.35 , 63792724.15 ) ; histories . get ( "CH0012332372" ) . add ( 40633 , 52.55 , 149224165.45 ) ; histories . get ( "CH0012410517" ) . add ( 40603 , 99.75 , 16009100.6 ) ; histories . get ( "CH0012410517" ) . add ( 40604 , 98.65 , 27927868.45 ) ; histories . get ( "CH0012410517" ) . add ( 40605 , 98.9 , 15465993.85 ) ; histories . get ( "CH0012410517" ) . add ( 40606 , 99.9 , 17677545.33 ) ; histories . get ( "CH0012410517" ) . add ( 40609 , 99.4 , 32670621.56 ) ; histories . get ( "CH0012410517" ) . add ( 40610 , 100.3 , 17870961.69 ) ; histories . get ( "CH0012410517" ) . add ( 40611 , 99.8 , 12183384.45 ) ; histories . get ( "CH0012410517" ) . add ( 40612 , 98.2 , 19227766.57 ) ; histories . get ( "CH0012410517" ) . add ( 40613 , 97.6 , 23371757.8 ) ; histories . get ( "CH0012410517" ) . add ( 40616 , 95.5 , 32157306.15 ) ; histories . get ( "CH0012410517" ) . add ( 40617 , 92.4 , 52466532.09 ) ; histories . get ( "CH0012410517" ) . add ( 40618 , 91.6 , 32868787.9 ) ; histories . get ( "CH0012410517" ) . add ( 40619 , 93.25 , 29983715.55 ) ; histories . get ( "CH0012410517" ) . add ( 40620 , 93.8 , 32831185 ) ; histories . get ( "CH0012410517" ) . add ( 40623 , 95.1 , 24644526.6 ) ; histories . get ( "CH0012410517" ) . add ( 40624 , 94 , 38151687.35 ) ; histories . get ( "CH0012410517" ) . add ( 40625 , 93.3 , 28137070.6 ) ; histories . get ( "CH0012410517" ) . add ( 40626 , 94.05 , 19019184.65 ) ; histories . get ( "CH0012410517" ) . add ( 40627 , 94.05 , 13764905.35 ) ; histories . get ( "CH0012410517" ) . add ( 40630 , 92.65 , 20439113.4 ) ; histories . get ( "CH0012410517" ) . add ( 40631 , 92.5 , 22031051.05 ) ; histories . get ( "CH0012410517" ) . add ( 40632 , 91.65 , 37219945.4 ) ; histories . get ( "CH0012410517" ) . add ( 40633 , 91 , 20848226.39 ) ; histories . get ( "CH0012549785" ) . add ( 40603 , 124.5 , 42654300.7 ) ; histories . get ( "CH0012549785" ) . add ( 40604 , 126.2 , 47709605.2 ) ; histories . get ( "CH0012549785" ) . add ( 40605 , 127.5 , 24358348.5 ) ; histories . get ( "CH0012549785" ) . add ( 40606 , 126.9 , 19608039.4 ) ; histories . get ( "CH0012549785" ) . add ( 40609 , 126.6 , 11351621.3 ) ; histories . get ( "CH0012549785" ) . add ( 40610 , 126.1 , 58909672.92 ) ; histories . get ( "CH0012549785" ) . add ( 40611 , 125.4 , 14548815.6 ) ; histories . get ( "CH0012549785" ) . add ( 40612 , 124.4 , 45325116.36 ) ; histories . get ( "CH0012549785" ) . add ( 40613 , 122.1 , 15117391.7 ) ; histories . get ( "CH0012549785" ) . add ( 40616 , 119.7 , 17022313.1 ) ; histories . get ( "CH0012549785" ) . add ( 40617 , 115.4 , 40586263.67 ) ; histories . get ( "CH0012549785" ) . add ( 40618 , 89.15 , 256690964.42 ) ; histories . get ( "CH0012549785" ) . add ( 40619 , 90 , 85210431 ) ; histories . get ( "CH0012549785" ) . add ( 40620 , 88 , 56238960.56 ) ; histories . get ( "CH0012549785" ) . add ( 40623 , 85.05 , 60960977.65 ) ; histories . get ( "CH0012549785" ) . add ( 40624 , 84.2 , 32112447.93 ) ; histories . get ( "CH0012549785" ) . add ( 40625 , 87.25 , 47130177.1 ) ; histories . get ( "CH0012549785" ) . add ( 40626 , 88.3 , 31431469.45 ) ; histories . get ( "CH0012549785" ) . add ( 40627 , 90.7 , 55837516.3 ) ; histories . get ( "CH0012549785" ) . add ( 40630 , 92.05 , 33401959.6 ) ; histories . get ( "CH0012549785" ) . add ( 40631 , 93.3 , 31505508.15 ) ; histories . get ( "CH0012549785" ) . add ( 40632 , 82.4 , 300350406.88 ) ; histories . get ( "CH0012549785" ) . add ( 40633 , 81.85 , 141436526.13 ) ; histories . get ( "CH0013841017" ) . add ( 40603 , 78.3 , 14346304.1 ) ; histories . get ( "CH0013841017" ) . add ( 40604 , 78.4 , 20931186.7 ) ; histories . get ( "CH0013841017" ) . add ( 40605 , 76.9 , 36152550.8 ) ; histories . get ( "CH0013841017" ) . add ( 40606 , 77 , 15625002 ) ; histories . get ( "CH0013841017" ) . add ( 40609 , 76.35 , 16230619.5 ) ; histories . get ( "CH0013841017" ) . add ( 40610 , 76.95 , 15812745.95 ) ; histories . get ( "CH0013841017" ) . add ( 40611 , 76.9 , 19422449.1 ) ; histories . get ( "CH0013841017" ) . add ( 40612 , 76.5 , 18217054.45 ) ; histories . get ( "CH0013841017" ) . add ( 40613 , 75.6 , 14030808.8 ) ; histories . get ( "CH0013841017" ) . add ( 40616 , 75 , 14405431.25 ) ; histories . get ( "CH0013841017" ) . add ( 40617 , 73.15 , 38897840.75 ) ; histories . get ( "CH0013841017" ) . add ( 40618 , 72.05 , 26701348.6 ) ; histories . get ( "CH0013841017" ) . add ( 40619 , 72.45 , 23711591.35 ) ; histories . get ( "CH0013841017" ) . add ( 40620 , 72.3 , 49863091 ) ; histories . get ( "CH0013841017" ) . add ( 40623 , 75.05 , 30707913.1 ) ; histories . get ( "CH0013841017" ) . add ( 40624 , 74.85 , 10974846.4 ) ; histories . get ( "CH0013841017" ) . add ( 40625 , 75.35 , 12597561.75 ) ; histories . get ( "CH0013841017" ) . add ( 40626 , 76.35 , 18704971.7 ) ; histories . get ( "CH0013841017" ) . add ( 40627 , 76.85 , 15859808.75 ) ; histories . get ( "CH0013841017" ) . add ( 40630 , 77 , 8161118.25 ) ; histories . get ( "CH0013841017" ) . add ( 40631 , 77.15 , 13196275.35 ) ; histories . get ( "CH0013841017" ) . add ( 40632 , 77.55 , 14657960.1 ) ; histories . get ( "CH0013841017" ) . add ( 40633 , 77.05 , 16926113.8 ) ; histories . get ( "CH0014852781" ) . add ( 40603 , 152.3 , 19544097.3 ) ; histories . get ( "CH0014852781" ) . add ( 40604 , 147.3 , 60277363.2 ) ; histories . get ( "CH0014852781" ) . add ( 40605 , 154.8 , 47372207.9 ) ; histories . get ( "CH0014852781" ) . add ( 40606 , 157.8 , 32686721.89 ) ; histories . get ( "CH0014852781" ) . add ( 40609 , 156.1 , 25968080.5 ) ; histories . get ( "CH0014852781" ) . add ( 40610 , 157.4 , 17527645.6 ) ; histories . get ( "CH0014852781" ) . add ( 40611 , 156.6 , 13665401.6 ) ; histories . get ( "CH0014852781" ) . add ( 40612 , 153.6 , 17668319 ) ; histories . get ( "CH0014852781" ) . add ( 40613 , 150.3 , 20186844.05 ) ; histories . get ( "CH0014852781" ) . add ( 40616 , 147.8 , 20586667 ) ; histories . get ( "CH0014852781" ) . add ( 40617 , 142.5 , 43558711.3 ) ; histories . get ( "CH0014852781" ) . add ( 40618 , 139.1 , 36645629.94 ) ; histories . get ( "CH0014852781" ) . add ( 40619 , 142.4 , 28052768.3 ) ; histories . get ( "CH0014852781" ) . add ( 40620 , 145.5 , 30406709.2 ) ; histories . get ( "CH0014852781" ) . add ( 40623 , 148.1 , 20316853.8 ) ; histories . get ( "CH0014852781" ) . add ( 40624 , 149.1 , 12789470.45 ) ; histories . get ( "CH0014852781" ) . add ( 40625 , 149.2 , 12336947.6 ) ; histories . get ( "CH0014852781" ) . add ( 40626 , 151 , 11522910.4 ) ; histories . get ( "CH0014852781" ) . add ( 40627 , 153.8 , 20885858.1 ) ; histories . get ( "CH0014852781" ) . add ( 40630 , 152.7 , 12582009.2 ) ; histories . get ( "CH0014852781" ) . add ( 40631 , 153.4 , 11639367.4 ) ; histories . get ( "CH0014852781" ) . add ( 40632 , 154 , 12436075 ) ; histories . get ( "CH0014852781" ) . add ( 40633 , 151.8 , 11616109.3 ) ; histories . get ( "CH0024899483" ) . add ( 40603 , 18.09 , 317230682.25 ) ; histories . get ( "CH0024899483" ) . add ( 40604 , 18.25 , 330377928.62 ) ; histories . get ( "CH0024899483" ) . add ( 40605 , 18.47 , 252634307.53 ) ; histories . get ( "CH0024899483" ) . add ( 40606 , 17.96 , 285370684.17 ) ; histories . get ( "CH0024899483" ) . add ( 40609 , 17.96 , 210234372.27 ) ; histories . get ( "CH0024899483" ) . add ( 40610 , 18.2 , 211223313.04 ) ; histories . get ( "CH0024899483" ) . add ( 40611 , 17.74 , 304797393.61 ) ; histories . get ( "CH0024899483" ) . add ( 40612 , 17.39 , 344561936.87 ) ; histories . get ( "CH0024899483" ) . add ( 40613 , 17.33 , 280097879.33 ) ; histories . get ( "CH0024899483" ) . add ( 40616 , 17.07 , 327536790.53 ) ; histories . get ( "CH0024899483" ) . add ( 40617 , 16.67 , 454573453.8 ) ; histories . get ( "CH0024899483" ) . add ( 40618 , 16.44 , 298299560.73 ) ; histories . get ( "CH0024899483" ) . add ( 40619 , 16.48 , 318561845.55 ) ; histories . get ( "CH0024899483" ) . add ( 40620 , 16.31 , 536064102.77 ) ; histories . get ( "CH0024899483" ) . add ( 40623 , 16.78 , 204959808.56 ) ; histories . get ( "CH0024899483" ) . add ( 40624 , 16.66 , 172814578.61 ) ; histories . get ( "CH0024899483" ) . add ( 40625 , 16.62 , 127255711.37 ) ; histories . get ( "CH0024899483" ) . add ( 40626 , 16.8 , 130514551.48 ) ; histories . get ( "CH0024899483" ) . add ( 40627 , 16.83 , 148545456.24 ) ; histories . get ( "CH0024899483" ) . add ( 40630 , 17.05 , 129081921.37 ) ; histories . get ( "CH0024899483" ) . add ( 40631 , 16.72 , 207165450.74 ) ; histories . get ( "CH0024899483" ) . add ( 40632 , 16.77 , 127389582.64 ) ; histories . get ( "CH0024899483" ) . add ( 40633 , 16.48 , 178869849.57 ) ; histories . get ( "CH0025238863" ) . add ( 40603 , 121.3 , 41546613.8 ) ; histories . get ( "CH0025238863" ) . add ( 40604 , 120.6 , 17878696.9 ) ; histories . get ( "CH0025238863" ) . add ( 40605 , 123.7 , 17693303.7 ) ; histories . get ( "CH0025238863" ) . add ( 40606 , 124.4 , 21268176.07 ) ; histories . get ( "CH0025238863" ) . add ( 40609 , 124.2 , 13896031.6 ) ; histories . get ( "CH0025238863" ) . add ( 40610 , 124.4 , 11784222.4 ) ; histories . get ( "CH0025238863" ) . add ( 40611 , 125 , 17641587 ) ; histories . get ( "CH0025238863" ) . add ( 40612 , 124.6 , 22725891.3 ) ; histories . get ( "CH0025238863" ) . add ( 40613 , 124.3 , 17561852.51 ) ; histories . get ( "CH0025238863" ) . add ( 40616 , 124.6 , 34208198.5 ) ; histories . get ( "CH0025238863" ) . add ( 40617 , 119.9 , 51131514.87 ) ; histories . get ( "CH0025238863" ) . add ( 40618 , 116.7 , 37214592.8 ) ; histories . get ( "CH0025238863" ) . add ( 40619 , 119 , 26914222.67 ) ; histories . get ( "CH0025238863" ) . add ( 40620 , 122.4 , 35159636.87 ) ; histories . get ( "CH0025238863" ) . add ( 40623 , 126.6 , 25902875.7 ) ; histories . get ( "CH0025238863" ) . add ( 40624 , 126.9 , 24768396.6 ) ; histories . get ( "CH0025238863" ) . add ( 40625 , 126.2 , 16555002.7 ) ; histories . get ( "CH0025238863" ) . add ( 40626 , 127.6 , 10430866.63 ) ; histories . get ( "CH0025238863" ) . add ( 40627 , 129 , 11128868.9 ) ; histories . get ( "CH0025238863" ) . add ( 40630 , 129.9 , 9489915.4 ) ; histories . get ( "CH0025238863" ) . add ( 40631 , 129.5 , 13025912.4 ) ; histories . get ( "CH0025238863" ) . add ( 40632 , 129.4 , 23666919.9 ) ; histories . get ( "CH0025238863" ) . add ( 40633 , 128.5 , 16640827.4 ) ; histories . get ( "CH0025751329" ) . add ( 40603 , 17.45 , 21426805.13 ) ; histories . get ( "CH0025751329" ) . add ( 40604 , 17.71 , 19120753.94 ) ; histories . get ( "CH0025751329" ) . add ( 40605 , 18.16 , 26630768.56 ) ; histories . get ( "CH0025751329" ) . add ( 40606 , 18.06 , 19957516.68 ) ; histories . get ( "CH0025751329" ) . add ( 40609 , 18.45 , 30104742.92 ) ; histories . get ( "CH0025751329" ) . add ( 40610 , 18.4 , 22969168.28 ) ; histories . get ( "CH0025751329" ) . add ( 40611 , 18.17 , 19134784.63 ) ; histories . get ( "CH0025751329" ) . add ( 40612 , 17.74 , 18171252.77 ) ; histories . get ( "CH0025751329" ) . add ( 40613 , 17.46 , 22622283.38 ) ; histories . get ( "CH0025751329" ) . add ( 40616 , 17.23 , 23259489.57 ) ; histories . get ( "CH0025751329" ) . add ( 40617 , 16.69 , 39176730.16 ) ; histories . get ( "CH0025751329" ) . add ( 40618 , 16.12 , 43988000.82 ) ; histories . get ( "CH0025751329" ) . add ( 40619 , 16.26 , 21839803.8 ) ; histories . get ( "CH0025751329" ) . add ( 40620 , 16.27 , 24363703.45 ) ; histories . get ( "CH0025751329" ) . add ( 40623 , 16.85 , 15499519.8 ) ; histories . get ( "CH0025751329" ) . add ( 40624 , 16.65 , 15701241.33 ) ; histories . get ( "CH0025751329" ) . add ( 40625 , 16.68 , 8831436.21 ) ; histories . get ( "CH0025751329" ) . add ( 40626 , 16.8 , 20396848.85 ) ; histories . get ( "CH0025751329" ) . add ( 40627 , 16.79 , 24001817.75 ) ; histories . get ( "CH0025751329" ) . add ( 40630 , 16.76 , 13420990 ) ; histories . get ( "CH0025751329" ) . add ( 40631 , 16.7 , 21399257.76 ) ; histories . get ( "CH0025751329" ) . add ( 40632 , 16.8 , 19759550.57 ) ; histories . get ( "CH0025751329" ) . add ( 40633 , 16.54 , 20151597.61 ) ; histories . get ( "CH0027752242" ) . add ( 40603 , 15.11 , 14306582.46 ) ; histories . get ( "CH0027752242" ) . add ( 40604 , 14.85 , 14747351.45 ) ; histories . get ( "CH0027752242" ) . add ( 40605 , 14.73 , 14777654.38 ) ; histories . get ( "CH0027752242" ) . add ( 40606 , 15.04 , 12644013.81 ) ; histories . get ( "CH0027752242" ) . add ( 40609 , 14.72 , 7514299.98 ) ; histories . get ( "CH0027752242" ) . add ( 40610 , 14.93 , 15514184.07 ) ; histories . get ( "CH0027752242" ) . add ( 40611 , 14.58 , 9940972.73 ) ; histories . get ( "CH0027752242" ) . add ( 40612 , 14.29 , 19543512.53 ) ; histories . get ( "CH0027752242" ) . add ( 40613 , 14.18 , 14881494.06 ) ; histories . get ( "CH0027752242" ) . add ( 40616 , 14.65 , 16348111.86 ) ; histories . get ( "CH0027752242" ) . add ( 40617 , 14.4 , 20191501.91 ) ; histories . get ( "CH0027752242" ) . add ( 40618 , 14.35 , 18186040.52 ) ; histories . get ( "CH0027752242" ) . add ( 40619 , 14.62 , 14019062.69 ) ; histories . get ( "CH0027752242" ) . add ( 40620 , 14.76 , 19325517.11 ) ; histories . get ( "CH0030170408" ) . add ( 40603 , 201.7 , 24801321.3 ) ; histories . get ( "CH0030170408" ) . add ( 40604 , 200.5 , 16472539.6 ) ; histories . get ( "CH0030170408" ) . add ( 40605 , 202.4 , 14350453.5 ) ; histories . get ( "CH0030170408" ) . add ( 40606 , 201.8 , 14682180.3 ) ; histories . get ( "CH0030170408" ) . add ( 40609 , 204.8 , 16994045.6 ) ; histories . get ( "CH0030170408" ) . add ( 40610 , 206.9 , 23427282.2 ) ; histories . get ( "CH0030170408" ) . add ( 40611 , 206.5 , 31871830.2 ) ; histories . get ( "CH0030170408" ) . add ( 40612 , 196 , 61420885.9 ) ; histories . get ( "CH0030170408" ) . add ( 40613 , 194.6 , 43323600.33 ) ; histories . get ( "CH0030170408" ) . add ( 40616 , 192.8 , 25156508.3 ) ; histories . get ( "CH0030170408" ) . add ( 40617 , 188.8 , 43435650.35 ) ; histories . get ( "CH0030170408" ) . add ( 40618 , 184.9 , 47151308.6 ) ; histories . get ( "CH0030170408" ) . add ( 40619 , 186 , 24433149 ) ; histories . get ( "CH0030170408" ) . add ( 40620 , 188.3 , 30513732.35 ) ; histories . get ( "CH0030170408" ) . add ( 40623 , 192.4 , 27275116.7 ) ; histories . get ( "CH0030170408" ) . add ( 40624 , 192.5 , 16151320 ) ; histories . get ( "CH0030170408" ) . add ( 40625 , 193.9 , 17056554 ) ; histories . get ( "CH0030170408" ) . add ( 40626 , 194.2 , 33606032.4 ) ; histories . get ( "CH0030170408" ) . add ( 40627 , 196 , 18754940.5 ) ; histories . get ( "CH0030170408" ) . add ( 40630 , 195.5 , 28755366.4 ) ; histories . get ( "CH0030170408" ) . add ( 40631 , 198.6 , 25950315.58 ) ; histories . get ( "CH0030170408" ) . add ( 40632 , 200.7 , 20769158.4 ) ; histories . get ( "CH0030170408" ) . add ( 40633 , 200 , 13529367.3 ) ; histories . get ( "CH0037851646" ) . add ( 40603 , 17.7 , 32234140.29 ) ; histories . get ( "CH0037851646" ) . add ( 40604 , 17.77 , 23208422.27 ) ; histories . get ( "CH0037851646" ) . add ( 40605 , 17.9 , 22517565.89 ) ; histories . get ( "CH0037851646" ) . add ( 40606 , 17.97 , 14582848.19 ) ; histories . get ( "CH0037851646" ) . add ( 40609 , 18.05 , 18164534.44 ) ; histories . get ( "CH0037851646" ) . add ( 40610 , 18.05 , 15928347.03 ) ; histories . get ( "CH0037851646" ) . add ( 40611 , 18.06 , 31100388.23 ) ; histories . get ( "CH0037851646" ) . add ( 40612 , 18.35 , 38462831.67 ) ; histories . get ( "CH0037851646" ) . add ( 40613 , 18.09 , 18804396.31 ) ; histories . get ( "CH0037851646" ) . add ( 40616 , 18.51 , 41116086.91 ) ; histories . get ( "CH0037851646" ) . add ( 40617 , 18.01 , 53100203.58 ) ; histories . get ( "CH0037851646" ) . add ( 40618 , 17.44 , 59441994.98 ) ; histories . get ( "CH0037851646" ) . add ( 40619 , 17.32 , 37156476.51 ) ; histories . get ( "CH0037851646" ) . add ( 40620 , 17.57 , 24055724.59 ) ; histories . get ( "CH0037851646" ) . add ( 40623 , 17.64 , 17336061.54 ) ; histories . get ( "CH0037851646" ) . add ( 40624 , 18.13 , 24827154.76 ) ; histories . get ( "CH0037851646" ) . add ( 40625 , 18.46 , 28504115.23 ) ; histories . get ( "CH0037851646" ) . add ( 40626 , 18.3 , 15901306.82 ) ; histories . get ( "CH0037851646" ) . add ( 40627 , 18.35 , 21675209.49 ) ; histories . get ( "CH0037851646" ) . add ( 40630 , 18.21 , 17800160.64 ) ; histories . get ( "CH0037851646" ) . add ( 40631 , 19.08 , 74074711.37 ) ; histories . get ( "CH0037851646" ) . add ( 40632 , 18.98 , 39347627.76 ) ; histories . get ( "CH0037851646" ) . add ( 40633 , 19.04 , 21287321.08 ) ; histories . get ( "CH0038459415" ) . add ( 40603 , 53.1 , 100940200 ) ; histories . get ( "CH0038459415" ) . add ( 40604 , 53.05 , 106078850 ) ; histories . get ( "CH0038459415" ) . add ( 40605 , 53.4 , 101261600 ) ; histories . get ( "CH0038459415" ) . add ( 40606 , 52.84 , 106760700 ) ; histories . get ( "CH0038838394" ) . add ( 40623 , 18.87 , 3439792.3 ) ; histories . get ( "CH0038838394" ) . add ( 40624 , 18.86 , 5271552.03 ) ; histories . get ( "CH0038838394" ) . add ( 40625 , 18.8 , 1794630.03 ) ; histories . get ( "CH0038838394" ) . add ( 40626 , 19 , 3495710.71 ) ; histories . get ( "CH0038838394" ) . add ( 40627 , 19.09 , 2932831.38 ) ; histories . get ( "CH0038838394" ) . add ( 40630 , 19.65 , 7240135.41 ) ; histories . get ( "CH0038838394" ) . add ( 40631 , 20.23 , 3374645.68 ) ; histories . get ( "CH0038838394" ) . add ( 40632 , 20.26 , 3830248.82 ) ; histories . get ( "CH0038838394" ) . add ( 40633 , 20.41 , 2267560.25 ) ; histories . get ( "CH0038863350" ) . add ( 40603 , 52.7 , 267194159.5 ) ; histories . get ( "CH0038863350" ) . add ( 40604 , 52.6 , 291228802.26 ) ; histories . get ( "CH0038863350" ) . add ( 40605 , 52.8 , 336823818.78 ) ; histories . get ( "CH0038863350" ) . add ( 40606 , 51.95 , 383124084.21 ) ; histories . get ( "CH0038863350" ) . add ( 40609 , 51.7 , 343134528.58 ) ; histories . get ( "CH0038863350" ) . add ( 40610 , 52 , 377919277.37 ) ; histories . get ( "CH0038863350" ) . add ( 40611 , 51.7 , 312685684.43 ) ; histories . get ( "CH0038863350" ) . add ( 40612 , 51.6 , 459253830.73 ) ; histories . get ( "CH0038863350" ) . add ( 40613 , 51.6 , 338520696.28 ) ; histories . get ( "CH0038863350" ) . add ( 40616 , 51.1 , 430551602.77 ) ; histories . get ( "CH0038863350" ) . add ( 40617 , 49.2 , 1280700997.24 ) ; histories . get ( "CH0038863350" ) . add ( 40618 , 49.14 , 829917121.1 ) ; histories . get ( "CH0038863350" ) . add ( 40619 , 49.74 , 681197694 ) ; histories . get ( "CH0038863350" ) . add ( 40620 , 49.74 , 1225282927.14 ) ; histories . get ( "CH0038863350" ) . add ( 40623 , 51 , 385078817.49 ) ; histories . get ( "CH0038863350" ) . add ( 40624 , 50.45 , 500982067.49 ) ; histories . get ( "CH0038863350" ) . add ( 40625 , 51.35 , 363160865.74 ) ; histories . get ( "CH0038863350" ) . add ( 40626 , 51.7 , 370030609.17 ) ; histories . get ( "CH0038863350" ) . add ( 40627 , 52.15 , 337007455.39 ) ; histories . get ( "CH0038863350" ) . add ( 40630 , 52.3 , 258058938.36 ) ; histories . get ( "CH0038863350" ) . add ( 40631 , 52.5 , 370513471.11 ) ; histories . get ( "CH0038863350" ) . add ( 40632 , 53.15 , 336177591.33 ) ; histories . get ( "CH0038863350" ) . add ( 40633 , 52.65 , 362820722.05 ) ; histories . get ( "CH0043286878" ) . add ( 40603 , 52.65 , 14791160 ) ; histories . get ( "CH0043286878" ) . add ( 40604 , 52.63 , 14704946 ) ; histories . get ( "CH0043286878" ) . add ( 40605 , 52.66 , 14749850 ) ; histories . get ( "CH0043286878" ) . add ( 40606 , 51.98 , 14708440 ) ; histories . get ( "CH0043286878" ) . add ( 40609 , 51.99 , 19762680 ) ; histories . get ( "CH0043286878" ) . add ( 40610 , 52.18 , 14607330 ) ; histories . get ( "CH0043286878" ) . add ( 40611 , 51.81 , 29633610 ) ; histories . get ( "CH0043286878" ) . add ( 40612 , 51.71 , 29518590 ) ; histories . get ( "CH0043286878" ) . add ( 40613 , 51.68 , 29957660 ) ; histories . get ( "CH0043286878" ) . add ( 40616 , 51.33 , 59643350 ) ; histories . get ( "CH0043286878" ) . add ( 40617 , 49.26 , 99829100 ) ; histories . get ( "CH0043286878" ) . add ( 40618 , 49.1 , 99915098 ) ; histories . get ( "CH0043286878" ) . add ( 40619 , 49.63 , 99927250 ) ; histories . get ( "CH0043286878" ) . add ( 40620 , 49.78 , 99854900 ) ; histories . get ( "CH0043286878" ) . add ( 40623 , 51.01 , 99697350 ) ; histories . get ( "CH0043286878" ) . add ( 40624 , 50.38 , 99791350 ) ; histories . get ( "CH0043286878" ) . add ( 40625 , 51.22 , 68323350 ) ; histories . get ( "CH0043286878" ) . add ( 40626 , 51.66 , 55145300 ) ; histories . get ( "CH0043286878" ) . add ( 40627 , 52.11 , 68582900 ) ; histories . get ( "CH0043286878" ) . add ( 40630 , 52.31 , 49620850 ) ; histories . get ( "CH0043286878" ) . add ( 40631 , 52.56 , 49894150 ) ; histories . get ( "CH0043286878" ) . add ( 40632 , 53.11 , 45003000 ) ; histories . get ( "CH0043286878" ) . add ( 40633 , 52.85 , 49737440 ) ; histories . get ( "CH0043692257" ) . add ( 40604 , 306.2 , 607650 ) ; histories . get ( "CH0043692257" ) . add ( 40605 , 309.3 , 618600 ) ; histories . get ( "CH0043692257" ) . add ( 40606 , 309 , 619650 ) ; histories . get ( "CH0043692257" ) . add ( 40609 , 309.5 , 618500 ) ; histories . get ( "CH0043692257" ) . add ( 40610 , 307.5 , 618250 ) ; histories . get ( "CH0043692257" ) . add ( 40611 , 305 , 614500 ) ; histories . get ( "CH0043692257" ) . add ( 40612 , 298.5 , 3143400 ) ; histories . get ( "CH0043692257" ) . add ( 40613 , 296.6 , 594050 ) ; histories . get ( "CH0043692257" ) . add ( 40616 , 290 , 586250 ) ; histories . get ( "CH0043692257" ) . add ( 40617 , 282 , 11136050 ) ; histories . get ( "CH0043692257" ) . add ( 40618 , 288 , 2884300 ) ; histories . get ( "CH0043692257" ) . add ( 40619 , 288.3 , 2881800 ) ; histories . get ( "CH0048265513" ) . add ( 40603 , 78.45 , 61014586.35 ) ; histories . get ( "CH0048265513" ) . add ( 40604 , 77.95 , 61045500.35 ) ; histories . get ( "CH0048265513" ) . add ( 40605 , 79 , 54845717.4 ) ; histories . get ( "CH0048265513" ) . add ( 40606 , 78.65 , 40166516.75 ) ; histories . get ( "CH0048265513" ) . add ( 40609 , 78.3 , 32783754.9 ) ; histories . get ( "CH0048265513" ) . add ( 40610 , 78.5 , 38573245.9 ) ; histories . get ( "CH0048265513" ) . add ( 40611 , 76.95 , 39884895.6 ) ; histories . get ( "CH0048265513" ) . add ( 40612 , 74.4 , 40143640.55 ) ; histories . get ( "CH0048265513" ) . add ( 40613 , 74.2 , 31880998.4 ) ; histories . get ( "CH0048265513" ) . add ( 40616 , 73.3 , 26709930.55 ) ; histories . get ( "CH0048265513" ) . add ( 40617 , 71.75 , 73358671.85 ) ; histories . get ( "CH0048265513" ) . add ( 40618 , 69.7 , 50348066.35 ) ; histories . get ( "CH0048265513" ) . add ( 40619 , 70.2 , 37212858 ) ; histories . get ( "CH0048265513" ) . add ( 40620 , 72 , 139653789.15 ) ; histories . get ( "CH0048265513" ) . add ( 40623 , 72.4 , 32911550.6 ) ; histories . get ( "CH0048265513" ) . add ( 40624 , 72.6 , 45353594.12 ) ; histories . get ( "CH0048265513" ) . add ( 40625 , 72.55 , 24767655.15 ) ; histories . get ( "CH0048265513" ) . add ( 40626 , 73.1 , 24789211.4 ) ; histories . get ( "CH0048265513" ) . add ( 40627 , 72.8 , 31826625.4 ) ; histories . get ( "CH0048265513" ) . add ( 40630 , 72.35 , 27486253.65 ) ; histories . get ( "CH0048265513" ) . add ( 40631 , 73 , 36899766.35 ) ; histories . get ( "CH0048265513" ) . add ( 40632 , 73.1 , 37434301.4 ) ; histories . get ( "CH0048265513" ) . add ( 40633 , 72.2 , 25303327.4 ) ; histories . get ( "CH0102484968" ) . add ( 40603 , 41.34 , 19661243.25 ) ; histories . get ( "CH0102484968" ) . add ( 40604 , 41.77 , 18724062.46 ) ; histories . get ( "CH0102484968" ) . add ( 40605 , 41.58 , 27787662.14 ) ; histories . get ( "CH0102484968" ) . add ( 40606 , 41 , 20453009.62 ) ; histories . get ( "CH0102484968" ) . add ( 40609 , 41.1 , 22601846.71 ) ; histories . get ( "CH0102484968" ) . add ( 40610 , 41.54 , 29663903.87 ) ; histories . get ( "CH0102484968" ) . add ( 40611 , 41.27 , 28799933.93 ) ; histories . get ( "CH0102484968" ) . add ( 40612 , 41.44 , 40179519.67 ) ; histories . get ( "CH0102484968" ) . add ( 40613 , 41.08 , 28805175.9 ) ; histories . get ( "CH0102484968" ) . add ( 40616 , 41.04 , 41800321.88 ) ; histories . get ( "CH0102484968" ) . add ( 40617 , 39.54 , 77205871.94 ) ; histories . get ( "CH0102484968" ) . add ( 40618 , 38.99 , 40541614.43 ) ; histories . get ( "CH0102484968" ) . add ( 40619 , 38.49 , 48567083.45 ) ; histories . get ( "CH0102484968" ) . add ( 40620 , 39.13 , 63852010.41 ) ; histories . get ( "CH0102484968" ) . add ( 40623 , 39.63 , 14747499.16 ) ; histories . get ( "CH0102484968" ) . add ( 40624 , 39.49 , 22473878.99 ) ; histories . get ( "CH0102484968" ) . add ( 40625 , 39.84 , 20532386.9 ) ; histories . get ( "CH0102484968" ) . add ( 40626 , 40.38 , 18162518.72 ) ; histories . get ( "CH0102484968" ) . add ( 40627 , 40.24 , 16482112.23 ) ; histories . get ( "CH0102484968" ) . add ( 40630 , 40.06 , 20263959.6 ) ; histories . get ( "CH0102484968" ) . add ( 40631 , 39.99 , 18229301.53 ) ; histories . get ( "CH0102484968" ) . add ( 40632 , 40.16 , 20553599.52 ) ; histories . get ( "CH0102484968" ) . add ( 40633 , 39.86 , 28091540.34 ) ; histories . get ( "CH0119210984" ) . add ( 40603 , 51.35 , 514875 ) ; histories . get ( "CH0119210984" ) . add ( 40604 , 50.7 , 657775 ) ; histories . get ( "CH0119210984" ) . add ( 40605 , 50.55 , 957525 ) ; histories . get ( "CH0119210984" ) . add ( 40606 , 50.65 , 1015400 ) ; histories . get ( "CH0119210984" ) . add ( 40609 , 50.35 , 555250 ) ; histories . get ( "CH0119210984" ) . add ( 40610 , 50.35 , 602070 ) ; histories . get ( "CH0119210984" ) . add ( 40611 , 50.72 , 556365 ) ; histories . get ( "CH0119210984" ) . add ( 40612 , 50.7 , 659100 ) ; histories . get ( "CH0119210984" ) . add ( 40613 , 50.65 , 430350 ) ; histories . get ( "CH0119210984" ) . add ( 40616 , 49.98 , 852360 ) ; histories . get ( "CH0119210984" ) . add ( 40617 , 49.25 , 3883915 ) ; histories . get ( "CH0119210984" ) . add ( 40618 , 48.7 , 1073695 ) ; histories . get ( "CH0119210984" ) . add ( 40619 , 48.27 , 1404285 ) ; histories . get ( "CH0119210984" ) . add ( 40620 , 49.6 , 1547470 ) ; histories . get ( "CH0119210984" ) . add ( 40623 , 50.55 , 754025 ) ; histories . get ( "CH0119210984" ) . add ( 40624 , 50.65 , 557975 ) ; histories . get ( "CH0119210984" ) . add ( 40625 , 51.2 , 869100 ) ; histories . get ( "CH0119210984" ) . add ( 40626 , 51.65 , 769050 ) ; histories . get ( "CH0119210984" ) . add ( 40627 , 51.95 , 518100 ) ; histories . get ( "CH0119210984" ) . add ( 40630 , 51.95 , 413950 ) ; histories . get ( "CH0119210984" ) . add ( 40631 , 52.2 , 417675 ) ; histories . get ( "CH0119210984" ) . add ( 40632 , 53 , 741660 ) ; histories . get ( "CH0119210984" ) . add ( 40633 , 52.92 , 317265 ) ; histories . get ( "CH0119784319" ) . add ( 40612 , 196.4 , 3936950 ) ; histories . get ( "CH0119784319" ) . add ( 40613 , 195.3 , 1956000 ) ; histories . get ( "CH0119784319" ) . add ( 40616 , 193 , 1937150 ) ; histories . get ( "CH0119784319" ) . add ( 40617 , 189 , 4733550 ) ; histories . get ( "CH0119784319" ) . add ( 40618 , 187 , 2830400 ) ; histories . get ( "CH0119784319" ) . add ( 40619 , 186.3 , 2329750 ) ; histories . get ( "CH0119784319" ) . add ( 40620 , 188.3 , 1409200 ) ; histories . get ( "CH0119784319" ) . add ( 40623 , 191.5 , 476600 ) ; histories . get ( "CH0119784319" ) . add ( 40624 , 192 , 480850 ) ; histories . get ( "CH0119784319" ) . add ( 40625 , 192.6 , 385650 ) ; histories . get ( "CH0119784319" ) . add ( 40626 , 193 , 579300 ) ; histories . get ( "CH0119784319" ) . add ( 40627 , 195.8 , 491500 ) ; histories . get ( "CH0119784319" ) . add ( 40630 , 195.8 , 489300 ) ; histories . get ( "CH0119784319" ) . add ( 40631 , 195.7 , 391700 ) ; histories . get ( "CH0119784319" ) . add ( 40632 , 200.4 , 400650 ) ; histories . get ( "CH0119784319" ) . add ( 40633 , 200.3 , 401250 ) ; histories . get ( "US87162M4096" ) . add ( 40603 , 126.6 , 34567809.8 ) ; histories . get ( "US87162M4096" ) . add ( 40604 , 125.3 , 22453196.5 ) ; histories . get ( "US87162M4096" ) . add ( 40605 , 126.3 , 30209783 ) ; histories . get ( "US87162M4096" ) . add ( 40606 , 125.2 , 24880247.7 ) ; histories . get ( "US87162M4096" ) . add ( 40609 , 125.7 , 26325843.7 ) ; histories . get ( "US87162M4096" ) . add ( 40610 , 125.8 , 20787315.3 ) ; histories . get ( "US87162M4096" ) . add ( 40611 , 124.7 , 38871078.8 ) ; histories . get ( "US87162M4096" ) . add ( 40612 , 126.2 , 36846600.8 ) ; histories . get ( "US87162M4096" ) . add ( 40613 , 124.7 , 31709702.1 ) ; histories . get ( "US87162M4096" ) . add ( 40616 , 125.1 , 36270741 ) ; histories . get ( "US87162M4096" ) . add ( 40617 , 120.3 , 68499000.1 ) ; histories . get ( "US87162M4096" ) . add ( 40618 , 119.1 , 49122125.3 ) ; histories . get ( "US87162M4096" ) . add ( 40619 , 119 , 41245141.4 ) ; histories . get ( "US87162M4096" ) . add ( 40620 , 119.3 , 70541725.85 ) ; histories . get ( "US87162M4096" ) . add ( 40623 , 119.8 , 28673036.9 ) ; histories . get ( "US87162M4096" ) . add ( 40624 , 120 , 22211002 ) ; histories . get ( "US87162M4096" ) . add ( 40625 , 121.3 , 25974156.7 ) ; histories . get ( "US87162M4096" ) . add ( 40626 , 121.8 , 22835189.2 ) ; histories . get ( "US87162M4096" ) . add ( 40627 , 122.5 , 19869286 ) ; histories . get ( "US87162M4096" ) . add ( 40630 , 122.1 , 16282831.3 ) ; histories . get ( "US87162M4096" ) . add ( 40631 , 122.1 , 23700336.7 ) ; histories . get ( "US87162M4096" ) . add ( 40632 , 124.4 , 34714525.8 ) ; histories . get ( "US87162M4096" ) . add ( 40633 , 124.2 , 49494384.8 ) ; }
va	6	public Coord setZ ( Number z ) { return copy ( ) . setZ_ip ( z ) ; }
va	7	public SortedMap < Integer , String > getColumnNames ( ) { return Collections . unmodifiableSortedMap ( header ) ; }
va	4	public static RequestDispatcher getInstance ( ) { return SingletonHolder . instance ; }
va	3	public void setObstaclesExpanded ( boolean expansion ) { this . obstacles_expanded = expansion ; }
va	9	public void printHelp ( ) { StringBuffer help = new StringBuffer ( ) ; help . append ( "\nYour are lost. You are alone. You wander\n" ) ; help . append ( "around the giant's house.\n" ) ; help . append ( "Your command words are:\n --> " ) ; help . append ( CommandInterpreter . getPossibleCommands ( ) ) ; help . append ( "\n" ) ; String helpString = new String ( help ) ; notifyListeners ( helpString ) ; }
va	1	public DefaultChildFeatureHolder ( ) { }
va	1	public MpegVideoDecodeException ( ) { super ( ) ; }
va	4	public int weightOf ( Object key , Object value ) { return 1 ; }
va	7	@ Override public void run ( ) { for ( int i = 0 ; i < 50 ; ++ i ) { final long number = sequence . nextNumber ( ) ; addNumber ( number ) ; } }
va	8	private void menuHelpActionPerformed ( java . awt . event . ActionEvent evt ) { new HelpPopup ( ) . setVisible ( true ) ; }
va	10	public int getSquare ( ) { int nodex = ( int ) Math . floor ( ( this . x + 8 ) / this . length ) - 1 ; int nodey = ( int ) Math . floor ( ( this . y + 8 ) / this . length ) - 1 ; int square = nodex + ( nodey * this . size ) ; return square ; }
va	1	public ObjectFactory ( ) { }
va	2	public int getSpeed ( ) { return speed ; }
va	8	@ XmlElementDecl ( namespace = "http://api.soap.mytxtbuddy.com/" , name = "removeContactsResponse" ) public JAXBElement < RemoveContactsResponse > createRemoveContactsResponse ( RemoveContactsResponse value ) { return new JAXBElement < RemoveContactsResponse > ( _RemoveContactsResponse_QNAME , RemoveContactsResponse . class , null , value ) ; }
va	1	public DashedHorizontalLine ( ) { }
va	5	public String toString ( ) { return name + ": " + buttonActivatorCount + " button activators  " + randomCount + " random" ; }
va	8	public List < RetweetDetails > getRetweets ( long statusId ) throws WeiboException { return RetweetDetails . createRetweetDetails ( get ( getBaseURL ( ) + "statuses/retweets/" + statusId + ".json" , true ) ) ; }
va	2	public void update ( long timePassed ) { }
va	9	public void write ( Kml kml ) throws KmlException { kml . println ( "<MultiGeometry" + getIdAndTargetIdFormatted ( kml ) + ">" , 1 ) ; if ( geometries != null ) { for ( Geometry geometry : geometries ) { geometry . write ( kml ) ; } } kml . println ( - 1 , "</MultiGeometry>" ) ; }
va	1	public static void mergeKsorted2 ( ) { }
va	10	@ Test public final void testGenerateRepeatedDifferentCase ( ) { final ArrayList < String > result = StringUtilities . generate ( "aaaa aaaa Aaaa aAaa aaAa aaaA aAAa AAAA AaAa bbb cc d." ) ; assertEquals ( "aaaa" , result . get ( 0 ) ) ; assertEquals ( 1 , result . size ( ) ) ; }
va	7	@ Override public void setDim ( int dim ) throws ConnectException { this . dim = dim ; makeDynaSys ( ) ; outputY . setDim ( dim * ( order + 1 ) ) ; }
va	2	public void setbIsExclusive ( boolean bIsExclusive ) { this . bIsExclusive = bIsExclusive ; }
va	1	public Lambda ( ) { }
va	8	@ Override protected void finalize ( ) { for ( int i = 0 ; i < id . length ; i ++ ) { glDeleteTextures ( id [ i ] ) ; } if ( frameBuffer != 0 ) { glDeleteFramebuffers ( frameBuffer ) ; } }
va	5	public void translate ( Vec3f displacement ) { coordSys . translateInLocal ( displacement ) ; }
va	3	public void setDateOfBirth ( String dateOfBirth ) { this . dateOfBirth = dateOfBirth ; }
va	8	@ Override public void producerFinished ( Producer producer ) { Logger . log ( "Producer finished" ) ; consumerThread . interrupt ( ) ; }
va	2	AnimalType ( int id ) { this . id = id ; }
va	5	public void print ( double d , int dec ) { this . out . print ( this . formatDouble ( d , dec ) ) ; }
va	1	public int getRowCount ( ) { return 6 ; }
va	5	public void removeDetalle ( RemitoDetalle detalle ) { this . detalles . remove ( detalle ) ; }
va	8	@ Override public T visitBlock ( @ NotNull DecafParser . BlockContext ctx ) { return visitChildren ( ctx ) ; }
va	7	@ Override public boolean equals ( Object v ) { if ( ( ! ( v instanceof vslRecKey ) ) || id == null || ( ( vslRecKey ) v ) . getKey ( ) == null ) { return false ; } else { return id . equals ( ( ( vslRecKey ) v ) . getKey ( ) ) ; } }
va	9	private void topScoresDialogWindowClosing ( java . awt . event . WindowEvent evt ) { new CompAction ( ) . ghostOut ( topScoresDialog ) ; }
va	10	public void endElement ( String namespaceURI , String sName , String qName ) { if ( curr != null && ! "domain" . equals ( curr ) ) { elements . put ( curr , value ) ; curr = null ; } }
va	6	public boolean update ( MNode o , MNode n ) { return remove ( o ) && add ( n ) ; }
va	3	public void run ( ) { this . loadFiles ( ) ; this . computeStats ( ) ; }
va	10	public Uf ( int id , String nome , String sigla , String capital , String regiao , Model pais ) { this . id = id ; this . nome = nome ; this . sigla = sigla ; this . capital = capital ; this . regiao = regiao ; this . pais = ( Pais ) pais ; }
va	7	public StreamFilenameEncryptionStrategy ( EncFSVolume volume , String volumePath ) { super ( volume , volumePath , EncFSFilenameEncryptionAlgorithm . STREAM ) ; }
va	9	public Player ( String name , int hp , int atk , int def , int dex , int agi ) { super ( name , hp , atk , def , dex , agi ) ; this . taunt = 0 ; }
va	6	private PropertyUtil ( File propertyFile ) throws ConfigurationException { propertiesConfiguration = new PropertiesConfiguration ( propertyFile ) ; }
va	5	private void firePeerReady ( ) { for ( PeerActivityListener listener : this . listeners ) { listener . handlePeerReady ( this ) ; } }
va	1	public void animationCycled ( ) { }
va	5	static public String getErrorString ( int errorcode ) { return "Decoder errorcode " + Integer . toHexString ( errorcode ) ; }
va	5	public FloorPlan ( int w , int h ) { fwidth = w ; fheight = h ; }
va	8	public String toString ( ) { String result = "" ; result += "Time Control Status\n" ; result += "Nominal Search Time: " + Util . toTimeString ( nominal_search_time ) + "\n" ; result += "Max Search Time: " + Util . toTimeString ( panic_search_time ) + "\n" ; result += "isPonderSearch: " + isPonderSearch ; return result ; }
va	4	public void setNotes ( String value ) { this . notes = value ; }
va	2	public HugeNumber ( ) { mostSig = null ; }
va	10	void markRemoveObject ( String index ) { int idx = objects . get ( index ) ; if ( idx < 0 ) return ; obj_to_remove . put ( index , ( JGObject ) objects . values [ idx ] ) ; }
va	4	@ Override public Draft copyInstance ( ) { return new Draft_76 ( ) ; }
va	8	DraughtsCompetitionGUI ( String [ ] pluginFolders ) { super ( DraughtsPlugin . class , pluginFolders ) ; DraughtsGUI gui = new DraughtsGUI ( ) ; initComponents ( gui ) ; this . add ( gui ) ; gui . add ( this ) ; }
va	4	public void rotate ( double theta ) { rotation += theta ; repaint ( ) ; }
va	2	public int getUserRights ( ) { return userRights ; }
va	5	private void resetData ( ) { this . snaggers . clear ( ) ; this . snags = 0 ; this . votes = new int [ ] { 0 , 0 } ; }
va	7	private static TransformerHandler getTransformerHandler ( ) throws TransformerConfigurationException { return ( ( SAXTransformerFactory ) LOCAL . get ( ) ) . newTransformerHandler ( ) ; }
va	9	static public JSONObject getWvWMatches ( ) throws IOException , JSONException { return new jGW2API ( new URL ( jGW2API . Standard_URL + jGW2API . API_Version_1 + "wvw/matches.json" ) ) . getJSONObject ( ) ; }
va	2	public double getBalance ( ) { return balance ; }
va	7	public static double f2 ( double x , double y ) { double z = sin ( x * PI ) * cos ( y * PI ) ; return z ; }
va	1	public Randomizer ( ) { }
va	7	public static boolean check ( ) { try { MessageDigest md = MessageDigest . getInstance ( HASH_FUNCTION ) ; return true ; } catch ( NoSuchAlgorithmException ex ) { return false ; } }
va	3	public void setAuthorizeUri ( String authorizeUri ) { this . authorizeUri = authorizeUri ; }
va	3	public String getJob ( ) { return job ; }
va	6	private void DirectoryButtonActionPerformed ( java . awt . event . ActionEvent evt ) { }
va	5	public List < Tuple < Integer , Integer >> getUntriedMoves ( ) { return untriedMoves ; }
va	4	public void assignColor ( final int curve , final Color color ) { this . color [ curve ] = color ; }
va	9	public void setPlayerScore ( final Integer score ) { EventQueue . invokeLater ( new Runnable ( ) { public void run ( ) { statusBar . setPlayerScoreValue ( score ) ; } } ) ; }
va	5	@ Override public String toString ( ) { return id + "(" + dec . toString ( ) + ")" ; }
va	5	@ Test public void levPalauttaaNollan ( ) { assertEquals ( 0 , nappula . lev ( ) ) ; }
va	5	@ Override public Integer call ( ) throws Exception { COUNT += 1 ; return COUNT ; }
va	9	public BinarySearchTree ( K key , V value ) { list = new ArrayList < KeyValue > ( ) ; list . add ( new KeyValue ( key , value ) ) ; }
va	5	public Reader getCharacterStream ( int columnIndex ) throws SQLException { throw new UnsupportedOperationException ( "Not supported yet." ) ; }
va	8	private int getPieceLocationEvaluation ( GameState gs ) { int score = 0 ; score += 80 * getFAMEMaterialScore ( gs , FULL_BB ) ; if ( createText ) { eval_text += "FAME Material Score: " + score + "\n" ; } return score ; }
va	5	public Nodo ( String n ) { nombre = n ; siguiente = null ; }
va	5	public void setLeft ( int left ) { Dispatch . put ( this , "Left" , new Variant ( left ) ) ; }
va	8	public String GetRemTimeString ( int sec ) { String remTimeString = "" ; int remSec = sec % 60 ; int min = sec / 60 ; int remMin = min % 60 ; int hours = min / 60 ; remTimeString = hours + ":" + remMin + ":" + remSec ; return remTimeString ; }
va	1	public MainFrame ( ) { }
va	2	public int getaProcesar ( ) { return aProcesar ; }
va	1	public void updateModel ( ) { }
va	7	public static String getEmailDomain ( String emailAddress ) { int index = emailAddress . indexOf ( "@" ) ; return emailAddress . substring ( index + 1 , emailAddress . length ( ) ) ; }
va	10	public String getOperacion ( ) { String strOperation = "" ; strOperation += Character . toUpperCase ( this . getClase ( ) . charAt ( 0 ) ) + this . getClase ( ) . substring ( 1 ) ; strOperation += Character . toUpperCase ( this . getMetodo ( ) . charAt ( 0 ) ) + this . getMetodo ( ) . substring ( 1 ) ; strOperation += this . getFase ( ) ; return strOperation ; }
va	6	@ Test public void positionalWeightingWithMixedSignsInTheArray ( ) throws Exception { assertEquals ( 90 - 9 , Digits . joinDigits ( new int [ ] { 9 , - 9 } ) ) ; assertEquals ( 9000 - 900 - 20 + 3 , Digits . joinDigits ( new int [ ] { 9 , - 9 , - 2 , 3 } ) ) ; assertEquals ( - 9000 - 900 - 20 + 3 , Digits . joinDigits ( new int [ ] { - 9 , - 9 , - 2 , 3 } ) ) ; assertEquals ( - 9000 + 0 + 50 - 3 , Digits . joinDigits ( new int [ ] { - 9 , 0 , 5 , - 3 } ) ) ; }
va	1	public OutputFileManagerTest ( ) { }
va	5	@ Override public void changeLevel ( int newLevel ) { this . model . setLevel ( newLevel ) ; }
va	5	public void addRoom ( Rectangle room ) { rooms . add ( room ) ; }
va	6	@ Override protected void addValueToEstimator ( double x ) { sum = sum + x ; this . ar . add ( x ) ; }
va	10	public Contact [ ] resize ( int currentSize , Integer capacity , Contact [ ] c ) { Contact [ ] copy ; if ( capacity == null ) { int j = 0 ; while ( j < c . length ) { if ( c [ j ] == null ) break ; j ++ ; } copy = new Contact [ j ] ; for ( int i = 0 ; i < copy . length ; i ++ ) { copy [ i ] = c [ i ] ; } return copy ; } copy = new Contact [ capacity ] ; if ( capacity > currentSize ) { for ( int i = 0 ; i < currentSize ; i ++ ) { copy [ i ] = c [ i ] ; } } else { for ( int i = 0 ; i < capacity ; i ++ ) { copy [ i ] = c [ i ] ; } } return copy ; }
va	2	public boolean isFailed ( ) { return failed ; }
va	9	private void assertXMLEqual ( Document expected , Document actual ) throws Exception { XMLUnit . setIgnoreWhitespace ( true ) ; XMLUnit . setIgnoreComments ( true ) ; XMLAssert . assertXMLEqual ( expected , actual ) ; }
va	1	public TagCompound ( ) { super ( null ) ; }
va	4	@ Override public Rectangle2D getBounds2D ( ) { throw new UnsupportedOperationException ( "Not supported yet." ) ; }
va	2	public static int waysRunUp ( int n ) { if ( n < 0 ) { return 0 ; } else if ( n == 0 ) { return 1 ; } return waysRunUp ( n - 1 ) + waysRunUp ( n - 2 ) + waysRunUp ( n - 3 ) ; }
va	6	public Vector4f ( final float pX , final float pY , final float pZ , final float pW ) { set ( pX , pY , pZ , pW ) ; }
va	10	public static void main ( String [ ] args ) { BurstBalloons burstBalloons = new BurstBalloons ( ) ; int [ ] test = { 3 , 1 , 5 , 8 } ; System . out . println ( burstBalloons . maxCoins ( test ) ) ; }
va	7	private boolean dbExists ( String dbName , String user , String password ) { con = makeConnection ( dbName , user , password ) ; return con != null ; }
va	8	public static void exit ( ) { DebugUtils . info ( "Closing application" ) ; moduleManager . unloadAllModules ( ) ; desktop . getFrame ( ) . dispose ( ) ; }
va	9	private void createSamples ( int numSamples , int numSets ) { samples . clear ( ) ; for ( int j = 0 ; j < numSets ; j ++ ) samples . addAll ( sample . createSamples ( numSamples ) ) ; shuffleIndices ( ) ; }
va	7	protected void applyTransforms ( Graphics2D g2d ) { g2d . transform ( translation ) ; g2d . transform ( rotation ) ; g2d . transform ( scale ) ; }
va	4	public static SchemeObject caar ( SchemeObject obj ) { return car ( car ( obj ) ) ; }
va	1	public void decay ( ) { }
va	6	@ Override protected void setEstadoEdicao ( ) { jTFChamado . setEditable ( true ) ; jTFFerramenta . setEditable ( true ) ; jTFChamado . requestFocusInWindow ( ) ; }
va	4	public SnakePiece getTail ( ) { return snakePieces . getLast ( ) ; }
va	7	public void setVolume ( int channel , int volume ) { if ( channel < 0 || channel >= channelCount ) throw new IllegalArgumentException ( "Channel must be in legal range!" ) ; if ( volume < 0 || volume > short . MAX_VALUE ) throw new IllegalArgumentException ( "Volume must be in legal range!" ) ; vol [ channel ] = ( short ) volume ; }
va	9	public String toSVG ( ) throws Exception { Document doc = null ; try { doc = ( Document ) docTemp . cloneNode ( true ) ; } catch ( Exception e ) { } return paint ( doc ) ; }
va	6	public Loop loop ( Loop loop ) { loop . setContext ( getContext ( ) ) ; loops . add ( loop ) ; return this ; }
va	5	public AIDuelSupporter ( Model model , AiDuelOptionsWindow optionsWindow ) { this . model = model ; this . optionsWindow = optionsWindow ; }
va	2	public void setAmount ( float amount ) { this . amount = amount ; }
va	9	public void addFluidFlow ( ) { if ( selectedEdges . size ( ) == 1 ) { new FluidFlow ( selectedEdges . get ( 0 ) ) ; } else { new FluidFlow ( selectedEdges ) ; } selectedEdges = new ArrayList < > ( ) ; DrawInterface . getInstance ( ) . repaint ( ) ; }
va	6	@ Test public void testGetIdlePercent ( ) { assertEquals ( IdlePercent , cpustat . getIdlePercent ( ) , 0 ) ; }
va	7	public Pack ( S o1 , T o2 , U o3 ) { this . o1 = o1 ; this . o2 = o2 ; this . o3 = o3 ; }
va	2	public StringConstant ( int stringIndex ) { this . stringIndex = stringIndex ; }
va	8	public MapGenerator ( int width , int height ) { this . width = width ; this . height = height ; grid = new MapTile [ width ] [ height ] ; for ( int i = 0 ; i < width ; i ++ ) { for ( int j = 0 ; j < height ; j ++ ) { grid [ i ] [ j ] = MapTile . SPACE ; } } }
va	6	private static String reverse ( String s ) { StringBuilder builder = new StringBuilder ( s ) ; builder . reverse ( ) ; return builder . toString ( ) ; }
va	7	public boolean delete ( ) { try { return file . delete ( ) ; } catch ( NullPointerException e ) { System . out . println ( "COnfigure el archivo primero" ) ; } return false ; }
va	6	public Apartamento getApartamentoSeleccionado ( ) { long codigo = tblApartamentos . getIndiceFilaSeleccion ( 1 ) ; return Apartamento . buscar ( codigo ) ; }
va	4	public void setContentType ( String value ) { this . contentType = value ; }
va	4	@ Override public String toString ( ) { return "com.peusoft.ptc.model.User[ id=" + id + " ]" ; }
va	3	public Game getGame ( ) { return game ; }
va	7	private ReportSheet getRegistrationPaymentsSheetForImport ( ) { List < String > registrationPMTFieldPaths = new ArrayList < String > ( ) ; registrationPMTFieldPaths . add ( "registration.id" ) ; registrationPMTFieldPaths . add ( "amountPaid" ) ; registrationPMTFieldPaths . add ( "mode" ) ; registrationPMTFieldPaths . add ( "receiptInfo" ) ; registrationPMTFieldPaths . add ( "receiptDate" ) ; registrationPMTFieldPaths . add ( "pdcNotClear" ) ; registrationPMTFieldPaths . add ( "pdc" ) ; registrationPMTFieldPaths . add ( "pdcDate" ) ; registrationPMTFieldPaths . add ( "remarks" ) ; return new ReportSheet ( "Payments" , registrationPMTFieldPaths , "payments" , "com.yvphk.model.form.EventPayment" ) ; }
va	7	public static boolean intersects ( Point a , Point b , Point c , Point d ) { return ( sideOfLine ( a , b , c ) * sideOfLine ( a , b , d ) <= 0 && sideOfLine ( c , d , a ) * sideOfLine ( c , d , b ) <= 0 ) ; }
va	3	public void setAnswer ( String answer ) { this . answer = answer ; }
va	9	public String choose ( int num , Supplier < String > first , Supplier < String > second , Supplier < String > third ) { switch ( num ) { case 1 : return first . get ( ) ; case 2 : return second . get ( ) ; case 3 : return third . get ( ) ; default : throw new IllegalArgumentException ( "Illegal num " + num ) ; } }
va	9	public static int getIntProperty ( String name ) { String value = getProperty ( name ) ; try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException nfe ) { return - 1 ; } }
va	8	@ Override public void run ( final Vehicle vehicle ) throws IOException { printVehicleStats ( vehicle , System . out ) ; }
va	1	public boolean isRetryable ( ) { return true ; }
va	2	@ Override public void inputEnded ( ) { super . inputEnded ( ) ; }
va	8	@ Override public String toString ( ) { switch ( type ) { case BLANK_ENGLISH : return "blank english" ; case BLANK_LOCAL : return "blank local" ; case EQUAL : return "equal" ; case DIFFERENT : default : return "different" ; } }
va	2	public void setRecovery ( int recovery ) { this . recovery = recovery ; }
va	1	public boolean startedFestival ( ) { return this . startedFestival ; }
va	7	private static int toIndex ( Direction dir ) { switch ( dir ) { case SOUTH : return 0 ; case NORTH : return 1 ; case WEST : return 2 ; case EAST : return 3 ; } return 0 ; }
va	6	private int displayMainMenu ( ) { screen . displayMessageLine ( "\nMain menu:" ) ; screen . displayMessageLine ( "1 - View my balance" ) ; screen . displayMessageLine ( "2 - Withdraw cash" ) ; screen . displayMessageLine ( "3 - Deposit funds" ) ; screen . displayMessageLine ( "4 - Exit\n" ) ; screen . displayMessage ( "Enter a choice: " ) ; return keypad . getInput ( ) ; }
va	1	public int data ( ) { return data ( 1 ) ; }
va	4	public void setFILEID ( String value ) { this . fileid = value ; }
va	3	@ After public void tearDown ( ) throws Exception { }
va	1	public int matchesWon ( ) { return matchesWon ; }
va	7	public boolean [ ] getActivees ( ) { int l = rawData . length ; boolean [ ] all = new boolean [ l ] ; for ( int i = 0 ; i < l ; i ++ ) { all [ i ] = isActivee ( i ) ; } return all ; }
va	6	public static double gaussian ( double x ) { return Math . exp ( - x * x / 2 ) / Math . sqrt ( 2 * Math . PI ) ; }
va	3	public boolean hasArgName ( ) { return argName != null && argName . length ( ) > 0 ; }
va	9	@ Override public short convertTo ( String source ) { try { short value = short . parseShort ( source ) ; return value ; } catch ( NumberFormatException ex ) { if ( super . zeroOnError ) { return 0 ; } else { throw ex ; } } }
va	5	public void setTradedQuantity ( java . math . BigDecimal tradedQuantity ) { this . tradedQuantity = tradedQuantity ; }
va	7	private void loadedImageFail ( int targetIndex ) { try { throw new Exception ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } loadedImage ( FailImage , targetIndex ) ; }
va	8	@ Test public void ELECTRIC_attacking_ROCK ( ) { assertEquals ( 1.0 , tc . getWeaknessResistance ( Type . ELECTRIC , Type . ROCK ) , 0.0 ) ; }
va	9	public static void main ( String [ ] args ) throws IOException { RestBankServer server = new RestBankServer ( Integer . valueOf ( args [ 0 ] ) ) ; server . start ( ) ; }
va	2	public double getRotationX ( ) { return rotationX ; }
va	1	public void begin ( ) { }
va	8	@ Override public < S , T > T visit ( SMPLVisitor < S , T > visitor , S state ) { return visitor . visitBoolAnd ( this , state ) ; }
va	1	public CreditCardService ( ) { }
va	2	public void setCspace ( float Cspace ) { this . Cspace = Cspace ; }
va	5	public JSONArray ( String source ) throws JSONException { this ( new JSONTokener ( source ) ) ; }
va	5	private void parseName ( String image_path ) { myName = image_path . split ( "/" ) [ 2 ] . split ( "\\." ) [ 0 ] ; }
va	6	public MainConsoleMenu ( CurrentGameState cgs ) { this . cgs = cgs ; this . userInput = new UserInput ( ) ; this . keepPlaying = true ; }
va	10	public static void main ( String [ ] args ) { Prestamo pre = new PrestamoAuto ( 7000 ) ; System . out . println ( "Seguro: " + ( ( PrestamoAuto ) pre ) . getMontoSeguro ( ) ) ; }
va	5	static HTML createHtml ( ) { HTML item = new HTML ( ) ; item . setStylePrimaryName ( PRIMARY_STYLE_TEXT ) ; return item ; }
va	4	public void setIndexTopBound ( final Integer indexTopBound ) { indexMaximum = indexTopBound ; }
va	1	public CDR ( ) { }
va	2	private static byte normalizeByte ( byte b ) { if ( b < 0 ) { return ( byte ) ( 256 + b ) ; } else return b ; }
va	10	protected Location translateCoordinates ( Location point ) { int centerX = ( int ) myBounds . getWidth ( ) / 2 ; int centerY = ( int ) myBounds . getHeight ( ) / 2 ; return new Location ( centerX + point . getX ( ) , centerY - point . getY ( ) ) ; }
va	4	public static void main ( String [ ] args ) { new StaticAnimationDemo ( ) ; }
va	4	void setChanges ( List < Event > changes ) { this . changes = changes ; }
va	2	public SubbandLayer1Stereo ( int subbandnumber ) { super ( subbandnumber ) ; }
va	4	@ Override public String getName ( ) { return nom ; }
va	10	@ Test public void machine1Intialization ( ) { machine1 = new machineImpl . Builder ( 1 ) . location ( "ER Room 1" ) . yearsOfService ( 2 ) . build ( ) ; assert . assertEquals ( machine1 . getLocation ( ) , "ER Room 1" ) ; }
va	9	private static boolean isSorted ( Object [ ] a , Comparator c , int lo , int hi ) { for ( int i = lo + 1 ; i <= hi ; i ++ ) if ( less ( c , a [ i ] , a [ i - 1 ] ) ) return false ; return true ; }
va	5	public static boolean isMediaUrl ( String input ) { return isRtmpUrl ( input ) || isHttpUrl ( input ) ; }
va	6	@ Override public Object getValueAt ( int rowIndex , int columnIndex ) { return this . filasColumnasTabla [ rowIndex ] [ columnIndex ] ; }
va	1	public Object1 ( ) { }
va	9	public Cheque ( int n , double m , boolean c ) { numero = n ; monto = m ; cambiado = c ; fecha = new Date ( ) ; }
va	1	protected void execute ( ) { }
va	1	public TokenMgrError ( ) { }
va	6	public Quaternion conjugate ( ) { return new Quaternion ( - x , - y , - z , w ) ; }
va	7	@ Test public void converts ( ) throws Exception { assertEquals ( 4.5 , new Converter_0 ( ) . apply ( CONVERSION_RATE , 3.0 ) , 0.0001 ) ; assertEquals ( 6.0 , new Converter_0 ( ) . apply ( CONVERSION_RATE , 4.0 ) , 0.0001 ) ; assertEquals ( 7.5 , new Converter_0 ( ) . apply ( CONVERSION_RATE , 5.0 ) , 0.0001 ) ; }
va	3	private EstacionAdmin ( ) { this . colEstacion = new HashMap < > ( ) ; }
te	1	public ASTBoExp ( ) { }
te	7	public GliderUser ( XCGame app , Vector3d p ) { super ( app , p , true ) ; app . eventManager . subscribe ( this ) ; }
te	5	@ Override public String toString ( ) { return "Wildcard{pattern=" + pattern + " parts=" + parts + "}" ; }
te	5	public static class < ? > getUserClass ( Object instance ) { assert . notNull ( instance , "Instance must not be null" ) ; return getUserClass ( instance . getClass ( ) ) ; }
te	4	public void setRolle ( String rolle ) { this . rolle = replaceChar ( rolle ) ; }
te	6	private void txtEmailActionPerformed ( java . awt . event . ActionEvent evt ) { }
te	4	public void resetTabsContent ( ) { if ( mRestoreTabController != null ) mRestoreTabController . reset ( ) ; if ( mVisualizeTabController != null ) mVisualizeTabController . reset ( ) ; }
te	3	public void setStatusString ( String statusString ) { this . statusString = statusString ; }
te	4	public List < String > getErrorMessages ( ) { return list ; }
te	5	public void markForUpdateByPixel ( int pixelX , int pixelY ) { markForUpdate ( pixelX / tileDim , pixelY / tileDim ) ; }
te	3	public void setLlinatge1 ( String llinatge1 ) { this . llinatge1 = llinatge1 ; }
te	2	public float getLongitudeVerticalDown ( ) { return longitudeVerticalDown ; }
te	4	public List < String > getTimeSeriesNames ( ) { return this . graphPanel . getTimeSeriesNames ( ) ; }
te	6	@ Override public void mediaSubItemAdded ( MediaPlayer mp , libvlc_media_t l ) { }
te	2	public long getSIZE ( ) { return size ; }
te	1	public MostBasicResponse ( ) { super ( null ) ; }
te	2	public void setPagado ( boolean pagado ) { this . pagado = pagado ; }
te	9	private ArrayList < IProducto > clonarProductos ( List < IProducto > productos ) { ArrayList < IProducto > productos_copia = new ArrayList < IProducto > ( ) ; for ( IProducto producto : productos ) { productos_copia . add ( producto . clonar ( ) ) ; } return productos_copia ; }
te	8	public static UIPlayer getPlayer ( Player player ) { if ( ! players . containsKey ( player ) ) { players . put ( player , new UIPlayer ( player ) ) ; } return players . get ( player ) ; }
te	3	public SMValue ( T value ) { this . value = value ; }
te	7	private void addNewEntities ( ) { synchronized ( addQueue ) { if ( ! addQueue . isEmpty ( ) ) { synchronized ( entitySet ) { entitySet . addAll ( addQueue ) ; } addQueue . clear ( ) ; this . dirtyCache = true ; } } }
te	3	public void setApellidoPaterno ( String apellidoPaterno ) { this . apellidoPaterno = apellidoPaterno ; }
te	7	public void mouseClicked ( MouseEvent e ) { if ( ! has_focus ) canvas . requestFocus ( ) ; updateMouse ( e , false , false , true ) ; }
te	9	public static int maxProfit4 ( int [ ] prices ) { if ( prices . length < 2 ) { return 0 ; } int [ ] left = new int [ prices . length ] ; int [ ] right = new int [ prices . length ] ; int min = prices [ 0 ] ; int max = prices [ prices . length - 1 ] ; left [ 0 ] = 0 ; right [ prices . length - 1 ] = 0 ; for ( int i = 1 ; i < prices . length ; i ++ ) { if ( prices [ i ] < min ) min = prices [ i ] ; left [ i ] = prices [ i ] - min > left [ i - 1 ] ? prices [ i ] - min : left [ i - 1 ] ; } for ( int i = prices . length - 2 ; i >= 0 ; i -- ) { if ( prices [ i ] > max ) max = prices [ i ] ; right [ i ] = max - prices [ i ] > right [ i + 1 ] ? max - prices [ i ] : right [ i + 1 ] ; } int total = 0 ; for ( int i = 0 ; i < prices . length ; i ++ ) { total = left [ i ] + right [ i ] > total ? left [ i ] + right [ i ] : total ; } return total ; }
te	6	@ Test public void testPackageNameDoesNotEndWithDot ( ) { final JavaType type = new JavaType ( "test." , "Test" ) ; assertEquals ( "test" , type . getPackageName ( ) ) ; }
te	7	@ Override public boolean equals ( Object o ) { sortString s = ( sortString ) o ; return this . string == s . string ; }
te	3	public Building get_building ( ) { return _building ; }
te	4	public void multi ( ) { System . out . println ( "multi from D" ) ; }
te	7	public static byte [ ] [ ] [ ] parseRanges ( String ... ranges ) { byte [ ] [ ] [ ] result = new byte [ ranges . length ] [ ] [ ] ; for ( int i = 0 ; i < ranges . length ; i ++ ) { result [ i ] = parseRange ( ranges [ i ] ) ; } return result ; }
te	2	public int getUnitScore ( ) { return unitScore ; }
te	8	public void setUp ( ) { enPromocion = new EnPromocion ( ) ; mockSubasta = mock ( Subasta . class ) ; mockPasajero = mock ( Pasajero . class ) ; }
te	5	public int write ( ByteBuffer src ) throws IOException { return channel . write ( src ) ; }
te	3	public String getApproved ( ) { return approved ; }
te	3	public static BufferedImage getBrokeRouterImgSmall ( ) { return brokeRouterImgSmall ; }
te	8	@ XmlElementDecl ( namespace = "" , name = "special-message3" ) public JAXBElement < String > createSpecialMessage3 ( String value ) { return new JAXBElement < String > ( _SpecialMessage3_QNAME , String . class , null , value ) ; }
te	4	public void hideProperties ( ) { if ( propertiesDialog != null ) { propertiesDialog . hide ( ) ; propertiesDialog . dispose ( ) ; propertiesDialog = null ; } }
te	6	public List < Cliente > listaClientes ( ) { return CadastroDeClienteControler . getInstancia ( ) . listarClientes ( ) ; }
te	6	@ Test public void testChangingBaseStatsAndEVsChangesOutput ( ) { assertEquals ( 47 , spDefCalculator . calculate ( 5 , 4 , nature ) ) ; assertEquals ( 609 , spDefCalculator . calculate ( 255 , 252 , nature ) ) ; }
te	4	private void generateFooter ( PrintStream out ) { out . println ( "}" ) ; }
te	2	public long optLong ( int index ) { return this . optLong ( index , 0 ) ; }
te	5	public Dimension maximumLayoutSize ( Container parent ) { return new Dimension ( short . MAX_VALUE , short . MAX_VALUE ) ; }
te	2	public int getErrno ( ) { return errnum ; }
te	10	public boolean showConfirmationDialog ( ) { String name = answerSideManager . getAnswersName ( ) ; if ( name != null && ! name . equals ( "" ) ) messageLabel . setText ( name + "  \u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u043E?" ) ; else messageLabel . setText ( "\u041F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u043E?" ) ; showDialog ( ) ; return isCorrect ; }
te	5	@ Override public void accept ( CommandVisitor visitor ) { visitor . visit ( this ) ; }
te	9	public void setLooping ( String name , boolean looping ) { for ( Animation a : animations ) { if ( a . getName ( ) . equals ( name ) ) { a . setLooping ( looping ) ; break ; } } }
te	4	@ Override public String value ( ) { return val ; }
te	10	@ Override public void fillMembers ( ResultSet rs ) throws SQLException { super . fillMembers ( rs ) ; name = rs . getString ( "Name" ) ; desrc = rs . getString ( "Descr" ) ; lang1 = rs . getString ( "Lang1" ) ; lang2 = rs . getString ( "Lang2" ) ; }
te	5	public static void main ( String [ ] arguments ) { Playback pb = new Playback ( ) ; }
te	2	public boolean isEmpty ( ) { return top == - 1 ; }
te	7	public Tableau ( ) { for ( int i = 0 ; i < dungeonDeck ; i ++ ) { dungeon [ i ] = new CardPile ( "Dungeon rank " + i ) ; allPiles . add ( dungeon [ i ] ) ; } dungeon [ dungeonDeck ] = new CardPile ( "Dungeon deck" ) ; }
te	9	public AWTMessageDialog ( Frame frame , String title , Image icon , String msg ) { super ( frame , title , icon , false ) ; setMessage ( msg ) ; }
te	7	public int [ ] getActions ( Game game , long timeDue ) { return ghostActions . get ( game . getTotalTime ( ) ) ; }
te	3	public String getLatestTransmissionAttempt ( ) { if ( transmissionAttempts == 0 ) { return "no attempt yet" ; } switch ( transmissionAttempts ) { case 1 : return "first attempt" ; case 2 : return "second attempt" ; case 3 : return "third attempt" ; case 4 : return "fourth attempt" ; default : return "attempt #" + transmissionAttempts ; } }
te	3	public boolean [ ] [ ] getValidBoard ( int [ ] [ ] board ) { return getValidBoard ( board , this . currentWallOffset ) ; }
te	1	public LessFolder ( ) { }
te	1	private AntiMain ( ) { }
te	8	public boolean isUniqueChars ( String a ) { if ( a == null ) return true ; if ( a . length ( ) < 2 ) return true ; boolean [ ] char_set = new boolean [ 256 ] ; for ( int i = 0 ; i < a . length ( ) ; i ++ ) { int val = a . charAt ( i ) ; if ( char_set [ val ] ) return false ; char_set [ val ] = true ; } return true ; }
te	2	public int get_y ( ) { return _y ; }
te	2	public Compass ( ) { this ( SIZE_DEFAULT , 30 , 42 ) ; }
te	6	public void dim ( int level ) { this . level = level ; if ( level == 0 ) { off ( ) ; } else { System . out . println ( "Light is dimmed to " + level + "%" ) ; } }
te	1	public boolean failFast ( ) { return failFast ; }
te	7	@ Before public void setUp ( ) { playerOne = new Player ( ) ; playerTwo = new Player ( ) ; tennisGame = new TennisGame ( playerOne , playerTwo ) ; }
te	2	public void setPartners ( int [ ] partners ) { this . partners = partners ; }
te	10	@ Override public void valueChanged ( final ListSelectionEvent event ) { if ( isVisible ( ) ) { if ( subjectList . getSelectedIndices ( ) . length > 0 ) { okButton . setEnabled ( true ) ; } else { okButton . setEnabled ( false ) ; } } }
te	1	public ComentariTest ( ) { }
te	3	public String getSupplierName ( ) { return SupplierName ; }
te	8	public void wrongAnswer ( Kanji kanji ) { double value = ( kanjis . get ( kanji ) != null ) ? kanjis . get ( kanji ) - wrongAnswerWeight : - wrongAnswerWeight ; kanjis . put ( kanji , value ) ; }
te	6	public RecordTy ( int p , FieldList f ) { pos = p ; fields = f ; }
te	9	protected void fillRoom ( Rectangle r ) { fillRectangle ( MapRand . innerRectangle ( r ) , MapTile . ROOM_FLOOR ) ; fillWallRoom ( r ) ; }
te	5	public void increaseProgress ( String newText ) { jlText . setText ( newText ) ; increaseProgress ( ) ; }
te	2	@ Override public void gameInterrupted ( ) { }
te	1	public ScoreViewQuestionListModel ( ) { }
te	6	@ Override public void setDebug ( boolean debug ) { plugin . getConfig ( ) . set ( "debug" , debug ) ; }
te	8	public static String [ ] stringPrune ( final String [ ] input ) { String result = "" ; for ( String current : input ) { if ( current . isEmpty ( ) ) { } else result = result . concat ( current + ";" ) ; } return result . split ( ";" ) ; }
te	8	public void setAllLinkColorNoRepaint ( Color colour ) { for ( drawLink L : links . values ( ) ) { L . color = colour ; } }
te	9	public void maxSizeChanged ( int maxX , int maxY ) { this . maxImageSizeX = maxX ; this . maxImageSizeY = maxY ; setPreferredSize ( new Dimension ( ( int ) ( maxX * scale ) , ( int ) ( maxY * scale ) ) ) ; revalidate ( ) ; }
te	3	public TipoSituacaoPartida getSituacaoPartida ( ) { return this . situacaoPartida ; }
te	5	public static int getMonth ( GregCalPlus g ) { return g . get ( GregCalPlus . MONTH ) ; }
te	4	public String getElapsedTime ( ) { return timer . getElapsedTimeString ( ) ; }
te	3	public void setSession ( Session session ) { this . session = session ; }
te	3	public ElementShape ( BasicShape shape ) { this . shape = shape ; }
te	2	public int getTimeStep ( ) { return timeStep ; }
te	9	private void arriba ( String seleccion , List < String > listaAgregar , Vector listaQuitar ) { listaAgregar . add ( seleccion ) ; listaQuitar . remove ( seleccion ) ; }
te	4	public AITFListCellRenderer ( ClassType ct ) { super ( ) ; classType = ct ; }
te	9	@ Override public String toString ( ) { return "Transition [src=" + src + "  dst=" + dst + "  alphabet=" + alphabet + "  clocksToReset=" + Arrays . toString ( clocksToReset ) + "  guard=" + guard + "]\n" ; }
te	8	@ Override public void actionPerformed ( ActionEvent e ) { update ( e ) ; if ( updated ( ) ) { lastUpdate = new Date ( ) ; } }
te	5	public static Trace fromValue ( String v ) { return valueOf ( v ) ; }
te	9	public boolean shouldScan ( IJavaElement elem ) throws JavaModelException { long startTime = captureTime ( ) ; boolean shouldScan = childStrategy . shouldScan ( elem ) ; long endTime = captureTime ( ) ; notify ( "shouldScan" , startTime , endTime ) ; return shouldScan ; }
te	9	public ConstrainChain < B > connect ( Connector con ) { if ( ! hasConstrains ) throw new IllegalArgumentException ( "There are no constrains to connect to" ) ; cons . add ( con ) ; return this ; }
te	4	public void setRules ( List < RulePlay > rules ) { this . rules = rules ; }
te	5	@ Override public T [ ] toArray ( ) { return subArray ( 1 , size + 1 ) ; }
te	8	@ Override public int extractMin ( ) { int min = 0 ; try { min = dlist . deleteAtFront ( ) ; } catch ( NotFoundException e ) { e . printStackTrace ( ) ; } return min ; }
te	3	public String getAccountId ( ) { return accountId ; }
te	6	public static double max ( double [ ] [ ] array ) { double result = double . MIN_VALUE ; for ( double [ ] subArray : array ) result = Math . max ( result , max ( subArray ) ) ; return result ; }
te	4	public void rotateClockwise ( ) { this . m_system . rotate ( 0 , 0 , CAMERA_ROTATE_INC ) ; }
te	4	public TickOptions setFontWeight ( String fontWeight ) { this . fontWeight = fontWeight ; return this ; }
te	6	@ Override public void StopServer ( ) { this . Client . close ( ) ; this . ConsoleFrame . CloseFrame ( ) ; }
te	1	public QuizUtils ( ) { }
te	2	@ After public void tearDown ( ) { }
te	1	public int port ( ) { return port ; }
te	8	@ Test public void STEEL_attacking_GROUND ( ) { assertEquals ( 1.0 , tc . getWeaknessResistance ( Type . STEEL , Type . GROUND ) , 0.0 ) ; }
te	8	private String toByteString ( byte b ) { String s = "" + Integer . toBinaryString ( b & FF ) ; while ( s . length ( ) < 8 ) s = "0" + s ; return s ; }
te	4	@ Override public void request ( ) { adaptee . specificRequest ( ) ; }
te	4	@ Override public List < Expression > getNested ( ) { return null ; }
te	3	public void setLogoutput ( String logoutput ) { this . logoutput = logoutput ; }
te	8	public ColorPreset getColorPresetByName ( String name ) { for ( ColorPreset p : getColorPresets ( ) ) { if ( name . equals ( p . name ) ) { return p ; } } return getColorPresets ( ) . firstElement ( ) ; }
te	7	public FressianReader ( InputStream is , ILookup < Object , ReadHandler > handlerLookup ) { this ( is , handlerLookup , true ) ; }
te	1	private SeekableInputStream ( ) { }
te	6	@ Override public List < Product > getAvailableProducts ( ) throws Exception { return pc . getAvailableProducts ( ) ; }
te	7	public void append ( String line ) { if ( manifest != null ) throw new IllegalStateException ( "Cannot append to already existing manifest" ) ; lines . add ( line ) ; }
te	9	@ Test public void oPalikkaaEiKaanneta ( ) { KaantyvaPalikka oPalikka = new KaantyvaPalikka ( Tetromino . O ) ; assertEquals ( false , tormayslogiikka . kaannaPalikka ( oPalikka , 0 ) ) ; assertEquals ( false , tormayslogiikka . kaannaPalikka ( oPalikka , 1 ) ) ; }
te	5	public String getDefaultStr ( ) { return Integer . toString ( defValue ) ; }
te	9	@ Test public void ShouldFindSumOfDiagonalPointsAtLevel3 ( ) { int level = 3 ; int expected = 24 ; SpiralDiagonalHelper helper = new SpiralDiagonalHelper ( ) ; int result = helper . GetSumDiagonalsPointsAtLevel ( level ) ; assert . assertEquals ( expected , result ) ; }
te	2	public void setAcceso ( boolean acceso ) { this . acceso = acceso ; }
te	7	private void passwordFieldKeyTyped ( java . awt . event . KeyEvent evt ) { checkPasswords ( ) ; }
te	4	public MainWindow ( DataModel model ) { this . model = model ; init ( ) ; }
te	2	public String getName ( ) { return "JYearChooser" ; }
te	8	public void pushAfter ( Node node , int value ) { Node newNode = new Node ( value ) ; Node theNext = node . next ; node . next = newNode ; newNode . next = theNext ; this . size ++ ; }
te	6	public JSONArray put ( int index , int value ) throws JSONException { this . put ( index , new Integer ( value ) ) ; return this ; }
te	3	public ButtonStyle getButtonStyle ( ) { return bs ; }
te	1	public void aboutToDisplayPanel ( ) { }
te	3	static BlobScroller getInterceptScroller ( ) { return interceptScroller ; }
te	10	@ Override void pushForIterator ( Stack < Object > stack ) { for ( int i = 0 ; i < keys . size ( ) ; i ++ ) { stack . push ( keys . get ( keys . size ( ) - 1 - i ) ) ; } }
te	2	@ Override public boolean isCancelled ( ) { return false ; }
te	5	public double op ( vOpF < Vec3f > operator ) { return operator . performOp ( this ) ; }
te	7	@ Override public void createAppointment ( Room room , Course course ) { scheduleElement . createAppointment ( room , course ) ; }
te	4	public void setRelatedSearches ( RelatedSearches value ) { this . relatedSearches = value ; }
te	7	public LlvmValue visit ( IntegerType n ) { return new LlvmNamedValue ( "" , LlvmPrimitiveType . I32 ) ; }
te	1	public RGB ( ) { }
te	2	public int getCurrentHealth ( ) { return fCurrentHealth ; }
te	3	public void setMessage ( BaseMessage message ) { this . message = message ; }
te	9	@ Override public double getSum ( ) { double price = 0 ; for ( fpt . com . Product product : this ) { price += ( product . getPrice ( ) * product . getQuantity ( ) ) ; } return price ; }
te	9	public Card [ ] filter ( Card [ ] input ) { ArrayList < Card > output = new ArrayList < Card > ( ) ; for ( Card c : input ) if ( isValid ( c ) ) output . add ( c ) ; return output . toArray ( new Card [ 0 ] ) ; }
te	7	public static String getPropertyPermissionAsString ( PropertyPermissions permission ) { if ( permission == PropertyPermissions . RO ) { return "ro" ; } else if ( permission == PropertyPermissions . RW ) { return "rw" ; } else if ( permission == PropertyPermissions . WO ) { return "wo" ; } return "" ; }
te	5	@ Override public void begin ( Node root ) { throw new UnsupportedOperationException ( "Not supported yet." ) ; }
te	1	public boolean isPrimitive ( ) { return true ; }
te	2	public float getHandicap ( ) { return getNumber ( ) ; }
te	5	public List < long > getItems ( ) { return Collections . unmodifiableList ( items ) ; }
te	2	public float [ ] getInverseInertiaTensor ( ) { return inverseInertiaTensor ; }
te	4	@ Override public void collidedWith ( Entity other ) { }
te	8	public static ByteBuffer asByteBuffer ( byte ... values ) { ByteBuffer buffer = BufferUtils . createByteBuffer ( values . length ) ; buffer . put ( values ) ; return buffer ; }
te	7	private Object idGenRel ( String descriptive , String ... attributes ) { if ( _nameRelations ) { return idGen ( descriptive , attributes ) ; } else { return null ; } }
te	6	public boolean bury ( int job_id , int priority ) throws BeanstalkcException { return doCommand ( new BuryCommand ( job_id , priority ) ) ; }
te	4	public Set < CourseUsers > getCourseUsers ( ) { return this . courseUsers ; }
te	1	public SourceStream ( ) { }
te	2	public void shouldShowGrid ( boolean shouldShowGrid ) { this . shouldShowGrid = shouldShowGrid ; repaint ( ) ; }
te	9	@ Override public Program getBestProgram ( ) { OutputWriter . println ( "Best program fitness: " + fitness . get ( 0 ) ) ; if ( ! programs . isEmpty ( ) ) { return programs . get ( 0 ) ; } else { return null ; } }
te	9	public String getManufacturer ( int language ) { try { int id = getManufacturerStringId ( ) ; if ( id > 0 ) return dev . getString ( id , language ) ; } catch ( IOException e ) { } return null ; }
te	4	public int size ( ) { return 1 + ( left == null ? 0 : left . size ( ) ) + ( center == null ? 0 : center . size ( ) ) + ( right == null ? 0 : right . size ( ) ) ; }
te	9	static PaddedByteArray newArray ( byte [ ] array , int off , int len , int paddedLen ) { checkArrayBounds ( off , len , array . length ) ; if ( paddedLen < 0 ) throw new IllegalArgumentException ( "negative padded length" ) ; return new PaddedByteArray ( array , off , len , paddedLen ) ; }
te	9	public static String getTagValue ( String tag ) { String result = null ; int i ; for ( i = 0 ; i < tag . length ( ) ; i ++ ) { if ( tag . charAt ( i ) == : ) { break ; } } result = tag . substring ( i + 1 , tag . length ( ) ) ; return result ; }
te	1	public IncompatibleDataDecoderException ( ) { super ( ) ; }
te	2	public int getVersion ( ) { return version ; }
te	5	public boolean isOpen ( int row , int col ) { validate ( row ) ; validate ( col ) ; return isOpenV ( row , col ) ; }
te	9	@ Override public DataCounter < Integer > getDataCounter ( ) { return new MoveToFrontList < Integer > ( new Comparator < Integer > ( ) { public int compare ( Integer e1 , Integer e2 ) { return e1 - e2 ; } } ) ; }
te	2	@ Override protected void onQuit ( ) { }
te	4	private EnumInventories ( String name , class < ? > clazz ) { this . name = name ; this . clazz = clazz ; }
te	6	public LogoError ( String message , Object ... args ) { super ( String . format ( message , args ) ) ; }
te	6	public E fromAlternateValue ( Object val ) { return this . alternateValueMap . get ( val ) ; }
te	7	public int getCount ( ) { return Dispatch . get ( this , "Count" ) . changeType ( Variant . VariantInt ) . getInt ( ) ; }
te	8	private static int sumaEnteros ( Nodo nodo , int valor , Integer suma ) { if ( nodo != null ) { if ( nodo . elem > valor ) suma = suma + nodo . elem ; return sumaEnteros ( nodo . sig , valor , suma ) ; } return suma ; }
te	3	public BedState getState ( ) { return state ; }
te	8	protected static boolean isRootNodeNilClasses ( Document doc ) { String root = doc . getDocumentElement ( ) . getNodeName ( ) ; return "nil-classes" . equals ( root ) || "nilclasses" . equals ( root ) ; }
te	5	@ Override public void accept ( final TreeVisitor visitor ) { visitor . visit ( this ) ; }
te	1	public TicketPrice ( ) { }
te	8	public static String Purse_Peek ( String SERVER_ID , String ASSET_TYPE_ID , String OWNER_ID , String THE_PURSE ) { return otapiJNI . OTAPI_Basic_Purse_Peek ( SERVER_ID , ASSET_TYPE_ID , OWNER_ID , THE_PURSE ) ; }
te	1	public Entity ( ) { }
te	8	@ Test public final void testGetName ( ) { String name = "server" ; orb . setName ( name ) ; assertEquals ( name , orb . getName ( ) ) ; }
te	7	public SQLTrack ( String name , SQLPermissions provider ) { this . name = name ; this . provider = provider ; provider . logger . info ( "Trackname: " + name ) ; }
te	9	public static String showCommandHistory ( boolean direction ) { String cmd = "" ; if ( ! lastCommands . isEmpty ( ) ) { cmd = lastCommands . pop ( ) . toString ( ) ; } return cmd . trim ( ) ; }
te	10	public static BufferedImage [ ] getImageSubImages ( BufferedImage img , int subImgHeight ) { int verticalSubImages = img . getHeight ( ) / subImgHeight ; BufferedImage [ ] subImages = new BufferedImage [ verticalSubImages ] ; for ( int i = 0 ; i < verticalSubImages ; i ++ ) { subImages [ i ] = img . getSubimage ( 0 , i * subImgHeight , img . getWidth ( ) , subImgHeight ) ; } return subImages ; }
te	6	public boolean equals ( Object _other ) { if ( _other == null ) { return false ; } if ( _other == this ) { return true ; } if ( ! ( _other instanceof InviteRes ) ) { return false ; } final InviteRes _cast = ( InviteRes ) _other ; if ( inviteRes == null ? _cast . inviteRes != inviteRes : ! inviteRes . equals ( _cast . inviteRes ) ) { return false ; } return true ; }
te	8	@ Override public void run ( ) { System . out . println ( "Test" ) ; while ( runable ) { byte [ ] header = null ; System . out . println ( "recv before" ) ; recvPacket ( header ) ; System . out . println ( "recv after" ) ; } System . out . println ( "while end" ) ; }
te	9	public AdaptableCollection ( Collection < FROM > source , IAdapter < FROM , TO > adapater ) { _source = source ; _adapater = adapater ; }
te	6	private void addToRuleArray ( final List < Entry > rule ) { ruleArray . add ( rule ) ; }
te	1	public ModelTransformerTest ( ) { }
te	7	@ Override public void setMin ( ) { val = BigInteger . TEN . multiply ( BigInteger . TEN ) . negate ( ) ; }
te	6	@ Override public Iterator < Entry < V >> iterator ( ) { return entries ( ) ; }
te	3	public String getGender ( ) { return gender ; }
te	9	public Data get ( int col , int row ) { if ( ! isColumnIndex ( col ) ) throw new ArrayIndexOutOfBoundsException ( "col=" + col + " is not a valid column index in " + table_name ) ; if ( ! isRowIndex ( row ) ) throw new ArrayIndexOutOfBoundsException ( "row=" + row + " is not a valid row index in " + table_name ) ; return columns . get ( col ) . get ( row ) ; }
te	10	public void fatalError ( SAXParseException ex ) throws SAXException { System . err . println ( "[Fatal Error] " + getLocationString ( ex ) + ": " + ex . getMessage ( ) ) ; error_in_xml = true ; throw ex ; }
te	5	private JsonSchema getReferencedSchema ( ) { return registry . getSchema ( schemaLocation ) ; }
te	9	private void updateGame ( ) { warnKing = checkWarnKing ( currentSide ) ; state = checkFinishMatch ( ) ; currentSide = ( currentSide == Side . ENERMY ) ? Side . FRIEND : Side . ENERMY ; }
te	9	@ Override public boolean equivalentWasDerivedFroms ( WasDerivedFrom description1 , WasDerivedFrom description2 ) { return neitherNull ( description1 , description2 ) && equivalentEntities ( description1 . getDerived ( ) , description2 . getDerived ( ) ) && equivalentEntities ( description1 . getDerivedFrom ( ) , description2 . getDerivedFrom ( ) ) ; }
te	9	void showEditActivity ( Activity activity ) { if ( activity != null ) { activityDialog . editActivity ( activity ) ; activityDialog . setVisible ( true ) ; } else { AlertMessages . noActivitySelectedInTableForEditing ( activityListDialog ) ; } }
te	2	public int getBids ( ) { return bids ; }
te	6	public Enlace ( int nroenlace , Anuncio anuncio , String link ) { this . nroenlace = nroenlace ; this . anuncio = anuncio ; this . link = link ; }
te	8	@ Override public void after ( ) { if ( output != null ) { try { pipe . close ( output ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } super . after ( ) ; }
te	7	public Launcher ( double x , double y ) { super ( 0 , x , y , new Velocity ( 0 , 0 ) ) ; canMove = false ; pg = new PlayerGravitable ( x , y ) ; }
te	1	public MultiConstructorBean ( ) { }
te	8	@ Override public String toString ( ) { String r = "" ; r += "Difficulty = " + String . valueOf ( _difficulty ) + "\n" ; r += "Correctly Answered = " + String . valueOf ( _correctlyAnswered ) + "\n" ; r += "Total Times Answered = " + String . valueOf ( _totalTimesAnswered ) ; return r ; }
te	9	private void sheduleStrategyRestore ( Scoring scoring ) { Runnable task = revertStrategyTask ( scoring ) ; platform . scheduleLater ( task , effectPeriodMs ) ; }
te	9	public final String nextCorrelationID ( ActorID actorID ) { return actorID . toString ( ) + _ + instanceIndex + _ + MESSAGE_COUNTER . incrementAndGet ( ) ; }
te	1	public ProjectileRenderer ( ) { }
te	6	public boolean isLastReading ( Date d ) { return readings . lastKey ( ) . equals ( d ) ; }
te	7	public void testRegisterObserver ( ) { weatherData . registerObserver ( new MockObserver ( ) ) ; assertEquals ( "Only a single observer must be registered" , 1 , weatherData . observers . size ( ) ) ; }
te	1	protected void interrupted ( ) { }
te	8	@ Before public void setUp ( ) throws Exception { listPlant . clear ( ) ; listPlant . add ( 0 , new Tree ( "\u0414\u0443\u0431" , 200 , true , 1000 ) ) ; listPlant . add ( 1 , new Tree ( "\u0415\u043B\u044C" , 150 , false , 1500 ) ) ; listPlant . add ( 2 , new Flower ( "\u0410\u0441\u0442\u0440\u043E\u0432\u044B\u0435" , "\u0420\u043E\u043C\u0430\u0448\u043A\u0430" , 15 , 1 ) ) ; listPlant . add ( 3 , new Flower ( "\u0410\u0441\u0442\u0440\u043E\u0432\u044B\u0435" , "\u041B\u0438\u043B\u0438\u044F" , 10 , 1 ) ) ; }
te	4	public Line ( SDOShape shape ) { this . shape = shape ; init ( ) ; }
te	6	protected DBObject ( Connection con , String id ) { this . con = con ; this . id = id ; loadFromDB ( ) ; }
te	9	@ Override public void close ( ) throws IOException { if ( tokenRequest != null && tokenRequest . isAlive ( ) ) { tokenRequest . interrupt ( ) ; } synchronized ( waitObject ) { ready = true ; waitObject . notifyAll ( ) ; } }
te	2	public int getHP ( ) { return hp ; }
te	3	public String getOTHERTYPE ( ) { return othertype ; }
te	9	public RamdomDataProvider ( ) { final long seed = System . currentTimeMillis ( ) ; out . println ( "Random seed used: " + long . toHexString ( seed ) ) ; random = new Random ( seed ) ; }
te	1	private ParsingTreeValidator ( ) { }
te	9	public Integer getRandomPitch ( ) { Random generator = new Random ( ) ; int index = generator . nextInt ( this . pitcheslist . size ( ) ) ; if ( index > - 1 ) { return ( this . pitcheslist . get ( index ) ) ; } else { return 0 ; } }
te	6	protected void initialize ( ) { if ( feeder . isIn ) { feederSolenoid . setOut ( ) ; feeder . isIn = true ; setTimeout ( 0.5 ) ; } else { setTimeout ( 0.0 ) ; } }
te	2	public int size ( ) { return nodeCount ; }
te	2	public int getBaseDamage ( ) { return baseDamage ; }
te	9	private String convert ( String s ) { String res = "" ; while ( s . length ( ) > 0 ) { int pos = s . indexOf ( ¦ ) ; if ( pos < 0 ) { res += s ; break ; } res += s . substring ( 0 , pos ) + "|" ; s = s . substring ( pos + 1 ) ; } return res ; }
te	6	public JSONWriter endObject ( ) throws JSONException { return this . end ( k , } ) ; }
te	4	public FactoryDAO ( ) { this . SESSION = HibernateUtil . getSession ( ) ; }
te	10	public int readNumber ( final String key , int alternative ) { final String value = properties . getProperty ( key , alternative + "" ) ; final int valueNumber = Integer . parseInt ( value ) ; return valueNumber ; }
te	8	private List < Integer > getUsers ( ) { List < Integer > users = new ArrayList < Integer > ( ) ; users . add ( USER_1 ) ; users . add ( USER_2 ) ; return users ; }
te	8	public void recv_delete_queue ( ) throws org . apache . thrift7 . TException { delete_queue_result result = new delete_queue_result ( ) ; receiveBase ( result , "delete_queue" ) ; return ; }
te	5	public Node insertRight ( final Node node ) { node . right = right ; node . left = this ; right . left = node ; right = node ; return node ; }
te	4	public void setPrev ( Node < T > prev ) { this . prev = prev ; }
te	6	public static void main ( String [ ] args ) { InnerButton gui = new InnerButton ( ) ; gui . go ( ) ; }
te	8	@ Override public void actionPerformed ( ActionEvent e ) { if ( ecranPerso . ajouterJoueurEquipe ( perso ) ) griser ( ) ; }
te	3	public double getAngle ( ) { return getAngle_native ( pointer ) ; }
te	2	public int getIdClase ( ) { return idClase ; }
te	2	public int getExitTileNumberX ( ) { return exitTileNumberX ; }
te	3	public void mouseClicked ( MouseEvent me ) { }
te	10	@ Override public void consume ( EvlToken token ) { if ( token . getName ( ) . equals ( "wire" ) ) { fsm . setState ( fsm . wireState ) ; } else { throw new RuntimeException ( ) ; } }
te	3	public Screen getScreen ( ) { return screen ; }
te	8	public static void main ( String args [ ] ) { int [ ] arr = { 1 , 2 , - 4 , 1 , 3 , - 2 , 3 , - 1 } ; System . out . println ( "Sum is: " + getSum ( arr ) ) ; }
te	3	public static void obliczPodatek ( double podstawa ) { zaliczkaNaPod = ( podstawa * 18 ) / 100 ; }
te	9	@ Override public String toString ( ) { String str = "" ; str . concat ( super . toString ( ) ) ; System . out . println ( JmpLabel ) ; return str ; }
te	10	public Object clone ( ) throws CloneNotSupportedException { Region result = ( Region ) super . clone ( ) ; if ( result . latLonAltBox != null ) { result . latLonAltBox = ( LatLonAltBox ) this . latLonAltBox . clone ( ) ; result . latLonAltBox . setParent ( result ) ; } if ( result . lod != null ) { result . lod = ( Lod ) this . lod . clone ( ) ; result . lod . setParent ( result ) ; } return result ; }
te	8	public void produce ( int i ) { System . out . println ( "Producing " + i ) ; items . push ( new Integer ( i ) ) ; }
te	10	protected void handleOutboxItem ( OutboxItem outboxItem ) { String messageString = new Gson ( ) . toJson ( outboxItem . getMessage ( ) ) ; send ( outboxItem . getReceiver ( ) , messageString ) ; }
te	5	void setEmpty ( long value ) { this . empty = true ; this . fromIndex = value ; this . toIndex = value ; }
te	5	public void setDeliveryCollection ( Collection < Delivery > deliveryCollection ) { this . deliveries = deliveryCollection ; }
te	7	public Collection < Object > values ( ) { Collection < Object > vals = underlyingMap . values ( ) ; return Collections . unmodifiableCollection ( vals ) ; }
te	8	@ Test public void STEEL_attacking_POISON ( ) { assertEquals ( 1.0 , tc . getWeaknessResistance ( Type . STEEL , Type . POISON ) , 0.0 ) ; }
te	1	public void prediccion ( ) { }
te	1	private Singleton5 ( ) { }
te	7	public int write ( DataUnit object ) throws IOException { return mp . write ( object , p , byteChannel ) ; }
te	4	public TerminalNode , ( int i ) { return getToken ( DecafParser . , , i ) ; }
te	5	@ Override public String getColumnName ( final int aColumn ) { return cNames [ aColumn ] ; }
te	8	public void followBody ( final DynamicBody body , final float offsetX , final float offsetY , final float offsetZ ) { followBody = body ; followOffset . set ( offsetX , offsetY , offsetZ ) ; }
te	5	public String info ( ) throws IOException { return exec ( 6 , id ) ; }
te	5	private void serializeText ( Node n ) throws IOException { serializeCharacterChunk ( n , null ) ; }
te	9	@ Override public CodeFragment visitValInt ( MagicParser . ValIntContext ctx ) { return generateConstant ( BasicType . int , ctx . int ( ) . getText ( ) ) ; }
te	2	public int recoilDamage ( int damageDealt ) { return 0 ; }
te	4	public static int convertIndexToBaseBlockIndex ( byte index ) { switch ( index ) { case GOLD : case IRON : return 1 ; default : return index ; } }
te	2	public boolean is_set_items ( ) { return this . items != null ; }
te	6	protected VariableDeclaration ( Modifiers mods , List < Annotation > annot ) { super ( mods , annot ) ; }
te	5	@ Test ( timeout = TIMEOUT ) public void multipleDuplicatesSearchTest ( ) { checkFirstElementCorrectGetCount ( "Check internal correctness with multiple duplicates" , new int [ ] { 1 , 2 , 3 , 3 , 3 , 1 } , 2 ) ; }
te	10	protected void setPoints ( double [ ] coords , int nump ) { for ( int i = 0 ; i < nump ; i ++ ) { Vertex vtx = pointBuffer [ i ] ; vtx . pnt . set ( coords [ i * 3 + 0 ] , coords [ i * 3 + 1 ] , coords [ i * 3 + 2 ] ) ; vtx . index = i ; } }
te	5	public static String [ ] getNextSection ( Channel ch ) throws IOException { return getNextSection ( null , ch ) ; }
te	4	@ Override public Dict createDict ( ) { return new LinkedHashMapDict ( ) ; }
te	6	public void moveDisk ( int d , Tower dst , Tower mid ) { if ( d == 0 ) { return ; } moveDisk ( d - 1 , mid , dst ) ; moveTopDisk ( dst ) ; mid . moveDisk ( d - 1 , dst , this ) ; }
te	2	public int getWidth ( ) { return width ; }
te	9	public static int totalFileNumberCounter ( File node ) { int file_number = 0 ; if ( node . isDirectory ( ) ) { String [ ] subNote = node . list ( ) ; for ( String filename : subNote ) { file_number += totalFileNumberCounter ( new File ( node , filename ) ) ; } } else { file_number ++ ; } return file_number ; }
te	4	public ArrayList < ArrayList < Integer >> permute ( int [ ] num ) { return null ; }
te	9	@ Override public boolean supprimerFourmi ( int nombre ) { if ( nombre > 0 ) { if ( this . getListeFourmis ( ) . isEmpty ( ) ) { return false ; } else { int taille = 0 ; for ( int i = 0 ; i < nombre ; i ++ ) { taille = this . getListeFourmis ( ) . size ( ) - 1 ; this . getListeFourmis ( ) . remove ( taille ) ; } return true ; } } return false ; }
te	5	public static _Fields findByThriftId ( int fieldId ) { switch ( fieldId ) { case 1 : return DATA ; case 2 : return ID ; default : return null ; } }
te	4	public void setGroupObjectClass ( String value ) { this . groupObjectClass = value ; }
te	7	public static boolean method463 ( int i ) { if ( aClass21Array1661 == null ) return false ; Class21 class21 = aClass21Array1661 [ i ] ; if ( class21 == null ) { aOnDemandFetcherParent_1662 . method548 ( i ) ; return false ; } else { return true ; } }
te	3	public void setSmall_pic ( String small_pic ) { this . small_pic = small_pic ; }
te	8	public List < ProductModel > getProductsByName ( String name ) throws WebshopAppException { return productRepository . getProductByName ( name ) ; }
te	4	public void setId ( String value ) { this . id = value ; }
te	6	public static String getSwitchStatusAsString ( SwitchStatus switchStatus ) { if ( switchStatus == SwitchStatus . ON ) { return "On" ; } else if ( switchStatus == SwitchStatus . OFF ) { return "Off" ; } return "" ; }
te	5	public void setVisibility ( boolean value ) { this . visibility = value ; this . isVisibilityDirty = true ; setDirty ( ) ; }
te	7	private void init ( ) { this . classCount = new HashMap < Object , double > ( ) ; this . ke = new HashMap < Object , HashMap < Integer , KernelEstimator >> ( ) ; }
te	8	public void endPlayerTurn ( int index , int points , int numPalaceCards ) { setCurrentPlayerBid ( index , points ) ; players . get ( index ) . endTurn ( false , numPalaceCards ) ; }
te	2	public void setTolerence ( double tolerence ) { this . tolerence = tolerence ; }
te	6	public void setRotation ( float x , float y , float z ) { this . rotation = new Vector3f ( x , y , z ) ; }
te	10	@ Test public void buildConfigurationProductName ( ) { BuildConfiguration conf = configList . getBuildConfigurations ( ) . getByName ( "Release" ) ; assertNull ( "PRODUCT_NAME is set on Targets" , conf . getBuildSettings ( ) . getProductName ( ) ) ; }
te	7	private void initComponents ( ) { setDefaultCloseOperation ( javax . swing . WindowConstants . EXIT_ON_CLOSE ) ; pack ( ) ; }
te	5	public void setSendListener ( ActionListener a ) { this . b5 . addActionListener ( a ) ; }
te	5	@ Bean JmsTemplate jmsTemplate ( ConnectionFactory connectionFactory ) { return new JmsTemplate ( connectionFactory ) ; }
te	2	public void toggleSearch ( ) { if ( search == true ) { search = false ; } else { search = true ; } }
te	4	public void setCopyright ( String copyright ) { if ( id3v2Tag != null ) { id3v2Tag . setCopyright ( copyright ) ; } }
te	5	public List < SectionEnrollmentVO > getEnrollments ( ) { if ( enrollments == null ) { enrollments = new ArrayList < SectionEnrollmentVO > ( ) ; } return this . enrollments ; }
te	7	public UserChannelMessageEvent ( Source source , Channel channel , String message ) { this . source = source ; this . channel = channel ; this . message = message ; }
te	6	private void buildHeap ( int [ ] data , int length ) { int pos = data . length / 2 - 1 ; for ( int index = pos ; index >= 0 ; index -- ) { shiftDown ( data , index , length ) ; } }
te	10	@ Override public Storeable createFor ( Table table , List < ? > values ) throws ColumnFormatException , IndexOutOfBoundsException { return new MyStoreable ( table , values ) ; }
te	5	public Collection < Boundary > getBoundaries ( ) { return boundaries . values ( ) ; }
te	10	public Shoal ( ) { super ( "L" ) ; _cost . put ( MovementType . INFANTRY , 1 ) ; _cost . put ( MovementType . MECH , 1 ) ; _cost . put ( MovementType . TIRES , 1 ) ; _cost . put ( MovementType . TREAD , 1 ) ; _cost . put ( MovementType . AIR , 1 ) ; _cost . put ( MovementType . TRANS , 1 ) ; }
te	2	public int getBufferLength ( ) { return bufferp [ 0 ] ; }
te	3	public Expresion getExp ( ) { return exp ; }
te	2	public boolean isNomesAdmin ( ) { return nomesAdmin ; }
te	3	public void setSessionFactory ( SessionFactory sessionFactory ) { this . sessionFactory = sessionFactory ; }
te	1	public void playlistReorder ( ) { playlistReorder ( "default" ) ; }
te	9	public void selectWall ( int node1 , int node2 ) { if ( ! this . doors . edgeExists ( node1 , node2 ) && ! this . exits . edgeExists ( node1 , node2 ) ) { if ( this . walls . edgeExists ( node1 , node2 ) ) { this . removeWall ( node1 , node2 ) ; } else if ( node1 != 0 && node2 != 0 ) { this . addWall ( node1 , node2 ) ; } } }
te	2	public int getGridX ( ) { return gridX ; }
te	10	public void replicateFile ( String fileName , Node ownerNode ) { Download newDownload = new Download ( downloadManager , fileName , ownerNode , 2 ) ; this . client . downloadRequest ( newDownload ) ; }
te	2	public int getIdx ( ) { return idx ; }
te	7	public PredicateIterable ( Iterable < T > iterable , Predicate < T > predicate ) { set ( iterable , predicate ) ; }
te	9	@ Test public void testIsAlcohol_2 ( ) throws Exception { Policy fixture = new Policy ( new Integer ( 1 ) , "" , "" , true , false , new Integer ( 1 ) , new Integer ( 1 ) ) ; boolean result = fixture . isAlcohol ( ) ; assertEquals ( false , result ) ; }
te	8	@ Test public void testCompareOperations ( ) { testOcl ( "self.age > self.children" , to , ( to . getAge ( ) > to . getChildren ( ) ) ) ; testOcl ( "self.age >= self.children" , to , ( to . getAge ( ) >= to . getChildren ( ) ) ) ; testOcl ( "self.age < self.children" , to , ( to . getAge ( ) < to . getChildren ( ) ) ) ; testOcl ( "self.age <= self.children" , to , ( to . getAge ( ) <= to . getChildren ( ) ) ) ; testOcl ( "self.income > self.outcome" , to , ( to . getIncome ( ) > to . getOutcome ( ) ) ) ; testOcl ( "self.income >= self.outcome" , to , ( to . getIncome ( ) >= to . getOutcome ( ) ) ) ; testOcl ( "self.income < self.outcome" , to , ( to . getIncome ( ) < to . getOutcome ( ) ) ) ; testOcl ( "self.income <= self.outcome" , to , ( to . getIncome ( ) <= to . getOutcome ( ) ) ) ; }
te	10	private void internalStart ( ) throws SAXException { trans . startDocument ( ) ; startElement ( "hackstat" ) ; startElement ( "created" ) ; text ( CREATE_DF . format ( new Date ( ) ) ) ; endElement ( "created" ) ; }
te	9	@ Override @ XmlElement ( name = "dict" , required = true ) @ XmlJavaTypeAdapter ( JAXBDictAdapter . class ) public Dict getDict ( ) { return dict ; }
te	3	public float getPercent ( ) { return mainManager . getProgress ( ) ; }
te	10	private void sendMessages ( BatchActor < String > actor , int howMany ) { for ( int i = 0 ; i < howMany ; i ++ ) { try { actor . send ( "hello" + i ) ; } catch ( MailboxException e ) { e . printStackTrace ( ) ; } } }
te	6	protected static void assertFileCreated ( File file ) { assertTrue ( "file created" , file . isFile ( ) && file . length ( ) > 0 ) ; }
te	3	public Id getName ( ) { return name ; }
te	10	private static void PopulateVocabulary ( String str , List < String > table ) { if ( str == null ) return ; StringTokenizer st = new StringTokenizer ( str , " " ) ; while ( st . hasMoreTokens ( ) ) { table . add ( st . nextToken ( ) ) ; } }
te	3	public void setRc1 ( ReportCampaign rc1 ) { this . rc1 = rc1 ; }
te	5	public InvalidSimpleDateExpressionException ( String message , Throwable t ) { super ( message , t ) ; }
te	6	protected final int getParentHeight ( ) { return parent == null ? activity . getCanvas ( ) . getHeight ( ) : parent . measuredHeight ; }
te	3	public void setWebsite ( String website ) { this . website = website ; }
te	10	private void doorButtonActionPerformed ( java . awt . event . ActionEvent evt ) { this . cursor = cursorTypes . DOOR ; this . setStatusMessage ( "Cursor selected: door" ) ; }
te	4	@ Override public int getRowCount ( ) { return datas . size ( ) ; }
te	1	public boolean asBoolean ( ) { return false ; }
te	4	@ Override public void insert ( T element ) { }
te	9	@ Override public String answer ( ) throws Exception { int counter = 0 ; for ( int i = 2 ; i < 1000000 ; i ++ ) { if ( is_circular_prime ( i ) ) { counter ++ ; } } return Integer . toString ( counter ) ; }
te	1	protected void initialize ( ) { }
te	2	public boolean isInquiryStarted ( ) { return inquiryStarted ; }
te	1	public void turn ( ) { }
te	6	public String getOperator ( ) { if ( operator == null ) { synchronized ( this ) { operator = properties . getProperty ( "operator" ) ; if ( operator == null ) throw new IllegalArgumentException ( "Please set a valid operator." ) ; } } return operator ; }
te	6	public ValidarException ( String msg ) { JOptionPane . showMessageDialog ( null , msg , "Erro" , JOptionPane . ERROR_MESSAGE ) ; }
te	5	public static String getKeyName ( int keyCode ) { return KeyEvent . getKeyText ( keyCode ) ; }
te	5	public UnexpectedResultatSizeException ( final String message , final Throwable cause ) { super ( message , cause ) ; }
te	8	@ Override public double output ( double x ) { double exp1 = Math . exp ( this . getSlope ( ) * x ) ; double exp2 = Math . exp ( - this . getSlope ( ) * x ) ; this . output = ( exp1 - exp2 ) / ( exp1 + exp2 ) ; return this . output ; }
te	6	public static void main ( String [ ] args ) { Skeleton skel = new Skeleton ( ) ; skel . setVisible ( true ) ; }
te	7	synchronized protected void close0 ( ) throws Exception { super . close0 ( ) ; open = false ; dispatcher . removeChannel ( this ) ; nioChannel . close ( ) ; return ; }
te	7	public static int getMaximumSubarraySum ( int [ ] array ) { int max = 0 ; for ( int i = 0 ; i < array . length ; i ++ ) { int sum = 0 ; for ( int j = i ; j < array . length ; j ++ ) { sum += array [ j ] ; if ( sum > max ) { max = sum ; } } } return max ; }
te	6	@ Threaded public void thread1 ( ) { while ( ! ai . compareAndSet ( 2 , 3 ) ) Thread . yield ( ) ; }
te	7	public Turno ( int id , int idEstudiante , int idTipoDeTurno , String fecha ) { this . id = id ; this . idEstudiante = idEstudiante ; this . idTipoDeTurno = idTipoDeTurno ; this . fechaInicial = fecha ; }
te	4	public String toString ( ) { if ( nome != null ) return nome . toString ( ) ; return id + "" ; }
te	4	public LDAPAdminServiceProviderFactory ( String resource ) throws ServiceFactoryInitException { super ( resource ) ; }
te	3	public CalcTextField getTextField ( ) { return textField ; }
te	9	public void setSequences ( boolean startgame_ingame , int startgame_ticks , boolean leveldone_ingame , int leveldone_ticks , boolean lifelost_ingame , int lifelost_ticks , boolean gameover_ingame , int gameover_ticks ) { this . startgame_ingame = startgame_ingame ; this . leveldone_ingame = leveldone_ingame ; this . lifelost_ingame = lifelost_ingame ; this . gameover_ingame = gameover_ingame ; this . startgame_ticks = startgame_ticks ; this . leveldone_ticks = leveldone_ticks ; this . lifelost_ticks = lifelost_ticks ; this . gameover_ticks = gameover_ticks ; }
te	6	public Particle ( double [ ] src ) { System . arraycopy ( src , 0 , position , 0 , src . length ) ; }
te	6	public boolean canAttackGrouped ( PositionOrUnit target , boolean checkCanTargetUnit ) { return canAttackGrouped_native ( pointer , target , checkCanTargetUnit ) ; }
te	3	public void setView ( View view ) { this . view = view ; }
te	7	public void setImage ( Image image ) { myImage = MediaTools . loadImage ( image ) ; determineSize ( ) ; }
te	4	public String getLoginName ( ) { return this . txtUsername . getText ( ) ; }
te	7	public boolean isLeaf ( Object Node ) { PasswordGroup group = ( PasswordGroup ) Node ; return ( group . getListGroup ( ) . size ( ) == 0 ) ; }
te	1	public void enable ( ) { enable = true ; }
te	9	public void tryToLoadOldModel ( ) { ModelDownloader downloader = new ModelDownloader ( false ) ; downloader . setController ( this ) ; downloader . setModel ( this . getModel ( ) ) ; downloader . setView ( this . getView ( ) ) ; downloader . execute ( ) ; }
te	1	public BTNode ( ) { }
te	7	public void mouseReleased ( MouseEvent e ) { this . setBackground ( this . button_released ) ; this . setForeground ( this . texto_released ) ; }
te	3	public FilterSequence ( SoundFilter [ ] filters ) { this . filters = filters ; }
te	4	Profile setWeightDice ( Dice weightDice ) { this . weightDice = weightDice ; return this ; }
te	5	@ Override public < T > T unwrap ( class < T > iface ) throws SQLException { return null ; }
te	4	@ Override public int getCollisionBoxWidth ( ) { return body . getCollisionBoxWidth ( ) + spikes [ 0 ] . getCollisionBoxWidth ( ) ; }
te	8	@ XmlElementDecl ( namespace = "" , name = "purchase-order-contact-last-name" ) public JAXBElement < String > createPurchaseOrderContactLastName ( String value ) { return new JAXBElement < String > ( _PurchaseOrderContactLastName_QNAME , String . class , null , value ) ; }
te	3	public void setStart ( Date start ) { this . start = start ; }
te	3	public void setCity ( String city ) { this . city = city ; }
te	8	public V put ( K key , V value ) { if ( checkKey ( key ) ) return BPTree . this . put ( key , value ) ; else throw new IllegalArgumentException ( ) ; }
te	3	@ Override public int hashCode ( ) { return name . hashCode ( ) ; }
te	10	@ Test public void testInsert ( ) { Person expectedPerson = new Person ( ) ; expectedPerson . setName ( "Thiago Alexandre Martins Monteiro" ) ; expectedPerson . insert ( ) ; Person obtainedPerson = Person . objects . get ( "name" , "Thiago Alexandre Martins Monteiro" ) ; assert . assertEquals ( expectedPerson , obtainedPerson ) ; }
te	4	public double pixelToValue ( int pixel ) { return mMinVal + ( pixel / mPixelsPerRange ) ; }
te	7	private Object min ( Object subtree ) { if ( ! ( subtree instanceof Node ) ) return ( ( Object [ ] ) subtree ) [ 0 ] ; else { Node node = ( Node ) subtree ; if ( node . left == null ) return node . element ; else return min ( node . left ) ; } }
te	9	public void setAnalyzerActive ( GlobalContext context , boolean arg ) { for ( IStringAnalyser analyzer : stringAnalysers ) { if ( context == analyzer . getGlobalContext ( ) ) { analyzer . setActive ( arg ) ; } } }
te	4	protected class getForeignObject ( String field ) throws RemoteException { return null ; }
te	4	public static Theme getTheme ( ) { return getInstance ( ) . getInstanceTheme ( ) ; }
te	3	public ArrayList < Integer > get_key_len ( ) { return null ; }
te	1	public TipoUsuario ( ) { }
te	9	public SW ( IntegerRegister dest , int offset , IntegerRegister baseAddr ) { super ( Opcode . SW , 1 , "" ) ; Source = dest ; Offset = offset ; BaseAddr = baseAddr ; }
te	9	@ Test ( timeout = 2000 ) public void testCase3 ( ) { int [ ] tree = new int [ ] { 10 , 9 , 6 , 10 , 6 , 9 , 7 , - 1 , 9 , 7 , 7 , 10 , 6 } ; int [ ] expected = new int [ ] { - 1 , 0 , 0 , 0 , 0 , 1 , 1 , 5 , 5 , 5 , 6 , 6 , 6 } ; int [ ] actual = solution . normalize ( tree ) ; assert . assertArrayEquals ( expected , actual ) ; }
te	2	public static int createNewEntity ( ) { return ++ currentEntity ; }
te	5	void check_condition ( boolean c , String msg ) { if ( ! ( c ) ) syntaxerror ( msg ) ; }
te	6	@ Basic @ Column ( name = "sale_estado" ) public String getEstadoMovimiento ( ) { return estadoMovimiento ; }
te	2	protected AP_p9sk2 ( ) { skVersion = 2 ; }
te	9	public static int compare ( String s , String s1 ) { if ( ( s . length ( ) - s1 . length ( ) ) != 0 ) { return s . length ( ) - s1 . length ( ) ; } byte b [ ] = s . getBytes ( ) ; byte b1 [ ] = s1 . getBytes ( ) ; for ( int i = 0 ; i < b . length ; i ++ ) { if ( ( b [ i ] - b1 [ i ] ) != 0 ) { return b [ i ] - b1 [ i ] ; } } return 0 ; }
te	5	public Range ( double min , double max ) { min_ = min ; max_ = max ; }
te	10	@ Override public Object getValueAt ( int rowIndex , int columnIndex ) { if ( rowIndex < getRowCount ( ) - 1 ) { switch ( columnIndex ) { case 0 : return fieldList . get ( rowIndex ) . getFieldIdentifier ( ) ; default : return null ; } } else { switch ( columnIndex ) { case 0 : return lastRow . getFieldIdentifier ( ) ; default : return null ; } } }
te	7	public void setPolygonBegin ( Polygon polygonBegin ) { this . polygonBegin = polygonBegin ; if ( hasAlreadyChangedCriteria ) { fireModelGPSChanged ( 4 ) ; } else { f_pdvWay = - 1 ; listPointToDraw = null ; fireModelGPSChanged ( 6 ) ; fireModelGPSChanged ( 4 ) ; } }
te	8	public void nextStart ( ) { if ( taskList . size ( ) == 0 ) { runningTask = null ; runningIndex = 0 ; running = false ; return ; } else { if ( running ) { return ; } else { if ( runningIndex < taskList . size ( ) ) { runningTask = taskList . get ( runningIndex ) ; runningTask . threadStart ( ) ; } } } }
te	7	@ Override public int hashCode ( ) { int hash = 5 ; hash = 53 * hash + this . id ; hash = 53 * hash + ( this . name != null ? this . name . hashCode ( ) : 0 ) ; hash = 53 * hash + ( this . skill != null ? this . skill . hashCode ( ) : 0 ) ; hash = 53 * hash + this . level ; return hash ; }
te	5	public static void main ( String [ ] args ) { MagicTrick magicTrick = new MagicTrick ( ) ; magicTrick . main ( args [ 0 ] ) ; }
te	10	public static < T > boolean inject ( Object target , class < T > fieldType , T value , boolean exactMatch ) { return inject ( target , fieldType , value , exactMatch ? Matcher . EXACT : Matcher . ASSIGNABLE ) ; }
te	5	public synchronized Task pollInputBus ( ) { if ( inputBus . isEmpty ( ) ) return null ; else { return inputBus . poll ( ) ; } }
te	4	public void disconnect ( Node nodeA , Node nodeB ) { nodeA . disconnect ( nodeB ) ; nodeB . disconnect ( nodeA ) ; }
te	8	void forward ( Message msg , Connection dest ) { sendingQueue . add ( new MessageWithTarget ( msg , dest ) ) ; }
te	5	public void shipShieldAbility ( Vector2 position , Ability ability ) { }
te	8	private static String getKey ( String standard , String rating ) { return new StringBuilder ( standard ) . append ( "|" ) . append ( rating ) . toString ( ) . toUpperCase ( ) ; }
te	5	@ Override public final int hashCode ( ) { int result = start . hashCode ( ) ; result = 31 * result + end . hashCode ( ) ; return result ; }
te	1	public int addLookback ( ) { return super . addLookback ( ) ; }
te	3	public static String [ ] getFormats ( ) { return FORMATS ; }
te	4	public String getVersion ( ) { return version + "." + subversion ; }
te	9	@ Override public boolean equals ( Object obj ) { if ( this == obj ) return true ; if ( obj == null ) return false ; if ( getClass ( ) != obj . getClass ( ) ) return false ; ConstDeclarationNode other = ( ConstDeclarationNode ) obj ; if ( expression == null ) { if ( other . expression != null ) return false ; } else if ( ! expression . equals ( other . expression ) ) return false ; if ( ident == null ) { if ( other . ident != null ) return false ; } else if ( ! ident . equals ( other . ident ) ) return false ; return true ; }
te	10	private ArrayList < String > getPlayerNamesAsList ( ArrayList < Player > players ) { ArrayList < String > playerNames = new ArrayList < String > ( ) ; for ( Player player : players ) { String playerName = player . getName ( ) ; playerNames . add ( playerName ) ; } return playerNames ; }
te	1	public boolean launchClampsReleased ( ) { return launchClampsReleased ; }
te	3	public EntityMarking ( ) { this ( EntityMarkingCharacterSet . ASCII , "" ) ; }
te	3	public void setEdate ( String edate ) { this . edate = edate ; }
te	7	@ Test public void testPertenece2 ( ) { boolean expected = false ; boolean actual = arbolito . pertenece ( 8 ) && arbolito . pertenece ( 3 ) && arbolito . pertenece ( 6 ) && arbolito . pertenece ( 1 ) && arbolito . pertenece ( 16 ) && arbolito . pertenece ( 4 ) && arbolito . pertenece ( 7 ) && arbolito . pertenece ( 14 ) && arbolito . pertenece ( 13 ) ; assertEquals ( expected , actual ) ; }
te	3	public PlayerInterface getPlayer ( ) { return who ; }
te	10	@ Override public void performSwapStop ( String clientId ) { Player curPlayer = players . get ( clientId ) ; curPlayer . animating = false ; curPlayer . synchronizeComponents ( ) ; }
te	2	public synchronized void setPrice ( double price ) { this . price = price ; }
te	4	public void setCUSTOMFIELD_TYPE ( String cUSTOMFIELD_TYPE ) { CUSTOMFIELD_TYPE = cUSTOMFIELD_TYPE ; }
te	5	public boolean isReadOnly ( Point p ) { return getCells ( ) . get ( p ) . isReadOnly ( ) ; }
te	6	public e ( ) { if ( ! __initDone ) { LOGGER . setLevel ( Level . SEVERE ) ; __initDone = true ; } }
te	7	public int getNumVisibleAttributes ( ) { if ( Users . currentUserIsTypeB ( ) ) { return visiblePositions . size ( ) ; } return attributes . length ; }
te	8	@ Override public boolean equals ( Object o ) { if ( this == o ) return true ; if ( o == null || getClass ( ) != o . getClass ( ) ) return false ; IntNode intNode = ( IntNode ) o ; return value == intNode . value ; }
te	2	public int getNumMosquitos ( ) { return num_mosquitos ; }
te	3	public Person ( ) { dob = new Date ( ) ; }
te	2	public int getSecondaryOrderID ( ) { return secondaryOrderID ; }
te	9	@ Override public void set ( int index , E pdato ) { if ( _lenght == 0 ) { throw new NullPointerException ( "Lista vacia" ) ; } getIndex ( index ) . setDato ( pdato ) ; }
te	3	public void setHeight ( int param ) { height = param ; }
te	2	public Member build ( ) { return new Member ( this ) ; }
te	8	public SwarmSymbolThreadFunction insertThreadFunction ( String identifier , List < String > argumentTypes ) throws SwarmSymbolDuplicateException { return myCurrentScope . insertThreadFunction ( identifier , argumentTypes ) ; }
te	1	void cleanUpForQuit ( ) { }
te	10	public ArrayHeapToSwapWithMaxStep ( byte [ ] arrayValues , int orderedCutOff ) { super ( PaintTimes . HEAP_SWAP , arrayValues , generateArrayColor ( arrayValues . length , orderedCutOff ) , generateHeapValues ( arrayValues , orderedCutOff ) , generateHeapColor ( arrayValues . length - orderedCutOff ) ) ; { this . cutoff = orderedCutOff ; } }
te	9	public static void d ( Object source , String msg ) { l ( DEBUG , source . getClass ( ) . getName ( ) , "" , msg ) ; }
te	10	public Strategy ( JNIBWAPI bwapi ) { instance = this ; this . bwapi = bwapi ; patrolers = new HashSet < Unit > ( ) ; patrolOut = false ; int x , y ; }
te	10	public FigureCore getFigure ( Point Cord ) { if ( isFigure ( Cord ) ) return Fig . get ( Map [ Cord . x ] [ Cord . y ] ) ; return null ; }
te	10	public static void main ( String [ ] args ) { for ( int i = 1 ; i < 5 ; i ++ ) { System . out . println ( i + " " + binet ( i ) ) ; } for ( int i = 1 ; i < 72 ; i ++ ) { System . out . println ( i + " " + binet1 ( i ) ) ; } for ( int i = 1 ; i < 148 ; i ++ ) { System . out . println ( i + " " + binet2 ( i ) ) ; } }
te	10	private boolean promptSave ( ) { MessageBox msg = new MessageBox ( shell , SWT . ICON_QUESTION | SWT . OK | SWT . CANCEL ) ; msg . setMessage ( "There are unsaved changes that will be discarded. Continue?" ) ; return ( msg . open ( ) == SWT . OK ) ; }
te	5	public static void main ( String [ ] args ) { Class4 myOblect = new Class4 ( ) ; }
te	5	public ArrayIterator ( Array < T > array , boolean allowRemove ) { this . array = array ; this . allowRemove = allowRemove ; }
te	1	public MSSqlServerPaginatedRepairer ( ) { }
te	8	public boolean isMilestoneDate ( Calendar cal ) { for ( MileStone milestone : total . getMilestones ( ) ) { if ( milestone . getTimeInMillis ( ) == cal . getTimeInMillis ( ) ) { return true ; } } return false ; }
te	8	@ Override public Array createArrayOf ( String typeName , Object [ ] elements ) throws SQLException { return null ; }
te	5	protected BTPos < E > createNode ( E element , int i ) { return new BTPos < > ( element , i ) ; }
te	2	public int getPuntaje ( ) { return puntaje ; }
te	2	public boolean isEmtpyTMProposals ( ) { return emtpy_tm_proposals ; }
te	8	public Hardware getHardware ( java . lang . Integer id ) { return getFacade ( ) . find ( id ) ; }
te	3	public int length ( ) { return this . map . size ( ) ; }
te	9	@ Override public boolean equals ( Object other ) { if ( ( this == other ) ) return true ; if ( ( other == null ) ) return false ; if ( ! ( other instanceof ComentariId ) ) return false ; ComentariId castOther = ( ComentariId ) other ; return ( ( this . getNomHotel ( ) == castOther . getNomHotel ( ) ) || ( this . getNomHotel ( ) != null && castOther . getNomHotel ( ) != null && this . getNomHotel ( ) . equals ( castOther . getNomHotel ( ) ) ) ) && ( ( this . getDniClient ( ) == castOther . getDniClient ( ) ) || ( this . getDniClient ( ) != null && castOther . getDniClient ( ) != null && this . getDniClient ( ) . equals ( castOther . getDniClient ( ) ) ) ) && ( ( this . getData ( ) == castOther . getData ( ) ) || ( this . getData ( ) != null && castOther . getData ( ) != null && this . getData ( ) . equals ( castOther . getData ( ) ) ) ) ; }
te	5	public EnterView ( ActionController actController ) { this . actController = actController ; this . setActionListener ( ) ; this . initEnterView ( ) ; }
te	9	public boolean match ( String regex ) { Matcher match = Pattern . compile ( regex ) . matcher ( this . toString ( ) ) ; return match . find ( ) ; }
te	6	@ Test public void test_0909_TABLE_HEADER ( ) throws Exception { doTest ( getClass ( ) . getResource ( "/w3.org/WAI/UA/TS/html401/cp0909/0909-TABLE-HEADER.html" ) ) ; }
te	2	public SendMTResponse createSendMTResponse ( ) { return new SendMTResponse ( ) ; }
te	1	private LocationAttributes ( ) { }
te	1	public SSHPacket ( ) { }
te	3	@ Override public String getChineseName ( ) { return "\u571F\u8C46" ; }
te	10	public void registeLocalClient ( SocketChannel socketChannel ) throws IOException { this . localSocketChannels . offer ( socketChannel ) ; if ( wakenUp . compareAndSet ( false , true ) ) { selector . wakeup ( ) ; } }
te	6	private void jTextField2ActionPerformed ( java . awt . event . ActionEvent evt ) { }
te	4	public String toString ( ) { return name + " = " + rhs ; }
te	2	public int getValue ( ) { return value ; }
te	7	@ Override public int compare ( Record o1 , Record o2 ) { return ( int ) signum ( o1 . distance - o2 . distance ) ; }
te	4	public void unknownWordBootstrappingMain ( ) { String plMiddle = "(ee)" ; int newInt = 0 ; do { } while ( newInt > 0 ) ; }
te	2	public long getNodeId ( ) { return nodeId ; }
te	6	public static void main ( String [ ] args ) { UIGateway . start ( ) ; UIGateway . saveUserProfile ( ) ; }
te	9	@ Override public boolean equals ( Object obj ) { if ( obj instanceof CuentaBancaria ) return numero == ( ( CuentaBancaria ) obj ) . numero ; else if ( obj instanceof Integer ) return numero == Integer . parseInt ( obj . toString ( ) ) ; return false ; }
te	7	public void set ( long index , byte [ ] struct , int structPos ) { ohm . put ( index * structLength , struct , structPos , structLength ) ; }
te	8	public static ObjectMapper getObjectMapper ( ) { final ObjectMapper objectMapper = new ObjectMapper ( ) ; objectMapper . configure ( Feature . CAN_OVERRIDE_ACCESS_MODIFIERS , false ) ; objectMapper . registerModule ( new MrBeanModule ( ) ) ; return objectMapper ; }
te	6	public JSONWriter endArray ( ) throws JSONException { return this . end ( a , ] ) ; }
te	9	public Descriptor compile ( SymbolTable table ) { SymbolTable symbolTable = new SymbolTable ( table ) ; for ( AbstractNode node : fieldLists ) { node . compile ( symbolTable ) ; } return new RecordDescriptor ( symbolTable ) ; }
te	1	public double getProgress ( ) { return 0 ; }
te	1	public void editUser ( ) { }
te	2	public float getFlowVelocity ( ) { return flowVelocity ; }
te	4	public ImageWatcher ( Image i ) { super ( ) ; this . image = i ; }
te	7	public Color ( Entity ent ) { fields . put ( "id" , ent . getId ( ) ) ; fields . put ( "color" , ent . getColor ( ) ) ; }
te	3	public SelectQueryPrinter ( final SelectQueryInterface selectQuery ) { this . selectQuery = selectQuery ; }
te	3	public String getNameProd ( ) { return nombreprod ; }
te	1	public void Carpeta ( ) { }
te	8	public void setLoginPwAnswer ( String value ) { String oldValue = loginPwAnswer ; loginPwAnswer = value ; propertySupport . firePropertyChange ( PROP_LOGIN_PW_ANSWER , oldValue , loginPwAnswer ) ; }
te	4	public void setLOGGING_WANIP ( String lOGGING_WANIP ) { LOGGING_WANIP = lOGGING_WANIP ; }
te	8	public ASTNode ( String nm , ASTNode ... c ) { this ( nm ) ; setChildren ( new ArrayList < ASTNode > ( Arrays . asList ( c ) ) ) ; }
te	1	public int getIconHeight ( ) { return 11 ; }
te	7	public int isUnique ( ) { LinkedList < Cell > emptyCells = getEmpties ( ) ; int solutions = uniqueRecursive ( emptyCells , 0 ) ; return solutions ; }
te	2	public void setQuantidade ( int quantidade ) { this . quantidade = quantidade ; }
te	5	public void setDuty ( Duties duty ) { duties . add ( duty ) ; }
te	9	@ Test public void ShouldGetSumOfDigitsIn2ToThe1000 ( ) { BigIntegerMath math = new BigIntegerMath ( ) ; int result = math . GetSumOfDigitsInNumber ( new BigInteger ( "2" ) . pow ( 1000 ) ) ; assert . assertEquals ( 1366 , result ) ; }
te	10	private synchronized String getMinSensorValue ( ) { if ( sensorValuesMap . isEmpty ( ) ) { return "" ; } Integer minValue = Integer . MAX_VALUE ; for ( Integer curInt : sensorValuesMap . values ( ) ) { if ( curInt < minValue ) { minValue = curInt ; } } return Integer . toString ( minValue ) ; }
te	6	public static float toFloat ( byte [ ] bytes , int offset ) { return float . intBitsToFloat ( toInt ( bytes , offset , SIZEOF_INT ) ) ; }
te	1	protected AbstractTest ( ) { }
te	3	public void setTxtMarca ( JTextField txtMarca ) { this . txtMarca = txtMarca ; }
te	3	@ Override public String getDescription ( ) { return "Erreur 404" ; }
te	1	public AimProgressBar ( ) { this ( 0 , 100 , 100 ) ; }
te	3	public String getCourseName ( ) { return this . courseName ; }
te	5	public ConfigVarServiceException ( String message , Throwable cause ) { super ( message , cause ) ; }
te	9	public CreateJmsDestCommand ( GlassFishEnvironment environment , JmsDestType desttype , String destname , Properties properties ) { super ( environment ) ; this . desttype = desttype ; this . destname = destname ; this . properties = properties ; }
te	3	public FunctionPrototype ( StaticFunctionSignature signature ) { this . signature = signature ; }
te	6	private int genS ( ) { return ( int ) RandomGeneratorHelper . GaussDistribution ( sys . ServeMu , sys . ServeSigma ) ; }
te	1	public Band ( ) { }
te	5	public void Draw ( ) { ChainEnemyTailPiece iterator = mFirstTailPiece ; while ( iterator != null ) { iterator . Draw ( ) ; iterator = iterator . GetNext ( ) ; } }
te	5	@ Deprecated public Collection < Serie > createSeries ( ) { return seriesInstance ( ) ; }
te	5	public void sendSelectedTuple ( String [ ] row ) { controller . setSelectedTuple ( row ) ; }
te	5	@ Override public List < Entity > getEntities ( ) { return entities ; }
te	7	private static void print ( int [ ] a ) { for ( int i = 0 ; i < a . length ; i ++ ) { System . out . println ( a [ i ] ) ; } }
te	1	private static short getDefaultMapIconIndex ( ) { return 0 ; }
te	5	public static int EruptionOrWaterSpout ( Pokemon attacker ) { return 150 * ( attacker . getCurrHp ( ) / attacker . getMaxHp ( ) ) ; }
te	2	public CreditCardInformation createCreditCardInformation ( ) { return new CreditCardInformation ( ) ; }
te	6	@ Override public final Impl andSelf ( ) { if ( previousMatch != null ) { addUniqueElements ( previousMatch . get ( ) ) ; } return this ; }
te	4	void simulate ( Quackable duck ) { duck . quack ( ) ; }
te	4	public void setObjectiveTypes ( HashSet < String > objectiveTypes ) { this . objectiveTypes = objectiveTypes ; }
te	9	@ Override public final boolean equals ( @ Nullable final Object obj ) { if ( obj instanceof SimpleMovement ) { final SimpleMovement other = ( SimpleMovement ) obj ; return from . equals ( other . from ) && to . equals ( other . to ) ; } return false ; }
te	5	public static Location reference ( Object identifier ) { Location reference = new Location ( identifier ) ; reference . setIsReference ( true ) ; return reference ; }
te	9	@ Before public void setUp ( ) throws Exception { sudoku = new Sudoku ( ) ; path = FileSystems . getDefault ( ) . getPath ( "sudoku.csv" ) ; }
te	10	@ Test public void doSort ( ) { init ( ) ; mergesort ( 0 , numbers . length - 1 ) ; for ( int i : numbers ) { System . out . print ( i + " " ) ; } }
te	7	public List < Status > getMentions ( ) throws WeiboException { return Status . constructStatuses ( get ( getBaseURL ( ) + "statuses/mentions.json" , null , true ) ) ; }
te	5	public boolean isEmpty ( int x , int y ) { return ( board [ x ] [ y ] == EMPTY_FIELD ) ; }
te	10	private static void permWithReps2 ( char [ ] input , String solution ) { if ( input == null ) { return ; } for ( int i = 0 ; i < input . length ; i ++ ) { String current = solution + input [ i ] ; if ( current . length ( ) == input . length ) { System . out . println ( current ) ; } else { permWithReps2 ( input , current ) ; } } }
te	1	public BSTOrderedDictionaryTest ( ) { }
te	6	@ Override public void run ( ) { Singleton singleton = Singleton . singleton ( ) ; singletons . add ( singleton ) ; }
te	9	public void setMarker ( int marker ) { if ( marker != MARKER_HIDE && marker != MARKER_FULL_CIRCLE && marker != MARKER_HOLLOW_CIRCLE && marker != MARKER_FULL_SQUARE && marker != MARKER_HOLLOW_SQUARE ) return ; if ( marker == this . marker ) return ; this . marker = marker ; this . icon = generateImageIcon ( ) ; }
te	7	public boolean hasHandler ( String path , String handler_name ) { Node node = getNode ( path ) ; if ( node == null ) { return false ; } return node . hasHandler ( handler_name ) ; }
te	8	public void initializePanel ( ) throws FileNotFoundException { ContactScreenPanel csPanel = new ContactScreenPanel ( this . cellPhone , this ) ; this . cSPanel = csPanel ; cSPanel . repaint ( ) ; this . revalidate ( ) ; }
te	9	public BoundsPopupMenuListener ( boolean scrollBarRequired , boolean popupWider , int maximumWidth , boolean popupAbove ) { setScrollBarRequired ( scrollBarRequired ) ; setPopupWider ( popupWider ) ; setMaximumWidth ( maximumWidth ) ; setPopupAbove ( popupAbove ) ; }
te	4	public BombermanServer ( int port ) { DebugConsole . Print ( "Initializing server  port: " + port ) ; this . port = port ; DebugConsole . Print ( "Initializing server done" ) ; }
te	6	public List getFeedback ( ) { return ( valueSource instanceof FeedbackEnabledValueSource ) ? valueSource . getFeedback ( ) : Collections . EMPTY_LIST ; }
te	2	public int getId_ut ( ) { return id_ut ; }
te	6	public WasInfluencedBy ( Influenceable influenced , Influenceable influencer ) { _influenced = influenced ; _influencer = influencer ; }
te	5	public void clear ( ) { resetTriangulation ( ) ; inputVertices = Sets . newLinkedHashSet ( ) ; }
te	7	public IdentifierNotFoundException ( String message , Throwable cause , boolean enableSuppression , boolean writableStackTrace ) { super ( message , cause , enableSuppression , writableStackTrace ) ; }
te	10	public String tagSentWithMTPreProcessing ( String text ) { if ( text == null ) { return null ; } text = text . replaceAll ( "<\\S+?>" , "" ) ; text = StringUtility . removeAllRecursive ( text , "^(" + myConstant . STOP + "|" + myConstant . FORBIDDEN + ")\\b\\s*" ) ; text = StringUtility . removeAllRecursive ( text , "\\s*\\b(" + myConstant . STOP + "|" + myConstant . FORBIDDEN + "|\\w+ly)$" ) ; text = StringUtility . removeAllRecursive ( text , "\\b(" + myConstant . PRONOUN + ")\\b" ) ; return text ; }
te	8	static void init ( Panel p , UserTrees ut ) { parent = p ; userTrees = ut ; getTab ( ) ; }
te	7	public boolean isSameTree ( TreeNode p , TreeNode q ) { if ( p == null && q == null ) { return true ; } if ( p == null && q != null ) { return false ; } if ( p != null && q == null ) { return false ; } return ( p . val == q . val && isSameTree ( p . left , q . left ) && isSameTree ( p . right , q . right ) ) ; }
te	8	@ Override public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( ) != obj . getClass ( ) ) { return false ; } final Produto other = ( Produto ) obj ; if ( this . estoque != other . estoque ) { return false ; } return true ; }
te	9	@ Override public void run ( ) { while ( true ) { try { controller . addToChat ( server . gameChat . pop ( ) , true ) ; } catch ( InterruptedException e ) { break ; } } }
te	10	private boolean hasWallRight ( int i , int j ) { UndirectedGraph walls = this . parent . getWalls ( ) ; int node = i + ( j * this . size ) ; node = node + 1 ; if ( walls . edgeExists ( node , node + this . size ) ) return true ; return false ; }
te	5	private void processMessage ( Element xml ) { server . notifyDeviceListenersMessage ( this , xml ) ; }
te	10	public void printDescription ( ) { System . out . println ( "You are in a field." ) ; this . north . examine ( ) ; this . east . examine ( ) ; this . west . examine ( ) ; this . south . examine ( ) ; System . out . println ( "There is a merchant and his wagon in the field." ) ; this . printItemsOnGround ( ) ; }
te	6	@ Test public void verifyInvalidMarkerMapsToNull ( ) throws Exception { assertNull ( dartData . getValue ( "A1" , "M100" ) ) ; }
te	5	public SimplexNoise ( int largestFeature , double persistence ) { this ( largestFeature , persistence , new Random ( ) . nextInt ( ) ) ; }
te	8	protected static void fileSeparatorTest ( ) { String filePath = "/usr/local/path" ; System . out . println ( filePath ) ; System . out . println ( FileUtils . correctFilePath ( filePath ) ) ; }
te	2	public MessageInfo createMessageInfo ( ) { return new MessageInfo ( ) ; }
te	7	@ Test public void testContainsSmallerPeriodLowerBoundary ( ) { DateTimePeriod dateTimeSource = new DateTimePeriod ( "1/1/2001 9:00" , "12/12/2001 9:00" ) ; DateTimePeriod dateTimeTarget = new DateTimePeriod ( "1/1/2001 9:00" , "11/12/2001 9:00" ) ; assertTrue ( dateTimeSource . contains ( dateTimeTarget ) ) ; }
te	6	public void setZoom ( double newZoom ) { Point zoomingCenter = new Point ( getWidth ( ) / 2 , getHeight ( ) / 2 ) ; setZoom ( newZoom , zoomingCenter ) ; }
te	4	protected String lowerOperationOnResult ( final String varNameForecast ) { return String . format ( "(%s$pred - %s$se)" , varNameForecast , varNameForecast ) ; }
te	5	@ Override protected void unbindSelf ( ) { this . messageManager . unbind ( this ) ; this . connectionManager . unbind ( this ) ; }
te	10	public void addSemanticGroup ( final String group , final String gparent ) { final String semantic = group . substring ( 0 , group . indexOf ( "-" ) ) ; final String groupid = group . substring ( group . indexOf ( "-" ) ) ; this . semanticGroups . put ( semantic , groupid + ":" + gparent ) ; }
te	9	@ Override public List < CorpusUnit > getSentences ( ) { List < CorpusUnit > result = new LinkedList < CorpusUnit > ( ) ; for ( CorpusUnit cu : subcorpusOrS ) { result . addAll ( cu . getSentences ( ) ) ; } return result ; }
te	1	public MySQLPaginatedRepairer ( ) { }
te	6	@ Override public void previousFrame ( ) { for ( GSprite sprite : sprites . values ( ) ) { if ( sprite != null ) { sprite . previousFrame ( ) ; } } }
te	3	private static final long [ ] mk_tokenSet_1 ( ) { long [ ] data = new long [ 260 ] ; data [ 0 ] = - 9224 ; for ( int i = 1 ; i <= 3 ; i ++ ) { data [ i ] = - 1 ; } for ( int i = 64 ; i <= 127 ; i ++ ) { data [ i ] = - 1 ; } return data ; }
te	1	public int getCarbonButtonWidth ( ) { return 25 ; }
te	1	public ProductChangeBean ( ) { super ( ) ; }
te	3	public void setStream_size ( String stream_size ) { this . stream_size = stream_size ; }
te	7	private boolean areBothEndsLogScale ( final Edge edge ) { return nodePotentials [ edge . getFirst ( ) ] . isLogScale ( ) && nodePotentials [ edge . getSecond ( ) ] . isLogScale ( ) ; }
te	4	public List < Publish > getSitelist ( ) { return sitelist ; }
te	4	@ Override public boolean isRunning ( ) throws RemoteException { return server . isRunning ( ) ; }
te	1	public ObjectWithArray ( ) { }
te	3	@ Override public int getWorkersThreadCount ( ) { return workersThreadCount ; }
te	8	public JSONObject put ( String key , Collection value ) throws JSONException { put ( key , new JSONArray ( value ) ) ; return this ; }
te	5	@ Basic @ Column ( name = "CSA_POS_ID" ) public int getCsaPosId ( ) { return csaPosId ; }
te	5	public ComponentMover ( Component destinationComponent , Component ... components ) { this . destinationComponent = destinationComponent ; registerComponent ( components ) ; }
te	3	protected Options getOptions ( ) { return options ; }
te	10	public int getTotalWords ( ) { int ret = 0 ; Set < String > wds = dict . keySet ( ) ; for ( String word : wds ) { ret += dict . get ( word ) . getValue ( ) ; } return ret ; }
te	8	@ Override public Iterator < TO > iterator ( ) { return AdapterLibrary . adaptIterator ( _source . iterator ( ) , _adapter ) ; }
te	6	public int compare ( LeaderOffer o1 , LeaderOffer o2 ) { return o1 . getCode ( ) . compareTo ( o2 . getCode ( ) ) ; }
te	8	private boolean r_noun ( ) { int among_var ; ket = cursor ; among_var = find_among_b ( a_5 , 36 ) ; if ( among_var == 0 ) { return false ; } bra = cursor ; switch ( among_var ) { case 0 : return false ; case 1 : slice_del ( ) ; break ; } return true ; }
te	9	public void merge ( Totals < T > totals ) { for ( String measure : aggregates . keySet ( ) ) { aggregates . get ( measure ) . merge ( totals . aggregates . get ( measure ) ) ; } }
te	6	private void serializeEntityReference ( Node child ) throws IOException { encodeEntityReference ( child . getNodeName ( ) ) ; }
te	9	@ Override public Individual < MyLevel > mutate ( Individual < MyLevel > individual ) { Individual < MyLevel > mutated = ( ( MyLevel ) individual . getData ( ) ) . copy ( ) ; mutated . createMutations ( ) ; return mutated ; }
te	1	public void tearDown ( ) { }
te	8	private void addFlowerIfNecessary ( ) { if ( FPSManager . totalFrame ( ) % ( FPS / flowerBornPerSecond ) == 0 ) { add ( new FlowerCharacter ( flowerTexture ) ) ; } }
te	5	public void addEventforAllControl ( ) { printPreview . getButtonClose ( ) . addActionListener ( new CMyButtonEvent ( ) ) ; }
te	4	public TestOutput ( VerbosityLevel verbosity , boolean decorated ) { super ( verbosity , decorated ) ; }
te	7	@ Override public SearchRequestBuilder withPhonebookRequestSortOption ( PhonebookSortOption phonebookSortOption ) { getPhonebookRequest ( ) . setSortBy ( phonebookSortOption ) ; return this ; }
te	6	@ Override public void updateString ( String columnLabel , String x ) throws SQLException { }
te	2	public void setId ( long id ) { this . id = id ; }
te	8	private DialogConfiguracionSistemaControl ( JFrame parent ) { this . dialogConfiguracionSistema = new DialogConfiguracionSistema ( parent ) ; this . dialogConfiguracionSistema . getAceptar ( ) . addActionListener ( this ) ; this . dialogConfiguracionSistema . getCancelar ( ) . addActionListener ( this ) ; }
te	2	public int getId ( ) { return id ; }
te	1	public boolean isCancelled ( ) { return false ; }
te	10	@ Test public void Attack_page2 ( ) { tester . assertMatch ( "'s Classes" ) ; Support_Function . setAll ( "page2" , "0'/><a href=\"#\">malicious link</a><br'" , tester ) ; Support_Function . setAll ( "selectclass" , "5" , tester ) ; Support_Function . addSubmitButton ( "html//form[@name='classes']" , tester ) ; tester . setWorkingForm ( "classes" ) ; tester . submit ( ) ; tester . assertMatch ( "'s Classes" ) ; tester . assertLinkNotPresentWithText ( "malicious link" ) ; }
te	3	private void reset ( ) { graphics2D = new EpsGraphics2D ( ) ; }
te	9	public int getTotalRegisteredTime ( ) { int totalDuration = 0 ; for ( Map < LocalDate , Integer > map : registeredTime . values ( ) ) { for ( int duration : map . values ( ) ) { totalDuration += duration ; } } return totalDuration ; }
te	2	public int getNumber ( ) { return number ; }
te	10	public String getURL ( String protocol ) { String url = protocol + "://" + getHostAddress ( ) + ":" + getPort ( ) ; String path = getPropertyString ( "path" ) ; if ( path != null ) { if ( path . indexOf ( "://" ) >= 0 ) { url = path ; } else { url += path . startsWith ( "/" ) ? path : "/" + path ; } } return url ; }
te	1	protected void interrupted ( ) { }
te	6	public static void debug ( String msg ) { System . out . println ( "measureImageContrast calculation executing..." ) ; }
te	6	default public < T > List < T > list ( T object ) { List < T > list = new ArrayList < > ( ) ; list . add ( object ) ; return list ; }
te	5	public void checkAggro ( MapHandler mh , Player p ) { }
te	2	public void setNumero3 ( int numero3 ) { this . numero3 = numero3 ; }
te	4	private File get ( String regKey ) { return get ( regKey , regKey ) ; }
te	9	@ Test public void testMoverXY ( ) throws Exception { PortaAviones nave = new PortaAviones ( new Posicion ( 10 , 10 ) , new Posicion ( 4 , 4 ) , 5 ) ; nave . mover ( ) ; this . assertEquals ( true , nave . estoyEnPosicion ( new Posicion ( 5 , 5 ) ) ) ; this . assertEquals ( true , nave . estoyEnPosicion ( new Posicion ( 6 , 6 ) ) ) ; this . assertEquals ( true , nave . estoyEnPosicion ( new Posicion ( 7 , 7 ) ) ) ; this . assertEquals ( true , nave . estoyEnPosicion ( new Posicion ( 8 , 8 ) ) ) ; this . assertEquals ( true , nave . estoyEnPosicion ( new Posicion ( 9 , 9 ) ) ) ; }
te	7	public void render ( Screen screen ) { screen . render ( ( int ) x , ( int ) y - ( int ) z , tile , false ) ; }
te	8	public Person clone ( ) throws CloneNotSupportedException { Person newMan = this . prototype . clone ( ) ; decorator . takeProfession ( newMan , settlemtnt ) ; return newMan ; }
te	1	public Location ( ) { }
te	7	public CellTerrainEdit ( EditorState editorState , TerrainTypes oldValue , TerrainTypes newValue , int cellId ) { this . editorState = editorState ; this . oldValue = oldValue ; this . newValue = newValue ; this . cellId = cellId ; }
te	7	static Integer IsPossible ( int [ ] a , int n , int sum ) { if ( n == 1 ) if ( sum == Math . abs ( a [ 0 ] ) ) return 1 ; else return 0 ; return IsPossible ( a , n - 1 , sum + a [ n - 1 ] ) | IsPossible ( a , n - 1 , sum - a [ n - 1 ] ) ; }
te	7	@ Override public int hashCode ( ) { final int prime = 31 ; int result = 1 ; result = prime * result + ( ( email == null ) ? 0 : email . hashCode ( ) ) ; result = prime * result + ( ( firstName == null ) ? 0 : firstName . hashCode ( ) ) ; result = prime * result + ( ( lastName == null ) ? 0 : lastName . hashCode ( ) ) ; return result ; }
te	8	public void set_label ( ) { label3 . setIcon ( new ImageIcon ( "image//banner.jpg" ) ) ; label3 . setText ( "PNR Java Media Player" ) ; label3 . setHorizontalTextPosition ( SwingConstants . CENTER ) ; }
te	10	private static double getSlope ( Line2D l ) { Point2D p1 = l . getP1 ( ) ; Point2D p2 = l . getP2 ( ) ; if ( p1 . getX ( ) > p2 . getX ( ) ) { p1 = p2 ; p2 = l . getP1 ( ) ; } return ( p2 . getY ( ) - p1 . getY ( ) ) / ( p2 . getX ( ) - p1 . getX ( ) ) ; }
te	6	private int getAdditiveScore ( ) { int result = 0 ; for ( Turn t : turns ) { result += t . getScore ( ) ; } return result ; }
te	4	public String getTitleText ( ) { return title . getText ( ) ; }
te	2	public int getPhone2 ( ) { return phone2 ; }
te	1	public void begin ( ) { }
te	9	@ Override public void onTriggerDialog ( Dialog dialog ) { inDialog = true ; dialogWizard = new DialogWizard ( dialog ) ; dialogWizard . init ( resources ) ; }
te	10	public void paint ( Graphics g ) { g . setColor ( Color . black ) ; g . fillRect ( 0 , 0 , screen . getSize ( ) . width , 50 ) ; super . paint ( g ) ; }
te	7	public void resize ( final int m , final int nnvals ) { nrows = m ; nvals = nnvals ; row_ind = new int [ nnvals ] ; val = new double [ nvals ] ; }
te	1	public boolean isNumeric ( ) { return true ; }
te	10	private static int findLongestSubsequence ( String firstString , String secondString , int i , int j ) { if ( firstString == null || secondString == null ) return 0 ; if ( i == firstString . length ( ) || j == secondString . length ( ) ) return 0 ; if ( firstString . charAt ( i ) == secondString . charAt ( j ) ) { return 1 + findLongestSubsequence ( firstString , secondString , i + 1 , j + 1 ) ; } else { return Math . max ( findLongestSubsequence ( firstString , secondString , i + 1 , j ) , findLongestSubsequence ( firstString , secondString , i , j + 1 ) ) ; } }
te	2	public void updateValue ( double value ) { this . value += value ; }
te	3	public boolean isCoffee ( ) { return type . equals ( "coffee" ) ; }
te	4	public void setSiblingRight ( SiblingRight value ) { this . siblingRight = value ; }
te	5	@ Override public void timeChanged ( MediaPlayer mp , long l ) { }
te	9	private synchronized String genDate ( ) { return this . cal . get ( Calendar . YEAR ) + "/" + String . format ( "%02d" , ( this . cal . get ( Calendar . MONTH ) + 1 ) ) + "/" + String . format ( "%02d" , this . cal . get ( Calendar . DAY_OF_MONTH ) ) ; }
te	10	public boolean checkIfGameOver ( final boolean [ ] [ ] activityMock , final boolean [ ] [ ] visibilityMock ) { for ( int xCurrent = 0 ; xCurrent < boardSize ; xCurrent ++ ) for ( int yCurrent = 0 ; yCurrent < boardSize ; yCurrent ++ ) { if ( activityMock [ xCurrent ] [ yCurrent ] . equals ( true ) && ( visibilityMock [ xCurrent ] [ yCurrent ] . equals ( true ) ) ) { return false ; } } view . sendBoardEvent ( new GameOverEvent ( ) ) ; return true ; }
te	1	public Host_Draggable_Element ( ) { this ( 300 ) ; }
te	10	@ Test public void size1works ( ) { Percolation p = new Percolation ( 1 ) ; assertFalse ( p . isOpen ( 1 , 1 ) ) ; assertFalse ( p . isFull ( 1 , 1 ) ) ; assertFalse ( p . percolates ( ) ) ; p . open ( 1 , 1 ) ; assertTrue ( p . isOpen ( 1 , 1 ) ) ; assertTrue ( p . isFull ( 1 , 1 ) ) ; assertTrue ( p . percolates ( ) ) ; }
te	1	private FPSManager ( ) { }
te	4	public void setController ( Controller ctrl ) { this . ctrl = ctrl ; jPanelGPSConfigScaleMap . setController ( ctrl ) ; }
te	3	public Integer getPageView ( ) { return pageView ; }
te	1	public void run ( ) { }
te	10	protected void clearLine ( ) { if ( getAllText ( ) . length ( ) <= 0 ) return ; if ( getText ( document . getLength ( ) - 1 , 1 ) . equals ( "\n" ) ) return ; commandIndex = commandIndex - commandMode . length ( ) ; remove ( commandIndex , document . getLength ( ) - commandIndex ) ; }
te	7	private BigInteger reduceOdd ( final BigInteger value ) { return value . multiply ( THREE ) . add ( ONE ) ; }
te	5	@ Override public Material getMaterial ( ) { return objects . get ( 0 ) . getMaterial ( ) ; }
te	10	public ButtonDefault ( ) { setPreferredSize ( dimension ) ; setFont ( font ) ; setOpaque ( false ) ; this . setCursor ( Cursor . getPredefinedCursor ( Cursor . HAND_CURSOR ) ) ; }
te	9	@ Override protected void checkPD ( ) { switch ( pd ) { case CLOCK6 : case CLOCK12 : sqNumWidth = 2 ; sqNumHeight = 3 ; break ; case CLOCK3 : case CLOCK9 : default : sqNumWidth = 3 ; sqNumHeight = 2 ; break ; } }
te	1	public int intValue ( ) { return intValue ; }
te	9	public final ListQuery < T > each ( EachBlock < T > block ) { if ( isEmpty ( ) || block == null ) { return this ; } for ( T t : list ) { block . call ( t ) ; } return this ; }
te	4	public Range ( int single ) { this . left = single ; this . right = single ; }
te	4	private void boilWater ( ) { System . out . println ( "- \uBB3C \uB053\uC774\uB294 \uC911" ) ; }
te	4	public SphericalCoordinates ( float xzAngleInRad , float xyAngleInRad ) { this . xzAngleInRad = assertValidAngleInRad ( xzAngleInRad ) ; this . xyAngleInRad = assertValidAngleInRad ( xyAngleInRad ) ; }
te	1	public int outputsNum ( ) { return outputsNum ; }
te	6	@ Override public String toString ( ) { return String . format ( "[%02d] %s" , getIxPerson ( ) , getsFullName ( ) ) ; }
te	9	public String [ ] getStringFutbolistas ( ) { int tamano = getListaFutbolistas ( ) . size ( ) ; String [ ] listado = new String [ tamano ] ; for ( int i = 0 ; i < tamano ; i ++ ) { listado [ i ] = getListaFutbolistas ( ) . get ( i ) . nombre ; } return listado ; }
te	10	@ Override public String transform ( String source , Page page ) { String ret = source ; for ( Transformation transformation : transformations ) { ret = transformation . transform ( ret , page ) ; } return ret ; }
te	7	public List < ColourConnection . Colourpalettes . Colourpalette > getColourpalette ( ) { if ( colourpalette == null ) { colourpalette = new ArrayList < ColourConnection . Colourpalettes . Colourpalette > ( ) ; } return this . colourpalette ; }
te	6	public Conta ( String nomeTitular , double valorAtual , Calendar dataCriacao ) { this . nomeTitular = nomeTitular ; this . valorAtual = valorAtual ; this . dataCriacao = dataCriacao ; }
te	2	public Space upgrade ( ) { return null ; }
te	7	public Integer addUser ( User user ) { Integer userId = 0 ; if ( isUserPresent ( user ) == false ) { userId = dbSaveRestore . addUser ( user ) ; } return userId ; }
te	10	public static String hex ( byte b ) { int v = ( ( int ) b ) & FF ; byte [ ] bytes = new byte [ 2 ] ; bytes [ 0 ] = HEX_CHAR_TABLE [ v >>> 4 ] ; bytes [ 1 ] = HEX_CHAR_TABLE [ v & F ] ; try { return new String ( bytes , "ASCII" ) ; } catch ( Exception e ) { return null ; } }
te	7	public String toString ( ) { return "[df=" + this . df + " xmin=" + this . xmin + " shifting=" + this . shifting + " scaling=" + this . scaling + " D=" + ksDistance + "]" ; }
te	4	@ Override public void update ( long elapsedTime ) { playfield . update ( elapsedTime ) ; }
te	9	public QuerySet < T > remove ( String query ) { QuerySet < T > querySet = this . filter ( query ) ; if ( querySet != null && ! querySet . isEmpty ( ) ) { this . removeAll ( querySet ) ; } return this ; }
te	2	public void addReference ( ) { refCount ++ ; }
te	5	boolean validMonth ( int month ) { if ( this . within ( 1 , month , 12 ) ) return true ; else throw new IllegalArgumentException ( MSG_INVALID_MONTH_IN_DATE ) ; }
te	3	public ScAxis getAxisY ( ) { return axisY ; }
te	3	public void setType ( VariableType type ) { this . type = type ; }
te	1	public boolean calledRead ( ) { return calledRead ; }
te	4	@ Override public ThresholdRange getThresholdRange ( ) { return thresholdRange ; }
te	4	@ Override public String toString ( ) { return "RemoveImportEvent [file=" + file + "]" ; }
te	5	public String getGui_label ( ) { return otapiJNI . ContactAcct_gui_label_get ( swigCPtr , this ) ; }
te	3	public void show ( ) { this . gui . setVisible ( true ) ; }
te	4	public void resetStackTrace ( ) { stackTrace = new StringBuilder ( ) ; stackTraceLevel = 0 ; }
te	4	public void setProgram ( RobotProgramNode prog ) { program = prog ; }
te	2	public boolean getCompareSameRef ( ) { return compareSameRef ; }
te	9	@ Test public void testFilterMin ( ) { this . shard . filterMin ( this . nonmatches , 0 , double . NaN ) ; assertEquals ( 1024 , this . countMatches ( ) ) ; this . shard . filterMin ( this . nonmatches , 0 , 256 ) ; this . assertMatches ( 256 ) ; this . assertMatches ( 800 ) ; this . assertMatches ( 1023 ) ; this . assertNotMatches ( 0 ) ; this . assertNotMatches ( 0 ) ; assertEquals ( 768 , this . countMatches ( ) ) ; this . shard . filterMin ( this . nonmatches , 2 , 8 ) ; assertEquals ( 384 , this . countMatches ( ) ) ; this . assertNotMatches ( 8 ) ; this . assertNotMatches ( 256 ) ; this . assertNotMatches ( 263 ) ; this . assertMatches ( 264 ) ; this . assertMatches ( 271 ) ; }
te	1	private GroovyRunner ( ) { }
te	3	public String getTextColor ( ) { return textColor ; }
te	7	public Object run ( ) throws Exception { return Util . getWorkingDirectory ( ) + File . separator + "bin" + File . separator ; }
te	6	public void testValueOfString ( ) throws Exception { SparseInt sint = SparseInt . valueOf ( "123" ) ; assertEquals ( new SparseInt ( "123" ) , sint ) ; }
te	7	public Iterator < Tree < String >> iterator ( ) { return new ConcatenationIterator < Tree < String >> ( new TreeIteratorIterator ( files ) ) ; }
te	10	public void stem ( ) { k = i - 1 ; if ( k > 1 ) { step1 ( ) ; step2 ( ) ; step3 ( ) ; step4 ( ) ; step5 ( ) ; step6 ( ) ; } i_end = k + 1 ; i = 0 ; }
te	3	public JTextArea getLogArea ( ) { return logArea ; }
te	6	GradeDistro ( ) { a = b = c = d = f = 0 ; }
te	6	public void assemble ( Widget widget ) { System . out . println ( "A Widget! Easy!" ) ; }
te	10	public void setAxisOrientation ( Orientations orientation ) { if ( axisOrientation == orientation ) return ; axisOrientation = orientation ; switch ( axisOrientation ) { case HORIZONTAL : labelOrientation = Orientations . HORIZONTAL ; reversed = false ; break ; case VERTICAL : labelOrientation = Orientations . VERTICAL ; reversed = true ; break ; } resize ( ) ; repaint ( ) ; }
te	2	protected void setRange ( int bombRange ) { this . bombRange = bombRange ; }
te	7	public void paint ( Graphics2D pen , double heading ) { myView . paint ( pen , myCenter , mySize , heading ) ; }
te	10	@ Override public Message decode ( String message ) { String [ ] tokens = message . split ( " " ) ; id = Integer . parseInt ( tokens [ 1 ] ) ; return this ; }
te	5	public int parseMainServerMessage ( String message ) { return clientProtocol . parseProtocolMessage ( message ) ; }
te	3	public List < long > getStudentGroupIds ( ) { return studentGroupIds ; }
te	4	public void start ( ) { if ( timerOn ) timer . startTimer ( ) ; }
te	3	public void setDescription ( String description ) { this . description = description ; }
te	10	public GraphComparator ( String path , boolean ascending , boolean numeric ) throws IOException , SyntaxException { ipath = new Path ( path ) ; asc = ascending ; this . numeric = numeric ; this . path = path ; }
te	6	@ Override public String toString ( ) { return "[x = " + x + "][y = " + y + "][length = " + getLength ( ) + "]" ; }
te	7	public OutOfCoordinatesException ( String message , Throwable cause , boolean enableSuppression , boolean writableStackTrace ) { super ( message , cause , enableSuppression , writableStackTrace ) ; }
te	6	public void setPosition ( Translate p ) { setPosition ( p . getX ( ) , p . getY ( ) , p . getZ ( ) ) ; }
te	9	private void write ( int integer , int width ) throws JSONException { try { this . bitwriter . write ( integer , width ) ; if ( probe ) { log ( integer , width ) ; } } catch ( Throwable e ) { throw new JSONException ( e ) ; } }
te	8	public Wizard ( Frame owner ) { wizardModel = new WizardModel ( ) ; wizardDialog = new JDialog ( owner ) ; initComponents ( ) ; }
te	4	@ Before public void setUp ( ) { instance = new BSTOrderedDictionary ( ) ; }
te	7	protected BuffRangeGraphic ( ContentPane parent , Game game , Point position ) { super ( game , position ) ; this . parent = parent ; }
te	2	public boolean isGerouPatente ( ) { return gerouPatente ; }
te	3	public boolean startsWithOK ( ) { if ( len < 2 ) return false ; return array [ 0 ] == 111 && array [ 1 ] == 107 ; }
te	8	@ Override protected void configure ( ) { bind ( ITask . class ) . to ( Task . class ) ; bind ( ITaskService . class ) . to ( TaskService . class ) ; }
te	7	private void addEnumerationRunnerActions ( final JButton button , final EnumerationRunner r ) { button . addActionListener ( new OnClickEnumerationExecutionButton ( button , r ) ) ; }
te	6	public < A extends Annotation > Field [ ] annotationFields ( class < A > anno ) { return annotationFields ( anno , Object . class ) ; }
te	8	public EntityOperations ( ) { for ( Operation operataion : Operation . values ( ) ) { operations . put ( operataion , new ArrayList < JaxrsResource > ( ) ) ; } }
te	9	public OptionSet addOption ( String key , Options . Separator separator , Options . Multiplicity multiplicity ) { return addOption ( key , false , separator , true , multiplicity ) ; }
te	2	public void setAudit ( boolean audit ) { this . audit = audit ; }
te	1	public NotAllowedWhileRunning ( ) { super ( "Action not allowed while running process." ) ; }
te	10	@ Test public void testPostOrder ( ) { Integer [ ] postOrder = { 8 , - 10 , 15 , 10 } ; Object [ ] retornoPostOrder ; tree . insert ( 10 ) ; tree . insert ( - 10 ) ; tree . insert ( 8 ) ; tree . insert ( 15 ) ; retornoPostOrder = tree . postOrder ( ) ; Arrays . equals ( postOrder , retornoPostOrder ) ; }
te	2	public StoreCourseRequests createStoreCourseRequests ( ) { return new StoreCourseRequests ( ) ; }
te	8	@ Test public void ShouldFindSumOfProperDivisorsFor284 ( ) { int toTest = 284 ; AmicablePairizer amicablePairizer = new AmicablePairizer ( ) ; int result = amicablePairizer . GetSumOfProperDivisors ( toTest ) ; assert . assertEquals ( 220 , result ) ; }
te	5	public String getDescription ( ) { return Dispatch . get ( this , "Description" ) . toString ( ) ; }
te	7	@ Override public boolean addComplexObject ( String id , Composition c ) { return delegate . addComplexObject ( id , c ) ; }
te	7	PacketFFKick ( DataInputStream in , PassthroughConnection ptc , KillableThread thread ) { super ( in , ptc , thread ) ; }
te	1	public FullListException ( ) { super ( "The roll is already full" ) ; }
te	1	public NullPlayer ( ) { }
te	1	public boolean hasChildNodes ( ) { return false ; }
te	7	public Variable ( final Name name , final Optional < Tree > type , final Optional < Tree > initializer ) { super ( name ) ; this . type = type ; this . initializer = initializer ; }
te	9	public Pin ( Gate gate , String name , int position ) { this . gate = gate ; this . name = name ; this . position = position ; nets = new LinkedList < Net > ( ) ; }
te	2	public boolean getIsPropose ( ) { return this . isPropose ; }
te	1	public FreeFormParser ( ) { }
te	6	public static MySQLConnectionPool getInstance ( ) throws ConnectionException , DataStoreException , NotConfiguredException { if ( instance == null ) { instance = new MySQLConnectionPool ( ) ; } return instance ; }
te	2	public long getRunTime ( ) { return runTime ; }
te	6	public Party getEnemyParty ( int level ) { subFactory = new EnemyFactory ( ) ; Party party = subFactory . getEnemyParty ( level ) ; return party ; }
te	10	private String getNextLine ( ) throws IOException { if ( ! this . linesSkiped ) { for ( int i = 0 ; i < skipLines ; i ++ ) { br . readLine ( ) ; } this . linesSkiped = true ; } String nextLine = br . readLine ( ) ; if ( nextLine == null ) { hasNext = false ; } return hasNext ? nextLine : null ; }
te	7	void print ( ) { for ( int i = 1 ; i <= heapSize ; i ++ ) System . out . print ( this . elements [ i ] + " " ) ; System . out . println ( ) ; }
te	8	public void translate ( Vector amount ) { setLocation ( getX ( ) + amount . getXChange ( ) , getY ( ) + amount . getYChange ( ) ) ; }
te	8	public boolean canAttackUnitGrouped ( Unit targetUnit , boolean checkCanTargetUnit , boolean checkCanIssueCommandType , boolean checkCommandibilityGrouped ) { return canAttackUnitGrouped_native ( pointer , targetUnit , checkCanTargetUnit , checkCanIssueCommandType , checkCommandibilityGrouped ) ; }
te	9	public Condition lessThan ( @ NotNull Value < Integer > value ) { return condition ( Operator . LESS , this , value ) ; }
te	5	public BigDecimal getBigDecimal ( int columnIndex ) throws SQLException { return rs . getBigDecimal ( columnIndex ) ; }
te	9	public static boolean hiiriPaalla ( Point p ) { return p . x >= X && p . x <= X + LEV && p . y >= Y && p . y <= Y + KOR ; }
te	3	public void setClusterRef ( ClusterRef clusterRef ) { this . clusterRef = clusterRef ; }
te	2	@ Override public int keySize ( ) { return 21 ; }
te	6	public void setGui_label ( String value ) { otapiJNI . MarketData_gui_label_set ( swigCPtr , this , value ) ; }
te	1	protected void initialize ( ) { }
te	2	public final void scale ( double sf ) { scale ( sf , sf ) ; }
te	10	private String extractTag ( String line , String preTag , String postTag ) throws IOException { String result = "" ; if ( line . startsWith ( preTag ) && line . endsWith ( postTag ) ) { result = line . replace ( preTag , "" ) ; result = result . replace ( postTag , "" ) ; return result ; } else { throw new IOException ( "Bad file format: No title" ) ; } }
te	6	public Door ( String name , Location destination , String description ) { this . name = name ; this . destination = destination ; this . description = description ; }
te	7	@ Override public String toString ( ) { return "{cards=" + cards + "  rank=" + rank + "  rating=" + rating + } ; }
te	4	public DialogConfiguracionSistema ( JFrame parent ) { super ( parent , true ) ; initComponents ( ) ; }
te	7	private static String format ( double v ) { final DecimalFormat df = new DecimalFormat ( "##0.0##" ) ; return StringUtils . leftPad ( df . format ( v ) , 6 ) ; }
te	8	private void initialiseSecondaryMacroBlocks ( ) throws BTFMatrixErrorException { sec_macro_blocks = new SecondaryMacroBlock [ macro_blocks . length - 1 ] ; for ( int h = 0 ; h < macro_blocks . length - 1 ; h ++ ) { newSecondaryMacroBlock ( h , macro_blocks [ h ] , macro_blocks [ h + 1 ] ) ; } }
te	6	public void removeModel ( AbstractPageModel model ) { registeredModels . remove ( model ) ; model . removePropertyChangeListener ( this ) ; }
te	6	@ Override public OSGiMetaData validate ( ) throws BundleException { OSGiMetaDataBuilder . validateMetadata ( this ) ; return this ; }
te	9	private static final boolean strongEquals ( final Entry [ ] array1 , final Entry [ ] array2 ) { final int size = Math . max ( array1 . length , array2 . length ) ; for ( int i = 0 ; i < size ; ++ i ) { if ( array1 [ i ] != array2 [ i ] ) { return false ; } } return true ; }
te	9	public void seleccionarAnteriorPista ( ) { int filas = listado . getRowCount ( ) ; if ( aleatorio ) filaSeleccionada = new Random ( ) . nextInt ( ) % filas ; else filaSeleccionada -- ; if ( filaSeleccionada < 0 ) filaSeleccionada = filas - 1 ; listado . setRowSelectionInterval ( filaSeleccionada , filaSeleccionada ) ; }
te	1	public TranslationActionEventHandler ( ) { ; }
te	5	void writeClassId ( short classId ) { switch ( classIntType ) { case byte : this . writeByte ( ( byte ) classId ) ; break ; default : this . writeShort ( classId ) ; break ; } }
te	3	public CheckedException ( String customMessage ) { this . customMessage = customMessage ; }
te	2	public int getType ( ) { return type ; }
te	8	private void init ( int width , int height ) { setTitle ( this . getName ( ) + " " + width + "x" + height ) ; cameraImage = new BufferedImage ( width , height , BufferedImage . TYPE_INT_RGB ) ; }
te	8	@ Override public Decision decide ( State s ) { if ( sample_size < 0 ) return decideByAssumption ( s ) ; else return decideBySampling ( s ) ; }
te	10	public JSONObject ( JSONObject jo , String [ ] names ) { this ( ) ; for ( int i = 0 ; i < names . length ; i += 1 ) { try { putOnce ( names [ i ] , jo . opt ( names [ i ] ) ) ; } catch ( Exception ignore ) { } } }
te	6	public final CC sizeGroupX ( String s ) { hor . setSizeGroup ( s ) ; return this ; }
te	8	public void Move ( Point from , Point Cord ) { pxSel = from ; if ( isMyMove != getSelFigure ( ) . isWhite ) return ; getSelFigure ( ) . Move ( Cord ) ; isMyMove = ! isMyMove ; }
te	6	public boolean optBoolean ( int index , boolean defaultValue ) { try { return this . getBoolean ( index ) ; } catch ( Exception e ) { return defaultValue ; } }
te	3	public boolean cancelAddon ( ) { return cancelAddon_native ( pointer ) ; }
te	10	public int checkBGCollision ( double xofs , double yofs ) { double oldx = x , oldy = y ; x += xofs ; y += yofs ; JGRectangle bbox = getTileBBox ( ) ; x = oldx ; y = oldy ; if ( bbox == null ) return 0 ; return checkBGCollision ( bbox ) ; }
te	10	public static < A , B > Map < A , B > map ( Object ... objects ) { if ( objects == null ) { return null ; } Map < A , B > map = new LinkedHashMap < A , B > ( objects . length / 2 ) ; for ( int i = 0 ; i < objects . length ; i += 2 ) { map . put ( ( A ) objects [ i ] , ( B ) objects [ i + 1 ] ) ; } return map ; }
te	4	public ClassicPlayer1TransitState ( ClassicMode classicMode ) { this . mode = classicMode ; }
te	8	private void carregaComentaris ( ) { Comentari c = new Comentari ( ) ; c . setId ( new ComentariId ( "Palace" , "3" , new Date ( ) ) ) ; session . saveOrUpdate ( c ) ; }
te	6	private int getInteger ( int min , int max ) { int flag = r . nextInt ( max - min + 1 ) + min ; return flag ; }
te	10	@ Override protected void setup ( ) { final Mine mine = new Mine ( ) ; final Strategy mineAction = new Strategy ( mine , mine ) ; provide ( mineAction ) ; final Banking bank = new Banking ( ) ; final Strategy bankAction = new Strategy ( bank , bank ) ; provide ( bankAction ) ; }
te	9	public void search ( String [ ] searchWords ) { String [ ] [ ] newData = register . search ( searchWords ) ; if ( newData != null && newData . length > 0 ) { mainWindow . setCardTableData ( newData ) ; mainWindow . setMessage ( "Haun tulokset" , false ) ; } else { mainWindow . setMessage ( "Haku ei tuottanut tuloksia." , false ) ; } }
te	2	public byte getGpioOut ( ) { return gpio [ 1 ] ; }
te	1	public Factory ( ) { }
te	4	public EDASOMINDTableCellRenderer ( DataHolder dh ) { dataholder = dh ; }
te	8	@ Override public boolean accept ( File f ) { return f . isDirectory ( ) || f . getName ( ) . toLowerCase ( ) . endsWith ( ".hex" ) ; }
te	3	private ButtonGroup getOB_Gender ( ) { if ( OB_Gender == null ) { OB_Gender = new ButtonGroup ( ) ; } return OB_Gender ; }
te	1	public SelectCountByYmdFromTurn ( ) { }
te	7	public static boolean removeGroup ( String name ) { if ( existGroup ( name . toLowerCase ( ) ) ) { groups . remove ( name . toLowerCase ( ) ) ; return true ; } return false ; }
te	9	private void aloitustilanKorostettavatElementit ( Point p ) { PelinAloittaja . korosta = PelinAloittaja . hiiriPaalla ( p ) ; LataaVanha . korosta = LataaVanha . hiiriPaalla ( p ) ; ValkoisenValinta . korosta = ValkoisenValinta . hiiriPaalla ( p ) ; MustanValinta . korosta = MustanValinta . hiiriPaalla ( p ) ; }
te	7	public void setOperateButton ( ) { clearButton ( ) ; addButton ( "\u64A4\u9500" , ID_BUTTON_UNDO ) ; addButton ( "\u4FDD\u5B58" , ID_BUTTON_SAVE ) ; addButton ( "\u6807\u9898" , ID_BUTTON_TITLE ) ; calcButton ( ) ; }
te	6	@ Override public int hashCode ( ) { final int prime = 31 ; int result = 1 ; result = prime * result + ( ( id == null ) ? 0 : id . hashCode ( ) ) ; result = prime * result + ( ( name == null ) ? 0 : name . hashCode ( ) ) ; return result ; }
te	10	@ Test public void testTerra ( ) { cella = new Terra ( ) ; assertEquals ( "Terra" , cella . toString ( ) ) ; assertEquals ( 0 , cella . getValoreAttuale ( ) ) ; assertNull ( cella . getIdDelDinosauro ( ) ) ; assertNull ( cella . getCellaSuCuiSiTrova ( ) ) ; }
te	6	public void setVariables ( Object value , boolean isSelected , int row , int column ) { this . value = value ; this . isSelected = isSelected ; this . row = row ; this . column = column ; }
te	8	private void meterViewTableMouseClicked ( java . awt . event . MouseEvent evt ) { if ( evt . getClickCount ( ) > 1 ) { openViewMeterPanel ( ) ; } }
te	1	public TList ( ) { }
te	9	public RPCCallableMethod getRegistrationFor ( String serviceName , String methodName ) { HashMap < String , RPCCallableMethod > value = map . get ( serviceName ) ; if ( value == null ) { return null ; } return value . get ( methodName ) ; }
te	3	public UUID getID ( ) { return fID ; }
te	8	private void bntForwardActionPerformed ( java . awt . event . ActionEvent evt ) { i ++ ; btnPesquisarActionPerformed ( evt ) ; }
te	6	public FfmpegFileInfo ( int w , int h , double frameRate , double duration , long noFrames ) { this . w = w ; this . h = h ; this . frameRate = frameRate ; this . duration = duration ; this . noFrames = noFrames ; }
te	10	public boolean equals ( Object obj ) { if ( ! ( obj instanceof Kim ) ) { return false ; } Kim that = ( Kim ) obj ; if ( this == that ) { return true ; } if ( this . hashcode != that . hashcode ) { return false ; } return java . util . Arrays . equals ( this . bytes , that . bytes ) ; }
te	3	public Armor getPersonalArmor ( ) { return personalArmor ; }
te	3	public TxnTypeType getTxnType ( ) { return txnType ; }
te	2	public EvoStrategy ( int mutants ) { this . mutants = mutants ; }
te	2	public String getQuestionTypeString ( ) { return "Question-Response" ; }
te	7	private AST lookup ( AST t ) { return ( AST ) ( symtab . get ( ( ( IdTree ) t ) . getSymbol ( ) ) ) ; }
te	5	public final void setPackHeight ( BoundSize size ) { packH = size != null ? size : BoundSize . NULL_SIZE ; }
te	9	public void setTileAndMetadata ( int x , int y , Tile tile , TileMetadata m ) { setTile ( x , y , tile ) ; setMetadata ( x , y , m ) ; }
te	9	public vslMMBackend ( ) throws vslConfigException , vslStorageException { dbname = vsl . getConfig ( ) . getString ( DBFILE ) ; init ( ) ; }
te	5	@ GenerateMicroBenchmark public String fourStringBuilderSized128Char ( ) { return fourStringBuilderSized ( s [ 7 ] , 384 ) ; }
te	6	public Expression ( Expression ... expressions ) { this ( ) ; for ( Expression expr : expressions ) this . clauses . addAll ( expr . getClauses ( ) ) ; }
te	6	@ Override public void accountChanged ( String id ) throws IOException { handler . accountChanged ( id ) ; }
te	10	@ Override public void finished ( final NetTrainer trainer ) { System . out . println ( "final validation error: " + trainer . getValidationError ( ) ) ; minerror = double . MAX_VALUE ; }
te	10	public void initObject ( ) { jTableResult = new TabPanel ( ) ; jTableResult . getTableau ( ) . setAutoCreateRowSorter ( true ) ; DefaultTableCellRenderer rendererKrac = new ObjectRenderer ( ) ; jTableResult . getTableau ( ) . setDefaultRenderer ( Object . class , rendererKrac ) ; }
te	8	private void readObject ( ObjectInputStream in ) throws IOException , ClassNotFoundException { login = ( String ) in . readObject ( ) ; password = ( String ) in . readObject ( ) ; }
te	5	public void drawCharacter ( char c , int x , int y ) { imp . drawCharacter ( c , x , y ) ; }
te	2	public final short getX ( ) { return x ; }
te	4	@ Override public Sender produce ( ) { return new MailSender ( ) ; }
te	2	public byte [ ] getBuffer ( ) { return buffer ; }
te	3	public int getRowCount ( ) { if ( pluginList == null ) { return 0 ; } else { return pluginList . size ( ) ; } }
te	3	public Tym getTym ( ) { return tym ; }
te	8	@ XmlElementDecl ( namespace = "http://ssc.spdf.gsfc.nasa.gov/" , name = "getPrivacyAndImportantNoticesResponse" ) public JAXBElement < GetPrivacyAndImportantNoticesResponse > createGetPrivacyAndImportantNoticesResponse ( GetPrivacyAndImportantNoticesResponse value ) { return new JAXBElement < GetPrivacyAndImportantNoticesResponse > ( _GetPrivacyAndImportantNoticesResponse_QNAME , GetPrivacyAndImportantNoticesResponse . class , null , value ) ; }
te	6	private void filedModelActionPerformed ( java . awt . event . ActionEvent evt ) { }
te	1	public int statBoost ( ) { return 0 ; }
te	8	@ Override public T visitBin_op ( @ NotNull DecafParser . Bin_opContext ctx ) { return visitChildren ( ctx ) ; }
te	3	public void setBtSalvar ( JButton btSalvar ) { this . btSalvar = btSalvar ; }
te	7	private void write ( Kim kim , Huff huff ) throws JSONException { write ( kim , 0 , kim . length , huff ) ; }
te	2	public SendGUI ( ) { initComponents ( ) ; }
te	5	public int indexOfAnimation ( Animation animation ) { return animations . indexOf ( animation ) ; }
te	8	private ClassFile . MethodRefConstant readMethodRefConstant ( ) throws IOException { int classIndex = dis . readUnsignedShort ( ) ; int nameAndTypeIndex = dis . readUnsignedShort ( ) ; return new ClassFile . MethodRefConstant ( classIndex , nameAndTypeIndex ) ; }
te	10	@ Test public void addNullKey ( ) { BinarySearchTree < Integer , Integer > b = new BinarySearchTree < Integer , Integer > ( ) ; try { b . add ( null , 2 ) ; fail ( IllegalArgumentException . class ) ; } catch ( IllegalArgumentException e ) { } catch ( Exception e ) { fail ( IllegalArgumentException . class , e ) ; } }
te	10	TreapNode ( AnyType theElement , TreapNode < AnyType > < , TreapNode < AnyType > rt ) { element = theElement ; left = < ; right = rt ; priority = randomObj . randomInt ( ) ; }
te	10	@ Test public void testEmptyArraySort ( ) { Integer [ ] arrayInt = new Integer [ ] { } ; assert . assertTrue ( 0 == arrayInt . length ) ; assert . assertEquals ( "[]" , toShow ( arrayInt ) ) ; mergesort . sort ( arrayInt ) ; assert . assertEquals ( "[]" , toShow ( arrayInt ) ) ; }
te	8	@ XmlElementDecl ( namespace = "" , name = "sid" ) public JAXBElement < String > createSid ( String value ) { return new JAXBElement < String > ( _Sid_QNAME , String . class , null , value ) ; }
te	6	private void areasComboMouseClicked ( java . awt . event . MouseEvent evt ) { }
te	8	public void add ( int x , int y , int z , int r , double v ) { list . add ( new MatrixEntry ( x , y , z , r , v ) ) ; }
te	4	public static void setInterGestionVelos ( InterfaceAdminGestionVelos f ) { interGestionVelos = f ; }
te	1	public Payment_CLI ( ) { }
te	9	private void jTextField1ActionPerformed ( java . awt . event . ActionEvent evt ) { executeCommand ( jTextField1 . getText ( ) ) ; }
te	3	@ Override public String getName ( ) { return "Exhaustive Inference" ; }
te	7	public GTFSStop ( String gtfsId , String code , double lat , double lon , String name ) { super ( gtfsId , code , lat , lon , name ) ; }
te	7	public double getColemanLiau ( ) { double score = ( 5.89 * characters / words ) - ( 30 * sentences / words ) - 15.8 ; return Utilities . round ( score , 3 ) ; }
te	2	public int getNSB ( ) { return NumberOfShareBought ; }
te	6	public void setDate ( Date x ) throws SQLException { this . ps . setDate ( parameterIndex ++ , x ) ; }
te	5	public void setInterface ( int ifno , int alt ) throws IOException { throw new USBException ( "setInterface (unimplemented)" , 0 ) ; }
te	1	public boolean LMBDown ( ) { return LMBDown ; }
te	3	public synchronized void xsetR1InitialDelay ( int a ) { r1ID = a ; }
te	4	public static Command waitAngle ( short angle ) { return WaitCommand . waitAngle ( angle ) ; }
te	1	public boolean recibioDisparo ( ) { return recibioDisparo ; }
te	4	public ArrowTypeNode ( ) { this . parTypes = new ArrayList < Node > ( ) ; }
te	4	@ Override public int hashCode ( ) { int hash = 0 ; hash += ( idDocument != null ? idDocument . hashCode ( ) : 0 ) ; return hash ; }
te	4	public class getColumnClass ( int c ) { return getValueAt ( 0 , c ) . getClass ( ) ; }
te	2	public void setProbDist ( double probDist ) { this . probDist = probDist ; }
te	6	@ Override public void exitOpBin ( @ NotNull EnquantoParser . OpBinContext ctx ) { }
te	8	public void sort ( ) { int [ ] secondArray = new int [ 10001 ] ; for ( int number : array ) { secondArray [ number ] ++ ; } for ( int i = 0 ; i < 10001 ; i ++ ) { System . out . println ( i + " " + secondArray [ i ] ) ; } }
te	7	@ Override public void addToAnalyzedDocuments ( IResultSet myResultSet ) { this . analyzedDocuments . add ( ( ResultSet ) myResultSet ) ; }
te	1	public int recordLength ( ) { return recordLength ; }
te	4	@ Override public ATN getATN ( ) { return _ATN ; }
te	9	@ FXML void start ( ActionEvent event ) { startButton . setDisable ( true ) ; setMapCenter ( 54.92082843149136 , 23.829345703125 ) ; mac . startMoving ( null ) ; }
te	6	public Anim ( ) { setPreferredSize ( new Dimension ( width , height ) ) ; setDoubleBuffered ( true ) ; }
te	1	protected HttpMessageEncoder ( ) { super ( ) ; }
te	10	public static < TSource > void forEachWithIndex ( Iterable < TSource > iterable , Action2 < TSource , Integer > act ) { int index = 0 ; for ( TSource tSource : iterable ) { act . call ( tSource , index ++ ) ; } }
te	8	public static void main ( String [ ] args ) { int [ ] A = { - 3 , 0 , 1 , - 2 } ; System . out . println ( maxProduct ( A ) ) ; }
te	5	@ Id @ Column ( name = "person_id" ) public int getPersonId ( ) { return personId ; }
te	10	public void set ( int x , int y , class < ? extends ATile > type ) { if ( x < sizeX && y < sizeY ) { map . put ( new Point ( x , y ) , type ) ; } }
te	1	public void update ( ) { }
te	2	public DriverLogin ( ) { initComponents ( ) ; }
te	2	public void setIdlinea ( int idlinea ) { this . idlinea = idlinea ; }
te	3	public JobConf getJobConf ( ) { return jobConf ; }
te	8	public static ExchangeCoins getExchangeCoins ( Integer quantity ) throws IOException , JSONException , CustomException { if ( quantity < 10000 ) { throw new CustomException ( "Quantity too low." ) ; } return new ExchangeCoins ( jGW2API . getExchangeCoins ( quantity ) ) ; }
te	5	public void endTabbing ( ) { players . get ( indexOfCurrentPlayer ) . cancelTabbing ( ) ; }
te	1	public void function ( ) { }
te	6	@ Override public UrlBuilder fragment ( String fragment , String encoding ) { addFragment ( fragment , encoding ) ; return this ; }
te	2	public int getIdCategory ( ) { return id_category ; }
te	3	public void setInternal ( T internal ) { this . internal = internal ; }
te	9	public boolean intersectsWith ( Timeslot otherTimeslot ) { if ( otherTimeslot == null ) { return false ; } if ( this . day != otherTimeslot . getDay ( ) ) { return false ; } if ( this . endTime <= otherTimeslot . getStartTime ( ) ) { return false ; } else if ( this . startTime >= otherTimeslot . getEndTime ( ) ) { return false ; } else { return true ; } }
te	6	@ Override public void clear ( ) { setIdIsSet ( false ) ; this . id = 0 ; this . name = null ; this . screen_name = null ; }
te	10	public int getTotalScore ( Map < String , Integer > virusMatches ) { int totalScore = 0 ; for ( String virus : virusMatches . keySet ( ) ) { totalScore += getScore ( virus , virusMatches . get ( virus ) ) ; } return totalScore ; }
te	9	public Poly mult ( Poly q ) { double [ ] prod = new double [ q . p . length + p . length - 1 ] ; for ( int i = 0 ; i < q . p . length ; i ++ ) { double v = q . p [ i ] ; for ( int j = 0 ; j < p . length ; j ++ ) { prod [ i + j ] += p [ j ] * v ; } } return new Poly ( prod ) ; }
te	5	public DefaultMessage [ ] getMessages ( ) { return messages . toArray ( new DefaultMessage [ messages . size ( ) ] ) ; }
te	7	public void testDecValue ( ) { Square s = new Square ( ) ; assertTrue ( s . getValue ( ) == 0 ) ; s . incValue ( ) ; s . incValue ( ) ; s . decValue ( ) ; assertTrue ( s . getValue ( ) == 1 ) ; }
te	7	public WindowImp newWindowImp ( String title , Window w ) { return new SwingWindow ( title , w ) ; }
te	1	public double height ( ) { return this . height ; }
te	9	public static long getTimeMsOfInsert ( List list ) { Date start = new Date ( ) ; insert10000 ( list ) ; Date end = new Date ( ) ; long time = end . getTime ( ) - start . getTime ( ) ; return time ; }
te	6	public void addNeighbour ( Country neighbour ) { if ( neighbours == null ) { neighbours = new LinkedList < Country > ( ) ; } this . neighbours . add ( neighbour ) ; }
te	4	public boolean contains ( int pentagonal ) { computeUpTo ( pentagonal ) ; return set . contains ( pentagonal ) ; }
te	4	public SimpleProcess ( ProcessAction pa ) { daemon = false ; this . pa = pa ; }
te	5	public Coord random_offset_ip ( double max ) { return add ( random ( max ) ) ; }
te	3	public void setExp5 ( String exp5 ) { this . exp5 = exp5 ; }
te	1	public SingleLinkedListNode ( ) { }
te	10	@ Override public ByteBuffer createBinaryFrame ( Framedata framedata ) { if ( framedata . getOpcode ( ) == Opcode . CLOSING ) return ByteBuffer . wrap ( closehandshake ) ; return super . createBinaryFrame ( framedata ) ; }
te	7	public CommandNotFoundException ( String arg0 , Throwable arg1 , boolean arg2 , boolean arg3 ) { super ( arg0 , arg1 , arg2 , arg3 ) ; }
te	2	public boolean getFirstRunWizardDone ( ) { return firstRunWizardDone ; }
te	5	public SoundSource play ( ) { AL10 . alSourcePlay ( source ) ; return this ; }
te	1	public FollowState ( ) { super ( ) ; }
te	6	public int getPixel ( int x , int y ) { if ( y * mWidth + x >= mRawImage . length ) return 0 ; return mRawImage [ y * mWidth + x ] ; }
te	6	@ Override public void mousePressed ( MouseEvent e ) { parent . parent . userSelectingLocation = true ; }
te	9	protected boolean examine ( ) { if ( this . map != null ) { System . out . println ( "A wooden mailbox in front of the house.\nThere appears to be a map in the mail box." ) ; Game . player . inventory . add ( this . map ) ; this . map = null ; System . out . println ( "You found a map and placed it in your inventory." ) ; } else { System . out . println ( "An empty wooden mailbox in front of the house." ) ; } return true ; }
te	6	public String readString ( ) throws IOException { check ( ) ; return strings . removeFirst ( ) ; }
te	10	public static int [ ] shellSort ( int [ ] arr ) { arrTemp = arr . clone ( ) ; int dis = arrTemp . length ; while ( true ) { dis = dis / 2 ; for ( int x = 0 ; x < dis ; x ++ ) { for ( int i = x + dis ; i < arrTemp . length ; i = i + dis ) { int temp = arrTemp [ i ] ; int j ; for ( j = i - dis ; j >= 0 && arrTemp [ j ] > temp ; j = j - dis ) { arrTemp [ j + dis ] = arrTemp [ j ] ; } arrTemp [ j + dis ] = temp ; } } if ( dis == 1 ) { break ; } } return arrTemp ; }
te	7	private void init ( int size ) { capacity = size ; data = new Object [ capacity + 1 ] ; value = new double [ capacity + 1 ] ; value [ 0 ] = maxPriority ; data [ 0 ] = null ; }
te	10	private static Object [ ] subseq2 ( Object [ ] ary , int lo , int hi ) { if ( lo >= hi ) return null ; else { int ary_nkeys = ary . length >> 1 ; int nkeys = hi - lo ; Object [ ] a = new Object [ nkeys << 1 ] ; for ( int i = 0 ; i < nkeys ; ++ i ) { a [ i ] = ary [ i + lo ] ; a [ i + nkeys ] = ary [ i + lo + ary_nkeys ] ; } return a ; } }
te	4	private boolean r_mark_DA ( ) { if ( ! r_check_vowel_harmony ( ) ) { return false ; } if ( find_among_b ( a_6 , 4 ) == 0 ) { return false ; } return true ; }
te	8	@ Override public boolean equals ( Object o ) { if ( this == o ) return true ; if ( ! ( o instanceof Coordinates ) ) return false ; Coordinates that = ( Coordinates ) o ; if ( ! latitude . equals ( that . latitude ) ) return false ; if ( ! longitude . equals ( that . longitude ) ) return false ; return true ; }
te	1	public void disposePanel ( ) { }
te	9	@ Override public void validate ( ) { if ( sitename == null ) { addActionError ( "Please Enter Site Name" ) ; } if ( siteurl == null && siteurl . equals ( "http://" ) ) { addActionError ( "Please Enter Web Site Url" ) ; } if ( txtcolor == null ) { addActionError ( "Please Enter Text Color" ) ; } if ( bgcolor == null ) { addActionError ( "Please Enter Background Color" ) ; } if ( catgry . equals ( "Please select" ) ) { addActionError ( "Please Select a Category" ) ; } }
te	2	public boolean isIncrementing ( ) { return incrementing ; }
te	10	public JSONArray toJSONArray ( JSONArray names ) throws JSONException { if ( names == null || names . length ( ) == 0 ) { return null ; } JSONArray ja = new JSONArray ( ) ; for ( int i = 0 ; i < names . length ( ) ; i += 1 ) { ja . put ( this . opt ( names . getString ( i ) ) ) ; } return ja ; }
te	10	public Imagem clone ( ) { Imagem clone = new Imagem ( width , height ) ; for ( int y = 0 ; y < getHeight ( ) ; y ++ ) { for ( int x = 0 ; x < getWidth ( ) ; x ++ ) { clone . setPixel ( x , y , getPixel ( x , y ) ) ; } } return clone ; }
te	7	public EditActivityPropertiesScreen ( ApplicationUI appUI , Screen source , Activity activity ) { super ( appUI ) ; this . source = source ; this . activity = activity ; }
te	8	@ Override public ComplexValue divide ( ComplexValue a ) { double n = ( a . re * a . re + a . im * a . im ) ; return new ComplexValue ( ( cv . re * a . re + cv . im * a . im ) / n , ( cv . im * a . re - cv . re * a . im ) / n ) ; }
te	10	public HardCodedMapObjectSource ( File workingDir ) { model = new Hashtable < String , Object > ( ) ; File dir = new File ( workingDir , "RpgMapObjects" ) ; model . put ( "RpgMapObjects" , getModelForDir ( dir ) ) ; }
te	6	public float length ( ) { final float length2 = . ( ) ; if ( length2 != 0 && Math . abs ( length2 - 1 ) > Tolerance . null ) { return ( float ) Math . sqrt ( length2 ) ; } return length2 ; }
te	9	public static < K , T > Map < K , T > runIdempotentJobsWithRetries ( ExecutorService es , Map < K , ? extends Callable < T >> tasks , final int maxRounds ) { return runIdempotentJobsWithRetries ( es , tasks , maxRounds , null ) ; }
te	3	public String getH2 ( ) { return h2 ; }
te	4	public void update ( Graphics g ) { paint ( g ) ; }
te	1	public DisableLimitsCommand ( ) { }
te	6	public void addAll ( Collection < ? extends PersonalData > values ) { if ( values != null ) for ( PersonalData data : values ) { add ( data ) ; } }
te	1	protected float getDefault ( ) { return ( float ) 0.5 ; }
te	5	@ Override public FileFilter createFileFilter ( ) { return new ResultFileFilter ( "TRer_validation_" + a_threshhold ) ; }
te	10	public TBlock getMovingBlock ( ) { TBlock movingBlk = null ; for ( TBlock blk : blks ) { String className = blk . getClass ( ) . getName ( ) ; if ( className . indexOf ( "TBlock_A" ) < 0 ) { movingBlk = blk ; break ; } } return movingBlk ; }
te	6	private void replaceTop ( Scope topOfStack ) { stack . set ( stack . size ( ) - 1 , topOfStack ) ; }
te	10	@ Override public boolean update ( Book object ) { Transaction updateTransaction = session . beginTransaction ( ) ; session . merge ( object ) ; updateTransaction . commit ( ) ; return true ; }
te	8	public void callback ( Number latC , Number lonC ) { CoordinatesUtils . getInstance ( ) . setMapCenterZoom ( lonC . doubleValue ( ) , latC . doubleValue ( ) , 7 ) ; }
te	5	public Object getInfo ( Object key ) { return info . get ( key ) ; }
te	1	public StudioTest ( ) { }
te	4	public void setUnitOfMeasure ( String value ) { this . unitOfMeasure = value ; }
te	7	@ Override public void update ( ArrayList < Object > item ) { pr_dao . updateItem ( item ) ; }
te	8	public int method384 ( String s ) { if ( s == null ) return 0 ; int j = 0 ; for ( int k = 0 ; k < s . length ( ) ; k ++ ) j += anIntArray1496 [ s . charAt ( k ) ] ; return j ; }
te	6	public Morpha ( java . io . InputStream in ) { this ( new java . io . InputStreamReader ( in ) ) ; }
te	2	public boolean isSplitting ( ) { return split ; }
te	6	@ Override public ListIterator < Giocatore > listIterator ( int arg0 ) { throw new UnsupportedOperationException ( ) ; }
te	2	public void setDuracion ( float mDuracion ) { this . mDuracion = mDuracion ; }
te	6	@ Test public void testSimpleElement ( ) { Quicksort sorter = new Quicksort ( ) ; int [ ] test = { 7 , 1 , 4 , 3 , 5 } ; sorter . sort ( test ) ; }
te	5	public Ability ( String name , ImageIcon iconSprite ) { }
te	10	@ Override public synchronized void requestNextPlayerEvent ( ) { for ( GameStatusUpdateListener g : listeners ) { try { g . requestNextPlayerEvent ( ) ; } catch ( RuntimeException e ) { logger . warn ( e . getMessage ( ) , e ) ; } } }
te	9	public static final void warn ( final String txt ) { System . err . println ( Levels . WARN . getTitle ( ) + " " + txt ) ; }
te	8	public static void main ( String [ ] args ) throws NoSuchAlgorithmException , UnsupportedEncodingException { Client c = new Client ( "jojo" , "jojo" ) ; c . recevoirMessageConversationAbsence ( ) ; }
te	4	public void setLOGGING_TIME ( DATE lOGGING_TIME ) { LOGGING_TIME = lOGGING_TIME ; }
te	8	static public IntSet fromUnsorted ( int [ ] array , int num , int room ) { IntSet temp = new IntSet ( num + room ) ; temp . num = makeSorted ( array , num , temp . keys ) ; return temp ; }
te	2	public boolean isCached ( ) { return this . cached ; }
te	8	@ Test public void whenGameStartsBothPlayersHaveZeroScore ( ) { new GameBoard ( display ) ; verify ( display ) . display ( anyString ( ) , = ( PLAYER_1 + ": 0  " + PLAYER_2 + ": 0" ) ) ; }
te	6	private void jButton2ActionPerformed ( java . awt . event . ActionEvent evt ) { }
te	4	public void setFrame ( Frame frame ) { enclosure = frame ; }
te	6	@ Override public CallInfo getCallInfo ( String call ) throws Exception { throw new Exception ( "Not implemented" ) ; }
te	10	protected void setPoints ( double [ ] coords , int nump ) { for ( int i = 0 ; i < nump ; i ++ ) { Vertex vtx = pointBuffer [ i ] ; vtx . pnt . set ( coords [ i * 3 + 0 ] , coords [ i * 3 + 1 ] , coords [ i * 3 + 2 ] ) ; vtx . index = i ; } }
te	5	public static double cos ( double x ) { return COS_TABLE [ ( int ) ( x * COS_FACTOR ) & COS_MASK ] ; }
te	4	public Geometry getBone ( int v ) { if ( bones == null ) return null ; return bones [ v ] ; }
te	1	public SerieTest ( ) { }
te	6	Packet addTo ( Packet queue ) { link = null ; if ( queue == null ) return this ; Packet peek , next = queue ; while ( ( peek = next . link ) != null ) next = peek ; next . link = this ; return queue ; }
te	7	public static void printArray ( int [ ] a ) { for ( int i = 0 ; i < a . length ; i ++ ) { System . out . print ( a [ i ] + " " ) ; } }
te	7	private TreapNode < AnyType > rotateWithLeftChild ( TreapNode < AnyType > k2 ) { TreapNode < AnyType > k1 = k2 . left ; k2 . left = k1 . right ; k1 . right = k2 ; return k1 ; }
te	2	protected double getBreedingProbability ( ) { return breeding_probability ; }
te	4	public Callout_argContext callout_arg ( int i ) { return getRuleContext ( Callout_argContext . class , i ) ; }
te	1	World ( ) { }
te	6	@ Column ( length = 50 , nullable = false ) public String getLastName ( ) { return lastName ; }
te	10	protected boolean isAllWhiteSpace ( CharSequence sb ) { boolean result = true ; for ( int i = 0 ; i < sb . length ( ) ; i ++ ) { char c = sb . charAt ( i ) ; if ( ! Character . isWhitespace ( c ) ) { return false ; } } return result ; }
te	9	private void getMarkerActionPerformed ( java . awt . event . ActionEvent evt ) { GetMarkerFrame getMarkerFrame = new GetMarkerFrame ( ) ; getMarkerFrame . setVisible ( true ) ; }
te	5	private void syncPrefs ( ) { try { prefs . sync ( ) ; } catch ( BackingStoreException bse ) { } }
te	6	public boolean validParam ( DBMS toCheck ) { if ( dbTypes . contains ( DBMS . Other ) ) return true ; if ( dbTypes . contains ( toCheck ) ) return true ; return false ; }
te	3	public static Poseur getPoseur ( ) { if ( singleton == null ) { singleton = new Poseur ( ) ; } return singleton ; }
te	5	public void removeRow ( int row ) { datas . removeElementAt ( row ) ; fireTableRowsDeleted ( row , row ) ; }
te	9	private void bGameShowHintsItemStateChanged ( java . awt . event . ItemEvent evt ) { c . showHints = evt . getStateChange ( ) == 1 ; }
te	4	public void log ( String message ) { emulator . log ( message ) ; }
te	6	@ Override public int getHeight ( ) { return isOrange ? orange . getHeight ( null ) : blue . getWidth ( null ) ; }
te	7	private void init2 ( ) { setLocationRelativeTo ( null ) ; this . textValue_int . setDocument ( new IntegerDocument ( ) ) ; labelMensagem . setText ( "" ) ; }
te	4	public void setTriggers ( ArrayList < ITrigger > triggers ) { this . triggers = triggers ; }
te	3	public void setsAccNo ( String sAccNo ) { this . sAccNo = sAccNo ; }
te	3	public String getName ( ) { return name ; }
te	6	public void addAppearance ( VariableAppearance appearance ) { if ( ! appearances . contains ( appearance ) ) { appearances . add ( appearance ) ; } }
te	2	public GetAcknowledgementsResponse createGetAcknowledgementsResponse ( ) { return new GetAcknowledgementsResponse ( ) ; }
te	7	public Set < FactionMember > getMembersOfGroup ( String groupName ) { return this . storage . findMembersOfGroup ( groupName ) ; }
te	3	@ Override public void setEstado ( boolean estado ) { this . estado = estado ; }
te	6	private static void setMetaOp ( int op , String meta ) { opMetaNames [ op - META_OP_OFFSET ] = meta ; }
te	8	public static void main ( String [ ] args ) throws Exception { GigaTest1 . main ( null ) ; GigaTest2 . main ( null ) ; GigaTest3 . main ( null ) ; GigaTest4 . main ( null ) ; }
te	8	public static boolean comparePoints ( double pointA , double pointB ) { if ( Math . abs ( pointA . getX ( ) - pointB . getX ( ) ) < E ) { if ( Math . abs ( pointA . getY ( ) - pointB . getY ( ) ) < E ) { return true ; } } return false ; }
te	3	public String getXmlVersion ( ) { throw new UnsupportedOperationException ( "org.w3c.tidy.DOMDocumentImpl getXmlVersion() Not implemented" ) ; }
te	8	public Plot ( ) { super ( 70 , 50 , "plot" ) ; input = new InputConnector ( "u" , Component . Position . bottom ) ; register ( input ) ; reset ( ) ; }
te	10	private static String getNodeValue ( String strTag , Element eAuthor ) { Node nValue = ( Node ) eAuthor . getElementsByTagName ( strTag ) . item ( 0 ) . getFirstChild ( ) ; return nValue . getNodeValue ( ) ; }
te	8	private void formWindowOpened ( java . awt . event . WindowEvent evt ) { setLocationRelativeTo ( getParent ( ) ) ; }
te	5	public ComponentInput ( Component component ) { keyHandler = new ComponentKeyHandler ( component ) ; }
te	6	@ Override public void warning ( String s ) { checkLevel ( ) ; super . warning ( s ) ; redrawInput ( ) ; }
te	5	public SelfMap ( Iterable < T > self ) { this . self = toOrderedSet ( self ) ; }
te	4	@ Override public String generarCodigo ( ) { return "ldc.r4 " + this . valor + "\n" ; }
te	1	private ElementParser ( ) { }
te	5	protected void addParamConstraint ( String name , int type , boolean isOptional ) { this . addParamConstraint ( name , type , "" , isOptional ) ; }
te	2	public int getOpcionSeleccionada ( ) { return opcionSeleccionada ; }
te	7	public Disparo ( Punto unaPosicion ) { super ( 50 , unaPosicion ) ; setColor ( Color . CYAN ) ; this . posicion = unaPosicion ; }
te	6	public static void main ( String [ ] args ) { DuckSimulator2 dSimulator2 = new DuckSimulator2 ( ) ; dSimulator2 . simulate ( ) ; }
te	10	public int [ ] stringToIntArray ( String message ) { int i = 0 ; intArray = new int [ message . length ( ) ] ; for ( char c : message . toCharArray ( ) ) { intArray [ i ] = Character . digit ( c , 10 ) ; i ++ ; } return intArray ; }
te	6	@ Override public Object getProperty ( Object key ) { if ( property == null ) return null ; return property . get ( key ) ; }
te	8	@ Override public boolean equals ( Object o ) { if ( o == null ) return false ; if ( ! ( o instanceof Course ) ) return false ; Course c = ( Course ) o ; return c . velocityX == velocityX && c . velocityY == velocityY ; }
te	5	public String toString ( ) { return " at " + this . index + " [character " + this . character + " line " + this . line + "]" ; }
te	10	public String [ ] parse_measure_scale ( String dataEntry ) { StringTokenizer st = new StringTokenizer ( dataEntry , " " ) ; int numMeasureScales = st . countTokens ( ) ; String measureScales [ ] = new String [ numMeasureScales ] ; for ( int i = 0 ; i < numMeasureScales ; i ++ ) { measureScales [ i ] = st . nextToken ( ) ; } return measureScales ; }
te	3	public TreeLinkNode ( int x ) { this . val = x ; }
te	9	public DigitalOutputCommand ( boolean pin20 , boolean pin7 , boolean pin19 ) { byte pin = 00 ; if ( pin19 ) { pin = ( byte ) ( pin | 01 ) ; } if ( pin7 ) { pin = ( byte ) ( pin | 02 ) ; } if ( pin20 ) { pin = ( byte ) ( pin | 04 ) ; } setCommand ( new byte [ ] { ( byte ) OpCode . DIGITAL_OUTPUT . op ( ) , pin } ) ; }
te	2	long get ( ) { return value ; }
te	8	@ Override public String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( "{" ) ; if ( getAccountName ( ) != null ) sb . append ( "AccountName: " + getAccountName ( ) + " " ) ; if ( getPolicyName ( ) != null ) sb . append ( "PolicyName: " + getPolicyName ( ) ) ; sb . append ( "}" ) ; return sb . toString ( ) ; }
te	7	private void active ( ) { for ( MemcachedClient client : clients ) { try { client . getVersions ( ) ; } catch ( Exception e ) { } } }
te	6	public boolean equals ( Object obj ) { if ( obj instanceof boolean ) return ( java . lang . boolean ) obj == value ; else return false ; }
te	1	public Map ( ) { this ( 10 , 10 , 5 , 0.02 , 0 , 5 , 1 ) ; }
te	5	@ Before public void setUp ( ) { data = generate ( NUM ) ; }
te	7	public boolean updateMoveable ( int entity_id , int speed ) { if ( ! nodes . containsKey ( entity_id ) ) return false ; nodes . get ( entity_id ) . moveable . speed += speed ; return true ; }
te	5	int getDelay ( ) { return ( ( Integer ) delay . getValue ( ) ) . intValue ( ) ; }
te	10	public void testNormalization ( ) { String testMessageSuccess = "<request  version='1.0'  id='12345' >" + "  <signInRequest id='12345' >" + "    <user name='azafty' password='' />" + "  </signInRequest  >" + "</request  >" ; String response = Message . normalizeInput ( testMessageSuccess ) ; Message tmpMessage = new Message ( testMessageSuccess ) ; System . out . println ( "Original XML String:                          " + testMessageSuccess ) ; System . out . println ( "Normalized through Segment Processing:        " + response ) ; System . out . println ( "Tested through full Message Building Process: " + tmpMessage ) ; assert ( true ) ; }
te	5	@ JsonProperty ( "EndpointID" ) public void setEndpointID ( List < String > EndpointID ) { this . EndpointID = EndpointID ; }
te	8	public Object unmarshall ( SerializerState state , class clazz , Object jso ) throws UnmarshallException { state . setSerialized ( jso , jso ) ; return jso ; }
te	7	public Map < String , String > statsJob ( Job j ) throws BeanstalkcException { return statsJob ( j . getId ( ) ) ; }
te	4	@ Override public String getFileNameSuffix ( ) { final String suffix = "csv" ; return suffix ; }
te	4	@ Override public int hashCode ( ) { int hash = 0 ; hash += ( idlaboratorios != null ? idlaboratorios . hashCode ( ) : 0 ) ; return hash ; }
te	7	public static void main ( String [ ] args ) { Main b = new B ( ) ; b . printVariable ( ) ; }
te	1	public void function ( ) { }
te	4	public void setCommonGrp ( CommonGrp value ) { this . commonGrp = value ; }
te	8	@ Override public List < Parser > getDependencies ( ) { return Arrays . asList ( new Parser [ ] { parser , filterMatcher } ) ; }
te	5	public void updateUI ( ) { super . updateUI ( ) ; if ( jcalendar != null ) { SwingUtilities . updateComponentTreeUI ( popup ) ; } }
te	8	public void addChild ( AppJob child ) { addLink ( child , SIPHT . CODE + "_paralogues.txt" , ( ( SIPHT ) getApp ( ) ) . generateLong ( "CODE_paralogues.txt" ) ) ; }
te	8	public boolean shouldCollapse ( IJavaElement owner , int token ) throws JavaModelException { return shouldDo ( isEmpty ( ) , COLLAPSE , owner , token ) ; }
te	4	protected Set < String > getDistinctTags ( ) { return this . distinctTags ; }
te	1	private PlayerThreadMap ( ) { }
te	1	public Location ( ) { super ( ) ; }
te	10	public SButton ( ) { try { this . DefaultImage = ImageIO . read ( this . getClass ( ) . getResource ( "/Resources/ButtonDefault.png" ) ) ; this . PressedImage = ImageIO . read ( this . getClass ( ) . getResource ( "/Resources/ButtonPressed.png" ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }
te	10	public Tree parseSingleArgument ( ) { if ( peek ( kLBrace ) ) { return init ( new Argument ( parseAnonymousFunctionExpression ( ) , Optional . empty ( ) ) ) ; } else { return init ( new Argument ( parseExpression ( false ) , Optional . empty ( ) ) ) ; } }
te	9	public static void main ( String [ ] args ) { Tester t = new Tester ( ) ; t . test1 ( ) ; t . test2 ( ) ; t . test3 ( ) ; t . test4 ( ) ; }
te	2	public boolean isVisible ( ) { return visible ; }
te	10	@ Test public void testDistances ( ) { assertEquals ( 4 * sqrt ( 10.0 / 23 ) , distanceLP ( p ( 0 , 0 , 0 ) , p ( 3 , 6 , 1 ) , p ( 1 , 2 , 3 ) ) , EPS ) ; assertEquals ( 4 * sqrt ( 10.0 / 31 ) , distanceLL ( p ( 0 , 0 , 0 ) , p ( 3 , 6 , 1 ) , p ( 1 , 2 , 3 ) , p ( 9 , 8 , 7 ) ) , EPS ) ; assertEquals ( 8 * sqrt ( 10.0 / 159 ) , distanceLL ( p ( - 8 , - 1 , - 4 ) , p ( - 3 , - 6 , - 1 ) , p ( 1 , 2 , 3 ) , p ( 9 , 8 , 7 ) ) , EPS ) ; assertEquals ( 468 * sqrt ( 5.0 / 4681 ) , distanceLL ( p ( 0 , 12 , 0 ) , p ( 3 , 6 , 1 ) , p ( 65 , - 8 , 16 ) , p ( 7 , 8 , 16 ) ) , EPS ) ; assertEquals ( 0 , distanceLL ( p ( 0 , 0 , 0 ) , p ( 1 , 1 , 1 ) , p ( 8 , 8 , 1 ) , p ( 7 , 7 , - 1 ) ) , EPS ) ; assertEquals ( 7 * sqrt ( 2.0 / 3 ) , distanceLS ( p ( 0 , 0 , 0 ) , p ( 1 , 1 , 1 ) , p ( 8 , 8 , 1 ) , p ( 7 , 7 , - 1 ) ) , EPS ) ; assertEquals ( 14 / sqrt ( 3 ) , distanceLS ( p ( 8 , 8 , 1 ) , p ( 7 , 7 , - 1 ) , p ( 0 , 0 , 0 ) , p ( 1 , 1 , 1 ) ) , EPS ) ; assertEquals ( 2 * sqrt ( 19 ) , distanceSS ( p ( 0 , 0 , 0 ) , p ( 1 , 1 , 1 ) , p ( 8 , 8 , 1 ) , p ( 7 , 7 , - 1 ) ) , EPS ) ; assertEquals ( 0 , distanceLL ( p ( 0 , 0 , 0 ) , p ( 1 , 1 , 1 ) , p ( 1 , 0 , 1 ) , p ( 0 , 1 , 0 ) ) , EPS ) ; assertEquals ( 0 , distanceSS ( p ( 0 , 0 , 0 ) , p ( 1 , 1 , 1 ) , p ( 1 , 0 , 1 ) , p ( 0 , 1 , 0 ) ) , EPS ) ; assertEquals ( 1 / sqrt ( 6 ) , distanceSS ( p ( 0 , 0 , 0 ) , p ( 0.25 , 0.25 , 0.25 ) , p ( 1 , 0 , 1 ) , p ( 0 , 1 , 0 ) ) , EPS ) ; assertEquals ( 0 , distanceLS ( p ( 0 , 0 , 0 ) , p ( 0.25 , 0.25 , 0.25 ) , p ( 1 , 0 , 1 ) , p ( 0 , 1 , 0 ) ) , EPS ) ; assertEquals ( 0 , distanceLL ( p ( 0 , 0 , 0 ) , p ( 0.25 , 0.25 , 0.25 ) , p ( 1 , 0 , 1 ) , p ( 0 , 1 , 0 ) ) , EPS ) ; assertEquals ( 1 / sqrt ( 6 ) , distanceSS ( p ( 0 , 0 , 0 ) , p ( 1 , 1 , 1 ) , p ( 1 , 0 , 1 ) , p ( 0.75 , 0.25 , 0.75 ) ) , EPS ) ; assertEquals ( 1 / sqrt ( 6 ) , distanceLS ( p ( 0 , 0 , 0 ) , p ( 1 , 1 , 1 ) , p ( 1 , 0 , 1 ) , p ( 0.75 , 0.25 , 0.75 ) ) , EPS ) ; assertEquals ( 0 , distanceLL ( p ( 0 , 0 , 0 ) , p ( 1 , 1 , 1 ) , p ( 1 , 0 , 1 ) , p ( 0.75 , 0.25 , 0.75 ) ) , EPS ) ; }
te	2	public SimulationParamsBuilder ( ) { reset ( ) ; }
te	2	public int getTileH ( ) { return this . tileH ; }
te	4	public int mapXToView ( double inX ) { return ( int ) ( ( inX - mXMin ) * mScale ) ; }
te	1	public ExceptionNourrices ( ) { super ( ) ; }
te	4	public void setPositionMarker ( InstructionType positionMarker ) { m_positionMarker = positionMarker ; }
te	6	private static void initializeIs ( byte [ ] [ ] constraint_matrix , int S , int B ) { for ( int row = 0 ; row < S ; row ++ ) { for ( int col = 0 ; col < S ; col ++ ) { if ( col != row ) continue ; else constraint_matrix [ row ] [ col + B ] = 1 ; } } }
te	9	private PopupMenuListener getPopupMenuListener ( ) { return new PopupMenuListener ( ) { @ Override public void popupMenuWillBecomeVisible ( PopupMenuEvent e ) { adjustScrollBar ( ) ; } @ Override public void popupMenuWillBecomeInvisible ( PopupMenuEvent e ) { } @ Override public void popupMenuCanceled ( PopupMenuEvent e ) { } } ; }
te	6	public String getMapping ( int index , String [ ] rules ) { String [ ] actions = getMapping ( rules ) ; if ( actions == null || index < 0 || index >= actions . length ) return null ; return actions [ index ] ; }
te	6	public void setJabatan ( String jabatan ) { String oldJabatan = this . jabatan ; this . jabatan = jabatan ; changeSupport . firePropertyChange ( "jabatan" , oldJabatan , jabatan ) ; }
te	3	@ Override public String toString ( ) { return "Mandelbrot Z^3" ; }
te	2	@ Override public float getY ( ) { return 0 ; }
te	10	@ Override public boolean equals ( Object o ) { if ( this == o ) return true ; if ( o == null || getClass ( ) != o . getClass ( ) ) return false ; Survey survey = ( Survey ) o ; if ( idsurvey != survey . idsurvey ) return false ; if ( date != null ? ! date . equals ( survey . date ) : survey . date != null ) return false ; if ( question != null ? ! question . equals ( survey . question ) : survey . question != null ) return false ; return true ; }
te	9	protected static String getStars ( int count ) { StringBuffer stars = new StringBuffer ( count ) ; for ( int i = 0 ; i < count ; i ++ ) { stars . append ( PASSWORD_STAR ) ; } return stars . toString ( ) ; }
te	3	public void set_price ( double in ) { _price = in ; }
te	2	public int peek ( ) throws IOException { return peek ( 0 ) ; }
te	5	@ Override protected void setUp ( ) throws Exception { evaluationVisitor = new StandardEvaluationVisitor ( ) ; }
te	9	public void findCodigoIncidencia ( String codigo , String tipo ) { if ( client == null ) { this . idTipoIncidencias = new TipoIncidencias ( ) . getID ( codigo , tipo ) ; } else { this . idTipoIncidencias = client . getTipoIncidencias ( ) . getID ( codigo , tipo ) ; } }
te	8	protected int countT ( Geometry s ) { int n = transparencyOf ( s ) == 0 ? 0 : 1 ; if ( s . child != null ) for ( int i = 0 ; i < s . child . length && s . child [ i ] != null ; i ++ ) n += countT ( s . child [ i ] ) ; return n ; }
te	10	public static String toString ( JSONArray ja ) throws JSONException { JSONObject jo = ja . optJSONObject ( 0 ) ; if ( jo != null ) { JSONArray names = jo . names ( ) ; if ( names != null ) { return rowToString ( names ) + toString ( names , ja ) ; } } return null ; }
te	3	public BitOutputStream ( OutputStream out ) { this . out = out ; }
te	1	public void fire ( ) { }
te	3	public String getSun ( ) { return sun ; }
te	1	public ReportStatusCommand ( ) { super ( "RW" ) ; }
te	1	int getArrayDim ( ) { return 0 ; }
te	10	public Record ( int order , String pinyin , String chars , String trad , String english , String book , String chapter , String extra1 ) { this ( order , pinyin , chars , trad , english , book , chapter ) ; this . extra1 = extra1 ; }
te	10	@ Test public void shouldVerifyExistanceOfRoom ( ) { Cinema cinema = new Cinema ( ) ; Room room = new Room ( "red" ) ; assertFalse ( cinema . existRoom ( room ) ) ; cinema . addRoom ( room ) ; assertTrue ( cinema . existRoom ( room ) ) ; }
te	2	public String toString ( ) { return "Wilcoxin Test:Mann-Whitney Test" ; }
te	7	Packet02Handshake ( DataInputStream in , PassthroughConnection ptc , KillableThread thread ) { super ( in , ptc , thread ) ; }
te	4	@ Override public void mouseEntered ( MouseEvent e ) { }
te	2	public AppletContext getAppletContext ( ) { return this ; }
te	5	@ Override public void accept ( CommandVisitor cv ) { cv . visit ( this ) ; }
te	9	public static void main ( String [ ] args ) { double d = 257.234 ; int i = ( int ) d ; System . out . println ( i ) ; byte b = ( byte ) d ; System . out . println ( b ) ; }
te	3	public double getvcbias ( ) { return vc . getBias ( ) ; }
te	9	public LogParserBuilder < T > withRegExpTokenizer ( List < String > sregexps ) { checkTokenizerPresent ( ) ; tokenizer = new RegExpTokenizer ( sregexps ) ; return this ; }
te	10	static Expression generateRandomTree ( int maxDepth , boolean leafs ) { if ( maxDepth <= Leaf . depth || ( leafs && Math . random ( ) < .75 * ( maxDepth / Expression . maxDepth ) ) ) return new Leaf ( ) ; return Operator . generateRandomOp ( maxDepth , leafs ) ; }
te	1	public void addNewRecomendacion ( ) { }
te	7	public void drawOval ( double x , double y , double width , double height , boolean filled , boolean centered ) { drawOval ( x , y , width , height , filled , centered , true ) ; }
te	7	public org . w3c . dom . Node adoptNode ( org . w3c . dom . Node oNode ) { throw new UnsupportedOperationException ( "org.w3c.tidy.DOMTextImpl adoptNode() Not implemented" ) ; }
te	4	public void setfirstName ( String fName ) { firstName = fName ; }
te	3	public void start ( ) { running = true ; new Thread ( this ) . start ( ) ; }
te	6	private void helpMenuActionPerformed ( java . awt . event . ActionEvent evt ) { }
te	3	public void setNumVotes ( int nbv ) { this . numVotes = nbv ; }
te	8	public DeletedField deleted ( String fieldName ) { DeletedFieldImpl fieldSpec = new DeletedFieldImpl ( fieldName ) ; updateSpecs . add ( fieldSpec ) ; return fieldSpec ; }
te	2	public GateType join ( ) { return join ; }
te	9	@ Temporal ( TemporalType . DATE ) @ Column ( name = "app_date" , length = 10 ) public Date getAppDate ( ) { return this . appDate ; }
te	10	public boolean areAnagramsCount ( String a , String b ) { if ( a == null && b == null ) return false ; else if ( a == null || b == null ) return false ; else { int [ ] count = new int [ 256 ] ; char [ ] ac = a . toCharArray ( ) ; for ( char c : ac ) { count [ c ] ++ ; } char [ ] bc = b . toCharArray ( ) ; for ( char c : bc ) { count [ c ] -- ; } for ( int i : count ) { if ( i != 0 ) return false ; } } return true ; }
te	7	public static boolean testSwitch ( boolean switches [ ] , int numTrue ) { boolean last = true ; int numFound = 0 ; for ( int i = 0 ; i < switches . length ; i ++ ) { if ( switches [ i ] == true && last == true ) numFound ++ ; else break ; } if ( numFound == numTrue ) return true ; return false ; }
te	6	private void close ( ) { try { if ( resultSet != null ) { resultSet . close ( ) ; } if ( statement != null ) { statement . close ( ) ; } if ( connect != null ) { connect . close ( ) ; } } catch ( Exception e ) { } }
te	1	public void update ( ) { }
te	1	protected FillShellReply ( ) { }
te	3	public static synchronized Singleton getInstance ( ) { if ( uniqueInstance == null ) { synchronized ( Singleton . class ) { if ( uniqueInstance == null ) { uniqueInstance = new Singleton ( ) ; } } } return uniqueInstance ; }
te	10	public void salvar ( Endereco object ) throws HibernateException { try { session . saveOrUpdate ( object ) ; } catch ( HibernateException e ) { throw new MyHibernateException ( ERRO_INSERIR , e . getMessage ( ) ) ; } }
te	8	public static int matchGenreDescription ( String description ) { if ( description != null && description . length ( ) > 0 ) { for ( int i = 0 ; i < ID3v1Genres . GENRES . length ; i ++ ) { if ( ID3v1Genres . GENRES [ i ] . equalsIgnoreCase ( description ) ) { return i ; } } } return - 1 ; }
te	8	private void buttonVoltar_MenuFasesActionPerformed ( java . awt . event . ActionEvent evt ) { showPanel ( panelMenuPrincipal ) ; }
te	2	public int getDocumentFrequency ( ) { return documentFrequency ; }
te	2	public void step ( ) { repaint ( ) ; }
te	9	public static void main ( String [ ] args ) { Power_11 pp = new Power_11 ( ) ; System . out . println ( pp . power ( 2 , 16 ) ) ; System . out . println ( pp . power ( 2 , - 7 ) ) ; System . out . println ( pp . power ( - 2 , 7 ) ) ; System . out . println ( pp . power ( - 2 , - 7 ) ) ; System . out . println ( pp . power ( 2 , 0 ) ) ; System . out . println ( pp . power ( 0 , 7 ) ) ; System . out . println ( pp . power ( 0 , - 7 ) ) ; }
te	1	public MqttConnectOptions ( ) { }
te	3	public FeatureVector ( FeatureVector features ) { this . features = features . getFeatures ( ) ; }
te	9	private static void putName ( State constant , String name ) { if ( nameProperty == null ) nameProperty = EnumProperty . newInstance ( ) ; nameProperty . addPair ( constant , name ) ; }
te	2	public void update ( float tpf ) { }
te	3	public String getAuthorizeUri ( ) { return authorizeUri ; }
te	7	@ Override public String toString ( ) { return "SHEBlock [blockNo=" + blockNo + "  text=" + Arrays . toString ( text ) + "  IV=" + Arrays . toString ( IV ) + "]" ; }
te	4	public RecursiveSingleLinkedListImpl < T > getNext ( ) { return next ; }
te	9	public static PushNotificationPayload sound ( final String sound ) { if ( sound == null ) { throw new IllegalArgumentException ( "Sound name cannot be null" ) ; } final PushNotificationPayload payload = complex ( ) ; try { payload . addSound ( sound ) ; } catch ( final JSONException e ) { } return payload ; }
te	3	public Setting < ? > getDefaultSetting ( ) { return fallbackSetting ; }
te	1	public Diploma ( ) { }
te	10	@ Test public void canConvertStringLEFTtoOPCodeLEFT ( ) throws Exception { String input = "LEFT" ; OPCode actual = OPCode . convertStringToOPCode ( input ) ; assert . assertEquals ( OPCode . LEFT , actual ) ; }
te	10	public void addSubnode ( Node newSubnode ) { if ( subnode == null ) { subnode = newSubnode ; } else { Node previous = findPrevious ( subnode , newSubnode ) ; if ( previous . isFirstSubnode ( ) && previous . isAfter ( newSubnode ) ) { subnode = newSubnode ; newSubnode . next = previous ; newSubnode . previous = null ; previous . previous = newSubnode ; } else { newSubnode . next = previous . next ; previous . next = newSubnode ; newSubnode . previous = previous ; if ( newSubnode . next != null ) { newSubnode . next . previous = newSubnode ; } } } newSubnode . parent = this ; }
te	2	public int getHopCount ( ) { return hopCount ; }
te	5	public void swap ( ArraySet list , int x , int y ) { }
te	9	public static void main ( String [ ] args ) { DuckSimulator3 simulator3 = new DuckSimulator3 ( ) ; AbstractDuckFactory duckFactory = new CountingDuckFactory ( ) ; simulator3 . simulate ( duckFactory ) ; }
te	3	public void setPlatform ( Platforms platform ) { this . platform = platform ; }
te	3	public boolean isPause ( int f ) { return pauseData [ f ] ; }
te	4	public GenericRepository < ConsultaParticular > getConsulta_particular ( ) { return consulta_particular ; }
te	8	@ Override public String toString ( ) { return "GitVcsRoot{" + "localPath='" + localPath + ' + "  repositoryUrl='" + repositoryUrl + ' + "  settings=" + settings + } ; }
te	3	public String getName ( ) { return name ; }
te	8	@ Override public void runQueryForAd ( Query processedQuery , int _numResults , ScoredDocs scoredAdDocs ) { throw new UnsupportedOperationException ( "should be implemented first" ) ; }
te	9	public void pad ( int factor ) throws IOException { int padding = factor - ( int ) ( nrBits % factor ) ; int excess = padding & 7 ; if ( excess > 0 ) { this . write ( 0 , excess ) ; padding -= excess ; } while ( padding > 0 ) { this . write ( 0 , 8 ) ; padding -= 8 ; } this . out . flush ( ) ; }
te	2	@ Override protected int getSizeInOctets ( ) { return 8 ; }
te	4	public Iterator < ParameterDecl > iterator ( ) { return parameterDeclList . iterator ( ) ; }
te	3	@ Override public String getOriginalMessageId ( ) { return null ; }
te	8	@ Override public void setShort ( String key , short value ) { source . setString ( key , short . toString ( value ) ) ; }
te	6	public static void ms ( long ms ) { try { Thread . sleep ( ms ) ; } catch ( InterruptedException ie ) { throw new RuntimeException ( ie ) ; } }
te	5	public NumberWithLabel ( byte decimalPlaces , String label ) { initValues ( decimalPlaces , label ) ; }
te	2	public int getShieldExpireStamp ( ) { return this . shieldExpireStamp ; }
te	6	public final ArgumentAcceptingOptionSpec < V > describedAs ( String description ) { argumentDescription = description ; return this ; }
te	8	@ Override public CallableStatement set ( CallableStatement ps ) throws SQLException { ps . setFloat ( position , value ) ; return ps ; }
te	5	public ServerConnections ( SlimServer slimServer , CoverSource coverSource ) { super ( ) ; this . slimServer = slimServer ; this . coverSource = coverSource ; }
te	1	public ChamadosRecentes ( ) { }
te	10	public void run ( ) { while ( true ) { if ( c == false ) { processmsg . setText ( "" ) ; processmsg . repaint ( ) ; try { Thread . sleep ( 2 ) ; } catch ( InterruptedException ex ) { ex . printStackTrace ( ) ; } break ; } processmsg . setText ( "Processing......" ) ; processmsg . repaint ( ) ; try { Thread . sleep ( 100 ) ; } catch ( InterruptedException ex ) { ex . printStackTrace ( ) ; } } }
te	3	public AppendableSummarizer ( Appendable a ) { this . a = a ; }
te	9	private double toY ( double r , double phi ) { double radian = XbpadTrigonometry . Degree2Radian ( phi - 90 ) ; double r1 = Math . sin ( radian ) * r ; return r1 ; }
te	4	public final void setBrowseButtonFocusable ( final boolean focusable ) { browseDatabaseButton . setFocusable ( focusable ) ; }
te	9	public Persona ( int Id_Persona , int CedRuc_Persona , String Nom_Persona , String Ape_Persona , String Dir_Persona , String Tel_Persona , String Email_Persona ) { this . Id_Persona = Id_Persona ; this . CedRuc_Persona = CedRuc_Persona ; this . Nom_Persona = Nom_Persona ; this . Ape_Persona = Ape_Persona ; this . Dir_Persona = Dir_Persona ; this . Tel_Persona = Tel_Persona ; this . Email_Persona = Email_Persona ; }
te	9	@ Override public void registrarCllbck ( SensorCllbckInt sensor ) throws RemoteException { if ( ( this . callbacks ) . size ( ) < 3 && ! callbacks . contains ( sensor ) ) { ( this . callbacks ) . add ( sensor ) ; } }
te	1	public Extraction ( ) { super ( ) ; }
te	6	public void update ( Observable observable , Object objet ) { this . repaint ( ) ; }
te	10	private void refreshJcomboRobots ( ) { final String tmp = this . jcomboRobots . getActionCommand ( ) ; this . jcomboRobots . setActionCommand ( "" ) ; this . jcomboRobots . setSelectedIndex ( this . board . getRobotPositions ( ) . length - 1 ) ; this . jcomboRobots . setActionCommand ( tmp ) ; }
te	7	public JobResults addWarning ( String msg ) { if ( this . _warnings == null ) { this . _warnings = new ArrayList < String > ( ) ; } this . _warnings . add ( msg ) ; return this ; }
te	9	ListObject sublist ( int init , int end ) { final ListObject l = new ListObject ( ) ; if ( init < 0 ) { init = 0 ; } if ( end > this . list . size ( ) ) { end = this . list . size ( ) ; } if ( init > end ) { init = end ; } l . list . addAll ( this . list . subList ( init , end ) ) ; return l ; }
te	4	public null ( ArrayList < String > words ) { build_word_map ( words ) ; }
te	8	public SiteModel findById ( long id ) { SiteModel siteModel = jdbcTemplate . queryForObject ( "SELECT id  code  device  name FROM site WHERE id = ?" , new Object [ ] { id } , new SiteRowMapper ( ) ) ; return siteModel ; }
te	6	public boolean playersInScourge ( int [ ] pl ) { boolean found = false ; for ( int p : pl ) { found = false ; for ( int s : scourge ) { if ( s == p ) { found = true ; } } if ( ! found ) { return false ; } } return true ; }
te	10	private boolean hasWallUp ( int i , int j ) { UndirectedGraph walls = this . parent . getWalls ( ) ; int node = i + ( j * this . size ) ; if ( walls . edgeExists ( node , node + 1 ) ) { return true ; } return false ; }
te	5	public IntLiteral ( String s , SourcePosition posn ) { super ( s , posn ) ; }
te	7	public int optInt ( String key , int defaultValue ) { try { return getInt ( key ) ; } catch ( Exception e ) { return defaultValue ; } }
te	4	public String getValue ( ) { if ( value != null ) { return value . trim ( ) ; } return null ; }
te	10	@ Override public int read ( ) throws IOException { ensureOpen ( ) ; for ( ; ; ) { if ( nextChar >= nChars ) { fill ( ) ; if ( nextChar >= nChars ) return - 1 ; } if ( skipLF ) { skipLF = false ; if ( cb [ nextChar ] ==  ) { nextChar ++ ; continue ; } } return cb [ nextChar ++ ] ; } }
te	3	public String getName ( ) { return this . name ; }
te	4	public WriterTask ( Deque < Event > deque ) { super ( ) ; this . deque = deque ; }
te	6	public boolean shouldRemove ( ) { return isCollided && System . currentTimeMillis ( ) > collisionTime + collisionStart ; }
te	6	@ Override public void removeListDataListener ( ListDataListener l ) { dataListeners . remove ( l ) ; }
te	10	@ Override public final Impl = ( int ... indexes ) { Impl result = new Impl ( document , namespaces ) ; for ( Element e : get ( indexes ) ) { if ( e != null ) { result . addElements ( e ) ; } } return result ; }
te	1	public Ford ( ) { super ( ) ; }
te	9	@ Override public void accept ( YSpecVisitor v ) { v . visit ( this ) ; for ( YNetElement e : outwardFlows ( ) ) { if ( ! v . visited ( e ) ) e . accept ( v ) ; } }
te	1	public Address ( ) { }
te	4	public Collection < OsobyHasStaje > getStaje ( ) { return staje ; }
te	9	public JSONObject ( JSONObject jo , String [ ] names ) throws JSONException { this ( ) ; for ( int i = 0 ; i < names . length ; i += 1 ) { putOnce ( names [ i ] , jo . opt ( names [ i ] ) ) ; } }
te	7	public ListNode swapPairs ( ListNode head ) { if ( head == null || head . next == null ) return head ; ListNode dummy = new ListNode ( 0 ) ; dummy . next = head ; ListNode ptr1 = dummy ; ListNode ptr2 = head ; while ( ptr2 != null && ptr2 . next != null ) { ListNode next = ptr2 . next . next ; ptr2 . next . next = ptr1 . next ; ptr1 . next = ptr2 . next ; ptr2 . next = next ; ptr1 = ptr2 ; ptr2 = ptr1 . next ; } return dummy . next ; }
te	5	public void setbtn_setOpenListener ( ActionListener l ) { this . btn_setopen . addActionListener ( l ) ; }
te	1	public boolean pressTab ( ) { return false ; }
te	4	public Employee ( String name , int id ) { super ( name ) ; this . id = id ; }
te	9	public FTreeSet ( SortedSet < Elt > set ) { comp = ( Comparator < Elt > ) set . comparator ( ) ; tree = fromCollection ( set ) ; }
te	4	@ Override public String toString ( ) { return query ; }
te	5	public static String getRandomLastName ( ) { return getRandomLine ( IOFiles . readFile ( "textFiles/apellidos.txt" ) ) ; }
te	4	public void setMnemonic ( int mnemonic ) { this . mnemonic = mnemonic ; renderButton . setMnemonic ( mnemonic ) ; editButton . setMnemonic ( mnemonic ) ; }
te	10	public long deleteCurrent ( ) { long value = current . dData ; if ( previous == null ) { ourList . setFirst ( current . next ) ; reset ( ) ; } else { previous . next = current . next ; if ( atEnd ( ) ) { reset ( ) ; } else { current = current . next ; } } return value ; }
te	4	private void updateLastStyle ( String themeId ) { lastStyle = themeId ; }
te	8	private Dimension getMinimumSize ( BGradientColorChooserWidget c ) { Dimension ret = new Dimension ( ( c . getOrientation ( ) == BGradientColorChooserWidget . Y_AXIS ) ? 100 : ( c . getMaximumSubdivisions ( ) ) , ( c . getOrientation ( ) == BGradientColorChooserWidget . Y_AXIS ) ? ( c . getMaximumSubdivisions ( ) ) : 100 ) ; return ret ; }
te	6	public static boolean EraseValueByKey ( String strFolder , String oneStr ) { return otapiJNI . EraseValueByKey__SWIG_2 ( strFolder , oneStr ) ; }
te	8	@ WebEndpoint ( name = "MGReplyWSPort" ) public MGReplyWS getMGReplyWSPort ( WebServiceFeature ... features ) { return super . getPort ( new QName ( "http://MGReply.me.org/" , "MGReplyWSPort" ) , MGReplyWS . class , features ) ; }
te	2	public void setAg ( int ag ) { this . ag = ag ; }
te	4	@ Override public void cleanup ( ) { this . openMap = null ; this . closedMap = null ; }
te	4	@ Override public String toString ( ) { return "Variable: " + name ; }
te	9	public void item ( Object key , Stats1D h ) throws Exception { for ( Summarizer s : sums ) s . item ( key , h ) ; }
te	1	public boolean isFatal ( ) { return true ; }
te	1	public double im ( ) { return im ; }
te	10	public void testGetDecisionLineEvent ( ) { Model . getInstance ( ) . getDecisionLineEvents ( ) . add ( DLE ) ; DecisionLineEvent re = Model . getInstance ( ) . getDecisionLineEvent ( "1" ) ; assert ( re . equals ( DLE ) ) ; }
te	7	public void updateEnabledState ( ) { if ( activeTextControl != null && ! activeTextControl . isDisposed ( ) ) { setEnabled ( activeTextControl . getSelectionCount ( ) > 0 ) ; return ; } if ( deleteAction != null ) { setEnabled ( deleteAction . isEnabled ( ) ) ; return ; } setEnabled ( false ) ; }
te	8	public void addPoint ( float x1 , float y1 , float z1 ) { if ( pointsCount < maxPoints ) { pointBuffer . put ( x1 ) . put ( y1 ) . put ( z1 ) ; pointsCount += 1 ; } }
te	7	public String toString ( ) { if ( dev != null ) { String retval = info . getProduct ( 0 ) ; if ( retval == null ) retval = info . getDeviceClassName ( ) ; return retval ; } else return super . toString ( ) ; }
te	5	public void setDescription ( String description ) { Dispatch . put ( this , "Description" , description ) ; }
te	1	private ClientHandlerRegister ( ) { }
te	6	public Task ( Client client , double slo , int startTime , int duration ) { this . slo = slo ; this . startTime = startTime ; this . duration = duration ; this . client = client ; }
te	9	public JSONObject putOnce ( String key , Object value ) throws JSONException { if ( key != null && value != null ) { if ( this . opt ( key ) != null ) { throw new JSONException ( "Duplicate key \"" + key + "\"" ) ; } this . put ( key , value ) ; } return this ; }
te	9	public void resetStructure ( ) { mVertices = new ArrayList < > ( ) ; mStops = new ArrayList < > ( ) ; mRoute = null ; mStartTime = 0 ; mEndTime = 0 ; mStartStopID = - 1 ; mEndStopID = - 1 ; }
te	5	public CustomCheckBox ( String text , boolean checked ) { super ( text , checked ) ; this . addActionListener ( this ) ; }
te	10	public SaploFuture < boolean > createAsync ( final SaploCollection saploCollection ) { return new SaploFuture < boolean > ( es . submit ( new Callable < boolean > ( ) { public boolean call ( ) throws SaploClientException { create ( saploCollection ) ; return true ; } } ) ) ; }
te	3	@ Override protected void setupInitialState ( ) { this . sessionKey = null ; }
te	6	private static void updatePressedFrameCount ( ) { for ( Key key : Key . values ( ) ) { if ( key . state != STATE_NOTOUCH ) { key . state ++ ; } } }
te	5	public int hashCode ( ) { int hashCode = 0 ; for ( Specie s : lhs ) { hashCode += s . hashCode ( ) ; } for ( Specie s : rhs ) { hashCode -= s . hashCode ( ) ; } return hashCode ; }
te	3	public void setEndsBy ( Date endsBy ) { this . endsBy = endsBy ; }
te	3	public boolean weakensSEHits ( ) { switch ( this ) { case FILTER : case SOLID_ROCK : return true ; default : return false ; } }
te	2	public Portal ( boolean isOrange ) { this ( 0 , 0 , isOrange ) ; }
te	2	public boolean is_returnSpecified ( ) { return local_returnTracker ; }
te	5	public int roll ( ) { int ret = 0 ; for ( Die die : dice ) { ret += die . roll ( ) ; } return ret ; }
te	9	public void testMixedAndOr ( ) { DataQueryFilter stmnt = or ( statement ( "name=alberto" ) , and ( "age=15" , "payed=true" ) ) ; assertEquals ( "(name=alberto OR (age=15 AND payed=true))" , adapter . statementAdapter ( stmnt ) ) ; }
te	4	public JGameError ( String message ) { msg = message ; }
te	9	@ Override public void initLanguage ( char [ ] alphabet , int maxWordLength , String regexp ) { this . alphabet = alphabet ; this . regexp = regexp ; this . refrence = new RegExp ( regexp ) . toAutomaton ( ) ; }
te	10	private int factor ( ) { int value = 0 ; switch ( scanner . token ) { case Token . number : value = scanner . number ( ) ; scanner . getToken ( ) ; break ; case Token . leftP : value = group ( ) ; break ; default : scanner . error ( "Expecting number or (" ) ; break ; } return value ; }
te	1	public ProcesarPedido ( ) { super ( ) ; }
te	10	@ Override public DataFlavor [ ] getTransferDataFlavors ( ) { DataFlavor df = null ; DataFlavor dfString = null ; try { df = new DataFlavor ( MIME_TYPE ) ; dfString = DataFlavor . stringFlavor ; } catch ( ClassNotFoundException e ) { e . printStackTrace ( ) ; } if ( df != null ) return new DataFlavor [ ] { df , dfString } ; else return null ; }
te	3	public Date getBeginPeriod ( ) { return beginPeriod ; }
te	2	public int getSize ( ) { return size ; }
te	8	public static void copyFile ( File from , File to ) throws IOException { Files . copy ( from . toPath ( ) , to . toPath ( ) ) ; }
te	1	public Elev ( ) { super ( ) ; }
te	1	private Worker ( ) { }
te	9	public String getLoc ( ) { StringBuffer loc = new StringBuffer ( ) ; String look = look ( ) ; loc . append ( currRoom . getLoc ( ) ) ; if ( ! look . equals ( "" ) ) { loc . append ( "\n" ) ; loc . append ( look ) ; } return loc . toString ( ) ; }
te	9	private LuaTable register ( class < ? > clazz , String type ) { LuaTable meta = new LuaTable ( ) ; meta . rawset ( "__type" , type ) ; metatables . put ( clazz , meta ) ; return meta ; }
te	9	public CommentWapper getCommentMentions ( ) throws WeiboException { return Comment . constructWapperComments ( client . get ( WeiboConfig . getValue ( "baseURL" ) + "comments/mentions.json" ) ) ; }
te	4	public String argumentTypeIndicator ( ) { return argumentTypeIndicatorFrom ( converter ) ; }
te	5	public String getSQL ( String name ) { return "CREATE VIEW " + getOutputName ( name ) + " AS SELECT t1.* " + "t2.sort FROM " + name + " t1 INNER JOIN " + name + "_" + tag + "_src t2 ON (t1.relid=t2.relid)" ; }
te	3	public boolean isNotEmpty ( ) { return sentMessages > 0 && receivedMessages > 0 ; }
te	2	public void setForestNbZombies ( int forestNbZombies ) { this . forestNbZombies = forestNbZombies ; }
te	7	public void setVue ( Vue vue ) { try { getClientRmiImpl ( ) . setVue ( vue ) ; } catch ( RemoteException e ) { e . printStackTrace ( ) ; } }
te	1	private void setTitle ( ) { super . setTitle ( "Mobile Smart Board" ) ; }
te	1	public Group ( ) { }
te	8	public static void method364 ( ) { anIntArray1472 = new int [ DrawingArea . height ] ; for ( int j = 0 ; j < DrawingArea . height ; j ++ ) anIntArray1472 [ j ] = DrawingArea . width * j ; textureInt1 = DrawingArea . width / 2 ; textureInt2 = DrawingArea . height / 2 ; }
te	8	@ Override public Set < String > getDependentRuleNames ( ) { Set < String > ruleNames = new HashSet < String > ( ) ; ruleNames . add ( this . toString ( ) ) ; return ruleNames ; }
te	2	public final int getQuantity ( ) { return quantity ; }
te	8	int coordToSampleNo ( int x ) { return coordToSampleNo ( x , size ( ) . width , wave . length ( ) , viewStart , viewEnd ) ; }
te	2	public void setDelay ( int delay ) { this . delay = delay ; }
te	9	@ Test public void ShouldFindValueOf1000000thDigit ( ) { int index = 1000000 ; int expected = 1 ; IrrationalDecimalFractionIndexer indexer = new IrrationalDecimalFractionIndexer ( ) ; int result = indexer . GetNthDigitInDecimalMadeOfConcatenatedPositiveIntegers ( index ) ; assert . assertEquals ( expected , result ) ; }
te	5	public VectorResult ( int size ) { results = new ArrayList < Pair > ( size ) ; }
te	5	private void cleanTree ( ) { myCurrentScanner . close ( ) ; myCurrentRoot = null ; myCurrentInput = null ; myCurrentScanner = null ; }
te	8	private void buildTerritoires ( ) { territoires = SQLite . createTerritoires ( 2 ) ; for ( TerritoireCase t : territoires ) { getContentPane ( ) . add ( t ) ; } }
te	3	public String getId ( ) { return id ; }
te	10	@ Override public void buildHeap ( T [ ] array ) { heap = array . clone ( ) ; size = heap . length ; for ( int i = ( size - 1 ) / 2 ; i >= 0 ; i -- ) { heapify ( i ) ; } }
te	7	void setCell ( Position pos , MapCell cell ) { setCell ( pos . getX ( ) , pos . getY ( ) , cell ) ; }
te	2	public int getNbColumns ( ) { return cols ; }
te	7	public JSONObject put ( String key , Map value ) throws JSONException { put ( key , new JSONObject ( value ) ) ; return this ; }
te	2	public long getStartTime ( ) { return startTime ; }
te	4	final List < LexTokenType > getTypes ( ) { return this . types ; }
te	10	@ Override double [ ] cloneCoordsDouble ( AffineTransform at ) { double [ ] ret ; if ( at == null ) { ret = Arrays . copyOf ( doubleCoords , numCoords ) ; } else { ret = new double [ numCoords ] ; at . transform ( doubleCoords , 0 , ret , 0 , numCoords / 2 ) ; } return ret ; }
te	10	@ Override public void run ( ) { printMessage ( "MirrorRaising" ) ; currentTask = this ; updateTicks ( CmdMessage . TICKS_EXPOSE_FOCUS ) ; intervalometer . schedule ( new MirrorReleaseTask ( ) , 100 ) ; }
te	9	public void testWalk ( ) { grid . walk ( new CellWalker < String > ( ) { public void hasCellData ( int row , int column , String data ) { } } ) ; }
te	1	private MatchDao ( ) { }
te	7	@ Override public boolean cancelAllResearvations ( ) throws NullPointerException { if ( ! isInitialized ) { throw new NullPointerException ( "Passenger List has not been initialized" ) ; } this . initialize ( numOfRows , numOfColumns ) ; return true ; }
te	8	boolean > ( long index1 , byte [ ] struct2 ) { ia1 . setIndex ( index1 ) ; baa2 . setStruct ( struct2 ) ; return comp . compare ( ia1 , baa2 ) > 0 ; }
te	8	public void calculate ( ) { for ( Cell element : adjList ) { cells [ element . row ] [ element . column ] . value += this . value ; } }
te	6	public long optLong ( int index , long defaultValue ) { try { return getLong ( index ) ; } catch ( Exception e ) { return defaultValue ; } }
te	4	@ Override public void clearPlayground ( ) { playground . clear ( ) ; }
te	1	public Configuration ( ) { }
te	7	public Session setAuth ( long userId ) { Session session = new Session ( ) ; session . setUserId ( userId ) ; sessions . put ( session ) ; return session ; }
te	9	public ImageData ( int startMeasure , int endMeasure , int pageNumber , String [ ] imgNames , String arrangementDir ) { this . startMeasure = startMeasure ; this . endMeasure = endMeasure ; this . pageNumber = pageNumber ; this . imgNames = imgNames ; this . imgType = getImgType ( imgNames ) ; this . arrangementDir = arrangementDir ; }
te	10	@ Override public void disconnect ( ) throws IOException { sendCommand ( "disconnect" ) ; socket . close ( ) ; bank = null ; System . out . println ( "disconnected..." ) ; }
te	4	public String getHint ( ) { return hint . getText ( ) ; }
te	2	public void setIdTestCase ( long idTestCase ) { this . idTestCase = idTestCase ; }
te	6	@ Override public void onMouseRelease ( BufferedImage image , int x , int y ) { }
te	1	public ObjectFactory ( ) { }
te	4	public int lastIndexOf ( AS as ) { return this . path . lastIndexOf ( as ) ; }
te	7	public void SetMethodInUse ( String methodName ) { methodEnv = classEnv . _methodList . get ( methodName ) ; }
te	2	public boolean isProtected ( ) { return branchProtected ; }
te	8	public Biblioteca ( ) { try { new File ( "library" ) . mkdir ( ) ; rBooks = new RandomAccessFile ( "library/books.boo" , "rw" ) ; reloadList ( ) ; } catch ( IOException e ) { } }
te	7	@ Override public boolean isValidTarget ( String ... strings ) { if ( strings . length != 4 ) return false ; try { return strings [ 0 ] != null ; } catch ( Exception e ) { return false ; } }
te	1	public SpiralValleyAction ( ) { super ( "spiralValley" ) ; }
te	7	public ScoredCellElement ( int column , int row , Color color , String value ) { super ( column , row , color , value ) ; }
te	7	public static void modifyNodo ( Nodo x ) { x . texto = "Modify!" ; System . out . println ( "Nodo en la func: " + x . texto ) ; }
te	8	@ Override public boolean equals ( Object o ) { if ( this == o ) return true ; if ( o == null || getClass ( ) != o . getClass ( ) ) return false ; SMValue smValue = ( SMValue ) o ; return value == null ? smValue . value == null : value . equals ( smValue . value ) ; }
te	10	public BestOptionsEarlyGameIntel ( int n , boolean iw ) { super ( n , iw ) ; this . search = new SearchBestOptions ( this . currentBoard , this . depth ) ; this . eval = new EarlyGameEval ( this . currentBoard , this . depth , this . isWhite ) ; }
te	3	public String getCurRemainCommandStr ( ) { return curRemainCommandStr ; }
te	6	@ Inject public TelesinaRangeAnalyzerImpl ( HandSimulator simulator ) { this . simulator = simulator ; random = new Random ( ) ; }
te	1	public QuizCreatedServlet ( ) { super ( ) ; }
te	4	@ Override public String getUpSpace ( ) { return StringParaUpSpace ; }
te	4	@ Override public String toString ( ) { return "AddFileEvent [file=" + file + "]" ; }
te	1	public PacketRegister ( ) { }
te	10	private void pairWords ( ) { for ( String word : words ) { final List < Pair > pair = pairWord ( word ) ; pairs . add ( pair ) ; } }
te	4	public void setBGImage ( String bgimg ) { el . setBGImage ( bgimg , 0 , true , true ) ; }
te	5	public void alasRelease ( ActionEvent e ) { alasL . release ( ) ; }
te	4	public NumberAST ( String value ) { this ( value , DataTypes . long ) ; }
te	3	public String getNombre ( ) { return nombre ; }
te	1	public boolean isShared ( ) { return isShared ; }
te	5	@ Override public String getColumnName ( int col ) { return columnNames [ col ] ; }
te	5	private boolean expressao_sempred ( ExpressaoContext _localctx , int predIndex ) { switch ( predIndex ) { case 0 : return 4 >= _localctx . _p ; case 1 : return 3 >= _localctx . _p ; case 2 : return 2 >= _localctx . _p ; } return true ; }
te	4	public ParseContext ( Document input ) { _input = input ; }
te	4	public void setSplitChar ( final String split ) { this . inSplit = split ; }
te	7	@ Override public String toString ( ) { return this . move . toString ( ) + ( this . executed ? + : - ) ; }
te	7	@ Test public void testGetType ( ) { assertEquals ( FlaschenType . PET , f . getType ( ) ) ; }
te	9	public Video ( ) { try { Model model = new Model ( ) ; Controller controller = new Controller ( model ) ; MainFrame frame = new MainFrame ( controller ) ; } catch ( Exception e ) { } }
te	7	public int largo ( ) { Nodo nodo = this . nodoInicial ; int size = 0 ; if ( ! this . esVacia ( ) ) { while ( nodo != null ) { size ++ ; nodo = nodo . getSiguiente ( ) ; } } return size ; }
te	10	@ Override public int [ ] load ( SerializationInput input ) throws IOException , SerializationException { int len = input . readInt ( ) ; int [ ] arr = new int [ len ] ; for ( int i = 0 ; i < len ; ++ i ) arr [ i ] = input . readInt ( ) ; return arr ; }
te	2	public long getVersion ( ) { return version ; }
te	6	public Set < Plotter > getPlotters ( ) { return Collections . unmodifiableSet ( plotters ) ; }
te	5	public BinaryTree ( K key , V value ) { this . key = key ; this . value = value ; }
te	7	public NewJDialog ( java . awt . Frame parent , boolean modal ) { super ( parent , modal ) ; initComponents ( ) ; }
te	2	public void setUsePermissions ( boolean usePermissions ) { this . usePermissions = usePermissions ; }
te	2	public String getDroppingAdvice ( ) { return "The storm looks to be ending  sir" ; }
te	10	@ Override public boolean match ( CharSequence str ) { return ( str . equals ( EditCommands . CURSOR_UP ) || str . equals ( EditCommands . CURSOR_DOWN ) || str . equals ( EditCommands . CURSOR_LEFT ) || str . equals ( EditCommands . CURSOR_RIGHT ) ) ; }
te	5	public LinearVariation ( Crossover < > > crossover , Mutation < > > mutation ) { this . crossover = crossover ; this . mutation = mutation ; }
te	10	public void saveUserInput ( ) { Configuration . setConfig ( Configuration . CONFIG_INSTALL_NI_EXECUTABLES , String . valueOf ( executablesCheckbox . isSelected ( ) ) ) ; Configuration . setConfig ( Configuration . CONFIG_INSTALL_NI_SERVERLIB , String . valueOf ( serverLibCheckbox . isSelected ( ) ) ) ; }
te	3	public ReceiverThread ( Socket communicationSocket ) { this . communicationSocket = communicationSocket ; }
te	4	@ Override public void windowOpened ( WindowEvent we ) { }
te	3	public void setName ( String name ) { this . name = name ; }
te	3	public void close ( ) throws IOException { out . close ( ) ; }
te	5	public boolean publicKeyExists ( String keyName ) { return publicKeys . containsKey ( keyName ) ; }
te	3	public void setNext ( Node next ) { this . next = next ; }
te	4	public void setCreationdate ( XMLGregorianCalendar value ) { this . creationdate = value ; }
te	10	public boolean getBoolean ( String key ) throws JSONException { Object object = this . get ( key ) ; if ( object . equals ( boolean . false ) || ( object instanceof String && ( ( String ) object ) . equalsIgnoreCase ( "false" ) ) ) { return false ; } else if ( object . equals ( boolean . true ) || ( object instanceof String && ( ( String ) object ) . equalsIgnoreCase ( "true" ) ) ) { return true ; } throw new JSONException ( "JSONObject[" + quote ( key ) + "] is not a Boolean." ) ; }
te	7	public Rectangle setBounds ( Rectangle rect ) { return setBounds ( rect . x ( ) , rect . y ( ) , rect . width ( ) , rect . height ( ) ) ; }
te	8	public DRUMSReader < Data > getReader ( ) throws FileLockException , IOException { if ( reader_instance != null && ! reader_instance . filesAreOpened ) { reader_instance . openFiles ( ) ; } else { reader_instance = new DRUMSReader < Data > ( this ) ; } return reader_instance ; }
te	2	public int getY ( ) { return this . y ; }
te	2	public boolean isCaseSensitive ( ) { return caseSensitive ; }
te	6	@ Test ( expected = NullPointerException . class ) public void iteratorNull ( ) { Lazy . iterator ( null ) ; }
te	2	public int getCategory ( ) { return category ; }
te	7	public SearchTask ( Player < M , S > player , S s ) { this . state = s ; this . player = player ; }
te	9	public void generateBufferPrototype ( SwarmCodeGenerator generator ) throws IOException { generator . startMapFunctionPrototype ( myIdentifier . getIdentifierName ( ) ) ; generator . mapFunctionPrototypeArgument ( "size_t" ) ; generator . endMapFunctionPrototype ( ) ; }
te	1	public void aboutToHidePanel ( ) { }
te	6	public long addAddress ( Address address , long sessionID ) throws SessionException { return SessionServerDelegate . addAddress ( address , sessionID ) ; }
te	5	public static void $ ( final $int2d x , final $int2d y ) throws NRException { x . $ ( y . $ ( ) ) ; }
te	4	@ Override public String toString ( ) { return roomName ; }
te	6	@ Override public Object getValueAt ( int arg0 , int arg1 ) { return data [ arg0 ] [ arg1 ] ; }
te	9	public int [ ] sort ( int [ ] d ) { data = ArrayUtils . copy ( d ) ; for ( int i = 0 ; i < data . length ; i ++ ) { for ( int j = data . length - 1 ; j > i ; j -- ) { if ( data [ j ] < data [ j - 1 ] ) { ArrayUtils . swap ( data , j , j - 1 ) ; } } } return data ; }
te	1	public Occupancy ( ) { super ( ) ; }
te	3	public String getTypeName ( ) { return typeName ; }
te	9	@ Override public boolean equals ( Object object ) { boolean result = false ; if ( object == null || object . getClass ( ) != getClass ( ) ) result = false ; else { Possibility other = ( Possibility ) object ; if ( this . money == other . money ) result = true ; } return result ; }
te	9	@ Test public void connectsTwoVertices ( ) { Vertex v1 = new Vertex ( 1 , 0 ) ; Vertex v2 = new Vertex ( 0 , 1 ) ; v1 . addAdjacent ( v2 ) ; assertTrue ( v1 . getAdjacents ( ) . contains ( v2 ) && v2 . getAdjacents ( ) . contains ( v1 ) ) ; }
te	4	public Integer getMaxY ( ) { return dProps . getYSize ( ) ; }
te	3	public Entidade getEntidade ( ) { return entidade ; }
te	5	@ Override public List < String > getDisableWorlds ( ) { return disableWorlds ; }
te	4	public SimpleService ( URL wsdlLocation ) { super ( wsdlLocation , SERVICE ) ; }
te	6	public static void setSerializedObject ( Object caller , Object o ) { synchronized ( SER_MAP ) { SER_MAP . put ( caller , o ) ; } }
te	6	public void setObjeto ( String objeto , short x , short y ) { mapa [ x ] [ y ] = objeto ; }
te	6	public static int [ ] rotate ( int [ ] a , int n ) { int [ ] b = new int [ a . length ] ; for ( int i = 0 ; i < b . length ; i ++ ) { if ( n == b . length ) n = 0 ; b [ i ] = a [ n ++ ] ; } return b ; }
te	2	public SimpleMethod2 createSimpleMethod2 ( ) { return new SimpleMethod2 ( ) ; }
te	1	public int recoverHealth ( ) { return 0 ; }
te	3	public I_TableViewer getiTableViewer ( ) { return iTableViewer ; }
te	10	public void addAuthorativeAnswer ( DNSRecord rec ) throws IOException { if ( numAdditionals > 0 ) { throw new IllegalStateException ( "Authorative answers must be added before additional answers" ) ; } authorativeAnswers . add ( rec ) ; writeRecord ( rec , 0 ) ; numAuthorities ++ ; }
te	1	public int getQuestionType ( ) { return 3 ; }
te	7	public static Dimension max ( Dimension d1 , Dimension d2 ) { return new Dimension ( Math . max ( d1 . width ( ) , d2 . width ( ) ) , Math . max ( d1 . height ( ) , d2 . height ( ) ) ) ; }
te	3	public String getCategoria ( ) { return categoria ; }
te	10	private void jButtonHighScoresActionPerformed ( java . awt . event . ActionEvent evt ) { DisplayHighScoresFrame displayHighScoresFrame = new DisplayHighScoresFrame ( this . game ) ; displayHighScoresFrame . setVisible ( true ) ; }
te	6	@ Override public boolean equals ( Object o ) { MLoc r = ( MLoc ) o ; return equals ( r ) ; }
te	10	private void stairButtonActionPerformed ( java . awt . event . ActionEvent evt ) { this . cursor = cursorTypes . STAIR ; this . setStatusMessage ( "Cursor selected: stair" ) ; }
te	6	public PrintQueueTwo ( ) { super ( ) ; this . semaphore = new Semaphore ( 3 ) ; this . freePrinters = new boolean [ ] { true , true , true } ; this . lockPrinters = new ReentrantLock ( ) ; }
te	10	public void messageSent ( String sender , String message ) { if ( map . containsKey ( message ) ) { _arch . OUT_IChat . sendMessage ( "Bot" , map . get ( message ) ) ; } }
te	1	public LogFormatter ( ) { super ( ) ; }
te	10	private void traversePreOrder ( Node < K , V > node , Visitor < K , V > visitor ) { if ( node == null ) return ; node . accept ( visitor ) ; traversePreOrder ( node . left , visitor ) ; traversePreOrder ( node . right , visitor ) ; }
te	2	public double getdirx ( ) { return dirx ; }
te	5	public void remove ( E e ) { bs . delete ( e ) ; }
te	3	public String toString ( ) { return new long ( longValue ( ) ) . toString ( ) ; }
te	3	public boolean isCheckBoxSelected ( ) { return analysisFinishedIndicator . isSelected ( ) ; }
te	8	public void createPool ( ) { for ( int i = 0 ; i < 40000 ; i ++ ) { Projectile P = new Projectile ( randomNum . nextInt ( 111 ) + 35 , randomNum . nextInt ( 40 ) + 60 , 0 , 0 ) ; pool . push ( P ) ; } }
te	6	private String unquoteString ( String value ) { if ( value . startsWith ( "\"\"\"" ) || value . startsWith ( "'''" ) ) { return value . substring ( 3 , value . length ( ) - 3 ) ; } else if ( value . startsWith ( "\"" ) || value . startsWith ( "'" ) ) { return value . substring ( 1 , value . length ( ) - 1 ) ; } return value ; }
te	7	public JSONObject put ( String key , Map value ) throws JSONException { this . put ( key , new JSONObject ( value ) ) ; return this ; }
te	4	public Highscores ( ) { _records = new ArrayList < HighscoreRecord > ( ) ; }
te	3	public String getCode ( ) { return code ; }
te	3	@ Test public void testSetmNombre ( ) { fail ( "Not yet implemented" ) ; }
te	6	@ Before public void setUp ( ) { cartRowCalculator = new CartRowCalculator ( ) ; MockitoAnnotations . initMocks ( this ) ; }
te	5	CommaTok ( Cursor cursor ) { super (   , cursor . clone ( ) ) ; }
te	8	public IITPlaylist getItemByPersistentID ( int highID , int lowID ) { return new IITPlaylist ( Dispatch . call ( this , "ItemByPersistentID" , new Variant ( highID ) , new Variant ( lowID ) ) . toDispatch ( ) ) ; }
te	10	public AudioFileFormat getAudioFileFormat ( URL url ) throws UnsupportedAudioFileException , IOException { InputStream inputStream = url . openStream ( ) ; try { return getAudioFileFormat ( inputStream ) ; } finally { inputStream . close ( ) ; } }
te	3	public GenerateVideo ( String currDirectory ) { this . currDirectory = currDirectory ; }
te	10	private synchronized void resetTimeout ( ) { if ( heartbeatTimeoutTask != null ) { heartbeatTimeoutTask . cancel ( ) ; } if ( getState ( ) != STATE_INVALID ) { heartbeatTimeoutTask = new HearbeatTimeoutTask ( ) ; backgroundTimer . schedule ( heartbeatTimeoutTask , closingTimeout + heartbeatTimeout ) ; } }
te	4	protected void setUp ( ) { gameManager = new GameManager ( "bees" , cardRenderer , cardRenderer ) ; }
te	9	private void formWindowClosing ( java . awt . event . WindowEvent evt ) { parent . setEnabled ( true ) ; parent . setVisible ( true ) ; }
te	2	public boolean isGroupee ( ) { return this . groupee != 0 ; }
te	1	public UserUtils ( ) { }
te	10	public void add ( V value ) { if ( value == null ) { throw new BinaryHeapException ( "Can not add a null value" ) ; } int position ; synchronized ( data ) { if ( numberOfNodes >= this . data . length ) { extendDataArray ( ) ; } position = numberOfNodes ++ ; } this . data [ position ] = value ; siftIn ( position ) ; }
te	7	public void keyTyped ( KeyEvent e ) { System . err . println ( "key typed " + ( char ) e . getKeyChar ( ) ) ; }
te	6	@ Override public String getParams ( ) { StringBuilder params = new StringBuilder ( ) ; return params . toString ( ) ; }
te	8	@ Override public int hashCode ( ) { final int prime = 31 ; int result = 1 ; result = prime * result + Arrays . deepHashCode ( arguments ) ; result = prime * result + ( ( name == null ) ? 0 : name . hashCode ( ) ) ; return result ; }
te	4	public static String getProxyPassword ( String password ) { return getProperty ( "tblog4j.http.proxyPassword" , password ) ; }
te	7	public int [ ] scores ( ) { int [ ] scores = new int [ players . length ] ; for ( int i = 0 ; i < players . length ; i ++ ) scores [ i ] = state . playerState ( i ) . finalScore ( ) ; return scores ; }
te	4	public Rect bounds ( Window w ) { return bounds ( ) ; }
te	3	public void setTitle ( String title ) { this . title = title ; }
te	7	public static void secureSubtract ( double [ ] a , double [ ] b , double [ ] c ) { for ( int i = 0 ; i < a . length ; i ++ ) { if ( b [ i ] != double . NEGATIVE_INFINITY ) { c [ i ] = a [ i ] - b [ i ] ; } } }
te	1	public Phongban ( ) { }
te	5	public void bubblesOff ( ) { if ( on ) { System . out . println ( "Hottub is not bubbling" ) ; } }
te	5	@ Override public boolean esEquivalente ( Tipo t ) { return t instanceof TipoInt ; }
te	4	@ Override public String toString ( ) { return "db.NonFunctionalRequirement[ idNonFuncRequirement=" + idNonFuncRequirement + " ]" ; }
te	4	public LeiaContext ( ExpressaoContext ctx ) { copyFrom ( ctx ) ; }
te	8	public void readIndex ( ) { indexBuffer . rewind ( ) ; index = new IndexForHeaderIndexFile ( indexSize , keySize , chunkSize , indexBuffer ) ; }
te	3	public String getGrup ( ) { return grup ; }
te	7	@ Test public void ID3v2PopmFrameDataIsNotEqualNull ( ) throws Exception { ID3v2PopmFrameData iD3v2PopmFrameData = new ID3v2PopmFrameData ( false , 0 ) ; assertFalse ( iD3v2PopmFrameData . equals ( null ) ) ; }
te	4	private final boolean doublec ( int j ) { if ( j < 1 ) return false ; if ( b [ j ] != b [ j - 1 ] ) return false ; return cons ( j ) ; }
te	6	public static String dumpCSV ( ICSVProvider csv ) throws Exception { return dumpCSV ( csv , long . MAX_VALUE , 11 , false , null ) ; }
te	7	private static void verifyId ( SaploCollection saploCollection ) throws SaploClientException { if ( saploCollection . getId ( ) < 1 ) throw new SaploClientException ( MSG_CLIENT_FIELD , CODE_CLIENT_FIELD , "collection.id" ) ; }
te	3	public void windowDeiconified ( WindowEvent e ) { }
te	5	public String toDTO ( Cinema cinema ) { return cinema . getName ( ) ; }
te	5	@ Override public Bindings getBindings ( int scope ) { return stack [ scope ] ; }
te	8	@ Override public int hashCode ( ) { int hash = 7 ; hash = 97 * hash + Objects . hashCode ( this . zavod_zavod_id ) ; hash = 97 * hash + Objects . hashCode ( this . kategorie_kategorie_id ) ; hash = 97 * hash + Objects . hashCode ( this . zavody ) ; hash = 97 * hash + Objects . hashCode ( this . kategorie ) ; return hash ; }
te	8	@ XmlElementDecl ( namespace = "" , name = "customer-order-number" ) public JAXBElement < String > createCustomerOrderNumber ( String value ) { return new JAXBElement < String > ( _CustomerOrderNumber_QNAME , String . class , null , value ) ; }
te	9	private void btnBuscarKeyPressed ( java . awt . event . KeyEvent evt ) { if ( evt . getKeyCode ( ) == KeyEvent . VK_ENTER ) { this . btnBuscarMouseClicked ( null ) ; } }
te	5	public JSONArray ( Collection collection ) { this . myArrayList = ( collection == null ) ? new ArrayList ( ) : new ArrayList ( collection ) ; }
te	8	@ Override public void handle ( MouseEvent event ) { if ( event . getEventType ( ) . equals ( MouseEvent . MOUSE_CLICKED ) ) { popupPane ( ) ; } }
te	9	@ Test public void testCheckDefaultValues ( ) { assertTrue ( this . options . isGenerateJavadoc ( ) ) ; assertFalse ( this . options . isInnerBuilderClass ( ) ) ; assertNotNull ( this . options . getBuilderVisibility ( ) ) ; }
te	3	public Par getPar ( ) { return par ; }
te	7	public AddGrupo ( java . awt . Frame parent , boolean modal ) { super ( parent , modal ) ; initComponents ( ) ; }
te	5	public void untag ( String tag ) { tags . remove ( tag ) ; }
te	2	public void enableController ( ) { this . enabled = true ; }
te	8	@ Override public Object visitVariable ( VariableAST variableAST ) { return variables . add ( variableAST . getName ( ) ) ; }
te	10	private double ParseDouble ( String thestring ) { double x ; int pos = thestring . indexOf ( "/" ) ; if ( pos > - 1 ) { double numerator = double . parseDouble ( thestring . substring ( 0 , pos ) ) ; double denominator = double . parseDouble ( thestring . substring ( pos + 1 ) ) ; x = numerator / denominator ; } else { x = double . parseDouble ( thestring ) ; } return ( x ) ; }
te	5	public TestEvent ( final String topic , final int identifier , final String payload ) { super ( ) ; this . topic = topic ; this . identifier = identifier ; this . payload = payload ; }
te	4	@ Override public void setFrustumType ( byte type ) { frustumType = type ; }
te	7	@ Override public double measureTemperature ( final Person p ) { if ( ! canMeasureTemperature ) { throw new RuntimeException ( "Shouldn't be measuring!" ) ; } else { return Person . NORMAL_TEMP + 7 ; } }
te	1	public NoDataException ( ) { }
te	1	public int recoverHealth ( ) { return 0 ; }
te	6	public Listas ( int Tamaño ) { this . size = 0 ; this . Maxsize = Tamaño ; this . lista = new String [ Tamaño ] ; }
te	5	@ Override public void configDecoder ( AuthDecoder decoder ) { decoder = new AuthSimpleDecoder ( ) ; }
te	3	@ Override public void act ( ) throws RestartException { }
te	4	private void setLinhas ( ArrayList list ) { linhas = list ; }
te	2	public long getAvailableTime ( ) { return availableTime ; }
te	4	public void setMap ( Map _map ) { map = _map ; }
te	3	public String getCpf ( ) { return cpf ; }
te	6	@ Override public String toString ( ) { return String . format ( "%s (%d)" , this . type . toString ( ) , this . time ) ; }
te	10	private void loadImage ( ) { try { img_redkey = ImageIO . read ( new File ( "resources/redkey.jpg" ) ) ; } catch ( IOException e ) { System . out . printf ( "image does not exist. " ) ; } }
te	3	public static Json getInstance ( ) { if ( instance == null ) { instance = new Json ( ) ; } return instance ; }
te	3	public void setView ( NotebookDaysPanelView view ) { this . view = view ; }
te	5	public static double distance ( FPoint2 p1 , FPoint2 p2 ) { return p2 . distanceFrom ( p1 ) ; }
te	5	public void removeTableModelListener ( TableModelListener listener ) { listeners . remove ( listener ) ; }
te	10	public boolean hasAdjacentEmptyTile ( JavaCell cell ) { int x = cell . getX ( ) ; int y = cell . getY ( ) ; if ( x + 1 == 13 ) { if ( map [ 13 ] [ y ] . getCellType ( ) . equals ( "blank" ) ) return true ; } if ( x - 1 == 0 ) { if ( map [ 0 ] [ y ] . getCellType ( ) . equals ( "blank" ) ) return true ; } if ( y + 1 == 13 ) { if ( map [ x ] [ 13 ] . getCellType ( ) . equals ( "blank" ) ) return true ; } if ( y - 1 == 0 ) { if ( map [ x ] [ 0 ] . getCellType ( ) . equals ( "blank" ) ) return true ; } return false ; }
te	10	public void actionPerformed ( ActionEvent e ) { controller . onRegroupDialogOk ( pair , getDelta ( ) ) ; parent . setVisible ( false ) ; parent . dispose ( ) ; }
te	2	public void setShow ( boolean show ) { this . show = show ; }
te	5	@ Test public void shouldParseAlternatives ( ) { assertEquals ( "foo" , parser . parse ( "foo" ) ) ; assertEquals ( "bar" , parser . parse ( "bar" ) ) ; assertEquals ( "baz" , parser . parse ( "baz" ) ) ; }
te	9	@ Override public Entity callImplementation ( ArgumentList args , Scope scope ) { return functionBody . callBody ( args , scope ) ; }
te	3	public String getLastName ( ) { return lastName ; }
te	8	static String generateRandomValue ( Random random , int base , int addition ) { return generateRandomString ( random , base + random . nextInt ( addition ) ) ; }
te	7	public void activateQuest ( String questName ) { activeList . put ( questName , questList . get ( questName ) ) ; }
te	2	public void incrementNumberOfWins ( ) { wins ++ ; }
te	10	public final void svd ( double scale [ ] ) { for ( int i = 0 ; i < 3 ; i ++ ) for ( int j = 0 ; j < 3 ; j ++ ) svdSrc [ 3 * i + j ] = get ( i , j ) ; if ( svdMath == null ) svdMath = new SVD ( ) ; svdMath . compute ( svdSrc , scale , svdRot ) ; }
te	7	public static Complex polar ( final double _Rho , final double _Theta ) { return complex ( _Rho * cos ( _Theta ) , _Rho * sin ( _Theta ) ) ; }
te	7	@ Override public ArrayList < Value > getArguments ( ) { ArrayList < Value > r = new ArrayList < Value > ( ) ; r . add ( argument ) ; return r ; }
te	9	public String getPassedParameter ( ) { FacesContext facesContext = FacesContext . getCurrentInstance ( ) ; this . passedParameter = ( String ) facesContext . getExternalContext ( ) . getRequestParameterMap ( ) . get ( "id" ) ; return this . passedParameter ; }
te	10	public AscentSimulator ( final Vehicle vehicle , final double step , final AscentEventListener listener , final SortedMap < double , double > throttlePercentByMet , final SortedMap < Integer , double > throttlePercentByStage ) { this . vehicle = vehicle ; this . step = step ; this . listener = listener ; this . throttlePercentByMet = throttlePercentByMet ; this . throttlePercentByStage = throttlePercentByStage ; }
te	6	@ Override public boolean contains ( T item ) { for ( T e : this ) { if ( e . equals ( item ) ) return true ; } return false ; }
te	4	public void setLocation ( AIPoint location ) { this . location . set ( location ) ; }
te	6	@ BeforeClass public static void setUpBeforeClass ( ) throws Exception { System . out . println ( "before test##############################################################" ) ; }
te	6	private Set < Entry > getEntrySet ( ) { final Set < Entry > es = this . entrySet ; return es != null ? es : ( this . entrySet = new EntrySet ( ) ) ; }
te	2	public void setMaxSpeed ( double maxSpeed ) { this . maxSpeed = maxSpeed ; }
te	6	@ Override public String toString ( ) { return "MineralInputImpl{" + "minerals=" + Arrays . toString ( minerals ) + } ; }
te	3	TriangulateMonotoneStage ( TriangulationAlgorithm algorithm ) { super ( algorithm ) ; }
te	10	public int checkCollision ( int cid , double xofs , double yofs ) { double oldx = x , oldy = y ; x += xofs ; y += yofs ; int retcid = eng . checkCollision ( cid , this ) ; x = oldx ; y = oldy ; return retcid ; }
te	6	public static void main ( String [ ] args ) { Animate gui = new Animate ( ) ; gui . go ( ) ; }
te	7	public static void main ( String [ ] args ) { System . out . println ( UUID ( ) ) ; }
te	5	public void usePalaceTiles ( int value ) { sharedModel . decrementPalaceTiles ( value ) ; updateSharedPanel ( ) ; }
te	2	public int getOrderID ( ) { return orderID ; }
te	4	@ Override public String toString ( ) { return getNaam ( ) ; }
te	7	public Color hpColor ( ) { if ( this . getCurrentHP ( ) >= this . getMaxHP ( ) * ( 2.0 / 3.0 ) ) return Color . GREEN ; else if ( this . getCurrentHP ( ) >= this . getMaxHP ( ) / 3 ) return Color . YELLOW ; else return Color . RED ; }
te	6	public void setDirSpeed ( int xdir , int ydir , double speed ) { this . xdir = xdir ; this . ydir = ydir ; this . xspeed = speed ; this . yspeed = speed ; }
te	6	public ValueOutOfRangeException ( Object value , String comment ) { super ( "\u0417\u043D\u0430\u0447\u0435\u043D\u0438\u0435 " + value . toString ( ) + " \u043F\u0440\u0435\u0432\u044B\u0448\u0430\u0435\u0442 \u0434\u043E\u043F\u0443\u0441\u0442\u0438\u043C\u043E\u0435 " + comment + "." ) ; }
te	1	public Ticket ( ) { }
te	8	public void unchoke ( ) { if ( this . choking ) { logger . trace ( "Unchoking " + this ) ; this . send ( Message . UnchokeMessage . craft ( ) ) ; this . choking = false ; } }
te	5	public StringDeconstructor ( String head , String tail , String delimiter ) { this . head = head ; this . tail = tail ; this . delimiter = delimiter ; }
te	8	public JSONObject putOpt ( String key , Object value ) throws JSONException { if ( key != null && value != null ) { this . put ( key , value ) ; } return this ; }
te	9	public void __doPut ( HttpServletRequest req , HttpServletResponse resp ) throws IOException { resp . setContentType ( "text/plain" ) ; resp . getWriter ( ) . println ( "Ouch... not implemented yet :(" ) ; }
te	3	public void setTypeCode ( String typeCode ) { this . typeCode = typeCode ; }
te	2	public void update ( ) { ownerTable1 . update ( ) ; }
te	4	public void setProjection ( MapProjection value ) { this . projection = value ; }
te	8	public UpdatePatientOkActionListener ( NewPatientDialog npd , Reloadable r , Patient p ) { this . npd = npd ; this . r = r ; this . patient = p ; }
te	6	public Rectangle [ ] getRooms ( ) { Rectangle [ ] all = new Rectangle [ rooms . size ( ) ] ; rooms . toArray ( all ) ; return all ; }
te	5	public boolean setUnits ( short units ) { if ( type == TYPE . SEA ) return false ; this . units = units ; return true ; }
te	10	@ Override public void performEffect ( short [ ] sound ) { for ( int i = 0 ; i < sound . length ; i ++ ) { int t = sound [ i ] * vol [ pos ] ; t /= short . MAX_VALUE ; sound [ i ] = ( short ) t ; pos = ++ pos == channelCount ? 0 : pos ; } }
te	2	public void bind ( ) { texture . bind ( ) ; }
te	5	public String correspondingFeatureDomain ( ) { return FeatureDomain . NT . toString ( ) ; }
te	2	public void changeAlpha ( float alpha ) { changeAlpha ( ( int ) ( alpha * 255 ) ) ; }
te	9	private AbstractAction getProfilChangeAction ( ) { if ( profilChangeAction == null ) { profilChangeAction = new AbstractAction ( "Profil wechseln" , null ) { private static final long serialVersionUID = - 5840114218229847763 ; public void actionPerformed ( ActionEvent evt ) { ChangeProfil . main ( null ) ; } } ; } return profilChangeAction ; }
te	10	public void addModel ( TransferableModel model ) { if ( ! hasModel ( model ) ) { models . push ( model ) ; modelUMIDs . add ( model . getUMID ( ) ) ; model . addSubModels ( this ) ; } }
te	4	public boolean isInsideY ( double y ) { return ( y >= positionY && y <= ( positionY + rectHeight ) ) ; }
te	4	@ Override public Dimension getSize ( ) { return canvas . getSize ( ) ; }
te	1	protected DataField ( ) { }
te	2	public int getMinimum ( ) { return min ; }
te	4	@ Override public List < BookSeries > list ( ) { return null ; }
te	7	static CommandLine gitLogRenames ( String gitPath , String folder , String revision ) { return new CommandLine ( gitPath , "show" , "-M" , "--pretty=format:" , "--name-status" , revision ) . workingDir ( folder ) ; }
te	7	public TaskTrackerInfo getTaskTracker ( String id ) { if ( this . taskTrackers . containsKey ( id ) ) { return this . taskTrackers . get ( id ) ; } else { return null ; } }
te	6	public InputLine ( String name ) { super ( name , new StructInput [ 0 ] , new StructOutput [ ] { new StructOutput ( new StringPipe ( "result" ) ) } ) ; }
te	3	public String getName ( ) { return this . name ; }
te	1	public MissingLDAPResourceException ( ) { super ( ) ; }
te	9	@ Override public String toString ( ) { String t = "City: {\n" + "\t Name: " + getName ( ) + "\n\t Population: " + getPopulation ( ) + "\n\t Area: " + getArea ( ) + "\n\t Mayor Name: " + getMayorName ( ) + "\n\t Building Count: " + getBuildingCount ( ) + "\n}" ; return t ; }
te	3	public final int getUseCount ( ) { return uses . size ( ) ; }
te	6	public static void sendMsg ( Team team , String msg ) { team . write ( msg ) ; }
te	4	public void close ( ) { player . close ( ) ; setVisible ( false ) ; dispose ( ) ; }
te	3	public CountyInitCmd ( Country country ) { super ( ) ; this . country = country ; }
te	1	private FalseNode ( ) { }
te	3	public VectorialMemories ( ) { super ( "VectorialMemories" ) ; setDistance ( new EuclideanDistance ( ) ) ; }
te	9	@ Override public boolean isSimilar ( final Object other ) { if ( other instanceof Number ) { final Number num = ( Number ) other ; return Math . abs ( val - num . val ) < 5 ; } return false ; }
te	5	public void setNoPembelian ( String noPembelian ) { noPembelianTextField . setText ( noPembelian ) ; }
te	4	public String getAnnouncementDate ( ) { return datePosted . toString ( ) ; }
te	10	@ Override public final List < String > namespacePrefixes ( int ... indexes ) { List < String > result = new ArrayList < String > ( ) ; for ( int index : indexes ) { result . add ( namespacePrefix ( index ) ) ; } return result ; }
te	7	public void monitorUpdaterStart ( ) { MonitorUpdater monitorUp = new MonitorUpdater ( testResource ) ; monitorUp . setName ( "Monitor Updater Thread" ) ; work = true ; monitorUp . start ( ) ; }
te	9	public void addEmployee ( Employee newEmployee ) throws InvalidArgumentException { for ( Employee employee : employees ) { if ( newEmployee . getId ( ) . equals ( employee . getId ( ) ) ) { throw new InvalidArgumentException ( "Employee on project already" ) ; } } employees . add ( newEmployee ) ; }
te	7	public IndexFieldDefinition ( String name , IndexValueType type ) { this ( name , type , Order . ASCENDING ) ; }
te	10	public void undo ( ) throws CannotUndoException { if ( ! canUndo ) throw new CannotUndoException ( ) ; aDataMap . remove ( section ) ; aDataMap . put ( section , oldData ) ; canUndo = false ; canRedo = true ; fireADocumentChanged ( ) ; }
te	4	@ Override public String processSignature ( String str ) { return str ; }
te	8	public static int getDataTypeAsInt ( byte [ ] dt ) { ByteBuffer bb = ByteBuffer . allocate ( 4 ) ; bb . position ( 2 ) ; bb . put ( dt ) ; bb . position ( 0 ) ; return bb . getInt ( ) ; }
te	4	public static Scanner getInFile ( ) { return SnakeWithPartner . inFile ; }
te	5	public boolean tieneBarcosNoDestruidos ( ) { for ( Nave nave : this . naves ) { if ( ! nave . estaDestruida ( ) ) return true ; } return false ; }
te	5	@ Override public int hashCode ( ) { int result = svnPath != null ? svnPath . hashCode ( ) : 0 ; result = 31 * result + ( repositoryUrl != null ? repositoryUrl . hashCode ( ) : 0 ) ; return result ; }
te	4	public float getPrefWidth ( ) { if ( sizeInvalid ) computeSize ( ) ; return prefWidth ; }
te	7	public Puzzle ( final int numOfTiles ) { super ( ) ; setNumOfTiles ( numOfTiles ) ; setSize ( this . panelWidth , this . panelHeight ) ; setDoubleBuffered ( true ) ; }
te	4	public void subtractV ( double a [ ] , double b [ ] , double result [ ] ) { result [ 0 ] = a [ 0 ] - b [ 0 ] ; result [ 1 ] = a [ 1 ] - b [ 1 ] ; result [ 2 ] = a [ 2 ] - b [ 2 ] ; }
te	10	public < T extends E > void elementwiseMax ( Counter < T > counter ) { for ( T key : counter . keySet ( ) ) { double count = counter . getCount ( key ) ; if ( getCount ( key ) < count ) { setCount ( key , count ) ; } } }
te	8	public Rain ( Point point ) { this . point = point ; int cl = 100 + RANDOM . nextInt ( 150 ) ; color = new Color ( cl , cl , 255 ) ; }
te	9	private int getCurrentPage ( ) { String currentPageString = request . getParameter ( "currentPage" ) ; int currentPage ; if ( currentPageString != null && ! currentPageString . isEmpty ( ) ) { currentPage = Integer . parseInt ( currentPageString ) ; } else { currentPage = 1 ; } return currentPage ; }
te	1	private InsertParameterList ( ) { }
te	7	public void registerColorPalletHandler ( ColorPalletHandler cph ) { for ( int i = 0 ; i < colorPalletButtons . length ; i ++ ) { colorPalletButtons [ i ] . addActionListener ( cph ) ; } }
te	8	public User ( String firstName , String lastName , String sport , Integer numOfYears , boolean vegetarian ) { super ( ) ; this . firstName = firstName ; this . lastName = lastName ; this . sport = sport ; this . numOfYears = numOfYears ; this . vegetarian = vegetarian ; }
te	9	public void warning ( SAXParseException ex ) { System . err . println ( "[Warning] " + getLocationString ( ex ) + ": " + ex . getMessage ( ) ) ; error_in_xml = true ; }
te	8	public void pintar ( Graphics g ) { g . drawImage ( imagen , 0 , 0 , SIZE . width , SIZE . height , null ) ; }
te	10	@ Test public void test2 ( ) { final NFAFactory factory = new NFAFactory ( "a+b*+c" ) ; final Regex regex = factory . build ( ) ; assert . assertTrue ( NFAWalk . walk ( regex , "ac" ) ) ; assert . assertTrue ( NFAWalk . walk ( regex , "abc" ) ) ; assert . assertTrue ( NFAWalk . walk ( regex , "abbc" ) ) ; assert . assertTrue ( NFAWalk . walk ( regex , "abbbc" ) ) ; }
te	3	public File getFile ( ) { return file ; }
te	5	public void stopDeplacement ( ) { if ( deplacement != null ) { deplacement . setRunning ( false ) ; } pile . clear ( ) ; }
te	5	public void create ( T entity ) { getEntityManager ( ) . persist ( entity ) ; }
te	6	public static void setTime ( String pack , int level , int time ) { level ( pack , level ) [ 0 ] = time ; autosave ( ) ; }
te	2	public void setChannelIndex ( byte channelIndex ) { this . channelIndex = channelIndex ; }
te	7	public QueueJobs ( String queueName , JQlessClient client ) { this . _queueName = queueName ; this . _client = client ; }
te	8	public HTTPSSession ( URI uri , String params , Map < String , Object > httpParams ) { super ( uri , params , httpParams ) ; }
te	1	private DateUtil ( ) { }
te	5	@ Override public void insertUpdate ( DocumentEvent e ) { updateTask ( ) ; }
te	4	@ Override public long getMask ( ) { return EventMulticaster . IRC_PRIVATE_MESSAGE_EVENT ; }
te	8	@ Override public < S , T > T visit ( SMPLVisitor < S , T > visitor , S state ) { return visitor . visitID ( this , state ) ; }
te	7	public ID3v2ChapterTOCFrameData ( boolean unsynchronisation , boolean isRoot , boolean isOrdered , String id , String [ ] children ) { super ( unsynchronisation ) ; this . isRoot = isRoot ; this . isOrdered = isOrdered ; this . id = id ; this . children = children ; }
te	2	private UnaryFilter ( long pointer ) { this . pointer = pointer ; }
te	8	private void CloseProgram ( java . awt . event . ActionEvent evt ) { System . exit ( 0 ) ; }
te	1	private OperatingSystemUtils ( ) { }
te	10	public lalr_item shift ( ) throws internal_error { lalr_item result ; if ( dot_at_end ( ) ) throw new internal_error ( "Attempt to shift past end of an lalr_item" ) ; result = new lalr_item ( the_production ( ) , dot_pos ( ) + 1 , new terminal_set ( lookahead ( ) ) ) ; add_propagate ( result ) ; return result ; }
te	10	@ Override public void load ( ) throws DataLoadFailedException { try { yamlConfiguration . load ( file ) ; cache . clear ( ) ; } catch ( IOException ex ) { throw new DataLoadFailedException ( ex ) ; } catch ( InvalidConfigurationException ex ) { throw new DataLoadFailedException ( ex ) ; } }
te	3	public Decision getDecision ( ) { return decision ; }
te	2	private void initid_star_1_subGotoes ( ) { id_star_1_subGotoes = new int [ ] { - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , 8 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 } ; }
te	4	public static void main ( String [ ] args ) { new SetupWizardFrame ( ) ; }
te	10	public static int triangleBmin ( int x [ ] [ ] ) { int min = x [ 0 ] [ 0 ] ; for ( int i = 0 ; i < x . length ; i ++ ) { System . out . print ( "\n" ) ; for ( int j = 0 ; j < x [ i ] . length ; j ++ ) { if ( i >= j ) { System . out . print ( x [ i ] [ j ] + " " ) ; if ( min > x [ i ] [ j ] ) { min = x [ i ] [ j ] ; } } } } System . out . println ( ) ; return min ; }
te	10	private boolean isAlreadyValidated ( PoolEntry < T > idleEntry ) { int hashCode = idleEntry . hashCode ( ) ; Object result = alreadyValidatedCheckMap . putIfAbsent ( hashCode , dummy ) ; return ( result != null ) ; }
te	1	public Node ( ) { }
te	9	public void addNumericalCoordinate ( double numericalCoordinate ) { double [ ] newCoords = new double [ this . coordinates . length + 1 ] ; System . arraycopy ( this . coordinates , 0 , newCoords , 0 , this . coordinates . length ) ; newCoords [ this . coordinates . length ] = numericalCoordinate ; this . isCoordinatesDirty = true ; setDirty ( ) ; }
te	9	protected DiskTableIndex ( ArrayList < String > firstKeys , ArrayList < Integer > offsets , String maxKey ) { this . firstKeys = firstKeys ; this . offsets = offsets ; this . minKey = firstKeys . get ( 0 ) ; this . maxKey = maxKey ; }
te	5	@ Override public boolean containsAll ( Collection < ? > c ) { return this . cards . containsAll ( c ) ; }
te	10	public static String getDescription ( int value ) { String description = "Undefined" ; switch ( value ) { case OTHER : description = "Other" ; break ; case KY_28 : description = "KY-28" ; break ; case KY_58 : description = "KY-58" ; break ; case NSVE : description = "Narrow Spectrum Secure Voice" ; break ; case WSVE : description = "Wide Spectrum Secure Voice" ; break ; case SINCGARS_ICOM : description = "SINCGARS ICOM" ; break ; } return description ; }
te	6	public static JSONArray toJSONArray ( XMLTokener x ) throws JSONException { return ( JSONArray ) parse ( x , true , null ) ; }
te	9	public static String readln ( boolean inclusive ) throws IOException { if ( inclusive ) { return readln ( ) ; } char d ; String result = new String ( ) ; while ( ( d = ( char ) input . read ( ) ) !=  && d !=  && d != - 1 ) { result += d ; } return result ; }
te	5	public int getMin ( int [ ] s ) { Arrays . sort ( s ) ; int min = s [ 0 ] ; return min ; }
te	10	public void testDefaultInterpolationWithNonInterpolatedValueAtEnd ( ) throws Exception { Map m = new HashMap ( ) ; m . put ( "name" , "jason" ) ; m . put ( "noun" , "asshole" ) ; String foo = "${name} is an ${noun}. ${not.interpolated}" ; assertEquals ( "jason is an asshole. ${not.interpolated}" , interpolate ( foo , m ) ) ; }
te	1	public ObjectFactory ( ) { }
te	6	public static void main ( String [ ] args ) { System . out . println ( 1 + 2 * 3 ) ; System . out . println ( ( 1 + 2 ) * 3 ) ; System . out . println ( 1 + ( 2 * 3 ) ) ; }
te	9	@ Override public Action loadObject ( JsonObject json ) { return new IrrigationTileAction ( Integer . parseInt ( json . getString ( "actionID" ) ) , Integer . parseInt ( json . getString ( "x" ) ) , Integer . parseInt ( json . getString ( "y" ) ) ) ; }
te	5	public boolean addListener ( LogicalClientsContainerListener listener ) { return this . listeners . add ( listener ) ; }
te	10	public AbstractDescr compile ( SymbolTable symbolTable , AbstractDescr descr ) { for ( IdentNode node : list ) { symbolTable . declare ( node . getIdentName ( ) , descr ) ; } return null ; }
te	5	public TreeMap < Integer , Meter > getMeters ( ) { return meters ; }
te	2	private void printWelcome ( ) { printMessage ( "Welcome to the World of Kraft Dinner Table(KDT) Maze!" ) ; printMessage ( "KDT is the first version of an incredibly boring adventure game." ) ; printMessage ( "If you find KD  you win! And the prize is an actual box of KD.\n" ) ; printMessage ( "You are lost. You are alone. You wander" ) ; printMessage ( "around the maze searching for an exit.\n" ) ; printMessage ( "Click the help menu option to view help manual." ) ; }
te	10	public Object clone ( ) throws CloneNotSupportedException { Kml result = ( Kml ) super . clone ( ) ; if ( result . networkLinkControl != null ) { result . networkLinkControl = ( NetworkLinkControl ) this . networkLinkControl . clone ( ) ; result . networkLinkControl . setParent ( result ) ; } if ( result . feature != null ) { result . feature = ( Feature ) this . feature . clone ( ) ; result . feature . setParent ( result ) ; } return result ; }
te	4	public static byte update ( byte data , byte crc ) { return CRC8_TABLE [ crc ^ data ] ; }
te	10	public double mean ( HashSet < Integer > exclusion , double threshold , boolean above ) { System . out . println ( "ArrayLinear: not implmented" ) ; System . exit ( 1 ) ; return 0.0 ; }
te	3	public EnumFacilityType getType ( ) { return type ; }
te	2	public OtpSelf self ( ) { return self ; }
te	1	public SynthIfException ( ) { super ( ) ; }
te	2	public boolean isAuthorized ( ) { return authorized ; }
te	5	@ GenerateMicroBenchmark public String threeConcat064Char ( ) { return threeConcat ( s [ 6 ] ) ; }
te	9	public static void main ( String [ ] args ) { SwingUtilities . invokeLater ( new Runnable ( ) { public void run ( ) { new DriverlessCar ( ) . GUIdisplay ( ) ; } } ) ; }
te	6	public void log ( final Object data ) { if ( timeStamped ) { this . log ( logType , data ) ; } else { this . logTimeless ( logType , data ) ; } }
te	8	public T addPlayer ( PlayerProfile profile ) { if ( this . profiles == null ) { this . profiles = new ArrayList < > ( ) ; } this . profiles . add ( profile ) ; return self ( ) ; }
te	3	@ Override public Dimension getWindowSize ( ) { return new Dimension ( 200 , 200 ) ; }
te	8	public boolean isPluginEnabled ( String name ) { Plugin plugin = plugins_ . get ( name ) ; if ( plugin != null ) { return plugin . isEnabled ( ) ; } else { return false ; } }
te	10	public void removeColumnData ( int matchNum , int roundNum , String columnName ) { MatchHistory hist = ( MatchHistory ) matchHistory . get ( new Integer ( matchNum ) ) ; if ( hist == null ) return ; hist . removeColumnData ( roundNum , columnName ) ; }
te	2	public void setDood ( boolean dood ) { this . dood = dood ; }
te	6	@ Override public void notifyObservers ( String event ) { this . observer . update ( event ) ; }
te	2	public void setData ( byte [ ] data ) { this . data = data ; }
te	2	public double value ( ) { return _value ; }
te	5	public ObjectInputStream getObjectInputStream ( InputStream in ) throws IOException { return new ObjectInputStream ( in ) ; }
te	7	public RobotBrokenProcessorException ( String message , Throwable cause , boolean enableSuppression , boolean writableStackTrace ) { super ( message , cause , enableSuppression , writableStackTrace ) ; }
te	8	@ Test public void POISON_attacking_ICE ( ) { assertEquals ( 1.0 , tc . getWeaknessResistance ( Type . POISON , Type . ICE ) , 0.0 ) ; }
te	2	public PaintableMessage indent ( int indent ) { this . indent = indent ; return this ; }
te	7	public void handleDownstream ( ChannelHandlerContext ctx , ChannelEvent e ) throws Exception { encoder . handleDownstream ( ctx , e ) ; }
te	1	public int recoverHealth ( ) { return 0 ; }
te	10	public static < T > Enumerable < T > createReverse ( final ListIterator < T > iterator ) { return new Enumerable < T > ( ) { { while ( iterator . hasNext ( ) ) { iterator . next ( ) ; } } @ Override public boolean hasNext ( ) { return iterator . hasPrevious ( ) ; } @ Override public T next ( ) { return iterator . previous ( ) ; } } ; }
te	4	public void setFirstName ( String value ) { this . firstName = value ; }
te	3	public String getClassName ( ) { return className ; }
te	1	public ScheduleBasicTest ( ) { }
te	7	private ReadNode readParser ( ) { read ( READ , "READ" ) ; return test ( STR ) ? new ReadNode ( string ( ) ) : new ReadNode ( ) ; }
te	5	public LaneAlreadyRegisteredException ( String message , Throwable cause ) { super ( message , cause ) ; }
te	1	public int statDrop ( ) { return 0 ; }
te	9	public Error ( Exception errorMessage ) { this . errorMessage = errorMessage . getMessage ( ) ; this . errorType = errorMessage . getClass ( ) . getName ( ) ; this . stackTrace = errorMessage . getStackTrace ( ) ; }
te	3	public String getInfo ( ) { return info ; }
te	1	public InfoFarmacia ( ) { super ( ) ; }
te	9	private void write ( int integer , int width ) throws JSONException { try { this . bitwriter . write ( integer , width ) ; if ( probe ) { log ( integer , width ) ; } } catch ( Throwable e ) { throw new JSONException ( e ) ; } }
te	9	public PersonWithReadOnlyFields ( String firstName , String lastName , Date birthDay , int sex ) { this . firstName = firstName ; this . lastName = lastName ; this . birthDay = birthDay ; this . sex = sex ; personProps = new HashMap ( ) ; }
te	7	public void multiply ( double a ) { value = value . multiply ( new BigDecimal ( a ) ) ; value = value . setScale ( numDigits , BigDecimal . ROUND_HALF_UP ) ; }
te	2	public Speaker build ( ) { return new Speaker ( this ) ; }
te	1	public int x ( ) { return x ; }
te	9	public void insertAtBottom ( Stack < Integer > s , int element ) { if ( s . isEmpty ( ) ) { s . push ( element ) ; return ; } int data = s . pop ( ) ; insertAtBottom ( s , element ) ; s . push ( data ) ; }
te	9	@ Override public boolean equals ( Object obj ) { if ( this == obj ) return true ; if ( obj == null ) return false ; if ( getClass ( ) != obj . getClass ( ) ) return false ; ProcDescriptor other = ( ProcDescriptor ) obj ; if ( labelInAssembler != other . labelInAssembler ) return false ; if ( lokal == null ) { if ( other . lokal != null ) return false ; } else if ( ! lokal . equals ( other . lokal ) ) return false ; return true ; }
te	1	public int process_id ( ) { return 2 ; }
te	8	@ ManyToOne @ JoinColumn ( name = "id_route" , referencedColumnName = "id" , nullable = false ) public Route getRouteByIdRoute ( ) { return routeByIdRoute ; }
te	4	public void method400 ( int i ) { buffer [ offset ++ ] = ( byte ) i ; buffer [ offset ++ ] = ( byte ) ( i >> 8 ) ; }
te	1	public ParseExpressionException ( ) { super ( ) ; }
te	6	private String buildOrderString ( String str , String [ ] arr ) { for ( int i = 0 ; i < arr . length ; i ++ ) str += arr [ i ] ; return str ; }
te	3	public Mind mind ( ) { return _mind ; }
te	8	protected void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doGet ( request , response ) ; }
te	9	public String getHeader ( String key ) { key = key . toLowerCase ( ) ; LinkedList < String > list = header . get ( key ) ; if ( list == null ) return null ; return list . getFirst ( ) ; }
te	7	private static Environment getWeakEnvironmentInstance ( ) { Environment e = defaultEnvironment == null ? null : defaultEnvironment . get ( ) ; if ( e == null ) { e = createDefaultEnvironment ( ) ; defaultEnvironment = new WeakReference < > ( e ) ; } return e ; }
te	6	public void attachToClient ( String clientKey ) { this . clientKey = clientKey ; this . status = ConnectionStatus . Attached ; }
te	10	public void _read ( org . omg . CORBA . portable . InputStream i ) { value = SensorHelper . read ( i ) ; }
te	10	public Matrix getH ( ) { Matrix X = new Matrix ( m , n ) ; double [ ] [ ] H = X . getArray ( ) ; for ( int i = 0 ; i < m ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( i >= j ) { H [ i ] [ j ] = QR [ i ] [ j ] ; } else { H [ i ] [ j ] = 0.0 ; } } } return X ; }
te	5	public void setByte ( byte x ) throws SQLException { this . ps . setByte ( parameterIndex ++ , x ) ; }
te	7	public int processCommand ( String s ) { TabView temp = ( TabView ) myTabbedPane . getSelectedComponent ( ) ; return processCommand ( temp , s ) ; }
te	2	public int getNickLength ( ) { return this . nickLength ; }
te	8	@ Override public boolean equals ( Object o ) { if ( ! ( o instanceof Attribute ) ) { return false ; } Attribute attribute = ( Attribute ) o ; return getName ( ) . equalsIgnoreCase ( attribute . getName ( ) ) ; }
te	2	public Texture ( int id ) { this . id = id ; }
te	5	public void unknownWordBootstrappingPreprocessing ( DataHolder dataholderHandler ) { this . myLearnerUtility . tagAllSentences ( dataholderHandler , "singletag" , "sentence" ) ; }
te	10	protected void executeFilters ( Set < DaoHelperFilter > filters , DBObject dbObject , DBCollection dbCollection ) { if ( filters != null ) { for ( DaoHelperFilter filter : filters ) { filter . doFilter ( dbCollection , dbObject ) ; } } }
te	10	private void bConnIpv4FocusLost ( java . awt . event . FocusEvent evt ) { bConnIpv4 . setText ( c . getHost ( ) ) ; }
te	6	private void stopPlaying ( ) { p . stop ( ) ; System . out . println ( "You tried to stop the playback" ) ; }
te	1	public Subj ( ) { }
te	10	@ Override public String toString ( ) { StringBuilder buffer = new StringBuilder ( ) ; for ( T key : this . keys ) { buffer . append ( key ) . append ( ":" ) . append ( getAdjacentsForVertex ( key ) ) ; buffer . append ( "\n" ) ; } return buffer . toString ( ) ; }
te	8	void readFramebufferUpdate ( ) { is . skip ( 1 ) ; nUpdateRectsLeft = is . readU16 ( ) ; endMsg ( ) ; handler . framebufferUpdateStart ( ) ; }
te	7	public void addBifPointers ( CellElement e1 , CellElement e2 ) { PairCellList . add ( new NCellPair ( e1 , e2 ) ) ; }
te	8	@ Override public void mediaChanged ( MediaPlayer arg0 , libvlc_media_t arg1 , String arg2 ) { }
te	4	@ Override public Font getFont ( ) { return new Font ( "Ubuntu" , Font . PLAIN , 11 ) ; }
te	2	public int get_drop_off_type ( ) { return _drop_off_type ; }
te	8	@ Override protected TopLevelBlock subBlockCopy ( int current_class ) throws BTFMatrixErrorException , InternalErrorException , InconsistentLinearSystemException { return new CBlock ( this , current_class ) ; }
te	2	boolean shouldDrainBuffers ( boolean delayable ) { return ! delayable ; }
te	4	public JSONArray put ( int value ) { put ( new Integer ( value ) ) ; return this ; }
te	8	public void makeTracks ( int [ ] list ) { for ( int i = 0 ; i < list . length ; i ++ ) { int key = list [ i ] ; if ( key != 0 ) { track . add ( makeEvent ( 144 , 9 , key , 100 , i ) ) ; track . add ( makeEvent ( 128 , 9 , key , 100 , i + 1 ) ) ; } } }
te	9	public ShutterControl ( CMMCore core , String StateDev , String ShutterDev ) { core_ = core ; StateDev_ = StateDev ; ShutterDev_ = ShutterDev ; }
te	4	public deathVerifier ( Stockage . Machine m ) { this . m = m ; }
te	9	public boolean heeftPermissie ( Permissie permissie ) { for ( Rol rol : rollen ) { for ( Permissie p : rol . getPermissies ( ) ) { if ( p . equals ( permissie ) ) { return true ; } } } return false ; }
te	6	@ WebEndpoint ( name = "DirectRoutePort" ) public DirectRoute getDirectRoutePort ( ) { return super . getPort ( new QName ( "http://PKG_DirectRoute/" , "DirectRoutePort" ) , DirectRoute . class ) ; }
te	2	public int getEndY ( ) { return endy ; }
te	7	@ Override public void close ( ) { System . out . println ( "Closing.." ) ; if ( process != null ) process . destroy ( ) ; }
te	2	public double getY ( ) { return y ; }
te	6	void setDimension ( byte value ) { super . setupFields ( ) ; ( ( UnitByte ) fields [ 3 ] ) . setValue ( value ) ; }
te	3	public Stopper ( Brains brains ) { this . brains = brains ; }
te	10	public static ArrayList < Cluster > makeClustersArray ( ArrayList < Comment > arrayOfComments ) { ArrayList < Cluster > returnArray = new ArrayList < Cluster > ( ) ; for ( int i = 0 ; i < arrayOfComments . size ( ) ; i ++ ) { returnArray . add ( new Cluster ( arrayOfComments . get ( i ) ) ) ; } return returnArray ; }
te	4	public void setMaxFractionDigits ( int value ) { numFormat . setMaximumFractionDigits ( value ) ; }
te	1	public int consoleUpdate ( ) { return this . consoleUpdate ; }
te	5	public Pair ( F first , S second ) { this . first = first ; this . second = second ; }
te	8	public void setPostalCode ( String value ) { String oldValue = postalCode ; postalCode = value ; propertySupport . firePropertyChange ( PROP_POSTAL_CODE , oldValue , postalCode ) ; }
te	2	public void clearBBox ( ) { bbox = null ; }
te	8	private void displayBufferedImage ( BufferedImage image ) { this . setContentPane ( new JScrollPane ( new JLabel ( new ImageIcon ( image ) ) ) ) ; this . validate ( ) ; }
te	2	public void setId ( int id ) { this . id = id ; }
te	4	public Rock ( String adjective ) { setName ( adjective ) ; }
te	2	static synchronized void incResizeDirtyByte ( ) { resizeDirtyByte ++ ; }
te	5	ProgramaTableModel ( List < Programa > l ) { this . programas = l ; }
te	3	public AccessDeniedException ( String message ) { super ( message ) ; }
te	10	@ Test public void testDimasExample ( ) { Graph graph = new Graph ( 4 ) ; graph . connectDirected ( 0 , 1 , 2 ) ; graph . connectDirected ( 1 , 2 , 2 ) ; graph . connectDirected ( 2 , 3 , 2 ) ; graph . connectDirected ( 0 , 3 , 5 ) ; DijkstraShortestPath dsp = new DijkstraShortestPath ( graph ) ; int sp = dsp . getShortestPathValue ( 0 , 3 ) ; assert . assertEquals ( sp , 5 ) ; }
te	8	public void actionPerformed ( ActionEvent e ) { set ( ) ; populateProduct ( ) ; updateNotice ( ) ; manage_pr_view . dispose ( ) ; }
te	5	@ Override public void registrarObservador ( ObservadorReproduccionPestania obs ) { this . observador = obs ; }
te	6	@ Override protected void bindImpl ( ) { GL30 . glBindFramebuffer ( GL30 . GL_FRAMEBUFFER , renderID ) ; }
te	2	public int getStartTimecode ( ) { return mStartTimecode ; }
te	4	public void setOriginalArtist ( String originalArtist ) { if ( id3v2Tag != null ) { id3v2Tag . setOriginalArtist ( originalArtist ) ; } }
te	9	public void paintTrack ( Graphics g ) { if ( slider . getOrientation ( ) == JSlider . HORIZONTAL ) { drawHorizontal ( g ) ; } else { drawVertical ( g ) ; } }
te	7	public Action makeDecision ( Game game ) { DecisionNode branch = this . getBranch ( game ) ; return branch . makeDecision ( game ) ; }
te	6	public Turbulence ( ) { initComponents ( ) ; this . setLocationRelativeTo ( null ) ; this . setModal ( true ) ; showInfo ( ) ; this . setVisible ( true ) ; }
te	3	public Project getProject ( ) { return this . project ; }
te	10	public ProductPanel ( Integer produktId , Integer idKlienta , DataInputStream in , DataOutputStream out ) { this . in = in ; this . out = out ; this . idKlienta = idKlienta ; this . idProduktu = produktId ; refresh ( ) ; }
te	7	public void addValue ( ) { if ( valueCount < values . length ) { values [ valueCount ] = lable . getValue ( ) ; valueCount ++ ; } else { for ( int i = 0 ; i < values . length - 1 ; i ++ ) { values [ i ] = values [ i + 1 ] ; } values [ values . length - 1 ] = lable . getValue ( ) ; } }
te	3	public poison ( SimpleExtras plugin ) { this . plugin = plugin ; }
te	4	public TransparentPanel ( LayoutManager layout ) { setLayout ( layout ) ; }
te	8	public boolean isSolid ( int x , int y ) { if ( x < 0 || y < 0 || x >= surface . length || y >= surface . length ) return true ; if ( surface [ x ] [ y ] . isSolid ( ) ) return true ; for ( Entity e : entities ) { if ( e . isSolid ( x , y ) ) return true ; } return false ; }
te	1	public Tablet ( ) { }
te	7	public T born ( ) { try { return constructor . newInstance ( ) ; } catch ( Exception e ) { throw new BorningException ( e ) ; } }
te	4	public CreateEventReturnObject ( boolean created , String message ) { super ( ) ; this . created = created ; this . message = message ; }
te	2	public void setMaxLodPixels ( double maxLodPixels ) { this . maxLodPixels = maxLodPixels ; }
te	10	public StringDeconstructor resultant ( ) { String tail = this . tail ; int beginIndex = tail . indexOf ( delimiter ) ; while ( beginIndex == 0 ) { tail = tail . substring ( delimiter . length ( ) ) ; beginIndex = tail . indexOf ( delimiter ) ; } if ( tail . equals ( "" ) ) return null ; if ( beginIndex == - 1 ) return new StringDeconstructor ( tail , "" , delimiter ) ; return new StringDeconstructor ( tail . substring ( 0 , beginIndex ) , tail . substring ( beginIndex ) , delimiter ) ; }
te	8	public static ArrayList getAssistItems ( String textLeftOfCursor ) { ArrayList proposals = new ArrayList ( ) ; if ( textLeftOfCursor . endsWith ( "\\" ) ) { proposals . add ( new Proposal ( "\\A" , "Beginning input \\A" , 1 ) ) ; proposals . add ( new Proposal ( "\\b" , "Word boundary \\b" , 1 ) ) ; proposals . add ( new Proposal ( "\\B" , "Non-word boundary \\B" , 1 ) ) ; proposals . add ( new Proposal ( "\\d" , "Digit \\d" , 1 ) ) ; proposals . add ( new Proposal ( "\\D" , "Non-digit \\D" , 1 ) ) ; proposals . add ( new Proposal ( "\\G" , "End of previous match \\G" , 1 ) ) ; proposals . add ( new Proposal ( "\\n" , "Newline \\n" , 1 ) ) ; proposals . add ( new Proposal ( "\\r" , "Carriage-return \\r" , 1 ) ) ; proposals . add ( new Proposal ( "\\s" , "Whitespace \\s" , 1 ) ) ; proposals . add ( new Proposal ( "\\S" , "Non-whitespace \\S" , 1 ) ) ; proposals . add ( new Proposal ( "\\t" , "Tab \\t" , 1 ) ) ; proposals . add ( new Proposal ( "\\w" , "Word \\w" , 1 ) ) ; proposals . add ( new Proposal ( "\\W" , "Non-word \\W" , 1 ) ) ; proposals . add ( new Proposal ( "\\z" , "End of input \\z" , 1 ) ) ; } if ( textLeftOfCursor . endsWith ( "(?" ) ) { proposals . add ( new Proposal ( "(?:" , "Non-capturing group (?:" , 2 ) ) ; proposals . add ( new Proposal ( "(?=" , "Positive lookahead (?=" , 2 ) ) ; proposals . add ( new Proposal ( "(?!" , "Negative lookahead (?!" , 2 ) ) ; proposals . add ( new Proposal ( "(?<=" , "Positive lookbehind (?<=" , 2 ) ) ; proposals . add ( new Proposal ( "(?<!" , "Negative lookbehind (?<!" , 2 ) ) ; } if ( textLeftOfCursor . endsWith ( "[" ) ) { proposals . add ( new Proposal ( "[0-9]" , "[0-9]" , 1 ) ) ; proposals . add ( new Proposal ( "[a-z]" , "[a-z]" , 1 ) ) ; proposals . add ( new Proposal ( "[A-Z]" , "[A-Z]" , 1 ) ) ; proposals . add ( new Proposal ( "[a-zA-Z]" , "[a-zA-Z]" , 1 ) ) ; proposals . add ( new Proposal ( "[a-zA-Z0-9]" , "[a-zA-Z0-9]" , 1 ) ) ; } return proposals ; }
te	8	public MovieGoer getMovieGoerByMobileNo ( String mobileNo ) { for ( MovieGoer m : movieGoers ) { if ( m . getMobileNo ( ) . equals ( mobileNo ) ) { return m ; } } return null ; }
te	2	public int getNew_at_count ( ) { return new_at_count ; }
te	8	private void writeObject ( ObjectOutputStream out ) throws IOException { out . writeObject ( delimiter ) ; out . writeObject ( routeName ) ; out . writeObject ( stationsForNewRoute ) ; out . writeObject ( newWay ) ; }
te	5	public List < Categoria > encontrarEntidadesCategoria ( int maxResultados , int primerResultado ) { return encontrarEntidadesCategoria ( false , maxResultados , primerResultado ) ; }
te	6	@ Override public void updateNCharacterStream ( int columnIndex , Reader x ) throws SQLException { }
te	6	public void transpose ( ) { int temp ; if ( bounds != null ) bounds . transpose ( ) ; for ( int i = 0 ; i < size * 2 ; i += 2 ) { temp = points [ i ] ; points [ i ] = points [ i + 1 ] ; points [ i + 1 ] = temp ; } }
te	8	public static boolean contains ( Object map , String ... keys ) { for ( final String key : keys ) { map = ( ( Map < String , Object > ) map ) . get ( key ) ; if ( map == null ) { return false ; } } return true ; }
te	5	public static boolean approxNull ( final float value , final float errorbound ) { return Math . abs ( value ) < Math . abs ( errorbound ) ; }
te	7	public TwoStackQueue ( Stack < String > a , Stack < String > b ) { enqueueStack = a ; dequeueStack = b ; }
te	9	final RegExp parseComplExp ( ) throws IllegalArgumentException { if ( check ( COMPLEMENT ) && match ( ~ ) ) return makeComplement ( parseComplExp ( ) ) ; else return parseCharClassExp ( ) ; }
te	10	public TransformationRule ( String match , String replace , int takeout , int matchLength , boolean start , boolean end ) { this . match = match . toCharArray ( ) ; this . replace = replace ; this . takeOut = takeout ; this . matchLength = matchLength ; this . start = start ; this . end = end ; }
te	7	public static void debugWithCallByValue2 ( ) { if ( LOGGER . isLoggable ( Level . INFO ) ) { LOGGER . info ( "This message is only constructed in Levels >= INFO:" + calculateValue ( "CBV2" ) ) ; } }
te	1	public BankAccount ( ) { }
te	7	@ Override protected int execute ( InputInterface input , OutputInterface output ) { throw new LogicException ( "You must override the execute() method in the concrete command class." ) ; }
te	8	public void setFileWatchDirectory ( String directory ) { if ( watcherThread . isAlive ( ) ) { stopFileWatcher ( ) ; } fileSystemWatcher . setPathLocation ( directory ) ; }
te	5	private static String generateMsg ( String expected , String actual ) { return String . format ( "Excepted '%s' but got '%s' instead." , expected , actual ) ; }
te	1	public ShellManagerDoerTest ( ) { }
te	10	public void paint ( Graphics g ) { super . paint ( g ) ; Graphics2D g2d = ( Graphics2D ) g ; g2d . setRenderingHint ( RenderingHints . KEY_ANTIALIASING , RenderingHints . VALUE_ANTIALIAS_ON ) ; drawText ( g ) ; }
te	5	public double arg ( ) { return Math . atan2 ( im , re ) ; }
te	8	@ Override public T visitExpr_binOp ( @ NotNull DecafParser . Expr_binOpContext ctx ) { return visitChildren ( ctx ) ; }
te	1	public boolean hasAProject ( ) { return true ; }
te	1	public boolean getSelected ( ) { return false ; }
te	2	public int rocPLookback ( int optInTimePeriod ) { return super . rocPLookback ( optInTimePeriod ) ; }
te	5	@ Override public void onDraw ( Canvas canvas ) { drawText ( canvas , false ) ; }
te	6	@ Override public void imprimirPrecio ( ) { System . out . println ( "Precio menor que: " + this . getPrecioA ( ) ) ; }
te	5	public void preorder ( Visitor v ) { v . init ( ) ; preorder ( root , v ) ; }
te	10	public E next ( ) { if ( nodes . isEmpty ( ) ) { return null ; } TreeNode < E > node = nodes . pop ( ) ; pushLeft ( node . right ) ; return node . val ; }
te	6	@ Override public void send ( PayLoad payload ) { super . send ( payload ) ; payload . writeFloat ( radius ) ; }
te	2	public RedBlackTree ( ) { root = null ; }
te	9	@ Override public StringBuilder getShortAddress ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( this . adresa ) ; sb . append ( "  " ) ; sb . append ( this . cityPart . getCity ( ) . getName ( ) ) ; return sb ; }
te	7	@ Override public void mouseMoved ( MouseEvent e ) { mapPanel . mousePoint = e . getPoint ( ) ; }
te	5	public void releaseSavepoint ( Savepoint savepoint ) throws SQLException { throw new UnsupportedOperationException ( "Not supported yet." ) ; }
te	1	public Item ( ) { }
te	2	public int getWidth ( ) { return width ; }
te	5	public CSVPrinter ( String filename ) { this ( ) ; setProperty ( FILE , filename ) ; }
te	2	public void setDocID ( int docID ) { this . docID = docID ; }
te	7	@ Override public final Impl parent ( Filter filter ) { return parents ( false , none ( ) , filter ) ; }
te	1	public DataAccessException ( ) { super ( ) ; }
te	1	public Room ( ) { }
te	3	public void save ( Node node ) { super . save ( node ) ; }
te	10	public SocketConnector ( InetSocketAddress inetSocketAddress , int ownPort , FoundSocket foundSocket ) { super ( Thread . currentThread ( ) . getThreadGroup ( ) , "HP Socket Connector: " + inetSocketAddress . getHostName ( ) ) ; this . inetSocketAddress = inetSocketAddress ; this . foundSocket = foundSocket ; }
te	7	private String getCitizenship ( HttpServletRequest request ) { return request . getParameter ( PersonColumnNames . citizenship ) ; }
te	1	protected boolean isFinished ( ) { return false ; }
te	3	public void setAccount ( String account ) { this . account = account ; }
te	9	@ Test public void ShouldFindRecurringCycleFor1Over7 ( ) { int input = 7 ; int expected = 6 ; RecurringCycleFinder finder = new RecurringCycleFinder ( ) ; int result = finder . FindCycleLength ( input ) ; assert . assertEquals ( expected , result ) ; }
te	4	public ArrayList < Colony > getColonies ( ) { return colonies ; }
te	2	public void setX ( int x ) { this . x = x ; }
te	10	public void awardUser ( int userID , int achievementID ) { DBConnection connection = DBConnection . sharedInstance ( ) ; try { connection . insert ( "INSERT INTO achievementsAwarded (userID  achievementID) " + "values(" + userID + "   " + achievementID + ")" ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }
te	9	public void setFieldValue ( _Fields field , Object value ) { switch ( field ) { case GET_LANG : if ( value == null ) { unsetGetLang ( ) ; } else { setGetLang ( ( String ) value ) ; } break ; } }
te	7	private void overwrite ( byte [ ] newValue , int startPosition ) { int currentValuePosition = 0 ; for ( int i = startPosition ; i < newValue . length ; i ++ ) { value [ i ] = newValue [ currentValuePosition ] ; currentValuePosition ++ ; } }
te	3	public ASPath getASPath ( ) { if ( this . updateAttr != null ) return this . updateAttr . getASPath ( ) ; return null ; }
te	7	public Satisfy ( F1 < T , boolean > pred ) { this . parser = new Check < T , T > ( new GetOne < T > ( ) , pred ) ; }
te	4	public PhoneIdStandardResponse standard ( String phone_number ) { return standard ( phone_number , null , null ) ; }
te	4	@ Override protected EntityManager getEntityManager ( ) { return em ; }
te	3	public Integer getCarryTimeID ( ) { return carryTimeID ; }
te	10	@ Override public void onResize ( int newWidth , int newHeight ) { this . buttonReturn . posX = newWidth / 2 - 150 ; this . buttonReturn . posY = newHeight - 80 ; this . list . posX = newWidth / 2 - 250 ; this . list . height = newHeight - 220 ; this . list . reCalculate ( ) ; }
te	2	public int getId ( ) { return id ; }
te	2	public ClubPlanner build ( ) { return new ClubPlanner ( this ) ; }
te	5	public Dimension preferredLayoutSize ( Container cont ) { return DIM ; }
te	6	public CqCrippleAction ( Entity actor , int skillId , Thing dobj ) { super ( actor , skillId , dobj ) ; }
te	5	@ Override public void visit ( LiteralInt node ) { println ( node ) ; }
te	7	public void run ( ) { if ( writethread == null ) writethread = Thread . currentThread ( ) ; interruptableRun ( ) ; assert ( ! channel . isOpen ( ) ) ; }
te	9	@ Override public boolean isInternal ( Position < E > v ) throws InvalidPositionException { checkPosition ( v ) ; return ( hasLeft ( v ) || hasRight ( v ) ) ; }
te	3	public String getIsExternalReference ( ) { return isExternalReference ; }
te	8	private void close ( Message outMessage ) throws IOException { OutputStream os = outMessage . getContent ( OutputStream . class ) ; os . flush ( ) ; os . close ( ) ; }
te	7	public boolean useTech ( TechType tech , Position target ) { return useTech_native ( pointer , tech , target ) ; }
te	4	@ Override public AbstractECodeFormatter createCodeFormatter ( ) { return new PythonECodeFormatter ( ) ; }
te	8	@ XmlElementDecl ( namespace = "" , name = "xStatus" ) public JAXBElement < String > createXStatus ( String value ) { return new JAXBElement < String > ( _XStatus_QNAME , String . class , null , value ) ; }
te	3	public String getSIMPLIFYMENU_NAMEZH ( ) { return SIMPLIFYMENU_NAMEZH ; }
te	9	private void makePieChart ( int height , int width ) { pieChart = new PieChart ( ) ; pieChart . setSize ( height * 2 , width * 2 ) ; pieChart . stats ( getPopulationDetails ( ) ) ; pieChart . repaint ( ) ; }
te	2	public static final int StateUpdateMatch ( int index ) { return index < 7 ? 7 : 10 ; }
te	10	private static Endpoint getEndpointByAddress ( String ip , int port ) { for ( Endpoint e : endpoints ) { if ( e . getIp ( ) . equals ( ip ) && e . getPort ( ) == port ) { return e ; } } return null ; }
te	1	public SipOutboundPricing ( ) { }
te	4	public static byte [ ] renderInt ( final int value ) { final byte [ ] retval = new byte [ 4 ] ; retval [ 0 ] = ( byte ) ( ( value >>> 24 ) & FF ) ; retval [ 1 ] = ( byte ) ( ( value >>> 16 ) & FF ) ; retval [ 2 ] = ( byte ) ( ( value >>> 8 ) & FF ) ; retval [ 3 ] = ( byte ) ( ( value >>> 0 ) & FF ) ; return retval ; }
te	9	@ Test public void testToStringSmoke ( ) { final ParsingTreeNode node = new ParsingTreeNode ( term ) ; assert . assertNotNull ( node . toString ( ) ) ; assert . assertTrue ( node . getChildrenCount ( ) == 0 ) ; }
te	4	public List < Object > getStack ( ) { return stack ; }
te	2	@ Override public void updateModelFromView ( ) { }
te	3	public String getShippingEmail ( ) { return shippingEmail ; }
te	8	public Integer execute ( ) throws CommandException { addArg ( propertyName + "=" + value ) ; return executeCommand ( ) . getReturnCode ( ) ; }
te	4	public HashMap < ITradeable , long > getTradeables ( ) { return tradeables ; }
te	1	JREImage ( ) { }
te	7	public void addAnimationSet ( AnimationSet set ) { animationSets . add ( set ) ; set . editorData = this ; fireAnimationSetAdded ( set ) ; }
te	6	@ Test public void without_argument_should_have_1_size ( ) { ArrayImpl list = new ArrayImpl ( ) ; assertEquals ( list . size ( ) , 1 ) ; }
te	5	public Dwarf ( ) { super ( ) ; hp = 20 ; defHP = 20 ; idNo ++ ; setId ( "d" + idNo ) ; }
te	1	public Builder ( ) { }
te	5	public ArrayList < Client > getClientsconnectes ( ) throws RemoteException { return getUtilisateursConnectes ( ) ; }
te	7	private boolean acceptsGzip ( HttpServletRequest request ) { String ae = request . getHeader ( "accept-encoding" ) ; return ae != null && ae . indexOf ( "gzip" ) != - 1 ; }
te	9	@ SuppressWarnings ( "unchecked" ) @ Override public < T extends GameObject > T add ( T go ) { if ( go instanceof ShootingBulletCharacter ) { return ( T ) addShootingCharacter ( ( ShootingBulletCharacter ) go ) ; } if ( go instanceof ShootingObjectImpl ) { return ( T ) addShootingCharacter ( ( ShootingObjectImpl ) go ) ; } return super . add ( go ) ; }
te	1	public TestGameState ( ) { }
te	5	public String generateContent ( ) { return double . toString ( 0.008 + ( random . nextDouble ( ) * ( 0.01 - 0.008 ) ) ) ; }
te	6	public boolean isWink ( ) { return Options . WINK . equals ( getAction ( ) . getActionEffect ( ) ) ; }
te	4	@ Override public int hashCode ( ) { int hash = 7 ; hash = 23 * hash + ( this . id != null ? this . id . hashCode ( ) : 0 ) ; return hash ; }
te	9	@ Test public void testSetEmailId_1 ( ) throws Exception { Contact fixture = new Contact ( new Integer ( 1 ) , "" , "" , "" , "" ) ; String emailId = "" ; fixture . setEmailId ( emailId ) ; }
te	1	StatusCanvas ( ) { this ( 128 , 24 ) ; }
te	8	private void fireMouseOverColorChanged ( BColor mouseOverColor , BColor newColor , BHexColorChooserWidget c ) { if ( c == null ) { return ; } c . firePropertyChange ( BHexColorChooserWidget . MOUSE_OVER_COLOR_CHANGED_PROPERTY , mouseOverColor , newColor ) ; }
te	7	public double valueDouble ( ) { final long now = System . nanoTime ( ) ; final double ns = now - this . value ; return ns * FACTOR_MILLI ; }
te	4	public void setGroupMemberList ( Collection < Participant > groupMemberList ) { this . groupMemberList = groupMemberList ; }
te	8	public boolean checkPassword ( String email , String password ) throws NoEmailException , IncorrectPasswordException { if ( ! ( users . byEmail ( email ) . checkPassword ( password ) ) ) throw ( new IncorrectPasswordException ( email , password ) ) ; return true ; }
te	5	public < CT > List < CT > findChildren ( List < CT > containerList , class < CT > type ) { return findChildren ( containerList , type , null ) ; }
te	2	public static Level easy ( ) { return new Level ( 9 , 9 , 10 , "01" , "Easy" ) ; }
te	5	SynthCanvas ( SynthWindow pa ) { this . pa = pa ; setBackground ( BACKGROUND_COLOR ) ; }
te	8	public void createSyllabe ( ) { name = name + chooseVoyelle ( ) ; int i = rand . nextInt ( 5 ) ; if ( i == 0 ) { name = name + chooseVoyelle ( ) ; } name = name + chooseConsonne ( ) ; int j = rand . nextInt ( 3 ) ; if ( j == 0 ) { name = name + chooseConsonne ( ) ; } }
te	9	public CSVParser ( char separator , char quotechar , char escape , boolean strictQuotes , boolean ignoreLeadingWhiteSpace ) { if ( anyCharactersAreTheSame ( separator , quotechar , escape ) ) { throw new UnsupportedOperationException ( "The separator  quote  and escape characters must be different!" ) ; } if ( separator == NULL_CHARACTER ) { throw new UnsupportedOperationException ( "The separator character must be defined!" ) ; } this . separator = separator ; this . quotechar = quotechar ; this . escape = escape ; this . strictQuotes = strictQuotes ; this . ignoreLeadingWhiteSpace = ignoreLeadingWhiteSpace ; }
te	9	public static int getComponentIndex ( Component component , Container container ) { Component [ ] components = container . getComponents ( ) ; for ( int i = 0 ; i < components . length ; i ++ ) { if ( components [ i ] == component ) { return ( i ) ; } } return ( - 1 ) ; }
te	2	public String value ( ) { return value ; }
te	1	protected void onStopMoving ( ) { }
te	2	public ShieldAspect ( ) { this . name = "shield" ; }
te	10	public PersonnageMenu ( ) { Competence [ ] compe = new Competence [ Personnage . NOMBRE_DE_COMPETENCES_PAR_DEFAUT ] ; for ( int j = 0 ; j < Personnage . NOMBRE_DE_COMPETENCES_PAR_DEFAUT ; j ++ ) { compe [ j ] = new BouleDeFeu ( ) ; } this . perso = new Personnage ( "Null" , 0 , 0 , 0 , 0 , compe , 2 ) ; this . image = new ImageIcon ( "" ) ; }
te	4	void press ( int I ) { instrument . press ( 64 + scale [ I ] , 0.5 ) ; }
te	5	private int getParticleSize ( Particle p ) { double time = p . getTime ( ) ; if ( time > 3 ) return 28 ; else if ( time > 2 ) return 20 ; else if ( time > .8 ) return 14 ; else if ( time > .4 ) return 12 ; else return 10 ; }
te	1	public Descendant2Entity ( ) { }
te	9	public void clear ( ) { Node < K , V > node = first ; while ( node != null ) { Node < K , V > next = node . next ; node . key = null ; node . value = null ; node . next = null ; node = next ; } first = null ; }
te	7	public void removeNativeLibrary ( NativeLibrary nativeLibrary ) { NotNullException . assertValue ( nativeLibrary , "nativeLibrary" ) ; if ( nativeLibraries == null ) return ; nativeLibraries . remove ( nativeLibrary ) ; }
te	8	@ Override public boolean equals ( Object obj ) { if ( this == obj ) return true ; if ( obj == null ) return false ; if ( getClass ( ) != obj . getClass ( ) ) return false ; Ticket other = ( Ticket ) obj ; if ( code == null ) { if ( other . code != null ) return false ; } else if ( ! code . equals ( other . code ) ) return false ; return true ; }
te	7	public XmlSerializer text ( String text ) throws IOException , IllegalArgumentException , IllegalStateException { return xs . text ( text ) ; }
te	2	public MashProcedureType createMashProcedureType ( ) { return new MashProcedureType ( ) ; }
te	9	public GridBagConstraints gbc ( int gridx , int gridy , int gridwidth , int gridheight , int fill , double weightx , double weighty ) { if ( gbc == null ) gbc = new GridBagConstraints ( ) ; gbc . gridx = gridx ; gbc . gridy = gridy ; gbc . gridwidth = gridwidth ; gbc . gridheight = gridheight ; gbc . fill = fill ; gbc . weightx = weightx ; gbc . weighty = weighty ; return gbc ; }
te	5	@ Override public void actionPerformed ( ActionEvent e ) { stopCellEditing ( ) ; }
te	3	public String getDataProviderID ( ) { return dataProviderID ; }
te	8	@ Override public void imprimirln ( String s ) throws IOException { fw . write ( s + "\n" ) ; fw . flush ( ) ; }
te	9	@ Override public Producto delete ( Producto producto ) throws EntidadInexistenteException { if ( productoTable . get ( producto . getCodigo ( ) ) == null ) { throw new EntidadInexistenteException ( ) ; } return productoTable . remove ( producto . getCodigo ( ) ) ; }
te	10	private void jButtonAdicionarActionPerformed ( java . awt . event . ActionEvent evt ) { this . telefone = jTextFieldTelefone . getText ( ) ; this . setVisible ( false ) ; }
te	3	public void setFormatter ( JqPlotResources formatter ) { this . formatter = formatter ; }
te	1	public MySelector ( ) { }
te	3	public PlayRound ( ) { initComponents ( ) ; currentCourse = null ; }
te	2	public void setX ( double x ) { this . x = x ; }
te	8	@ Test public void doTest ( ) { System . out . println ( check ( 26 , 65 ) ) ; for ( int i = 10 ; i <= 99 ; i ++ ) { for ( int j = i + 1 ; j <= 99 ; j ++ ) { if ( check ( i , j ) ) { System . out . println ( i + "/" + j ) ; } } } }
te	10	protected int determineElementsPerPart ( int numberOfPartitions ) { double numberOfElementsWithinFile = sourceFile . getFilledUpFromContentStart ( ) / sourceFile . getElementSize ( ) ; double elementsPerPart = numberOfElementsWithinFile / numberOfPartitions ; int roundNumber = ( int ) Math . ceil ( elementsPerPart ) ; return roundNumber ; }
te	3	public VisaGrp getVisaGrp ( ) { return visaGrp ; }
te	10	public void fillEncodingMap ( Map < Character , String > map , String prefix ) { if ( left == null ) { map . put ( character , prefix ) ; } else { left . fillEncodingMap ( map , prefix + "0" ) ; right . fillEncodingMap ( map , prefix + "1" ) ; } }
te	5	public void addViewOrdersListener ( ActionListener viewOrders ) { ordersButton . addActionListener ( viewOrders ) ; }
te	3	private void clickedChangeDict ( ) { coach . ChangeDictionary ( ) ; }
te	4	boolean overCount ( ) { boolean over = count >= lim ; if ( over ) count = - 1 ; return over ; }
te	9	protected Entity callImplementation ( ArgumentList args , Scope scope ) { this . lastCallArgs = args ; callHistory . add ( args ) ; return this ; }
te	8	private void quitButtonActionPerformed ( java . awt . event . ActionEvent evt ) { new QuitForm ( this ) . setVisible ( true ) ; }
te	1	public void print ( ) { }
te	6	public FrameListener ( GameView gameView ) { this . frame = gameView . getGameFrame ( ) ; this . init ( ) ; }
te	6	public List < Fornecedores > listarFornecedores ( Fornecedores fornecedor ) { return super . listar ( fornecedor . getClass ( ) ) ; }
te	1	private LinkHandler ( ) { }
te	7	@ Test public void sizeOfSingleNodeIsOne ( ) { BasicNode < Integer > node = new BasicNode < Integer > ( 50 ) ; assertEquals ( 1 , node . size ( ) ) ; }
te	8	@ Override public String format ( Date fromObject ) { try { return forFormatting . format ( fromObject ) ; } catch ( Exception e ) { } return null ; }
te	1	public boolean hasNext ( ) { return false ; }
te	1	public Versioninfo ( ) { }
te	5	public Hashtable < String , Tag > getTags ( ) { return this . tags ; }
te	7	public String toString ( ) { try { return [ + this . join ( " " ) + ] ; } catch ( Exception e ) { return null ; } }
te	7	public void writeFieldName ( final DataField field ) throws IOException { if ( field . getName ( ) != null ) { writeLiteral ( field . getName ( ) ) ; } else { writeLiteral ( FIELD ) ; } }
te	3	public OutputConnector getOutput ( ) { return output ; }
te	6	public void set_shape_pt_lat ( double in ) { _shape_pt_lat = in ; mHashCode = genHashCode ( _shape_pt_lat , _shape_pt_lon ) ; }
te	5	@ Override public boolean ajouterFourmi ( ) { this . getListeFourmis ( ) . add ( new Ouvriere ( ) ) ; return true ; }
te	4	public void setAddress ( String input_address ) { address = input_address ; }
te	6	public boolean displayWinner ( String winner ) { JOptionPane . showMessageDialog ( this , "The Winner is " + winner , "Winner" , JOptionPane . PLAIN_MESSAGE ) ; return true ; }
te	7	public ResultSet consultaId ( Proyecto proyecto ) throws SQLException { if ( proyectoDAO . exists ( proyecto ) == true ) { return proyectoDAO . consultaId ( proyecto ) ; } else { throw new SQLException ( "No se puede imprimir el proyecto por que este no existe en la base de datos" ) ; } }
te	5	@ Override public String toString ( ) { return getName ( ) + " (" + getId ( ) + ")" ; }
te	9	public static String toStringInteger ( String buffer ) { String returnValue = buffer ; int i = returnValue . length ( ) - 1 ; while ( ( i >= 0 ) && ( returnValue . charAt ( i ) != . ) ) { i -- ; } if ( i > 0 ) returnValue = returnValue . substring ( 0 , i ) ; return returnValue ; }
te	8	public static Suit suitFromLatin1Char ( char ch ) { for ( final Suit suit : Suit . values ( ) ) { if ( ch == PrintUtil . asLatin1Char ( suit ) ) { return suit ; } } throw new IllegalArgumentException ( "Unknown suit char: " + ch ) ; }
te	7	public final static Vec2i fromRounded ( Vec2f v ) { return new Vec2i ( round ( v . x ) , round ( v . y ) ) ; }
te	2	public double get_numberB ( ) { return _numberB ; }
te	1	Memory ( ) { }
te	7	public boolean canUnload ( Unit targetUnit , boolean checkCanTargetUnit , boolean checkPosition ) { return canUnload_native ( pointer , targetUnit , checkCanTargetUnit , checkPosition ) ; }
te	6	public Cat ( ) { System . out . println ( "in Cat constructor: " + this . getClass ( ) . getName ( ) + " this: " + this ) ; }
te	7	@ WebMethod public String getLocation ( @ WebParam ( name = "id" ) int id ) { return server_location . getLocation ( id ) ; }
te	8	public static JSONObject exportApplicationDescription ( Application app , Timestamp ts ) throws DBException { return exportApplication ( app , ts , false ) ; }
te	7	@ Test public void getMessage_server2 ( ) throws InvalidCommandException { Pong p = new Pong ( null , "server2" ) ; assert . assertEquals ( p . getMessage ( ) , "PONG :server2" ) ; }
te	5	@ Test public void shouldFailParsingAConcatenation ( ) { assertNull ( parser . parse ( "foobaz" ) ) ; }
te	2	public int getFocus ( ) { return focus ; }
te	10	public void updateScore ( ) { _highScoreInt . setText ( String . valueOf ( Fenetre . _score . getHigh ( ) ) ) ; _currentScoreInt . setText ( String . valueOf ( Fenetre . _score . getCurrent ( ) ) ) ; }
te	7	public double utilityAsHand ( ) { int u = 0 ; for ( int k : ks ) { u += k * k * k ; if ( k == wildcard_ordinal ) u += k * k * k ; } return Math . pow ( u , 1 / 3.0 ) ; }
te	10	public void testAsList ( ) { List < String > three = Strings . asList ( "1    2  3" ) ; assert three . contains ( "1" ) : "Expected to contain string \"1\"" ; assert three . equals ( new ArrayList ( Arrays . asList ( "1" , "2" , "3" ) ) ) : "Expected input \"1  2  3\" to translate to list {1 2 3}" ; }
te	7	@ Override public boolean equals ( Object pluginStatus ) { if ( ! ( pluginStatus instanceof PluginStatus ) ) { throw new ClassCastException ( "Object to compare must be of type PluginStatus" ) ; } return type == ( ( PluginStatus ) pluginStatus ) . type ; }
te	6	public void setTile ( JGPoint tileidx , String tilename ) { el . setTile ( tileidx , tilename ) ; }
te	6	public Businessman ( String businessmanName , Messenger messenger ) { this . businessmanName = businessmanName ; messenger . registerClient ( this ) ; }
te	9	@ Test public void returnsMinusOneWhenNoDoubleTerminator ( ) { byte [ ] buffer = { BYTE_T , BYTE_ESZETT , BYTE_G , BYTE_T } ; assertEquals ( - 1 , BufferTools . indexOfTerminator ( buffer , 0 , 2 ) ) ; }
te	9	@ Override public List < String > getNames ( ) { return Arrays . asList ( new String [ ] { a . getName ( ) , b . getName ( ) } ) ; }
te	1	public boolean isError ( ) { return false ; }
te	9	private void jButton1ActionPerformed ( java . awt . event . ActionEvent evt ) { UnitForm uf = new UnitForm ( this , true ) ; uf . setVisible ( true ) ; }
te	5	public ChartConfiguration < T > setTitle ( Title title ) { this . title = title ; return this ; }
te	8	public void addClient ( InetAddress a , String cmnty ) { clients . add ( new Client ( a , cmnty ) ) ; }
te	4	public static boolean isInputAnIntegerInArea ( String parameter , int setrange ) { return isInputAnIntegerInArea ( parameter , - setrange , setrange ) ; }
te	10	private void setTableUsuarios ( ) throws ParseException { Object [ ] header = { "CI" , "Nombre" , "Convenio" , "Barrio" , "Direccion" , "Telefono" , "C\u00F3digo Postal" , "EMail" , "Fecha de Registro" , "Fecha de Nacimiento" } ; Utilitaria . setJTable ( tableUsr , objFI . getUsuarios ( ) , header , - 1 ) ; setTableUsr ( ) ; }
te	1	private Strings ( ) { }
te	1	public Status ( ) { }
te	10	public static boolean isPalindrome ( String s ) { if ( s . length ( ) == 0 ) return true ; s = s . toLowerCase ( ) ; int i , j ; for ( i = 0 , j = s . length ( ) - 1 ; i < j ; i ++ , j -- ) { while ( ( s . charAt ( i ) < a || s . charAt ( i ) > z ) && ( s . charAt ( i ) < 0 || s . charAt ( i ) > 9 ) ) { i ++ ; if ( i >= s . length ( ) ) break ; } while ( ( s . charAt ( j ) < a || s . charAt ( j ) > z ) && ( s . charAt ( j ) < 0 || s . charAt ( j ) > 9 ) ) { j -- ; if ( j < 0 ) break ; } if ( i >= j ) break ; if ( s . charAt ( i ) != s . charAt ( j ) ) return false ; } return true ; }
te	2	public int getSalary ( ) { return salary ; }
te	10	public Equacao2Grau ( double a , double b , double c ) { this . valorA = a ; this . valorB = b ; this . valorC = c ; System . out . println ( "Coeficientes:" ) ; System . out . println ( "a = " + valorA + " / b = " + valorB + " / c = " + valorC ) ; System . out . println ( "" ) ; }
te	6	public ReceptKompDTO ( int receptId , RaavareDTO raavare , double nomNetto , double tolerance ) { this . receptId = receptId ; this . raavare = raavare ; this . nomNetto = nomNetto ; this . tolerance = tolerance ; }
te	2	public boolean getBooleanValue ( ) { return value ; }
te	6	@ Override public Iterator < String > iterator ( ) { return collect ( root , "" ) ; }
te	8	@ Override public String getMCstring ( ) { String s = "" ; for ( int i = 0 ; i < mc . length ; i ++ ) { if ( mc [ i ] == true ) s = s . concat ( "1" ) ; else s = s . concat ( "0" ) ; if ( i == 5 || i == 10 || i == 15 || i == 20 || i == 25 ) s = s . concat ( " " ) ; } return s ; }
te	8	@ Parameters ( { "url" , "browser" } ) @ BeforeClass public void setUp ( String url , String browser ) throws Exception { Start ( url , browser ) ; }
te	5	public void processKey ( String key ) { handler . handleKey ( key ) ; }
te	2	public void setLiftCoefficient ( float alpha ) { this . alpha = alpha ; }
te	6	@ ManyToOne @ JoinColumn ( name = "role_idrole" ) public Role getRole ( ) { return role ; }
te	3	public Lod getLod ( ) { return this . lod ; }
te	1	public PagamentAdapter ( ) { }
te	7	@ SuppressWarnings ( "unchecked" ) public AdjGraph ( int n ) { this . n = n ; edges = new ArrayList [ n ] ; for ( int v = 0 ; v < n ; v ++ ) { edges [ v ] = new ArrayList < Edge > ( ) ; } }
te	3	public String getItem ( ) { return item ; }
te	4	public static boolean isEmpty ( NodeList nl ) { return nl == null || nl . getLength ( ) == 0 ; }
te	9	protected void definirPotion ( ) { raz ( ) ; panel_case . removeAll ( ) ; definirObjet ( "potion" ) ; InterfaceEditeur . tab [ this . x ] [ this . y ] = this ; }
te	5	private static void exchange ( int i , int j ) { int temp = result [ i ] ; result [ i ] = result [ j ] ; result [ j ] = temp ; }
te	7	public Options ( String args [ ] , Multiplicity defaultMultiplicity ) { this ( args , Prefix . DASH , defaultMultiplicity , 0 , 0 ) ; }
te	5	public void panelActivated ( ) { if ( agreeButton . isSelected ( ) ) sif . setNextEnabled ( true ) ; }
te	7	@ Override public void loadValue ( String obj ) { this . name = obj ; LanguageRegistry . loadLang ( obj ) ; }
te	9	public String getParam ( ParameterNames paramName ) { String paramValue = ( params == null ) ? null : params . get ( paramName ) ; if ( paramValue == null ) { errors . add ( paramName + " is a required parameter" ) ; } return paramValue ; }
te	3	private void updateOkButtonToRestart ( ) { ok . setText ( "OK (requires restart)" ) ; }
te	4	public void set_data ( byte [ ] data ) { set_data ( data == null ? ( ByteBuffer ) null : ByteBuffer . wrap ( data ) ) ; }
te	3	public List getInfo ( ) { return info ; }
te	8	public static int evaluate ( DraughtsState ds , boolean white ) { int [ ] pieces = ds . getPieces ( ) ; int total = 0 ; for ( int piece : pieces ) { switch ( piece ) { case 0 : total += 0 ; break ; case 1 : total += 100 ; break ; case 2 : total -= 100 ; break ; case 3 : total += 300 ; break ; case 4 : total -= 300 ; break ; case 5 : total += 0 ; break ; } } if ( ! white ) { total = - total ; } return total ; }
te	6	protected void skipComment ( ) throws EOFException { while ( true ) { if ( nextChar ( ) == * ) { if ( nextChar ( ) == / ) { return ; } putBack ( ) ; } } }
te	5	public void add_piece ( Piece piece ) { _pieces . add ( piece ) ; }
te	3	public static BaseDeDatos GetInstance ( ) { if ( instance == null ) instance = new BaseDeDatos ( ) ; return instance ; }
te	5	@ Override public Object get ( int i ) { return result . get ( i ) ; }
te	9	public InsertParameterList add ( String parameterName , Object parameterValue ) { parameterList . add ( Parameter . Insert ( parameterName , parameterValue ) ) ; return this ; }
te	7	public void print ( ) { for ( int i = 0 ; i < position . length ; i ++ ) { System . out . println ( position [ i ] ) ; } }
te	5	public MemoryAttribute ( String name ) { super ( name , HttpCodecUtil . DEFAULT_CHARSET , 0 ) ; }
te	9	public TextboxControl ( String name , String caption , boolean _numbersOnly ) { this ( ) ; this . setName ( name ) ; Caption . setText ( caption ) ; numbersOnly = _numbersOnly ; }
te	9	public static void main ( String [ ] args ) { long ans = 0 ; for ( int i = 1 ; i <= 20 ; i ++ ) { ans = ans + jieCheng ( i ) ; } System . out . println ( ans ) ; }
te	10	public String getTextData ( Document doc , String tagName ) { Node node = getNodeWithName ( doc , tagName ) ; if ( node == null ) { return null ; } else { String data = node . getTextContent ( ) ; return data ; } }
te	8	public void enqueue ( Object obj ) { if ( enqEnd == null ) { enqEnd = new SListNode ( obj ) ; deqEnd = enqEnd ; size ++ ; } else { enqEnd . next = new SListNode ( obj ) ; enqEnd = enqEnd . next ; size ++ ; } }
te	8	@ Override public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( ) != obj . getClass ( ) ) { return false ; } final Manager other = ( Manager ) obj ; if ( ( this . workerID == null ) ? ( other . workerID != null ) : ! this . workerID . equals ( other . workerID ) ) { return false ; } return true ; }
te	8	private JLabel getL_Weight ( ) { if ( L_Weight == null ) { L_Weight = new JLabel ( ) ; L_Weight . setText ( "Gewicht in kg:" ) ; L_Weight . setPreferredSize ( new java . awt . Dimension ( 193 , 59 ) ) ; } return L_Weight ; }
te	2	@ Override public void defaultTick ( ) { }
te	2	public void run ( ) { super . run ( ) ; closeClient ( ) ; }
te	9	@ Test public void testSetPlayerName ( ) { String sentPlayerName = "Alec" ; RegisterRequest request1 = new RegisterRequest ( ) ; request1 . setPlayerName ( sentPlayerName ) ; assertEquals ( sentPlayerName , request1 . getPlayerName ( ) ) ; }
te	6	public FlyFollow ( GameBranch target , float followSpeed , float maxLength , float startLength ) { this . target = target ; this . followSpeed = followSpeed ; this . maxLength = maxLength ; this . startLength = startLength ; }
te	7	public Logger ( ) { bullet . put ( LogLevel . GAME , "* " ) ; bullet . put ( LogLevel . INFO , "> " ) ; bullet . put ( LogLevel . DEBUG , "! " ) ; }
te	10	private String compare ( String leftHandSide , String rightHandSide ) { if ( leftHandSide . equals ( "integer" ) ) { if ( rightHandSide . equals ( "integer" ) ) { return "integer" ; } else if ( rightHandSide . equals ( "real" ) ) { return "real" ; } else { SemanticWarningList . addWarning ( SemanticWarning . makeNewWarning ( "Unknown type for variable '" + rightHandSide + "'. Undeclared variable." ) ) ; } } else if ( leftHandSide . equals ( "real" ) ) { if ( rightHandSide . equals ( "integer" ) || rightHandSide . equals ( "real" ) ) { return "real" ; } } return EMPTY ; }
te	6	public java . util . List < String > getPosTagsList ( ) { return posTags_ ; }
te	9	private RuneType ( int lvl , int item , int altar , int abyss ) { this . craftingLevel = lvl ; this . itemId = item ; this . altarId = altar ; this . abyssPortalId = abyss ; }
te	5	TimeBO ( TimeDialog timeDialog , TimeListDialog timeListDialog ) { this . timeDialog = timeDialog ; this . timeListDialog = timeListDialog ; }
te	1	public int getDatesRightMargin ( ) { return 17 ; }
te	8	public static int getLOC ( final String sourceCodeText ) { final String [ ] lines = sourceCodeText . split ( "\n" ) ; int LOC = 0 ; for ( final String line : lines ) { if ( line . isEmpty ( ) ) { continue ; } LOC ++ ; } return LOC ; }
te	4	public SensorHolder ( Sensor initialValue ) { value = initialValue ; }
te	3	public Value eval ( ) { return A ; }
te	1	private void carregaComentaris ( ) { }
te	5	@ Override public String getKey ( ) { return keyPrefix + this . index ; }
te	1	private Example ( ) { }
te	7	public Animal getAnimal ( String type ) { if ( "canine" . equals ( type ) ) { return new Dog ( ) ; } else { return new Cat ( ) ; } }
te	9	private void updateCurrent ( Symbol proto ) { if ( proto != null ) { m_current . lbp = proto . lbp ; m_current . nud = proto . nud ; m_current . led = proto . led ; m_current . rval = proto . rval ; m_current . lval = proto . lval ; m_current . proto = proto ; } }
te	7	public boolean agregarAmigo ( int nc ) { for ( int n = 0 ; n < 3 ; n ++ ) { if ( amigos [ n ] == 0 ) { amigos [ n ] = nc ; return true ; } } System . out . println ( "No hay Espacio" ) ; return false ; }
te	3	public void deposito ( double m ) { saldo += m ; }
te	5	public int method438 ( ) { currentOffset += 2 ; int j = ( ( buffer [ currentOffset - 1 ] & ff ) << 8 ) + ( buffer [ currentOffset - 2 ] - 128 & ff ) ; if ( j > 32767 ) j -= 10000 ; return j ; }
te	7	public SelectableObject ( int x , int y , int width , int height , Animation animation ) { super ( x , y , width , height , animation ) ; }
te	10	public Wave getSection ( int start , int end ) { if ( start < 0 ) start = 0 ; if ( start >= wave . length ) start = wave . length - 1 ; if ( end >= wave . length ) end = wave . length - 1 ; if ( end < 0 ) end = 0 ; double [ ] w = new double [ end - start + 1 ] ; int i = 0 ; while ( start <= end ) w [ i ++ ] = wave [ start ++ ] ; return new Wave ( w , samplingRate , maxAmplitude ) ; }
te	3	public void setFecha ( Date fecha ) { this . fecha = fecha ; }
te	1	public boolean isDown ( ) { return isDown ; }
te	9	public static void main ( String [ ] args ) { try { PrioritizedGoalClient client = new PrioritizedGoalClient ( ) ; while ( client . update ( ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }
te	10	public long getLong ( String key ) throws JSONException { Object o = get ( key ) ; return o instanceof Number ? ( ( Number ) o ) . longValue ( ) : ( long ) getDouble ( key ) ; }
te	5	public int get ( int index ) throws NoSuchElementException { if ( index >= _size ) throw new NoSuchElementException ( ) ; return _array [ index ] ; }
te	9	public Vector getObjects ( String prefix , int cidmask , boolean suspended_obj , JGRectangle bbox ) { return el . getObjects ( prefix , cidmask , suspended_obj , bbox ) ; }
te	4	public Vector < String > getHospitals ( ) { return hospitals ; }
te	7	public Room south ( ) throws RoomNotAccessibleException { return LevelManager . getInstance ( ) . getCurrentLevel ( ) . getRoom ( "hall" ) ; }
te	10	private void flipButtonActionPerformed ( java . awt . event . ActionEvent evt ) { colorSec = colorActual ; secColorPanel . setBackground ( colorSec ) ; }
te	6	public String getId ( ) { return String . valueOf ( node . getProperty ( ID_PROPERTY ) ) ; }
te	9	@ Test public void testCresci ( ) { if ( ! dinosauro . isAtDimensioneMax ( ) ) { int curDimensione = dinosauro . getDimensione ( ) ; dinosauro . cresci ( ) ; assertEquals ( curDimensione + 1 , dinosauro . getDimensione ( ) ) ; } ageDinosauro ( ) ; if ( dinosauro . isAtDimensioneMax ( ) ) { int curDimensione = dinosauro . getDimensione ( ) ; dinosauro . cresci ( ) ; assertEquals ( curDimensione , dinosauro . getDimensione ( ) ) ; } }
te	4	public String getContentAsString ( ) { return content . getValue ( ) ; }
te	4	@ Override public Obstacle getObstacle ( ) { return new MovingObstacle ( ) ; }
te	3	public String getReceiver ( ) { return receiver ; }
te	1	public Report ( ) { }
te	1	public LineSeriesItem ( ) { }
te	4	static private final int jjMoveStringLiteralDfa0_0 ( ) { switch ( curChar ) { case 60 : return jjMoveStringLiteralDfa1_0 ( 10 ) ; default : return jjMoveNfa_0 ( 0 , 0 ) ; } }
te	7	public int getNeuronNumber ( Coords coords ) { if ( ( coords . x < rowNumber ) && ( coords . y < colNumber ) ) { return ( coords . x - 1 ) * colNumber + coords . y ; } return - 1 ; }
te	1	public StringValueCreator ( ) { super ( ) ; }
te	8	void refreshLibrarySelection ( ) { documentFrame . panelLibrary . removeSelection ( ) ; for ( ContainerComponent s : selectedComponents ) { documentFrame . panelLibrary . selectMoreRow ( s ) ; } }
te	6	public void evaluate ( Instance instance , Prediction prediction ) { add ( instance , prediction ) ; }
te	7	private Color ( int r , int g , int b ) { awtColor = new java . awt . Color ( r , g , b ) ; }
te	9	public void setMachineState ( String st ) { setMacAddr ( st ) ; setMode_buf ( st ) ; setTx_packets ( st ) ; setRx_packets ( st ) ; setTxrate ( st ) ; setLink_time ( st ) ; }
te	5	@ Override public MyDatabase getSgd ( ) { if ( client == null ) { return SgdBase . getSgd ( ) ; } else { return client . getSgd ( ) ; } }
te	4	public List < Event > getEvents ( ) { return events ; }
te	2	public void setX ( int x ) { this . x = x ; }
te	1	public PrimitivesTest ( ) { }
te	8	@ Override public T visitMethod_call1 ( @ NotNull DecafParser . Method_call1Context ctx ) { return visitChildren ( ctx ) ; }
te	10	@ Test public void test ( ) { int [ ] result = Generic_Func . get_num_sample ( 4 , 16 ) ; for ( int i = 0 ; i < result . length ; i ++ ) { System . out . println ( result [ i ] ) ; } }
te	9	@ Test public void DifferentLocationsTest ( ) { Location location = new Location ( 5 , 4 ) ; if ( location . equals ( new Location ( 5 , 5 ) ) ) { System . out . println ( "Failed at comparing 2 different locations" ) ; fail ( "Failed at comparing 2 different locations" ) ; } else { System . out . println ( "Succeeded at comparing 2 different locations" ) ; } }
te	10	private void checkConvexHull ( Point [ ] points ) { Point [ ] hullp = convexHull ( points ) ; assertTrue ( isCcwConvex ( hullp ) ) ; for ( Point p : points ) { int type = isInConvex ( p , hullp ) ; assertTrue ( type != 0 ) ; } }
te	6	@ Override public void render ( Graphics2D g ) { g . setColor ( color ) ; super . render ( g ) ; }
te	4	Earth ( final String imgUrl ) { super ( "Earth" , SYMBOL , imgUrl ) ; }
te	3	public static void main ( String [ ] args ) { }
te	1	private MinimizationOperations ( ) { }
te	7	public static List < Edge > getAdjacent ( Node source ) { return adjacencies . get ( source ) ; }
te	3	public final String getCliente ( ) { return cliente ; }
te	7	private static boolean checkCircularity ( Node node ) { Node firstPointer = node ; Node secondPointer = node != null ? node . getNext ( ) : null ; if ( firstPointer == null || secondPointer == null ) return false ; while ( firstPointer != null && secondPointer != null ) { if ( firstPointer . equals ( secondPointer ) ) return true ; firstPointer = firstPointer . getNext ( ) ; secondPointer = secondPointer . getNext ( ) . getNext ( ) ; } return false ; }
te	3	public String getFirstName ( ) { return firstName ; }
te	8	public void setVariables ( GradientFunction gradientFunction , float lagTime , List < float > retentionTimes , float stepSize ) { this . linearGradientFunction = gradientFunction ; this . lagTime = lagTime ; this . retentionTimes = retentionTimes ; this . stepSize = stepSize ; }
te	5	public PlayerTableMouseListener ( JTable table , LB2Kview view ) { this . table = table ; this . view = view ; }
te	7	public boolean iniciarServicosLeituraEscrita ( ) { try { this . sLeitura = new ServicoLeitura ( ) ; this . sEscrita = new ServicoEscrita ( ) ; return true ; } catch ( IOException ex ) { return false ; } }
te	1	public MsgType ( ) { }
te	8	public void Sucesor ( Bnodo raiz , int k ) { Bnodo q = raiz . Ramas [ k ] ; while ( ! Vacio ( q . Ramas [ 0 ] ) ) q = q . Ramas [ 0 ] ; raiz . Claves [ k - 1 ] = q . Claves [ 0 ] ; }
te	6	public User ( String userEmail , String userName ) { super ( ) ; UserEmail = userEmail ; UserName = userName ; }
te	6	public KiitosValikkoKuuntelija ( KiitosValikko valikko , JButton painike ) { this . takaisinValikkoonPainike = painike ; this . valikko = valikko ; }
te	8	@ Override public void sort ( int [ ] arr ) { heapify ( arr ) ; for ( int i = arr . length - 1 ; i > 0 ; i -- ) { int tmp = arr [ i ] ; arr [ i ] = arr [ 0 ] ; arr [ 0 ] = tmp ; siftDown ( arr , 0 , i ) ; } }
te	10	public MinObject ( MinObject proto , Object data ) { protos = new ArrayList < MinObject > ( ) ; if ( proto != null ) protos . add ( proto ) ; slots = new HashMap < String , MinObject > ( ) ; this . data = data ; }
te	8	@ Override public String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( System . getProperty ( "line.separator" ) ) ; return result . toString ( ) ; }
te	3	public TAGrp getTAGrp ( ) { return taGrp ; }
te	8	public void projectionEnabled ( ) { projectionDisabled ( ) ; if ( supports ( editor ) ) { initialize ( ) ; JavaCore . addElementChangedListener ( elementChangedListener ) ; } }
te	8	@ Test public void itExtractsTheHttpVersionFromRequestLine ( ) { request = new HttpRequest ( "GET / HTTP/1.1\r\n\r\n" ) ; assertThat ( request . getHttpVersion ( ) , is ( equalTo ( "HTTP/1.1" ) ) ) ; }
te	6	public void left ( Node < E > node ) { link ( previous , node ) ; link ( node , this ) ; }
te	2	public int getProperties ( ) { return properties ; }
te	4	private void handlePreferencesCancelClicked ( ) { restorePreferences ( ) ; preferencesDialog . setVisible ( false ) ; }
te	1	public Kayttoliittyma ( ) { }
te	7	@ Id @ GeneratedValue ( strategy = GenerationType . IDENTITY ) public int getId ( ) { return id ; }
te	10	public boolean deactivate ( ) { active_ = false ; for ( VirtualNode child : children_ . values ( ) ) { child . deactivate ( ) ; } return node_ . removeHandler ( virtual_handler_ . getName ( ) ) ; }
te	7	public void testRename ( ) { FileOp . rename ( ( new File ( "TestFileOp\\SmallSize.txt" ) ) . toPath ( ) , "SmallSize2.txt" ) ; assertTrue ( "TestFileOp\\SmallSize.txt is not renamed to SmallSize2.txt" , new File ( "TestFileOp\\SmallSize2.txt" ) . exists ( ) ) ; FileOp . rename ( ( new File ( "TestFileOp\\SmallSize2.txt" ) ) . toPath ( ) , "SmallSize.txt" ) ; assertTrue ( "TestFileOp\\SmallSize2.txt is not renamed to SmallSize.txt" , new File ( "TestFileOp\\SmallSize.txt" ) . exists ( ) ) ; }
te	1	public boolean isSeeded ( ) { return isSeeded ; }
te	8	@ Override public int build ( MyLevel level ) { return buildingTool . build ( start , lenght , floor , level ) ; }
te	9	@ Override public void set ( int index , E pdato ) { if ( _lenght == 0 ) { throw new NullPointerException ( "Lista vacia" ) ; } getIndex ( index ) . setDato ( pdato ) ; }
te	2	public double getPrice ( ) { return price ; }
te	10	@ Override public short [ ] getShortData ( ) { if ( ptr != 0 ) { return null ; } else { if ( isConstant ( ) ) { if ( length > getMaxSizeOf32bitArray ( ) ) return null ; short [ ] out = new short [ ( int ) length ] ; short elem = ( short ) data [ 0 ] ; for ( int i = 0 ; i < length ; i ++ ) { out [ i ] = elem ; } return out ; } else { short [ ] out = new short [ ( int ) length ] ; for ( int i = 0 ; i < length ; i ++ ) { out [ i ] = ( short ) data [ i ] ; } return out ; } } }
te	5	@ Override public < T > T [ ] toArray ( T [ ] arg0 ) { throw new UnsupportedOperationException ( ) ; }
te	10	public int getNumber ( int [ ] bags , int K ) { Arrays . sort ( bags ) ; int def = Integer . MAX_VALUE ; for ( int i = 0 ; i < bags . length - K + 1 ; i ++ ) { if ( bags [ i + K - 1 ] - bags [ i ] < def ) def = bags [ i + K - 1 ] - bags [ i ] ; } return def ; }
te	6	@ Override protected int execute ( InputInterface input , OutputInterface output ) { this . input = input ; this . output = output ; return 0 ; }
te	2	public void kill ( ) { closeServerSocket ( ) ; }
te	8	private void alarmOkActionPerformed ( java . awt . event . ActionEvent evt ) { alarmWindow . setVisible ( false ) ; }
te	4	public ArrayList < String > getUsers ( ) { return users ; }
te	2	public AlumnoBean ( int id ) { this . id = id ; }
te	5	public int [ ] vasenKaannos ( ) { if ( this . rotaatio <= 1 ) { this . rotaatio = maxRotaatio ; } else { this . rotaatio = this . rotaatio - 1 ; } return this . tetromino . getPisteet ( rotaatio ) ; }
te	3	public String getFarmacia ( ) { return farmacia ; }
te	9	public static void main ( String args [ ] ) { int i = Integer . parseInt ( args [ 0 ] ) ; switch ( i ) { case 1 : System . out . println ( "one" ) ; break ; case 2 : System . out . println ( "two" ) ; break ; case 3 : System . out . println ( "three" ) ; break ; case 4 : System . out . println ( "four" ) ; break ; default : System . out . println ( "Unrecoginized Number" ) ; break ; } }
te	2	public int getNumberOfGuests ( ) { return numberOfGuests ; }
te	8	public Organ [ ] createAndStoreOrganData ( ) { Organ [ ] organs = createOrganData ( ) ; for ( int i = 0 ; i < organs . length ; i ++ ) { oa . storeOrgan ( organs [ i ] ) ; } return organs ; }
te	1	public ListFarm ( ) { super ( ) ; }
te	2	public void remove ( ) throws UnsupportedOperationException { throw new UnsupportedOperationException ( "remove() is not supported." ) ; }
te	1	public ActorX ( ) { super ( ) ; }
te	4	public void setCoVariateTypes ( List < CoVariateType > coVariateTypes ) { this . coVariateTypes = coVariateTypes ; }
te	1	public ObjectFactory ( ) { }
te	3	public void setAddressId ( int value ) { addressId = value ; }
te	1	public FirePiranhaPlant ( ) { }
te	5	public void setWeekdayForeground ( Color weekdayForeground ) { this . weekdayForeground = weekdayForeground ; drawDayNames ( ) ; drawDays ( ) ; }
te	2	public void clear ( ) { map . clear ( ) ; }
te	6	public Producer ( String host , int port , int clientId , int queueId ) { super ( host , port , clientId , queueId ) ; }
te	1	protected void interrupted ( ) { }
te	9	public String getTelefonos ( ) { if ( preferenciaDAO == null ) { preferenciaDAO = PreferenciaDAOFactory . getPreferenciaDAO ( ) ; } Preferencia preferencia = preferenciaDAO . getPreferencia ( "TELEFONOS_NEGOCIO" ) ; return preferencia . getValor ( ) ; }
te	3	public Integer getMark ( ) { return mark ; }
te	9	@ Override public int hashCode ( ) { int result = unit != null ? unit . hashCode ( ) : 0 ; result = 31 * result + ( unitCommandType != null ? unitCommandType . hashCode ( ) : 0 ) ; result = 31 * result + ( target != null ? target . hashCode ( ) : 0 ) ; result = 31 * result + x ; result = 31 * result + y ; result = 31 * result + extra ; return result ; }
te	4	public Account ( int accountNumber , Person person ) { this . accountNumber = accountNumber ; this . person = person ; }
te	6	@ Override public void exitAssignment ( @ NotNull SSTParser . AssignmentContext ctx ) { }
te	3	CLI ( AuthServer server ) { this . server = server ; }
te	8	public void setAttribute ( TextAttribute key , Object value ) { if ( value == null ) { attributes . remove ( key ) ; } else { attributes . put ( key , value ) ; } }
te	6	@ Override public String toString ( ) { return "RoleRef [clusterName=" + clusterName + "  serviceName=" + serviceName + "  roleName=" + roleName + "]" ; }
te	10	public Vertex ( int v ) { this . vertex = v ; parent = null ; d = Integer . MAX_VALUE ; color = Color . WHITE ; }
te	2	public int getLeft ( ) { return left ; }
te	5	public void tag ( String tag ) { if ( ! tags . contains ( tag ) ) { tags . add ( tag ) ; } }
te	2	public Time ( int second ) { this ( 0 , 0 , 0 , second ) ; }
te	10	@ Override public void visit ( MyVector mVector ) { Integer num = null ; filep . openFile ( ) ; while ( ( num = filep . nextInt ( ) ) != null ) { mVector . addElement ( num ) ; } }
te	9	public static int getAge ( Date f ) { Date today = new Date ( ) ; if ( today . compareTo ( f ) < 0 ) { return - 1 ; } if ( today . get ( YEAR ) == f . get ( YEAR ) ) { return 0 ; } if ( today . get ( MONTH ) > f . get ( MONTH ) ) { return today . get ( YEAR ) - f . get ( YEAR ) ; } if ( today . get ( MONTH ) == f . get ( MONTH ) && today . get ( DAYOFMONTH ) >= f . get ( DAYOFMONTH ) ) { return today . get ( YEAR ) - f . get ( YEAR ) ; } return today . get ( YEAR ) - f . get ( YEAR ) - 1 ; }
te	4	public void set_agency_id ( String in ) { _agency_id = in ; }
te	3	public Date getFechaIngreso ( ) { return fechaIngreso ; }
te	1	public UserNotifyPO ( ) { }
te	2	public long getTestingTime ( ) { return testingTime ; }
te	5	public void tableChanged ( TableModelEvent e ) { logger . logDebug ( "ENTERED SoundCtrl::tableChanged " ) ; }
te	6	public void deviceRemoved ( Device dev ) throws IOException { getBusOf ( dev ) . deviceRemoved ( dev , model ) ; }
te	6	public String getCommunity ( ) { Community comm = this . updateAttr . getCommunity ( ) ; return comm . toString ( ) ; }
te	4	public Iterator keys ( ) { return this . keySet ( ) . iterator ( ) ; }
te	2	public String toKML ( ) { return toKML ( false ) ; }
te	5	public Point getMouseLocation ( ) { return new Point ( input . getMouseX ( ) , input . getMouseY ( ) ) ; }
te	10	public int compareElementsAt ( int beginLoc , int endLoc ) { long firstSize = ( ( FileNode ) toSort [ beginLoc ] ) . totalSize ( ) ; long secondSize = ( ( FileNode ) toSort [ endLoc ] ) . totalSize ( ) ; if ( firstSize != secondSize ) { return ( int ) ( secondSize - firstSize ) ; } return ( ( FileNode ) toSort [ beginLoc ] ) . toString ( ) . compareTo ( ( ( FileNode ) toSort [ endLoc ] ) . toString ( ) ) ; }
te	3	@ Override public String getResourcePath ( ) { return "/info/usmans/QuranProject/resources/qurantext/quran-uthmani-different-tanween.xml" ; }
te	7	@ Override @ Transactional public Kit getEventKit ( Integer eventId ) { return eventDAO . getEventKit ( eventId ) ; }
te	3	@ Override public int intValue ( ) { return value ; }
te	2	public void setDown ( int down ) { this . down = down ; }
te	7	public NetworkMessage read ( ) { NetworkMessage result = null ; synchronized ( messages ) { if ( messages . size ( ) != 0 ) { result = messages . remove ( 0 ) ; } messages . notifyAll ( ) ; } return result ; }
te	9	public void sendUpdates ( ) { buffer . clear ( ) ; if ( ! values . write ( buffer , false ) ) return ; buffer . flip ( ) ; sendPacket ( new PlayerUpdatePacket ( buffer , true ) ) ; values . nextTick ( ) ; }
te	8	public void newProduct ( Integer ID , String p_name , String p_descrription ) { Product product = new Product ( ID , p_name , p_descrription ) ; product . newProduct ( ) ; }
te	10	public static JTextField getTextField ( int size ) { JTextField component = new JTextField ( size ) ; component . setBackground ( BACKGROUND_COLOR_TXTA ) ; component . setForeground ( TEXT_COLOR_TXTA ) ; component . setFont ( FONT_TYPE_TXTA ) ; return component ; }
te	10	public int addSound ( byte [ ] sound ) { if ( sound == null ) { return SoundLibrary . SOUND_ID_BEEP ; } SoundOffsets . add ( SoundSize ) ; SoundSize += sound . length ; Sounds . add ( sound ) ; return Sounds . size ( ) - 1 ; }
te	1	private Matrices ( ) { }
te	6	public Iterator < byte [ ] > getIterator ( ) throws IOException { if ( init ( ) ) { return store . iterator ( ) ; } return null ; }
te	3	public static DBHandler getInstance ( ) { if ( instance == null ) instance = new DBHandler ( ) ; return DBHandler . instance ; }
te	3	public Date getDate ( ) { return date ; }
te	3	public static void main ( String [ ] args ) { }
te	1	public void flush ( ) { }
te	9	public void add ( int pad , GridBagConstraints c , JComponent comp ) { c . insets = new Insets ( pad , 5 , 0 , 5 ) ; this . add ( comp , c ) ; c . gridy += 1 ; }
te	2	public int xgetAssignedKeyCode ( ) { return assignedKeyCode ; }
te	1	public int getCarbonButtonVerticalSpace ( ) { return 138 ; }
te	4	public void setData ( byte [ ] data ) { this . data = data ; if ( data == null ) dataLength = 0 ; else dataLength = data . length ; }
te	4	@ Inject private void setPrivateMethod ( Aaa privateMethod ) { this . privateMethod = privateMethod ; }
te	4	public GregorianCalendar getZeroStatusDate ( ) { if ( null != documentStatusesDates ) { return documentStatusesDates . get ( 0 ) ; } else { return null ; } }
te	7	public LinearSystem ( QNModel qnm , CoMoMBasis basis ) throws InternalErrorException { this . qnm = qnm ; this . basis = basis ; basis . initialiseBasis ( ) ; }
te	9	public static void main ( String [ ] args ) { Main main = new Main ( ) ; Turret turret = new Turret ( 30 , 30 ) ; main . register ( turret ) ; main . register ( new Target ( 100 , 100 ) ) ; while ( true ) { turret . adjust ( ) ; } }
te	6	public String getCoordinates ( ) { String coordStr = "" ; for ( int i = 0 ; i < this . coordinates . length ; i ++ ) { coordStr += this . coordinates [ i ] ; if ( i < ( this . coordinates . length - 1 ) ) { if ( i % 3 == 2 ) { coordStr += " " ; } else { coordStr += " " ; } } } return coordStr ; }
te	7	public Pool ( PoolObjectFactory < T > factory , int maxSize ) { this . factory = factory ; this . maxSize = maxSize ; this . freeObjects = new ArrayList < T > ( maxSize ) ; }
te	5	public URL getProfileImageURL ( ) { try { return new URL ( profileImageUrl ) ; } catch ( MalformedURLException ex ) { return null ; } }
te	3	public void setIdentifiers ( String [ ] identifiers ) { this . identifiers = identifiers ; }
te	3	public Integer getAid ( ) { return aid ; }
te	5	@ Override public void run ( DataHolder dataholderHandler ) { unknownWordBootstrapping ( dataholderHandler ) ; }
te	1	public Servico ( ) { }
te	2	public void setMaxAge ( int maxAge ) { this . maxAge = maxAge ; }
te	10	@ Override public int hashCode ( ) { final int prime = 31 ; int result = 1 ; result = prime * result + ( ( id == null ) ? 0 : id . hashCode ( ) ) ; result = prime * result + ( ( kineticLaw == null ) ? 0 : kineticLaw . hashCode ( ) ) ; result = prime * result + Arrays . hashCode ( listOfProducts ) ; result = prime * result + Arrays . hashCode ( listOfReactants ) ; result = prime * result + ( ( reversible == null ) ? 0 : reversible . hashCode ( ) ) ; return result ; }
te	3	public Node getNext ( ) { return this . next ; }
te	4	public Set < Assignments > getAssignments ( ) { return assignments ; }
te	3	public int getGameTime ( ) { return gameTimer . getTimeSec ( ) ; }
te	2	public String tableName ( ) { return tableName ; }
te	7	public HandlerRegistration addClickHandler ( ClickHandler handler ) { return addDomHandler ( handler , ClickEvent . getType ( ) ) ; }
te	5	@ Override public float getExtrusionSpeed ( ) { return ( extrusion / getTimeAccel ( ) ) * 60f ; }
te	8	private void resizeBuf ( ) { if ( buf == null ) { buf = new byte [ 8192 ] ; pos = 0 ; readPos = 0 ; } else { byte [ ] b = new byte [ buf . length * 2 ] ; System . arraycopy ( buf , 0 , b , 0 , buf . length ) ; buf = b ; } }
te	5	public FileLinkList ( final DefaultTreeModel model ) { super ( model ) ; setAllowsChildren ( true ) ; setUserObject ( "Files" ) ; }
te	8	public void setRecursiveNotDirty ( ) { super . setRecursiveNotDirty ( ) ; if ( this . iconStyle != null && this . iconStyle . isDirty ( ) ) { this . iconStyle . setRecursiveNotDirty ( ) ; } if ( this . labelStyle != null && this . labelStyle . isDirty ( ) ) { this . labelStyle . setRecursiveNotDirty ( ) ; } if ( this . lineStyle != null && this . lineStyle . isDirty ( ) ) { this . lineStyle . setRecursiveNotDirty ( ) ; } if ( this . polyStyle != null && this . polyStyle . isDirty ( ) ) { this . polyStyle . setRecursiveNotDirty ( ) ; } if ( this . balloonStyle != null && this . balloonStyle . isDirty ( ) ) { this . balloonStyle . setRecursiveNotDirty ( ) ; } if ( this . listStyle != null && this . listStyle . isDirty ( ) ) { this . listStyle . setRecursiveNotDirty ( ) ; } }
te	2	public JComponent controlPanel ( ) { return controlPanel ; }
te	2	public int getIntAdderIndex ( ) { return intAdderIndex ; }
te	10	public static int getChampId ( JSONArray champs , String name ) { try { return getChampByName ( champs , name ) . getInt ( "id" ) ; } catch ( JSONException e ) { e . printStackTrace ( ) ; } return - 1 ; }
te	8	public static boolean check ( String text ) { for ( int i = 0 ; i < text . length ( ) ; i ++ ) { if ( ! test . contains ( text . charAt ( i ) ) ) return false ; } return true ; }
te	5	public void setAreas ( ArrayList < Area > param ) { areas = param ; }
te	8	public void setUniform ( String uniformName , BaseLight baseLight ) { setUniform ( uniformName + ".color" , baseLight . getColor ( ) ) ; setUniformf ( uniformName + ".intensity" , baseLight . getIntensity ( ) ) ; }
te	6	void addSearchResult ( WebResults webResults ) { if ( resultList == null ) { resultList = new ArrayList < WebResults > ( ) ; resultList . add ( webResults ) ; } else { resultList . add ( webResults ) ; } }
te	3	public Expresion getCondicion2 ( ) { return condicion2 ; }
te	10	public static UnregisterRequest Create ( ByteList messageBytes ) throws Exception { UnregisterRequest result ; if ( messageBytes == null || messageBytes . getLength ( ) < 6 ) { throw new Exception ( "Invalid message byte array" ) ; } if ( messageBytes . peekShort ( ) != UnregisterRequest . getClassID ( ) ) { throw new Exception ( "Invalid message type" ) ; } else { result = new UnregisterRequest ( ) ; result . decode ( messageBytes ) ; } return result ; }
te	7	private boolean proximityChecker ( int objX , int objY , int charX , int charY ) { return Math . abs ( objX - charX ) <= 1 && Math . abs ( objY - charY ) <= 1 ; }
te	3	public Role ( Object identifier ) { super ( identifier ) ; }
te	6	public void showSeason ( int year ) { SeasonView view = new SeasonView ( this , currentDataProvider , year ) ; setView ( view ) ; }
te	9	@ Test ( expected = IllegalArgumentException . class ) @ Category ( FastTest . class ) public void testNotAMappedEnum ( ) { MappedEnumHelper . forEnum ( NotAMappedEnum . class ) ; }
te	2	public void setMaxOutputSize ( double maxOutputSize ) { this . maxOutputSize = maxOutputSize ; }
te	3	public void setCXpos ( double param ) { cxpos = param ; }
te	8	public static URI getPostListURI ( String leprosorium ) { String hostname = leprosorium != null ? leprosorium + "." + LEPRA_HOSTNAME : LEPRA_HOSTNAME ; return newURI ( PROTOCOL + hostname + "/ajax/index/moar/" ) ; }
te	3	public static Card getCard ( ) { return card ; }
te	10	@ Override public void paintComponent ( Graphics g ) { Image image = new ImageIcon ( IMAGE_PATH ) . getImage ( ) ; g . drawImage ( image , 3 , 4 , this ) ; }
te	10	public RegiosPoint subtract ( RegiosPoint pt ) { return new RegiosPoint ( this . getRegiosWorld ( ) , this . x - pt . getX ( ) , this . y - pt . getY ( ) , this . z - pt . getZ ( ) ) ; }
te	4	public void setInContext ( Pipe contents ) { this . currentPipe = contents ; }
te	3	public SSMS getSSMS ( ) { return ssms ; }
te	10	public static int getAtomLength ( String sexpStr ) { int kakkoCnt = 0 ; int i ; for ( i = 0 ; i < sexpStr . length ( ) ; i ++ ) { String s = sexpStr . substring ( i , i + 1 ) ; if ( s . equals ( "(" ) ) { kakkoCnt ++ ; } else if ( s . equals ( ")" ) ) { kakkoCnt -- ; } if ( ! sexpStr . startsWith ( "(" ) && ( s . equals ( "(" ) || s . equals ( ")" ) || s . equals ( " " ) ) ) { i -= 1 ; break ; } else { if ( kakkoCnt == 0 && ( s . equals ( "(" ) || s . equals ( ")" ) || s . equals ( " " ) ) ) { break ; } } } return i ; }
te	2	public double getValorProduto ( ) { return valorProduto ; }
te	10	public void removeComponent ( Entity entity , Component component ) { getComponents ( entity ) . remove ( component ) ; eventManager . dispatch ( new EntityChangedEvent ( entity ) ) ; }
te	7	public void keyReleased ( KeyEvent event ) { if ( event . getKeyCode ( ) == KeyEvent . VK_ENTER ) { if ( editMode ) exitEditMode ( ) ; } }
te	9	public SchemeObject bindingsArguments ( SchemeObject bindings ) { return bindings . isEmptyList ( ) ? SchemeObject . THE_EMPTY_LIST : SchemeObject . cons ( bindingArgument ( bindings . getCar ( ) ) , bindingsArguments ( bindings . getCdr ( ) ) ) ; }
te	4	public void setPurchaseOrderContactPhone ( String value ) { this . purchaseOrderContactPhone = value ; }
te	6	static final void indent ( Writer writer , int indent ) throws IOException { for ( int i = 0 ; i < indent ; i += 1 ) { writer . write (   ) ; } }
te	10	public void insert ( ) { linkedListRange = new LinkedListRange ( ) ; root = new LinkedListRange ( 0 , 10 ) ; secondNode = new LinkedListRange ( 11 , 20 ) ; thirdNode = new LinkedListRange ( 21 , 30 ) ; fourthNode = new LinkedListRange ( 31 , 40 ) ; fifthNode = new LinkedListRange ( 41 , 50 ) ; sixthNode = new LinkedListRange ( 51 , 60 ) ; seventhNode = new LinkedListRange ( 61 , 70 ) ; linkedListRange . insert ( secondNode , root ) ; linkedListRange . insert ( thirdNode , root ) ; linkedListRange . insert ( fourthNode , root ) ; linkedListRange . insert ( fifthNode , root ) ; linkedListRange . insert ( sixthNode , root ) ; linkedListRange . insert ( seventhNode , root ) ; }
te	10	public static void main ( String ... args ) { Bid bid = bidManager . getBid ( 1 ) ; System . out . println ( bid ) ; }
te	8	@ Test public void testSize ( ) { System . out . println ( "size" ) ; assertTrue ( instance . size ( ) == 1 ) ; }
te	4	@ Override public void controllerButtonReleased ( int i , int i1 ) { }
te	9	public void destroyShare ( String sharename ) throws IOException { Share . destroy ( token , sharename ) ; pool . removeShare ( sharename ) ; }
te	8	@ Test public void testDiv ( ) { BigDecimal eval = new Expression ( "8/2" ) . eval ( ) ; assertTrue ( expected . equals ( eval ) ) ; }
te	7	public void setNonadmDate ( String aval ) throws Exception { nonadmdate = dtfmt . parse ( aval ) ; }
te	8	public static void main ( String [ ] args ) { MinhaThread t = new MinhaThread ( ) ; Thread t2 = new Thread ( t ) ; t2 . start ( ) ; }
te	10	@ Test ( expected = InterpolationCycleException . class ) public void testCyclesWithLinked ( ) { FixedStringSearchInterpolator first = create ( properttyBasedValueSource ( "key1" , "${key2}" ) ) ; FixedStringSearchInterpolator second = create ( first , properttyBasedValueSource ( "key2" , "${key1}" ) ) ; second . interpolate ( "${key2}" ) ; }
te	9	public PLImageNode ( File imageFile ) throws IOException { _data = ImageIO . read ( imageFile ) ; _name = imageFile . getName ( ) ; }
te	3	@ XmlAttribute public int getId ( ) { return id ; }
