tr	IDF	@ Override public Object parseOneValue ( Element xml ) { return new INDIBLOBValue ( xml ) ; }
tr	KEY	public int getNumberOfMeasuresTrimmed ( ) { return trimmedMeasures . size ( ) ; }
tr	IDF	@ Override public String toString ( ) { String data ; DecimalFormat df = new DecimalFormat ( "000000000000" ) ; data = df . format ( idremito ) ; return data ; }
tr	IDF	@ Override public OutputStream getOutputStream ( ) { return toDriver . getOutputStream ( ) ; }
tr	IDF	public void draw ( BufferedImage canvas , boolean drawEdge , boolean drawCorners ) { for ( int y = 2 ; y < _height - 2 ; y ++ ) for ( int x = 2 ; x < _width - 2 ; x ++ ) { if ( _image [ y ] [ x ] == FILLED ) { canvas . setRGB ( x + _left , y + _top , ImageSegmenter . _drawColor [ _type ] ) ; } else if ( drawEdge && _image [ y ] [ x ] == EDGE ) { canvas . setRGB ( x + _left , y + _top , 000000 ) ; } } if ( drawCorners ) { findLines ( ) ; if ( _lines != null ) for ( LineSegment line : _lines ) line . draw ( canvas . createGraphics ( ) , _left , _top ) ; } }
tr	KEY	public void read ( ) throws EOFException ;
tr	IDF	public static void init ( final GameDisplayPane displayPane ) { gameManagers = new GameManager [ ] { new HangManGameManager ( displayPane ) , new ScrambleGameManager ( displayPane ) , new BreakOutGameManager ( displayPane ) , new OthelloGameManager ( displayPane ) } ; }
tr	KEY	protected boolean isServerRunning ( ) { return mainThreadRunning ; }
tr	IDF	public String toString ( ) { String returnValue = "" ; if ( value != null || ! value . trim ( ) . equals ( "" ) ) { returnValue = "<constante value=\"" + value + "\"/>" ; } return returnValue ; }
tr	KEY	@ AfterClass public static void tearDownClass ( ) throws Exception { }
tr	IDF	public final long createArcCodeP ( FeatureTemplate . Arc temp , long x ) { return ( ( x << numArcFeatBits ) | temp . ordinal ( ) ) << flagBits ; }
tr	KEY	public double getEps1 ( ) { return eps1 ; }
tr	IDF	public Object getElementAt ( int i ) { return publishers [ i ] ; }
tr	IDF	@ Override public void processNewNumberValue ( INDINumberProperty property , Date timestamp , INDINumberElementAndValue [ ] elementsAndValues ) { if ( property == absFocusPositionP ) { int newVal = elementsAndValues [ 0 ] . getValue ( ) . intValue ( ) ; if ( ( newVal >= getMinimumAbsPos ( ) ) && ( newVal <= getMaximumAbsPos ( ) ) ) { if ( focusAbsolutePositionE . getValue ( ) . intValue ( ) != newVal ) { absFocusPositionP . setState ( PropertyStates . BUSY ) ; desiredAbsPosition = newVal ; try { updateProperty ( absFocusPositionP ) ; } catch ( INDIException e ) { } absolutePositionHasBeenChanged ( ) ; } else { absFocusPositionP . setState ( PropertyStates . OK ) ; try { updateProperty ( absFocusPositionP ) ; } catch ( INDIException e ) { } } } } if ( property == focusSpeedP ) { int newVal = elementsAndValues [ 0 ] . getValue ( ) . intValue ( ) ; if ( ( newVal >= 0 ) && ( newVal <= getMaximumSpeed ( ) ) ) { if ( focusSpeedValueE . getValue ( ) . intValue ( ) != newVal ) { focusSpeedP . setState ( PropertyStates . BUSY ) ; focusSpeedValueE . setValue ( "" + newVal ) ; try { updateProperty ( focusSpeedP ) ; } catch ( INDIException e ) { } speedHasBeenChanged ( ) ; } else { focusSpeedP . setState ( PropertyStates . OK ) ; try { updateProperty ( focusSpeedP ) ; } catch ( INDIException e ) { } } } } }
tr	IDF	public void setBilling ( Address billing ) { this . billing = billing ; }
tr	KEY	public void setSpecular ( double [ ] specular ) { this . specular = specular ; }
tr	KEY	public double getHeight ( ) { return height ; }
tr	IDF	protected WorldImpl ( WorldImpl prev ) { this . width = prev . width ; this . height = prev . height ; this . generation = prev . generation + 1 ; }
tr	KEY	public void setPowered ( boolean powered ) { this . powered = powered ; }
tr	IDF	@ Override public ArrayList < UsuarioBean > getPage ( int intRegsPerPag , int intPage , ArrayList < FilterBean > hmFilter , HashMap < String , String > hmOrder ) throws Exception { ArrayList < Integer > arrId ; ArrayList < UsuarioBean > arrUsuario = new ArrayList < > ( ) ; try { oMysql . conexion ( enumTipoConexion ) ; arrId = oMysql . getPage ( "usuario" , intRegsPerPag , intPage , hmFilter , hmOrder ) ; Iterator < Integer > iterador = arrId . listIterator ( ) ; while ( iterador . hasNext ( ) ) { UsuarioBean oUsuarioBean = new UsuarioBean ( iterador . next ( ) ) ; arrUsuario . add ( this . get ( oUsuarioBean ) ) ; } oMysql . desconexion ( ) ; return arrUsuario ; } catch ( Exception e ) { throw new Exception ( "UsuarioDao.getPage: Error: " + e . getMessage ( ) ) ; } }
tr	IDF	public static void main ( String [ ] args ) { CountDownLatch latch = new CountDownLatch ( SIZE ) ; Random r = new Random ( ) ; ExecutorService exec = Executors . newCachedThreadPool ( ) ; Controller controller = new Controller ( latch ) ; exec . execute ( controller ) ; for ( int i = 0 ; i < SIZE ; i ++ ) { exec . execute ( new Module ( latch , "\u6A21\u5757" + ( i + 1 ) , r . nextInt ( 2000 ) ) ) ; } exec . shutdown ( ) ; }
tr	IDF	public static INDISwitchProperty createSaveableSwitchProperty ( INDIDriver driver , String name , String label , String group , PropertyStates state , PropertyPermissions permission , int timeout , SwitchRules rule ) throws IllegalArgumentException { INDISwitchProperty sp = loadSwitchProperty ( driver , name ) ; if ( sp == null ) { sp = new INDISwitchProperty ( driver , name , label , group , state , permission , timeout , rule ) ; sp . setSaveable ( true ) ; } return sp ; }
tr	KEY	public int getId ( ) { return id ; }
tr	IDF	static void isort ( float [ ] a , int off , int len ) { for ( int i = off + 1 , end = off + len ; i < end ; i ++ ) { float ai = a [ i ] ; int j = i - 1 ; for ( ; j >= off && a [ j ] > ai ; j -- ) { a [ j + 1 ] = a [ j ] ; } a [ j + 1 ] = ai ; } }
tr	KEY	public abstract boolean isDevice ( String deviceIdentifier ) ;
tr	KEY	public static FormulaCandidateFactory getInstance ( ) { if ( inst == null ) inst = new FormulaCandidateFactory ( 3 ) ; return inst ; }
tr	KEY	protected abstract WorldImpl nextGeneration ( ) ;
tr	KEY	public Wizard ( ) { this . name = "wizard" ; }
tr	KEY	public CMd5Hash ( ) { }
tr	KEY	@ Override public int hashCode ( ) { return abonentId ; }
tr	IDF	public static String [ ] enumToStringArray ( ) { String [ ] result = new String [ StatusCode . values ( ) . length ] ; int count = 0 ; for ( StatusCode code : StatusCode . values ( ) ) { result [ count ] = code . toString ( ) ; count ++ ; } return result ; }
tr	KEY	public int getMainUsageId ( ) { return mainUsageId ; }
tr	KEY	public Table ( ) { }
tr	IDF	public void setMetodo ( String strMetodo ) { this . set ( "method" , strMetodo ) ; }
tr	KEY	public abstract void copyParamaters ( int [ ] paramaters ) ;
tr	IDF	public static int getShiChenByHour ( int hour ) { if ( hour == 23 || hour == 24 || hour == 0 ) return 0 ; for ( int i = 1 ; i < startHour . length ; i ++ ) { if ( hour >= startHour [ i ] && hour < endHour [ i ] ) { return i ; } } return - 1 ; }
tr	IDF	private Object fromMap ( Map < Key , Val > map ) { if ( map instanceof FTreeMap && eql ( comp , ( ( FTreeMap ) map ) . comp ) ) return ( ( FTreeMap ) map ) . tree ; else { Object t = null ; for ( Map . Entry < Key , Val > ent : map . entrySet ( ) ) t = with ( t , ent . getKey ( ) , ent . getValue ( ) ) ; return t ; } }
tr	KEY	private Commons ( ) { }
tr	KEY	public int getDecimalDigits ( ) { return decimalDigits ; }
tr	KEY	public void windowIconified ( final WindowEvent e ) { }
tr	IDF	@ Override protected void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { try { processRequest ( request , response ) ; } catch ( Exception ex ) { Logger . getLogger ( Controller . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; throw new ServletException ( "Controller: Error: ClassNotFoundException " + ex . getMessage ( ) ) ; } }
tr	IDF	FSet < Val > range ( ) ;
tr	IDF	public void ChessVanillaGraphical ( ) { JPanel panel = new JPanel ( ) ; Dimension boardSize = new Dimension ( 500 , 600 ) ; lPane = new JLayeredPane ( ) ; panel . add ( lPane ) ; lPane . setPreferredSize ( boardSize ) ; lPane . addMouseListener ( this ) ; lPane . addMouseMotionListener ( this ) ; chessBoard = new JPanel ( ) ; lPane . add ( chessBoard , JLayeredPane . DEFAULT_LAYER ) ; chessBoard . setLayout ( new GridLayout ( 8 , 8 ) ) ; chessBoard . setSize ( 500 , 500 ) ; chessBoard . setBounds ( 0 , 0 , 500 , 500 ) ; for ( int i = 0 ; i < 64 ; i ++ ) { JPanel tile = new JPanel ( new BorderLayout ( ) ) ; chessBoard . add ( tile ) ; int row = ( i / 8 ) % 2 ; if ( row == 0 ) { tile . setBackground ( i % 2 == 0 ? Color . gray : Color . white ) ; } else { tile . setBackground ( i % 2 == 0 ? Color . white : Color . gray ) ; } } initializeGame ( ) ; }
tr	KEY	public final void setMonths ( int months ) { if ( ( months >= 0 ) && ( months < 60 ) ) { this . months = months ; } }
tr	KEY	public void setUnidades ( double unidades ) { this . unidades = unidades ; }
tr	KEY	@ Override public ClientID getClient ( ) { return null ; }
tr	IDF	@ WebResult ( name = "return" , targetNamespace = "" ) @ RequestWrapper ( localName = "checkBalance" , targetNamespace = "http://api.soap.mytxtbuddy.com/" , className = "com.dreamoval.mytxtbuddy.api.proxy.CheckBalance" ) @ WebMethod @ ResponseWrapper ( localName = "checkBalanceResponse" , targetNamespace = "http://api.soap.mytxtbuddy.com/" , className = "com.dreamoval.mytxtbuddy.api.proxy.CheckBalanceResponse" ) public java . lang . String checkBalance ( @ WebParam ( name = "username" , targetNamespace = "" ) java . lang . String username , @ WebParam ( name = "password" , targetNamespace = "" ) java . lang . String password ) ;
tr	KEY	public OthelloCell ( final int column , final int row ) { this . column = column ; this . row = row ; }
tr	IDF	public InviteRes findByPrimaryKey ( InviteResPk pk ) throws InviteResDaoException ;
tr	KEY	public int getVitesse ( ) { return vitesse ; }
tr	IDF	public static void findAnyComboMatchSum ( List < Integer > arr , int sum , int start ) { if ( sum < 2 ) return ; for ( int i = start ; i < arr . size ( ) ; i ++ ) { int diff = sum - arr . get ( i ) ; log ( "look at " + arr . get ( i ) + " with sum " + sum ) ; if ( diff > 0 && arr . contains ( diff ) ) { log ( "found diff: " + diff + " with " + arr . get ( i ) ) ; } findAnyComboMatchSum ( arr , diff , i + i ) ; } }
tr	KEY	public int getResult ( ) { return _result ; }
tr	IDF	@ Override protected String getXMLPropertyDefinitionInit ( ) { String xml = "<defLightVector device=\"" + getDriver ( ) . getName ( ) + "\" name=\"" + getName ( ) + "\" label=\"" + getLabel ( ) + "\" group=\"" + getGroup ( ) + "\" state=\"" + Constants . getPropertyStateAsString ( getState ( ) ) + "\" timestamp=\"" + INDIDateFormat . getCurrentTimestamp ( ) + "\">" ; return xml ; }
tr	IDF	public XYLayout ( ) { info = new Hashtable < Component , XYConstraints > ( ) ; }
tr	KEY	@ Override public double [ ] getWeights ( ) { double [ ] result = { 5 , 5 , 5 , 5 } ; return result ; }
tr	KEY	@ Override public void connectionLost ( ) { }
tr	IDF	private int readHeader ( ) throws IOException , JDBFException { byte abyte0 [ ] = new byte [ 16 ] ; try { stream . readFully ( abyte0 ) ; } catch ( EOFException eofexception ) { throw new JDBFException ( "Unexpected end of file reached." ) ; } int i = abyte0 [ 8 ] ; if ( i < 0 ) i += 256 ; i += 256 * abyte0 [ 9 ] ; i = -- i / 32 ; i -- ; try { stream . readFully ( abyte0 ) ; } catch ( EOFException eofexception1 ) { throw new JDBFException ( "Unexpected end of file reached." ) ; } return i ; }
tr	KEY	@ Override protected void doInBackground ( ) throws Exception { clearTempFiles ( ) ; createTempVids ( ) ; return null ; }
tr	IDF	public JFrameScreen ( boolean fullscreen ) { this ( fullscreen , ( int ) Toolkit . getDefaultToolkit ( ) . getScreenSize ( ) . getWidth ( ) , ( int ) Toolkit . getDefaultToolkit ( ) . getScreenSize ( ) . getHeight ( ) ) ; }
tr	IDF	@ Test ( groups = "MaSuite" ) public void getEnum ( ) { LOGGER . log ( Level . INFO , "Derby Stating" ) ; assert . assertEquals ( SQLDatatbaseType . getEnum ( "ORACLE" ) , SQLDatatbaseType . ORACLE ) ; assert . assertEquals ( SQLDatatbaseType . getEnum ( "DB2AS400" ) , SQLDatatbaseType . DB2AS400 ) ; assert . assertEquals ( SQLDatatbaseType . getEnum ( "SQLSERVER" ) , SQLDatatbaseType . SQLSERVER ) ; assert . assertEquals ( SQLDatatbaseType . getEnum ( "UNKNOW_DATABASE" ) , SQLDatatbaseType . UNKNOW_DATABASE ) ; assert . assertEquals ( SQLDatatbaseType . getEnum ( null ) , SQLDatatbaseType . UNKNOW_DATABASE ) ; assert . assertEquals ( SQLDatatbaseType . getEnum ( "" + Math . random ( ) ) , SQLDatatbaseType . UNKNOW_DATABASE ) ; }
va	IDF	public Point ( int x , int y , int value ) { this . x = x ; this . y = y ; this . value = value ; }
va	IDF	@ Override public void afterCommand ( VcsCommand < ? > command ) { for ( VcsCommand . Listener listener : listeners ) { listener . afterCommand ( command ) ; } }
va	IDF	public ArrayList < ArrayList < JavaPlayer >> getPalaceRanks ( JavaCell palace , LinkedList < Developer > gameDevelopers ) { ArrayList < JavaCell > city = getCityFromRootCell ( palace , visitedVillages ) ; HashMap < JavaPlayer , Integer > scores = new HashMap < JavaPlayer , Integer > ( ) ; for ( JavaCell c : city ) { if ( getDeveloperOnCell ( c , gameDevelopers ) != null ) { Developer d = getDeveloperOnCell ( c , gameDevelopers ) ; JavaPlayer p = d . getOwner ( ) ; int rank = c . getElevation ( ) ; if ( ! scores . containsKey ( p ) ) { scores . put ( p , rank ) ; } else { int newRank = c . getElevation ( ) ; if ( newRank > rank ) scores . put ( p , newRank ) ; } } } ArrayList < Integer > values = new ArrayList < Integer > ( ) ; for ( Integer i : scores . values ( ) ) values . add ( i ) ; Collections . sort ( values ) ; Collections . reverse ( values ) ; ArrayList < ArrayList < JavaPlayer >> players = new ArrayList < ArrayList < JavaPlayer >> ( ) ; for ( Integer i : values ) { ArrayList < JavaPlayer > rank = new ArrayList < JavaPlayer > ( ) ; for ( JavaPlayer p : scores . keySet ( ) ) { if ( scores . get ( p ) == i ) rank . add ( p ) ; } players . add ( rank ) ; } return players ; }
va	IDF	public int getWidth ( ) { Graphics context = this . getContext ( ) ; return context . getFontMetrics ( this . getFont ( ) ) . stringWidth ( this . text ) ; }
va	KEY	public UTypeDaoImpl ( ) { }
va	KEY	public final AbstractFMap < Key , Val > clone ( ) { return this ; }
va	KEY	public boolean checkMatch2 ( String t1c , String t2c , int invoker ) { ASCII_Tiles t = new ASCII_Tiles ( ) ; int [ ] arrMatchedTiles = new int [ 2 ] ; boolean passedCheck = false ; if ( t1c . equals ( t2c ) ) { return true ; } else { return false ; } }
va	IDF	@ Override public void onMessageReceived ( Message < ServerProtocolParameters > message ) { if ( message instanceof ServerNodeCommandMessage ) { Message < ClientProtocolParameters > response = messageHandler . handleMessage ( ( ServerNodeCommandMessage ) message , null ) ; if ( response != null ) { messageManager . sendMessage ( response ) ; } } }
va	IDF	public MainWindow ( ) { setDefaultCloseOperation ( JFrame . DISPOSE_ON_CLOSE ) ; }
va	IDF	public void deleteHappening ( Calendar date , double amount ) { for ( int i = 0 ; i < happenings . size ( ) ; i ++ ) { Happening happening = happenings . elementAt ( i ) ; if ( happening . getDate ( ) . getTimeInMillis ( ) == date . getTimeInMillis ( ) ) if ( happening . getAmount ( ) == amount ) { happenings . removeElementAt ( i ) ; return ; } } }
va	IDF	public void displayDbProperties ( ) { java . sql . DatabaseMetaData dm = null ; java . sql . ResultSet rs = null ; try { con = this . getConnection ( ) ; if ( con != null ) { dm = con . getMetaData ( ) ; LOGGER . finest ( "Driver Information" ) ; LOGGER . finest ( "\tDriver Name: " + dm . getDriverName ( ) ) ; LOGGER . finest ( "\tDriver Version: " + dm . getDriverVersion ( ) ) ; LOGGER . finest ( "\nDatabase Information " ) ; LOGGER . finest ( "\tDatabase Name: " + dm . getDatabaseProductName ( ) ) ; LOGGER . finest ( "\tDatabase Version: " + dm . getDatabaseProductVersion ( ) ) ; LOGGER . finest ( "Avalilable Catalogs " ) ; rs = dm . getCatalogs ( ) ; while ( rs . next ( ) ) { LOGGER . finest ( "\tcatalog: " + rs . getString ( 1 ) ) ; } rs . close ( ) ; rs = null ; closeConnection ( ) ; } else LOGGER . severe ( "Error: No active Connection" ) ; } catch ( Exception e ) { LOGGER . log ( Level . SEVERE , e . getLocalizedMessage ( ) , e ) ; } dm = null ; }
va	KEY	protected void end ( ) { }
va	KEY	public ChampDeBataille getChampDeBataille ( ) { return this . champ_de_bataille ; }
va	KEY	public static final int getPAL ( int colorIndex , int luminanceIndex ) { if ( colorIndex > 15 || luminanceIndex > 15 ) return 000000 ; return PAL [ colorIndex * 16 + luminanceIndex ] ; }
va	KEY	public Builder depthOfTrees ( int depthOfTrees ) { this . depthOfTrees = depthOfTrees ; return this ; }
va	IDF	public void diffuseUpdateObject ( String objectId , Vector3d delatTrans , Vector3d delatRot ) ;
va	KEY	public int getRightAnswer ( ) { return rightAnswer ; }
va	KEY	public boolean isCellEditable ( int x , int y ) { return false ; }
va	KEY	@ BeforeMethod public void setUpMethod ( ) throws Exception { }
va	IDF	@ Override public void addCharacter ( String character , CharacterHandle handle ) { outs . put ( character , handle ) ; }
te	IDF	public double objectArea ( ABObject ob ) { double area = 0 ; if ( ob . shape == ABShape . Circle ) { Circle c = ( Circle ) ob ; area = c . area ; } else if ( ob . shape == ABShape . Rect ) { Rect r = ( Rect ) ob ; area = r . area ; } else { Poly p = ( Poly ) ob ; area = p . area ; } return area ; }
te	KEY	public abstract String toBase ( ) ;
te	IDF	public String dump ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( String . format ( "[%02X]: " , id ( ) ) ) ; sb . append ( base . dump ( ) ) ; for ( Node node = base . top ; node != base ; node = node . top ) { sb . append ( node . dump ( ) +   ) ; } sb . append (  ) ; return sb . toString ( ) ; }
te	KEY	public final void putAll ( Map < ? extends Key , ? extends Val > m ) { throw new UnsupportedOperationException ( ) ; }
te	KEY	public int getSizeX ( ) { return this . newSizeX ; }
te	IDF	public void setFC1RunDt ( String aval ) throws Exception { fc1rundt = dtfmt . parse ( aval ) ; }
te	IDF	public FriendshDaoImpl ( final java . sql . Connection userConn ) { this . userConn = userConn ; }
te	IDF	private void reset ( Game game ) { BoardState bs = new BoardState ( 10 , 10 ) ; if ( beginStateCheckBox . isSelected ( ) ) { bs = new BoardState ( 10 , 10 ) ; bs . setBegin ( ) ; } else { bs = ( BoardState ) boardPanel . getBoard ( ) . getBoardState ( ) ; } reset ( game , bs , true ) ; }
te	KEY	@ AfterMethod public void tearDownMethod ( ) throws Exception { }
te	IDF	public double lengthSq ( ) { return x * x + y * y ; }
te	IDF	private void miHoleModeMousePressed ( java . awt . event . MouseEvent evt ) { JOptionPane . showMessageDialog ( null , "This feature has not yet been implemented." ) ; }
te	IDF	ArrayList < TreeNode > combineTrees ( int val , ArrayList < TreeNode > leftTrees , ArrayList < TreeNode > rightTrees ) { ArrayList < TreeNode > result = new ArrayList < TreeNode > ( ) ; for ( TreeNode left : leftTrees ) { for ( TreeNode right : rightTrees ) { TreeNode node = new TreeNode ( val ) ; node . left = left ; node . right = right ; result . add ( node ) ; } } return result ; }
te	IDF	public Player getPlayer ( ) { return player . clone ( ) ; }
te	KEY	public int getValue ( ) { return this . value ; }
te	KEY	public boolean getSignal ( ) { return mTVSignal ; }
te	KEY	public Builder hotel ( int starRating ) { this . starRating = starRating ; return this ; }
te	KEY	public int getParameterCount ( ) { return this . getParameters ( ) . size ( ) ; }
te	KEY	public void setCountsSec ( double countsSec ) { this . countsSec = countsSec ; }
te	KEY	public int getIntExit ( ) { return intExit ; }
te	IDF	private static double toDouble ( Tuple tuple , String columnName ) { return ( ( Number ) tuple . select ( columnName ) . getValue ( ) ) . doubleValue ( ) ; }
