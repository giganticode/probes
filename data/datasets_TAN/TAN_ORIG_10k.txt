tr	KEY	public void mouseExited ( final MouseEvent e ) { }
tr	IDF	private void FindObjectInRow ( ABObject target , List < ABObject > objects , List < ABObject > directList ) { for ( int i = 0 ; i < objects . size ( ) ; i ++ ) { if ( directList . size ( ) <= 3 ) { ABObject x = objects . get ( i ) ; if ( x . getCenterX ( ) >= target . getMaxX ( ) && x . getCenterX ( ) <= target . getMaxX ( ) + 10 ) { if ( x . getCenterY ( ) >= target . getMinY ( ) - 10 && x . getCenterY ( ) <= target . getMaxY ( ) + 10 ) { directList . add ( x ) ; } } } else break ; } }
tr	IDF	@ Test public void should_invoke_calculateTotal_and_pay_method_on_strategy_instance ( ) throws InterruptedException { doNothing ( ) . when ( strategyMock ) . pay ( anyInt ( ) ) ; doReturn ( 100 ) . when ( cardSpy ) . calculateTotal ( ) ; cardSpy . updateStrategy ( strategyMock ) ; cardSpy . pay ( ) ; verify ( strategyMock , times ( 1 ) ) . pay ( 100 ) ; verify ( cardSpy , times ( 1 ) ) . calculateTotal ( ) ; }
tr	IDF	void putDirtyArray ( final float [ ] array , final int length ) { if ( length != arraySize ) { System . out . println ( "bad length = " + length ) ; return ; } if ( DO_STATS ) { returnOp ++ ; } if ( DO_CLEAN_DIRTY ) { Arrays . fill ( array , 0 , array . length , 0f ) ; } floatArrays . addLast ( array ) ; }
tr	IDF	GameCharacterObject setVAngle ( float vAngle ) ;
tr	KEY	public void run ( ) { }
tr	KEY	public int getSpeed ( ) { return speed ; }
tr	KEY	public void setDepth ( double depth ) { this . depth = depth ; }
tr	KEY	public Monster ( ) { }
tr	KEY	public void setId ( long id ) { this . id = id ; }
tr	KEY	public String getDescription ( ) { return "Atari 2600 ROMs (*.BIN)" ; }
tr	IDF	public JPanel createPanel ( JFrame frame ) throws NoSuchMethodException , SecurityException , InstantiationException , IllegalAccessException , IllegalArgumentException , InvocationTargetException , ClassNotFoundException { String type = this . getType ( ) ; @ SuppressWarnings ( "unchecked" ) class < ? extends JPanel > panelClazz = ( class < ? extends JPanel > ) class . forName ( type ) ; Constructor < ? extends JPanel > constr = panelClazz . getConstructor ( JFrame . class , QueryDefinition . class ) ; return constr . newInstance ( frame , this ) ; }
tr	KEY	public double getIva ( ) { return iva ; }
tr	KEY	public boolean [ ] [ ] getBoard ( ) { return board ; }
tr	IDF	private void btnNuevoActionPerformed ( java . awt . event . ActionEvent evt ) { limpiar ( ) ; desbloquear ( ) ; }
tr	IDF	public ScenarioGUIStepDropdownList ( ScenarioTreeStepSimpleList scenarioStep ) { if ( scenarioStep == null ) { throw new IllegalArgumentException ( "ScenarioGUIStepDropdownList: scenarioStep may not be empty!" ) ; } this . selectionOptions = scenarioStep . getSelectionOptions ( ) ; this . scenarioStep = scenarioStep ; this . createGUIComponents ( ) ; }
tr	KEY	public void run ( ) { new Busqueda ( ) . setVisible ( true ) ; }
tr	IDF	public void setConstante ( XmlConstante constante ) { discriminator = FieldTypeEnum . CONSTANTE ; this . constante = constante ; }
tr	KEY	public FTreeMap ( ) { tree = null ; comp = null ; dflt = null ; }
tr	IDF	public Card setName ( String name ) { this . name = name ; return this ; }
tr	IDF	public static void main ( String [ ] args ) { int [ ] [ ] i = new int [ 2 ] [ 2 ] ; int [ ] [ ] j = { i [ 1 ] , { 1 , 2 , 3 } , { 4 , 5 , 6 , 7 } } ; int [ ] [ ] [ ] k = { i , j } ; System . out . println ( k [ 0 ] [ 1 ] [ 0 ] ++ ) ; System . out . println ( ++ k [ 1 ] [ 0 ] [ 0 ] ) ; System . out . println ( i [ 1 ] [ 0 ] ) ; System . out . println ( -- j [ 0 ] [ 0 ] ) ; }
tr	IDF	public String getDaXianGongGan ( ) { return Pan . tianGan [ blockList . get ( basicInfo . daXian ) . gongGan ] ; }
tr	KEY	public double getWidth ( ) { return width ; }
tr	IDF	@ Override public void onAuthenticationFailure ( long nodeId , String password ) { this . state = AuthenticatedState . NOT_AUTHENTICATED ; synchronized ( mListeners ) { for ( AuthenticationListener listener : mListeners ) { try { listener . onAuthenticationFailure ( nodeId , password ) ; } catch ( RuntimeException e ) { System . out . println ( "Error notifying listener." ) ; e . printStackTrace ( ) ; } } } connectionManager . onDisconnected ( ) ; }
tr	KEY	public void setPageCount ( int pageCount ) { this . pageCount = pageCount ; }
tr	KEY	public boolean isEmpty ( ) { return this . size == 0 ; }
tr	IDF	private void Boton1ActionPerformed ( java . awt . event . ActionEvent evt ) { cargar ( ) ; }
tr	KEY	@ Test public void testSimplification ( ) { }
tr	KEY	public static void setMaxSeed ( int max ) { MAX_SEED = max ; }
tr	IDF	public long diff ( ) { long now = mark ; try { now = ( long ) getFreePhysicalMemorySize . invoke ( OsBean ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } return now - mark ; }
tr	IDF	private TIntArrayList [ ] getArgs ( ) { TIntArrayList [ ] args = new TIntArrayList [ numframes ] ; for ( int i = 0 ; i < numframes ; ++ i ) { int pid = inst . frames [ i ] . predid ; args [ i ] = new TIntArrayList ( 5 ) ; for ( int j = 0 ; j < len ; ++ j ) if ( ! sfd . isPruned ( pid , j ) ) args [ i ] . add ( j ) ; } return args ; }
tr	IDF	public InputterPoker ( ) { inputs = 10 ; outputs = 10 ; name = "Poker" ; }
tr	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { txtNombreActionPerformed ( evt ) ; }
tr	KEY	public synchronized int xgetR4InitialDelay ( ) { return r4ID ; }
tr	IDF	String getName ( ) ;
tr	IDF	void show ( Graphics2D g2d ) ;
tr	KEY	public static ThreeDSupportor getInstance ( ) { if ( instance == null ) { instance = new ThreeDSupportor ( ) ; } return instance ; }
tr	IDF	public CPU find ( long id ) { EntityTransaction tx = getEntityManager ( ) . getTransaction ( ) ; tx . begin ( ) ; CPU fCPU = getEntityManager ( ) . getReference ( CPU . class , id ) ; tx . commit ( ) ; return fCPU ; }
tr	KEY	public void setPlayerTurnIndex ( int turnPosition ) { if ( turnPosition > this . getPlayingPlayers ( ) . size ( ) ) { this . turnPosition = 0 ; } else { this . turnPosition = turnPosition ; } }
tr	KEY	public static int getPalaceValueFromUser ( ) { return 0 ; }
tr	KEY	public long getOffset ( ) { return offset ; }
tr	KEY	protected boolean setSourceNone ( ) { world = null ; patternPanel . setPatterns ( null ) ; resetWorld ( ) ; return true ; }
tr	KEY	public void setCoord_X ( int coord_X ) { this . coord_X = coord_X ; }
tr	IDF	protected long playerCanWinInOneRound ( char playerColour , char enemyColour , Game game ) { return new PlayerCanWinInOneRound ( ) . evaluate ( playerColour , enemyColour , game , null ) ; }
tr	IDF	public void keyPressed ( java . awt . event . KeyEvent evt ) { txtCedRucKeyPressed ( evt ) ; }
tr	KEY	public void destroy ( ) { }
tr	KEY	public float getuStepRA ( ) { return uStepHA ; }
tr	IDF	protected File getLocalDictionaryFile ( ) { return new File ( format ( "%s%s%s" , userHomeDirectory . getAbsolutePath ( ) , File . separator , DICTIONARY_NAME ) ) ; }
tr	IDF	public void createSlideBarPanel ( ) { sideBarPanel = new SideBarPanel ( ) ; sideBarPanel . setBorder ( BorderFactory . createLineBorder ( Color . black ) ) ; sideBarPanel . setPreferredSize ( new Dimension ( 400 , 800 ) ) ; }
tr	IDF	public static ArrayList getAllFilesPath ( File dir ) { if ( ! dir . isDirectory ( ) ) { String filePath = dir . getAbsolutePath ( ) ; System . out . println ( filePath ) ; allFilesPath . add ( filePath ) ; } else { File [ ] fs = dir . listFiles ( ) ; for ( int i = 0 ; i < fs . length ; i ++ ) { if ( fs [ i ] . isDirectory ( ) ) { try { getAllFilesPath ( fs [ i ] ) ; } catch ( Exception e ) { } } else { String filePath = fs [ i ] . getAbsolutePath ( ) ; System . out . println ( filePath ) ; allFilesPath . add ( filePath ) ; } } } System . out . println ( "Utils.getAllFilesPath-\u6587\u4EF6\u4E2A\u6570---->" + allFilesPath . size ( ) ) ; return allFilesPath ; }
tr	IDF	@ Override public long getQuantity ( Mineral mineral ) { return minerals [ mineral . ordinal ( ) ] ; }
tr	KEY	public double getLonghitude ( ) { return longhitude ; }
tr	IDF	public HoldFestivalModel ( ArrayList < JavaFestivalPlayer > festivalPlayers , PalaceCard festCard , int valueOfPalaceCity ) { this . players = festivalPlayers ; this . indexOfCurrentPlayer = getBeginningPlayerIndex ( ) ; this . festivalCard = festCard ; this . valueOfPalaceCity = valueOfPalaceCity ; this . famePointsAwarded = new HashMap < String , Integer > ( 10 ) ; initFamePointsHashMap ( ) ; this . highestBid = 0 ; }
tr	KEY	private boolean judgePort ( ) { try { Integer . valueOf ( portField . getText ( ) ) ; return true ; } catch ( Exception e ) { return false ; } }
tr	IDF	public static boolean triangulate ( List < Vector2D > contour , List < Integer > result ) { result . clear ( ) ; Integer [ ] r = triangulate ( contour ) ; for ( Integer i : r ) result . add ( i ) ; return ( result . isEmpty ( ) ) ? false : true ; }
tr	KEY	public int getRightPosition ( ) { return rightPosition ; }
tr	KEY	public final String getSubCategory ( ) { return _subCategory ; }
tr	IDF	public void setMobileNumbers ( String value ) { this . mobileNumbers = value ; }
tr	KEY	public int getPlayerCount ( ) { return playerCount ; }
tr	IDF	@ Override public void run ( ) { try { serverSocket = new ServerSocket ( intPort ) ; } catch ( IOException e ) { EmailServerStart . pop3Log . error ( "pop3:\u65E0\u6CD5\u76D1\u542C" + intPort + "\u7AEF\u53E3" ) ; System . exit ( 0 ) ; return ; } EmailServerStart . pop3Log . info ( "pop3:\u76D1\u542C\u7AEF\u53E3:" + intPort ) ; while ( EmailServerStart . isServerRun ) { try { clientSocket = serverSocket . accept ( ) ; new Thread ( new POP3Session ( clientSocket ) ) . start ( ) ; } catch ( IOException e ) { EmailServerStart . pop3Log . error ( "pop3:\u670D\u52A1\u5F02\u5E38\u51FA\u9519" ) ; } } EmailServerStart . pop3Log . info ( "pop3:\u505C\u6B62\u76D1\u542C\u7AEF\u53E3" ) ; }
tr	KEY	protected abstract void changeFilter ( int filterNumber ) ;
tr	KEY	public double get ( int col , int row ) ;
tr	KEY	public int getTipodoc ( ) { return tipodoc ; }
tr	KEY	static void init ( double [ ] ratios ) { if ( singleton != null ) return ; else singleton = new LevelGenerator ( ratios ) ; }
tr	IDF	public void setAlFilter ( ArrayList < FilterBean > alFilter ) { this . alFilter = alFilter ; }
tr	KEY	public abstract void visit ( PrintBold printBold ) ;
tr	IDF	List < Exam > loadAllExams ( ) ;
tr	IDF	public void call ( Throwable t ) { System . out . println ( "error-caught:" + t ) ; assertEquals ( errClass , t . getClass ( ) ) ; if ( errMsg != null ) assertEquals ( errMsg , t . getMessage ( ) ) ; testComplete ( ) ; }
tr	KEY	public Node ( int value ) { this . value = value ; this . prev = this . next = null ; this . seqPrev = this ; this . seqNext = this ; }
tr	IDF	public List < String > vcsErrors ( ) { return vcsErrors ; }
tr	IDF	public void setTemperature ( int temperature ) { if ( temperature > this . temperature ) { System . out . println ( "Hottub is heating to a steaming " + temperature + " degrees" ) ; } else { System . out . println ( "Hottub is cooling to " + temperature + " degrees" ) ; } this . temperature = temperature ; }
tr	IDF	private void disconnectClients ( ) { synchronized ( entities ) { for ( Entity one : entities ) { if ( one instanceof Soldier ) { one . getProxy ( ) . disconnect ( ) ; } } } synchronized ( newbies ) { for ( Entity one : newbies ) { one . getProxy ( ) . disconnect ( ) ; } } synchronized ( gods ) { for ( Entity one : gods ) { one . getProxy ( ) . disconnect ( ) ; } } }
tr	KEY	public static FormulaCandidateFactory getInstance ( ) { if ( inst == null ) inst = new FormulaCandidateFactory ( 3 ) ; return inst ; }
tr	KEY	public int getWidth ( ) { return width ; }
tr	KEY	public void setFoodNum ( int foodNum ) { this . foodNum = foodNum ; }
tr	KEY	public void setBox ( int box ) ;
tr	IDF	public String stripZeros ( String s ) { int i ; for ( i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) != 0 ) break ; } if ( i == s . length ( ) ) return "0" ; else return s . substring ( i ) ; }
tr	IDF	static private int equivCompare ( Object key1 , Object val1 , Object key2 , Object val2 ) { if ( key1 instanceof EquivalentMap ) { ArrayList < Entry > al1 = ( ( EquivalentMap ) key1 ) . contents ; if ( key2 instanceof EquivalentMap ) { ArrayList < Entry > al2 = ( ( EquivalentMap ) key2 ) . contents ; int siz1 = al1 . size ( ) , siz2 = al2 . size ( ) ; if ( siz1 < siz2 ) return 1 ; else if ( siz1 > siz2 ) return - 1 ; else { FHashSet < Object > vals1 = new FHashSet < Object > ( ) ; FHashSet < Object > vals2 = new FHashSet < Object > ( ) ; for ( int i = 0 ; i < siz1 ; ++ i ) vals1 = vals1 . with ( ( ( Entry ) al1 . get ( i ) ) . value ) ; for ( int i = 0 ; i < siz2 ; ++ i ) vals2 = vals2 . with ( ( ( Entry ) al2 . get ( i ) ) . value ) ; return vals1 . compareTo ( vals2 ) ; } } else return - 1 ; } else if ( key2 instanceof EquivalentMap ) return 1 ; else return ( ( Comparable < Object > ) val1 ) . compareTo ( ( Comparable < Object > ) val2 ) ; }
tr	KEY	public double Precision ( ) { return corr / ( totp + 1e-20 ) ; }
tr	IDF	@ Override public void runTest ( ) { String s1 = "tiger" ; String s2 = "tgrie" ; System . out . println ( checkCharCount ( s1 , s2 ) ) ; System . out . println ( isScramble ( s1 , s2 ) ) ; dbg ( "123" . substring ( 0 , 2 ) ) ; dbg ( "123" . substring ( 2 ) ) ; dbg ( "312" . substring ( 3 - 2 ) ) ; dbg ( "312" . substring ( 0 , 3 - 2 ) ) ; }
tr	KEY	boolean isReplyToThisMessage ( ) ;
tr	KEY	public ASCII_Tiles ( ) { super ( true ) ; }
tr	IDF	@ Override public Set < String > characters ( ) { return outs . keySet ( ) ; }
tr	KEY	public void translate ( double x , double y , double z ) ;
tr	KEY	public int getCol ( ) { return col ; }
tr	KEY	void pay ( int amount ) ;
tr	IDF	public StraightifyDrive ( ) { requires ( driveTrain ) ; }
tr	KEY	private static final long [ ] mk_tokenSet_0 ( ) { long [ ] data = new long [ 131 ] ; data [ 0 ] = 8935423114204952064 ; data [ 1 ] = 8646911290591150080 ; return data ; }
tr	KEY	public boolean isSuccess ( ) { return isSuccess ; }
tr	IDF	public void _23 ( double val ) { matrix . _23 = val ; }
tr	KEY	public int getTestInt ( ) { return testInt ; }
tr	IDF	public GestionProveedor ( ) { Conexion . GetInstancia ( ) . CadenaConexion ( ) ; }
tr	IDF	@ Override public Author find ( int index ) { Transaction readTransaction = session . beginTransaction ( ) ; Query readQuery = session . createQuery ( "FROM Author WHERE id = :id" ) . setInteger ( "id" , index ) ; Author result = ( Author ) readQuery . list ( ) . get ( 0 ) ; readTransaction . commit ( ) ; return result ; }
tr	IDF	@ Override public ResponseTIPPBuilder setSourceLocale ( String srcLang ) { return ( ResponseTIPPBuilder ) super . setSourceLocale ( srcLang ) ; }
tr	KEY	public Map ( ) { super ( "Map" ) ; }
tr	KEY	public int getRowCount ( ) { return data . length ; }
tr	IDF	public boolean equals ( Object otherObject ) { if ( ! ( otherObject instanceof ClientInfo ) ) return false ; ClientInfo info = ( ClientInfo ) otherObject ; return info . username . equals ( this . username ) && info . password . equals ( this . password ) ; }
tr	IDF	public void updateTotal ( ) { all = new Grupp ( "all" ) ; Calendar from = workspace . showFrom ; Calendar to = workspace . showTo ; for ( Post rootPost : workspace . poster ) { if ( rootPost instanceof Grupp ) { ( ( Grupp ) rootPost ) . updateTotal ( from , to ) ; for ( ValuePost childPost : ( ( Grupp ) rootPost ) . getPoster ( ) ) { all . addPost ( childPost ) ; } } else { all . addPost ( ( ValuePost ) rootPost ) ; } } all . updateTotal ( from , to ) ; }
tr	IDF	private void displayBufferedImage ( BufferedImage image ) { this . setContentPane ( new JScrollPane ( new JLabel ( new ImageIcon ( image ) ) ) ) ; this . validate ( ) ; }
tr	KEY	public void setCurrentAxisX ( double currentAxisX ) { this . currentAxisX = currentAxisX ; }
tr	KEY	public long getLectureId ( ) { return lectureId ; }
tr	IDF	public static void circular_shift ( ) { index = new ArrayList < int [ ] > ( ) ; char [ ] line ; int lineNo = 0 ; for ( Iterator < char [ ] > it = characters . iterator ( ) ; it . hasNext ( ) ; lineNo ++ ) { line = it . next ( ) ; index . add ( new int [ ] { lineNo , 0 } ) ; for ( int charNo = 0 ; charNo < line . length ; charNo ++ ) { if ( line [ charNo ] ==   ) { index . add ( new int [ ] { lineNo , charNo + 1 } ) ; } } } }
tr	IDF	public void dropNew ( ) { String [ ] playerItems = player . getInventory ( ) . getItemTexts ( ) ; if ( playerItems . length == 0 ) { log . println ( "You have nothing to drop." ) ; } else { JPanel panel = new JPanel ( ) ; panel . setLayout ( new GridLayout ( 0 , 1 ) ) ; final JCheckBox [ ] checkBoxes = new JCheckBox [ playerItems . length ] ; final String idsString = descriptionsToIDString ( playerItems ) ; ButtonGroup buttons = new ButtonGroup ( ) ; Action charAction = new AbstractAction ( ) { public void actionPerformed ( ActionEvent e ) { int index = idsString . indexOf ( e . getActionCommand ( ) ) ; if ( index != - 1 ) { JCheckBox box = checkBoxes [ index ] ; box . setSelected ( ! box . isSelected ( ) ) ; } else { println ( e . getActionCommand ( ) + " is not a valid ID  do you have capslock on?" ) ; } } } ; int itemCount = 0 ; panel . add ( new JLabel ( "INVENTORY" ) ) ; for ( String f : playerItems ) { JCheckBox newBox = new JCheckBox ( f ) ; newBox . getInputMap ( JComponent . WHEN_IN_FOCUSED_WINDOW ) . put ( KeyStroke . getKeyStroke ( idsString . substring ( itemCount , itemCount + 1 ) . toUpperCase ( ) ) , f ) ; newBox . getActionMap ( ) . put ( f , charAction ) ; checkBoxes [ itemCount ] = newBox ; panel . add ( newBox ) ; itemCount ++ ; } JOptionPane . showMessageDialog ( null , panel , "What would you like to drop?" , JOptionPane . PLAIN_MESSAGE ) ; for ( JCheckBox box : checkBoxes ) { if ( box . isSelected ( ) ) { Character id = box . getText ( ) . charAt ( 0 ) ; Holdable item ; try { item = player . getInventory ( ) . getItem ( id ) ; if ( item . isStackable ( ) ) item = player . getInventory ( ) . removeStackedItem ( id , 1 ) ; else item = player . getInventory ( ) . removeItem ( id ) ; player . getLocation ( ) . addItem ( item ) ; println ( "You drop the " + item . properName ( ) + " on the floor." ) ; } catch ( InvalidKeyException e ) { log . println ( "The item you picked was invalid" ) ; } } } } updateTile ( player . getLocation ( ) . getColumn ( ) , player . getLocation ( ) . getRow ( ) ) ; }
tr	IDF	@ Override public int indexOf ( Object o ) { return l . indexOf ( o ) ; }
tr	IDF	@ Test public void test ( ) { String [ ] input1 = { "2" , "1" , "+" , "3" , "*" } ; String [ ] input2 = { "4" , "13" , "5" , "/" , "+" } ; assert . assertEquals ( test . evalRPN ( input1 ) , 9 ) ; assert . assertEquals ( test . evalRPN ( input2 ) , 6 ) ; }
tr	KEY	public int getDfNumber ( ) { return dfNumber ; }
tr	KEY	public int GetX ( ) { return x ; }
tr	IDF	@ Override public EnumSet < Sovereignty > getSovereignty ( ) { return EnumSet . copyOf ( sovereignties ) ; }
tr	IDF	@ Override public void execute ( String character , CommandContext commandContext ) { commandContext . character ( character ) . heardFromGame ( "You can go to:" ) ; for ( Location near : commandContext . characterLocations ( ) . locationsAdjacentTo ( character ) ) { commandContext . character ( character ) . heardFromGame ( "\t" + near . place ( ) ) ; } }
tr	KEY	public TimeoutException ( ) { super ( "Timed out" ) ; }
tr	IDF	public Invite [ ] findWhereIdInviteEquals ( Integer idInvite ) throws InviteDaoException { return findByDynamicSelect ( SQL_SELECT + " WHERE idInvite = ? ORDER BY idInvite" , new Object [ ] { idInvite } ) ; }
tr	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButton4ActionPerformed ( evt ) ; }
tr	IDF	public void setTxtMatch ( JTextField txtMatch ) { this . txtMatch = txtMatch ; }
tr	KEY	void requestDraw ( final int page ) ;
tr	KEY	public void setQuantite ( int quantite ) { this . quantite = quantite ; }
tr	KEY	private boolean inRow1 ( int index ) { return ( index < this . getNumSquare ( ) / 2 ) ? true : false ; }
tr	IDF	public void setVhost ( String vhost ) { this . vhost = vhost ; }
tr	KEY	public long getTime ( ) ;
tr	KEY	public long getTotal ( ) { return total ; }
tr	IDF	private static void invert ( Node node ) { if ( node == null ) { return ; } Node left = node . left ; invert ( left ) ; Node right = node . right ; invert ( right ) ; node . right = left ; node . left = right ; }
tr	KEY	private InstanceVariableSyn ( ) { }
tr	IDF	public void removePropertyChangeListener ( PropertyChangeListener listener ) { changeSupport . removePropertyChangeListener ( listener ) ; }
tr	IDF	public static String selectSingleText ( Node parent , String xpath ) throws XPathExpressionException { return selectSingleText ( parent , xpath , null ) ; }
tr	KEY	public int compare ( int firstInt , int secondInt ) { if ( super . sortDown ) { return firstInt - secondInt ; } else { return secondInt - firstInt ; } }
tr	KEY	@ AfterMethod public void tearDownMethod ( ) throws Exception { }
tr	KEY	public abstract int getSize ( ) ;
tr	KEY	public static int factorial ( int n ) throws Exception { if ( n < 0 || n > 16 ) { throw new Exception ( "factorial(int): argument out of range " + n + "; min = 0; max = 16;" ) ; } else if ( n == 0 ) { return 1 ; } int f = n ; while ( ( -- n ) > 0 ) { f *= n ; } return f ; }
tr	KEY	public boolean askUserIfWouldLikeToHoldAPalaceFestival ( ) { int holdFestival = JOptionPane . showConfirmDialog ( null , "Would you like to hold a Palace Festival?" , "Let's Party!" , JOptionPane . YES_NO_OPTION ) ; if ( holdFestival == 0 ) return true ; return false ; }
tr	KEY	public void setSpecularPower ( double specularPower ) { this . specularPower = specularPower ; }
tr	KEY	protected boolean arePlugged ( ) { return plugged ; }
tr	IDF	@ Override public String countMessages ( String username , String password ) { return mytxtbuddySoapApi . countMessages ( username , password ) ; }
tr	KEY	public long getStatisticDateLastLerned ( ) ;
tr	IDF	public INDITextElement ( INDITextProperty property , String name , String value ) throws IllegalArgumentException { super ( property , name ) ; this . value = value . trim ( ) ; }
tr	IDF	public Builder location ( String city ) { this . city = city ; return this ; }
tr	KEY	public void run ( ) { new Busqueda ( ) . setVisible ( true ) ; }
tr	IDF	private void moveWindow ( int index ) { if ( isIndexOutOfSourceList ( index ) ) { return ; } if ( index == windowStartIndex ) { return ; } synchronized ( windowLock ) { if ( index < windowStartIndex ) { int clearLength = windowLength ; if ( index + windowLength > windowStartIndex ) { int len = index + windowLength - windowStartIndex ; Task [ ] tasks = new Task [ len ] ; for ( int i = 0 ; i < len ; ++ i ) { tasks [ i ] = windowTaskList . get ( i ) ; } for ( int i = 0 ; i < len ; ++ i ) { windowTaskList . set ( windowLength - len + i , tasks [ i ] ) ; } clearLength -= len ; } for ( int i = 0 ; i < clearLength ; ++ i ) { windowTaskList . set ( i , null ) ; } } else if ( index > windowStartIndex ) { int startIndex = 0 ; if ( windowStartIndex + windowLength > index ) { int len = windowStartIndex + windowLength - index ; Task [ ] tasks = new Task [ len ] ; for ( int i = 0 ; i < len ; ++ i ) { tasks [ i ] = windowTaskList . get ( windowLength - len + i ) ; } for ( int i = 0 ; i < len ; ++ i ) { windowTaskList . set ( i , tasks [ i ] ) ; } startIndex = len ; } for ( int i = startIndex ; i < windowLength ; ++ i ) { windowTaskList . set ( i , null ) ; } } windowStartIndex = index ; fillTask ( ) ; } }
tr	KEY	public void setValue ( long value ) { this . value = value ; }
tr	IDF	@ Override public Object execute ( List < Object > params ) { System . out . println ( "executing getRecordCounts" ) ; StationServer stationServer = getStation ( params . get ( 0 ) . toString ( ) ) ; if ( stationServer == null ) { return null ; } return stationServer . getRecordCounts ( ( String ) params . get ( 0 ) ) ; }
tr	KEY	public int getNumberOfMeasuresTrimmed ( ) { return trimmedMeasures . size ( ) ; }
tr	KEY	protected abstract boolean setSourceFile ( ) ;
tr	KEY	private static boolean isDivisible ( final long number , final long divisor ) { return ( number == ( ( number / divisor ) * divisor ) ) ; }
tr	IDF	public void placePiece ( final int x , final int y , final Piece p ) { for ( int i = 0 ; i < p . PIECE_SIZE ; ++ i ) { for ( int j = 0 ; j < p . PIECE_SIZE ; ++ j ) { if ( p . isPart ( i , j ) ) map [ x + i ] [ y + j ] = p . getColor ( ) ; } } }
tr	IDF	public String sign ( User user ) throws ServiceException ;
tr	IDF	@ Test public void test2 ( ) { LRUCache test = new LRUCache ( 3 ) ; test . set ( 1 , 1 ) ; test . set ( 2 , 2 ) ; test . set ( 3 , 3 ) ; test . set ( 4 , 4 ) ; test . set ( 5 , 5 ) ; assert . assertEquals ( test . get ( 1 ) , - 1 ) ; assert . assertEquals ( test . get ( 2 ) , - 1 ) ; assert . assertEquals ( test . get ( 5 ) , 5 ) ; assert . assertEquals ( test . get ( 4 ) , 4 ) ; assert . assertEquals ( test . get ( 3 ) , 3 ) ; test . set ( 7 , 7 ) ; test . set ( 6 , 6 ) ; assert . assertEquals ( test . get ( 5 ) , - 1 ) ; assert . assertEquals ( test . get ( 4 ) , - 1 ) ; assert . assertEquals ( test . get ( 3 ) , 3 ) ; }
tr	KEY	private static String getCaption ( int money ) { return "$ " + money ; }
tr	IDF	public void setName ( String name ) { this . name = name ; }
tr	KEY	public double getPrice ( ) { throw new UnsupportedOperationException ( ) ; }
tr	KEY	public void windowDeiconified ( final WindowEvent e ) { }
tr	IDF	public void move ( ) { currentDirection = desiredDirection ; switch ( currentDirection ) { case UPARROW : yPosition -- ; break ; case DOWNARROW : yPosition ++ ; break ; case LEFTARROW : xPosition -- ; break ; case RIGHTARROW : xPosition ++ ; break ; default : break ; } moveTail ( ) ; System . out . println ( "x=" + xPosition + " y=" + yPosition + "; tail=" + tail . length ) ; }
tr	IDF	@ SuppressWarnings ( "unchecked" ) private void initComponents ( ) { mainPanel = new javax . swing . JPanel ( ) ; jLabel1 = new javax . swing . JLabel ( ) ; jLabel2 = new javax . swing . JLabel ( ) ; playBtn = new javax . swing . JButton ( ) ; settingsBtn = new javax . swing . JButton ( ) ; highScoresBtn = new javax . swing . JButton ( ) ; exitBtn = new javax . swing . JButton ( ) ; menuBar = new javax . swing . JMenuBar ( ) ; javax . swing . JMenu fileMenu = new javax . swing . JMenu ( ) ; javax . swing . JMenuItem exitMenuItem = new javax . swing . JMenuItem ( ) ; javax . swing . JMenu helpMenu = new javax . swing . JMenu ( ) ; javax . swing . JMenuItem aboutMenuItem = new javax . swing . JMenuItem ( ) ; statusPanel = new javax . swing . JPanel ( ) ; javax . swing . JSeparator statusPanelSeparator = new javax . swing . JSeparator ( ) ; statusMessageLabel = new javax . swing . JLabel ( ) ; statusAnimationLabel = new javax . swing . JLabel ( ) ; progressBar = new javax . swing . JProgressBar ( ) ; mainPanel . setName ( "mainPanel" ) ; org . jdesktop . application . ResourceMap resourceMap = org . jdesktop . application . Application . getInstance ( edu . luc . tictactoe . gui . controller . TicTacToeUIApp . class ) . getContext ( ) . getResourceMap ( TicTacToeUIView . class ) ; jLabel1 . setText ( resourceMap . getString ( "jLabel1.text" ) ) ; jLabel1 . setName ( "jLabel1" ) ; jLabel2 . setText ( resourceMap . getString ( "jLabel2.text" ) ) ; jLabel2 . setName ( "jLabel2" ) ; playBtn . setText ( resourceMap . getString ( "playBtn.text" ) ) ; playBtn . setName ( "playBtn" ) ; playBtn . addMouseListener ( new java . awt . event . MouseAdapter ( ) { public void mouseReleased ( java . awt . event . MouseEvent evt ) { playBtnMouseReleased ( evt ) ; } } ) ; settingsBtn . setText ( resourceMap . getString ( "settingsBtn.text" ) ) ; settingsBtn . setName ( "settingsBtn" ) ; settingsBtn . addMouseListener ( new java . awt . event . MouseAdapter ( ) { public void mouseReleased ( java . awt . event . MouseEvent evt ) { settingsBtnMouseReleased ( evt ) ; } } ) ; highScoresBtn . setText ( resourceMap . getString ( "highScoresBtn.text" ) ) ; highScoresBtn . setName ( "highScoresBtn" ) ; highScoresBtn . addMouseListener ( new java . awt . event . MouseAdapter ( ) { public void mouseReleased ( java . awt . event . MouseEvent evt ) { highScoresBtnMouseReleased ( evt ) ; } } ) ; exitBtn . setText ( resourceMap . getString ( "exitBtn.text" ) ) ; exitBtn . setName ( "exitBtn" ) ; exitBtn . addMouseListener ( new java . awt . event . MouseAdapter ( ) { public void mouseReleased ( java . awt . event . MouseEvent evt ) { exitBtnMouseReleased ( evt ) ; } } ) ; javax . swing . GroupLayout mainPanelLayout = new javax . swing . GroupLayout ( mainPanel ) ; mainPanel . setLayout ( mainPanelLayout ) ; mainPanelLayout . setHorizontalGroup ( mainPanelLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( mainPanelLayout . createSequentialGroup ( ) . addGroup ( mainPanelLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( mainPanelLayout . createSequentialGroup ( ) . addGap ( 133 , 133 , 133 ) . addComponent ( jLabel1 ) ) . addGroup ( mainPanelLayout . createSequentialGroup ( ) . addGap ( 111 , 111 , 111 ) . addGroup ( mainPanelLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . TRAILING ) . addGroup ( mainPanelLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . TRAILING , false ) . addComponent ( settingsBtn , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addComponent ( highScoresBtn , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addComponent ( exitBtn , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addComponent ( playBtn , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) ) . addComponent ( jLabel2 ) ) ) ) . addContainerGap ( 118 , short . MAX_VALUE ) ) ) ; mainPanelLayout . setVerticalGroup ( mainPanelLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( mainPanelLayout . createSequentialGroup ( ) . addGap ( 60 , 60 , 60 ) . addComponent ( jLabel1 ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . UNRELATED ) . addComponent ( jLabel2 ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED , 225 , short . MAX_VALUE ) . addComponent ( playBtn ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addComponent ( settingsBtn ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addComponent ( highScoresBtn ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addComponent ( exitBtn ) . addContainerGap ( ) ) ) ; menuBar . setName ( "menuBar" ) ; fileMenu . setText ( resourceMap . getString ( "fileMenu.text" ) ) ; fileMenu . setName ( "fileMenu" ) ; javax . swing . ActionMap actionMap = org . jdesktop . application . Application . getInstance ( edu . luc . tictactoe . gui . controller . TicTacToeUIApp . class ) . getContext ( ) . getActionMap ( TicTacToeUIView . class , this ) ; exitMenuItem . setAction ( actionMap . get ( "quit" ) ) ; exitMenuItem . setName ( "exitMenuItem" ) ; fileMenu . add ( exitMenuItem ) ; menuBar . add ( fileMenu ) ; helpMenu . setText ( resourceMap . getString ( "helpMenu.text" ) ) ; helpMenu . setName ( "helpMenu" ) ; aboutMenuItem . setAction ( actionMap . get ( "showAboutBox" ) ) ; aboutMenuItem . setName ( "aboutMenuItem" ) ; helpMenu . add ( aboutMenuItem ) ; menuBar . add ( helpMenu ) ; statusPanel . setName ( "statusPanel" ) ; statusPanelSeparator . setName ( "statusPanelSeparator" ) ; statusMessageLabel . setName ( "statusMessageLabel" ) ; statusAnimationLabel . setHorizontalAlignment ( javax . swing . SwingConstants . LEFT ) ; statusAnimationLabel . setName ( "statusAnimationLabel" ) ; progressBar . setName ( "progressBar" ) ; javax . swing . GroupLayout statusPanelLayout = new javax . swing . GroupLayout ( statusPanel ) ; statusPanel . setLayout ( statusPanelLayout ) ; statusPanelLayout . setHorizontalGroup ( statusPanelLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( statusPanelSeparator , javax . swing . GroupLayout . DEFAULT_SIZE , 320 , short . MAX_VALUE ) . addGroup ( statusPanelLayout . createSequentialGroup ( ) . addContainerGap ( ) . addComponent ( statusMessageLabel ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED , 150 , short . MAX_VALUE ) . addComponent ( progressBar , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addComponent ( statusAnimationLabel ) . addContainerGap ( ) ) ) ; statusPanelLayout . setVerticalGroup ( statusPanelLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( statusPanelLayout . createSequentialGroup ( ) . addComponent ( statusPanelSeparator , javax . swing . GroupLayout . PREFERRED_SIZE , 2 , javax . swing . GroupLayout . PREFERRED_SIZE ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addGroup ( statusPanelLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE ) . addComponent ( statusMessageLabel ) . addComponent ( statusAnimationLabel ) . addComponent ( progressBar , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) ) . addGap ( 3 , 3 , 3 ) ) ) ; setComponent ( mainPanel ) ; setMenuBar ( menuBar ) ; setStatusBar ( statusPanel ) ; settingsBtn . setVisible ( false ) ; }
tr	IDF	private void drilldownBtn1ActionPerformed ( java . awt . event . ActionEvent evt ) { if ( ! drillkeyTF1 . getText ( ) . isEmpty ( ) ) { JTabbedPane tabPane = ( JTabbedPane ) this . getParent ( ) ; String DDkeywords = drillkeyTF1 . getText ( ) ; DDTweetCleaner ddTC = new DDTweetCleaner ( ) ; TMDrillModel DDtmDrillModel = ddTC . TMcleanByKeyword ( DDkeywords , tmDM ) ; TM_DrillDown p = new TM_DrillDown ( DDtmDrillModel ) ; String method = "TM" ; tabPane . add ( "LV" + DDtmDrillModel . getLevel ( ) + " - " + DDkeywords + " - " + method , p ) ; tabPane . setSelectedComponent ( p ) ; } }
tr	KEY	public boolean isLoaded ( ) ;
tr	IDF	public void set ( T value ) { m_object = value ; }
tr	IDF	public void ChessVanillaGraphical ( ) { JPanel panel = new JPanel ( ) ; Dimension boardSize = new Dimension ( 500 , 600 ) ; lPane = new JLayeredPane ( ) ; panel . add ( lPane ) ; lPane . setPreferredSize ( boardSize ) ; lPane . addMouseListener ( this ) ; lPane . addMouseMotionListener ( this ) ; chessBoard = new JPanel ( ) ; lPane . add ( chessBoard , JLayeredPane . DEFAULT_LAYER ) ; chessBoard . setLayout ( new GridLayout ( 8 , 8 ) ) ; chessBoard . setSize ( 500 , 500 ) ; chessBoard . setBounds ( 0 , 0 , 500 , 500 ) ; for ( int i = 0 ; i < 64 ; i ++ ) { JPanel tile = new JPanel ( new BorderLayout ( ) ) ; chessBoard . add ( tile ) ; int row = ( i / 8 ) % 2 ; if ( row == 0 ) { tile . setBackground ( i % 2 == 0 ? Color . gray : Color . white ) ; } else { tile . setBackground ( i % 2 == 0 ? Color . white : Color . gray ) ; } } initializeGame ( ) ; }
tr	IDF	public void setOccupant ( Sentient _occupant ) { if ( this . tileFree ( ) ) { occupant = _occupant ; occupant . setLocation ( this ) ; } }
tr	KEY	public static SoundManager getInstance ( ) { return instance ; }
tr	IDF	private static boolean contains ( Node biggerTree , Node smallerTree ) { if ( biggerTree == null && smallerTree == null ) { return true ; } else if ( ( biggerTree == null && smallerTree != null ) || ( biggerTree != null && smallerTree == null ) ) { return false ; } if ( biggerTree . val == smallerTree . val ) { boolean a = contains ( biggerTree . left , smallerTree . left ) ; boolean b = contains ( biggerTree . right , smallerTree . right ) ; if ( a && b == true ) { return true ; } } boolean a = contains ( biggerTree . left , smallerTree ) ; boolean b = contains ( biggerTree . right , smallerTree ) ; return a || b ; }
tr	IDF	@ JsonProperty ( "label" ) public String getLabel ( ) { return label ; }
tr	KEY	public void setIdplanta ( int idplanta ) { this . idplanta = idplanta ; }
tr	IDF	public static void main ( String [ ] args ) throws Exception { System . out . println ( "Wikipedia Sudoku instance." ) ; Grid g = new Grid ( ) ; g . set ( 0 , 1 , 3 ) ; g . set ( 1 , 3 , 1 ) ; g . set ( 1 , 4 , 9 ) ; g . set ( 1 , 5 , 5 ) ; g . set ( 2 , 2 , 8 ) ; g . set ( 2 , 7 , 6 ) ; g . set ( 3 , 0 , 8 ) ; g . set ( 3 , 4 , 6 ) ; g . set ( 4 , 0 , 4 ) ; g . set ( 4 , 3 , 8 ) ; g . set ( 4 , 8 , 1 ) ; g . set ( 5 , 4 , 2 ) ; g . set ( 6 , 1 , 6 ) ; g . set ( 6 , 6 , 2 ) ; g . set ( 6 , 7 , 8 ) ; g . set ( 7 , 3 , 4 ) ; g . set ( 7 , 4 , 1 ) ; g . set ( 7 , 5 , 9 ) ; g . set ( 7 , 8 , 5 ) ; g . set ( 8 , 7 , 7 ) ; Solver s = new Solver ( g ) ; s . run ( ) ; System . out . println ( "\n\nhard for brute force." ) ; g = new Grid ( ) ; g . set ( 1 , 5 , 3 ) ; g . set ( 1 , 7 , 8 ) ; g . set ( 1 , 8 , 5 ) ; g . set ( 2 , 2 , 1 ) ; g . set ( 2 , 4 , 2 ) ; g . set ( 3 , 3 , 5 ) ; g . set ( 3 , 5 , 7 ) ; g . set ( 4 , 2 , 4 ) ; g . set ( 4 , 6 , 1 ) ; g . set ( 5 , 1 , 9 ) ; g . set ( 6 , 0 , 5 ) ; g . set ( 6 , 7 , 7 ) ; g . set ( 6 , 8 , 3 ) ; g . set ( 7 , 2 , 2 ) ; g . set ( 7 , 4 , 1 ) ; g . set ( 8 , 4 , 4 ) ; g . set ( 8 , 8 , 9 ) ; s = new Solver ( g ) ; s . run ( ) ; System . out . println ( "\n\nSupposed to be extreme" ) ; g = new Grid ( ) ; g . set ( 0 , 1 , 5 ) ; g . set ( 0 , 4 , 6 ) ; g . set ( 0 , 7 , 8 ) ; g . set ( 1 , 0 , 9 ) ; g . set ( 1 , 3 , 1 ) ; g . set ( 1 , 5 , 8 ) ; g . set ( 1 , 8 , 2 ) ; g . set ( 2 , 2 , 1 ) ; g . set ( 2 , 6 , 9 ) ; g . set ( 3 , 1 , 6 ) ; g . set ( 3 , 4 , 3 ) ; g . set ( 3 , 7 , 2 ) ; g . set ( 4 , 0 , 4 ) ; g . set ( 4 , 3 , 5 ) ; g . set ( 4 , 5 , 2 ) ; g . set ( 4 , 8 , 8 ) ; g . set ( 5 , 1 , 7 ) ; g . set ( 5 , 4 , 1 ) ; g . set ( 5 , 7 , 4 ) ; g . set ( 6 , 2 , 7 ) ; g . set ( 6 , 6 , 8 ) ; g . set ( 7 , 0 , 5 ) ; g . set ( 7 , 3 , 7 ) ; g . set ( 7 , 5 , 1 ) ; g . set ( 7 , 8 , 3 ) ; g . set ( 8 , 1 , 9 ) ; g . set ( 8 , 4 , 5 ) ; g . set ( 8 , 7 , 7 ) ; s = new Solver ( g ) ; s . run ( ) ; System . out . println ( "\n\nAnother hard one." ) ; g = new Grid ( ) ; g . set ( 0 , "010009402" ) ; g . set ( 1 , "400030900" ) ; g . set ( 2 , "097100050" ) ; g . set ( 3 , "061800000" ) ; g . set ( 4 , "000070000" ) ; g . set ( 5 , "000004120" ) ; g . set ( 6 , "050003640" ) ; g . set ( 7 , "004010005" ) ; g . set ( 8 , "603400010" ) ; s = new Solver ( g ) ; s . run ( ) ; System . out . println ( "\n\nThe Telegraph \"worlds hardest sudoku\"" ) ; g = new Grid ( ) ; g . set ( 0 , "800000000" ) ; g . set ( 1 , "003600000" ) ; g . set ( 2 , "070090200" ) ; g . set ( 3 , "050007000" ) ; g . set ( 4 , "000045700" ) ; g . set ( 5 , "000100030" ) ; g . set ( 6 , "001000068" ) ; g . set ( 7 , "008500010" ) ; g . set ( 8 , "090000400" ) ; s = new Solver ( g ) ; s . run ( ) ; System . out . println ( "\n\nThe same but just 1  non unique solutions." ) ; g = new Grid ( ) ; g . set ( 0 , "010000000" ) ; g . set ( 1 , "000000100" ) ; g . set ( 2 , "000001000" ) ; g . set ( 3 , "100000000" ) ; g . set ( 4 , "000000001" ) ; g . set ( 5 , "000100000" ) ; g . set ( 6 , "001000000" ) ; g . set ( 7 , "000000010" ) ; g . set ( 8 , "000010000" ) ; s = new Solver ( g ) ; s . setFirstSolutionOnly ( false ) ; s . setQuiet ( true ) ; s . run ( ) ; g . print ( ) ; System . out . println ( "Found " + s . getSolutions ( ) + " solutions." ) ; System . out . println ( "\n\nempty sudoku." ) ; g = new Grid ( ) ; g . set ( 0 , "000000000" ) ; g . set ( 1 , "000000000" ) ; g . set ( 2 , "000000000" ) ; g . set ( 3 , "000000000" ) ; g . set ( 4 , "000000000" ) ; g . set ( 5 , "000000000" ) ; g . set ( 6 , "000000000" ) ; g . set ( 7 , "000000000" ) ; g . set ( 8 , "000000000" ) ; s = new Solver ( g ) ; s . run ( ) ; System . out . println ( "\n\nSudoku with maximum empty field." ) ; g = new Grid ( ) ; g . set ( 0 , "006703500" ) ; g . set ( 1 , "000040000" ) ; g . set ( 2 , "500000002" ) ; g . set ( 3 , "900000007" ) ; g . set ( 4 , "030000040" ) ; g . set ( 5 , "800000001" ) ; g . set ( 6 , "100000004" ) ; g . set ( 7 , "000000000" ) ; g . set ( 8 , "059267310" ) ; s = new Solver ( g ) ; s . run ( ) ; g = new Grid ( ) ; g . set ( "917000000000000000000000000000000000000000000000000000000000000000000000791000000" ) ; s = new Solver ( g ) ; s . run ( ) ; System . out . println ( "A 'diabolical' sudoku by A.C.Stuart" ) ; g = new Grid ( ) ; g . set ( 0 , "074302000" ) ; g . set ( 1 , "000005040" ) ; g . set ( 2 , "000607900" ) ; g . set ( 3 , "056000790" ) ; g . set ( 4 , "300000005" ) ; g . set ( 5 , "027000680" ) ; g . set ( 6 , "005701000" ) ; g . set ( 7 , "010200000" ) ; g . set ( 8 , "000408160" ) ; s = new Solver ( g ) ; s . run ( ) ; }
tr	KEY	@ Override public boolean equals ( Object obj ) { if ( this == obj ) return true ; if ( obj == null ) return false ; if ( getClass ( ) != obj . getClass ( ) ) return false ; SchoolClass other = ( SchoolClass ) obj ; if ( name == null ) { if ( other . name != null ) return false ; } else if ( ! name . equals ( other . name ) ) return false ; return true ; }
tr	IDF	default void callerMessage ( String message ) { String name = Thread . currentThread ( ) . getName ( ) ; System . out . printf ( "[%s]: %s%n" , name , message ) ; }
tr	IDF	@ Override public void remove ( Geometry child ) { kids . remove ( child ) ; }
tr	IDF	public void setParams ( List < Parameter > params ) { this . params = params ; fodTools . setParams ( params ) ; outTools . setParams ( params ) ; }
tr	IDF	@ Override public void inputProcess ( ) { if ( Key . UP . isPressed ( ) ) { setScale ( getScale ( ) * 2 ) ; } if ( Key . DOWN . isPressed ( ) ) { setScale ( getScale ( ) / 2 ) ; } if ( Key . LEFT . isPressed ( ) ) { setAngle ( getAngle ( ) + 5f ) ; } if ( Key . RIGHT . isPressed ( ) ) { setAngle ( getAngle ( ) - 5f ) ; } }
tr	IDF	private void setValueUsingSetMethod ( Object value ) throws NoSuchMethodException , InvocationTargetException , IllegalAccessException { AbstractBeanTreeNode parentNode = this . getBeanParent ( ) ; if ( parentNode != null && parentNode . getUserObject ( ) == null ) { parentNode . setValueUsingSetMethod ( parentNode . getObjectDefaultValueInstance ( parentNode . objType ) ) ; } Object objInstance = parentNode . getUserObject ( ) ; if ( parentNode . objType . isArray ( ) ) { int indexInParent = parentNode . getIndex ( this ) ; Array . set ( parentNode . userObject , indexInParent , value ) ; } else { String setMethodNameInParent = "set" + ( getGetMethodNameInParent ( ) . startsWith ( "get" ) ? getGetMethodNameInParent ( ) . substring ( 3 ) : getGetMethodNameInParent ( ) . substring ( 2 ) ) ; Method setMethodInParent = objInstance . getClass ( ) . getMethod ( setMethodNameInParent , new class [ ] { this . objType } ) ; if ( objType . isEnum ( ) ) { setMethodInParent . invoke ( objInstance , new Object [ ] { enum . valueOf ( ( class < enum > ) userObject . getClass ( ) , value . toString ( ) ) } ) ; } else { Object valueToSet = value ; if ( value . getClass ( ) . isArray ( ) ) { class valueComponentType = value . getClass ( ) . getComponentType ( ) ; class setMethodComponentType = setMethodInParent . getParameterTypes ( ) [ 0 ] . getComponentType ( ) ; if ( setMethodComponentType . isPrimitive ( ) && false == valueComponentType . isPrimitive ( ) ) { valueToSet = this . convertObjectArrayToPrimitiveArray ( value , setMethodComponentType ) ; } else if ( false == setMethodComponentType . isPrimitive ( ) && valueComponentType . isPrimitive ( ) ) { valueToSet = this . convertPrimitiveArrayToObjectArray ( value , setMethodComponentType ) ; } } this . userObject = valueToSet ; setMethodInParent . invoke ( objInstance , new Object [ ] { valueToSet } ) ; } } }
tr	KEY	public CountContactsResponse createCountContactsResponse ( ) { return new CountContactsResponse ( ) ; }
tr	IDF	@ SuppressWarnings ( "unchecked" ) public boolean importData ( JComponent comp , Transferable t ) { if ( ! ( comp instanceof JList ) ) { return false ; } if ( ! t . isDataFlavorSupported ( DataFlavor . javaFileListFlavor ) ) { return false ; } try { List < File > files = ( List < File > ) t . getTransferData ( DataFlavor . javaFileListFlavor ) ; addFiles ( files . toArray ( new File [ files . size ( ) ] ) ) ; fileListPanel . enableComponents ( true ) ; buttonPanel . enableComponents ( true ) ; FileRenamerFrame . this . pack ( ) ; return true ; } catch ( UnsupportedFlavorException ufe ) { showErrorMessage ( ufe . getMessage ( ) ) ; } catch ( IOException ioe ) { showErrorMessage ( ioe . getMessage ( ) ) ; } return false ; }
tr	IDF	public static List < VcsCommit > parseListOfCommits ( String stdout ) { ArrayList < VcsCommit > commits = new ArrayList < > ( ) ; List < String > commitsAsString = split ( stdout , commitStartSeparator ) ; for ( String s : commitsAsString ) { commits . add ( parseCommit ( s , commitFieldsSeparator ) ) ; } return commits ; }
tr	KEY	public abstract void visit ( Block block ) ;
tr	IDF	@ Override public void mousePressed ( MouseEvent e ) { if ( displayColorChooser ) { dialog . setVisible ( true ) ; } else { chooser . setColor ( color ) ; activeSwatch . setBorder ( BorderFactory . createLineBorder ( ColorPalette . this . getBackground ( ) , 2 ) ) ; activeSwatch = ColorSwatch . this ; setBorder ( null ) ; setBackground ( color ) ; repaint ( ) ; } }
tr	KEY	public int getNumberOfPieces ( ) { return pieces . size ( ) ; }
tr	KEY	@ Override public float getY ( ) { float y = this . y ; return y ; }
tr	IDF	@ Override public String toString ( ) { final StringBuilder sb = new StringBuilder ( 128 ) ; toString ( sb ) ; return sb . toString ( ) ; }
tr	IDF	public int createUser ( User newUser ) throws SQLException { String sql = "INSERT INTO cart_comp461_db.User (idUser  name " + "address  city  state  zip  phone) VALUES" + "(?  ?  ?  ?  ?  ?  ?)" ; ResultSet rs = null ; PreparedStatement ps = con . prepareStatement ( sql , Statement . RETURN_GENERATED_KEYS ) ; ps . setNull ( 1 , java . sql . Types . INTEGER ) ; ps . setString ( 2 , newUser . getName ( ) ) ; ps . setString ( 3 , newUser . getAddress ( ) ) ; ps . setString ( 4 , newUser . getCity ( ) ) ; ps . setString ( 5 , newUser . getState ( ) ) ; ps . setString ( 6 , newUser . getZip ( ) ) ; ps . setString ( 7 , newUser . getPhone ( ) ) ; ps . executeUpdate ( ) ; rs = ps . getGeneratedKeys ( ) ; rs . last ( ) ; lastUserAutoKey = rs . getInt ( 1 ) ; return lastUserAutoKey ; }
tr	IDF	public Widget ( Point pos , Dimension size ) { init ( pos , size ) ; }
tr	KEY	public void setId_DevCompra ( int Id_DevCompra ) { this . Id_DevCompra = Id_DevCompra ; }
tr	KEY	public void stop ( ) { if ( ! running ) { throw new IllegalStateException ( "Simulation is stopped." ) ; } running = false ; }
tr	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { jToggleButton5ActionPerformed ( evt ) ; }
tr	IDF	@ Override public void runTest ( ) { TreeNode root = new TreeNode ( 8 ) ; TreeNode tmp = root ; tmp . left = new TreeNode ( 3 ) ; tmp = tmp . left ; tmp . left = new TreeNode ( 3 ) ; tmp = tmp . left ; tmp . left = new TreeNode ( 3 ) ; tmp = tmp . left ; tmp . left = new TreeNode ( 3 ) ; tmp = tmp . left ; tmp . left = new TreeNode ( 3 ) ; tmp = tmp . left ; }
tr	KEY	@ Override public boolean equals ( Object obj ) { if ( this == obj ) return true ; if ( obj == null ) return false ; if ( getClass ( ) != obj . getClass ( ) ) return false ; SchoolYear other = ( SchoolYear ) obj ; if ( end == null ) { if ( other . end != null ) return false ; } else if ( ! end . equals ( other . end ) ) return false ; if ( name == null ) { if ( other . name != null ) return false ; } else if ( ! name . equals ( other . name ) ) return false ; if ( start == null ) { if ( other . start != null ) return false ; } else if ( ! start . equals ( other . start ) ) return false ; return true ; }
tr	KEY	public int getIdcliente ( ) { return idcliente ; }
tr	KEY	public void setEmployed ( boolean employed ) { this . employed = employed ; }
tr	IDF	@ Test public void afterEnteringGameCanKnowLocation ( ) throws IOException { clientOne . connectToServer ( ) ; clientOne . send ( "enter as jim" ) ; clientOne . send ( "where" ) ; clientOne . received ( "Welcome to Test Land  jim!" ) ; clientOne . received ( "You're in an open field  County of the Mage." ) ; }
tr	IDF	private void fillRightTriangleUp ( Graphics g , Point left , Point right ) { int yIncrease = 2 ; int cnt = Math . abs ( right . y - left . y ) / yIncrease ; int xIncrease = Math . abs ( right . x - left . x ) / cnt ; int x = left . x ; int y = left . y ; int w = right . x - left . x ; for ( int i = 0 ; i < cnt ; i ++ ) { x += xIncrease ; y -= yIncrease ; w -= xIncrease ; g . fillRect ( x , y , w , yIncrease ) ; } }
tr	KEY	@ Override public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( ) != obj . getClass ( ) ) { return false ; } final TownHouse other = ( TownHouse ) obj ; if ( this . garage != other . garage ) { return false ; } return true ; }
tr	IDF	public void setJoueur ( Joueur j ) { this . joueur = j ; }
tr	IDF	private void jBAnteriorActionPerformed ( java . awt . event . ActionEvent evt ) { if ( corrente == - 1 ) { JOptionPane . showMessageDialog ( this , "N\u00E3o h\u00E1 registro(s)." , this . getTitle ( ) , JOptionPane . ERROR_MESSAGE ) ; } else if ( corrente >= 1 ) { corrente -= 1 ; } else { JOptionPane . showMessageDialog ( this , "Primeiro registro." , this . getTitle ( ) , JOptionPane . ERROR_MESSAGE ) ; } limpaCampos ( ) ; exibeDados ( ) ; }
tr	IDF	@ Override public void onTouch ( GameObject other ) { }
tr	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButton1ActionPerformed ( evt ) ; }
tr	IDF	@ Override public void updateViewFromModel ( ) { this . topicname . setText ( this . presenter . getModel ( ) . getTopic ( ) . getName ( ) ) ; this . questionWord . setText ( this . presenter . getModel ( ) . getQuestion ( ) ) ; this . answerField . setText ( this . presenter . getModel ( ) . getAnswer ( ) ) ; this . questionWord . requestFocus ( ) ; }
tr	KEY	public boolean equals ( Object _other ) { if ( _other == null ) { return false ; } if ( _other == this ) { return true ; } if ( ! ( _other instanceof MsgTypePk ) ) { return false ; } final MsgTypePk _cast = ( MsgTypePk ) _other ; if ( msgType == null ? _cast . msgType != msgType : ! msgType . equals ( _cast . msgType ) ) { return false ; } return true ; }
tr	KEY	public float getCurrentSpeed ( ) { return currentSpeed ; }
tr	IDF	public < CT > List < CT > findChildren ( class < CT > type , String orderby ) { return findChildren ( new LinkedList < CT > ( ) , type , orderby ) ; }
tr	KEY	public ParameterEditor ( ) { this ( null ) ; }
tr	KEY	@ Override public int getTotalScore ( ) { return getRemainingScore ( ) ; }
tr	IDF	public void setTheme ( String theme ) { this . theme = theme ; }
tr	IDF	@ Override public int hashCode ( ) { int hash = 3 ; hash = 7 * hash + ( this . money + "" ) . hashCode ( ) ; return hash ; }
tr	IDF	public void getAnswers ( ) { Quiz quiz = new Quiz ( ) ; quiz . getAnswers ( ) ; }
tr	IDF	@ Test public void canGetCategoriesOfNonExcistingProduct ( ) { List < Integer > categories_retrieved = null ; try { categories_retrieved = pd . getCategoriesOfProduct ( 1239874 ) ; } catch ( WebshopAppException e ) { } assertTrue ( ( categories_retrieved != null ) && ( categories_retrieved . size ( ) == 0 ) ) ; }
tr	KEY	public int getImgRowW ( ) { return this . imgRowW ; }
tr	IDF	public LinkedList < JavaCell > getPath ( ) { return path ; }
tr	IDF	public ChatRoom ( MessageProducer p , Destination dest , String name ) { producer = p ; this . name = name ; this . destination = dest ; }
tr	IDF	@ Override public void update ( ) { inputProcess ( ) ; if ( disposeTimer > 0 ) { disposeTimer -- ; } if ( disposeTimer == 0 ) { setDispose ( ) ; } if ( ! isEnable ( ) ) { return ; } setScale ( getScale ( ) + getVScale ( ) ) ; setAngle ( getAngle ( ) + getVAngle ( ) ) ; setAlpha ( getAlpha ( ) + getVAlpha ( ) ) ; if ( alpha > 1f ) { alpha = 1f ; vAlpha = 0f ; } if ( alpha < 0f ) { alpha = 0f ; vAlpha = 0f ; } move ( ) ; }
tr	IDF	public void setScheduledDeparture ( Date value ) { this . scheduledDeparture = value ; }
tr	KEY	public synchronized void xsetL3InitialDelay ( int a ) { l3ID = a ; }
tr	KEY	public int getColor ( ) { return color ; }
tr	IDF	public TextDir2DB ( ) { depthvals . add ( "0-10" ) ; depthvals . add ( "10-20" ) ; depthvals . add ( "20-30" ) ; depthvals . add ( "30-50" ) ; depthvals . add ( "50-75" ) ; depthvals . add ( "75-100" ) ; depthvals . add ( "100-125" ) ; depthvals . add ( "125-150" ) ; depthvals . add ( "150-200" ) ; depthvals . add ( "200-250" ) ; depthvals . add ( "250-300" ) ; depthvals . add ( "300-400" ) ; depthvals . add ( "400-500" ) ; depthvals . add ( "500-600" ) ; depthvals . add ( "600-700" ) ; depthvals . add ( "700-800" ) ; depthvals . add ( "800-900" ) ; depthvals . add ( "900-1000" ) ; depthvals . add ( "1000-1100" ) ; depthvals . add ( "1100-1200" ) ; depthvals . add ( "1200-1300" ) ; depthvals . add ( "1300-1400" ) ; depthvals . add ( "1400-1500" ) ; depthvals . add ( "1500-1750" ) ; depthvals . add ( "1750-2000" ) ; depthvals . add ( "2000-2500" ) ; depthvals . add ( "2500-3000" ) ; depthvals . add ( "3000-3500" ) ; depthvals . add ( "3500-4000" ) ; depthvals . add ( "4000-4500" ) ; depthvals . add ( "4500-5000" ) ; depthvals . add ( "5000-5500" ) ; }
tr	IDF	public void windowClosing ( java . awt . event . WindowEvent evt ) { formWindowClosing ( evt ) ; }
tr	KEY	public boolean isEmptyOrNullBuffer ( ) ;
tr	KEY	public abstract void incCount ( E data ) ;
tr	IDF	Result < long > authenticate ( String username , String password ) ;
tr	IDF	public UpdateValueUi ( ValuePost vardePost , KalkylUI kalkylUI ) throws IOException , ClassNotFoundException { this . vardePost = vardePost ; this . kalkylUI = kalkylUI ; setTitle ( "Uppdatera v\u00E4rde" ) ; Container c = getContentPane ( ) ; c . setLayout ( null ) ; setSize ( 800 , 300 ) ; int x = leftColumnWidth ; int y = heightDist ; c . add ( namnL ) ; namnL . setText ( "Ange nytt v\u00E4rde f\u00F6r " + vardePost . getName ( ) ) ; namnL . setBounds ( x , y , fieldWidth * 3 , fieldHeight ) ; y += fieldHeight + heightDist ; c . add ( datumL ) ; datumL . setBounds ( x , y , fieldWidth , fieldHeight ) ; y += fieldHeight + heightDist ; c . add ( beloppL ) ; beloppL . setBounds ( x , y , fieldWidth , fieldHeight ) ; if ( vardePost instanceof AktiePost ) { beloppL . setText ( "Kurs" ) ; } y += fieldHeight + heightDist ; c . add ( newValueL ) ; newValueL . setBounds ( x , y , fieldWidth , fieldHeight ) ; if ( vardePost instanceof AktiePost ) { beloppL . setText ( "Kursf\u00F6r\u00E4ndring" ) ; } y += fieldHeight + heightDist ; c . add ( interestL ) ; interestL . setBounds ( x , y , fieldWidth , fieldHeight ) ; y += fieldHeight + heightDist ; c . add ( earnedL ) ; earnedL . setBounds ( x , y , fieldWidth , fieldHeight ) ; y += fieldHeight + heightDist ; c . add ( meddelandeL ) ; meddelandeL . setBounds ( x , y , fieldWidth * 3 , fieldHeight ) ; x = leftColumnWidth ; c . add ( avbrytB ) ; avbrytB . setBounds ( x , y , fieldWidth , fieldHeight ) ; avbrytB . addActionListener ( this ) ; x += fieldWidth + widthDist ; c . add ( sparaB ) ; sparaB . setBounds ( x , y , fieldWidth , fieldHeight ) ; sparaB . addActionListener ( this ) ; y = heightDist * 2 + fieldHeight ; c . add ( datumT ) ; datumT . setBounds ( x , y , fieldWidth , fieldHeight ) ; datumT . setText ( ( new Date ( System . currentTimeMillis ( ) ) ) . toString ( ) ) ; y += fieldHeight + heightDist ; c . add ( beloppT ) ; beloppT . setBounds ( x , y , fieldWidth , fieldHeight ) ; beloppT . setText ( "" + vardePost . getLatestValue ( ) ) ; y += fieldHeight + heightDist ; c . add ( changeT ) ; changeT . setBounds ( x , y , fieldWidth , fieldHeight ) ; changeT . setText ( "" ) ; changeT . addActionListener ( this ) ; y += fieldHeight + heightDist ; c . add ( interestT ) ; interestT . setBounds ( x , y , fieldWidth , fieldHeight ) ; interestT . addActionListener ( this ) ; setVisible ( true ) ; }
tr	KEY	public void marcaNo ( ) { this . marcado = true ; }
tr	IDF	public void replaceNext ( String oldString , String newString ) { if ( next ( oldString ) ) txtComponent . replaceSelection ( newString ) ; }
tr	KEY	public Get createGet ( ) { return new Get ( ) ; }
tr	KEY	public Builder rampedHalfAndHalf ( boolean rampedHalfAndHalf ) { this . rampedHalfAndHalf = rampedHalfAndHalf ; return this ; }
tr	IDF	public static int addValue ( int r , int c ) { int piece = ds . getPiece ( r , c ) ; int whiteScore = 0 ; int blackScore = 0 ; if ( piece == DraughtsState . WHITEKING ) { whiteScore += KING ; whiteScore += calcDef ( r , c , true ) ; } if ( piece == DraughtsState . WHITEPIECE ) { whiteScore += DRAUGHT ; whiteScore += PLAYGROUND [ r ] [ c ] ; whiteScore += calcDef ( r , c , true ) ; } if ( piece == DraughtsState . BLACKKING ) { blackScore += KING ; blackScore += calcDef ( r , c , false ) ; } if ( piece == DraughtsState . BLACKPIECE ) { blackScore += DRAUGHT ; blackScore += PLAYGROUND [ 9 - r ] [ 9 - c ] ; blackScore += calcDef ( r , c , false ) ; } return whiteScore - blackScore ; }
tr	KEY	public void run ( ) { new InterfazVendedor ( ) . setVisible ( true ) ; }
tr	KEY	public ProgramState ( ) { }
tr	KEY	@ Override public boolean isEnabled ( ) { return true ; }
tr	KEY	private static TimeRange anyTimeRange ( ) { return any ( TimeRange . class ) ; }
tr	KEY	public void setAttributeID ( long attributeID ) { this . attributeID = attributeID ; }
tr	KEY	float getAngle ( ) ;
tr	IDF	public List < Player > getWinners ( ) { return game . getWinners ( ) ; }
tr	IDF	private void addParamMenu ( ) { JMenuBar jb = this . getJMenuBar ( ) ; if ( jb == null ) jb = new JMenuBar ( ) ; JMenu menu = new JMenu ( "Parameters" ) ; JMenuItem item = new JMenuItem ( "set parameter" ) ; item . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { panel . editParams ( ) ; } } ) ; menu . add ( item ) ; jb . add ( menu ) ; this . setJMenuBar ( jb ) ; }
tr	KEY	public void addBatch ( ) throws SQLException { this . ps . addBatch ( ) ; this . reset ( ) ; }
tr	KEY	public void clear ( ) { throw new UnsupportedOperationException ( ) ; }
tr	IDF	public static void installClipboardSupport ( JComponent target ) { Object oldActionBinding = target . getInputMap ( ) . get ( KEYSTROKE_CONTROL_V ) ; final Action oldAction = target . getActionMap ( ) . get ( oldActionBinding ) ; target . getInputMap ( ) . put ( KEYSTROKE_CONTROL_V , KEY_PASTE_FROM_CLIPBOARD ) ; target . getActionMap ( ) . put ( KEY_PASTE_FROM_CLIPBOARD , new AbstractAction ( ) { @ Override public void actionPerformed ( ActionEvent e ) { Transferable contents = Toolkit . getDefaultToolkit ( ) . getSystemClipboard ( ) . getContents ( this ) ; if ( contents != null ) { EveIPHDualInput input = new EveIPHDualInput ( ) ; if ( input . canAccept ( contents ) ) { if ( input . parse ( contents ) ) { MineralInput mineralInput = input . getMineralInput ( ) ; System . out . println ( mineralInput . toString ( ) ) ; MineralClipboardInputListener [ ] listeners = getDefault ( ) . listenerList . getListeners ( MineralClipboardInputListener . class ) ; for ( MineralClipboardInputListener listener : listeners ) { listener . mineralInput ( mineralInput ) ; } return ; } } } if ( oldAction != null ) { System . out . println ( "Executing old action" ) ; oldAction . actionPerformed ( e ) ; } } } ) ; }
tr	IDF	void destroy ( Item item ) { board . setItem ( item . child ( ) ) ; }
tr	KEY	public boolean getPenUse ( ) ;
tr	KEY	public void stop ( ) { set ( 0.0 ) ; }
tr	IDF	@ Override protected String [ ] getColumnNames ( ) { return ColumnNames ; }
tr	KEY	public int getY ( ) { return y ; }
tr	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { drilldownBtn3ActionPerformed ( evt ) ; }
tr	KEY	public AppController ( ) { }
tr	IDF	private void salirButtonActionPerformed ( java . awt . event . ActionEvent evt ) { this . setVisible ( false ) ; }
tr	KEY	public DadosPartida ( ) { }
tr	KEY	public void setId ( long id ) { this . id = id ; }
tr	KEY	public String toCsv ( ) { return "" + this . getCode ( ) ; }
tr	KEY	public void setAmbient ( double [ ] ambient ) { this . ambient = ambient ; }
tr	KEY	public long getId ( ) { return id ; }
tr	IDF	String getLeaderName ( ) throws DeadNodeException ;
tr	IDF	public void printDatabase ( ) { System . out . println ( "??Album:" + _albums . size ( ) ) ; for ( int i = 0 ; i < _albums . size ( ) ; ++ i ) { System . out . println ( "\t?" + i + _albums . get ( i ) . toString ( ) ) ; } System . out . println ( "??Album_Track:" + _albumTracks . size ( ) ) ; for ( int i = 0 ; i < _albumTracks . size ( ) ; ++ i ) { System . out . println ( "\t?" + i + _albumTracks . get ( i ) . toString ( ) ) ; } System . out . println ( "??Artist:" + _artists . size ( ) ) ; for ( int i = 0 ; i < _artists . size ( ) ; ++ i ) { System . out . println ( "\t?" + i + "|?" + _artists . get ( i ) ) ; } System . out . println ( "??Artist_Track:" + _artistTracks . size ( ) ) ; for ( int i = 0 ; i < _artistTracks . size ( ) ; ++ i ) { System . out . println ( "\t?" + i + _artistTracks . get ( i ) . toString ( ) ) ; } System . out . println ( "??Playlist:" + _playlists . size ( ) ) ; for ( int i = 0 ; i < _playlists . size ( ) ; ++ i ) { System . out . println ( "\t?" + i + "|?" + _playlists . get ( i ) ) ; } System . out . println ( "??Playlist_Track:" + _playlistTracks . size ( ) ) ; for ( int i = 0 ; i < _playlistTracks . size ( ) ; ++ i ) { System . out . println ( "\t?" + i + _playlistTracks . get ( i ) . toString ( ) ) ; } System . out . println ( "??Track:" + _tracks . size ( ) ) ; for ( int i = 0 ; i < _tracks . size ( ) ; ++ i ) { System . out . println ( "\t?" + i + _tracks . get ( i ) . toString ( ) ) ; } System . out . println ( "??Genre:" + _genres . size ( ) ) ; for ( int i = 0 ; i < _genres . size ( ) ; ++ i ) { System . out . println ( "\t?" + i + "|?" + _genres . get ( i ) ) ; } System . out . println ( "??Genre_Track:" + _genreTracks . size ( ) ) ; for ( int i = 0 ; i < _genreTracks . size ( ) ; ++ i ) { System . out . println ( "\t?" + i + _genreTracks . get ( i ) . toString ( ) ) ; } System . out . println ( "??Artist_Album:" + _artistAlbums . size ( ) ) ; for ( int i = 0 ; i < _artistAlbums . size ( ) ; ++ i ) { System . out . println ( "\t?" + i + _artistAlbums . get ( i ) . toString ( ) ) ; } }
tr	IDF	private void bSlideLeftActionPerformed ( java . awt . event . ActionEvent evt ) { _cuniv . p2cUpdateObject ( currentObjName , new Vector3d ( - Translation_Value , 0 , 0 ) , new Vector3d ( 0 , 0 , 0 ) ) ; }
tr	KEY	@ JsonProperty ( "id" ) public long getId ( ) { return id ; }
tr	KEY	public int getPort ( ) { return port ; }
tr	IDF	@ Test public void createEntityWithReferenceAndChangeIt ( ) { EFAttributeTestClass empty = new EFAttributeTestClass ( 1 ) ; EFAttributeTestClass reference = new EFAttributeTestClass ( 2 ) ; EFAttributeTestClass secondReference = new EFAttributeTestClass ( 3 ) ; empty . setChild ( reference ) ; Entity entity = new Entity ( empty ) ; empty . setChild ( secondReference ) ; assert . assertTrue ( entity . isObjectDirty ( ) ) ; }
tr	KEY	public int getHeight ( ) { return bounds . getHeight ( ) ; }
tr	IDF	@ Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ) ; g . drawImage ( board , 0 , 0 , null ) ; g . drawImage ( tileImage , 0 , 0 , null ) ; g . drawImage ( tempImage , 0 , 0 , null ) ; g . drawImage ( developers , 0 , 0 , null ) ; }
tr	KEY	Symbol getcopy ( ) { return new Module ( this ) ; }
tr	KEY	public int getEstado ( ) { return estado ; }
tr	KEY	public boolean isSoundEnabled ( ) { return soundEnabled ; }
tr	IDF	public void setQuery ( String query ) throws SQLException , IllegalStateException { if ( ! connectedToDatabase ) throw new IllegalStateException ( "Not Connected to Database" ) ; resultSet = statement . executeQuery ( query ) ; metaData = resultSet . getMetaData ( ) ; resultSet . last ( ) ; numberOfRows = resultSet . getRow ( ) ; fireTableStructureChanged ( ) ; }
tr	KEY	void pressMoveForward ( ) ;
tr	IDF	public Object clone ( ResourceManager p ) { return new Sprite ( ( Animation ) anim . clone ( ) , p ) ; }
tr	IDF	@ Test public void testGetMainPageAuthorized ( ) throws Exception { authorized ( true , Pages . MAIN_PAGE ) ; when ( request . getPathInfo ( ) ) . thenReturn ( Pages . MAIN_PAGE ) ; frontend . doGet ( request , response ) ; assert . assertTrue ( stringWriter . toString ( ) . contains ( "User Page" ) ) ; }
tr	IDF	public void render ( Graphics g ) { double time2 = System . currentTimeMillis ( ) / 1000.0 ; if ( w == 0 ) { w = getWidth ( ) ; h = getHeight ( ) ; projectPoint ( center , actualcenter ) ; } g . setColor ( Color . white ) ; g . fillRect ( 0 , 0 , w , h ) ; indi ( g , 10 * Math . sin ( time2 ) , 0 , 0 ) ; indi ( g , 0 , 10 * Math . cos ( time2 ) , 0 ) ; indi ( g , 0 , 0 , 10 * Math . sin ( time2 ) ) ; }
tr	KEY	void start ( ) ;
tr	IDF	public String getNome ( ) { return nome . toUpperCase ( ) ; }
tr	IDF	private void insert ( final Message m ) { SwingUtilities . invokeLater ( new Runnable ( ) { @ Override public void run ( ) { try { String s ; if ( m . isDisconnect ( ) ) { s = "You disconnected." ; } else { s = m . getText ( ) ; } s = s . replaceAll ( "&" , "&amp;" ) ; s = s . replaceAll ( "<" , "&lt;" ) ; s = s . replaceAll ( ">" , "&gt;" ) ; s = s . replaceAll ( "&lt;fetstil&gt;" , "<b>" ) ; s = s . replaceAll ( "&lt;/fetstil&gt;" , "</b>" ) ; s = s . replaceAll ( "&lt;kursiv&gt;" , "<i>" ) ; s = s . replaceAll ( "&lt;/kursiv&gt;" , "</i>" ) ; kit . insertHTML ( doc , doc . getLength ( ) , "<pre><b>" + m . getSender ( ) + ": </b><font color=\"" + m . getColor ( ) + "\">" + s + "</font></pre>" , 0 , 0 , null ) ; } catch ( BadLocationException | IOException e ) { e . printStackTrace ( ) ; } } } ) ; }
tr	IDF	@ Test public void test_StringSort ( ) throws Exception { List < String > list = Arrays . asList ( "34" , "32" , "43" , "4" , "3" , "3" , "40" ) ; Collections . sort ( list , new IntegerComparator ( ) ) ; Collections . reverse ( list ) ; System . out . println ( "sorted list: " + list ) ; }
tr	IDF	@ Override public void keyReleased ( KeyEvent e ) { if ( includeField . getText ( ) . isEmpty ( ) ) { includeField . setText ( INCLUDE_RECOMMAND_STRING ) ; } }
tr	IDF	private void jcbScoreEnabledActionPerformed ( java . awt . event . ActionEvent evt ) { Options opt = new Options ( ) ; opt . setScore ( jcbScoreEnabled . isSelected ( ) ) ; }
tr	IDF	protected void organiserCombat ( Salle s ) { if ( s . perso_dans_salle . size ( ) == 2 ) { s . combat ( s . perso_dans_salle . get ( 0 ) , s . perso_dans_salle . get ( 1 ) ) ; textLog . append ( "Le personnage gagnant est " + s . combat ( s . perso_dans_salle . get ( 0 ) , s . perso_dans_salle . get ( 1 ) ) . getNom ( ) ) ; } if ( s . perso_dans_salle . size ( ) == 3 ) { s . combat ( s . perso_dans_salle . get ( 0 ) , ( s . combat ( s . perso_dans_salle . get ( 0 ) , s . perso_dans_salle . get ( 1 ) ) ) ) ; textLog . append ( "Le personnage gagnant est " + s . combat ( s . perso_dans_salle . get ( 0 ) , ( s . combat ( s . perso_dans_salle . get ( 0 ) , s . perso_dans_salle . get ( 1 ) ) ) ) . getNom ( ) ) ; } if ( s . perso_dans_salle . size ( ) == 4 ) { Personnage vainqueur1 = s . combat ( s . perso_dans_salle . get ( 0 ) , s . perso_dans_salle . get ( 1 ) ) ; Personnage vainqueur2 = s . combat ( s . perso_dans_salle . get ( 2 ) , s . perso_dans_salle . get ( 3 ) ) ; s . combat ( vainqueur1 , vainqueur2 ) ; textLog . append ( "Le personnage gagnant est " + s . combat ( vainqueur1 , vainqueur2 ) . getNom ( ) ) ; } else { } }
tr	KEY	public void transform ( double [ ] src , double [ ] dst ) ;
tr	IDF	public User findByPrimaryKey ( String email ) throws UserDaoException { User ret [ ] = findByDynamicSelect ( SQL_SELECT + " WHERE email = ?" , new Object [ ] { email } ) ; return ret . length == 0 ? null : ret [ 0 ] ; }
tr	IDF	public Invite findByPrimaryKey ( Integer idInvite ) throws InviteDaoException { Invite ret [ ] = findByDynamicSelect ( SQL_SELECT + " WHERE idinvite = ?" , new Object [ ] { idInvite } ) ; return ret . length == 0 ? null : ret [ 0 ] ; }
tr	IDF	public CachedData ( Object data ) { this . data = data ; }
tr	IDF	@ Override public void desenharLinha ( ) { api . desenharLinha ( x , y ) ; }
tr	KEY	@ Override public void run ( ) { new GameBoard ( ) . setVisible ( true ) ; }
tr	IDF	@ Override public void positionChanged ( MediaPlayer arg0 , float arg1 ) { }
tr	IDF	@ SuppressWarnings ( "unchecked" ) private void initComponents ( ) { jScrollPane1 = new javax . swing . JScrollPane ( ) ; jTextArea1 = new javax . swing . JTextArea ( ) ; jLabel1 = new javax . swing . JLabel ( ) ; jLabel2 = new javax . swing . JLabel ( ) ; setDefaultCloseOperation ( javax . swing . WindowConstants . DISPOSE_ON_CLOSE ) ; setTitle ( "About CASE Tool" ) ; jTextArea1 . setEditable ( false ) ; jTextArea1 . setColumns ( 20 ) ; jTextArea1 . setLineWrap ( true ) ; jTextArea1 . setRows ( 5 ) ; jTextArea1 . setText ( "This is a software for automating various activities associated with structured Software Analysis and Design." ) ; jScrollPane1 . setViewportView ( jTextArea1 ) ; jLabel1 . setFont ( new java . awt . Font ( "Tahoma" , 0 , 18 ) ) ; jLabel1 . setForeground ( new java . awt . Color ( 0 , 0 , 102 ) ) ; jLabel1 . setText ( "CASE Tool" ) ; jLabel2 . setForeground ( new java . awt . Color ( 0 , 51 , 153 ) ) ; jLabel2 . setText ( "Made by - Aseem Patni" ) ; javax . swing . GroupLayout layout = new javax . swing . GroupLayout ( getContentPane ( ) ) ; getContentPane ( ) . setLayout ( layout ) ; layout . setHorizontalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addContainerGap ( ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( jScrollPane1 , javax . swing . GroupLayout . DEFAULT_SIZE , 361 , short . MAX_VALUE ) . addGroup ( layout . createSequentialGroup ( ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( jLabel1 ) . addComponent ( jLabel2 ) ) . addGap ( 0 , 0 , short . MAX_VALUE ) ) ) . addContainerGap ( ) ) ) ; layout . setVerticalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( javax . swing . GroupLayout . Alignment . TRAILING , layout . createSequentialGroup ( ) . addContainerGap ( ) . addComponent ( jLabel1 ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addComponent ( jLabel2 ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . UNRELATED ) . addComponent ( jScrollPane1 , javax . swing . GroupLayout . DEFAULT_SIZE , 227 , short . MAX_VALUE ) . addContainerGap ( ) ) ) ; pack ( ) ; }
tr	IDF	private final String getChunk ( String s , int slength , int marker ) { StringBuilder chunk = new StringBuilder ( ) ; char c = s . charAt ( marker ) ; chunk . append ( c ) ; marker ++ ; if ( isDigit ( c ) ) { while ( marker < slength ) { c = s . charAt ( marker ) ; if ( ! isDigit ( c ) ) break ; chunk . append ( c ) ; marker ++ ; } } else { while ( marker < slength ) { c = s . charAt ( marker ) ; if ( isDigit ( c ) ) break ; chunk . append ( c ) ; marker ++ ; } } return chunk . toString ( ) ; }
tr	IDF	private void jButton3ActionPerformed ( java . awt . event . ActionEvent evt ) { this . main . hideView ( Main . view . Payment ) ; this . main . showView ( Main . view . PaymentCheck ) ; }
tr	IDF	@ Override public void actionPerformed ( ActionEvent event ) { if ( event . getSource ( ) == this . environments ) { this . methods . removeAllItems ( ) ; Environment env = ( Environment ) this . environments . getSelectedItem ( ) ; if ( env != null ) { for ( ServiceMethod method : env . getMethods ( ) ) { if ( NewQueryDialog . operationPanels . containsKey ( method . getRequestClass ( ) ) ) { this . methods . addItem ( method ) ; } else { logger . warn ( "No operation panel for method: " + method . getDisplayName ( ) ) ; } } } } else if ( event . getSource ( ) == this . createBtn ) { if ( ! Utilities . isNullOrWhitespace ( this . getName ( ) ) ) { this . toCreate = true ; this . setVisible ( false ) ; this . dispose ( ) ; } else { JOptionPane . showMessageDialog ( this , "Unable to create service without a name" , "Invalid name" , JOptionPane . ERROR_MESSAGE ) ; this . nameField . requestFocus ( ) ; } } else if ( event . getSource ( ) == this . cancelBtn ) { this . setVisible ( false ) ; this . dispose ( ) ; } }
tr	IDF	@ Override public void setPingTime ( long nPing ) { ping = nPing ; }
tr	IDF	public void setDestinationNumber ( String destinationNumber ) { this . destinationNumber = destinationNumber ; }
tr	IDF	public void highlightTarget ( Point point ) { panel . highlightTarget ( point ) ; }
tr	KEY	public void setAccessHealthCare ( boolean accessHealthCare ) { this . accessHealthCare = accessHealthCare ; }
tr	KEY	private final long extractLabelCode ( long code ) { return ( code >> 4 ) & ( ( 1 << labelNumBits ) - 1 ) ; }
tr	KEY	@ Override public int getRowCount ( ) { return this . items . size ( ) ; }
tr	KEY	public double getHeight ( ) { return height ; }
tr	KEY	public void newGameSpeedIs ( int speedIs ) ;
tr	IDF	@ Test ( groups = "MaSuite" ) public void getEnum ( ) { LOGGER . log ( Level . INFO , "Derby Stating" ) ; assert . assertEquals ( SQLDatatbaseType . getEnum ( "ORACLE" ) , SQLDatatbaseType . ORACLE ) ; assert . assertEquals ( SQLDatatbaseType . getEnum ( "DB2AS400" ) , SQLDatatbaseType . DB2AS400 ) ; assert . assertEquals ( SQLDatatbaseType . getEnum ( "SQLSERVER" ) , SQLDatatbaseType . SQLSERVER ) ; assert . assertEquals ( SQLDatatbaseType . getEnum ( "UNKNOW_DATABASE" ) , SQLDatatbaseType . UNKNOW_DATABASE ) ; assert . assertEquals ( SQLDatatbaseType . getEnum ( null ) , SQLDatatbaseType . UNKNOW_DATABASE ) ; assert . assertEquals ( SQLDatatbaseType . getEnum ( "" + Math . random ( ) ) , SQLDatatbaseType . UNKNOW_DATABASE ) ; }
tr	KEY	private static void Show ( boolean enabled ) { throw new UnsupportedOperationException ( "Not supported yet." ) ; }
tr	IDF	public ColumnEquals ( String columnName , String value ) { super ( columnName ) ; this . value = value ; }
tr	KEY	public String getLastValidationMessage ( ) { return null ; }
tr	IDF	@ Override public void mouseEntered ( MouseEvent e ) { }
tr	IDF	@ Override protected void __doDelete ( HttpServletRequest req , HttpServletResponse resp ) throws IOException { }
tr	KEY	public XmlQuery ( ) { }
tr	IDF	private BufferedImage getBufferedImageFromSource ( String src ) { try { BufferedImage image = ImageIO . read ( this . getClass ( ) . getResource ( src ) ) ; return image ; } catch ( IOException e ) { System . out . println ( e ) ; } return null ; }
tr	IDF	public Herbivore ( IEnvironment environment , Point2D position , double direction , double speed , Color color ) { super ( environment , position ) ; this . direction = direction ; this . speed = speed ; this . color = Color . blue ; maxNeighbor = 10 ; seeds = 0 ; this . life = MIN_LIFE + new Random ( ) . nextInt ( MAX_LIFE - MIN_LIFE + 1 ) ; feeding = false ; time = 0 ; wait = 5000 ; digestTime = 5000 ; feeded = false ; hungry = 1 ; }
tr	KEY	public static void main ( String [ ] args ) { new MenuPrincipal ( ) ; }
tr	IDF	public void say ( ) { System . out . println ( "father...say...\uFF01" ) ; }
tr	IDF	@ Test public void testDate6 ( ) { Calendar beginCalendar = Calendar . getInstance ( ) ; Calendar endCalendar = Calendar . getInstance ( ) ; calendar_Obj . compareCalendar ( beginCalendar , endCalendar ) ; }
tr	IDF	void cannotListen ( String cause ) ;
tr	KEY	public void setCantidad ( int cantidad ) { this . cantidad = cantidad ; }
tr	KEY	public synchronized boolean isPressed ( ) { return ( getAmount ( ) != 0 ) ; }
tr	IDF	public static void main ( String [ ] args ) { int NEG = - 12345 ; int MIN = Integer . MIN_VALUE ; int MAX = Integer . MAX_VALUE ; int POS = 12345 ; int i ; String hex ; System . out . println ( "----------------------" ) ; System . out . println ( "Converting: " + POS ) ; hex = Conversion . intToHex ( POS ) ; System . out . println ( "Hex: " + hex ) ; i = Conversion . hexToInt ( hex ) ; System . out . println ( "Back: " + i ) ; System . out . println ( "----------------------" ) ; System . out . println ( "Converting: " + MIN ) ; hex = Conversion . intToHex ( MIN ) ; System . out . println ( "Hex: " + hex ) ; i = Conversion . hexToInt ( hex ) ; System . out . println ( "Back: " + i ) ; System . out . println ( "----------------------" ) ; System . out . println ( "Converting: " + MAX ) ; hex = Conversion . intToHex ( MAX ) ; System . out . println ( "Hex: " + hex ) ; i = Conversion . hexToInt ( hex ) ; System . out . println ( "Back: " + i ) ; System . out . println ( "----------------------" ) ; System . out . println ( "Converting: " + NEG ) ; hex = Conversion . intToHex ( NEG ) ; System . out . println ( "Hex: " + hex ) ; i = Conversion . hexToInt ( hex ) ; System . out . println ( "Back: " + i ) ; }
tr	IDF	public double value ( Individual < T > individual ) { return evalFn . value ( individual ) ; }
tr	IDF	public void setUsername ( String value ) { this . username = value ; }
tr	IDF	public void startClock ( ) { this . resetClock ( ) ; this . timer = new Timer ( ) ; timer . schedule ( new TimerTask ( ) { @ Override public void run ( ) { task ( ) ; } } , 1000 , 1000 ) ; }
tr	KEY	@ AfterMethod public void tearDownMethod ( ) throws Exception { }
tr	IDF	@ Test public final void testReadWithDelimeter ( ) { final File file = new File ( "mock.txt" ) ; file . write ( "a;bc;def;g;h;;i" ) ; assertEquals ( "a;" , file . readCharsWithDelimiter ( 100 , ; ) . get ( 0 ) . toString ( ) ) ; assertEquals ( "bc;" , file . readCharsWithDelimiter ( 100 , ; ) . get ( 1 ) . toString ( ) ) ; assertEquals ( "def;" , file . readCharsWithDelimiter ( 100 , ; ) . get ( 2 ) . toString ( ) ) ; assertEquals ( "g;" , file . readCharsWithDelimiter ( 100 , ; ) . get ( 3 ) . toString ( ) ) ; assertEquals ( "h;" , file . readCharsWithDelimiter ( 100 , ; ) . get ( 4 ) . toString ( ) ) ; assertEquals ( ";" , file . readCharsWithDelimiter ( 100 , ; ) . get ( 5 ) . toString ( ) ) ; assertEquals ( "i" , file . readCharsWithDelimiter ( 100 , ; ) . get ( 6 ) . toString ( ) ) ; file . delete ( ) ; }
tr	IDF	@ Override public void setSteering ( SteeringBehaviorsV2 steering ) { this . steering = steering ; }
tr	KEY	public final void setSeconds ( double seconds ) { if ( ( seconds >= 0 ) && ( seconds < 60 ) ) { this . seconds = seconds ; } }
tr	KEY	public float getY ( ) { return ( float ) position . y ; }
tr	KEY	public void start ( ) { if ( controlUpdater == null ) { controlUpdater = new Timer ( ) ; controlUpdater . schedule ( new UpdaterTask ( this ) , 0 , ( long ) ( this . period * 1000 ) ) ; } }
tr	IDF	@ Override public void run ( ) { while ( true ) { try { String line = lnr . readLine ( ) ; if ( line == null ) return ; lines . add ( line ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } }
tr	IDF	@ Override public CloneResult cloneToLocal ( ) { if ( repositoryUrl == null && settings . failFast ( ) ) { throw new IllegalStateException ( "Cannot clone repository because remote url is not specified for root: " + this ) ; } return execute ( new GitClone ( settings . gitPath ( ) , repositoryUrl , localPath ) , CloneResult . adapter ) ; }
tr	KEY	public boolean isStartGame ( ) { return startGame ; }
tr	IDF	private void OP_PLP ( ) { stackUp ( ) ; int iMem = readMemory ( 0100 + getSP ( ) ) ; setProcessorStatusRegister ( iMem ) ; }
tr	IDF	private static Integer girarEsquerda ( AcaoGirarEsquerda actionLeft , AmbienteExecucao ambiente , Integer degrees ) { Integer currentDegrees = ambiente . getDegrees ( ) ; Integer newDegreesValue = currentDegrees + degrees ; newDegreesValue = normalizarDegrees ( newDegreesValue ) ; return newDegreesValue ; }
tr	IDF	public int compare ( Integer e1 , Integer e2 ) { return e2 - e1 ; }
tr	KEY	public void set ( int col , int row , double value ) ;
tr	KEY	public MYSQLDB ( ) { }
tr	KEY	public boolean getSingleParentHousehold ( ) { return singleParentHousehold ; }
tr	KEY	public ReportStatusCommand ( ) { super ( "RW" ) ; }
tr	IDF	public void updateSharedPanel ( ) { for ( int i = 0 ; i < 5 ; i ++ ) { sharedPanel . updatePalaceTiles ( sharedModel . getNumPalaceTiles ( ( i + 1 ) * 2 ) , ( i + 1 ) * 2 ) ; } sharedPanel . updateThreePieceTiles ( sharedModel . getThreeSpaceTiles ( ) ) ; sharedPanel . updateIrrigationTiles ( sharedModel . getIrrigationTiles ( ) ) ; sharedPanel . updateNumPalaceCards ( sharedModel . getNumberPalaceCards ( ) ) ; sharedPanel . updateFestivalCard ( sharedModel . getFestivalCard ( ) ) ; }
tr	KEY	public LineType getDualType ( ) { switch ( this ) { case MOUNTAIN : return LineType . VALLEY ; case VALLEY : return LineType . MOUNTAIN ; default : return this ; } }
tr	KEY	protected void end ( ) { }
tr	KEY	public int size ( ) { return sentientQueue . size ( ) ; }
tr	KEY	public synchronized int xgetRepatDelay ( ) { return repeatDelay ; }
tr	KEY	public int getMapping ( ) { return this . mapping ; }
tr	KEY	public void setId ( int id ) { this . id = id ; }
tr	IDF	public void run ( ) { try { UIManager . setLookAndFeel ( UIManager . getCrossPlatformLookAndFeelClassName ( ) ) ; } catch ( Exception e ) { System . out . println ( "Error setting Java LAF: " + e ) ; } createGui ( ) ; }
tr	IDF	public CompetitiveLearning ( Network network ) { operations = new NetworkOperations ( network ) ; inputLayer = network . getLayers ( ) . get ( 0 ) ; weights = inputLayer . getOutGoingConnections ( ) ; }
tr	IDF	public static String getLatestDate ( ) { String date = "" ; try { Connection c = DBFactory . getConnection ( ) ; PreparedStatement ps = c . prepareStatement ( "SELECT date FROM tweets " + "ORDER BY idtweets DESC " + "LIMIT 1;" ) ; ResultSet rs = ps . executeQuery ( ) ; rs . next ( ) ; date = rs . getString ( "date" ) . substring ( 0 , 11 ) . trim ( ) ; } catch ( ClassNotFoundException ex ) { Logger . getLogger ( tweetHandler . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; } catch ( SQLException ex ) { Logger . getLogger ( tweetHandler . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; } return date ; }
tr	KEY	public Ipad makeIpad ( ) { return new Ipad ( ) ; }
tr	IDF	@ SuppressWarnings ( { "unchecked" , "rawtypes" } ) @ Override public Valor avaliar ( AmbienteExecucao amb ) throws VariavelNaoDeclaradaException , VariavelJaDeclaradaException { ValorConcreto valorEsquerda = ( ValorConcreto ) expressaoEsquerda . avaliar ( amb ) ; ValorConcreto valorDireita = ( ValorConcreto ) expressaoDireita . avaliar ( amb ) ; return new ValorBooleano ( valorEsquerda . isEquals ( valorDireita ) ) ; }
tr	KEY	public synchronized int xgetXInitialDelay ( ) { return xID ; }
tr	IDF	private Loft ( Builder b ) { rooms = b . rooms ; id = b . id ; }
tr	IDF	Iterator < String > getIterator ( String startDir ) throws FileNotFoundException ;
tr	IDF	private BusinessProfile businessProfileBuilder ( ) { BusinessProfile bp = new BusinessProfile ( ) ; List < Object > factors = new ArrayList < Object > ( ) { { FactorsWithMidPoint fwm1 = new FactorsWithMidPoint ( ) ; fwm1 . setId ( 837456784356 ) ; fwm1 . setMidPoint ( 15 ) ; fwm1 . setLabel ( "Rating range High" ) ; add ( fwm1 ) ; FactorWithInfluence fwm2 = new FactorWithInfluence ( ) ; fwm2 . setId ( 837456784356 ) ; fwm2 . setInfluence ( 2 ) ; fwm2 . setLabel ( "Influence" ) ; add ( fwm2 ) ; } } ; List < Object > subFactors = new ArrayList < Object > ( ) { { SubFactor_InsideBusinessProfile sfbp1 = new SubFactor_InsideBusinessProfile ( ) ; sfbp1 . setId ( 837456784356 ) ; sfbp1 . setRating ( 17 ) ; sfbp1 . setSelected ( 3 ) ; sfbp1 . setLabel ( "Management Strategy" ) ; ArrayList < Option > options1 = new ArrayList < Option > ( ) { { Option o1 = new Option ( ) ; o1 . setId ( 837456784356 ) ; o1 . setValue ( 3 ) ; o1 . setLabel ( "Description A" ) ; o1 . setIsSelected ( true ) ; add ( o1 ) ; Option o2 = new Option ( ) ; o2 . setId ( 837456784356 ) ; o2 . setValue ( 1 ) ; o2 . setLabel ( "Description B" ) ; o2 . setIsSelected ( false ) ; add ( o2 ) ; } } ; sfbp1 . setOptions ( options1 ) ; add ( sfbp1 ) ; SubFactor_InsideBusinessProfile sfbp2 = new SubFactor_InsideBusinessProfile ( ) ; sfbp2 . setId ( 837456784356 ) ; sfbp2 . setRating ( 20 ) ; sfbp2 . setSelected ( 3 ) ; sfbp2 . setLabel ( "Corporate Governance" ) ; ArrayList < Option > options2 = new ArrayList < Option > ( ) { { Option o1 = new Option ( ) ; o1 . setId ( 837456784356 ) ; o1 . setValue ( 5 ) ; o1 . setLabel ( "Description" ) ; o1 . setIsSelected ( true ) ; add ( o1 ) ; Option o2 = new Option ( ) ; o2 . setId ( 837456784356 ) ; o2 . setValue ( 3 ) ; o2 . setLabel ( "Description available" ) ; o2 . setIsSelected ( false ) ; add ( o2 ) ; } } ; sfbp2 . setOptions ( options2 ) ; add ( sfbp2 ) ; } } ; bp . setFactors ( factors ) ; bp . setSubFactors ( subFactors ) ; return bp ; }
tr	IDF	@ Override public Object execute ( HttpServletRequest request , HttpServletResponse response ) throws Exception { Contexto oContexto = ( Contexto ) request . getAttribute ( "contexto" ) ; oContexto . setVista ( "jsp/usuario/login.jsp" ) ; return null ; }
tr	KEY	public void setSel ( boolean sel ) { this . sel = sel ; }
tr	KEY	public int getId_Empleado ( ) { return Id_Empleado ; }
tr	KEY	public int getDx ( ) { return dx ; }
tr	IDF	public List < double > getLocationVector ( ) { List < double > vector = new ArrayList < double > ( 2 ) ; vector . add ( location . x ) ; vector . add ( location . y ) ; return vector ; }
tr	KEY	public abstract void render ( VGraphics g ) ;
tr	KEY	public static final int getLowBits ( int data ) { return data & 0F ; }
tr	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { campotexto1ActionPerformed ( evt ) ; }
tr	KEY	public void setCode ( int code ) { this . code = code ; }
tr	IDF	public void actionPerformed ( ActionEvent e ) { controller . centerMapEvent ( ) ; }
tr	IDF	private void createImputFieldName ( ) { playerName = new JTextField ( 30 ) ; playerName . setBorder ( BorderFactory . createLineBorder ( Color . BLACK ) ) ; }
tr	KEY	public abstract void onResponse ( T response ) ;
tr	IDF	public Tarea ( String descripcionTarea , int idUsuario , int estadoTarea , int idProyecto ) { this . descripcionTarea = descripcionTarea ; this . idUsuario = idUsuario ; this . estadoTarea = estadoTarea ; this . idProyecto = idProyecto ; }
tr	KEY	public static synchronized DBManager initializeInMemory ( ) { inMemory = true ; return getInstance ( ) ; }
tr	IDF	public void setForce ( int force ) { forceSlider . setValue ( force ) ; }
tr	KEY	public FinaliserLivraison ( ) { super ( ) ; }
tr	KEY	@ Override public void setFocus ( ) { }
tr	KEY	public abstract void setParent ( Component parent ) ;
tr	IDF	public void atualizar ( TabuleiroXadrez tabuleiro , Jogador brancas , Jogador pretas , String aviso ) { atualizar ( tabuleiro , brancas , pretas ) ; exibirAlerta ( aviso ) ; }
tr	IDF	public SquareRootFactory ( FormulaFactory [ ] factories , LiteralFactory literalFactory ) { super ( factories , literalFactory ) ; }
tr	KEY	public MehMurray ( ) { }
tr	KEY	public void setArrTiles1 ( int [ ] arrTiles1 ) { this . arrTiles1 = arrTiles1 ; }
tr	IDF	@ Override public double [ ] getVariables ( ) { double [ ] variables = new double [ this . buildings . size ( ) ] ; for ( int i = 0 ; i < variables . length ; i ++ ) variables [ i ] = 1.0 ; return variables ; }
tr	IDF	@ Test public void canAddProductToCart ( ) { Map < Integer , Integer > sc = new HashMap < > ( ) ; try { shoppingCart . addProductToCart ( user1 , prod_id1 , 20 ) ; sc = getShoppingCart ( user1 ) ; deleteShoppingCartUser ( user1 ) ; } catch ( WebshopAppException e ) { e . printStackTrace ( ) ; } assertEquals ( 20 , sc . get ( prod_id1 ) . intValue ( ) ) ; }
tr	KEY	public void setPower ( int power ) { this . power = power ; }
tr	IDF	@ Override public void windowClosing ( WindowEvent e ) { currentPanel . disposePanel ( ) ; dispose ( ) ; System . exit ( 0 ) ; }
tr	IDF	public PalaceCard ( int cardType , boolean faceUp ) { this . faceUp = faceUp ; symbols = new ArrayList < Integer > ( ) ; switch ( cardType ) { case 1 : symbols . add ( 1 ) ; this . numSymbols = 1 ; this . cardType = "palaceCard_DRUM" ; break ; case 2 : symbols . add ( 2 ) ; this . numSymbols = 1 ; this . cardType = "palaceCard_MASK" ; break ; case 3 : symbols . add ( 3 ) ; this . numSymbols = 1 ; this . cardType = "palaceCard_PUPPET" ; break ; case 4 : symbols . add ( 1 ) ; symbols . add ( 2 ) ; this . numSymbols = 2 ; this . cardType = "palaceCard_MASK_DRUM" ; break ; case 5 : symbols . add ( 1 ) ; symbols . add ( 3 ) ; this . numSymbols = 2 ; this . cardType = "palaceCard_PUPPET_DRUM" ; break ; case 6 : symbols . add ( 2 ) ; symbols . add ( 3 ) ; this . numSymbols = 2 ; this . cardType = "palaceCard_PUPPET_MASK" ; break ; } }
tr	IDF	@ Test public final void testSplitBasic ( ) { final ArrayList < ? > splits = StringUtilities . split ( "test a" ) ; assertEquals ( "test" , splits . get ( 0 ) ) ; assertEquals ( " " , splits . get ( 1 ) ) ; assertEquals ( "a" , splits . get ( 2 ) ) ; assertEquals ( 3 , splits . size ( ) ) ; }
tr	KEY	public void setAmps ( int amps ) { this . amps = amps ; }
tr	IDF	@ Override public void setFont ( Font font ) { if ( font == null ) { mFont = null ; repaint ( ) ; return ; } Font f = mFontMap . get ( font ) ; if ( f == null ) { f = font . deriveFont ( ( float ) Math . round ( mFontHeight * 0.5f ) ) ; mFontMap . put ( font , f ) ; } if ( mFont == f ) { return ; } mFont = f ; repaint ( ) ; }
tr	KEY	public boolean playerFinished ( ) { return this . getRemainingScore ( ) == 0 ; }
tr	IDF	public void context ( final String value ) throws IOException { context ( value , "" ) ; }
tr	IDF	private void miFinishRoundActionPerformed ( java . awt . event . ActionEvent evt ) { scoreRound ( ) ; Manager . getInstance ( ) . saveProfiles ( ) ; }
tr	IDF	public ExpressaoContext ( ParserRuleContext parent , int invokingState ) { super ( parent , invokingState ) ; }
tr	IDF	public final long createArcCodeP ( FeatureTemplate . Arc temp , long x ) { return ( ( x << numArcFeatBits ) | temp . ordinal ( ) ) << flagBits ; }
tr	IDF	public void setJslideMatchPairs ( JSlider jslideMatchPairs ) { this . jslideMatchPairs = jslideMatchPairs ; }
tr	IDF	@ Test public final void testCopy ( ) { final Directory rootDir = new Directory ( "testFolder" ) ; final File fileA1 = new File ( "testFolder" + File . separatorChar + "fileA1.txt" ) ; final File fileA2 = new File ( "testFolder" + File . separatorChar + "fileA2.txt" ) ; final Directory folderA1 = new Directory ( "testFolder" + File . separatorChar + "testFolderA1" ) ; final Directory folderA2 = new Directory ( "testFolder" + File . separatorChar + "testFolderA2" ) ; final Directory folderA3 = new Directory ( "testFolder" + File . separatorChar + "testFolderA3" ) ; final Directory folderA4 = new Directory ( "testFolder" + File . separatorChar + "testFolderA4" ) ; final File fileB1 = new File ( "testFolder" + File . separatorChar + "testFolderA2" + File . separatorChar + "fileB1.txt" ) ; final Directory folderB1 = new Directory ( "testFolder" + File . separatorChar + "testFolderA3" + File . separatorChar + "testFolderB1" ) ; final File fileB2 = new File ( "testFolder" + File . separatorChar + "testFolderA4" + File . separatorChar + "fileB2.txt" ) ; final File fileB3 = new File ( "testFolder" + File . separatorChar + "testFolderA4" + File . separatorChar + "fileB3.txt" ) ; final Directory folderB2 = new Directory ( "testFolder" + File . separatorChar + "testFolderA4" + File . separatorChar + "testFolderB2" ) ; final File fileB4 = new File ( "testFolder" + File . separatorChar + "testFolderA4" + File . separatorChar + "testFolderB2" + File . separatorChar + "fileB4.txt" ) ; assertTrue ( rootDir . exists ( ) ) ; assertTrue ( fileA1 . exists ( ) ) ; assertTrue ( fileA2 . exists ( ) ) ; assertTrue ( folderA1 . exists ( ) ) ; assertTrue ( folderA2 . exists ( ) ) ; assertTrue ( folderA3 . exists ( ) ) ; assertTrue ( folderA4 . exists ( ) ) ; assertTrue ( fileB1 . exists ( ) ) ; assertTrue ( folderB1 . exists ( ) ) ; assertTrue ( fileB1 . exists ( ) ) ; assertTrue ( fileB2 . exists ( ) ) ; assertTrue ( fileB3 . exists ( ) ) ; assertTrue ( folderB2 . exists ( ) ) ; assertTrue ( fileB4 . exists ( ) ) ; final Directory rootDir2 = new Directory ( "testFolder2" ) ; rootDir . copyContentsTo ( rootDir2 ) ; final List < DiskUnit > units = rootDir2 . getUnitsWithin ( ) ; assertEquals ( 6 , units . size ( ) ) ; assertTrue ( unitsContainsPath ( units , "testFolder2" + File . separatorChar + "fileA1.txt" ) ) ; assertTrue ( unitsContainsPath ( units , "testFolder2" + File . separatorChar + "fileA2.txt" ) ) ; assertTrue ( unitsContainsPath ( units , "testFolder2" + File . separatorChar + "testFolderA1" ) ) ; assertTrue ( unitsContainsPath ( units , "testFolder2" + File . separatorChar + "testFolderA2" ) ) ; assertTrue ( unitsContainsPath ( units , "testFolder2" + File . separatorChar + "testFolderA3" ) ) ; assertTrue ( unitsContainsPath ( units , "testFolder2" + File . separatorChar + "testFolderA4" ) ) ; final List < DiskUnit > units2 = new Directory ( "testFolder2" + File . separatorChar + "testFolderA1" ) . getUnitsWithin ( ) ; assertEquals ( 0 , units2 . size ( ) ) ; final List < DiskUnit > units3 = new Directory ( "testFolder2" + File . separatorChar + "testFolderA2" ) . getUnitsWithin ( ) ; assertEquals ( 1 , units3 . size ( ) ) ; assertEquals ( File . CURRENT_DIR + File . separatorChar + "testFolder2" + File . separatorChar + "testFolderA2" + File . separatorChar + "fileB1.txt" , units3 . get ( 0 ) . getPath ( ) ) ; final List < DiskUnit > units4 = new Directory ( "testFolder2" + File . separatorChar + "testFolderA3" ) . getUnitsWithin ( ) ; assertEquals ( 1 , units4 . size ( ) ) ; assertEquals ( File . CURRENT_DIR + File . separatorChar + "testFolder2" + File . separatorChar + "testFolderA3" + File . separatorChar + "testFolderB1" , units4 . get ( 0 ) . getPath ( ) ) ; final List < DiskUnit > units5 = new Directory ( "testFolder2" + File . separatorChar + "testFolderA4" ) . getUnitsWithin ( ) ; assertEquals ( 3 , units5 . size ( ) ) ; assertTrue ( unitsContainsPath ( units5 , "testFolder2" + File . separatorChar + "testFolderA4" + File . separatorChar + "fileB2.txt" ) ) ; assertTrue ( unitsContainsPath ( units5 , "testFolder2" + File . separatorChar + "testFolderA4" + File . separatorChar + "fileB3.txt" ) ) ; assertTrue ( unitsContainsPath ( units5 , "testFolder2" + File . separatorChar + "testFolderA4" + File . separatorChar + "testFolderB2" ) ) ; final List < DiskUnit > units6 = new Directory ( "testFolder2" + File . separatorChar + "testFolderA4" + File . separatorChar + "testFolderB2" ) . getUnitsWithin ( ) ; assertEquals ( 1 , units6 . size ( ) ) ; assertEquals ( File . CURRENT_DIR + File . separatorChar + "testFolder2" + File . separatorChar + "testFolderA4" + File . separatorChar + "testFolderB2" + File . separatorChar + "fileB4.txt" , units6 . get ( 0 ) . getPath ( ) ) ; rootDir . delete ( ) ; rootDir2 . delete ( ) ; }
tr	KEY	private static boolean isOutlier ( double d ) { return d > 0.01 || d < 0.0001 ; }
tr	KEY	public void setPrice ( double price ) { this . price = price ; }
tr	IDF	public static void main ( String [ ] args ) { int x = 1 ; System . out . println ( x + ": " + isBinaryPalindrome ( x ) ) ; x = 3 ; System . out . println ( x + ": " + isBinaryPalindrome ( x ) ) ; x = 5 ; System . out . println ( x + ": " + isBinaryPalindrome ( x ) ) ; x = 6 ; System . out . println ( x + ": " + isBinaryPalindrome ( x ) ) ; x = 7 ; System . out . println ( x + ": " + isBinaryPalindrome ( x ) ) ; x = 9 ; System . out . println ( x + ": " + isBinaryPalindrome ( x ) ) ; x = 13 ; System . out . println ( x + ": " + isBinaryPalindrome ( x ) ) ; }
tr	IDF	public void act ( ) { if ( this . down == true ) { move ( 20 ) ; dealtDamage ( this . getX ( ) , this . getY ( ) , 5 , 300 , 1 , 0 , 0.6 , 0 ) ; } else { if ( this . direction == true ) { setLocation ( this . getX ( ) + speed , getY ( ) ) ; dealtDamage ( this . getX ( ) , this . getY ( ) , 700 , 5 , 1 , 0 , 0.5 , 1 ) ; } else if ( this . direction == false ) { setLocation ( this . getX ( ) - speed , getY ( ) ) ; dealtDamage ( this . getX ( ) , this . getY ( ) , 700 , 5 , 1 , 0 , 0.5 , 1 ) ; } } if ( getX ( ) < 0 || getX ( ) > 1000 ) { getWorld ( ) . removeObject ( this ) ; } else if ( getY ( ) > 400 ) { getWorld ( ) . removeObject ( this ) ; } }
tr	IDF	public Sparkle ( int x , int y , float xa , float ya , int xPic , int yPic , int timeSpan ) { sheet = Art . particles ; this . x = x ; this . y = y ; this . xa = xa ; this . ya = ya ; this . xPic = xPic ; xPicStart = xPic ; this . yPic = yPic ; this . xPicO = 4 ; this . yPicO = 4 ; wPic = 8 ; hPic = 8 ; life = 10 + ( int ) ( Math . random ( ) * timeSpan ) ; }
tr	KEY	public boolean isCellEditable ( int rowIndex , int columnIndex ) { return canEdit [ columnIndex ] ; }
tr	KEY	protected abstract String getXMLPropertySetEnd ( ) ;
tr	IDF	@ Override public boolean signIn ( long nodeId , String password ) { this . nodeId = nodeId ; this . password = password ; ClientAuthenticationMessage message = new ClientAuthenticationMessage ( messageManager . getProtocolParameters ( ) , "$" + String . valueOf ( nodeId ) , password ) ; this . reconnect = true ; messageManager . sendMessage ( message ) ; return true ; }
tr	KEY	protected int puzzleSize ( ) { return puzzle . getSize ( ) ; }
tr	IDF	public PalaceCard drawFestivalCard ( boolean isUp ) { PalaceCard card = this . sharedModel . getFestivalCard ( ) ; sharedModel . drawFestivalCard ( isUp ) ; sharedPanel . drawFestivalCard ( sharedModel . getNumberPalaceCards ( ) , sharedModel . getFestivalCardType ( ) ) ; return card ; }
tr	IDF	private void canonicalize ( ) { while ( true ) { if ( inode == null ) break ; else if ( inode . subtree == null ) { inode = inode . parent ; if ( inode == null ) break ; else ++ inode . index ; } else if ( ! ( inode . subtree instanceof Node ) ) { if ( inode . index < ( ( Object [ ] ) inode . subtree ) . length ) break ; else { inode = inode . parent ; if ( inode == null ) break ; else ++ inode . index ; } } else { Node node = ( Node ) inode . subtree ; if ( inode . index == 0 ) inode = new IteratorNode ( node . left , 0 , inode ) ; else if ( inode . index == elementSize ( node . element ) + 1 ) inode = new IteratorNode ( node . right , 0 , inode . parent ) ; else break ; } } }
tr	KEY	public DummyBoardEventProducer ( ) { }
tr	IDF	public byte [ ] getByteHash ( String input ) { md . reset ( ) ; final byte [ ] output = md . digest ( input . getBytes ( ) ) ; return output ; }
tr	IDF	public void setStatus ( UserState st ) { this . status = st ; }
tr	IDF	public PiecePart ( final Polymino puzzle , final Piece piece , final PieceAtom pieceAtom , final int boardRow , final int boardCol , final boolean [ ] [ ] mask ) { super ( puzzle ) ; this . puzzle = puzzle ; this . piece = piece ; this . boardRow = boardRow ; this . boardCol = boardCol ; this . mask = mask ; atoms . add ( pieceAtom ) ; for ( int row = 0 ; row < pieceRows ( ) ; ++ row ) { for ( int col = 0 ; col < pieceCols ( ) ; ++ col ) { if ( mask [ row ] [ col ] ) { int atRow = boardRow + row ; int atCol = boardCol + col ; tryAddAtom ( atRow , atCol ) ; } } } }
tr	KEY	@ Override public void inputProcess ( ) { }
tr	IDF	protected BaseDao ( DatabaseManager dbmanager ) { this ( dbmanager , new HashMap < class < ? > , String > ( ) ) ; }
tr	IDF	private synchronized String decrypt ( String encryptedHex , SecretKey key , String algorithm ) { Cipher cipher = ciphers . get ( algorithm ) ; byte [ ] encryptedBytes = parseHexBinary ( encryptedHex ) ; byte [ ] decryptedBytes ; String stringOut ; try { cipher . init ( Cipher . DECRYPT_MODE , key ) ; decryptedBytes = cipher . doFinal ( encryptedBytes ) ; stringOut = new String ( decryptedBytes , StandardCharsets . UTF_8 ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } return stringOut ; }
tr	IDF	public TIPPTaskResponse ( TIPPTaskRequest request , String requestPackageId , TIPPCreator requestCreator ) { super ( request . getTaskType ( ) , request . getSourceLocale ( ) , request . getTargetLocale ( ) ) ; this . requestPackageId = requestPackageId ; this . requestCreator = requestCreator ; }
tr	IDF	public void setAction ( String action ) { this . action = action ; }
tr	KEY	public Zodiac ( ) { super ( "Zodiac" , 2 ) ; }
tr	KEY	public int getTicketLeft ( ) { return ticket -- ; }
tr	KEY	public void setId_Persona ( int Id_Persona ) { this . Id_Persona = Id_Persona ; }
tr	KEY	public void setLimitedResidentialOrHousing ( boolean limitedResidentialOrHousing ) { this . limitedResidentialOrHousing = limitedResidentialOrHousing ; }
tr	KEY	public void setxPos ( int [ ] [ ] xPos ) { this . xPos = xPos ; }
tr	IDF	public void zoomOut ( ) { zoom /= ZOOM_TICK ; screenChanged ( ) ; }
tr	KEY	private ArrayCache ( ) { }
tr	IDF	@ Override public void onMouseDown ( BufferedImage image , int x , int y ) { Graphics2D g = ( Graphics2D ) image . getGraphics ( ) ; g . setColor ( colorSelector . getColor ( ) ) ; fill ( image , x , y ) ; }
tr	KEY	public static Terrain get_terrain ( String symbol ) { switch ( symbol ) { case "A" : return new Airport ( ) ; case "B" : return new Base ( ) ; case "C" : return new City ( ) ; case "F" : return new Forest ( ) ; case "H" : return new HQ ( ) ; case "I" : return new MissileSilo ( ) ; case "M" : return new Mountain ( ) ; case "P" : return new Plain ( ) ; case "O" : return new Port ( ) ; case "E" : return new Reef ( ) ; case "V" : return new River ( ) ; case "R" : return new Road ( ) ; case "S" : return new Sea ( ) ; case "L" : return new Shoal ( ) ; case "W" : return new Tower ( ) ; default : throw new IllegalArgumentException ( "[Terrain.get_terrain] unable to parse symbol input (" + symbol + ")" ) ; } }
tr	KEY	public static boolean createFile ( File file ) { try { return file . createNewFile ( ) ; } catch ( IOException e ) { } return false ; }
tr	KEY	@ Override public void stop ( ) { stopped = true ; }
tr	KEY	public abstract boolean setSpeedSlow ( ) ;
tr	KEY	public int getWheelRotation ( ) { if ( e instanceof MouseWheelEvent ) { return ( ( MouseWheelEvent ) e ) . getWheelRotation ( ) ; } else { return 0 ; } }
tr	KEY	public boolean isClicked ( ) { return clicked ; }
tr	IDF	public void convertFile ( ) { try { while ( true ) { cr . read ( ) ; cw . setSource ( cr . getSource ( ) ) ; cw . setID ( cr . getID ( ) ) ; cw . setTime ( cr . getTime ( ) ) ; cw . setDuration ( cr . getDuration ( ) ) ; cw . setDepth ( cr . getDepth ( ) ) ; cw . setLon ( cr . getLon ( ) ) ; cw . setLat ( cr . getLat ( ) ) ; cw . setDistance ( cr . getDistance ( ) ) ; cw . setStatus ( cr . getStatus ( ) ) ; cw . setDestination ( cr . getDestination ( ) ) ; cw . setNodata ( cr . isNodata ( ) ) ; cw . write ( ) ; } } catch ( EOFException e ) { } cr . close ( ) ; cw . close ( ) ; }
tr	KEY	public abstract Rectangle getNeighbourBounds ( ) ;
tr	KEY	public int getNcols ( ) { return c ; }
tr	IDF	@ Override public void actionPerformed ( ActionEvent e ) { shuffle ( ) ; }
tr	KEY	public byte [ ] getSamples ( ) { return samples ; }
tr	KEY	public abstract void write ( int addr , int data ) ;
tr	KEY	@ Override public void onConnecting ( ) { }
tr	IDF	public void setColisDescription ( String colisDescription ) { this . colisDescription = colisDescription ; }
tr	IDF	public CSVInputIterable ( BufferedReader reader ) { this ( reader , "| -;" ) ; }
tr	KEY	@ Override public boolean isRequest ( ) { return false ; }
tr	IDF	public FontfaceButton ( ImageIcon icon , final String tag , final String endTag ) { JLabel label = new JLabel ( icon ) ; add ( label ) ; addMouseListener ( new MouseAdapter ( ) { @ Override public void mousePressed ( MouseEvent e ) { if ( messageInput . getSelectionEnd ( ) != messageInput . getSelectionStart ( ) ) { messageInput . insert ( endTag , messageInput . getSelectionEnd ( ) ) ; messageInput . insert ( tag , messageInput . getSelectionStart ( ) ) ; } else { messageInput . insert ( tag + endTag , messageInput . getCaretPosition ( ) ) ; messageInput . setCaretPosition ( messageInput . getCaretPosition ( ) - endTag . length ( ) ) ; } } } ) ; }
tr	KEY	public void setH ( int h ) { this . h = h ; }
tr	IDF	default String getColumnName ( String columnName ) { return getName ( ) + "(" + columnName + ")" ; }
tr	IDF	@ Override public Tool clone ( ) { int [ ] paramaters = { this . tubeHeight } ; Tool tool = new TubeBuildingTool ( ) ; tool . copyParamaters ( paramaters ) ; return ( tool ) ; }
tr	IDF	public Tree ( Tree other ) { root = new Leaf ( other . getRoot ( ) ) ; title = other . getTitle ( ) ; geneticCount = other . getGeneticCount ( ) ; }
tr	KEY	protected boolean isFinished ( ) { return false ; }
tr	KEY	public void setLastCollideTime ( long lastCollideTime ) { this . lastCollideTime = lastCollideTime ; }
tr	KEY	public MessageInfo createMessageInfo ( ) { return new MessageInfo ( ) ; }
tr	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { buttonColoredAction1ActionPerformed ( evt ) ; }
tr	IDF	public Table get ( String name ) { Table table = tables . get ( name ) ; if ( table == null ) { throw new SqlException ( "No such table: " + name ) ; } return table ; }
tr	IDF	@ Override public void run ( ) { while ( ! cancelled ) { try { System . out . println ( "acceptAndOpen" ) ; connection = service . acceptAndOpen ( ) ; new BluetoothProtocolHandler ( connection , callback ) . run ( ) ; } catch ( InterruptedIOException e ) { break ; } catch ( IOException e ) { System . err . println ( "Error in bluetooth thread." ) ; e . printStackTrace ( ) ; } } }
tr	KEY	public void setId ( int id ) { this . id = id ; }
tr	IDF	@ Override public void clear ( ) { map . clear ( ) ; list . clear ( ) ; }
tr	KEY	@ Override public boolean isInt ( ) { return true ; }
tr	KEY	public void transform ( double [ ] src , double [ ] dst ) ;
tr	IDF	public static double dotProduct ( FeatureVector _x , double [ ] _y , int offset ) { double sum = 0 ; for ( int i = 0 ; i < _x . size ; ++ i ) sum += _x . va [ i ] * _y [ offset + _x . x [ i ] ] ; return sum ; }
tr	KEY	@ Override public void pathDone ( ) { }
tr	KEY	public synchronized int xgetD4InitialDelay ( ) { return d4ID ; }
tr	KEY	public int getIdUsuario ( ) { return idUsuario ; }
tr	KEY	public double getError ( ) { return error ; }
tr	IDF	private String [ ] camposOrdem ( ) { String camposPesquisa [ ] = new String [ estruturaTabela . size ( ) ] ; for ( int i = 0 ; i < estruturaTabela . size ( ) ; i ++ ) { camposPesquisa [ i ] = estruturaTabela . get ( i ) . getCampo ( ) ; } jCBOrdemPesq . setModel ( new javax . swing . DefaultComboBoxModel ( camposPesquisa ) ) ; return camposPesquisa ; }
tr	IDF	@ Override public void visit ( PrintBold printBold ) { size += printBold . message . length ( ) ; }
tr	IDF	public static java . sql . Date toSqlDateFromUtilDate ( java . util . Date p_utilDate ) { java . sql . Date returnDate = null ; if ( p_utilDate != null ) { returnDate = new java . sql . Date ( p_utilDate . getTime ( ) ) ; } return returnDate ; }
tr	IDF	public void subtractV ( double a [ ] , double b [ ] , double result [ ] ) { result [ 0 ] = a [ 0 ] - b [ 0 ] ; result [ 1 ] = a [ 1 ] - b [ 1 ] ; result [ 2 ] = a [ 2 ] - b [ 2 ] ; }
tr	IDF	private static Point clockwise ( Point p , Point prev ) { int dx = prev . x - p . x + 1 ; int dy = prev . y - p . y + 1 ; return new Point ( prev . x + xClock [ dy ] [ dx ] , prev . y + yClock [ dy ] [ dx ] ) ; }
tr	KEY	public Mailbox ( ) { this . name = "mailbox" ; this . map = new Map ( ) ; }
tr	KEY	public int getItemCount ( ) { return items . getSize ( ) ; }
tr	IDF	public static ArrayList < String > processQuery ( String source , ArrayList < String > keys ) { ArrayList < String > result = new ArrayList < String > ( ) ; String answer ; dataAccessService . select ( source ) ; for ( String key : keys ) { answer = dataAccessService . lookup ( key ) ; if ( answer != null ) result . add ( answer ) ; } return result ; }
tr	KEY	public int getOffsetLeftY ( ) { return this . offsetLeftY ; }
tr	KEY	public void setRating ( long rating ) { this . rating = rating ; }
tr	IDF	public ImageSegFrame ( String name , Image img , int [ ] [ ] meta , int bound_x , int bound_y ) { this . name = name ; this . img = img ; this . meta = meta ; frame = new JFrame ( name ) ; frame . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ) ; frame . setResizable ( false ) ; panel = new ImagePanel ( frame ) ; frame . getContentPane ( ) . add ( panel ) ; frame . pack ( ) ; Insets insets = frame . getInsets ( ) ; frame . setSize ( img . getWidth ( null ) + insets . left + insets . right , img . getHeight ( null ) + insets . top + insets . bottom ) ; if ( bound_x != - 1 && bound_y != - 1 ) frame . setBounds ( bound_x , bound_y , frame . getSize ( ) . width , frame . getSize ( ) . height ) ; else { GraphicsEnvironment ge = GraphicsEnvironment . getLocalGraphicsEnvironment ( ) ; GraphicsDevice defaultScreen = ge . getDefaultScreenDevice ( ) ; Rectangle rect = defaultScreen . getDefaultConfiguration ( ) . getBounds ( ) ; int x = ( int ) rect . getMaxX ( ) - frame . getWidth ( ) ; int y = 0 ; frame . setLocation ( x , y ) ; } frame . setVisible ( true ) ; if ( img != null && meta != null ) panel . refresh ( img , meta ) ; }
tr	KEY	public void updateViewFromModel ( ) ;
tr	KEY	public abstract void reset ( ) ;
tr	IDF	public static void main ( String [ ] args ) { System . out . println ( "Property Application" ) ; }
tr	KEY	public CardViewImpl ( ) { super ( "CardView" ) ; this . initComponents ( ) ; }
tr	KEY	public int getKm ( ) { return km ; }
tr	KEY	public static void main ( String [ ] args ) { }
tr	IDF	private byte tf ( Point p ) { return ( fow [ p . x ] [ p . y ] ) ; }
tr	KEY	public Profile createProfile ( ) { this . profilePath = "" ; return this . profile = new ProfileImpl ( ) ; }
tr	IDF	@ Override protected void walkedTrough ( Player player ) { player . addRange ( 1 ) ; super . walkedTrough ( player ) ; }
tr	KEY	public int getNumSegments ( ) { return followerLeft . getNumSegments ( ) ; }
tr	KEY	public List createList ( ) { return new List ( ) ; }
tr	KEY	public TianPanView ( ) { }
tr	IDF	public void setReturn ( String value ) { this . _return = value ; }
tr	IDF	@ Override public void popRow ( ) { stack . pop ( ) ; }
tr	IDF	public PuzzlingFlapPatternSetFactory ( final Rule < AngleUnitFlapPattern > acceptablePatternCondition , final Rule < AngleUnitFlapPattern > pruningCondition ) { this . acceptablePatternCondition = acceptablePatternCondition ; this . pruningCondition = pruningCondition ; }
tr	IDF	public RegistroProveedores ( ) { initComponents ( ) ; if ( ! Beans . isDesignTime ( ) ) { entityManager . getTransaction ( ) . begin ( ) ; } }
tr	KEY	public GetGroupsResponse createGetGroupsResponse ( ) { return new GetGroupsResponse ( ) ; }
tr	IDF	public Role ( RoleName name ) { this . name = name ; }
tr	IDF	public void cargar ( ) { Busca_cancion numero = new Busca_cancion ( ) ; File fichero = new File ( "Lista_canciones.txt" ) ; int n = numero . lineas ( "Lista_canciones" ) ; Busca_cancion agrega = new Busca_cancion ( ) ; campotexto1 . setText ( "" ) ; indice = Lista1 . getSelectedIndex ( ) ; if ( indice >= 0 ) { Nombre_can = Lista5 [ indice ] ; if ( Nombre_can == Lista5 [ 0 ] ) { TextAutoCompleter s = new TextAutoCompleter ( campotexto1 ) ; Artista = agrega . obtenerArtista ( agrega . listacanciones ( "Lista_canciones" ) ) ; s . addItems ( Artista ) ; } else { if ( Nombre_can == Lista5 [ 1 ] ) { TextAutoCompleter s = new TextAutoCompleter ( campotexto1 ) ; album = agrega . obtenerAlbum ( agrega . listacanciones ( "Lista_canciones" ) ) ; s . addItems ( album ) ; } else { if ( Nombre_can == Lista5 [ 2 ] ) { TextAutoCompleter s = new TextAutoCompleter ( campotexto1 ) ; Nombre = agrega . obtenerNombre ( agrega . listacanciones ( "Lista_canciones" ) ) ; s . addItems ( Nombre ) ; } else { if ( Nombre_can == Lista5 [ 3 ] ) { TextAutoCompleter s = new TextAutoCompleter ( campotexto1 ) ; Genero = agrega . obtenerGenero ( agrega . listacanciones ( "Lista_canciones" ) ) ; s . addItems ( Genero ) ; } } } } } else { JOptionPane . showMessageDialog ( frame , "Por favor seleccione" ) ; } }
tr	KEY	public void run ( ) { new Main ( ) . setVisible ( false ) ; }
tr	KEY	public void setTies ( long ties ) { this . ties = ties ; }
tr	KEY	public double getRightX ( ) { return getRawAxis ( AXIS_RIGHT_X ) ; }
tr	IDF	public static void main ( String [ ] args ) { String [ ] arr = { "0.3340D1+0.0989D2+0.0805D3+0.0427D4+0.1892D5+0.0415D6+0.0241D7+0.1892D8" , "0.1943D1+0.1943D2+0.1943D3+0.1943D4+0.0785D5+0.0445D6+0.0215D7+0.0785D8" , "0.2675D1+0.114D2+0.2675D3+0.114D4+0.0489D5+0.114D6+0.0251D7+0.0489D8" , "0.0791D1+0.0791D2+0.0222D3+0.1951D4+0.1951D5+0.1951D6+0.0392D7+0.1951D8)" , "0.1248D1+0.1248D2+0.0181D3+0.1248D4+0.0402D5+0.1248D6+0.4022D7+0.0402D8" , "0.0777D1+0.0777D2+0.0204D3+0.0759D4+0.164D5+0.3625D6+0.0429D7+0.1789D8" , "0.0777D1+0.0777D2+0.0204D3+0.0759D4+0.164D5+0.3625D6+0.0429D7+0.1789D8" , } ; double [ ] arr1 = { 0.6333 * 0.6333 , 0.6333 * 0.1062 , 0.6333 * 0.2605 , 0.2605 * 0.75 , 0.2605 * 0.75 , 0.1062 * 0.1667 , 0.1062 * 0.8333 } ; double [ ] result = new double [ 8 ] ; for ( int i = 0 ; i < 8 ; ++ i ) { double t = 0 ; int cur = 0 ; for ( String s : arr ) { String num = s . split ( "\\+" ) [ i ] . split ( "D" ) [ 0 ] ; t += double . valueOf ( num ) * arr1 [ cur ++ ] ; } result [ i ] = t ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 1 ; i <= 8 ; ++ i ) { sb . append ( result [ i - 1 ] ) . append ( "D" ) . append ( i ) . append ( "+" ) ; } System . out . println ( sb . toString ( ) ) ; double sum = 0 ; for ( double d : result ) sum += d ; System . out . println ( sum ) ; }
tr	KEY	@ Override public long getNativeConsumer ( ) { return 0 ; }
tr	KEY	public abstract void update ( ) ;
tr	IDF	public synchronized void set ( @ Nullable T result ) { assertNotSet ( ) ; pair = pair ( result , true ) ; semaphore . release ( ) ; }
tr	KEY	public int getPageSize ( ) { return pageSize ; }
tr	IDF	public DataLine . Info getInfo ( ) { return info ; }
tr	KEY	public void undo ( ) { }
tr	KEY	public String getPronoun ( ) { return "the " + this . getName ( ) ; }
tr	KEY	public boolean isInit ( ) { if ( _metadata != null && _notes != null ) return true ; return false ; }
tr	IDF	public byte clickInCenter ( ) { try { out . write ( ClientMessageEncoder . clickInCenter ( ) ) ; out . flush ( ) ; return ( byte ) in . read ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return 0 ; }
tr	KEY	public PalaceCard getFestivalCard ( ) { return this . festivalCard ; }
tr	IDF	@ Override public TIPPSection getExtrasSection ( ) { return getManifest ( ) . getSection ( TIPPSectionType . EXTRAS ) ; }
tr	IDF	public void perform ( ) { String line ; while ( ( line = read ( ) ) instanceof String ) { contents . add ( line ) ; } Collections . sort ( contents ) ; for ( String s : contents ) { write ( s ) ; } }
tr	IDF	@ Override public void deleteElective ( long id ) { electiveDAO . delete ( this . loadElective ( id ) ) ; }
tr	IDF	private void hostMachineBtnMouseReleased ( java . awt . event . MouseEvent evt ) { IfHostMachine ifHostMachine = new IfHostMachine ( ) ; ifHostMachine . setLocationRelativeTo ( this ) ; this . dispose ( ) ; TicTacToeUIApp . getApplication ( ) . show ( ifHostMachine ) ; ifHostMachine . setResizable ( false ) ; ifHostMachine . setSize ( 415 , 300 ) ; }
tr	KEY	public String toString ( ) { return this . domain ; }
tr	IDF	public DocumentListener getDocumentListener ( String action ) { return new UserInputListener ( action ) ; }
tr	KEY	private boolean formatCheck ( boolean isAudio ) { if ( isAudio == true ) { if ( _outFileT . getText ( ) . endsWith ( ".mp3" ) ) { return true ; } else { return false ; } } else { if ( _outFileT . getText ( ) . endsWith ( ".mp4" ) ) { return true ; } else { return false ; } } }
tr	IDF	public TinyUrlWebServiceStub ( org . apache . axis2 . context . ConfigurationContext configurationContext ) throws org . apache . axis2 . AxisFault { this ( configurationContext , "http://localhost:8080/TinyUrlWebService/services/TinyUrlWebService.TinyUrlWebServiceHttpSoap12Endpoint/" ) ; }
tr	KEY	@ Override public void updateModelFromView ( ) { }
tr	KEY	int nextPieceId ( ) { return nextPieceId ++ ; }
tr	IDF	public boolean applyTechniqueSingleInRegion ( ) { Rule regionRule = getRuleset ( ) . getRule ( 2 ) ; return applyTechniqueSingleInRule ( regionRule ) ; }
tr	IDF	@ Override public void runTest ( ) { int [ ] num = { 1 , 1 , 1 , 2 } ; List < List < Integer >> res = permuteUnique ( num ) ; for ( List < Integer > l : res ) { for ( int i : l ) dbg ( i ) ; System . out . println ( ) ; } }
tr	KEY	public boolean getReport ( ) { return DataKeeper . getReport ( ) ; }
tr	KEY	@ Override public boolean blockWalk ( ) { return true ; }
tr	KEY	public void setMain ( boolean main ) { this . main = main ; }
tr	KEY	public long getRank ( ) { return rank ; }
tr	IDF	public void putProp ( String key , String value ) { props . put ( key , value ) ; }
tr	IDF	private static void calc ( ) { String [ ] classes = { "happiness" , "like" , "anger" , "fear" , "sadness" , "disgust" , "surprise" } ; Iterator < String > itWords = setWords . iterator ( ) ; int count = 0 ; try { OutputStreamWriter w2 = new OutputStreamWriter ( new FileOutputStream ( "C:/Users/lin/Desktop/myemotion/v2/classCHI/bigramhappiness.csv" ) , "UTF-8" ) ; OutputStreamWriter w3 = new OutputStreamWriter ( new FileOutputStream ( "C:/Users/lin/Desktop/myemotion/v2/classCHI/bigramlike.csv" ) , "UTF-8" ) ; OutputStreamWriter w4 = new OutputStreamWriter ( new FileOutputStream ( "C:/Users/lin/Desktop/myemotion/v2/classCHI/bigramanger.csv" ) , "UTF-8" ) ; OutputStreamWriter w5 = new OutputStreamWriter ( new FileOutputStream ( "C:/Users/lin/Desktop/myemotion/v2/classCHI/bigramfear.csv" ) , "UTF-8" ) ; OutputStreamWriter w6 = new OutputStreamWriter ( new FileOutputStream ( "C:/Users/lin/Desktop/myemotion/v2/classCHI/bigramsadness.csv" ) , "UTF-8" ) ; OutputStreamWriter w7 = new OutputStreamWriter ( new FileOutputStream ( "C:/Users/lin/Desktop/myemotion/v2/classCHI/bigramdisgust.csv" ) , "UTF-8" ) ; OutputStreamWriter w8 = new OutputStreamWriter ( new FileOutputStream ( "C:/Users/lin/Desktop/myemotion/v2/classCHI/bigramsurprise.csv" ) , "UTF-8" ) ; Map < String , String > map = new HashMap < String , String > ( ) ; map . put ( "happiness" , "" ) ; map . put ( "like" , "" ) ; map . put ( "anger" , "" ) ; map . put ( "fear" , "" ) ; map . put ( "sadness" , "" ) ; map . put ( "disgust" , "" ) ; map . put ( "surprise" , "" ) ; while ( itWords . hasNext ( ) ) { String word = itWords . next ( ) ; System . out . println ( ++ count + ":" + word + "of" + setWords . size ( ) ) ; String classs = "" ; for ( int i = 0 ; i < classes . length ; i ++ ) { classs = classes [ i ] ; int a = 0 , b = 0 , c = 0 , d = 0 ; Iterator < String > it = setSentences . iterator ( ) ; while ( it . hasNext ( ) ) { String [ ] its = it . next ( ) . split ( "\t" ) ; if ( its [ 0 ] . contains ( classs ) ) { if ( its [ 1 ] . contains ( word ) ) { a ++ ; } else { c ++ ; } } else { if ( its [ 1 ] . contains ( word ) ) { b ++ ; } else { d ++ ; } } } double chi = 1.0 * ( a * d - b * c ) * ( a * d - b * c ) / ( ( a + b ) * ( c + d ) ) ; map . put ( classs , map . get ( classs ) + word + " " + chi + "\r\n" ) ; } } w2 . write ( map . get ( "happiness" ) . toString ( ) . replaceAll ( "NaN" , "0" ) ) ; w3 . write ( map . get ( "like" ) . toString ( ) . replaceAll ( "NaN" , "0" ) ) ; w4 . write ( map . get ( "anger" ) . toString ( ) . replaceAll ( "NaN" , "0" ) ) ; w5 . write ( map . get ( "fear" ) . toString ( ) . replaceAll ( "NaN" , "0" ) ) ; w6 . write ( map . get ( "sadness" ) . toString ( ) . replaceAll ( "NaN" , "0" ) ) ; w7 . write ( map . get ( "disgust" ) . toString ( ) . replaceAll ( "NaN" , "0" ) ) ; w8 . write ( map . get ( "surprise" ) . toString ( ) . replaceAll ( "NaN" , "0" ) ) ; System . out . println ( setSentences . size ( ) ) ; w2 . close ( ) ; w3 . close ( ) ; w4 . close ( ) ; w5 . close ( ) ; w6 . close ( ) ; w7 . close ( ) ; w8 . close ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }
tr	KEY	public void update ( ) ;
tr	KEY	public void setDefinitionID ( int definitionID ) { this . definitionID = definitionID ; }
tr	IDF	@ Test public final void testPair ( ) { final String left = new String ( "left" ) ; final String right = new String ( "right" ) ; final Pair pair = new Pair ( left , right ) ; assertEquals ( left , pair . getLeft ( ) ) ; assertEquals ( right , pair . getRight ( ) ) ; }
tr	KEY	public abstract boolean isAnswerCorrect ( ) ;
tr	IDF	public static PhonebookSortOption fromValue ( String v ) { for ( PhonebookSortOption c : PhonebookSortOption . values ( ) ) { if ( c . value . equals ( v ) ) { return c ; } } throw new IllegalArgumentException ( v ) ; }
tr	IDF	public static void PrintRA ( ) { for ( ABObject [ ] ab : RADictionary . keySet ( ) ) { int id1 = ab [ 0 ] . id ; int id2 = ab [ 1 ] . id ; ERA rel1 = RADictionary . get ( ab ) [ 0 ] ; ERA rel2 = RADictionary . get ( ab ) [ 1 ] ; System . out . println ( "RA(" + id1 + "  " + id2 + ")" + " = " + "(" + rel1 + "  " + rel2 + ")" ) ; } }
tr	IDF	public void publishPuzzleToGraphics2DUsingProfile ( Graphics2D graphics , ConstraintPuzzle cp , PublishingProfile pro ) { output = graphics ; puzzle = cp ; profile = pro ; cellSize = profile . getcellSize ( ) ; puzzleSize = puzzle . getSize ( ) ; double scale = profile . getFontSize ( ) ; output . scale ( scale , scale ) ; createBox ( ) ; getBoarders ( ) ; }
tr	KEY	public abstract void render ( Graphics g ) ;
tr	IDF	public void windowClosing ( WindowEvent e ) { try { saveWorkspace ( ) ; System . exit ( 0 ) ; } catch ( JSONException | URISyntaxException | IOException exc ) { exc . printStackTrace ( ) ; log ( "Could not save workspace" ) ; } }
tr	IDF	public Node ( int x , int y ) { _x = x ; _y = y ; _cost = 999 ; }
tr	KEY	public Geometry ( ) { }
tr	IDF	static ArrayList < Radical > partition ( ArrayList < Radical > list , boolean high ) { int mid = list . size ( ) / 2 ; ArrayList < Radical > newList = new ArrayList < Radical > ( ) ; if ( high ) for ( int i = mid ; i < list . size ( ) ; i ++ ) newList . add ( list . get ( i ) ) ; else for ( int i = 0 ; i < mid ; i ++ ) newList . add ( list . get ( i ) ) ; return newList ; }
tr	IDF	public List < ComandoContext > comando ( ) { return getRuleContexts ( ComandoContext . class ) ; }
tr	KEY	public Sauce createSauce ( ) { return new MarinaraSause ( ) ; }
tr	KEY	public abstract boolean init ( ) ;
tr	IDF	private void jButton10ActionPerformed ( java . awt . event . ActionEvent evt ) { jButton10 . setEnabled ( false ) ; jButton12 . setEnabled ( true ) ; Music . Pause ( ) ; }
tr	IDF	@ SuppressWarnings ( "unchecked" ) private void initComponents ( ) { jPanel1 = new javax . swing . JPanel ( ) ; jToolBar1 = new javax . swing . JToolBar ( ) ; jbGuardar = new javax . swing . JButton ( ) ; jbDeshacer = new javax . swing . JButton ( ) ; jSeparator1 = new javax . swing . JToolBar . Separator ( ) ; jbValidar = new javax . swing . JButton ( ) ; jSeparator2 = new javax . swing . JToolBar . Separator ( ) ; jbGenerarOrden = new javax . swing . JButton ( ) ; jSeparator3 = new javax . swing . JToolBar . Separator ( ) ; jButton1 = new javax . swing . JButton ( ) ; jlNro = new javax . swing . JLabel ( ) ; txtCantidad = new javax . swing . JTextField ( ) ; jLabel1 = new javax . swing . JLabel ( ) ; jLabel2 = new javax . swing . JLabel ( ) ; txtPerfil = new javax . swing . JTextField ( ) ; jLabel3 = new javax . swing . JLabel ( ) ; jLabel4 = new javax . swing . JLabel ( ) ; txtColorOrigen = new javax . swing . JTextField ( ) ; txtColorDestino = new javax . swing . JTextField ( ) ; jbCambiarColorOrigen = new javax . swing . JButton ( ) ; jbCambiarColorDestino = new javax . swing . JButton ( ) ; jScrollPane1 = new javax . swing . JScrollPane ( ) ; jtOrdenPinturaDetalle = new javax . swing . JTable ( ) ; jScrollPane2 = new javax . swing . JScrollPane ( ) ; jtTEMP = new javax . swing . JTable ( ) ; setDefaultCloseOperation ( javax . swing . WindowConstants . DISPOSE_ON_CLOSE ) ; setAlwaysOnTop ( true ) ; jPanel1 . setBorder ( javax . swing . BorderFactory . createTitledBorder ( "" ) ) ; jToolBar1 . setBorder ( javax . swing . BorderFactory . createTitledBorder ( "" ) ) ; jToolBar1 . setFloatable ( false ) ; jToolBar1 . setRollover ( true ) ; jbGuardar . setIcon ( new javax . swing . ImageIcon ( getClass ( ) . getResource ( "/indumatics_plantapintura/recursos/iconos/btn_save_24x24.gif" ) ) ) ; java . util . ResourceBundle bundle = java . util . ResourceBundle . getBundle ( "indumatics_plantapintura/recursos/strings" ) ; jbGuardar . setToolTipText ( bundle . getString ( "save" ) ) ; jbGuardar . setFocusable ( false ) ; jbGuardar . setHorizontalTextPosition ( javax . swing . SwingConstants . CENTER ) ; jbGuardar . setVerticalTextPosition ( javax . swing . SwingConstants . BOTTOM ) ; jbGuardar . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { jbGuardarActionPerformed ( evt ) ; } } ) ; jToolBar1 . add ( jbGuardar ) ; jbDeshacer . setIcon ( new javax . swing . ImageIcon ( getClass ( ) . getResource ( "/indumatics_plantapintura/recursos/iconos/btn_undo_24x24.gif" ) ) ) ; jbDeshacer . setToolTipText ( bundle . getString ( "undo" ) ) ; jbDeshacer . setFocusable ( false ) ; jbDeshacer . setHorizontalTextPosition ( javax . swing . SwingConstants . CENTER ) ; jbDeshacer . setVerticalTextPosition ( javax . swing . SwingConstants . BOTTOM ) ; jbDeshacer . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { jbDeshacerActionPerformed ( evt ) ; } } ) ; jToolBar1 . add ( jbDeshacer ) ; jToolBar1 . add ( jSeparator1 ) ; jbValidar . setIcon ( new javax . swing . ImageIcon ( getClass ( ) . getResource ( "/indumatics_plantapintura/recursos/iconos/btn_ok_24x24.gif" ) ) ) ; jbValidar . setToolTipText ( bundle . getString ( "validarCantidad" ) ) ; jbValidar . setFocusable ( false ) ; jbValidar . setHorizontalTextPosition ( javax . swing . SwingConstants . CENTER ) ; jbValidar . setVerticalTextPosition ( javax . swing . SwingConstants . BOTTOM ) ; jbValidar . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { jbValidarActionPerformed ( evt ) ; } } ) ; jToolBar1 . add ( jbValidar ) ; jToolBar1 . add ( jSeparator2 ) ; jbGenerarOrden . setIcon ( new javax . swing . ImageIcon ( getClass ( ) . getResource ( "/indumatics_plantapintura/recursos/iconos/ventas_24x24.gif" ) ) ) ; jbGenerarOrden . setToolTipText ( bundle . getString ( "generar" ) ) ; jbGenerarOrden . setFocusable ( false ) ; jbGenerarOrden . setHorizontalTextPosition ( javax . swing . SwingConstants . CENTER ) ; jbGenerarOrden . setVerticalTextPosition ( javax . swing . SwingConstants . BOTTOM ) ; jbGenerarOrden . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { jbGenerarOrdenActionPerformed ( evt ) ; } } ) ; jToolBar1 . add ( jbGenerarOrden ) ; jToolBar1 . add ( jSeparator3 ) ; jButton1 . setText ( "jButton1" ) ; jButton1 . setFocusable ( false ) ; jButton1 . setHorizontalTextPosition ( javax . swing . SwingConstants . CENTER ) ; jButton1 . setVerticalTextPosition ( javax . swing . SwingConstants . BOTTOM ) ; jButton1 . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButton1ActionPerformed ( evt ) ; } } ) ; jToolBar1 . add ( jButton1 ) ; jlNro . setText ( "ORDEN NRO:" ) ; jToolBar1 . add ( jlNro ) ; jLabel1 . setText ( "CANTIDAD" ) ; jLabel2 . setText ( "PREFIL" ) ; txtPerfil . setEditable ( false ) ; jLabel3 . setText ( "COLOR ORIGEN" ) ; jLabel4 . setText ( "COLOR DESTINO" ) ; txtColorOrigen . setEditable ( false ) ; txtColorDestino . setEditable ( false ) ; jbCambiarColorOrigen . setIcon ( new javax . swing . ImageIcon ( getClass ( ) . getResource ( "/indumatics_plantapintura/recursos/iconos/btn_clip_16x16.gif" ) ) ) ; jbCambiarColorOrigen . setToolTipText ( "" ) ; jbCambiarColorOrigen . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { jbCambiarColorOrigenActionPerformed ( evt ) ; } } ) ; jbCambiarColorDestino . setIcon ( new javax . swing . ImageIcon ( getClass ( ) . getResource ( "/indumatics_plantapintura/recursos/iconos/btn_clip_16x16.gif" ) ) ) ; jbCambiarColorDestino . setToolTipText ( "" ) ; jbCambiarColorDestino . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { jbCambiarColorDestinoActionPerformed ( evt ) ; } } ) ; javax . swing . GroupLayout jPanel1Layout = new javax . swing . GroupLayout ( jPanel1 ) ; jPanel1 . setLayout ( jPanel1Layout ) ; jPanel1Layout . setHorizontalGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( jToolBar1 , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addGroup ( jPanel1Layout . createSequentialGroup ( ) . addContainerGap ( ) . addGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING , false ) . addComponent ( jLabel1 , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addComponent ( txtCantidad ) ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . UNRELATED ) . addGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING , false ) . addComponent ( txtPerfil ) . addComponent ( jLabel2 , javax . swing . GroupLayout . DEFAULT_SIZE , 71 , short . MAX_VALUE ) ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . UNRELATED ) . addGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING , false ) . addComponent ( jLabel3 , javax . swing . GroupLayout . DEFAULT_SIZE , 172 , short . MAX_VALUE ) . addComponent ( txtColorOrigen ) ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addComponent ( jbCambiarColorOrigen , javax . swing . GroupLayout . PREFERRED_SIZE , 24 , javax . swing . GroupLayout . PREFERRED_SIZE ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . UNRELATED ) . addGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( jLabel4 ) . addGroup ( jPanel1Layout . createSequentialGroup ( ) . addComponent ( txtColorDestino , javax . swing . GroupLayout . PREFERRED_SIZE , 200 , javax . swing . GroupLayout . PREFERRED_SIZE ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addComponent ( jbCambiarColorDestino , javax . swing . GroupLayout . PREFERRED_SIZE , 24 , javax . swing . GroupLayout . PREFERRED_SIZE ) ) ) . addContainerGap ( javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) ) ) ; jPanel1Layout . setVerticalGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( jPanel1Layout . createSequentialGroup ( ) . addComponent ( jToolBar1 , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE ) . addComponent ( jLabel1 ) . addComponent ( jLabel2 ) . addComponent ( jLabel3 ) . addComponent ( jLabel4 ) ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( jbCambiarColorOrigen , javax . swing . GroupLayout . Alignment . TRAILING , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addComponent ( jbCambiarColorDestino , javax . swing . GroupLayout . Alignment . TRAILING , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE ) . addComponent ( txtCantidad , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) . addComponent ( txtPerfil , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) . addComponent ( txtColorOrigen , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) . addComponent ( txtColorDestino , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) ) ) ) ) ; jtOrdenPinturaDetalle . setAutoCreateRowSorter ( true ) ; jtOrdenPinturaDetalle . setModel ( new javax . swing . table . DefaultTableModel ( new Object [ ] [ ] { } , new String [ ] { "CANT." , "A PRO." , "PERFIL" , "LARGO" , "COLOR ORIGEN" , "STK C.O" , "PRO C.O" , "TOT C.O" , "COLOR DESTINO" , "STK C.D" , "PRO C.D" , "TOT C.D." , "STK NAT" , "PED NAT" , "STK DSP" , "STK T." } ) { boolean [ ] canEdit = new boolean [ ] { false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false } ; public boolean isCellEditable ( int rowIndex , int columnIndex ) { return canEdit [ columnIndex ] ; } } ) ; jtOrdenPinturaDetalle . setColumnSelectionAllowed ( true ) ; jtOrdenPinturaDetalle . setSelectionMode ( javax . swing . ListSelectionModel . SINGLE_INTERVAL_SELECTION ) ; jtOrdenPinturaDetalle . getTableHeader ( ) . setReorderingAllowed ( false ) ; jScrollPane1 . setViewportView ( jtOrdenPinturaDetalle ) ; jtOrdenPinturaDetalle . getColumnModel ( ) . getSelectionModel ( ) . setSelectionMode ( javax . swing . ListSelectionModel . SINGLE_INTERVAL_SELECTION ) ; if ( jtOrdenPinturaDetalle . getColumnModel ( ) . getColumnCount ( ) > 0 ) { jtOrdenPinturaDetalle . getColumnModel ( ) . getColumn ( 0 ) . setMinWidth ( 30 ) ; jtOrdenPinturaDetalle . getColumnModel ( ) . getColumn ( 0 ) . setPreferredWidth ( 40 ) ; jtOrdenPinturaDetalle . getColumnModel ( ) . getColumn ( 1 ) . setMinWidth ( 30 ) ; jtOrdenPinturaDetalle . getColumnModel ( ) . getColumn ( 1 ) . setPreferredWidth ( 40 ) ; jtOrdenPinturaDetalle . getColumnModel ( ) . getColumn ( 2 ) . setMinWidth ( 30 ) ; jtOrdenPinturaDetalle . getColumnModel ( ) . getColumn ( 2 ) . setPreferredWidth ( 40 ) ; jtOrdenPinturaDetalle . getColumnModel ( ) . getColumn ( 3 ) . setMinWidth ( 30 ) ; jtOrdenPinturaDetalle . getColumnModel ( ) . getColumn ( 3 ) . setPreferredWidth ( 40 ) ; jtOrdenPinturaDetalle . getColumnModel ( ) . getColumn ( 4 ) . setMinWidth ( 100 ) ; jtOrdenPinturaDetalle . getColumnModel ( ) . getColumn ( 5 ) . setMinWidth ( 30 ) ; jtOrdenPinturaDetalle . getColumnModel ( ) . getColumn ( 5 ) . setPreferredWidth ( 40 ) ; jtOrdenPinturaDetalle . getColumnModel ( ) . getColumn ( 6 ) . setMinWidth ( 30 ) ; jtOrdenPinturaDetalle . getColumnModel ( ) . getColumn ( 6 ) . setPreferredWidth ( 40 ) ; jtOrdenPinturaDetalle . getColumnModel ( ) . getColumn ( 7 ) . setMinWidth ( 30 ) ; jtOrdenPinturaDetalle . getColumnModel ( ) . getColumn ( 7 ) . setPreferredWidth ( 40 ) ; jtOrdenPinturaDetalle . getColumnModel ( ) . getColumn ( 8 ) . setMinWidth ( 100 ) ; jtOrdenPinturaDetalle . getColumnModel ( ) . getColumn ( 9 ) . setMinWidth ( 30 ) ; jtOrdenPinturaDetalle . getColumnModel ( ) . getColumn ( 9 ) . setPreferredWidth ( 40 ) ; jtOrdenPinturaDetalle . getColumnModel ( ) . getColumn ( 10 ) . setMinWidth ( 30 ) ; jtOrdenPinturaDetalle . getColumnModel ( ) . getColumn ( 10 ) . setPreferredWidth ( 40 ) ; jtOrdenPinturaDetalle . getColumnModel ( ) . getColumn ( 11 ) . setMinWidth ( 30 ) ; jtOrdenPinturaDetalle . getColumnModel ( ) . getColumn ( 11 ) . setPreferredWidth ( 40 ) ; jtOrdenPinturaDetalle . getColumnModel ( ) . getColumn ( 12 ) . setMinWidth ( 30 ) ; jtOrdenPinturaDetalle . getColumnModel ( ) . getColumn ( 12 ) . setPreferredWidth ( 40 ) ; jtOrdenPinturaDetalle . getColumnModel ( ) . getColumn ( 13 ) . setMinWidth ( 30 ) ; jtOrdenPinturaDetalle . getColumnModel ( ) . getColumn ( 13 ) . setPreferredWidth ( 40 ) ; jtOrdenPinturaDetalle . getColumnModel ( ) . getColumn ( 14 ) . setMinWidth ( 30 ) ; jtOrdenPinturaDetalle . getColumnModel ( ) . getColumn ( 14 ) . setPreferredWidth ( 40 ) ; jtOrdenPinturaDetalle . getColumnModel ( ) . getColumn ( 15 ) . setMinWidth ( 30 ) ; jtOrdenPinturaDetalle . getColumnModel ( ) . getColumn ( 15 ) . setPreferredWidth ( 40 ) ; } jtTEMP . setAutoCreateRowSorter ( true ) ; jtTEMP . setModel ( new javax . swing . table . DefaultTableModel ( new Object [ ] [ ] { } , new String [ ] { "CANT." , "A PRO." , "PERFIL" , "LARGO" , "COLOR ORIGEN" , "STK C.O" , "PRO C.O" , "TOT C.O" , "COLOR DESTINO" , "STK C.D" , "PRO C.D" , "TOT C.D." , "STK NAT" , "PED NAT" , "STK DSP" , "STK T." } ) { boolean [ ] canEdit = new boolean [ ] { false , false , false , false , false , false , false , false , false , false , false , false , false , false , false , false } ; public boolean isCellEditable ( int rowIndex , int columnIndex ) { return canEdit [ columnIndex ] ; } } ) ; jtTEMP . setSelectionMode ( javax . swing . ListSelectionModel . MULTIPLE_INTERVAL_SELECTION ) ; jtTEMP . getTableHeader ( ) . setReorderingAllowed ( false ) ; jScrollPane2 . setViewportView ( jtTEMP ) ; jtTEMP . getColumnModel ( ) . getSelectionModel ( ) . setSelectionMode ( javax . swing . ListSelectionModel . SINGLE_INTERVAL_SELECTION ) ; if ( jtTEMP . getColumnModel ( ) . getColumnCount ( ) > 0 ) { jtTEMP . getColumnModel ( ) . getColumn ( 0 ) . setMinWidth ( 30 ) ; jtTEMP . getColumnModel ( ) . getColumn ( 0 ) . setPreferredWidth ( 40 ) ; jtTEMP . getColumnModel ( ) . getColumn ( 1 ) . setMinWidth ( 30 ) ; jtTEMP . getColumnModel ( ) . getColumn ( 1 ) . setPreferredWidth ( 40 ) ; jtTEMP . getColumnModel ( ) . getColumn ( 2 ) . setMinWidth ( 30 ) ; jtTEMP . getColumnModel ( ) . getColumn ( 2 ) . setPreferredWidth ( 40 ) ; jtTEMP . getColumnModel ( ) . getColumn ( 3 ) . setMinWidth ( 30 ) ; jtTEMP . getColumnModel ( ) . getColumn ( 3 ) . setPreferredWidth ( 40 ) ; jtTEMP . getColumnModel ( ) . getColumn ( 4 ) . setMinWidth ( 100 ) ; jtTEMP . getColumnModel ( ) . getColumn ( 5 ) . setMinWidth ( 30 ) ; jtTEMP . getColumnModel ( ) . getColumn ( 5 ) . setPreferredWidth ( 40 ) ; jtTEMP . getColumnModel ( ) . getColumn ( 6 ) . setMinWidth ( 30 ) ; jtTEMP . getColumnModel ( ) . getColumn ( 6 ) . setPreferredWidth ( 40 ) ; jtTEMP . getColumnModel ( ) . getColumn ( 7 ) . setMinWidth ( 30 ) ; jtTEMP . getColumnModel ( ) . getColumn ( 7 ) . setPreferredWidth ( 40 ) ; jtTEMP . getColumnModel ( ) . getColumn ( 8 ) . setMinWidth ( 100 ) ; jtTEMP . getColumnModel ( ) . getColumn ( 9 ) . setMinWidth ( 30 ) ; jtTEMP . getColumnModel ( ) . getColumn ( 9 ) . setPreferredWidth ( 40 ) ; jtTEMP . getColumnModel ( ) . getColumn ( 10 ) . setMinWidth ( 30 ) ; jtTEMP . getColumnModel ( ) . getColumn ( 10 ) . setPreferredWidth ( 40 ) ; jtTEMP . getColumnModel ( ) . getColumn ( 11 ) . setMinWidth ( 30 ) ; jtTEMP . getColumnModel ( ) . getColumn ( 11 ) . setPreferredWidth ( 40 ) ; jtTEMP . getColumnModel ( ) . getColumn ( 12 ) . setMinWidth ( 30 ) ; jtTEMP . getColumnModel ( ) . getColumn ( 12 ) . setPreferredWidth ( 40 ) ; jtTEMP . getColumnModel ( ) . getColumn ( 13 ) . setMinWidth ( 30 ) ; jtTEMP . getColumnModel ( ) . getColumn ( 13 ) . setPreferredWidth ( 40 ) ; jtTEMP . getColumnModel ( ) . getColumn ( 14 ) . setMinWidth ( 30 ) ; jtTEMP . getColumnModel ( ) . getColumn ( 14 ) . setPreferredWidth ( 40 ) ; jtTEMP . getColumnModel ( ) . getColumn ( 15 ) . setMinWidth ( 30 ) ; jtTEMP . getColumnModel ( ) . getColumn ( 15 ) . setPreferredWidth ( 40 ) ; } javax . swing . GroupLayout layout = new javax . swing . GroupLayout ( getContentPane ( ) ) ; getContentPane ( ) . setLayout ( layout ) ; layout . setHorizontalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addContainerGap ( ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( jPanel1 , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addComponent ( jScrollPane1 , javax . swing . GroupLayout . DEFAULT_SIZE , 724 , short . MAX_VALUE ) . addComponent ( jScrollPane2 , javax . swing . GroupLayout . Alignment . TRAILING , javax . swing . GroupLayout . DEFAULT_SIZE , 724 , short . MAX_VALUE ) ) . addContainerGap ( ) ) ) ; layout . setVerticalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addContainerGap ( ) . addComponent ( jPanel1 , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addComponent ( jScrollPane1 , javax . swing . GroupLayout . DEFAULT_SIZE , 297 , short . MAX_VALUE ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addComponent ( jScrollPane2 , javax . swing . GroupLayout . PREFERRED_SIZE , 66 , javax . swing . GroupLayout . PREFERRED_SIZE ) . addContainerGap ( ) ) ) ; pack ( ) ; }
tr	KEY	public boolean getWorking ( ) { return _isWorking ; }
tr	KEY	public void run ( ) { new frmAcceso ( ) . setVisible ( true ) ; }
tr	KEY	void tick ( ) ;
tr	KEY	public boolean getButtonStateLeftStick ( ) { return getRawButton ( BUTTON_LEFT_STICK ) ; }
tr	KEY	public void setRubro ( int rubro ) { this . rubro = rubro ; }
tr	IDF	public SudokuBoxView ( int i , int j ) { this . i = i ; this . j = j ; for ( int val = 0 ; val < 9 ; ++ val ) { marks [ val ] = true ; } }
tr	KEY	long count ( ) ;
tr	IDF	public void dealCards ( ) { for ( int i = 0 ; i < 2 ; i ++ ) { for ( PokerPlayer pokerPlayer : players ) { PokerCard card = deck . shuffleCard ( ) ; pokerPlayer . addCard ( card ) ; } } }
tr	KEY	public double getPrecio_color ( ) { return precio_color ; }
tr	KEY	public static boolean isTypeNumberOrString ( class < ? > objType ) { return ( objType == String . class || objType == boolean . class || isObjTypeNumber ( objType ) || objType == Character . class ) ; }
tr	IDF	public void setStudentGroupDAO ( StudentGroupDAO studentGroupDAO ) { this . studentGroupDAO = studentGroupDAO ; }
tr	IDF	public void update ( FriendshStatusPk pk , FriendshStatus dto ) throws FriendshStatusDaoException ;
tr	IDF	public JSONObject accumulate ( String key , Object value ) throws JSONException { testValidity ( value ) ; Object o = opt ( key ) ; if ( o == null ) { put ( key , value instanceof JSONArray ? new JSONArray ( ) . put ( value ) : value ) ; } else if ( o instanceof JSONArray ) { ( ( JSONArray ) o ) . put ( value ) ; } else { put ( key , new JSONArray ( ) . put ( o ) . put ( value ) ) ; } return this ; }
tr	KEY	public boolean blockExplosion ( ) { return false ; }
tr	IDF	public static INDIOneElementNumberProperty createSaveableOneElementNumberProperty ( INDIDriver driver , String name , String label , PropertyStates state , PropertyPermissions permission , String minimum , String maximum , String step , String format , String value ) throws IllegalArgumentException { INDIOneElementNumberProperty np = loadOneElementNumberProperty ( driver , name ) ; if ( np == null ) { np = new INDIOneElementNumberProperty ( driver , name , label , state , permission , minimum , maximum , step , format , value ) ; np . setSaveable ( true ) ; } return np ; }
tr	KEY	public double getMaxSpeed ( ) { return maxSpeed ; }
tr	IDF	private void initializeDescriptions ( ) { ConstraintPuzzleCollectionDescription [ ] allDescs = SudokuApplication . getApplication ( ) . getApplicationModel ( ) . getCollectionDescriptions ( ) ; closedDescriptions = new ArrayList < ConstraintPuzzleCollectionDescription > ( allDescs . length ) ; SudokuView sv = SudokuApplication . getApplication ( ) . getApplicationView ( ) ; for ( int i = 0 ; i < allDescs . length ; i ++ ) { ConstraintPuzzleCollectionDescription desc = allDescs [ i ] ; if ( ! sv . collectionWithNameIsOpen ( desc . getName ( ) ) ) { closedDescriptions . add ( desc ) ; } } initialized = true ; }
tr	IDF	public void actionPerformed ( ActionEvent arg0 ) { if ( currentPiece != null ) { currentPiece . ImageDragFlip ( ) ; } }
tr	KEY	public void setAdApiVersion ( double value ) { this . adApiVersion = value ; }
tr	KEY	public AIPlayer ( ) { super ( ) ; }
tr	IDF	private int updateProduct ( Connection conn , ProductModel product ) throws SQLException { String sql = "UPDATE products SET name = ?  description = ?  cost = ?  rrp = ?  product_type = ? WHERE id = ?" ; try ( PreparedStatement pstmt = conn . prepareStatement ( sql ) ) { setString ( pstmt , 1 , product . getName ( ) ) ; setString ( pstmt , 2 , product . getDescription ( ) ) ; setDouble ( pstmt , 3 , product . getCost ( ) ) ; setDouble ( pstmt , 4 , product . getRrp ( ) ) ; setInteger ( pstmt , 5 , product . getProductType ( ) ) ; setInteger ( pstmt , 6 , product . getId ( ) ) ; return pstmt . executeUpdate ( ) ; } }
tr	KEY	public boolean isEmpty ( ) { return participants . isEmpty ( ) ; }
tr	KEY	public int getTailIndex ( ) { return divisionSize - 1 ; }
tr	IDF	@ Override public void runTest ( ) { dbg ( uniquePaths ( 1 , 1 ) ) ; }
tr	KEY	public static long set ( long packed , int position , boolean value ) { if ( value ) { packed |= ( ( long ) 1 << position ) ; } else { packed &= ~ ( ( long ) 1 << position ) ; } return packed ; }
tr	KEY	public static void update ( ) { updatePressedFrameCount ( ) ; updatePressOrRelease ( ) ; }
tr	KEY	protected abstract Iterable < ? extends IDrawable > getDrawables ( ) ;
tr	IDF	public LoginMessage ( ClientID client , String username , String password , boolean status ) { this . username = username ; this . password = password ; this . client = client ; this . status = status ; }
tr	KEY	public Bits f ( ) { return new Bits ( "0" + this . value + "1" ) ; }
tr	KEY	public Bateau getBateau ( ) { return this . bateau ; }
tr	IDF	public void setSize ( double getEnergy ) { energyBarBarImage = new GreenfootImage ( "SystemItem//EnergyBar.png" ) ; setImage ( energyBarBarImage ) ; setLocation ( x , y ) ; if ( getEnergy <= 0.0 ) { getEnergy = 0.01 ; } energyBarBarImage . scale ( ( int ) ( ( ( double ) 780 ) * getEnergy ) + 1 , 13 ) ; }
tr	IDF	@ Override public void visit ( Block block ) { System . out . print ( block + ":" ) ; block . first . accept ( this ) ; System . out . print (   ) ; block . second . accept ( this ) ; }
tr	IDF	@ Override public Rectangle getBounds ( ) { return bounds ; }
tr	IDF	@ Override public String toString ( ) { return "OreImpl{" + "name='" + name + ' + } ; }
tr	KEY	protected boolean listensToProperty ( String deviceName , String propertyName ) { if ( listensToDevice ( deviceName ) ) { return true ; } if ( listensToParticularProperty ( deviceName , propertyName ) ) { return true ; } return false ; }
tr	IDF	@ Test public void testCheckLoginPasswordFail ( ) throws Exception { assert . assertTrue ( ac . authenticate ( "" , "" ) . getStatus ( ) == UserState . EMPTY_DATA ) ; }
tr	IDF	public BoardFrame ( Game game , Snake snake ) { initComponents ( ) ; boardPanel . requestFocusInWindow ( ) ; boardPanel . setLayout ( null ) ; this . game = game ; this . snake = snake ; }
tr	IDF	@ Test public void testSetLocation ( ) throws Exception { Entity entity = new Entity ( "sprites/test.png" , 42 , 23 , 100 , 200 ) ; entity . setLocation ( 1.0f , 2.0f ) ; assert . assertEquals ( "Entity::SetLocation X not correct" , 1.0f , entity . getX ( ) ) ; assert . assertEquals ( "Entity::SetLocation Y not correct" , 2.0f , entity . getY ( ) ) ; }
tr	IDF	private void animateMove ( Move m ) { final int ANIMATION_TIME = 400 ; DraughtsState gameState = getCurrentGameState ( ) ; getBoardPanel ( ) . getBoard ( ) . animateMoveForward ( m , ANIMATION_TIME ) ; gameState . doMove ( m ) ; notifyGameGuiListeners ( gameState ) ; }
tr	IDF	@ Test public void testGetMinimumOreVolumeHugeMultiple ( ) throws Exception { System . out . println ( "--- testGetMinimumOreVolumeMultiple()" ) ; ReprocessingPlantImpl rp = new ReprocessingPlantImpl ( ) ; rp . setSecurityStatus ( .4 ) ; rp . setSovereignty ( EnumSet . of ( Sovereignty . Gallente ) ) ; double yield = .974 ; double tax = 0.0221 ; rp . setUserStatistics ( yield , tax ) ; long [ ] minerals = { 10966360 , 5003300 , 479550 , 91090 , 0 , 0 , 0 , 0 } ; ReprocessingSolution solution = rp . getMinimumOreVolume ( minerals ) ; assert . assertNotNull ( "Solution was not found" , solution ) ; long [ ] extractedMinerals = new long [ minerals . length ] ; Arrays . fill ( extractedMinerals , 0 ) ; for ( Map . Entry < Ore , long > entry : solution . getOreList ( ) . entrySet ( ) ) { System . out . printf ( "%s - %dm^3 (%s) %n" , entry . getKey ( ) . getName ( ) , entry . getValue ( ) , Math . ceil ( entry . getValue ( ) / 27500 ) ) ; List < OreMineral > result = entry . getKey ( ) . getBatchResult ( ) ; long oreVolume = entry . getValue ( ) ; long batches = ( long ) ( oreVolume / entry . getKey ( ) . getVolume ( ) ) / entry . getKey ( ) . getUnitsToRefine ( ) ; for ( OreMineral oreMineral : result ) { double unitsPerBatch = oreMineral . getUnitsPerBatch ( ) ; unitsPerBatch = unitsPerBatch * yield ; unitsPerBatch = unitsPerBatch - unitsPerBatch * tax ; extractedMinerals [ oreMineral . getMineral ( ) . ordinal ( ) ] += unitsPerBatch * batches ; } } NumberFormat instance = NumberFormat . getInstance ( ) ; Mineral [ ] values = Mineral . values ( ) ; for ( int i = 0 ; i < extractedMinerals . length ; i ++ ) { System . out . printf ( "Mineral %s: %s -> %s%n" , values [ i ] . name ( ) , instance . format ( extractedMinerals [ i ] ) , instance . format ( minerals [ i ] ) ) ; assert . assertTrue ( "Mineral " + i , extractedMinerals [ i ] >= minerals [ i ] ) ; } }
tr	IDF	private void loadFromDirectory ( ) { logger . info ( "=+=+=+=+=+ Entry in loadFromDirectory=+=+=+=+" ) ; loadFromSubdirectory ( new File ( pluginDirectory ) , pluginDirectory ) ; logger . info ( "=+=+=+=+=+ Exit from loadFromDirectory=+=+=+=+" ) ; }
tr	IDF	@ Test public final void testReadBytesFileNotExists ( ) { File file = new File ( "mock.txt" ) ; file . delete ( ) ; try { file . readBytes ( 4 ) ; fail ( ) ; } catch ( FileNotOnDiskException e ) { } }
tr	KEY	public double [ ] getAmbient ( ) { return ambient ; }
tr	KEY	public void setTempsMouvement ( int i ) { this . tempsMouvement = i ; }
tr	KEY	public boolean isHolding ( ) { if ( holding == null ) return false ; else return true ; }
tr	IDF	public FillInTheBlanks ( final boolean showQuestion , final int questionNumber , final Statistics statistics , final String question , final ArrayList < String > blanks , final Location answerLocation ) { super ( Type . FillInTheBlanks , showQuestion , questionNumber , statistics , answerLocation , question ) ; _blanks = blanks ; }
tr	KEY	int getUnitsToRefine ( ) ;
tr	KEY	public PackedWorld ( ) { super ( 8 , 8 ) ; cells = 0 ; }
tr	KEY	public int getPictureScanline ( ) { return mPictureScanline ; }
tr	IDF	@ Override public void Consultar ( ) throws SQLException { try { Conexion . GetInstancia ( ) . Conectar ( ) ; ResultSet rs = Conexion . GetInstancia ( ) . EjecutarConsulta ( "SELECT TipProSer_Descuento Des_Descuento Porcen_Descuento FROM Descuento WHERE Id_Descuento ='" + ObDecuento . getId_Descuento ( ) + "'" ) ; while ( rs . next ( ) ) { ObDecuento . setTipProSer_Descuento ( rs . getString ( "TipProSer_Descuento" ) ) ; ObDecuento . setDes_Descuento ( rs . getString ( "Des_Descuento" ) ) ; ObDecuento . setPorcen_Descuento ( rs . getInt ( "Porcen_Descuento" ) ) ; } } catch ( SQLException ex ) { throw ex ; } finally { Conexion . GetInstancia ( ) . Desconectar ( ) ; } }
tr	KEY	public double getPreis ( ) { return preis ; }
tr	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButton2ActionPerformed ( evt ) ; }
tr	KEY	@ Override public Orientation getStepOrientation ( int lineIndex ) { switch ( lineIndex ) { case 0 : case 5 : return Orientation . DOWN_LEFT ; case 1 : case 6 : return Orientation . UP_LEFT ; case 2 : case 7 : return Orientation . CENTER ; case 3 : case 8 : return Orientation . UP_RIGHT ; case 4 : case 9 : return Orientation . DOWN_RIGHT ; default : return Orientation . NONE ; } }
tr	KEY	public String getName ( ) { return this . name ; }
tr	KEY	public boolean checkMatch2 ( String t1c , String t2c , int invoker ) { ASCII_Tiles t = new ASCII_Tiles ( ) ; int [ ] arrMatchedTiles = new int [ 2 ] ; boolean passedCheck = false ; if ( t1c . equals ( t2c ) ) { return true ; } else { return false ; } }
tr	IDF	public void setDicID ( String dicID ) { this . dicID = dicID ; }
tr	KEY	@ Override public void run ( ) { }
tr	KEY	public int getStockColorDestino ( ) { return stockColorDestino ; }
tr	IDF	public void renderUnit ( VGame vg , VObject vo , VPoint cam , VGraphics g ) { i . renderUnit ( vg , vo , cam , g ) ; }
tr	IDF	public void removeMilestone ( String post , Calendar date ) ;
tr	IDF	public void setId ( String id ) { this . id = id ; }
tr	KEY	protected PuzzleFactory ( ) { }
tr	KEY	public void setLosses ( long losses ) { this . losses = losses ; }
tr	KEY	public double neb ( ) { if ( level . BLOCKS_EMPTY != 0 ) return getBlocksEmptyDestroyed ( ) / level . BLOCKS_EMPTY ; else return 0 ; }
tr	KEY	public int getHardValue ( ) { return hardValue ; }
tr	KEY	public AreaStats areaStats ( ) { return new AreaStats ( this ) ; }
tr	KEY	public void setMin ( int min ) { this . min = min ; }
tr	KEY	public int getLargo ( ) { return largo ; }
tr	KEY	public double getPrice ( ) { return price ; }
tr	IDF	public void subscribe ( ResponseListener < ? extends Response > listener , class < ? > responseType ) { responseListeners . put ( responseType , listener ) ; }
tr	KEY	@ JsonProperty ( "influence" ) public long getInfluence ( ) { return influence ; }
tr	KEY	public int getBalance ( ) { return balance ; }
tr	IDF	private static void recurseFlatten ( Object [ ] array , List < Object > result ) { for ( Object o : array ) { if ( o . getClass ( ) . isArray ( ) ) { recurseFlatten ( ( Object [ ] ) o , result ) ; } else { result . add ( o ) ; } } }
tr	IDF	protected void setValueByName ( String name , Object value ) { Method method = getMethod ( name , SetterPrevNames , setterContainer ) ; try { if ( value != null ) { class < ? > type = method . getParameters ( ) [ 0 ] . getType ( ) ; if ( value instanceof Integer && type . equals ( long . class ) ) { value = long . valueOf ( ( Integer ) value ) ; } else if ( value instanceof float && type . equals ( double . class ) ) { value = double . valueOf ( ( float ) value ) ; } } method . invoke ( this , value ) ; } catch ( Exception e ) { System . err . println ( "invoke err from " + method . getDeclaringClass ( ) . getName ( ) ) ; System . err . println ( "set \"" + name + "\" " + value + " (" + ( value == null ? "void" : value . getClass ( ) . getName ( ) ) + ")" ) ; System . err . println ( method ) ; throw new RuntimeException ( e ) ; } }
tr	IDF	protected int hash ( Object key ) { return key . hashCode ( ) ; }
tr	KEY	private ShortUrlGenerator ( ) { m_latestShortUrl = null ; m_initialized = false ; }
tr	KEY	public synchronized int xgetL3AssignedKeyCode ( ) { return l3 ; }
tr	IDF	public static int numberOfCombinations ( int numDays , String previousTwo ) { if ( numDays == 0 ) return 1 ; else if ( numDays == 1 ) { if ( previousTwo . equals ( "AA" ) ) return 1 ; else return 2 ; } else { if ( previousTwo . equals ( "AA" ) ) return numberOfCombinations ( numDays - 1 , "AO" ) ; else return numberOfCombinations ( numDays - 1 , previousTwo . substring ( 1 , 2 ) + "A" ) + numberOfCombinations ( numDays - 1 , previousTwo . substring ( 1 , 2 ) + "O" ) ; } }
tr	IDF	public void backLauncher ( ) { dispose ( ) ; new AliveTask ( ) { @ Override public void run ( ) { try { Thread . sleep ( 500 ) ; } catch ( InterruptedException e ) { } FrameRunner . run ( LauncherDialog . class ) ; } } . start ( ) ; }
tr	KEY	public double [ ] getMirrorColor ( ) { return mirrorColor ; }
tr	IDF	@ Override public boolean parse ( Transferable input ) { if ( canAccept ( input ) ) { BufferedReader br = null ; try { Reader reader = DataFlavor . getTextPlainUnicodeFlavor ( ) . getReaderForText ( input ) ; br = new BufferedReader ( reader ) ; String line ; mineralInput = null ; while ( ( line = br . readLine ( ) ) != null ) { if ( line . startsWith ( "Material - Quantity" ) ) { while ( ( line = br . readLine ( ) ) != null ) { String [ ] split = line . split ( " " ) ; if ( split . length == 3 ) { if ( mineralInput == null ) { mineralInput = new MineralInputImpl ( ) ; } Mineral mineral = Mineral . valueOf ( split [ 0 ] ) ; Number quantity = NumberFormat . getInstance ( ) . parse ( split [ 2 ] ) ; mineralInput . setQuantity ( mineral , quantity . longValue ( ) ) ; } else { return mineralInput != null ; } } } } } catch ( Exception e ) { e . printStackTrace ( ) ; } finally { if ( br != null ) { try { br . close ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } } } return false ; }
tr	KEY	public int getNumFacCom_DevCompra ( ) { return NumFacCom_DevCompra ; }
tr	IDF	public void endElement ( String uri , String localName , String atagname ) throws SAXException { if ( atagname . equals ( "TestCaseItem" ) ) { String mykey = testcaselist . makeNewId ( testgroupid , "test" , 8 ) ; testcaseitem . testgroupid = testgroupid ; testcaseitem . testid = CParser . getRemnant ( mykey , "|" ) ; testcaselist . addItem ( mykey , testcaseitem ) ; testcaseitem = new CTestItem ( ) ; testcaseitem . testgroupid = testgroupid ; } else if ( atagname . equals ( "ShotItem" ) ) { shotitem . shotid = testcaseitem . shotlist . makeNewId ( "sht" , 3 ) ; testcaseitem . shotlist . addItem ( shotitem . shotid , shotitem ) ; shotitem = new CShotItem ( ) ; } else if ( atagname . equals ( "NonAdminItem" ) ) { nonaditem . nonadmid = testcaseitem . nonadmlist . makeNewId ( "nad" , 6 ) ; testcaseitem . nonadmlist . addItem ( nonaditem . nonadmid , nonaditem ) ; nonaditem = new CNonadItem ( ) ; } else if ( atagname . equals ( "ExpectResultItem" ) ) { expresitem . expectid = testcaseitem . ereslist . makeNewId ( "ert" , 6 ) ; testcaseitem . ereslist . addItem ( expresitem . expectid , expresitem ) ; expresitem = new CTextItem ( ) ; } else if ( atagname . equals ( "ExpectDoseItem" ) ) { expdoseitem . doseid = testcaseitem . edoselist . makeNewId ( "dos" , 6 ) ; testcaseitem . edoselist . addItem ( expdoseitem . doseid , expdoseitem ) ; expdoseitem = new CDoseItem ( ) ; } else if ( atagname . equals ( "TestTitle" ) ) testcaseitem . testtitle = curstr ; else if ( atagname . equals ( "TestDesc" ) ) testcaseitem . testdesc = curstr ; else if ( atagname . equals ( "TestNotes" ) ) testcaseitem . testnote = curstr ; else if ( atagname . equals ( "CreateBy" ) ) testcaseitem . createby = curstr ; else if ( atagname . equals ( "BaseDate" ) ) testcaseitem . basedate = parseDate ( curstr ) ; else if ( atagname . equals ( "LastName" ) ) testcaseitem . lastname = curstr ; else if ( atagname . equals ( "FirstName" ) ) testcaseitem . firstname = curstr ; else if ( atagname . equals ( "BirthDate" ) ) testcaseitem . birthdate = parseDate ( curstr ) ; else if ( atagname . equals ( "GenderCd" ) ) testcaseitem . gendercd = curstr ; else if ( atagname . equals ( "ShotDate" ) ) shotitem . shotdate = parseDate ( curstr ) ; else if ( atagname . equals ( "VaccineCd" ) ) shotitem . vaccinecd = curstr ; else if ( atagname . equals ( "MfrCd" ) ) shotitem . mfrcd = curstr ; else if ( atagname . equals ( "NonadmDate" ) ) nonaditem . nonadmdate = parseDate ( curstr ) ; else if ( atagname . equals ( "AntSeriesCd" ) ) nonaditem . seriescd = curstr ; else if ( atagname . equals ( "ReasonCd" ) ) nonaditem . reasoncd = curstr ; else if ( atagname . equals ( "ExpectTxt" ) ) expresitem . expecttxt = curstr ; else if ( atagname . equals ( "ResultTxt" ) ) expresitem . resulttxt = curstr ; else if ( atagname . equals ( "SeriesCd" ) ) expdoseitem . seriescd = curstr ; else if ( atagname . equals ( "ResultCd" ) ) expdoseitem . resultcd = curstr ; else if ( atagname . equals ( "NextDoseNum" ) ) expdoseitem . doseord = Integer . parseInt ( curstr ) ; else if ( atagname . equals ( "AccelDate" ) ) expdoseitem . acceldate = parseDate ( curstr ) ; else if ( atagname . equals ( "RecomDate" ) ) expdoseitem . recomdate = parseDate ( curstr ) ; else if ( atagname . equals ( "OverdueDate" ) ) expdoseitem . overduedate = parseDate ( curstr ) ; curstr = "" ; }
tr	KEY	public boolean isFirstSolutionOnly ( ) { return firstSolutionOnly ; }
tr	KEY	public static GameText getInstance ( ) { if ( global == null ) { global = new GameText ( ) ; } return global ; }
tr	IDF	@ Override public void exitEscreva ( @ NotNull EnquantoParser . EscrevaContext ctx ) { }
tr	IDF	public void setRuta ( int ruta ) { this . ruta = ruta ; try { setRutaObj ( RutaDP . getOne ( ruta ) ) ; } catch ( SQLException ex ) { Logger . getLogger ( Cliente . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; } }
tr	IDF	@ Override protected Control createControl ( final Composite parent ) { if ( fTimeInfoManager == null ) { fTimeInfoManager = TimeInfoManager . getInstance ( ) ; } fInfoWidget = new TimeInfoControl ( parent , getOrientation ( ) ) ; fTimeInfoManager . setInfoWidget ( fInfoWidget ) ; return fInfoWidget ; }
tr	IDF	public void setFirstName ( String firstName ) { this . firstName = firstName ; }
tr	IDF	public List < Neuron > getNeurons ( ) { return neurons ; }
tr	IDF	@ Override public void leftMultiply ( IMatrix other ) { }
tr	IDF	@ Override public void execute ( double t ) { if ( input . isConnected ( ) ) { Matrix u = input . getInput ( ) ; for ( int i = 0 ; i < input . getDim ( ) ; i ++ ) { xs [ i ] . x . add ( u . get ( i , 0 ) ) ; double v = Math . abs ( u . get ( i , 0 ) ) ; if ( maxv < v ) maxv = v ; } } }
tr	KEY	private void clearHand ( ) { this . hand = new ArrayList < PokerCard > ( ) ; }
tr	IDF	private void formWindowStateChanged ( java . awt . event . WindowEvent evt ) { switch ( this . getState ( ) ) { case 0 : gamecontrol . setState ( NORMAL ) ; break ; case 1 : gamecontrol . setState ( ICONIFIED ) ; break ; default : break ; } }
tr	IDF	@ Override public int hashCode ( ) { int hash = 5 ; hash = 71 * hash + this . maximumCommuners ; return hash ; }
tr	IDF	public void clear_map ( ) { for ( int i = 0 ; i < 512 ; i ++ ) { for ( int j = 0 ; j < 512 ; j ++ ) { fow [ i ] [ j ] = fow2 [ i ] [ j ] ; fow2 [ i ] [ j ] = ( byte ) ( fow [ i ] [ j ] > 0 ? 1 : 0 ) ; } } }
tr	KEY	public FontCollector ( ) { }
tr	IDF	public void build ( ) { puzzle = PuzzleFactory . INSTANCE . getPuzzleReader ( puzzleType ) . read ( input ) ; solutionSet = PuzzleFactory . INSTANCE . getSolutionSet ( this , puzzleType , puzzle ) ; algorithm = AlgorithmFactory . INSTANCE . get ( algorithmType , puzzle ) ; }
tr	KEY	public int getId ( ) { return id ; }
tr	KEY	public void printInfo ( ) ;
tr	IDF	public String resultingJson ( JSONObject input ) { String in = input . toString ( ) ; return resultingJson ( in ) ; }
tr	KEY	public abstract void delete ( T t ) ;
tr	KEY	@ AfterMethod public void tearDownMethod ( ) throws Exception { }
tr	KEY	public void setPedido ( long value ) { this . pedido = value ; }
tr	IDF	public String [ ] obtenerArtista ( String list [ ] ) { Listas album1 = new Listas ( 20 ) ; Listageneral = new String [ 20 ] ; File miDir = new File ( "." ) ; this . album = list ; int tamaño = this . album . length ; for ( int i = 0 ; i < tamaño ; i ++ ) { this . Nombre_can = this . album [ i ] ; try { direccion = miDir . getCanonicalPath ( ) + "/" + this . Nombre_can + ".txt" ; } catch ( Exception e ) { e . printStackTrace ( ) ; } leer_archivo Consulta_cancion = new leer_archivo ( 20 ) ; this . Obtenerdato = Consulta_cancion . leer_archivo1 ( direccion ) ; if ( this . Obtenerdato [ 2 ] == null ) { this . Obtenerdato [ 2 ] = "null" ; } album1 . agregarele ( this . Obtenerdato [ 2 ] ) ; this . Listageneral = album1 . imprimir ( lista1 . length ) ; } return this . Listageneral ; }
tr	KEY	public void startNow ( ) ;
tr	IDF	void c2cUpdateObject ( String obId , Vector3d deltaTrans , Vector3d delatRot ) throws RemoteException ;
tr	KEY	public boolean booConfig ( ) { return booConfig ; }
tr	IDF	@ SuppressWarnings ( "unchecked" ) private void initComponents ( ) { jLabel1 = new javax . swing . JLabel ( ) ; editButton = new javax . swing . JButton ( ) ; addButton = new javax . swing . JButton ( ) ; deleteButton = new javax . swing . JButton ( ) ; saveButton = new javax . swing . JButton ( ) ; jLabel2 = new javax . swing . JLabel ( ) ; jLabel3 = new javax . swing . JLabel ( ) ; jTextField1 = new javax . swing . JTextField ( ) ; jTextField2 = new javax . swing . JTextField ( ) ; list1 = new java . awt . List ( ) ; menuBar = new javax . swing . JMenuBar ( ) ; fileMenu = new javax . swing . JMenu ( ) ; exitMenuItem = new javax . swing . JMenuItem ( ) ; setDefaultCloseOperation ( javax . swing . WindowConstants . EXIT_ON_CLOSE ) ; jLabel1 . setText ( "Categories" ) ; editButton . setText ( "Edit" ) ; editButton . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { editButtonActionPerformed ( evt ) ; } } ) ; addButton . setText ( "Add" ) ; addButton . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { addButtonActionPerformed ( evt ) ; } } ) ; deleteButton . setText ( "Delete" ) ; deleteButton . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { deleteButtonActionPerformed ( evt ) ; } } ) ; saveButton . setText ( "Save" ) ; saveButton . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { saveButtonActionPerformed ( evt ) ; } } ) ; jLabel2 . setText ( "Category Name" ) ; jLabel3 . setText ( "Display Order" ) ; jTextField1 . setText ( "jTextField1" ) ; jTextField2 . setText ( "jTextField2" ) ; list1 . addMouseListener ( new java . awt . event . MouseAdapter ( ) { public void mouseClicked ( java . awt . event . MouseEvent evt ) { list1MouseClicked ( evt ) ; } } ) ; fileMenu . setMnemonic ( f ) ; fileMenu . setText ( "File" ) ; exitMenuItem . setMnemonic ( x ) ; exitMenuItem . setText ( "Exit" ) ; exitMenuItem . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { exitMenuItemActionPerformed ( evt ) ; } } ) ; fileMenu . add ( exitMenuItem ) ; menuBar . add ( fileMenu ) ; setJMenuBar ( menuBar ) ; javax . swing . GroupLayout layout = new javax . swing . GroupLayout ( getContentPane ( ) ) ; getContentPane ( ) . setLayout ( layout ) ; layout . setHorizontalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addContainerGap ( ) . addComponent ( list1 , javax . swing . GroupLayout . PREFERRED_SIZE , 89 , javax . swing . GroupLayout . PREFERRED_SIZE ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( jLabel2 ) . addComponent ( jLabel3 ) ) . addGap ( 40 , 40 , 40 ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( jTextField2 , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) . addComponent ( jTextField1 , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) ) ) . addGroup ( layout . createSequentialGroup ( ) . addGap ( 21 , 21 , 21 ) . addComponent ( jLabel1 ) ) . addGroup ( layout . createSequentialGroup ( ) . addContainerGap ( ) . addComponent ( editButton ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addComponent ( addButton ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addComponent ( deleteButton ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addComponent ( saveButton ) ) ) . addContainerGap ( 117 , short . MAX_VALUE ) ) ) ; layout . setVerticalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addGap ( 15 , 15 , 15 ) . addComponent ( jLabel1 ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addComponent ( list1 , javax . swing . GroupLayout . PREFERRED_SIZE , 126 , javax . swing . GroupLayout . PREFERRED_SIZE ) . addGap ( 22 , 22 , 22 ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE ) . addComponent ( editButton ) . addComponent ( addButton ) . addComponent ( deleteButton ) . addComponent ( saveButton ) ) ) . addGroup ( layout . createSequentialGroup ( ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE ) . addComponent ( jLabel2 ) . addComponent ( jTextField1 , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) ) . addGap ( 7 , 7 , 7 ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE ) . addComponent ( jLabel3 ) . addComponent ( jTextField2 , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) ) ) ) . addContainerGap ( 69 , short . MAX_VALUE ) ) ) ; pack ( ) ; }
tr	IDF	public boolean pressTab ( ) { if ( numOfDevelopers > 0 ) { tabCount = ++ tabCount % numOfDevelopers ; this . x = getXOfDeveloperAtIndexTabCount ( ) ; this . y = getYOfDeveloperAtIndexTabCount ( ) ; return true ; } System . out . println ( "SelTab not numDev > 0" ) ; return false ; }
tr	KEY	private static int getPointValue ( char letter ) { switch ( letter ) { case ? : return 0 ; case A : ; case E : ; case I : ; case O : ; case U : return 5 ; case C : ; case D : ; case L : ; case M : ; case N : ; case P : ; case R : ; case S : ; case T : return 10 ; case B : ; case F : ; case G : ; case H : ; case J : ; case K : return 15 ; case V : ; case W : ; case Y : return 20 ; case Q : ; case Z : return 25 ; case X : return 50 ; default : throw new IllegalArgumentException ( format ( "Unrecognized character '%c'" , letter ) ) ; } }
tr	KEY	public static synchronized int getY ( ) { return m_y ; }
tr	IDF	@ Override public void update ( ) { inputProcess ( ) ; processDash ( ) ; }
tr	KEY	public void updateModelFromView ( ) ;
tr	KEY	public String getFileType ( ) { if ( this == IMAGE ) { return ".png" ; } else if ( this == SOUND ) { return ".wav" ; } else { return "" ; } }
tr	KEY	public abstract void initPanel ( ) ;
tr	IDF	public ConstraintPuzzleCollection getCollection ( String collectionName ) { Element puzzleCollectionsElement = workingDocument . getRootElement ( ) . element ( "PuzzleCollections" ) ; List puzzleCollectionsElemementElements = puzzleCollectionsElement . elements ( ) ; for ( Object collectionObject : puzzleCollectionsElemementElements ) { Element collectionElement = ( Element ) collectionObject ; boolean wellFormedPuzzle = true ; String name = collectionElement . attributeValue ( "name" ) ; String type = collectionElement . attributeValue ( "classname" ) ; Ruleset rs = new Ruleset ( ) ; for ( Object ruleObject : collectionElement . element ( "Rules" ) . elements ( "Rule" ) ) { Element ruleElement = ( Element ) ruleObject ; try { class ruleClass = class . forName ( ruleElement . getText ( ) ) ; rs . addRule ( ( Rule ) ruleClass . newInstance ( ) ) ; } catch ( Exception e ) { wellFormedPuzzle = false ; break ; } } class collectionClass = null ; try { collectionClass = class . forName ( type ) ; } catch ( Exception e ) { wellFormedPuzzle = false ; } if ( wellFormedPuzzle ) { if ( name . equals ( collectionName ) ) { ConstraintPuzzleCollection collection = new ConstraintPuzzleCollection ( collectionName , collectionClass , rs ) ; for ( Object puzzleObject : collectionElement . element ( "Puzzles" ) . elements ( "Puzzle" ) ) { Element puzzleElement = ( Element ) puzzleObject ; String [ ] puzzleDataElements = puzzleElement . element ( "PuzzleData" ) . getText ( ) . split ( " " ) ; try { ConstraintPuzzle conP ; if ( collectionClass == SudokuPuzzle . class ) { conP = new SudokuPuzzle ( ) ; } else { conP = ( ConstraintPuzzle ) collectionClass . newInstance ( ) ; } conP . setSize ( ( int ) Math . sqrt ( puzzleDataElements . length ) ) ; conP . setRuleset ( rs ) ; int currentNumber = 0 ; for ( String elementValue : puzzleDataElements ) { int parsedElementValue = Integer . parseInt ( elementValue ) ; if ( parsedElementValue != ConstraintPuzzle . EMPTY_ELEMENT_VALUE ) { conP . setElementWithNumber ( currentNumber , parsedElementValue ) ; } else { } currentNumber ++ ; } collection . addPuzzle ( conP ) ; } catch ( Exception e ) { System . out . println ( "Exception Thrown Within SudokuModel.java: " + e . toString ( ) ) ; } } return collection ; } } else { return null ; } } return null ; }
tr	IDF	public void initCamadaGamer ( ) { InfoCenter . carregaMapa ( world ) ; InfoCenter . zeraRobotActions ( ) ; Proto . setDirectionToRight ( ) ; try { bsh . eval ( "import gamer.Proto;" ) ; bsh . eval ( "import gamer.Goal;" ) ; bsh . eval ( "import gamer.Sphere1;" ) ; bsh . eval ( "import gamer.Sphere2;" ) ; bsh . eval ( "import gamer.Sphere3;" ) ; bsh . eval ( "import gamer.CurrentSphere;" ) ; bsh . set ( "none" , InfoCenter . map_nada ) ; bsh . set ( "solid" , InfoCenter . map_solido ) ; bsh . set ( "stairs" , InfoCenter . map_escada ) ; bsh . set ( "goal" , InfoCenter . map_objetivo ) ; bsh . set ( "sphere" , InfoCenter . map_esfera ) ; bsh . set ( "solid_stairs" , InfoCenter . map_solidoEscada ) ; VariavelTableNode aux ; for ( int i = 0 ; i < Universal . currentVariables . size ( ) ; i ++ ) { aux = Universal . currentVariables . get ( i ) ; if ( aux . tipo . equals ( "int" ) ) { bsh . set ( aux . nome , Integer . parseInt ( aux . valor ) ) ; } else if ( aux . tipo . equals ( "boolean" ) ) { if ( aux . valor . equals ( "true" ) ) { bsh . set ( aux . nome , true ) ; } else { bsh . set ( aux . nome , false ) ; } } else if ( aux . tipo . equals ( "String" ) ) { bsh . set ( aux . nome , aux . valor ) ; } } } catch ( EvalError ex ) { JOptionPane . showMessageDialog ( null , "Erro ao importar classes no eval." , "Erro" , JOptionPane . ERROR_MESSAGE ) ; flagExit = true ; } }
tr	KEY	public Menu ( ) { }
tr	IDF	private void topicRBActionPerformed ( java . awt . event . ActionEvent evt ) { }
tr	IDF	public String readLine ( ) throws IOException { StringBuilder sbuf = new StringBuilder ( 32768 ) ; int result ; do { result = this . readLine ( fBuff , 0 , fBuff . length ) ; if ( result != - 1 ) sbuf . append ( new String ( fBuff , 0 , result , "ISO-8859-1" ) ) ; } while ( result == fBuff . length ) ; if ( sbuf . length ( ) == 0 ) return null ; sbuf . setLength ( sbuf . length ( ) - 2 ) ; return sbuf . toString ( ) ; }
tr	IDF	public Card deleteCard ( String question ) ;
tr	KEY	public void setId ( long id ) { this . id = id ; }
tr	KEY	public LoopingByteInputStream ( byte [ ] buffer ) { super ( buffer ) ; closed = false ; }
tr	IDF	public boolean laserExists ( Object player ) { boolean result = false ; for ( int i = 0 ; i < lasers . size ( ) ; i ++ ) { if ( lasers . get ( i ) . getParent ( ) == player ) { result = true ; } } return result ; }
tr	IDF	public SourceCounter ( List < File > files , String include , String nonInclude ) { this . files = files ; this . include = include ; this . nonInclude = nonInclude ; initFrame ( ) ; initContentPanel ( ) ; initResultPanel ( ) ; }
tr	IDF	public boolean loadBuffer ( Connection connection , String ligne , ReportField reportField ) { boolean returnValue = true ; try { switch ( this . getDiscriminator ( ) ) { case CONSTANTE : buffer = getConstante ( ) . getValue ( ) ; break ; case POSITION : try { buffer = getPosition ( ) . getValue ( ligne ) ; returnValue = isBufferValid ( reportField ) ; } catch ( IndexOutOfBoundsException ioobe ) { LOGGER . log ( Level . SEVERE , "Ligne(" + reportField . getReportLine ( ) . getNumberLine ( ) + ") : " + buffer ) ; LOGGER . log ( Level . SEVERE , reportField . ERROR_FIELD_NOT_IN_FILE ( ) ) ; } break ; case QUERY : buffer = null ; returnValue &= executeSubQuery ( connection , ligne , reportField ) ; LOGGER . finest ( "Ligne(" + reportField . getReportLine ( ) . getNumberLine ( ) + ") : " + buffer ) ; break ; } } catch ( Exception ex ) { LOGGER . log ( Level . SEVERE , "Ligne(" + reportField . getReportLine ( ) . getNumberLine ( ) + ") : " , ex ) ; returnValue = false ; } if ( buffer != null ) { buffer = buffer . trim ( ) ; } return returnValue ; }
tr	IDF	public Player ( String name , int nr ) { this . name = name ; gold = 0 ; setNr ( nr ) ; }
tr	IDF	void onRemainingScoreForPlayer ( Player player , Score score ) ;
tr	KEY	public int getH ( ) { return h ; }
tr	IDF	private Map < long , Map < long , long >> parse ( File directory ) throws IOException { URL shapeURL = new File ( table ) . toURI ( ) . toURL ( ) ; DataStore store = new ShapefileDataStore ( shapeURL ) ; String tname = store . getTypeNames ( ) [ 0 ] ; FeatureSource < SimpleFeatureType , SimpleFeature > source = store . getFeatureSource ( tname ) ; FeatureCollection < SimpleFeatureType , SimpleFeature > collection = source . getFeatures ( ) ; Map < long , Map < long , long >> sm = new TreeMap < long , Map < long , long >> ( ) ; FeatureIterator < SimpleFeature > iterator = collection . features ( ) ; SimpleFeature ft ; while ( iterator . hasNext ( ) ) { ft = iterator . next ( ) ; indexer . put ( ( String ) ft . getAttribute ( lookup ) , ( ( Number ) ft . getAttribute ( index ) ) . longValue ( ) ) ; } if ( ! directory . exists ( ) ) { System . out . println ( "ERROR:  Directory " + directory + " does not exist." ) ; System . exit ( 0 ) ; } Map < long , long > m ; for ( File f : directory . listFiles ( new EndsWithFilter ( extension ) ) ) { String name = f . getName ( ) . substring ( 0 , f . getName ( ) . lastIndexOf ( "." ) ) ; long where = - 1 ; try { where = indexer . get ( name ) ; } catch ( NullPointerException npe ) { System . out . print ( "No lookup match was found for " + name + " using field " + lookup + " in " + table ) ; System . out . println ( " - Continuing..." ) ; continue ; } if ( sm . get ( where ) == null ) { m = new TreeMap < long , long > ( ) ; } else { m = sm . get ( where ) ; } BufferedReader br = new BufferedReader ( new FileReader ( f ) ) ; stk = new StringTokenizer ( br . readLine ( ) , "[{  =}]" ) ; while ( stk . hasMoreTokens ( ) ) { m . put ( long . parseLong ( stk . nextToken ( ) ) , long . parseLong ( stk . nextToken ( ) ) ) ; } sm . put ( where , m ) ; br . close ( ) ; } return sm ; }
tr	KEY	public Memento save ( ) { return new Memento ( this ) ; }
tr	KEY	private KWSeeker ( ) { }
tr	KEY	public double np ( ) { if ( level . BLOCKS_POWER != 0 ) return getBlocksPowerDestroyed ( ) / level . BLOCKS_POWER ; else return 0 ; }
tr	KEY	public void setSeminarId ( long seminarId ) { this . seminarId = seminarId ; }
tr	IDF	public static INDISwitchProperty createSaveableSwitchProperty ( INDIDriver driver , String name , String label , PropertyStates state , PropertyPermissions permission , SwitchRules rule ) throws IllegalArgumentException { INDISwitchProperty sp = loadSwitchProperty ( driver , name ) ; if ( sp == null ) { sp = new INDISwitchProperty ( driver , name , label , state , permission , rule ) ; sp . setSaveable ( true ) ; } return sp ; }
tr	IDF	void surfaceArea ( ) { System . out . println ( "surface area:" + ( length * width + width * height + length * height ) * 2 ) ; }
tr	KEY	public void start ( ) { new Thread ( this ) . start ( ) ; }
tr	KEY	@ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; }
tr	KEY	public void setOffset ( long value ) { this . offset = value ; }
tr	KEY	void exec ( ) ;
tr	IDF	public static ResponseCodes parse ( String value ) { ResponseCodes output = ResponseCodes . Unknown ; if ( ! Utilities . isNullOrWhitespace ( value ) ) { for ( ResponseCodes code : ResponseCodes . values ( ) ) { if ( value . equals ( code . toString ( ) ) ) { output = code ; } if ( output != ResponseCodes . Unknown ) { break ; } } } return output ; }
tr	KEY	public void printData ( ) { printData ( false ) ; }
tr	KEY	public int getWidth ( ) { return width ; }
tr	IDF	public void setTimeSent ( XMLGregorianCalendar value ) { this . timeSent = value ; }
tr	IDF	@ NotNull public String stderr ( ) { return stderr ; }
tr	IDF	public void exc ( ) { File fdir = new File ( dir ) ; FileWriter fw ; BufferedWriter bw ; try { fw = new FileWriter ( outpath + "/" + label + year + ".txt" ) ; bw = new BufferedWriter ( fw ) ; FilenameFilter filter = new FilenameFilter ( ) { public boolean accept ( File dir , String name ) { return ! name . startsWith ( "." ) && name . startsWith ( year ) ; } } ; File [ ] fa = fdir . listFiles ( filter ) ; FileReader fr ; BufferedReader br ; boolean first = true ; for ( File f : fa ) { String name = f . getName ( ) ; TRJMerge tm = new TRJMerge ( ) ; tm . setDirname ( f . getAbsolutePath ( ) ) ; tm . setOutput ( outpath + "/" + name + ".txt" ) ; tm . setMin ( min ) ; tm . setMax ( max ) ; tm . go ( ) ; int start = name . indexOf ( separator ) ; int end = name . lastIndexOf ( extension ) ; String substr = name . substring ( start + 1 , end ) ; fr = new FileReader ( outpath + "/" + name + ".txt" ) ; br = new BufferedReader ( fr ) ; String ln = br . readLine ( ) ; if ( first ) { bw . write ( "SOURCE\t" + ln + System . getProperty ( "line.separator" ) ) ; first = false ; } ln = br . readLine ( ) ; while ( ln != null ) { bw . write ( substr + "\t" + ln + System . getProperty ( "line.separator" ) ) ; ln = br . readLine ( ) ; } System . out . println ( "Finished with " + name + "." ) ; br . close ( ) ; fr . close ( ) ; } bw . flush ( ) ; bw . close ( ) ; fw . close ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }
tr	IDF	public Menu ( String name , String description ) { this . name = name ; this . description = description ; }
tr	KEY	public float getPriceValue ( ) { return priceValue ; }
tr	IDF	static void asciiTest ( ) { System . err . printf ( "Key typed '%c' (%02X) vs '%c' (%02X)\n" , A , ( int ) A , a , ( int ) a ) ; System . err . printf ( "Key typed '%c' vs '%c'\n" , A , ( char ) ( a & DF ) ) ; }
tr	IDF	private RectVertices calculateInnerSquareVertices_OutNotSlope ( Square outSq ) { RectVertices v = new RectVertices ( ) ; Point2D v1 = outSq . getVertices ( ) . getFirst ( ) ; int lBigSq = outSq . getPixelLength ( ) ; int lSmallSq = calculateInnerSquareLength ( outSq ) ; int pMove = lSmallSq - 1 ; lSmallSq *= 2 ; int vS1X = ( int ) ( v1 . getX ( ) ) ; int vS1Y = ( int ) ( v1 . getY ( ) ) + pMove ; int vS2X = ( int ) ( v1 . getX ( ) ) + pMove ; int vS2Y = ( int ) ( v1 . getY ( ) ) ; v . setFirst ( vS1X , vS1Y ) ; v . setSecond ( vS2X , vS2Y ) ; v . setThird ( vS1X + lBigSq - 1 , vS1Y ) ; v . setFourth ( vS2X , vS2Y + lBigSq - 1 ) ; return v ; }
tr	IDF	@ Bean ( name = "buildingCrudService" ) public BuildingCrudService getBuildingCrudService ( ) { return new BuildingCrudServiceImpl ( ) ; }
tr	IDF	@ Test public void whenReadingTeachers ( ) { teacherDao = new TeacherDao ( "src/test/resources" ) ; Iterable < Teacher > teachers = teacherDao . readAll ( ) ; System . out . println ( "teachers: " + teachers ) ; }
tr	IDF	long getVolume ( Ore ore ) ;
tr	KEY	public abstract void writeInstance ( DependencyInstance inst ) throws IOException ;
tr	IDF	public static List < String > getNonIncludeProperties ( ) throws DocumentException { return getProperties ( getXMLRootElementByDom4j ( RULE_CONFIG ) . element ( "non-include" ) ) ; }
tr	IDF	@ Override public void actionPerformed ( ActionEvent e ) { MortgageDialog mortgageDialog = new MortgageDialog ( frame , true , Game . currentPlayer ) ; }
tr	KEY	@ AfterMethod public void tearDownMethod ( ) throws Exception { }
tr	IDF	public FTreeList < Elt > withInserted ( int index , Elt elt ) { if ( index < 0 || index > treeSize ( tree ) ) throw new IndexOutOfBoundsException ( ) ; else return new FTreeList < Elt > ( insert ( tree , index , elt ) , elt_comp ) ; }
tr	IDF	@ Override public void handle ( ActionEvent event ) { if ( isResized ) { System . out . println ( "here" ) ; vBox . setVisible ( false ) ; vBox . setPrefWidth ( 0 ) ; } else { vBox . setVisible ( true ) ; vBox . setPrefWidth ( 150 ) ; } }
tr	IDF	public static Set < OrdenPintura > getAll ( ) throws SQLException { Set < OrdenPintura > res = new HashSet < > ( ) ; sql = "SELECT * FROM OPINTURA;" ; try ( ResultSet rs = ComunDP . getData ( sql ) ) { while ( rs . next ( ) ) { res . add ( DbToObj ( rs ) ) ; } } return res ; }
tr	KEY	public int getGeneration ( ) { return generation ; }
tr	KEY	@ Override public void start ( ) { started = true ; }
tr	KEY	public void setOverwrite ( boolean overwrite ) { this . overwrite = overwrite ; }
tr	IDF	public static < T > void assertSequence ( Observable < T > in , final T ... exp ) { assertSequenceThen ( in , new Action0 ( ) { @ Override public void call ( ) { } } , exp ) ; }
tr	KEY	public int getPlayerTurnIndex ( ) { if ( turnPosition >= this . players . size ( ) ) { return 0 ; } return turnPosition ; }
tr	KEY	private static boolean isFinite ( float x ) { return ( float . NEGATIVE_INFINITY < x && x < float . POSITIVE_INFINITY ) ; }
tr	IDF	public void setTempStrength ( boolean temp ) { if ( temp ) { setStrength ( getStrength ( ) + 4 ) ; tempStrengthCounter = 20 ; } }
tr	KEY	public PrisonCellKey ( ) { this . name = "cell key" ; }
tr	IDF	public MapBoard ( ) { initComponents ( ) ; mouse = new Point ( - 1 , - 1 ) ; addMouseMotionListener ( new MouseMotionListener ( ) { @ Override public void mouseDragged ( MouseEvent e ) { } @ Override public void mouseMoved ( MouseEvent e ) { mouse = e . getPoint ( ) ; } } ) ; try { posBuffer = new ArrayList < > ( ) ; for ( int i = 0 ; i < Game . players . size ( ) ; i ++ ) { posBuffer . add ( 0.0 ) ; } } catch ( NullPointerException err ) { System . out . println ( "Error: " + err . getMessage ( ) ) ; } try { diceimg = ImageIO . read ( new File ( "images/DICE.png" ) ) ; } catch ( IOException ex ) { System . out . println ( "Could not find image..." ) ; Logger . getLogger ( MapBoard . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; } }
tr	KEY	public void getClient ( ) ;
tr	KEY	public void open ( ) ;
tr	IDF	String newLabel ( String label ) { ++ labelNum ; return label + "<<" + labelNum + ">>" ; }
tr	KEY	public static void main ( String [ ] args ) { new MainAbsoluteLayout ( ) ; }
tr	IDF	private static int _getScore ( Proxy proxy ) { byte [ ] imageBytes = proxy . send ( new ProxyScreenshotMessage ( ) ) ; int score = - 1 ; BufferedImage image = null ; try { image = ImageIO . read ( new ByteArrayInputStream ( imageBytes ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } GameStateExtractor gameStateExtractor = new GameStateExtractor ( ) ; GameState state = gameStateExtractor . getGameState ( image ) ; if ( state == GameState . PLAYING ) score = gameStateExtractor . getScoreInGame ( image ) ; else if ( state == GameState . WON ) score = gameStateExtractor . getScoreEndGame ( image ) ; if ( score == - 1 ) System . out . println ( " Game score is unavailable " ) ; return score ; }
tr	KEY	public static TBlockFactory getInstance ( ) { if ( instance == null ) { instance = new TBlockFactory ( ) ; } return instance ; }
tr	KEY	public void kick ( ) { super . setId ( IN_HOUSE_ID ) ; }
tr	IDF	T findById ( long id ) ;
tr	KEY	public int getHeight ( ) { return height ; }
tr	IDF	public String getInput ( ) { String newMarker = null ; Scanner in = new Scanner ( System . in ) ; boolean valid = false ; while ( ! valid ) { System . out . println ( "\n\tEnter a single character that will be " + "used to mark your squares in the game." ) ; newMarker = in . nextLine ( ) ; if ( newMarker == null || newMarker . length ( ) > 1 ) { System . out . println ( "\n\tInvalid number of characters or entry" ) ; continue ; } valid = true ; } return newMarker ; }
tr	KEY	public int getSpareShips ( ) { return spareShips ; }
tr	IDF	@ Override public void addFollowUpStep ( ScenarioTreeStep stepToAdd ) { if ( this . getFollowUpSteps ( ) . length >= 1 ) { throw new RuntimeException ( "ScenarioTreeStepDBOWLTablet: Nur ein Folgeschritt m\u00F6glich" ) ; } super . addFollowUpStep ( stepToAdd ) ; }
tr	IDF	void openBlock ( ) { topFrame ( ) . openBlock ( ) ; }
tr	IDF	private void initMenu ( ) { JMenuBar menuBar = new JMenuBar ( ) ; JMenu menu = new JMenu ( " Menu " ) ; JMenuItem load = new JMenuItem ( "Charger Simulateur" ) ; JMenuItem save = new JMenuItem ( "Sauvegarder Simulateur" ) ; menu . add ( load ) ; menu . add ( save ) ; menuBar . add ( menu ) ; this . setJMenuBar ( menuBar ) ; load . addActionListener ( new ChargerMenuListener ( ) ) ; }
tr	IDF	@ Test public final void testLanguage_Proficiency ( ) { assertEquals ( "BASIC" , ISO . Language . Proficiency . BASIC . name ( ) ) ; }
tr	KEY	public double getLinePrice ( ) { return this . product . getUnitPrice ( ) * this . quantity ; }
tr	IDF	public RationalNumber mlt ( RationalNumber r ) ;
tr	KEY	public XBoxController ( int port ) { super ( port ) ; }
tr	IDF	private List < OreSolution > solveForMineral ( OreSolution input , Mineral mineral , Collection < Ore > ores , double yield , double tax ) { if ( input . minerals [ mineral . ordinal ( ) ] > 0 ) { List < OreSolution > solutions = new ArrayList < OreSolution > ( ) ; for ( Ore ore : ores ) { if ( ore . hasMineral ( mineral ) ) { OreSolution newOne = new OreSolution ( input ) ; solutions . add ( newOne ) ; advanceSolution ( newOne , ore , mineral , yield , tax ) ; if ( mineral != Mineral . Tritanium ) { Mineral nextOne = Mineral . values ( ) [ mineral . ordinal ( ) - 1 ] ; solutions . addAll ( solveForMineral ( newOne , nextOne , ores , yield , tax ) ) ; } } } return solutions ; } else if ( mineral != Mineral . Tritanium ) { Mineral nextOne = Mineral . values ( ) [ mineral . ordinal ( ) - 1 ] ; return solveForMineral ( input , nextOne , ores , yield , tax ) ; } return Collections . emptyList ( ) ; }
tr	KEY	public int getWidth ( ) { return width ; }
tr	IDF	public JSONArray optJSONArray ( int index ) { Object o = this . opt ( index ) ; return o instanceof JSONArray ? ( JSONArray ) o : null ; }
tr	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { closetabBtnActionPerformed ( evt ) ; }
tr	KEY	public void setMaxRows ( int maxRows ) { this . maxRows = maxRows ; }
tr	IDF	public void update ( long elapsedTime ) { super . update ( elapsedTime ) ; aiManager . updateAI ( elapsedTime ) ; if ( state == STATE_DEAD ) { getParent ( ) . parent . getMap ( ) . getAIShips ( ) . remove ( this ) ; } }
tr	KEY	public void onNoSocketProvided ( ) ;
tr	KEY	public void remove ( ) { throw new UnsupportedOperationException ( ) ; }
tr	KEY	public boolean fileExists ( ) { File file = new File ( this . getFilename ( ) ) ; return file . exists ( ) ? true : false ; }
tr	IDF	@ Override public int compareTo ( ReadOnlyInts o ) { if ( o == null ) return 1 ; if ( this == o ) return 1 ; int diff = this . arrs . length - o . arrs . length ; if ( diff != 0 ) return diff ; for ( int i = 0 ; i < this . arrs . length ; i ++ ) { diff = this . arrs [ i ] - o . arrs [ i ] ; if ( diff != 0 ) return diff ; } return 0 ; }
tr	KEY	public double fire ( ) { this . neuronOutput = neuronActivation . fire ( this . neuronInput ) ; return this . neuronOutput ; }
tr	IDF	@ Override public boolean setPacketFields ( Map < String , Object > in ) { return false ; }
tr	KEY	public Profile getProfile ( ) { return this . profile ; }
tr	IDF	public List < Client > getClient ( ) throws SQLException ;
tr	KEY	public final AbstractFMap < Key , Val > clone ( ) { return this ; }
tr	IDF	public void setMetodo ( String strMetodo ) { this . set ( "method" , strMetodo ) ; }
tr	IDF	public FTreeSet < Val > range ( ) { return ( FTreeSet < Val > ) range ( tree , new FTreeSet ( ) ) ; }
tr	KEY	public int getMaxRows ( ) ;
tr	IDF	private List < Peer > peersBuilder ( ) { List < Peer > peers = new ArrayList < Peer > ( ) { { Peer p1 = new Peer ( ) ; p1 . setName ( "Some other company" ) ; OperatingEnvironment_InsidePeers oe1 = new OperatingEnvironment_InsidePeers ( ) ; oe1 . setId ( 837456784356 ) ; oe1 . setRating ( 16 ) ; oe1 . setInfluence ( 3 ) ; p1 . setOperatingEnvironment ( oe1 ) ; BusinessProfile_InsidePeer bp1 = new BusinessProfile_InsidePeer ( ) ; bp1 . setId ( 837456784356 ) ; bp1 . setRating ( 12 ) ; bp1 . setInfluence ( 3 ) ; p1 . setBusinessProfile ( bp1 ) ; add ( p1 ) ; Peer p2 = new Peer ( ) ; p2 . setName ( "Yet another company" ) ; OperatingEnvironment_InsidePeers oe2 = new OperatingEnvironment_InsidePeers ( ) ; oe2 . setId ( 837456784356 ) ; oe2 . setRating ( 14 ) ; oe2 . setInfluence ( 2 ) ; p2 . setOperatingEnvironment ( oe2 ) ; BusinessProfile_InsidePeer bp2 = new BusinessProfile_InsidePeer ( ) ; bp2 . setId ( 837456784356 ) ; bp2 . setRating ( 11 ) ; bp2 . setInfluence ( 1 ) ; p2 . setBusinessProfile ( bp2 ) ; add ( p2 ) ; } } ; return peers ; }
tr	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButton2ActionPerformed ( evt ) ; }
tr	IDF	public Binary2Text ( File f ) { df . setTimeZone ( TimeZone . getTimeZone ( "UTC" ) ) ; setFile ( f ) ; }
tr	KEY	public CriteriaSerializerTest ( ) { }
tr	KEY	public Order ( ) { }
tr	IDF	public ControlPanel ( ) { super ( ) ; setLayout ( new BoxLayout ( this , BoxLayout . Y_AXIS ) ) ; zoomSlider = createNewSlider ( 1 , 20 , 10 , Strings . CONTROL_ZOOM ) ; add ( Box . createVerticalStrut ( 10 ) ) ; zoomSlider . addChangeListener ( new ChangeListener ( ) { public void stateChanged ( ChangeEvent e ) { if ( ! zoomSlider . getValueIsAdjusting ( ) ) onZoomChange ( zoomSlider . getValue ( ) ) ; } } ) ; stepSlider = createNewSlider ( 0 , 10 , 0 , Strings . CONTROL_STEP ) ; add ( Box . createVerticalStrut ( 10 ) ) ; stepSlider . addChangeListener ( new ChangeListener ( ) { public void stateChanged ( ChangeEvent e ) { if ( ! stepSlider . getValueIsAdjusting ( ) ) onStepChange ( stepSlider . getValue ( ) ) ; } } ) ; speedSlider = createNewSlider ( 0 , 100 , 0 , Strings . CONTROL_SPEED ) ; add ( Box . createVerticalStrut ( 10 ) ) ; speedSlider . addChangeListener ( new ChangeListener ( ) { public void stateChanged ( ChangeEvent e ) { if ( ! speedSlider . getValueIsAdjusting ( ) ) onSpeedChange ( speedSlider . getValue ( ) ) ; } } ) ; Box worldPanel = Box . createHorizontalBox ( ) ; add ( worldPanel ) ; worldPanel . add ( new JLabel ( Strings . STORAGE_WORLD_TYPE ) ) ; ButtonGroup group = new ButtonGroup ( ) ; longButton = createNewButton ( Strings . STORAGE_LONG , group , worldPanel ) ; arrayButton = createNewButton ( Strings . STORAGE_ARRAY , group , worldPanel ) ; agingButton = createNewButton ( Strings . STORAGE_AGING , group , worldPanel ) ; hashButton = createNewButton ( Strings . STORAGE_HASH , group , worldPanel ) ; arrayButton . setSelected ( true ) ; add ( Box . createVerticalStrut ( 10 ) ) ; }
tr	IDF	@ Override public void onPointEvent ( PointEvent event ) { }
tr	IDF	public List < Company > getCompany ( ) { return new ArrayList < Company > ( company ) ; }
tr	KEY	public abstract void update ( ) ;
tr	KEY	public void restart ( ) ;
tr	IDF	private FeatureVector getLabelFeature ( DependencyArcList arcLis , int [ ] heads , int mod , int type ) { return pipe . synFactory . createLabelFeatures ( inst , arcLis , heads , mod , type ) ; }
tr	IDF	public static int matrixSum ( int [ ] [ ] array , ArrayList < Pair > previousPairs , HashMap < Integer , Integer > previousValues ) { HashSet < Integer > xCoords = new HashSet < Integer > ( ) ; ArrayList < Integer > sortedXCoords = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < previousPairs . size ( ) ; i ++ ) xCoords . add ( previousPairs . get ( i ) . x ) ; for ( int i = 0 ; i < ARRAYSIZE ; i ++ ) if ( xCoords . contains ( i ) ) sortedXCoords . add ( i ) ; if ( previousValues . containsKey ( sortedXCoords . hashCode ( ) ) ) return previousValues . get ( sortedXCoords . hashCode ( ) ) ; int nextY = previousPairs . size ( ) ; if ( nextY == ARRAYSIZE - 1 ) for ( int i = 0 ; i < ARRAYSIZE ; i ++ ) if ( ! xCoords . contains ( i ) ) return array [ nextY ] [ i ] ; int max = 0 ; for ( int i = 0 ; i < ARRAYSIZE ; i ++ ) if ( ! xCoords . contains ( i ) ) { ArrayList < Pair > newPairs = new ArrayList < Pair > ( ) ; for ( int j = 0 ; j < previousPairs . size ( ) ; j ++ ) newPairs . add ( new Pair ( previousPairs . get ( j ) . y , previousPairs . get ( j ) . x ) ) ; newPairs . add ( new Pair ( nextY , i ) ) ; int newSum = array [ nextY ] [ i ] + matrixSum ( array , newPairs , previousValues ) ; if ( newSum > max ) max = newSum ; } previousValues . put ( sortedXCoords . hashCode ( ) , max ) ; return max ; }
tr	KEY	public ControllerHandler ( ) { }
tr	KEY	public abstract void filter ( byte [ ] samples , int offset , int length ) ;
tr	IDF	public ShortCutPanel ( final AnswerLocationPanel topPanel ) { this . setTopPanel ( topPanel ) ; this . createOptionsPanel ( ) ; }
tr	KEY	public int [ ] [ ] getyPos ( ) { return yPos ; }
tr	IDF	@ Id @ Column ( name = "idnews" ) public int getIdnews ( ) { return idnews ; }
tr	KEY	public int getAkku ( ) { return akku ; }
tr	KEY	public int getAverageWeather ( ) { return averageWeather ; }
tr	KEY	public void setPlayerId ( int playerId ) { this . playerId = playerId ; }
tr	KEY	public void stop ( ) { speed = 0 ; immediateUpdate = true ; }
tr	KEY	public void identity ( ) ;
tr	IDF	public ActionExtractor ( String line ) { int x = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { x = line . indexOf ( " " , x ) + 1 ; } line = line . substring ( x ) ; x = line . indexOf ( ":" ) ; action = line . substring ( 0 , x ) ; }
tr	IDF	public DependencyArcList ( int [ ] heads , boolean useHO ) { n = heads . length ; st = new int [ n ] ; edges = new int [ n ] ; constructDepTreeArcList ( heads ) ; if ( useHO ) { left = new int [ n ] ; right = new int [ n ] ; constructSpan ( ) ; } }
tr	IDF	@ Override public boolean equals ( Object o ) { return o instanceof Map && map . equals ( o ) ; }
tr	IDF	public void Solve ( ) { bfs ( getInitBeliefs ( ) ) ; System . out . println ( "In order of moves: " ) ; for ( int i = 0 ; i < mSolutions . size ( ) ; i ++ ) { System . out . println ( "Go " + getDir ( mSolutions . get ( i ) . id ) + " to get: \t" + mSolutions . get ( i ) . toString ( ) ) ; } }
tr	KEY	public FileCheckbox ( ) { super ( ) ; }
tr	IDF	private Entity getEntityObject ( EFPersistable obj ) { for ( Entity e : entities ) { if ( e . getObject ( ) . getId ( ) . equals ( obj . getId ( ) ) && e . getObject ( ) . getClass ( ) . equals ( obj . getClass ( ) ) ) return e ; } return null ; }
tr	KEY	@ Override public void editing ( ) { }
tr	IDF	@ Test public void testProducerWorkflow ( ) throws InterruptedException { USBEventProducer prod = new USBEventProducer ( ) ; DummyListener dl = new DummyListener ( ) ; prod . registerEventListener ( dl ) ; prod . receiveData ( new byte [ ] { ( byte ) Integer . parseInt ( "02" , 16 ) , ( byte ) Integer . parseInt ( "04" , 16 ) , ( byte ) Integer . parseInt ( "00" , 16 ) , ( byte ) Integer . parseInt ( "00" , 16 ) , ( byte ) Integer . parseInt ( "00" , 16 ) , ( byte ) Integer . parseInt ( "00" , 16 ) , ( byte ) Integer . parseInt ( "00" , 16 ) } , 7 ) ; prod . receiveData ( confirmation , 7 ) ; prod . receiveData ( new byte [ ] { ( byte ) Integer . parseInt ( "02" , 16 ) , ( byte ) Integer . parseInt ( "03" , 16 ) , ( byte ) Integer . parseInt ( "00" , 16 ) , ( byte ) Integer . parseInt ( "00" , 16 ) , ( byte ) Integer . parseInt ( "00" , 16 ) , ( byte ) Integer . parseInt ( "00" , 16 ) , ( byte ) Integer . parseInt ( "00" , 16 ) } , 7 ) ; prod . receiveData ( confirmation , 7 ) ; prod . receiveData ( new byte [ ] { ( byte ) Integer . parseInt ( "02" , 16 ) , ( byte ) Integer . parseInt ( "01" , 16 ) , ( byte ) Integer . parseInt ( "00" , 16 ) , ( byte ) Integer . parseInt ( "00" , 16 ) , ( byte ) Integer . parseInt ( "00" , 16 ) , ( byte ) Integer . parseInt ( "00" , 16 ) , ( byte ) Integer . parseInt ( "00" , 16 ) } , 7 ) ; prod . receiveData ( confirmation , 7 ) ; Thread . sleep ( 2000 ) ; prod . removeEventListener ( dl ) ; prod . receiveData ( new byte [ ] { ( byte ) Integer . parseInt ( "02" , 16 ) , ( byte ) Integer . parseInt ( "8a" , 16 ) , ( byte ) Integer . parseInt ( "00" , 16 ) , ( byte ) Integer . parseInt ( "00" , 16 ) , ( byte ) Integer . parseInt ( "00" , 16 ) , ( byte ) Integer . parseInt ( "00" , 16 ) , ( byte ) Integer . parseInt ( "00" , 16 ) } , 7 ) ; prod . receiveData ( confirmation , 7 ) ; Thread . sleep ( 2000 ) ; assert . assertFalse ( dl . hitEvent ) ; assert . assertTrue ( dl . dartMissed ) ; assert . assertTrue ( dl . bounceOut ) ; assert . assertTrue ( dl . nextPlayer ) ; }
tr	IDF	public void actionPerformed ( ActionEvent e ) { switchPanels ( 2 ) ; }
tr	KEY	public NotImplementedException ( ) { }
tr	IDF	private void checkHasNoMethodWithSimilarNames ( class < T > interfaceClass ) { HashSet < String > methodNames = new HashSet < > ( ) ; for ( Method method : interfaceClass . getMethods ( ) ) { if ( ! methodNames . add ( method . getName ( ) . toLowerCase ( ) ) ) { throw new InterfaceHasMethodsWithSimilarName ( String . format ( "Interface '%s' has methods with name similar to method '%s'" , interfaceClass . getName ( ) , method . getName ( ) ) ) ; } } }
tr	IDF	@ Override public void popRow ( ) { stack . pop ( ) ; }
tr	KEY	private int tierToMinCost ( int tier ) { switch ( tier ) { case 1 : return 0 ; case 2 : return 50 ; case 3 : return 100 ; case 4 : return 500 ; case 5 : return 1000 ; } return 0 ; }
tr	IDF	public synchronized String getRawData ( ) throws IOException { byte [ ] input ; if ( m_connected ) { m_os . write ( G ) ; System . out . println ( "Requested Data" ) ; if ( m_is . available ( ) <= bufferSize ) { input = new byte [ m_is . available ( ) ] ; m_receivedData = new byte [ m_is . available ( ) ] ; m_is . read ( input ) ; for ( int i = 0 ; ( input != null ) && ( i < input . length ) ; i ++ ) { m_receivedData [ i ] = input [ i ] ; } } else { System . out . println ( "PI OVERFLOW" ) ; m_is . skip ( m_is . available ( ) ) ; return null ; } m_rawData = "" ; System . out . println ( "Raw Data: " + m_receivedData . length ) ; for ( int i = 0 ; i < m_receivedData . length ; i ++ ) { m_rawData += ( char ) m_receivedData [ i ] ; } System . out . println ( m_rawData ) ; return m_rawData ; } else { connect ( ) ; return null ; } }
tr	KEY	@ Override protected void unbindSelf ( ) { this . messageManager . unbind ( this ) ; this . connectionManager . unbind ( this ) ; }
tr	KEY	public void blockEmptyDestroyRecord ( ) { blocksEmptyDestroyed ++ ; }
tr	IDF	@ JsonProperty ( "subFactors" ) public List < Object > getSubFactors ( ) { return subFactors ; }
tr	IDF	private void renderDisabledState ( Graphics2D context ) { context . setColor ( this . getColor ( ) ) ; context . fillRect ( this . getX ( ) + this . getBorderSize ( ) , this . getY ( ) + this . getBorderSize ( ) , this . getWidth ( ) / 2 - this . getBorderSize ( ) , this . getHeight ( ) - 2 * this . getBorderSize ( ) ) ; this . label . setText ( "0" ) ; this . label . horizontalAlignCenter ( this . getY ( ) , this . getY ( ) + this . getHeight ( ) ) ; this . label . verticalAlignCenter ( this . getX ( ) + this . getWidth ( ) / 2 , this . getX ( ) + this . getWidth ( ) ) ; this . label . render ( context ) ; }
tr	IDF	@ Override public String toString ( ) { return "ResultadoPodeAndar [podeAndar=" + podeAndar + "  newAxisX=" + newAxisX + "  newAxisY=" + newAxisY + "]" ; }
tr	KEY	public static boolean isValidBLOBEnable ( String BLOBEnable ) { try { parseBLOBEnable ( BLOBEnable ) ; } catch ( IllegalArgumentException e ) { return false ; } return true ; }
tr	IDF	public static Point2D calculateRotation ( Point2D sqCoordinate , int degree ) { Matrix coorValue = new Matrix ( 1 , 2 ) ; coorValue . setValue ( 0 , 0 , sqCoordinate . getX ( ) ) ; coorValue . setValue ( 0 , 1 , sqCoordinate . getY ( ) ) ; Matrix R = getRotationMatrix ( degree ) ; coorValue = Matrix . multiple ( coorValue , R ) ; int x = ( int ) coorValue . getValue ( 0 , 0 ) ; int y = ( int ) coorValue . getValue ( 0 , 1 ) ; Point2D p = new Point ( x , y ) ; return p ; }
tr	IDF	public void set_building ( Building building ) { this . _building = building ; }
tr	IDF	public void setServicio ( Servicio servicio ) { this . ObServicio = servicio ; }
tr	IDF	public User [ ] findWhereStatusUEquals ( String statusU ) throws UserDaoException ;
tr	KEY	public void setVisited ( boolean visited ) { this . visited = visited ; }
tr	KEY	public InviteRes ( ) { }
tr	IDF	public void sendCommand ( int address , Command command ) throws SerialPortException { for ( String cmd : command . toString ( ) . split ( "\n" ) ) { send ( ( char ) ( BCAST_ADDRESS + address ) + cmd ) ; } }
tr	IDF	@ Override public void mineralInput ( MineralInput input ) { if ( input != null ) { for ( int i = 0 ; i < mineralTextFields . length ; i ++ ) { JFormattedTextField textField = ( JFormattedTextField ) mineralTextFields [ i ] ; long quantity = input . getQuantity ( Mineral . values ( ) [ i ] ) ; textField . setValue ( quantity ) ; } } }
tr	IDF	private void setValue ( ParseTree node , Object value ) { values . put ( node , value ) ; }
tr	IDF	public ISS ( Imposto outroImposto ) { super ( outroImposto ) ; }
tr	IDF	@ Override public String getColumnName ( int pos ) { return colunas [ pos ] ; }
tr	KEY	public static long getSerialversionuid ( ) { return serialVersionUID ; }
tr	KEY	public void start ( ) throws InitializationException { if ( ! started ) { initSubsystems ( ) ; started = true ; } else { throw new IllegalStateException ( "Node cannot be started twice." ) ; } }
tr	KEY	public int getId ( ) { return id ; }
tr	IDF	private void initializeMenu ( ) { IMenuManager menuManager = getViewSite ( ) . getActionBars ( ) . getMenuManager ( ) ; }
tr	KEY	public int getId ( ) { return id ; }
tr	IDF	@ Override public List < Invite > getAllInvite ( List < Integer > idInvite ) { return null ; }
tr	KEY	public void setId ( int id ) { this . id = id ; }
tr	IDF	@ HandlesEvent ( "OrderHistory" ) public Resolution orderHistory ( ) { Resolution r = new ForwardResolution ( "/" ) ; if ( ctx . getUser ( ) != null ) { try { this . orders = new dao . OrderDAO ( ) . getOrdersByUserID ( ctx . getUser ( ) . getUserID ( ) ) . toArray ( this . orders ) ; } catch ( SQLException | NamingException e ) { e . printStackTrace ( ) ; } r = new ForwardResolution ( "/orderhistory.jsp" ) ; } return r ; }
tr	IDF	public void set_damageType ( DamageType damageType ) { _damageType = damageType ; }
tr	IDF	public String getInstrumentInfo ( int i ) { Instrument [ ] instr = synth . getDefaultSoundbank ( ) . getInstruments ( ) ; return i >= 0 && i < instr . length ? instr [ i ] . toString ( ) : null ; }
tr	IDF	@ Override public void visit ( Comment comment ) { printIndent ( "// " + comment . comment ) ; }
tr	KEY	public long getExamId ( ) { return examId ; }
tr	KEY	public String [ ] getColumnNames ( ) { return this . columnNames ; }
tr	KEY	@ BeforeClass public static void setUpClass ( ) throws Exception { equip = new NotebookPC ( "ASUS K53U" ) ; }
tr	IDF	private List < Object > factorsBuilder ( ) { ArrayList < Object > factors = new ArrayList < Object > ( ) { { FactorWithRatings f1 = new FactorWithRatings ( ) ; f1 . setId ( 837456784356 ) ; f1 . setLabel ( "Rating range High" ) ; f1 . setRating ( 15 ) ; FactorWithRatings f2 = new FactorWithRatings ( ) ; f2 . setId ( 837456784356 ) ; f2 . setLabel ( "Rating Range Low " ) ; f2 . setRating ( 6 ) ; FactorWithInfluence f3 = new FactorWithInfluence ( ) ; f3 . setId ( 837456784356 ) ; f3 . setInfluence ( 1 ) ; f3 . setLabel ( "Influence" ) ; add ( f1 ) ; add ( f2 ) ; add ( f3 ) ; } } ; return factors ; }
tr	IDF	void die ( Graphics2D g2d ) ;
tr	IDF	public ConstraintPuzzle ( ) { setRandomNumberGeneratorSeed ( ) ; setSize ( 0 ) ; setRuleset ( new Ruleset ( ) ) ; }
tr	IDF	int alphaBeta ( NodeLVL2 node , int alpha , int beta , int player , int depth ) throws Exception { count ++ ; DraughtsState state = node . getState ( ) ; if ( depth == 0 ) { return player * node . getValue ( node . getState ( ) ) ; } for ( Move move : state . getMoves ( ) ) { state . doMove ( move ) ; alpha = max ( alpha , - alphaBeta ( new NodeLVL2 ( state . clone ( ) ) , - beta , - alpha , - ( player ) , depth - 1 ) ) ; state . undoMove ( move ) ; if ( beta >= alpha ) { return alpha ; } } return alpha ; }
tr	KEY	public boolean isSub ( ) { return - ; }
tr	IDF	@ Override protected void __doPut ( HttpServletRequest req , HttpServletResponse resp ) throws IOException { resp . setContentType ( "text/plain" ) ; resp . getWriter ( ) . println ( "Ouch... not implemented yet :(" ) ; }
tr	IDF	public void setDiscType ( DiscType discType ) { this . discType = discType ; }
tr	KEY	public int getTileWidth ( ) { return tileset . tilewidth ; }
tr	KEY	public int getMatchSeconds ( ) { return matchSeconds ; }
tr	KEY	public void setPageSize ( int pageSize ) { this . pageSize = pageSize ; }
tr	IDF	public void displayHoldFestivalFrame ( GameController game , JavaPlayer [ ] players , int indexOfPlayerHoldingFestival , PalaceCard festivalCard , int selectedPalaceValue , int [ ] palaceXY ) { festivalFrame = new HoldFestivalFrame ( game , players , indexOfPlayerHoldingFestival , festivalCard , selectedPalaceValue , palaceXY ) ; }
tr	IDF	public Product ( int productID , String productName , String description , String categoryName , double unitPrice , int unitsInStock , int unitsOnOrder , int reorderLevel , boolean discontinued , String imagePath ) { this . productID = productID ; this . productName = productName ; this . description = description ; this . categoryName = categoryName ; this . unitPrice = unitPrice ; this . unitsInStock = unitsInStock ; this . unitsOnOrder = unitsOnOrder ; this . reorderLevel = reorderLevel ; this . discontinued = discontinued ; this . imagePath = imagePath ; }
tr	IDF	public Map < Integer , Integer > getShoppingCart ( UserModel user ) throws WebshopAppException ;
tr	KEY	public UpdateSDB ( ) { }
tr	KEY	boolean hasPoint ( final int row , final int col ) { return matrix [ row ] [ col ] ; }
tr	IDF	@ Override public void closePath ( ) { out . closePath ( ) ; }
tr	IDF	public void setTile8 ( String tile8 ) { this . tile8 = tile8 ; }
tr	KEY	public TabelaWynikowKoniec ( ) { }
tr	IDF	public ThreeTileAction ( int actionID , int x , int y , int rotationState ) { super ( actionID , x , y , rotationState ) ; this . imageKey = "threeTile" ; }
tr	KEY	public abstract int getDim ( ) ;
tr	KEY	public boolean hasGameStarted ( ) { return game != null && game . isStarted ( ) ; }
tr	KEY	private void initHandlers ( ) { this . handler = new EmprexEventHandler ( ) ; }
tr	IDF	public String getValues ( ) { StringBuilder sb = new StringBuilder ( ) ; E node = head ; while ( node != null ) { sb . append ( node . getKey ( ) ) ; sb . append (   ) ; node = node . getNext ( ) ; } return sb . toString ( ) ; }
tr	KEY	public long getOffset ( ) { return offset ; }
tr	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { buttonVoltar_HistoriaActionPerformed ( evt ) ; }
tr	KEY	protected int getStartId ( ) { return this . startId ; }
tr	IDF	@ Test public void canGetProductByNonExcistingCost ( ) { List < ProductModel > products = new ArrayList < > ( ) ; try { products = pd . getProductsByCost ( 123456 ) ; } catch ( WebshopAppException e ) { } assertTrue ( ( products != null ) && ( products . size ( ) == 0 ) ) ; }
tr	KEY	@ SuppressWarnings ( "unused" ) public static boolean isNumeric ( String str ) { try { int numb = Integer . parseInt ( str ) ; } catch ( NumberFormatException nfe ) { return false ; } return true ; }
tr	IDF	public void join ( Person p , Thing t ) { p . setThing ( t ) ; t . setPerson ( p ) ; }
tr	IDF	private void readObject ( ObjectInputStream in ) throws IOException , ClassNotFoundException { int version = in . readInt ( ) ; numEntries = in . readInt ( ) ; map = ( TObjectIntHashMap ) in . readObject ( ) ; growthStopped = in . readBoolean ( ) ; }
tr	IDF	static < Elt > FTreeSet < Elt > make ( Object tree , Comparator < ? super Elt > comp ) { if ( tree == null && comp == null ) return emptySet ( ) ; return new FTreeSet < Elt > ( 42 , tree , comp ) ; }
tr	IDF	public void mouseReleased ( java . awt . event . MouseEvent evt ) { jSlide1MouseReleased ( evt ) ; }
tr	IDF	public void handleKeyStroke ( KeyEvent evt ) { switch ( evt . getKeyCode ( ) ) { case KeyEvent . VK_SPACE : if ( ! inGame ) { this . startSnake ( ) ; } break ; case KeyEvent . VK_UP : snake . setCurrentDirection ( Direction . UPARROW ) ; break ; case KeyEvent . VK_DOWN : snake . setCurrentDirection ( Direction . DOWNARROW ) ; break ; case KeyEvent . VK_LEFT : snake . setCurrentDirection ( Direction . LEFTARROW ) ; break ; case KeyEvent . VK_RIGHT : snake . setCurrentDirection ( Direction . RIGHTARROW ) ; break ; case KeyEvent . VK_P : isPaused = ! isPaused ; if ( isPaused ) { timer . stop ( ) ; } else { timer . start ( ) ; } break ; case KeyEvent . VK_Q : this . endGame ( ) ; break ; } }
tr	IDF	@ Override public void call ( VGame vg , VObject vo , String ... args ) { if ( args [ 0 ] . equals ( "move" ) ) { if ( vg . player == vo . gi ( "ow" ) ) { vo . s ( "!tx" , args [ 1 ] ) ; vo . s ( "!ty" , args [ 2 ] ) ; vo . s ( "!ax" , args [ 1 ] ) ; vo . s ( "!ay" , args [ 2 ] ) ; vo . s ( "!atk" , "no" ) ; } } if ( args [ 0 ] . equals ( "hit" ) ) { vo . s ( "hp" , vo . gi ( "hp" ) - Integer . valueOf ( args [ 1 ] ) ) ; } if ( args [ 0 ] . equals ( "attack" ) ) { if ( vg . player == vo . gi ( "ow" ) ) { vo . s ( "!ax" , args [ 1 ] ) ; vo . s ( "!ay" , args [ 2 ] ) ; vo . s ( "!atk" , "yep" ) ; } } if ( args [ 0 ] . equals ( "buildunit" ) ) { if ( vg . player == vo . gi ( "ow" ) ) { vo . s ( "!cst" , args [ 1 ] ) ; vo . s ( "!std" , vg . type ( args [ 1 ] ) . gi ( "ptime" ) ) ; } } }
tr	KEY	public int getWidth ( ) { return width ; }
tr	IDF	private void eliminarButtonActionPerformed ( java . awt . event . ActionEvent evt ) { try { int aviso = JOptionPane . showConfirmDialog ( this , "Esta seguro que desea eliminar este proveedor?" , "Eliminar proveedor" , JOptionPane . YES_NO_OPTION ) ; if ( aviso == JOptionPane . YES_OPTION ) { stmt . executeUpdate ( "DELETE FROM proveedores where Id_proveedores='" + idb + "'" ) ; JOptionPane . showMessageDialog ( this , "Proveedor eliminado exitosamente." , "Proveedor eliminado" , WIDTH ) ; DefaultTableModel modelo = ( DefaultTableModel ) jTable1 . getModel ( ) ; int row = jTable1 . getSelectedRow ( ) ; modelo . removeRow ( row ) ; } } catch ( SQLException ex ) { JOptionPane . showMessageDialog ( this , "Error al tratar de conectar la base  verifica tus datos de conexion" ) ; } }
tr	KEY	public Request getRequest ( ) { return this . request ; }
tr	KEY	static float evalQuad ( final float a , final float b , final float c , final float t ) { return t * ( t * a + b ) + c ; }
tr	KEY	public void setMaxRows ( int maxRows ) ;
tr	KEY	public PlayerLVL2 ( ) { super ( PlayerLVL2 . class . getResource ( "resources/squirtle.jpg" ) ) ; }
tr	KEY	public int getHeight ( ) { return this . height ; }
tr	IDF	private int askUserIfWouldLikeToSaveGame ( ) { int shouldSave = JOptionPane . showConfirmDialog ( null , "Would you like to save?" , "Save Game" , JOptionPane . YES_NO_CANCEL_OPTION ) ; return shouldSave ; }
tr	IDF	@ Override public DataCount < E > next ( ) { if ( hasNext ( ) ) return currentChain . next ( ) ; throw new java . util . NoSuchElementException ( ) ; }
tr	IDF	@ Test public void bottomRight ( ) throws Exception { GridPrinter g = new GridPrinter ( new LocalPosition ( 1 , 0 ) , new LocalMap ( 2 , 2 ) ) ; assertEquals ( "|       |       |\n" + "|       |  you  |\n" , g . print ( "you" ) ) ; }
tr	KEY	public void setMaxRows ( int maxRows ) ;
tr	KEY	public void run ( ) { new InterfazTecnico ( ) . setVisible ( true ) ; }
tr	KEY	public int getResult ( ) { return _result ; }
tr	IDF	public SelectMoveDeveloperAroundBoardAction ( String imageKey , int originalX , int originalY , BoardModel board , JavaPlayer player ) { super ( imageKey ) ; this . x = originalX ; this . y = originalY ; this . originalX = originalX ; this . originalY = originalY ; this . path = new LinkedList < JavaCell > ( ) ; path . push ( board . getCellAtXY ( originalX , originalY ) ) ; this . board = board ; this . player = player ; }
tr	KEY	public void scale ( double x , double y , double z ) ;
tr	KEY	public boolean isClassAccessible ( String className ) { try { class . forName ( className ) ; return true ; } catch ( ClassNotFoundException e ) { } catch ( LinkageError error ) { } return false ; }
tr	KEY	@ Override public float getVScale ( ) { return vScale ; }
tr	KEY	NearestPixelQuarter ( final float [ ] tmp ) { super ( tmp ) ; }
tr	KEY	public Tablet ( ) { }
tr	KEY	public void setChequeado ( boolean chequeado ) { this . chequeado = chequeado ; }
tr	IDF	public List < AuthorModel > getAllAuthors ( ) throws WebshopAppException { return authorRepository . getAllAuthors ( ) ; }
tr	IDF	@ Override public void perform ( ) { try { BufferedReader br = new BufferedReader ( input ) ; String line ; while ( ( line = br . readLine ( ) ) instanceof String ) { write ( line ) ; } done ( ) ; } catch ( IOException e ) { System . err . println ( "I/O error." ) ; System . exit ( 1 ) ; } }
tr	IDF	public void itemStateChanged ( ItemEvent event ) { JComboBox comboBox = ( JComboBox ) event . getSource ( ) ; Object item = event . getItem ( ) ; if ( event . getStateChange ( ) == ItemEvent . SELECTED && box_flag_category > 0 ) { Category selected_category = ( Category ) categoryBox . getSelectedItem ( ) ; id_category = selected_category . getId ( ) ; System . out . println ( "Id kategorii:" + id_category ) ; cmp [ 0 ] = 1 ; } }
tr	IDF	public void run ( ) { try { Thread . sleep ( 500 ) ; mn . proceed ( ) ; } catch ( InterruptedException x ) { x . printStackTrace ( ) ; } }
tr	KEY	@ Override public void update ( final double ct ) { }
tr	KEY	public int getWindingRule ( ) { return path . getWindingRule ( ) ; }
tr	IDF	@ Override public Iterator < String > iterator ( ) { return new Iterator < String > ( ) { private int location = 0 ; private int hits = 0 ; @ Override public boolean hasNext ( ) { return hits < size ; } @ Override public String next ( ) { String toReturn = keys [ location ] ; while ( toReturn == null || toReturn . equals ( Tombstone ) ) { location ++ ; toReturn = keys [ location ] ; } hits ++ ; location ++ ; return toReturn ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( "Read only data set" ) ; } } ; }
tr	IDF	public void setMode ( int mode ) { if ( mode == MODE_24_HOUR || mode == MODE_12_HOUR ) { this . mode = mode ; } else { this . mode = MODE_12_HOUR ; LOGGER . warning ( "Attempt to set invalid time mode value: " + mode ) ; } }
tr	IDF	private static double compareErrors ( String original , String errorfilled ) { double diffcount = 0d ; for ( int i = 0 ; i < original . length ( ) ; i ++ ) { if ( original . charAt ( i ) != errorfilled . charAt ( i ) ) { diffcount ++ ; } } return diffcount / original . length ( ) ; }
tr	KEY	public boolean isOnThisXY ( int x , int y ) { return x == this . getX ( ) && y == this . getY ( ) ; }
tr	KEY	public boolean isCellEditable ( int row , int column ) { return false ; }
tr	KEY	public void setSoundEnabled ( boolean soundEnabled ) { this . soundEnabled = soundEnabled ; }
tr	IDF	public Joueur [ ] getAdversairesEnVie ( ) { ArrayList < Joueur > liste_adversaires = new ArrayList < Joueur > ( ) ; for ( int i = 0 ; i < adversaires . size ( ) ; i ++ ) if ( ! adversaires . get ( i ) . aPerdu ( ) ) liste_adversaires . add ( adversaires . get ( i ) ) ; return liste_adversaires . toArray ( new Joueur [ liste_adversaires . size ( ) ] ) ; }
tr	IDF	public boolean goThrough ( ) { System . out . println ( "You walk through the door" ) ; Game . player . currentLocation = World . house ; World . house . printDescription ( ) ; return true ; }
tr	KEY	@ Override public void hidDialog ( ) { this . setVisible ( false ) ; }
tr	KEY	@ JsonProperty ( "selected" ) public long getSelected ( ) { return selected ; }
tr	IDF	public SemanticFrame findMaximumMatching ( SemanticFrame frame , SRLFeatureData sfd , int p , TIntArrayList args , boolean addLoss ) { int N = args . size ( ) , M = sfd . L ; int [ ] arglbids = new int [ frame . arglbids . length ] ; if ( addLoss ) { for ( int i = 0 , L = arglbids . length ; i < L ; ++ i ) { arglbids [ i ] = frame . arglbids [ i ] ; if ( arglbids [ i ] >= 0 && sfd . isPruned ( p , i ) ) arglbids [ i ] = - 1 ; } } int T = N + M ; double minVal = Math . min ( 0.0 , nullWeight ) ; double [ ] f = new double [ T * T ] ; for ( int i = 0 ; i < N ; ++ i ) for ( int j = 0 ; j < M ; ++ j ) { double va = sfd . getArcScore ( p , args . get ( i ) , j ) ; if ( addLoss ) { if ( arglbids [ args . get ( i ) ] < 0 ) va += 1.0 ; else if ( j != arglbids [ args . get ( i ) ] ) va += 0.5 ; } f [ i * T + j ] = va ; minVal = minVal > va ? va : minVal ; } for ( int i = N ; i < T ; ++ i ) for ( int j = 0 ; j < T ; ++ j ) f [ i * T + j ] = 0 ; for ( int i = 0 ; i < N ; ++ i ) for ( int j = M ; j < T ; ++ j ) { f [ i * T + j ] = nullWeight + ( ( addLoss && i < N && arglbids [ args . get ( i ) ] >= 0 ) ? 2.0 : 0.0 ) ; } if ( minVal < 0.0 ) for ( int i = 0 ; i < T ; ++ i ) for ( int j = 0 ; j < T ; ++ j ) f [ i * T + j ] -= minVal ; MatchingInstance minst = new MatchingInstance ( T , f ) ; minst . run ( ) ; SemanticFrame predict = new SemanticFrame ( frame ) ; predict . arglbids = arglbids ; for ( int i = 0 ; i < arglbids . length ; ++ i ) arglbids [ i ] = - 1 ; for ( int i = 0 ; i < M ; ++ i ) if ( minst . find [ i ] < N ) { int a = args . get ( minst . find [ i ] ) ; arglbids [ a ] = i ; } return predict ; }
tr	KEY	public abstract void render ( Graphics og , float alpha ) ;
tr	IDF	@ Override public void addSubId ( Token token , int startPosition ) throws ParsingException { String value = token . getStringAndReset ( ) ; log . debug ( value ) ; this . tempExtQuery = new TempQuery ( value ) ; this . tempExtQuery . startPosition = startPosition ; this . tempExtQuery . startParameter = this . tempMainQuery . parameters . size ( ) ; this . tempMainQuery . tempExtQueries . add ( this . tempExtQuery ) ; }
tr	IDF	public void setListener ( ActionListener listener ) { this . listener = listener ; }
tr	KEY	@ Override public void putNewLine ( ) throws ParsingException { throw new NeedValueException ( ";" ) ; }
tr	KEY	public int getStart ( ) { return start ; }
tr	IDF	public static void main ( String [ ] args ) { boolean [ ] primes = new boolean [ 100000000 ] ; for ( int i = 2 ; i < 100000000 ; i ++ ) primes [ i ] = true ; for ( int i = 2 ; i < 100000000 ; i ++ ) if ( primes [ i ] ) for ( int j = 2 ; i * j < 100000000 ; j ++ ) primes [ i * j ] = false ; ArrayList < Integer > primeList = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < 100000000 ; i ++ ) if ( primes [ i ] ) primeList . add ( i ) ; long startTime = System . currentTimeMillis ( ) ; long sum = 0 ; for ( int i = 2 ; i < primeList . size ( ) ; i ++ ) { ArrayList < long > factorialMods = new ArrayList < long > ( ) ; factorialMods . add ( 1 ) ; int currentPrime = primeList . get ( i ) ; System . out . println ( i ) ; long n = 1 ; for ( int j = 1 ; j < currentPrime ; j ++ ) { n *= j ; n %= currentPrime ; factorialMods . add ( n ) ; } long currentSum = 0 ; for ( int j = factorialMods . size ( ) - 5 ; j < factorialMods . size ( ) ; j ++ ) currentSum += factorialMods . get ( j ) ; sum += currentSum % currentPrime ; } System . out . println ( "Answer: " + sum ) ; long endTime = System . currentTimeMillis ( ) ; long totalTime = endTime - startTime ; System . out . println ( "time: " + totalTime ) ; }
tr	KEY	public ASTSaveStmt ( ) { }
tr	IDF	protected static ExecutorService createService ( ThreadFactory factory ) throws IllegalArgumentException { if ( factory == null ) throw new IllegalArgumentException ( "factory cannot be null" ) ; return Executors . newFixedThreadPool ( THREAD_COUNT , factory ) ; }
tr	IDF	@ Override public void setReceiveSocket ( Socket receiveSocket ) { this . listenerThread . setSocket ( receiveSocket ) ; }
tr	KEY	public static PointEvent doubleHit ( int number ) { return new HitEvent ( number , 2 ) ; }
tr	IDF	@ Override public void init ( ) { setSize ( getSize ( ) ) ; final Button button_change = new Button ( "Change" ) ; Button button_run = new Button ( "Run" ) ; Button button_clear = new Button ( "Clear" ) ; Button button_save = new Button ( "Save" ) ; Button button_load = new Button ( "Load" ) ; final TextField input_line = new TextField ( DEFAULT_PARAM ) ; BorderLayout layout = new BorderLayout ( ) ; this . setLayout ( layout ) ; Panel p = new Panel ( ) ; GridBagLayout gridbag = new GridBagLayout ( ) ; p . setLayout ( gridbag ) ; GridBagConstraints c = new GridBagConstraints ( ) ; c . fill = GridBagConstraints . HORIZONTAL ; c . weightx = 1 ; c . gridwidth = 1 ; gridbag . setConstraints ( button_change , c ) ; gridbag . setConstraints ( button_run , c ) ; gridbag . setConstraints ( button_clear , c ) ; gridbag . setConstraints ( button_save , c ) ; gridbag . setConstraints ( button_load , c ) ; c . weightx = 5 ; c . gridwidth = 5 ; gridbag . setConstraints ( input_line , c ) ; button_change . setBackground ( colors [ current_value ] ) ; p . add ( button_change ) ; p . add ( button_run ) ; p . add ( button_clear ) ; p . add ( button_save ) ; p . add ( button_load ) ; p . add ( input_line ) ; this . add ( p , BorderLayout . SOUTH ) ; button_change . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { button_change_clicked ( ) ; button_change . setBackground ( colors [ current_value ] ) ; } } ) ; button_run . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { button_run_clicked ( input_line . getText ( ) ) ; } } ) ; button_clear . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { button_clear_clicked ( ) ; } } ) ; button_save . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { button_save_clicked ( input_line . getText ( ) ) ; } } ) ; button_load . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { button_load_clicked ( ) ; } } ) ; input_line . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { button_run_clicked ( input_line . getText ( ) ) ; } } ) ; this . enableEvents ( AWTEvent . MOUSE_EVENT_MASK ) ; }
tr	IDF	public FTreeMap ( Map < ? extends Key , ? extends Val > map , Comparator < ? super Key > c ) { comp = ( Comparator < Key > ) c ; tree = fromMap ( ( Map < Key , Val > ) map ) ; dflt = null ; }
tr	KEY	public final void setMonths ( int months ) { if ( ( months >= 0 ) && ( months < 60 ) ) { this . months = months ; } }
tr	IDF	@ Override public T getKey ( ) { return next ; }
tr	IDF	public DriveForward ( int dist , SpeedControllerPID a ) { this . a = a ; requires ( a ) ; goal = dist ; profile = new RampProfile ( goal , goal / 10 ) ; }
tr	IDF	public static void main ( String [ ] args ) { try { LCARSLogger . setup ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; throw new RuntimeException ( "Problems with creating the log files" ) ; } JFrame f = new JFrame ( "LCARS Component Test" ) ; f . addWindowListener ( new WindowAdapter ( ) { public void windowClosing ( WindowEvent e ) { System . exit ( 0 ) ; } } ) ; JPanel panel = new JPanel ( ) ; panel . setPreferredSize ( new Dimension ( 1920 , 1080 ) ) ; panel . setLayout ( null ) ; panel . setBackground ( Color . black ) ; LCARSTime < = new LCARSTime ( 500 , 700 , LCARSTime . TIME , 100 , LCARS . EF_TITLE | LCARS . EC_ORANGE | LCARS . ES_LABEL_C ) ; panel . add ( < ) ; < . setMode ( LCARSTime . default ) ; LCARSCorner lc = new LCARSCorner ( 10 , 10 , 1490 , LCARS . EC_ORANGE | LCARS . ES_SHAPE_NW | LCARS . ES_LABEL_NE | LCARS . ES_STATIC ) ; lc . setText ( "Login Panel Header" ) ; lc . setName ( "Login Panel Header" ) ; panel . add ( lc ) ; lc = new LCARSCorner ( 10 , 200 , 1490 , LCARS . EC_BLUE | LCARS . ES_SHAPE_SW | LCARS . ES_LABEL_NE | LCARS . ES_STATIC ) ; lc . setText ( "Login Panel 2" ) ; lc . setName ( "Login Panel 2" ) ; panel . add ( lc ) ; lc = new LCARSCorner ( 10 , 400 , 1490 , LCARS . EC_D_BLUE | LCARS . ES_SHAPE_NE | LCARS . ES_LABEL_NE | LCARS . ES_STATIC ) ; lc . setText ( "Login Panel 3" ) ; lc . setName ( "Login Panel 3" ) ; panel . add ( lc ) ; lc = new LCARSCorner ( 10 , 600 , 1490 , LCARS . EC_L_BLUE | LCARS . ES_SHAPE_SE | LCARS . ES_LABEL_NE | LCARS . ES_STATIC ) ; lc . setText ( "Login Panel 4" ) ; lc . setName ( "Login Panel 4" ) ; panel . add ( lc ) ; LCARSRectangle lr = new LCARSRectangle ( 200 , 50 , 200 , 100 , LCARS . ES_RECT_RND | LCARS . ES_STATIC ) ; panel . add ( lr ) ; lr = new LCARSRectangle ( 500 , 50 , 200 , 100 , LCARS . ES_RECT_RND_E | LCARS . ES_STATIC ) ; panel . add ( lr ) ; lr = new LCARSRectangle ( 800 , 50 , 200 , 100 , LCARS . ES_RECT_RND_W | LCARS . ES_STATIC ) ; panel . add ( lr ) ; lr = new LCARSRectangle ( 1100 , 50 , 200 , 100 , LCARS . ES_STATIC ) ; panel . add ( lr ) ; LCARSButton lb = new LCARSButton ( "Test Button" , 200 , 450 , LCARS . EF_BUTTON | LCARS . ES_RECT_RND | LCARS . EC_ORANGE ) ; lb . setName ( "Test Button" ) ; panel . add ( lb ) ; lb = new LCARSButton ( "Test Button 2" , 500 , 450 , LCARS . EF_BUTTON | LCARS . ES_RECT_RND_W | LCARS . EC_ORANGE ) ; lb . setName ( "Test Button 2" ) ; panel . add ( lb ) ; lb = new LCARSButton ( "Test Button 3" , 800 , 450 , LCARS . EF_BUTTON | LCARS . ES_RECT_RND_E | LCARS . EC_ORANGE ) ; lb . setName ( "Test Button 3" ) ; panel . add ( lb ) ; lb = new LCARSButton ( "Test Button 4" , 1100 , 450 , LCARS . EF_BUTTON | LCARS . EC_ORANGE ) ; lb . setName ( "Test Button 4" ) ; panel . add ( lb ) ; LCARSCalendarPane lcp = new LCARSCalendarPane ( 20 , 700 , LCARS . EF_BODY ) ; panel . add ( lcp ) ; f . getContentPane ( ) . add ( panel ) ; f . setSize ( new Dimension ( 1200 , 800 ) ) ; f . setVisible ( true ) ; }
tr	IDF	public void mouseReleased ( java . awt . event . MouseEvent evt ) { mainMenuBtnMouseReleased ( evt ) ; }
tr	KEY	public void river ( ) { this . addCardInTable ( ) ; }
tr	KEY	public abstract void putSubId ( ) throws ParsingException ;
tr	KEY	public int getMaxDamage ( ) { return maxDamage ; }
tr	KEY	public int getId ( ) { return id ; }
tr	KEY	public int getMerchantId ( ) { return merchantId ; }
tr	IDF	private static ContactRelation CheckContactAngular ( ABObject obs1 , ABObject obs2 ) { if ( obs1 . shape != ABShape . Circle && obs2 . shape != ABShape . Circle ) { Rect ob1 = ( Rect ) obs1 ; Rect ob2 = ( Rect ) obs2 ; int [ ] ob1_x = null ; int [ ] ob2_x = null ; int [ ] ob1_y = null ; int [ ] ob2_y = null ; List < Point > points1 = new ArrayList < Point > ( ) ; List < Point > points2 = new ArrayList < Point > ( ) ; if ( ob1 . IsAngular ( ) && ob2 . IsAngular ( ) ) { ob1_x = ob1 . p . xpoints ; ob2_x = ob2 . p . xpoints ; ob1_y = ob1 . p . ypoints ; ob2_y = ob2 . p . ypoints ; } else if ( ob1 . IsAngular ( ) && ! ob2 . IsAngular ( ) ) { ob1_x = ob1 . p . xpoints ; ob1_y = ob1 . p . ypoints ; ob2_x = ob2 . GetBoundX ( ) ; ob2_y = ob2 . GetBoundY ( ) ; } else if ( ! ob1 . IsAngular ( ) && ob2 . IsAngular ( ) ) { ob1_x = ob1 . GetBoundX ( ) ; ob1_y = ob1 . GetBoundY ( ) ; ob2_x = ob2 . p . xpoints ; ob2_y = ob2 . p . ypoints ; } for ( int i = 0 ; i < ob1_x . length ; i ++ ) { points1 . add ( new Point ( ob1_x [ i ] , ob1_y [ i ] ) ) ; } for ( int i = 0 ; i < ob2_x . length ; i ++ ) { points2 . add ( new Point ( ob2_x [ i ] , ob2_y [ i ] ) ) ; } List < LineEquation > ob1LineEquations = MathFunctions . objectLineEquations ( points1 ) ; List < LineEquation > ob2LineEquations = MathFunctions . objectLineEquations ( points2 ) ; ContactRelation cr1 = CheckLineEquations ( ob2_x , ob2_y , ob1LineEquations ) ; ContactRelation cr2 = CheckLineEquations ( ob1_x , ob1_y , ob2LineEquations ) ; if ( cr1 != ContactRelation . null ) return cr1 ; if ( cr2 != ContactRelation . null ) return cr2 ; int size = 0 ; if ( ob1_x . length > ob2_x . length ) size = ob1_x . length ; else size = ob2_x . length ; for ( int i = 0 ; i < size ; i ++ ) { if ( i < ob1_x . length ) { if ( Arrays . asList ( ob2_x ) . contains ( ob1_x [ i ] ) && Arrays . asList ( ob2_y ) . contains ( ob1_y [ i ] ) ) return ContactRelation . POINT_TO_POINT ; } if ( i < ob2_x . length ) { if ( Arrays . asList ( ob1_x ) . contains ( ob2_x [ i ] ) && Arrays . asList ( ob1_y ) . contains ( ob2_y [ i ] ) ) return ContactRelation . POINT_TO_POINT ; } } } else return ContactRelation . SURFACE_TO_SURFACE ; return ContactRelation . null ; }
tr	IDF	public static List < String [ ] > emotionClassify ( String ttpath ) { try { List < String [ ] > list = new ArrayList < > ( ) ; LibSVM m_classifier = new LibSVM ( ) ; String [ ] options = weka . core . Utils . splitOptions ( "-S 0 -K 0 -D 3 -G 0.0078125 -R 0.0 -N 0.5 -M 40.0 -C 0.1 -E 0.001 -P 0.1 -B" ) ; m_classifier . setOptions ( options ) ; File inputFile = new File ( ttpath ) ; ArffLoader atf = new ArffLoader ( ) ; atf . setFile ( inputFile ) ; Instances instancesTest = atf . getDataSet ( ) ; instancesTest . setClassIndex ( 0 ) ; instancesTest . deleteStringAttributes ( ) ; instancesTest . setClassIndex ( 0 ) ; ObjectInputStream ois = new ObjectInputStream ( new FileInputStream ( "weiboSVM.model" ) ) ; Classifier cls = ( Classifier ) ois . readObject ( ) ; ois . close ( ) ; Evaluation eval = new Evaluation ( instancesTest ) ; eval . evaluateModel ( cls , instancesTest ) ; System . out . println ( eval . toSummaryString ( "=== Summary ===" , false ) ) ; System . out . println ( eval . toClassDetailsString ( ) ) ; System . out . println ( eval . toMatrixString ( "=== Confusion Matrix ===" ) ) ; int k = 0 ; String emotion [ ] = { "happiness" , "like" , "anger" , "sadness" , "fear" , "disgust" , "surprise" , "none" } ; while ( k < instancesTest . numInstances ( ) ) { list . add ( new String [ ] { emotion [ ( int ) cls . classifyInstance ( instancesTest . instance ( k ) ) ] , double . toString ( cls . distributionForInstance ( instancesTest . instance ( k ) ) [ ( int ) cls . classifyInstance ( instancesTest . instance ( k ) ) ] ) } ) ; k ++ ; } return list ; } catch ( IOException e ) { e . printStackTrace ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } return null ; }
tr	IDF	private void btnOtraActionPerformed ( java . awt . event . ActionEvent evt ) { otra . setEnabled ( true ) ; promocion . setSelectedIndex ( 7 ) ; promocion . setEnabled ( false ) ; }
tr	IDF	public void setUrl ( String value ) { this . url = value ; }
tr	KEY	@ Override public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( ) != obj . getClass ( ) ) { return false ; } final UserBuying other = ( UserBuying ) obj ; if ( this . family != other . family ) { return false ; } return true ; }
tr	IDF	public RegistroMedicamentos ( ) { initComponents ( ) ; if ( ! Beans . isDesignTime ( ) ) { entityManager . getTransaction ( ) . begin ( ) ; } }
tr	KEY	public void run ( ) { convertFiles ( ) ; }
tr	IDF	public void call ( RxWebSocket s ) { System . out . println ( "WebSocket:connected" ) ; assertSingle ( s . writeAsTextFrame ( Observable . from ( seq ) ) , 5 ) ; assertSequenceThenComplete ( s . asObservable ( ) , new Buffer ( "eeny" ) , new Buffer ( "meeny" ) , new Buffer ( "miny" ) , new Buffer ( "moe" ) ) ; }
tr	KEY	@ AfterMethod public void tearDownMethod ( ) throws Exception { }
tr	KEY	public int getY ( ) { return y ; }
tr	IDF	public boolean checkVocabulary ( String text ) { if ( keywordList == null ) { initKeywordList ( ) ; } KWSeeker kw1 = KWSeeker . getInstance ( keywordList ) ; Set < String > s = kw1 . findWords ( text ) ; if ( s . size ( ) == 0 ) { return false ; } logger . info ( "antispam:\u53D1\u73B0\u90AE\u4EF6\u6B63\u6587\u5B58\u5728\u654F\u611F\u8BCD\uFF1A" ) ; for ( Iterator iterator = s . iterator ( ) ; iterator . hasNext ( ) ; ) { String string = ( String ) iterator . next ( ) ; logger . info ( "antispam:" + string ) ; } return true ; }
tr	KEY	private void createActions ( ) { }
tr	IDF	AttendantAttributeTypeCode ( int id ) { this . id = id ; }
tr	KEY	public void setAssignedTo ( User assignedTo ) { if ( assignedTo == null ) { throw new IllegalArgumentException ( "\"Assigned to\" user cannot be null!" ) ; } this . assignedTo = assignedTo ; }
tr	IDF	public void setCurrentProfile ( String username ) { LOGGER . log ( Level . INFO , "Setting current profile to: " + username ) ; if ( ! profiles . containsKey ( username ) ) { System . out . println ( "Tried to set current profile to one that doesn't exist." ) ; return ; } currentProfile = profiles . get ( username ) ; }
tr	IDF	public ClientTableModel ( ) { listClients = new ClientDAO ( ) . findAll ( ) ; }
tr	IDF	public void setTransporteur ( TrasporteurBean transporteur ) { this . transporteur = transporteur ; }
tr	IDF	public void construct ( ) { this . aspects . add ( new CaveEntrance ( World . seForest ) ) ; this . aspects . add ( new Tunnel ( World . jabberwockyLair ) ) ; this . droppedItems . add ( new Bone ( ) ) ; return ; }
tr	KEY	public void setTagID ( long tagID ) { this . tagID = tagID ; }
tr	IDF	public void ancestorAdded ( javax . swing . event . AncestorEvent evt ) { campo_lista2AncestorAdded ( evt ) ; }
tr	KEY	public static void setDirectionToLeft ( ) { InfoCenter . sentido = 0 ; }
tr	IDF	public void filter ( byte [ ] samples , int offset , int length ) { for ( int i = 0 ; i < filters . length ; i ++ ) { filters [ i ] . filter ( samples , offset , length ) ; } }
tr	IDF	public boolean canMoveUp ( AbstractBeanTreeNode selectedNode ) { AbstractBeanTreeNode parentNode = ( AbstractBeanTreeNode ) selectedNode . getParent ( ) ; if ( null != parentNode ) { int indexInParent = this . getIndexOfChild ( parentNode , selectedNode ) ; return ( indexInParent > 0 ) ; } return false ; }
tr	IDF	private void mainMenuBtnMouseReleased ( java . awt . event . MouseEvent evt ) { this . dispose ( ) ; TicTacToeUIApp . getApplication ( ) . getMainFrame ( ) . setVisible ( true ) ; }
tr	KEY	public abstract boolean pressSpace ( ) ;
tr	KEY	@ Override public void destroy ( ) { }
tr	IDF	@ BeforeClass public static void setUpClass ( ) throws Exception { ApplicationContext ctx = new AnnotationConfigApplicationContext ( AppConfig . class ) ; e = ( Equipment ) ctx . getBean ( "Inheritance" ) ; e . setEquipmentName ( "Canon D900" ) ; }
tr	IDF	private void closeGame ( ) { _boardController . clear_gridpane ( ) ; _boardController . clear_pieceTable ( ) ; _game = null ; }
tr	KEY	public int size ( ) { return FLinkedHashMap . this . size ( ) ; }
tr	IDF	@ Override public String toString ( ) { return "x = " + x + "  y = " + y ; }
tr	KEY	public int getCanEqui_Entrega ( ) { return CanEqui_Entrega ; }
tr	KEY	public void unload ( ) { }
tr	KEY	public int getSize ( ) { return size ; }
tr	IDF	FSet < Elt > union ( Collection < ? extends Elt > coll ) ;
tr	IDF	private void reset ( ) { outputStream = new ByteArrayOutputStream ( ) ; document = new Document ( PageSize . A5 , 36 , 72 , 108 , 180 ) ; try { writer = PdfWriter . getInstance ( document , outputStream ) ; document . open ( ) ; PdfContentByte pcb = writer . getDirectContentUnder ( ) ; graphics2D = pcb . createGraphics ( 640 , 480 ) ; } catch ( Exception e ) { System . out . println ( "Exception Thrown in PDFG2DFileP " + e . toString ( ) ) ; } }
tr	IDF	public List < String > getRpl ( ) { if ( rpl == null ) { rpl = new ArrayList < String > ( ) ; } return this . rpl ; }
tr	IDF	public ArrayList < PokerHandEvaluation > finishGame ( ) { ArrayList < PokerPlayer > playersPlaying = this . getPlayingPlayers ( ) ; ArrayList < PokerHandEvaluation > winners = new ArrayList < PokerHandEvaluation > ( ) ; if ( playersPlaying . size ( ) > 1 ) { ArrayList < PokerHandEvaluation > gameResult = new ArrayList < PokerHandEvaluation > ( ) ; for ( PokerPlayer player : playersPlaying ) { PokerHandEvaluation handEvaluation = HandEvaluator . getBestHand ( player , this . getCommunitaryCards ( ) ) ; gameResult . add ( handEvaluation ) ; } ArrayList < PokerHandEvaluation > potentialWinners = HandEvaluator . getWinners ( gameResult ) ; if ( potentialWinners . size ( ) > 1 ) { winners = TieEvaluator . getWinners ( potentialWinners ) ; int totalForEachPlayer = this . getPot ( ) / winners . size ( ) ; for ( PokerHandEvaluation winner : winners ) { PokerPlayer player = winner . getPlayer ( ) ; int total = totalForEachPlayer + player . getBalance ( ) ; player . setBalance ( total ) ; } } else if ( potentialWinners . size ( ) == 1 ) { PokerHandEvaluation winner = potentialWinners . get ( 0 ) ; int total = this . getPot ( ) + winner . getPlayer ( ) . getBalance ( ) ; winner . getPlayer ( ) . setBalance ( total ) ; winners . add ( winner ) ; } } else if ( playersPlaying . size ( ) == 1 ) { PokerPlayer winner = playersPlaying . get ( 0 ) ; int total = this . getPot ( ) + winner . getBalance ( ) ; winner . setBalance ( total ) ; winners . add ( new PokerHandEvaluation ( winner , winner . getHand ( ) ) ) ; } return winners ; }
tr	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { eliminarButtonActionPerformed ( evt ) ; }
tr	IDF	public void move ( ) { if ( y > world . level . getHeight ( ) * 16 + 16 && deadTime == 0 ) { die ( ) ; spriteContext . removeSprite ( this ) ; return ; } if ( carried ) { world . checkShellCollide ( this ) ; return ; } if ( deadTime > 0 ) { deadTime -- ; if ( deadTime == 0 ) { deadTime = 1 ; for ( int i = 0 ; i < 8 ; i ++ ) { world . addSprite ( new Sparkle ( ( int ) ( x + Math . random ( ) * 16 - 8 ) + 4 , ( int ) ( y - Math . random ( ) * 8 ) + 4 , ( float ) ( Math . random ( ) * 2 - 1 ) , ( float ) Math . random ( ) * - 1 , 0 , 1 , 5 ) ) ; } spriteContext . removeSprite ( this ) ; } x += xa ; y += ya ; ya *= 0.95 ; ya += 1 ; return ; } if ( facing != 0 ) anim ++ ; float sideWaysSpeed = 11f ; if ( xa > 2 ) { facing = 1 ; } if ( xa < - 2 ) { facing = - 1 ; } xa = facing * sideWaysSpeed ; if ( facing != 0 ) { world . checkShellCollide ( this ) ; } xFlipPic = facing == - 1 ; runTime += ( Math . abs ( xa ) ) + 5 ; xPic = ( anim / 2 ) % 4 + 3 ; if ( ! move ( xa , 0 ) ) { world . sound . play ( Art . samples [ Art . SAMPLE_SHELL_BUMP ] , this , 1 , 1 , 1 ) ; facing = - facing ; } onGround = false ; move ( 0 , ya ) ; ya *= 0.85f ; if ( onGround ) { xa *= GROUND_INERTIA ; } else { xa *= AIR_INERTIA ; } if ( ! onGround ) { ya += 2 ; } }
tr	IDF	@ Override public void actionPerformed ( ActionEvent e ) { if ( ! judgePort ( ) ) { initResultBar ( false , "Please Input correct port No. and it must be number!" ) ; return ; } String port = portField . getText ( ) ; list = new ArrayList < String > ( ) ; list . add ( "netstat" ) ; list . add ( "-ano" ) ; String input = null ; try { lookingForProcess = new LookingForProcess ( ) ; input = lookingForProcess . build ( list ) ; } catch ( IOException e1 ) { e1 . printStackTrace ( ) ; } List < NetWork > netWorks = lookingForProcess . looking ( lookingForProcess . box ( input ) , port ) ; if ( netWorks . size ( ) <= 0 ) { initResultBar ( false , "No Process was found!" ) ; return ; } StringBuffer sb = new StringBuffer ( ) ; sb . append ( "Following are all of the port(" + port + ") which are using...\r\n\r\n" ) ; sb . append ( "Proto" + "\t" + "Local_Address" + "\t" + "Foreign_Address" + "\t" + "State" + "\t" + "PID\r\n" ) ; pid = netWorks . get ( 0 ) . getPid ( ) ; for ( NetWork netWork : netWorks ) { sb . append ( netWork . getProto ( ) + "\t" + netWork . getLocalAddress ( ) + "\t" + netWork . getForeignAddress ( ) + "\t" + netWork . getState ( ) + "\t" + netWork . getPid ( ) + "\r\n" ) ; } sb . append ( "\r\n\r\nFollowing are all the queried Running processes...\r\n\r\n" ) ; try { process = Runtime . getRuntime ( ) . exec ( "cmd /c tasklist|findstr " + netWorks . get ( 0 ) . getPid ( ) ) ; String runningProcess = lookingForProcess . build ( process ) ; sb . append ( runningProcess + "\r\n" ) ; } catch ( IOException e1 ) { initResultBar ( false , "Error Occured\r\n-----------------\r\n" + e1 . getMessage ( ) ) ; } initResultBar ( true , sb . toString ( ) ) ; }
tr	IDF	public void cycleByNewFor ( Set < String > set ) { for ( String str : set ) { System . out . println ( str ) ; } }
tr	IDF	public void initialize ( ) { WakeupOnAWTEvent wAWTEvent = new WakeupOnAWTEvent ( AWTEvent . MOUSE_EVENT_MASK ) ; WakeupOnAWTEvent wAWTEvent2 = new WakeupOnAWTEvent ( AWTEvent . MOUSE_MOTION_EVENT_MASK ) ; WakeupCriterion [ ] conditions = { wAWTEvent , wAWTEvent2 } ; wEvents = new WakeupOr ( conditions ) ; wakeupOn ( wEvents ) ; buttonsInUse = 0 ; button1Pressed = false ; button2Pressed = false ; button3Pressed = false ; }
tr	IDF	public String getText ( ) { return textField . getText ( ) ; }
tr	KEY	protected void interrupted ( ) { }
tr	IDF	@ Override public Object execute ( HttpServletRequest request , HttpServletResponse response ) throws Exception { Contexto oContexto = ( Contexto ) request . getAttribute ( "contexto" ) ; oContexto . setVista ( "jsp/entrada/list.jsp" ) ; oContexto . setClase ( "entrada" ) ; oContexto . setMetodo ( "list" ) ; oContexto . setFase ( "1" ) ; EntradaList1 oOperacion = new EntradaList1 ( ) ; return oOperacion . execute ( request , response ) ; }
tr	KEY	protected void interrupted ( ) { }
tr	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { getFbObjectsjMenuItemActionPerformed ( evt ) ; }
tr	IDF	public LRUCache ( final int capacity ) { map = new LinkedHashMap < Integer , Integer > ( capacity , 0.75f , true ) { private static final long serialVersionUID = 1 ; @ Override protected boolean removeEldestEntry ( Map . Entry < Integer , Integer > eldest ) { return size ( ) > capacity ; } } ; }
tr	KEY	private void handleGameOver ( ) { }
tr	IDF	static Object less ( Object subtree , Object elt , int ehash ) { if ( subtree == null ) return null ; else if ( ! ( subtree instanceof Node ) ) { Object [ ] ary = ( Object [ ] ) subtree ; int bin_srch_res = binarySearch ( ary , ehash ) ; int found = bin_srch_res & BIN_SEARCH_FOUND_MASK ; int idx = bin_srch_res >> BIN_SEARCH_INDEX_SHIFT ; if ( found == BIN_SEARCH_FOUND ) { Object e = ary [ idx ] ; if ( eql ( elt , e ) ) return remove ( ary , idx ) ; else return subtree ; } else return subtree ; } else { Node node = ( Node ) subtree ; Object nelt = node . element ; int nhash = node . ehash ; if ( ehash == nhash ) { if ( ! ( nelt instanceof EquivalentSet ) ) { if ( ! eql ( elt , nelt ) ) return subtree ; else return join ( node . left , node . right ) ; } else { Object diff = equivDiff ( nelt , elt ) ; return buildNode ( diff , ehash , node . left , node . right ) ; } } else if ( ehash < nhash ) { Object new_left = less ( node . left , elt , ehash ) ; if ( new_left == node . left ) return subtree ; else return buildNode ( nelt , nhash , new_left , node . right ) ; } else { Object new_right = less ( node . right , elt , ehash ) ; if ( new_right == node . right ) return subtree ; else return buildNode ( nelt , nhash , node . left , new_right ) ; } } }
tr	KEY	public void sendBroadcast ( ) ;
tr	KEY	public void setInSight ( boolean inSight ) { this . inSight = inSight ; }
tr	KEY	public void setNegLon ( boolean negLon ) { this . negLon = negLon ; }
tr	KEY	public static void end ( ) { world . endOfTheWorld = true ; }
tr	KEY	public static IntervalManager getInstance ( ) { if ( instance == null ) { instance = new IntervalManager ( ) ; } return instance ; }
tr	KEY	public void setOffset ( long value ) { this . offset = value ; }
tr	KEY	protected void rotate ( double angle ) { this . direction += angle ; }
tr	IDF	public boolean checkWin ( IPlayer player ) { int numberOfMatches = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( numberOfMatches = 0 ; numberOfMatches < 3 ; numberOfMatches ++ ) if ( playersPositions [ i ] [ numberOfMatches ] != player ) break ; if ( numberOfMatches == 3 ) return true ; } for ( int j = 0 ; j < 3 ; j ++ ) { for ( numberOfMatches = 0 ; numberOfMatches < 3 ; numberOfMatches ++ ) if ( playersPositions [ numberOfMatches ] [ j ] != player ) break ; if ( numberOfMatches == 3 ) return true ; } for ( numberOfMatches = 0 ; numberOfMatches < 3 ; numberOfMatches ++ ) if ( playersPositions [ numberOfMatches ] [ numberOfMatches ] != player ) break ; if ( numberOfMatches == 3 ) return true ; for ( numberOfMatches = 0 ; numberOfMatches < 3 ; numberOfMatches ++ ) if ( playersPositions [ numberOfMatches ] [ 2 - numberOfMatches ] != player ) break ; if ( numberOfMatches == 3 ) return true ; return false ; }
tr	KEY	public int getWidth ( ) { return mWidth ; }
tr	IDF	public void loadClient ( View view ) throws Exception { client . clear ( ) ; DAOFactory factory = DAOFactory . getFactory ( DAOFactory . MYSQL ) ; TableDAO itemDAO = factory . getCategoryDAO ( ) ; ( ( dbDAO ) itemDAO ) . setJob ( Job . SELECT ) ; ( ( dbDAO ) itemDAO ) . setTable ( "klienci" ) ; ( ( dbDAO ) itemDAO ) . setItself ( this ) ; ( ( dbDAO ) itemDAO ) . setView ( view ) ; ( ( dbDAO ) itemDAO ) . execute ( ) ; }
tr	KEY	public int getLogCount ( ) { return this . getLogs ( ) . size ( ) ; }
tr	IDF	@ Override public void windowActivated ( WindowEvent arg0 ) { }
tr	IDF	public void actionPerformed ( ActionEvent e ) { if ( cursorMode ) { select ( ) ; display . repaint ( ) ; } else { log . println ( "Invalid key" ) ; } }
tr	KEY	public void setPcp_DevCompra ( double Pcp_DevCompra ) { this . Pcp_DevCompra = Pcp_DevCompra ; }
tr	KEY	public UsuarioDAOTest ( ) { }
tr	KEY	public String tableName ( ) { return "FUNCTIONS" ; }
tr	IDF	@ Override public MLoc clone ( ) { ArrayList < Loc > l = new ArrayList < Loc > ( ) ; for ( int i = 0 ; i < locs . size ( ) ; i ++ ) { l . add ( new Loc ( locs . get ( i ) . x , locs . get ( i ) . y ) ) ; } MLoc ml = new MLoc ( locs . size ( ) ) ; ml . locs = l ; return ml ; }
tr	IDF	void setTargetLocale ( String tgtLang ) { this . tgtLang = tgtLang ; }
tr	KEY	public void reverse ( ) ;
tr	IDF	private FHashSet ( int x , Object _tree ) { tree = _tree ; }
tr	IDF	public void createGUI ( ) { setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ) ; JPanel panel = new JPanel ( ) ; panel . setLayout ( new BorderLayout ( ) ) ; panel . setFocusable ( true ) ; label = new JLabel ( ) ; label . setFont ( new Font ( "Calibri" , Font . PLAIN , 20 ) ) ; label . setHorizontalAlignment ( JLabel . CENTER ) ; panel . addKeyListener ( new KeyAdapter ( ) { public void keyReleased ( KeyEvent e ) { label . setText ( e . getKeyText ( e . getKeyCode ( ) ) ) ; } } ) ; panel . add ( label , BorderLayout . CENTER ) ; setPreferredSize ( new Dimension ( 200 , 200 ) ) ; getContentPane ( ) . add ( panel ) ; }
tr	KEY	public int getNumFac_Compra ( ) { return NumFac_Compra ; }
tr	KEY	public int getCount ( ) { return textMapping . size ( ) ; }
tr	KEY	public void setWorstHole ( int worstHole ) { this . worstHole = worstHole ; }
tr	KEY	public long getTimestamp ( ) { return timestamp ; }
tr	IDF	FSet < Val > range ( ) ;
tr	KEY	public void reset ( ) ;
tr	IDF	private void jPContrasenaKeyPressed ( java . awt . event . KeyEvent evt ) { Validaciones . CantidadCaracteres ( jPContrasena , 6 ) ; }
tr	KEY	public long getId ( ) { return id ; }
tr	IDF	public PaymentRequest setOrderNumber ( String order_number ) { this . orderNumber = order_number ; return this ; }
tr	IDF	public LinkedList < XmlQueryParam > getQueryParams ( ) { return queryParams ; }
tr	IDF	public static List < Pattern > loadFromDisk ( String filename ) throws IOException , PatternFormatException { return load ( new FileReader ( filename ) ) ; }
tr	IDF	void registerCommand ( String name , Command command ) ;
tr	IDF	public String getMove ( int client ) throws IOException { return recvString ( client ) ; }
tr	IDF	public void rotate ( ) { int [ ] xx = { 1 , 2 , 1 , 0 } ; int [ ] yy = { 2 , 1 , 0 , 1 } ; TileType temp = tileCells [ xx [ xx . length - 1 ] ] [ yy [ yy . length - 1 ] ] ; for ( int i = xx . length - 1 ; i > 0 ; -- i ) tileCells [ xx [ i ] ] [ yy [ i ] ] = tileCells [ xx [ i - 1 ] ] [ yy [ i - 1 ] ] ; tileCells [ xx [ 0 ] ] [ yy [ 0 ] ] = temp ; }
tr	KEY	public int [ ] getPlayerIDs ( ) { return playerIDs ; }
tr	KEY	public void setNumOriginalSpaces ( int numOfSpaces ) { this . numOriginalSpaces = numOfSpaces ; }
tr	IDF	private JTabbedPane getFP ( ) { JTabbedPane tabbedPhases = new JTabbedPane ( ) ; for ( int i = 0 ; i < xs . length ; i ++ ) { for ( int j = i + 1 ; j < xs . length ; j ++ ) { String name = "x" + ( j + 1 ) + "-x" + ( i + 1 ) ; FigurePanel phase = new FigurePanel ( getName ( ) + " " + name , "x" + ( j + 1 ) , "x" + ( i + 1 ) ) ; phase . setMark ( true ) ; if ( xs [ j ] . x . size ( ) > 0 ) { Figure f = new Figure ( xs [ j ] . x , xs [ i ] . x ) ; f . setLineWidth ( 0.2f ) ; phase . add ( f ) ; } tabbedPhases . add ( phase , name ) ; } } return tabbedPhases ; }
tr	KEY	public void setLockedBySMTP ( boolean isLockedBySMTP ) { this . isLockedBySMTP = isLockedBySMTP ; }
tr	IDF	public String makeNewId ( String aprefix , int alen ) { return ( makeNewId ( "" , aprefix , alen ) ) ; }
tr	KEY	public double getD ( ) { return kD . getDouble ( ) ; }
tr	IDF	private boolean tentative ( int ii , int jj , int value , int depth ) { if ( depth > 100 ) throw new RuntimeException ( "Search Depth too high. Algorithm is wrong." ) ; grid . set ( ii , jj , value ) ; int minOpt = findNextCell ( ) ; if ( minOpt < 0 ) { if ( ! quiet ) { grid . print ( ) ; } if ( grid . isFilled ( ) ) { if ( ! quiet ) { System . out . println ( "Success." ) ; } solution = new Grid ( grid ) ; solutions ++ ; solutionIndex . add ( solution . toIndexString ( ) ) ; return true ; } if ( ! quiet ) { System . out . println ( "Subtree unsuccessful." ) ; } return false ; } int iii = minOpt / 10 ; int jjj = minOpt % 10 ; int block = ( iii / 3 ) * 3 + jjj / 3 ; for ( int k = 1 ; k < 10 ; ++ k ) { boolean contained = grid . blockContains ( block , k ) | grid . rowContains ( iii , k ) | grid . colContains ( jjj , k ) ; if ( ! contained ) { boolean result = tentative ( iii , jjj , k , depth + 1 ) ; if ( result && firstSolutionOnly ) { return true ; } } } grid . set ( ii , jj , 0 ) ; return false ; }
tr	KEY	@ Override public double getValue ( ) { return value ; }
tr	KEY	public byte [ ] getValue ( ) { return value ; }
tr	KEY	public float getuStepDE ( ) { return uStepDE ; }
tr	IDF	public void runGame ( byte deckCount ) { this . deckCount = deckCount ; cardDeck = new Deck ( deckCount ) ; newTurn ( ) ; timer . startTimer ( ) ; }
tr	KEY	public void setSelectedShowLayerCheckbox ( int num ) { switch ( num ) { case 0 : this . showForeground . setSelected ( ! this . showForeground . isSelected ( ) ) ; break ; case 1 : this . showMiddleground . setSelected ( ! this . showMiddleground . isSelected ( ) ) ; break ; case 2 : this . showBackground . setSelected ( ! this . showBackground . isSelected ( ) ) ; break ; default : break ; } }
tr	IDF	public INDIBLOBProperty ( INDIDriver driver , String name , String label , String group , PropertyStates state , PropertyPermissions permission , int timeout ) throws IllegalArgumentException { super ( driver , name , label , group , state , permission , timeout ) ; }
tr	KEY	public synchronized int xgetD4RepeatDelay ( ) { return d4RD ; }
tr	IDF	public void checkEnemy ( int x , int y ) { if ( sprites [ x ] [ y ] != null ) { numEnemies ++ ; difficulty ++ ; if ( this . type != Type . ENEMIES && numEnemies > getCurrentTypeCount ( ) ) { this . type = Type . ENEMIES ; } } }
tr	KEY	public ResultSetMapper getResultSetMapper ( ) { return this . resultSetMapper ; }
tr	KEY	public String getName ( ) { return "" ; }
tr	IDF	public GameChooser ( final GameDisplayPane displayPane ) { this . displayPane = displayPane ; this . images = new Image [ ] { ContentManager . loadImage ( "/common/images/title/HangMan.png" ) , ContentManager . loadImage ( "/common/images/title/Scramble.png" ) , ContentManager . loadImage ( "/common/images/title/BreakOut.png" ) , ContentManager . loadImage ( "/common/images/title/Reversi.png" ) } ; final int width = images [ 0 ] . getWidth ( displayPane ) ; final int height = images [ 0 ] . getHeight ( displayPane ) ; this . clickAreas = new Rectangle [ ] { new Rectangle ( 15 , 0 , width , height ) , new Rectangle ( 163 , 0 , width , height ) , new Rectangle ( 15 , 113 , width , height ) , new Rectangle ( 163 , 113 , width , height ) } ; }
tr	KEY	public RemoveContactsResponse createRemoveContactsResponse ( ) { return new RemoveContactsResponse ( ) ; }
tr	IDF	public static void closeConnection ( Connection connection ) { try { connection . close ( ) ; } catch ( SQLException e ) { } }
tr	KEY	protected abstract void imprimirTabuleiro ( TabuleiroXadrez tabuleiro ) ;
tr	IDF	public void setEnabled ( boolean flag ) { for ( JComponent c : components ) { c . setEnabled ( flag ) ; } }
tr	KEY	public CreateResponse createCreateResponse ( ) { return new CreateResponse ( ) ; }
tr	KEY	public Shield ( ) { this . name = "shield" ; }
tr	IDF	public INDIOneElementNumberProperty ( INDIDriver driver , String name , String label , String group , PropertyStates state , PropertyPermissions permission , double minimum , double maximum , double step , String format , double value ) throws IllegalArgumentException { super ( driver , name , label , group , state , permission ) ; element = new INDINumberElement ( this , name , label , value , minimum , maximum , step , format ) ; }
tr	IDF	public DisplayPlayersPalaceCardsFrame ( JavaPlayer player , HashMap < String , String > imageHash ) { this . imageSourceHashMap = imageHash ; setTitle ( "Your Secret Palace Cards" ) ; setSize ( width , height ) ; setResizable ( false ) ; addKeyListener ( new KeyListener ( ) { @ Override public void keyTyped ( KeyEvent e ) { } @ Override public void keyReleased ( KeyEvent e ) { if ( e . getKeyCode ( ) == 70 ) { dispose ( ) ; } } @ Override public void keyPressed ( KeyEvent e ) { } } ) ; setFocusTraversalKeysEnabled ( false ) ; initPanels ( player ) ; }
tr	IDF	private ExtQuery createExtQuery ( ) { ExtQuery extQuery = new ExtQuery ( id , text , parameters ) ; extQuery . setWhereItStarts ( startPosition , startParameter ) ; return extQuery ; }
tr	KEY	public abstract void putParameter ( ) throws ParsingException ;
tr	KEY	@ Override public void updateModelFromView ( ) { throw new UnsupportedOperationException ( "Not implemented" ) ; }
tr	KEY	public void setHasBigBlind ( boolean hasBigBlind ) { this . hasBigBlind = hasBigBlind ; }
tr	IDF	@ Override public synchronized void onDartMissedPressed ( ) { for ( GameStatusUpdateListener g : listeners ) { try { g . onDartMissedPressed ( ) ; } catch ( RuntimeException e ) { logger . warn ( e . getMessage ( ) , e ) ; } } }
tr	KEY	public String getNom ( ) { return this . nom ; }
tr	IDF	public TanksWorld ( ) { TanksWorld . world = this ; registerPackets ( ) ; registerWorldBoundaries ( ) ; registerColors ( ) ; registerSpawnPoints ( ) ; }
tr	IDF	public HashMap < Character , Armour > getArmours ( ) { return armours ; }
tr	KEY	protected void end ( ) { }
tr	IDF	public void print ( double d , int dec ) { this . out . print ( this . formatDouble ( d , dec ) ) ; }
tr	IDF	@ JsonProperty ( "name" ) public void setName ( String name ) { this . name = name ; }
tr	IDF	private void convertTomp4 ( ) { try { String stringP = "avconv -i final.mpg -strict experimental '" + _outname + "'" ; _builder = new ProcessBuilder ( "/bin/bash" , "-c" , stringP ) ; _builder . directory ( new File ( System . getProperty ( "user.home" ) + "/VAMIX" ) ) ; _builder = _builder . redirectErrorStream ( true ) ; _process = _builder . start ( ) ; _result = _process . waitFor ( ) ; _process . destroy ( ) ; } catch ( IOException | InterruptedException e ) { } }
tr	KEY	public TrajectoryPlanner ( ) { }
tr	IDF	public String toString ( ) { String returnValue = "" ; if ( value != null || ! value . trim ( ) . equals ( "" ) ) { returnValue = "<constante value=\"" + value + "\"/>" ; } return returnValue ; }
tr	KEY	public void setTurn ( int turn ) { this . turn = turn ; }
tr	IDF	Block topBlock ( ) { return ( Block ) blockSizes . peek ( ) ; }
tr	KEY	public int getPaymentNumber ( ) { return paymentNumber ; }
tr	KEY	public final void checkExists ( ) throws FileNotOnDiskException { if ( ! exists ( ) ) handleNotExists ( ) ; }
tr	IDF	public List < Player > getPlayerList ( ) { return players ; }
tr	IDF	@ Override public Iterator < Entry < A , V >> iterator ( ) { return new Iterator < Entry < A , V >> ( ) { private final Iterator < Entry < A , K >> aliasIt = aliasMap . entrySet ( ) . iterator ( ) ; @ Override public boolean hasNext ( ) { return aliasIt . hasNext ( ) ; } @ Override public Entry < A , V > next ( ) { Entry < A , K > alias = aliasIt . next ( ) ; return new AbstractMap . SimpleImmutableEntry < > ( alias . getKey ( ) , backingMap . get ( alias . getValue ( ) ) ) ; } } ; }
tr	KEY	public ScriptSpecificationBuilder lasting ( int seconds ) { this . durationInSeconds = seconds ; return this ; }
tr	KEY	public static void girarDireita ( int valor ) { escreverAcao ( "girarDireita(" + valor + ");" ) ; }
tr	KEY	public double getNumber ( ) { return this . aNumber ; }
tr	KEY	public int getRow ( ) { return row ; }
tr	IDF	public void setSN ( String SN ) { this . SN = SN ; }
tr	IDF	public ServiceException ( String message , Throwable cause ) { super ( message , cause ) ; }
tr	IDF	@ Override public TaskAction getAction ( ) { return TaskAction . CONNECT_REQUEST ; }
tr	IDF	private void search ( ActionEvent e ) { new Search ( this , ( String ) user . get ( Constants . USER_NO ) ) . setVisible ( true ) ; }
tr	KEY	public int read ( int addr ) { return 0 ; }
tr	IDF	public RotateShootingCharacter ( ShootingScene scene , float power ) { super ( scene , power ) ; }
tr	KEY	@ Override public void update ( ) { switch ( gameState ) { case INITIALIZING : handleGameInitializing ( ) ; break ; case PLAYING : handleGamePlaying ( ) ; break ; } }
tr	KEY	public float getWidth ( ) { return this . width ; }
tr	IDF	public Load ( String getChar1 , String getChar2 ) { character1 = getChar1 ; character2 = getChar2 ; }
tr	IDF	private static void exchange ( int [ ] a , int i , int j ) { int swap = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = swap ; }
tr	KEY	public int getId ( ) { return id ; }
tr	KEY	public void agregarele ( String e ) { if ( this . size < this . Maxsize ) { this . lista [ this . size ] = e ; this . size ++ ; } else { throw new Error ( "Lista fuera de rango" ) ; } }
tr	KEY	public WebSearchTag createWebSearchTag ( ) { return new WebSearchTag ( ) ; }
tr	IDF	public String getId ( ) throws XPathExpressionException { return Utilities . selectSingleText ( this . node , "./@c:queryId" , XMLLabels . STANDARD_NAMESPACES ) ; }
tr	KEY	public void setId ( int id ) { this . id = id ; }
tr	IDF	static float [ ] sRGB_to_XYZ ( float [ ] sRGB ) { if ( TRACE ) { System . out . println ( "sRGB: " + Arrays . toString ( sRGB ) ) ; } float x = 0.4124564f * sRGB [ 0 ] + 0.3575761f * sRGB [ 1 ] + 0.1804375f * sRGB [ 2 ] ; float y = 0.2126729f * sRGB [ 0 ] + 0.7151522f * sRGB [ 1 ] + 0.0721750f * sRGB [ 2 ] ; float z = 0.0193339f * sRGB [ 0 ] + 0.1191920f * sRGB [ 1 ] + 0.9503041f * sRGB [ 2 ] ; sRGB [ 0 ] = x ; sRGB [ 1 ] = y ; sRGB [ 2 ] = z ; if ( TRACE ) { System . out . println ( "XYZ: " + Arrays . toString ( sRGB ) ) ; } return sRGB ; }
tr	KEY	public int getGeneration ( ) { return this . generation ; }
tr	IDF	private static EntityManager getEntityManager ( ) { return EMF . get ( ) . createEntityManager ( ) ; }
tr	IDF	public Matrix ( double [ ] [ ] transform ) { for ( int i = 0 ; i < 4 ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { this . set ( j , i , transform [ i ] [ j ] ) ; } } }
tr	IDF	public String toString ( ) { return super . toString ( ) + " " + location + " " + varname ; }
tr	KEY	public boolean getSignal ( ) { return mTVSignal ; }
tr	IDF	@ Override public String getStatement ( ) { return ( getX ( ) + " + " + getY ( ) ) ; }
tr	IDF	private ArrayList < INDIDevice > getDevicesWithIdentifier ( String deviceIdentifier ) { ArrayList < INDIDevice > found = new ArrayList < INDIDevice > ( ) ; for ( int i = 0 ; i < devices . size ( ) ; i ++ ) { INDIDevice d = devices . get ( i ) ; if ( d . isDevice ( deviceIdentifier ) ) { found . add ( d ) ; } } return found ; }
tr	IDF	@ Override public void execute ( ) { Product p ; try { p = new dao . ProductDAO ( ) . getProductByProductID ( itemId ) ; ctx . getUser ( ) . getUserCart ( ) . getItems ( ) . add ( new CartItem ( p , quantity ) ) ; } catch ( SQLException | NamingException e ) { e . printStackTrace ( ) ; } }
tr	KEY	public char nextClean ( ) throws JSONException { for ( ; ; ) { char c = this . next ( ) ; if ( c == 0 || c >   ) { return c ; } } }
tr	KEY	private TextureLoader ( ) { }
tr	KEY	public int getCount ( ) { return count ; }
tr	IDF	private Map < long , Map < long , long >> parse ( File directory ) throws IOException { DBFReader dbr = new DBFReader ( lookupTable ) ; int lookup_column = dbr . columnLookup ( lookupField ) ; int index_column = dbr . columnLookup ( indexField ) ; Map < long , Map < long , long >> sm = new TreeMap < long , Map < long , long >> ( ) ; while ( dbr . hasNextRecord ( ) ) { Object [ ] obj = dbr . nextRecord ( ) ; indexer . put ( ( String ) obj [ lookup_column ] , ( ( Number ) obj [ index_column ] ) . longValue ( ) ) ; } if ( ! directory . exists ( ) ) { System . out . println ( "ERROR:  Directory " + directory + " does not exist." ) ; System . exit ( 0 ) ; } Map < long , long > m ; for ( File f : directory . listFiles ( new EndsWithFilter ( inputExtension ) ) ) { String name = f . getName ( ) . substring ( 0 , f . getName ( ) . lastIndexOf ( "." ) ) ; long where = - 1 ; try { where = indexer . get ( name ) ; } catch ( NullPointerException npe ) { System . out . print ( "No lookup match was found for " + name + " using field " + lookupField + " in " + lookupTable ) ; System . out . println ( " - Continuing..." ) ; continue ; } if ( sm . get ( where ) == null ) { m = new TreeMap < long , long > ( ) ; } else { m = sm . get ( where ) ; } BufferedReader br = new BufferedReader ( new FileReader ( f ) ) ; stk = new StringTokenizer ( br . readLine ( ) , "[{  =}]" ) ; while ( stk . hasMoreTokens ( ) ) { m . put ( long . parseLong ( stk . nextToken ( ) ) , long . parseLong ( stk . nextToken ( ) ) ) ; } sm . put ( where , m ) ; br . close ( ) ; } return sm ; }
tr	KEY	public BusinessProfile_InsidePeer withRating ( long rating ) { this . rating = rating ; return this ; }
tr	IDF	public ArrayList < ArrayList < JavaPlayer >> getPalaceRanks ( JavaCell palace , LinkedList < Developer > gameDevelopers ) { ArrayList < JavaCell > city = getCityFromRootCell ( palace , visitedVillages ) ; HashMap < JavaPlayer , Integer > scores = new HashMap < JavaPlayer , Integer > ( ) ; for ( JavaCell c : city ) { if ( getDeveloperOnCell ( c , gameDevelopers ) != null ) { Developer d = getDeveloperOnCell ( c , gameDevelopers ) ; JavaPlayer p = d . getOwner ( ) ; int rank = c . getElevation ( ) ; if ( ! scores . containsKey ( p ) ) { scores . put ( p , rank ) ; } else { int newRank = c . getElevation ( ) ; if ( newRank > rank ) scores . put ( p , newRank ) ; } } } ArrayList < Integer > values = new ArrayList < Integer > ( ) ; for ( Integer i : scores . values ( ) ) values . add ( i ) ; Collections . sort ( values ) ; Collections . reverse ( values ) ; ArrayList < ArrayList < JavaPlayer >> players = new ArrayList < ArrayList < JavaPlayer >> ( ) ; for ( Integer i : values ) { ArrayList < JavaPlayer > rank = new ArrayList < JavaPlayer > ( ) ; for ( JavaPlayer p : scores . keySet ( ) ) { if ( scores . get ( p ) == i ) rank . add ( p ) ; } players . add ( rank ) ; } return players ; }
tr	KEY	public int getTextInsetX ( ) { return textInsetX ; }
tr	KEY	public JComboBox getSelection ( ) { return this . selection_adversaire ; }
tr	KEY	public TranslationResult createTranslationResult ( ) { return new TranslationResult ( ) ; }
tr	KEY	private static boolean less ( int v , int w ) { return v < w ; }
tr	IDF	public static float copySign ( float magnitude , float sign ) { int m = float . floatToIntBits ( magnitude ) ; int s = float . floatToIntBits ( sign ) ; if ( ( m >= 0 && s >= 0 ) || ( m < 0 && s < 0 ) ) { return magnitude ; } return - magnitude ; }
tr	KEY	public boolean isBlackKing ( ) { return isKing && ! isWhite ; }
tr	KEY	public static FormulaFactory [ ] getAllFactories ( ) { return FACTORIES_COMPRESSED ; }
tr	KEY	public void playDrawCardSound ( ) { playSound ( "drawCardSound" ) ; }
tr	KEY	public int getID ( ) { return ( gameID ) ; }
tr	IDF	public EnergyBar ( int getXCoordinate , int getYCoordinate ) { x = getXCoordinate ; y = getYCoordinate ; }
tr	IDF	public String getBirthDateStr ( ) { if ( birthdate == null || birthdate . getTime ( ) == 0 ) { return ( "" ) ; } return ( dtfmt . format ( birthdate ) ) ; }
tr	KEY	public void setSoundOn ( boolean soundOn ) { this . soundOn = soundOn ; }
tr	KEY	public Context ( ) { }
tr	KEY	public TemplateDeImpostoCondicional ( ) { }
tr	KEY	@ Override public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( ) != obj . getClass ( ) ) { return false ; } final PlayMenu other = ( PlayMenu ) obj ; if ( this . enabled != other . enabled ) { return false ; } if ( this . main != other . main ) { return false ; } if ( this . - != other . - ) { return false ; } if ( this . clear != other . clear ) { return false ; } if ( this . t1 != other . t1 ) { return false ; } if ( this . t2 != other . t2 ) { return false ; } if ( this . count != other . count ) { return false ; } if ( this . losses != other . losses ) { return false ; } if ( ! Objects . equals ( this . t , other . t ) ) { return false ; } if ( ! Objects . equals ( this . s , other . s ) ) { return false ; } return true ; }
tr	KEY	public boolean hasNext ( ) { return inode != null ; }
tr	KEY	public abstract void displace ( double x , double y ) ;
tr	IDF	public ExpMult ( Expressao esq , Expressao dir ) { super ( esq , dir ) ; }
tr	IDF	public Grup findOne ( int index ) { return grups . get ( index ) ; }
tr	IDF	public boolean sempred ( RuleContext _localctx , int ruleIndex , int predIndex ) { switch ( ruleIndex ) { case 3 : return expressao_sempred ( ( ExpressaoContext ) _localctx , predIndex ) ; case 4 : return bool_sempred ( ( BoolContext ) _localctx , predIndex ) ; } return true ; }
tr	IDF	public int bulbSwitch ( int n ) { if ( n <= 0 ) return 0 ; int cnt = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { int a = ( int ) Math . sqrt ( i ) ; if ( a * a == i ) cnt ++ ; } return cnt ; }
tr	IDF	private int getAdditiveScore ( ) { int result = 0 ; for ( Turn t : turns ) { result += t . getScore ( ) ; } return result ; }
tr	KEY	public JoystickButton getLeftStickClick ( ) { return new JoystickButton ( this , BUTTON_LEFT_STICK ) ; }
tr	KEY	private ReplacerFactory ( ) { }
tr	IDF	@ Override public void run ( ) { try { if ( serverAddress == null || serverAddress . isEmpty ( ) ) { packetManager . onSendNoServerAddress ( packetId ) ; } Socket socket = new Socket ( serverAddress , serverPort ) ; PrintWriter writer = new PrintWriter ( socket . getOutputStream ( ) ) ; writer . println ( packet ) ; writer . println (  ) ; writer . flush ( ) ; System . out . println ( "\n------------------------------------------------------------\n" + "Packet Sent:\n------------------------------------------------------------\n" + packet ) ; packetManager . onPacketSent ( packetId , socket ) ; } catch ( IOException e ) { packetManager . onSendIoException ( packetId ) ; } catch ( Exception e ) { packetManager . onSendError ( packetId ) ; } }
tr	KEY	public int getPosP0 ( ) { return mPosP0 ; }
tr	KEY	private JSONWriter append ( String string ) throws JSONException { if ( string == null ) { throw new JSONException ( "Null pointer" ) ; } if ( this . mode == o || this . mode == a ) { try { if ( this . , && this . mode == a ) { this . writer . write (   ) ; } this . writer . write ( string ) ; } catch ( IOException e ) { throw new JSONException ( e ) ; } if ( this . mode == o ) { this . mode = k ; } this . , = true ; return this ; } throw new JSONException ( "Value out of sequence." ) ; }
tr	IDF	public PageSourceCounter ( File file ) { this . file = file ; initFrame ( ) ; initHeader ( ) ; initContent ( ) ; bodyLayoutBox = Box . createVerticalBox ( ) ; bodyLayoutBox . add ( headerPanel ) ; bodyLayoutBox . add ( contentPanel ) ; this . add ( bodyLayoutBox ) ; }
tr	IDF	public void setHersteller ( String hersteller ) { this . hersteller = hersteller ; }
tr	KEY	public long getId ( ) { return id ; }
tr	KEY	void ibase ( ) ;
tr	KEY	private void loadGame ( ) { }
tr	IDF	@ Override public void actionPerformed ( ActionEvent e ) { JComboBox cb = ( JComboBox ) e . getSource ( ) ; String name = ( String ) cb . getSelectedItem ( ) ; container . setCurrentPreset ( name ) ; setupButtons ( ) ; repaintButtons ( ) ; }
tr	KEY	public double imaginary ( ) { return im ; }
tr	IDF	public static void envoyerModele ( ) { try { out . writeObject ( fenetre . getModele ( ) ) ; out . flush ( ) ; } catch ( Exception e ) { fenetre . changerVue ( new MessageView ( "Connexion rompu !" , new AccueilView ( ) , true ) ) ; } }
tr	IDF	public static void main ( String [ ] args ) { int count = 0 ; count += numberOfCombinations ( NUMBEROFDAYS , "  " ) ; for ( int i = 0 ; i < NUMBEROFDAYS ; i ++ ) count += numberOfCombinations ( i , "  " ) * numberOfCombinations ( NUMBEROFDAYS - i - 1 , "  " ) ; System . out . print ( count ) ; }
tr	IDF	public double update ( DependencyInstance gold , DependencyInstance pred , LocalFeatureData lfd , GlobalFeatureData gfd , SRLFeatureData sfd , int updCnt , int offset ) { int N = gold . length ; int [ ] actDeps = gold . heads ; int [ ] actLabs = gold . deplbids ; int [ ] predDeps = pred . heads ; int [ ] predLabs = pred . deplbids ; double Fi = getHammingDis ( actDeps , actLabs , predDeps , predLabs ) + getSRLCost ( gold , pred ) ; if ( Fi == 0 ) return 0.0 ; FeatureVector dt = lfd . getFeatureDifference ( gold , pred ) ; dt . addEntries ( gfd . getFeatureDifference ( gold , pred ) ) ; FeatureVector dtl = new FeatureVector ( size ) ; if ( options . learnLabel ) { dtl = lfd . getLabeledFeatureDifference ( gold , pred ) ; } FeatureVector dts = sfd . getFeatureDifference ( gold , pred ) ; double loss = - dt . dotProduct ( params ) * gamma - dtl . dotProduct ( params ) * gammaLabel - dts . dotProduct ( params2 ) * gamma2 + Fi ; double l2norm = dt . Squaredl2NormUnsafe ( ) * gamma * gamma + dtl . Squaredl2NormUnsafe ( ) * gammaLabel * gammaLabel + dts . Squaredl2NormUnsafe ( ) * gamma2 * gamma2 ; { for ( int k = 0 ; k < rank ; ++ k ) { FeatureVector dUk = getdU ( k , lfd , actDeps , predDeps ) ; l2norm += dUk . Squaredl2NormUnsafe ( ) * ( 1 - gamma ) * ( 1 - gamma ) ; loss -= dUk . dotProduct ( U [ k ] ) * ( 1 - gamma ) ; dU [ k ] = dUk ; } } { for ( int k = 0 ; k < rank ; ++ k ) { FeatureVector dVk = getdV ( k , lfd , actDeps , predDeps ) ; l2norm += dVk . Squaredl2NormUnsafe ( ) * ( 1 - gamma ) * ( 1 - gamma ) ; dV [ k ] = dVk ; } } { for ( int k = 0 ; k < rank ; ++ k ) { FeatureVector dWk = getdW ( k , lfd , actDeps , predDeps ) ; l2norm += dWk . Squaredl2NormUnsafe ( ) * ( 1 - gamma ) * ( 1 - gamma ) ; dW [ k ] = dWk ; } } for ( int k = 0 ; k < rank2 ; ++ k ) { FeatureVector dUk = getdU2 ( k , sfd , gold , pred ) ; FeatureVector dVk = getdV2 ( k , sfd , gold , pred ) ; FeatureVector dWk = getdW2 ( k , sfd , gold , pred ) ; l2norm += dUk . Squaredl2NormUnsafe ( ) * ( 1 - gamma2 ) * ( 1 - gamma2 ) ; l2norm += dVk . Squaredl2NormUnsafe ( ) * ( 1 - gamma2 ) * ( 1 - gamma2 ) ; l2norm += dWk . Squaredl2NormUnsafe ( ) * ( 1 - gamma2 ) * ( 1 - gamma2 ) ; loss -= dUk . dotProduct ( U2 [ k ] ) * ( 1 - gamma2 ) ; dU2 [ k ] = dUk ; dV2 [ k ] = dVk ; dW2 [ k ] = dWk ; } double alpha = loss / l2norm ; alpha = Math . min ( synC , alpha ) ; if ( alpha > 0 ) { { double coeff = alpha * gamma , coeff2 = coeff * updCnt ; for ( int i = 0 , K = dt . size ( ) ; i < K ; ++ i ) { int x = dt . x ( i ) ; double z = dt . value ( i ) ; params [ x ] += coeff * z ; total [ x ] += coeff2 * z ; } coeff = alpha * gammaLabel ; coeff2 = coeff * updCnt ; for ( int i = 0 , K = dtl . size ( ) ; i < K ; ++ i ) { int x = dtl . x ( i ) ; double z = dtl . value ( i ) ; params [ x ] += coeff * z ; total [ x ] += coeff2 * z ; } coeff = alpha * gamma2 ; coeff2 = coeff * updCnt ; for ( int i = 0 , K = dts . size ( ) ; i < K ; ++ i ) { int x = dts . x ( i ) ; double z = dts . value ( i ) ; params2 [ x ] += coeff * z ; total2 [ x ] += coeff2 * z ; } } { double coeff = alpha * ( 1 - gamma ) , coeff2 = coeff * updCnt ; for ( int k = 0 ; k < rank ; ++ k ) { FeatureVector dUk = dU [ k ] ; for ( int i = 0 , K = dUk . size ( ) ; i < K ; ++ i ) { int x = dUk . x ( i ) ; double z = dUk . value ( i ) ; U [ k ] [ x ] += coeff * z ; totalU [ k ] [ x ] += coeff2 * z ; } } } { double coeff = alpha * ( 1 - gamma ) , coeff2 = coeff * updCnt ; for ( int k = 0 ; k < rank ; ++ k ) { FeatureVector dVk = dV [ k ] ; for ( int i = 0 , K = dVk . size ( ) ; i < K ; ++ i ) { int x = dVk . x ( i ) ; double z = dVk . value ( i ) ; V [ k ] [ x ] += coeff * z ; totalV [ k ] [ x ] += coeff2 * z ; } } } { double coeff = alpha * ( 1 - gamma ) , coeff2 = coeff * updCnt ; for ( int k = 0 ; k < rank ; ++ k ) { FeatureVector dWk = dW [ k ] ; for ( int i = 0 , K = dWk . size ( ) ; i < K ; ++ i ) { int x = dWk . x ( i ) ; double z = dWk . value ( i ) ; W [ k ] [ x ] += coeff * z ; totalW [ k ] [ x ] += coeff2 * z ; } } } { double coeff = alpha * ( 1 - gamma2 ) , coeff2 = coeff * updCnt ; for ( int k = 0 ; k < rank2 ; ++ k ) { FeatureVector dUk = dU2 [ k ] ; for ( int i = 0 , K = dUk . size ( ) ; i < K ; ++ i ) { int x = dUk . x ( i ) ; double z = dUk . value ( i ) ; U2 [ k ] [ x ] += coeff * z ; totalU2 [ k ] [ x ] += coeff2 * z ; } } } { double coeff = alpha * ( 1 - gamma2 ) , coeff2 = coeff * updCnt ; for ( int k = 0 ; k < rank2 ; ++ k ) { FeatureVector dVk = dV2 [ k ] ; for ( int i = 0 , K = dVk . size ( ) ; i < K ; ++ i ) { int x = dVk . x ( i ) ; double z = dVk . value ( i ) ; V2 [ k ] [ x ] += coeff * z ; totalV2 [ k ] [ x ] += coeff2 * z ; } } } { double coeff = alpha * ( 1 - gamma2 ) , coeff2 = coeff * updCnt ; for ( int k = 0 ; k < rank2 ; ++ k ) { FeatureVector dWk = dW2 [ k ] ; for ( int i = 0 , K = dWk . size ( ) ; i < K ; ++ i ) { int x = dWk . x ( i ) ; double z = dWk . value ( i ) ; W2 [ k ] [ x ] += coeff * z ; totalW2 [ k ] [ x ] += coeff2 * z ; } } } } return loss ; }
tr	KEY	public synchronized void xassignL4KeyCode ( int code ) { l4 = code ; }
tr	KEY	public void init ( ) { }
tr	IDF	@ Test public final void testGetChapter ( ) { final String category = "category test" ; final String subCategory = "sub category test" ; final String documentName = "doc name test" ; final String chapter = "chapter test" ; final String section = "section test" ; final String page = "page test" ; final Location location = new Location ( category , subCategory , documentName , chapter , section , page ) ; assertEquals ( chapter , location . getChapter ( ) ) ; }
tr	IDF	SearchOption ( String v ) { value = v ; }
tr	KEY	public static void jumpToDirection ( ) { if ( InfoCenter . sentido == 0 ) { jumpLeft ( ) ; } else { jumpRight ( ) ; } }
tr	KEY	public int getX ( ) { return x ; }
tr	IDF	public PageInfoPanel ( MainFrame main ) { super ( main ) ; setLayout ( new GridBagLayout ( ) ) ; GridBagConstraints c = new GridBagConstraints ( ) ; c . gridheight = 1 ; c . gridwidth = 1 ; c . weightx = 1 ; c . weighty = 0 ; c . ipady = 10 ; c . fill = GridBagConstraints . HORIZONTAL ; c . anchor = GridBagConstraints . FIRST_LINE_START ; c . gridx = 0 ; c . gridy = 0 ; columnsLabel = new JLabel ( "Columns per page: " ) ; add ( columnsLabel , c ) ; c . gridx = 1 ; columnsSpinner = new JSpinner ( ) ; SpinnerModel spinnerModel = new SpinnerNumberModel ( settings . columnsPerPage , MIN_COLUMNS_PER_PAGE , MAX_COLUMNS_PER_PAGE , 1 ) ; columnsSpinner . setModel ( spinnerModel ) ; columnsSpinner . addChangeListener ( this ) ; add ( columnsSpinner , c ) ; c . gridx = 0 ; c . gridy = 1 ; measuresLabel = new JLabel ( "Measure per column: " ) ; add ( measuresLabel , c ) ; c . gridx = 1 ; measuresSpinner = new JSpinner ( ) ; spinnerModel = new SpinnerNumberModel ( settings . measuresPerColumn , MIN_MEASURES_PER_COLUMN , MAX_MEASURES_PER_COLUMN , 1 ) ; measuresSpinner . setModel ( spinnerModel ) ; measuresSpinner . addChangeListener ( this ) ; add ( measuresSpinner , c ) ; c . gridx = 0 ; c . gridy = 2 ; pagesLabel = new JLabel ( "Total pages: " ) ; add ( pagesLabel , c ) ; c . gridx = 1 ; pagesFieldLabel = new JLabel ( ) ; add ( pagesFieldLabel , c ) ; }
tr	IDF	@ Override public void enterSe ( @ NotNull EnquantoParser . SeContext ctx ) { }
tr	KEY	public long getOffset ( ) { return offset ; }
tr	KEY	public void setSpeed ( int speed ) { this . speed = speed ; }
tr	IDF	public BlankAnswerPanel ( final BlankAnswer blankAnswer , final Statistics session ) { super ( blankAnswer , session ) ; _blankAnswer = blankAnswer ; _springLayout = new SpringLayout ( ) ; _questionPanel = new JPanel ( _springLayout ) ; this . addPanel ( ) ; }
tr	KEY	int getWidth ( ) { return ( int ) this . getBounds2D ( ) . getWidth ( ) ; }
tr	KEY	public int getLevel ( ) { return level ; }
tr	IDF	public void union ( int p , int q ) { int i = root ( p ) ; int j = root ( q ) ; id [ i ] = j ; }
tr	KEY	public boolean isFile ( ) { return true ; }
tr	KEY	public boolean isUsed ( ) { return used ; }
tr	KEY	public static byte getValue ( ClientMessageTable message ) { switch ( message ) { case doScreenShot : return 11 ; case configure : return 1 ; case loadLevel : return 51 ; case restartLevel : return 52 ; case cshoot : return 31 ; case pshoot : return 32 ; case getState : return 12 ; case fullyZoomOut : return 34 ; case getCurrentLevel : return 14 ; case getBestScores : return 13 ; case shootSeq : return 33 ; case cFastshoot : return 41 ; case pFastshoot : return 42 ; case shootSeqFast : return 43 ; case getMyScore : return 23 ; case clickInCentre : return 36 ; case fullyZoomIn : return 35 ; } return 0 ; }
tr	IDF	void visit ( StandardUser user ) ;
tr	KEY	@ Override public boolean blockWalk ( ) { return false ; }
tr	KEY	@ Override public void onBounceOutPressed ( ) { }
tr	IDF	@ Override public void run ( ) { view . setPresenter ( this ) ; view . open ( ) ; view . updateViewFromModel ( ) ; }
tr	IDF	void release ( int I ) { instrument . release ( 64 + scale [ I ] ) ; }
tr	KEY	public void setPcp_Compra ( double Pcp_Compra ) { this . Pcp_Compra = Pcp_Compra ; }
tr	IDF	public static DependencyDecoder createDependencyDecoder ( Options options ) { if ( options . learningMode != LearningMode . Basic && options . projective ) { System . out . println ( "WARNING: high-order projective parsing not supported. " + "Switched to non-projective parsing." ) ; options . projective = false ; } if ( options . learningMode == LearningMode . Basic ) { if ( ! options . projective ) return new ChuLiuEdmondDecoder ( options ) ; else return new CYKDecoder ( options ) ; } else return new HillClimbingDecoder ( options ) ; }
tr	KEY	public StringComparer ( boolean sortDown ) { super ( sortDown ) ; }
tr	IDF	public void addItem ( String item ) { print ( "in addItem() - entering" ) ; synchronized ( list ) { list . add ( item ) ; print ( "in addItem() - just added: '" + item + "'" ) ; list . notifyAll ( ) ; print ( "in addItem() - just notified" ) ; } print ( "in addItem() - leaving" ) ; }
tr	IDF	public void translate ( Vector3d delatpos ) { Transform3D oldT3D = new Transform3D ( ) ; _pofvTrans . getTransform ( oldT3D ) ; Vector3d translate = new Vector3d ( ) ; translate . set ( delatpos . x , delatpos . y , delatpos . z ) ; Transform3D localT3D = new Transform3D ( ) ; localT3D . setTranslation ( translate ) ; Transform3D newT3D = new Transform3D ( ) ; newT3D . mul ( localT3D , oldT3D ) ; _pofvTrans . setTransform ( newT3D ) ; }
tr	KEY	public static double expm1 ( double x ) { return expm1 ( x , null ) ; }
tr	KEY	public int getId ( ) { return id ; }
tr	IDF	public static void main ( String [ ] args ) { Locale . setDefault ( Locale . ROOT ) ; for ( int i = 0 ; i < 256 ; i ++ ) { if ( i > 32 && i < 127 || i > 160 ) { System . out . printf ( "Character # %3d -> %s\n" , i , ( char ) i ) ; } else { System . out . printf ( "Character # %3d -> Unprintable symbol or space !\n" , i ) ; } } }
tr	IDF	public String getLastRelease ( ) { return getLastItem ( ) . getSource ( ) ; }
tr	KEY	public void go ( ) { root . accept ( this ) ; }
tr	IDF	@ Test public void testSize ( ) { assertEquals ( 1 , new Variable ( "y" ) . getSubtreeSize ( ) ) ; }
tr	KEY	public int getJ ( ) { return this . j ; }
tr	IDF	public void start ( ) { new Thread ( new Runnable ( ) { @ Override public void run ( ) { try { aSocket = new DatagramSocket ( port ) ; while ( true ) { byte [ ] buffer = new byte [ 1000 ] ; DatagramPacket request = new DatagramPacket ( buffer , buffer . length ) ; aSocket . receive ( request ) ; StringBuffer sb = new StringBuffer ( ) ; sb . append ( stationType . getStationCode ( ) ) ; sb . append ( countRecords ( ) ) ; byte [ ] payload = sb . toString ( ) . getBytes ( "US-ASCII" ) ; DatagramPacket reply = new DatagramPacket ( payload , payload . length , request . getAddress ( ) , request . getPort ( ) ) ; aSocket . send ( reply ) ; } } catch ( SocketException e ) { System . out . println ( "Socket: " + e . getMessage ( ) ) ; } catch ( IOException e ) { System . out . println ( "IO: " + e . getMessage ( ) ) ; } finally { if ( aSocket != null ) { aSocket . close ( ) ; } } } } ) . start ( ) ; }
tr	KEY	public void bumpCheck ( int xTile , int yTile ) { }
tr	IDF	@ Override public void handleSocketEvent ( SocketEvent e ) { SocketThread source = ( SocketThread ) e . getSource ( ) ; Message m = source . getMessage ( ) ; if ( ! m . getSender ( ) . equals ( source . getName ( ) ) ) { source . setName ( m . getSender ( ) ) ; participants . elementChanged ( source ) ; } if ( m . isDisconnect ( ) ) { try { remove ( source ) ; } catch ( IOException e1 ) { e1 . printStackTrace ( ) ; } Message message = new Message ( ) ; message . setSender ( "Server" ) ; message . setText ( m . getSender ( ) + " disconnected." ) ; message . setColor ( "#000000" ) ; send ( message ) ; } else if ( m . getRequestReply ( ) != null ) { try { remove ( source ) ; } catch ( IOException e1 ) { e1 . printStackTrace ( ) ; } Message message = new Message ( ) ; message . setSender ( "Server" ) ; message . setText ( m . getSender ( ) + " declined connection. Message: " + m . getRequestMessage ( ) ) ; message . setColor ( "#000000" ) ; insert ( message ) ; } else if ( m . getFileResponse ( ) != null ) { handler . addResponse ( m ) ; System . out . println ( "Response received" ) ; } else if ( m . getFileName ( ) != null ) { handler . addRequest ( m , source ) ; System . out . println ( "Request received" ) ; } else if ( m . getKeyRequest ( ) != null ) { Message message = new Message ( ) ; message . setSender ( userInput . get ( "user_name" ) ) ; if ( crypto . getSupportedCryptoList ( ) . contains ( m . getKeyRequestType ( ) ) ) { message . setEncryptionAlgo ( m . getKeyRequestType ( ) ) ; message . setEncryptionKey ( crypto . getKey ( m . getKeyRequestType ( ) ) ) ; } else { message . setEncryptionAlgo ( Crypto . AES ) ; message . setEncryptionKey ( crypto . getKey ( Crypto . AES ) ) ; } source . send ( message ) ; Message msg = new Message ( ) ; msg . setSender ( "Server" ) ; msg . setText ( m . getSender ( ) + " requested a key of type " + m . getKeyRequestType ( ) + ". Message: " + m . getKeyRequest ( ) ) ; insert ( msg ) ; } else if ( m . getText ( ) != null ) { relay ( source , m ) ; insert ( m ) ; } else { } }
tr	KEY	public Pong ( ) { }
tr	IDF	private void updateAUDV1 ( int data ) { setRegister ( AUDV1 , data ) ; }
tr	KEY	private void saveGame ( ) { }
tr	KEY	public void act ( ) { }
tr	KEY	public String getFC2ResultStr ( ) { if ( fc2result == null ) { return ( "" ) ; } return ( fc2result + " (" + getFC2RunDtStr ( ) + ")" ) ; }
tr	IDF	private void jPFSenhaKeyPressed ( java . awt . event . KeyEvent evt ) { if ( evt . getKeyCode ( ) == KeyEvent . VK_ENTER ) { jBEntrar . requestFocusInWindow ( ) ; jBEntrar . doClick ( ) ; } }
tr	IDF	private void astarMulti ( Loc [ ] fs , Loc [ ] ff ) { MLoc s = new MLoc ( fs ) ; MLoc f = new MLoc ( ff ) ; int turnKeeper = 0 ; int counter = 0 ; MPriorityHashQueue frontier = new MPriorityHashQueue ( ) ; Map < MLoc , double > explored = new HashMap < MLoc , double > ( ) ; LinkedList < MLoc > solution = new LinkedList < MLoc > ( ) ; frontier . add ( new MNode ( s , null , 0 , heuristic ( s ) ) ) ; while ( ! frontier . isEmpty ( ) ) { if ( counter % 100 == 0 ) { System . out . print ( "\n" ) ; } ; if ( counter % 1 == 0 ) { System . out . print ( "." ) ; } ; MNode current = frontier . poll ( ) ; if ( goalTest ( current . state , f ) ) { for ( MNode node = current ; node != null ; node = node . parent ) { solution . addFirst ( node . state ) ; } System . out . println ( "found goal!" ) ; mSolutions . addAll ( solution ) ; return ; } explored . put ( current . state , current . distance ( ) ) ; ArrayList < MLoc > possibles = getMoves ( current . state , turnKeeper ) ; for ( int i = 0 ; i < possibles . size ( ) ; i ++ ) { MLoc possib = possibles . get ( i ) ; if ( ! explored . containsKey ( possib ) ) { frontier . add ( new MNode ( possib , current , current . G + 1 , heuristic ( current . state ) ) ) ; } else if ( current . state . equals ( possib ) ) { frontier . add ( new MNode ( possib , current , current . G + 1 , heuristic ( current . state ) ) ) ; } else { MNode n = frontier . get ( current . state ) ; if ( n != null && n . distance ( ) > current . distance ( ) ) { frontier . update ( current , new MNode ( possib , current , current . G + 1 , heuristic ( current . state ) ) ) ; } } } turnKeeper = ( turnKeeper + 1 ) % map . numRobots ; counter ++ ; } if ( solution . isEmpty ( ) ) { System . out . println ( "FAILED TO FIND SOLUTION" ) ; } }
tr	KEY	public TipoCorJogador getTurno ( ) { return this . turno ; }
tr	KEY	public void close ( ) throws SQLException { if ( pstmtCached != null ) { pstmtCached . close ( ) ; pstmtCached = null ; } }
tr	KEY	public GetResponse createGetResponse ( ) { return new GetResponse ( ) ; }
tr	KEY	public HumanPlugin ( ) { super ( new HumanPlayer ( ) ) ; }
tr	KEY	public UpdateResponse createUpdateResponse ( ) { return new UpdateResponse ( ) ; }
tr	KEY	public int getHeight ( ) { return height ; }
tr	KEY	public void setCountdown ( int x ) { this . x = x ; super . repaint ( ) ; }
tr	KEY	public synchronized int xgetS2RepeatDelay ( ) { return s2RD ; }
tr	KEY	public int getOutputs ( ) { return outputs ; }
tr	IDF	private List < AngleUnitFlapPattern > createAllMountainOnlyPatterns ( final AngleUnitFlapPattern seed , final int maxMountainCount ) { Rule < AngleUnitFlapPattern > acceptionRule = ruleFactory . createAlwaysAcceptable ( ) ; Rule < AngleUnitFlapPattern > pruningRule = ruleFactory . createDuplicationDetector ( 0 ) ; BruteForcePatternSetFactory factory = new BruteForcePatternSetFactory ( seed . getTailIndex ( ) , acceptionRule , pruningRule ) ; seed . set ( 0 , LineType . MOUNTAIN ) ; List < AngleUnitFlapPattern > result = factory . createPatternsByAddingLineRecursively ( seed , LineType . MOUNTAIN , maxMountainCount - 1 ) ; recursionCount += factory . getRecursionCount ( ) ; return result ; }
tr	KEY	public double getEps1 ( ) { return eps1 ; }
tr	IDF	@ Override protected Color getCellAsColour ( int col , int row ) { int age = getCellAge ( col , row ) ; final int [ ] colors = new int [ ] { 00000000 , 16711680 , 16717568 , 16724224 , 16731136 , 16738048 , 16744960 , 16751616 , 16758528 , 16765440 , 16772096 , 16776982 , 16777062 , 16777141 } ; if ( age >= colors . length ) { return Color . WHITE ; } return new Color ( colors [ age ] ) ; }
tr	IDF	public static void logInfo ( final String message , Exception exception ) { if ( exception == null ) { exception = new Exception ( ) ; } handleStatus ( message , exception , StatusManager . LOG , IStatus . INFO ) ; }
tr	KEY	public boolean getLimitedEducation ( ) { return limitedEducation ; }
tr	IDF	@ Override public boolean updateActor ( ActorModel actor ) throws WebshopAppException { try ( Connection conn = getConnection ( ) ) { String sql = "UPDATE actors SET firstname = ?  lastname = ?  dob = ? WHERE id = ?" ; try ( PreparedStatement pstmt = conn . prepareStatement ( sql ) ) { pstmt . setString ( 1 , actor . getFirstname ( ) ) ; pstmt . setString ( 2 , actor . getLastname ( ) ) ; pstmt . setString ( 3 , actor . getDob ( ) ) ; pstmt . setInt ( 4 , actor . getId ( ) ) ; pstmt . executeUpdate ( ) ; LOGGER . trace ( "Updated actor: " + actor ) ; return true ; } } catch ( SQLException e ) { WebshopAppException excep = new WebshopAppException ( e . getMessage ( ) , this . getClass ( ) . getSimpleName ( ) , "UPDATE_ACTOR" ) ; LOGGER . error ( excep ) ; throw excep ; } }
tr	KEY	@ Override public int getNumberOfColumns ( ) { return m ; }
tr	IDF	@ Override public void curveTo ( float x1 , float y1 , float x2 , float y2 , float x3 , float y3 ) { emitStashedLine ( ) ; delegate . curveTo ( x1 , y1 , x2 , y2 , x3 , y3 ) ; state = STATE_PREV_POINT ; px1 = x3 ; py1 = y3 ; }
tr	IDF	@ Override public < S , T > T visit ( Visitor < S , T > v , S state ) throws FractalException { return v . visitASTTCmdRight ( this , state ) ; }
tr	KEY	@ Override public double getProfit ( ) { return 1 ; }
tr	KEY	public int getNumRep_Equipo ( ) { return NumRep_Equipo ; }
tr	IDF	public void say ( ) { System . out . println ( "son...say...\uFF01" ) ; }
tr	IDF	private void handleMap ( Rectangular rectangular , int height ) { Integer t = input . get ( rectangular ) ; if ( t == null || height > t ) { input . put ( rectangular , height ) ; } }
tr	IDF	public void setTipPag_Venta ( String TipPag_Venta ) { this . TipPag_Venta = TipPag_Venta ; }
tr	KEY	public void setLongitude ( double value ) { this . longitude = value ; }
tr	KEY	public boolean isCellEditable ( int rowIndex , int columnIndex ) { return canEdit [ columnIndex ] ; }
tr	KEY	public int getSum ( ) { return sum ; }
tr	IDF	@ Override public void run ( ) { try { for ( int i = 0 ; i < 20 ; i ++ ) { synchronized ( StaticVariableSyn . class ) { staticInt ++ ; if ( staticInt == 10 ) { Thread . sleep ( 5000 ) ; } System . err . println ( "[" + Thread . currentThread ( ) . getId ( ) + "]\u5F53i=" + i + "\u83B7\u53D6staticInt \u7684\u503C:" + staticInt ) ; } } } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } }
tr	KEY	public double getLongitude ( ) { return longitude ; }
tr	KEY	public MenuComponent getChild ( int i ) { throw new UnsupportedOperationException ( ) ; }
tr	IDF	@ Override public void run ( ) { printMessage ( "Expose" ) ; currentTask = this ; updateTicks ( CmdMessage . TICKS_EXPOSE_FOCUS ) ; intervalometer . schedule ( new CompleteTask ( ) , ( long ) ( exposureTimeE . getValue ( ) * 1000 ) ) ; }
tr	KEY	public static void dumpStats ( ) { if ( singleton != null ) { singleton . dump ( ) ; } }
tr	KEY	protected JFrame getFrame ( ) { return this . frame ; }
tr	KEY	public boolean growthStopped ( ) { return growthStopped ; }
tr	KEY	public boolean getBecomeRegisteredVoter ( ) { return becomeRegisteredVoter ; }
tr	KEY	public char getTestChr ( ) { return testChr ; }
tr	KEY	public void Busca_cancion ( ) { }
tr	IDF	public static void main ( String [ ] args ) { Rectangle rec = new Rectangle ( 5 , 5 , 9 , 4 ) ; Rectangle _rec = new Rectangle ( 10 , 10 , 9 , 4 ) ; Rectangle __rec = new Rectangle ( 15 , 15 , 9 , 4 ) ; ABObject ob = new ABObject ( rec , ABType . Wood ) ; ABObject _ob = new ABObject ( _rec , ABType . Wood ) ; ABObject __ob = new ABObject ( __rec , ABType . Wood ) ; List < Point2D > edge = QualitativeRep . UpperEdge ( ob ) ; List < ABObject > obs = new ArrayList < ABObject > ( ) ; obs . add ( ob ) ; obs . add ( _ob ) ; obs . add ( __ob ) ; List < ABObject > above = new ArrayList < ABObject > ( ) ; QualitativeRep . AboveRelation ( ob , obs , above ) ; for ( int i = 0 ; i < above . size ( ) ; i ++ ) { System . out . println ( "ABove ob: " + above . get ( i ) . getLocation ( ) ) ; } System . out . println ( QualitativeRep . TouchRelation ( _ob , __ob ) ) ; System . out . println ( QualitativeRep . RightPoint ( ob , _ob ) ) ; System . out . println ( QualitativeRep . LeftPoint ( ob , _ob ) ) ; System . out . println ( QualitativeRep . CenterPoint ( ob , _ob ) ) ; System . out . println ( QualitativeRep . AboveRelation ( __ob , _ob ) ) ; }
tr	IDF	@ Override public void onMessageReceived ( Message < ServerProtocolParameters > message ) { if ( message instanceof ServerNodeCommandMessage ) { Message < ClientProtocolParameters > response = messageHandler . handleMessage ( ( ServerNodeCommandMessage ) message , null ) ; if ( response != null ) { messageManager . sendMessage ( response ) ; } } }
tr	IDF	public Profile [ ] findWhereFNameEquals ( String fName ) throws ProfileDaoException { return findByDynamicSelect ( SQL_SELECT + " WHERE fName = ? ORDER BY fName" , new Object [ ] { fName } ) ; }
tr	KEY	public Player ( ) { }
tr	IDF	@ Override public String verifyAllFields ( ) { String result = "" ; result += _answerLocationPanel . verifyFields ( ) ; result += verifyFields ( ) ; return result ; }
tr	KEY	public void setSheltersValue ( double sheltersValue ) { this . sheltersValue = sheltersValue ; }
tr	KEY	public float getVelocityX ( ) { return ( float ) velocity . x ; }
tr	IDF	private void jButton1ActionPerformed ( java . awt . event . ActionEvent evt ) { pm = new ProgressMonitor ( this , "Prueba" , "corriendo" , 0 , 0 ) ; }
tr	KEY	@ Override public Weapon get_weapon ( ) { if ( _weaponPrimary != null && _weaponPrimary . get_ammo ( ) > 0 ) { return _weaponPrimary ; } else if ( _weaponSecondary != null ) { return _weaponSecondary ; } else { return null ; } }
tr	IDF	private static double slowexp ( final double x , final double result [ ] ) { final double xs [ ] = new double [ 2 ] ; final double ys [ ] = new double [ 2 ] ; final double facts [ ] = new double [ 2 ] ; final double as [ ] = new double [ 2 ] ; split ( x , xs ) ; ys [ 0 ] = ys [ 1 ] = 0.0 ; for ( int i = 19 ; i >= 0 ; i -- ) { splitMult ( xs , ys , as ) ; ys [ 0 ] = as [ 0 ] ; ys [ 1 ] = as [ 1 ] ; split ( FACT [ i ] , as ) ; splitReciprocal ( as , facts ) ; splitAdd ( ys , facts , as ) ; ys [ 0 ] = as [ 0 ] ; ys [ 1 ] = as [ 1 ] ; } if ( result != null ) { result [ 0 ] = ys [ 0 ] ; result [ 1 ] = ys [ 1 ] ; } return ys [ 0 ] + ys [ 1 ] ; }
tr	IDF	public ASTExpLit ( FractalValue value ) { this . value = value ; }
tr	KEY	public boolean isUpperCase ( ) { return upperCase ; }
tr	IDF	public void setParameters ( Object ... objs ) throws SQLException { if ( objs . length != sizeOfParameters ) throw new SQLException ( "wrong size  expected " + sizeOfParameters + " but is given " + objs . length ) ; int i = 0 ; while ( i < sizeOfParameters ) { Object value = objs [ i ] ; try { parameterMapper . setParameterValue ( ps , ++ i , value ) ; } catch ( Exception e ) { throw new ParamerSettingException ( i , query . getParameter ( i - 1 ) , value , e ) ; } } }
tr	IDF	public void execute ( String sql ) throws SQLException { con = DriverManager . getConnection ( DB_URL , USER , PASS ) ; stmt = con . createStatement ( ) ; stmt . execute ( sql ) ; }
tr	KEY	public int getMenuChoice ( ) { return menuChoice ; }
tr	IDF	@ Test public void testGetDifficulty ( ) { _qd = new MyQuestionData ( _showQuestion , _questionNumber , _questionStatistics , _questionLocation , _questionString ) ; final int startDifficulty = 20 ; assertEquals ( startDifficulty , _qd . getDifficulty ( ) ) ; }
tr	KEY	public void setOffset ( long value ) { this . offset = value ; }
tr	IDF	public void setPlayer ( SpriteV2 player ) { this . player = player ; }
tr	IDF	public void getDBContents ( ) { List < Grafikkarte > entries = dbSource . fireQuery ( query ) ; this . data = new Object [ entries . size ( ) ] [ columnNames . length ] ; for ( int i = 0 ; i < entries . size ( ) ; ++ i ) { Grafikkarte currentGrafikkarte = entries . get ( i ) ; data [ i ] [ 0 ] = currentGrafikkarte . getId ( ) ; data [ i ] [ 1 ] = currentGrafikkarte . getHersteller ( ) ; data [ i ] [ 2 ] = currentGrafikkarte . getName ( ) ; data [ i ] [ 3 ] = currentGrafikkarte . getRechenleistung ( ) + " GFlops" ; data [ i ] [ 4 ] = currentGrafikkarte . getSpeichergroesse ( ) + " GB" ; data [ i ] [ 5 ] = currentGrafikkarte . getPreis ( ) + " \u20AC" ; } }
tr	IDF	public void setConfigService ( ConfigService configService ) { this . configService = configService ; }
tr	IDF	public List < HVLine > getHvLines ( ) { return hvLines ; }
tr	KEY	public OpenPortCommand ( ) { }
tr	IDF	public void setCreated ( Timestamp created ) { this . created = created ; }
tr	KEY	public int startIndex ( int i ) { return st [ i ] ; }
tr	IDF	public void ancestorMoved ( javax . swing . event . AncestorEvent evt ) { }
tr	KEY	public double getWeight ( ) { return weight ; }
tr	IDF	public EqualizeEncoders ( ScalableSubsystem sys , double time ) { this . time = time ; setTimeout ( time ) ; this . sys = sys ; }
tr	IDF	@ Override public Dimension getPreferredSize ( ) { return new Dimension ( XLEN , YLEN + 50 ) ; }
tr	IDF	public INDISwitchOneOfManyProperty ( INDIDriver driver , String name , String label , String group , PropertyStates state , PropertyPermissions permission , int timeout , String [ ] elements ) { super ( driver , name , label , group , state , permission , timeout , SwitchRules . ONE_OF_MANY ) ; createElements ( elements , 0 ) ; }
tr	IDF	public AddressBuilder phoneNumber ( String phoneNumber ) { _address . setPhoneNumber ( phoneNumber ) ; return this ; }
tr	KEY	public void setIdTarea ( int idTarea ) { this . idTarea = idTarea ; }
tr	IDF	public void meSendCommandToAll ( String ... messages ) { logger . debug ( "meSendToAll handling message - " + user + " " + messages ) ; server . writeToAll ( ":" + user + " " + messages ) ; }
tr	KEY	public abstract void fire ( ) ;
tr	KEY	public abstract void setCell ( int col , int row , boolean alive ) ;
tr	KEY	@ Override public boolean hasSameContent ( InteractionEvent previous ) { return true ; }
tr	KEY	public void setLon ( double lon ) ;
tr	IDF	@ Test public void canGetUser ( ) { UserModel addedUser = new UserModel . Builder ( "bbq1@test.se" , "123456" , "Tom" , "Whitemore" , "Telegrafvagen 32" , "Stockholm" , "postcode" ) . address2 ( "C/O Olsen" ) . dob ( "1949-09-09" ) . telephone ( "0807384756" ) . build ( ) ; UserModel getUser = null ; try { insertUser ( addedUser ) ; getUser = ud . getUser ( addedUser . getEmail ( ) ) ; } catch ( WebshopAppException e ) { e . printStackTrace ( ) ; } deleteUser ( addedUser . getEmail ( ) ) ; assertEquals ( addedUser , getUser ) ; }
tr	KEY	public void setValCob_DevCompra ( double ValCob_DevCompra ) { this . ValCob_DevCompra = ValCob_DevCompra ; }
tr	IDF	public viewNGram ( ) { initComponents ( ) ; insertTweets ( TfidfDriver . getToplist ( ) ) ; }
tr	IDF	@ Override public void actionPerformed ( ActionEvent e ) { if ( list . getSelectedIndex ( ) == - 1 ) { } else { setInputField ( listModel . elementAt ( list . getSelectedIndex ( ) ) ) ; _player . playMedia ( getInputField ( ) ) ; } }
tr	IDF	public List < Cliente > getReturn ( ) { if ( _return == null ) { _return = new ArrayList < Cliente > ( ) ; } return this . _return ; }
tr	KEY	public int getWidth ( ) { return width ; }
tr	KEY	public boolean isSaturday ( int day ) { int _day = dayOfWeek ( displayMonth , day , displayYear ) ; if ( _day == 6 ) { return true ; } else { return false ; } }
tr	KEY	public boolean isBuilding ( ) { return started && ! closed ? true : false ; }
tr	IDF	public long createLinkCodePATHPP ( FeatureTemplate . Link temp , long x , long y , long z ) { return ( ( ( ( ( ( x << tagNumBits ) | y ) << tagNumBits ) | z ) << numLinkFeatBits ) | temp . ordinal ( ) ) << ( auglbNumBits * 2 ) ; }
tr	KEY	public FunctionDeclTree ( ) { }
tr	IDF	public void actionPerformed ( ActionEvent e ) { m_uiLoadState_actionPerformed ( e ) ; }
tr	KEY	public final String getTitle ( ) { return title ; }
tr	KEY	private Templates ( ) { }
tr	KEY	@ Override public boolean equals ( Object obj ) { if ( this == obj ) return true ; if ( obj == null ) return false ; if ( getClass ( ) != obj . getClass ( ) ) return false ; Cohort other = ( Cohort ) obj ; if ( yearOfAdmission == null ) { if ( other . yearOfAdmission != null ) return false ; } else if ( ! yearOfAdmission . equals ( other . yearOfAdmission ) ) return false ; return true ; }
tr	KEY	public static AntiMain getInstance ( ) { if ( antiMain == null ) { antiMain = new AntiMain ( ) ; } return antiMain ; }
tr	KEY	public boolean getSHA1 ( ) { return sha1rb . isSelected ( ) ; }
tr	IDF	public Humain ( String nom , int taille_grille ) { super ( nom , taille_grille ) ; }
tr	KEY	public PlayAround ( ) { }
tr	IDF	@ Before public void setUp ( ) { vars = new HashMap < String , double > ( ) ; vars . put ( "x" , 3.0 ) ; }
tr	KEY	private int readImmediate ( int data ) { return data ; }
tr	IDF	public void run ( ) { try { System . out . println ( "Closing ActiveMQ connection" ) ; connection . close ( ) ; } catch ( JMSException e ) { } }
tr	KEY	public MobileWebRequest createMobileWebRequest ( ) { return new MobileWebRequest ( ) ; }
tr	IDF	public void setCam ( int xCam , int yCam ) { int xCamD = this . xCam - xCam ; int yCamD = this . yCam - yCam ; this . xCam = xCam ; this . yCam = yCam ; g . setComposite ( AlphaComposite . Src ) ; g . copyArea ( 0 , 0 , width , height , xCamD , yCamD ) ; if ( xCamD < 0 ) { if ( xCamD < - width ) xCamD = - width ; updateArea ( width + xCamD , 0 , - xCamD , height ) ; } else if ( xCamD > 0 ) { if ( xCamD > width ) xCamD = width ; updateArea ( 0 , 0 , xCamD , height ) ; } if ( yCamD < 0 ) { if ( yCamD < - width ) yCamD = - width ; updateArea ( 0 , height + yCamD , width , - yCamD ) ; } else if ( yCamD > 0 ) { if ( yCamD > width ) yCamD = width ; updateArea ( 0 , 0 , width , yCamD ) ; } }
tr	IDF	public ProfileResponse createProfile ( Token token , Address billing , CustomFields custom , String language , String comments ) throws BeanstreamApiException { return createProfile ( null , token , billing , custom , language , comments ) ; }
tr	KEY	public String getColor ( ) { return this . color ; }
tr	KEY	public GetMarkerView ( ) { throw new UnsupportedOperationException ( "Not supported yet." ) ; }
tr	KEY	public int getMaxRows ( ) { return maxRows ; }
tr	KEY	public RequirementLink ( ) { super ( ) ; }
tr	IDF	@ SuppressWarnings ( "unchecked" ) private void initComponents ( ) { jLabel5 = new javax . swing . JLabel ( ) ; jLabel1 = new javax . swing . JLabel ( ) ; jTextField1 = new javax . swing . JTextField ( ) ; jButton1 = new javax . swing . JButton ( ) ; jLabel2 = new javax . swing . JLabel ( ) ; jTextField2 = new javax . swing . JTextField ( ) ; jButton2 = new javax . swing . JButton ( ) ; jScrollPane1 = new javax . swing . JScrollPane ( ) ; jButton3 = new javax . swing . JButton ( ) ; setDefaultCloseOperation ( javax . swing . WindowConstants . EXIT_ON_CLOSE ) ; jLabel5 . setFont ( new java . awt . Font ( "Tahoma" , 0 , 24 ) ) ; jLabel5 . setText ( "WIZARD MUSIC STORE" ) ; jLabel1 . setText ( "Transaction ID" ) ; jButton1 . setText ( "Search" ) ; jButton1 . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButton1ActionPerformed ( evt ) ; } } ) ; jLabel2 . setText ( "Customer ID" ) ; jButton2 . setText ( "Search" ) ; jButton2 . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButton2ActionPerformed ( evt ) ; } } ) ; jButton3 . setText ( "Cancel" ) ; jButton3 . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButton3ActionPerformed ( evt ) ; } } ) ; javax . swing . GroupLayout layout = new javax . swing . GroupLayout ( getContentPane ( ) ) ; getContentPane ( ) . setLayout ( layout ) ; layout . setHorizontalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addGap ( 93 , 93 , 93 ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . TRAILING , false ) . addComponent ( jButton2 ) . addComponent ( jButton1 ) . addGroup ( javax . swing . GroupLayout . Alignment . LEADING , layout . createSequentialGroup ( ) . addComponent ( jLabel2 ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addComponent ( jTextField2 , javax . swing . GroupLayout . PREFERRED_SIZE , 283 , javax . swing . GroupLayout . PREFERRED_SIZE ) ) . addGroup ( javax . swing . GroupLayout . Alignment . LEADING , layout . createSequentialGroup ( ) . addComponent ( jLabel1 ) . addGap ( 44 , 44 , 44 ) . addComponent ( jTextField1 , javax . swing . GroupLayout . PREFERRED_SIZE , 283 , javax . swing . GroupLayout . PREFERRED_SIZE ) ) . addComponent ( jScrollPane1 , javax . swing . GroupLayout . Alignment . LEADING ) ) . addContainerGap ( 76 , short . MAX_VALUE ) ) . addGroup ( javax . swing . GroupLayout . Alignment . TRAILING , layout . createSequentialGroup ( ) . addContainerGap ( javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( javax . swing . GroupLayout . Alignment . TRAILING , layout . createSequentialGroup ( ) . addComponent ( jLabel5 ) . addGap ( 170 , 170 , 170 ) ) . addGroup ( javax . swing . GroupLayout . Alignment . TRAILING , layout . createSequentialGroup ( ) . addComponent ( jButton3 ) . addGap ( 34 , 34 , 34 ) ) ) ) ) ; layout . setVerticalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addGap ( 27 , 27 , 27 ) . addComponent ( jLabel5 ) . addGap ( 51 , 51 , 51 ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE ) . addComponent ( jLabel1 ) . addComponent ( jTextField1 , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) ) . addGap ( 26 , 26 , 26 ) . addComponent ( jButton1 ) . addGap ( 42 , 42 , 42 ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE ) . addComponent ( jLabel2 ) . addComponent ( jTextField2 , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) ) . addGap ( 32 , 32 , 32 ) . addComponent ( jButton2 ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED , 26 , short . MAX_VALUE ) . addComponent ( jScrollPane1 , javax . swing . GroupLayout . PREFERRED_SIZE , 100 , javax . swing . GroupLayout . PREFERRED_SIZE ) . addGap ( 18 , 18 , 18 ) . addComponent ( jButton3 ) . addGap ( 35 , 35 , 35 ) ) ) ; pack ( ) ; }
tr	KEY	private boolean isValidScore ( int score ) { boolean isValid = ( score >= 0 ) ; return isValid ; }
tr	IDF	public String getIp ( ) { return socket . getInetAddress ( ) . getHostAddress ( ) ; }
tr	KEY	public List < long > getStudentGroupIds ( ) { return studentGroupIds ; }
tr	KEY	public int getSize ( ) { return BLOBData . length ; }
tr	KEY	public void setHide ( int hide ) { this . hide = hide ; }
tr	KEY	public ExpressaoContext ( ) { }
tr	IDF	@ SuppressWarnings ( { "unchecked" , "rawtypes" } ) public < CT > List < CT > findChildren ( List < CT > containerList , class < CT > type , String orderby ) { String columnName = belongsColumnMap . get ( type ) ; if ( columnName == null ) { return null ; } try { BaseDao dao = ( BaseDao ) type . getField ( "manager" ) . get ( null ) ; return dao . findAll ( containerList , columnName + " = ?" , orderby , this . id ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
tr	IDF	public void translate ( float x , float y , float z ) { Vector3d vectTrans = new Vector3d ( x , y , z ) ; Transform3D oldT3D = new Transform3D ( ) ; this . get3DPresentation ( ) . getTransform ( oldT3D ) ; Transform3D localT3D = new Transform3D ( ) ; localT3D . setTranslation ( vectTrans ) ; Transform3D newT3D = new Transform3D ( ) ; newT3D . mul ( oldT3D , localT3D ) ; this . get3DPresentation ( ) . setTransform ( newT3D ) ; }
tr	KEY	private static void forLoop ( int n ) { for ( int i = 0 ; i < n ; i ++ ) { } }
tr	IDF	@ Test @ Ignore public void test ( ) { char [ ] [ ] matrix = new char [ ] [ ] { { 1 } } ; assertEquals ( 1 , maximalRectangle ( matrix ) ) ; }
tr	KEY	protected final String getCommand ( ) { return "true" ; }
tr	KEY	public void setHpCounter ( int hpCounter ) { this . hpCounter = hpCounter ; }
tr	KEY	public Tree ( ) { }
tr	KEY	public static ClientMessageTable getValue ( int message_code ) { switch ( message_code ) { case 1 : return configure ; case 11 : return doScreenShot ; case 51 : return loadLevel ; case 52 : return restartLevel ; case 31 : return cshoot ; case 32 : return pshoot ; case 12 : return getState ; case 34 : return fullyZoomOut ; case 35 : return fullyZoomIn ; case 14 : return getCurrentLevel ; case 13 : return getBestScores ; case 23 : return getMyScore ; case 33 : return shootSeq ; case 41 : return cFastshoot ; case 42 : return pFastshoot ; case 43 : return shootSeqFast ; case 36 : return clickInCentre ; } return null ; }
tr	KEY	public boolean stopCellEditing ( ) { return super . stopCellEditing ( ) ; }
tr	IDF	private void jTable1MouseClicked ( java . awt . event . MouseEvent evt ) { modificarButton . setEnabled ( true ) ; eliminarButton . setEnabled ( true ) ; int row = jTable1 . getSelectedRow ( ) ; String id = jTable1 . getValueAt ( row , 0 ) . toString ( ) ; try { result = stmt . executeQuery ( "Select * from laboratorios where Id_laboratorios= '" + id + "'" ) ; if ( result . next ( ) ) { lab_mod . textNombre . setText ( result . getString ( "Nombre_laboratorios" ) ) ; lab_mod . textTelefono . setText ( result . getString ( "Telefono_laboratorios1" ) ) ; lab_mod . textSucursal . setText ( result . getString ( "Sucursal" ) ) ; } } catch ( SQLException ex ) { JOptionPane . showMessageDialog ( this , "Error al tratar de conectar la base  verifica tus datos de conexion" ) ; } lab_mod . idp = id ; idbb = id ; }
tr	KEY	public int getRow ( ) { return row ; }
tr	IDF	public UserModel updateUser ( UserModel user ) { String email = user . getEmail ( ) ; String password = user . getPassword ( ) ; String firstname = user . getFirstname ( ) ; String lastname = user . getLastname ( ) ; String dob = user . getDob ( ) ; String telephone = user . getTelephone ( ) ; String address1 = user . getAddress1 ( ) ; String address2 = user . getAddress2 ( ) ; String town = user . getTown ( ) ; String postcode = user . getPostcode ( ) ; int selectedUpdate = 0 ; boolean correctDate = false ; boolean updateDone = false ; UserModel newUser ; System . out . println ( "Updating: " + user . toString ( ) ) ; do { System . out . println ( "Fields to update: \n" + "1. Firstname \n" + "2. Lastname \n" + "3. password \n" + "4. date of birth \n" + "5. telephone number \n" + "6. address \n" + "7. town \n" + "8. postcode \n" ) ; do { selectedUpdate = readInt ( ) ; } while ( selectedUpdate <= 0 ) ; switch ( selectedUpdate ) { case 1 : firstname = readStringWithLabel ( "Enter the new firstname of the user" ) ; break ; case 2 : lastname = readStringWithLabel ( "Enter the new lastname of the user" ) ; break ; case 3 : password = readStringWithLabel ( "Enter the new password of the user" ) ; break ; case 4 : do { dob = readStringWithLabel ( "Enter the new date of birth of the user (yyyy-mm-dd)" ) ; if ( dob . matches ( "\\d{4}-\\d{2}-\\d{2}" ) ) { correctDate = true ; } else { System . out . println ( "Please use the format: yyyy-mm-dd - Your input was: " + dob ) ; } } while ( correctDate == false ) ; break ; case 5 : telephone = readStringWithLabel ( "Enter the new telephone number of the user" ) ; break ; case 6 : address1 = readStringWithLabel ( "Enter the new address of the user" ) ; address2 = readStringWithLabel ( "Enter the new c/o of the user" ) ; break ; case 7 : town = readStringWithLabel ( "Enter the new town of the user" ) ; break ; case 8 : postcode = readStringWithLabel ( "Enter the new postcode of the user" ) ; break ; } String yes = null ; do { System . out . println ( "Do you want to update further? y/n" ) ; yes = readString ( ) ; } while ( ! yes . equals ( "y" ) && ! yes . equals ( "n" ) ) ; if ( yes . equals ( "n" ) ) { updateDone = true ; } } while ( updateDone == false ) ; newUser = getUserModel ( email , password , firstname , lastname , dob , telephone , address1 , address2 , town , postcode ) ; ; return newUser ; }
tr	IDF	@ Test public void testReplaceWithEmptyAttributes ( ) { Map < AttributeKey , Object > attributes = new HashMap < AttributeKey , Object > ( ) ; Replacer replacer = ReplacerFactory . getInstance ( ReplacerType . SEQUENCE_NUMBER , attributes ) ; List < String > fileNames = new ArrayList < String > ( ) ; fileNames . add ( FileNameUtils . normalize ( "/home/fredy/axz" ) ) ; fileNames . add ( FileNameUtils . normalize ( "/home/fredy/bxz" ) ) ; fileNames . add ( FileNameUtils . normalize ( "/home/fredy/cxz" ) ) ; fileNames . add ( FileNameUtils . normalize ( "/home/fredy/dxz" ) ) ; fileNames . add ( FileNameUtils . normalize ( "/home/fredy/exz" ) ) ; List < String > newFileNames = replacer . replace ( fileNames ) ; assertEquals ( FileNameUtils . normalize ( "/home/fredy/axz" ) , newFileNames . get ( 0 ) ) ; assertEquals ( FileNameUtils . normalize ( "/home/fredy/bxz" ) , newFileNames . get ( 1 ) ) ; assertEquals ( FileNameUtils . normalize ( "/home/fredy/cxz" ) , newFileNames . get ( 2 ) ) ; assertEquals ( FileNameUtils . normalize ( "/home/fredy/dxz" ) , newFileNames . get ( 3 ) ) ; assertEquals ( FileNameUtils . normalize ( "/home/fredy/exz" ) , newFileNames . get ( 4 ) ) ; }
tr	IDF	@ SuppressWarnings ( "unchecked" ) private void initComponents ( ) { jLabel1 = new javax . swing . JLabel ( ) ; jLabel2 = new javax . swing . JLabel ( ) ; jLabel3 = new javax . swing . JLabel ( ) ; textNombre = new javax . swing . JTextField ( ) ; textTelefono = new javax . swing . JTextField ( ) ; textLaboratorio = new javax . swing . JTextField ( ) ; actualizarButton = new javax . swing . JButton ( ) ; cancelarButton = new javax . swing . JButton ( ) ; textCelular = new javax . swing . JTextField ( ) ; textDireccion = new javax . swing . JTextField ( ) ; jLabel4 = new javax . swing . JLabel ( ) ; jLabel5 = new javax . swing . JLabel ( ) ; setDefaultCloseOperation ( javax . swing . WindowConstants . DISPOSE_ON_CLOSE ) ; setTitle ( "Modificar proveedor" ) ; setResizable ( false ) ; jLabel1 . setText ( "Nombre:" ) ; jLabel2 . setText ( "Telefono:" ) ; jLabel3 . setText ( "Laboratorio:" ) ; textNombre . addKeyListener ( new java . awt . event . KeyAdapter ( ) { public void keyTyped ( java . awt . event . KeyEvent evt ) { textNombreKeyTyped ( evt ) ; } } ) ; textTelefono . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { textTelefonoActionPerformed ( evt ) ; } } ) ; textTelefono . addKeyListener ( new java . awt . event . KeyAdapter ( ) { public void keyTyped ( java . awt . event . KeyEvent evt ) { textTelefonoKeyTyped ( evt ) ; } } ) ; textLaboratorio . addKeyListener ( new java . awt . event . KeyAdapter ( ) { public void keyTyped ( java . awt . event . KeyEvent evt ) { textLaboratorioKeyTyped ( evt ) ; } } ) ; actualizarButton . setIcon ( new javax . swing . ImageIcon ( getClass ( ) . getResource ( "/farmacia/images.jpg" ) ) ) ; actualizarButton . setText ( "Actualizar" ) ; actualizarButton . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { actualizarButtonActionPerformed ( evt ) ; } } ) ; cancelarButton . setIcon ( new javax . swing . ImageIcon ( getClass ( ) . getResource ( "/farmacia/eliminar.jpg" ) ) ) ; cancelarButton . setText ( "Cancelar" ) ; cancelarButton . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { cancelarButtonActionPerformed ( evt ) ; } } ) ; textCelular . addKeyListener ( new java . awt . event . KeyAdapter ( ) { public void keyTyped ( java . awt . event . KeyEvent evt ) { textCelularKeyTyped ( evt ) ; } } ) ; textDireccion . addKeyListener ( new java . awt . event . KeyAdapter ( ) { public void keyTyped ( java . awt . event . KeyEvent evt ) { textDireccionKeyTyped ( evt ) ; } } ) ; jLabel4 . setText ( "Celular:" ) ; jLabel5 . setText ( "Direccion:" ) ; javax . swing . GroupLayout layout = new javax . swing . GroupLayout ( getContentPane ( ) ) ; getContentPane ( ) . setLayout ( layout ) ; layout . setHorizontalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addContainerGap ( ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( jLabel3 ) . addGroup ( javax . swing . GroupLayout . Alignment . TRAILING , layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( jLabel1 ) . addComponent ( jLabel2 ) ) . addComponent ( jLabel4 , javax . swing . GroupLayout . Alignment . TRAILING ) . addComponent ( jLabel5 , javax . swing . GroupLayout . Alignment . TRAILING ) ) . addGap ( 18 , 18 , 18 ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING , false ) . addGroup ( layout . createSequentialGroup ( ) . addGap ( 19 , 19 , 19 ) . addComponent ( actualizarButton ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addComponent ( cancelarButton ) ) . addComponent ( textTelefono ) . addComponent ( textNombre ) . addComponent ( textLaboratorio ) . addComponent ( textCelular ) . addComponent ( textDireccion ) ) . addContainerGap ( javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) ) ) ; layout . setVerticalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addGap ( 31 , 31 , 31 ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE ) . addComponent ( jLabel1 ) . addComponent ( textNombre , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . UNRELATED ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE ) . addComponent ( jLabel2 ) . addComponent ( textTelefono , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . UNRELATED ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE ) . addComponent ( jLabel3 ) . addComponent ( textLaboratorio , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . UNRELATED ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE ) . addComponent ( textCelular , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) . addComponent ( jLabel4 ) ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . UNRELATED ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE ) . addComponent ( textDireccion , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) . addComponent ( jLabel5 ) ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE ) . addComponent ( actualizarButton ) . addComponent ( cancelarButton ) ) . addGap ( 30 , 30 , 30 ) ) ) ; pack ( ) ; }
tr	KEY	public Person ( ) { super ( "" ) ; }
tr	IDF	private static void checkSplits ( int [ ] indexes ) { int splits = 0 ; for ( int split1 = 1 ; split1 < indexes . length - 1 ; split1 ++ ) { for ( int split2 = split1 + 1 ; split2 < indexes . length ; split2 ++ ) { splits ++ ; System . out . print ( "# split (" + split1 + "  " + split2 + "):" ) ; for ( int i = 0 ; i < split1 ; i ++ ) { System . out . print ( indexes [ i ] ) ; } System . out . print ( " - " ) ; for ( int j = split1 ; j < split2 ; j ++ ) { System . out . print ( indexes [ j ] ) ; } System . out . print ( " - " ) ; for ( int k = split2 ; k < indexes . length ; k ++ ) { System . out . print ( indexes [ k ] ) ; } } } System . out . println ( "# number of splits = " + splits ) ; }
tr	IDF	public MenuSimulateur ( ) { init ( ) ; initJpanel ( ) ; initListener ( ) ; this . setVisible ( true ) ; }
tr	KEY	public void rotateX ( double radians ) ;
tr	IDF	@ Test public final void testGetWithIndex_WhenNot ( ) { final OrderedProperties props = new OrderedProperties ( ) ; assertNull ( props . getWithIndex ( "key3" ) ) ; }
tr	IDF	private void eliminarButtonActionPerformed ( java . awt . event . ActionEvent evt ) { try { int aviso = JOptionPane . showConfirmDialog ( this , "Esta seguro que desea eliminar este medicamento?" , "Eliminar medicamento" , JOptionPane . YES_NO_OPTION ) ; if ( aviso == JOptionPane . YES_OPTION ) { stmt . executeUpdate ( "DELETE FROM medicamentos where Id_medicamentos='" + id_borrar + "'" ) ; JOptionPane . showMessageDialog ( this , "Medicamento eliminado exitosamente." , "Medicamento eliminado" , WIDTH ) ; DefaultTableModel modelo = ( DefaultTableModel ) jTable1 . getModel ( ) ; int row = jTable1 . getSelectedRow ( ) ; modelo . removeRow ( row ) ; } } catch ( SQLException ex ) { JOptionPane . showMessageDialog ( this , "Error al tratar de conectar la base  verifica tus datos de conexion" ) ; } }
tr	KEY	public int getWidth ( ) { return width ; }
tr	IDF	@ Override protected void __doGet ( HttpServletRequest req , HttpServletResponse resp ) throws IOException , ServletException { }
tr	KEY	@ Override public double [ ] getWeights ( ) { double [ ] result = { 5 , 5 , 5 , 5 } ; return result ; }
tr	KEY	@ After public void tearDown ( ) throws Exception { light = null ; baos = null ; ps = null ; old = null ; expected = null ; actual = null ; }
tr	KEY	public int getNumOneVillageTile ( ) { return numOneVillageTile ; }
tr	KEY	public void finalize ( ) { removeMouseListener ( this ) ; removeMouseMotionListener ( this ) ; }
tr	KEY	public int getStepDE ( ) { return stepDE ; }
tr	IDF	public static int [ ] countSort ( int [ ] a ) { int b [ ] = new int [ a . length ] ; int max = a [ 0 ] , min = a [ 0 ] ; for ( int i : a ) { if ( i > max ) { max = i ; } if ( i < min ) { min = i ; } } int k = max - min + 1 ; int c [ ] = new int [ k ] ; for ( int i = 0 ; i < a . length ; ++ i ) { c [ a [ i ] - min ] += 1 ; } for ( int i = 1 ; i < c . length ; ++ i ) { c [ i ] = c [ i ] + c [ i - 1 ] ; } for ( int i = a . length - 1 ; i >= 0 ; -- i ) { b [ -- c [ a [ i ] - min ] ] = a [ i ] ; } return b ; }
tr	KEY	public void setNumberOfPlays ( int plays ) ;
tr	IDF	private void doRegister ( HttpServletRequest request , HttpServletResponse response ) throws IOException { String username = request . getParameter ( "username" ) ; String password = request . getParameter ( "password" ) ; UserSession newSession = new UserSession ( username , request . getSession ( ) . getId ( ) , UserState . WAIT_USER_REG ) ; newSession . startWaiting ( ) ; sessions . put ( request . getSession ( ) . getId ( ) , newSession ) ; messageSystem . sendMessage ( new MsgRegister ( getAddress ( ) , messageSystem . getAddressService ( ) . getAddress ( AccountServiceImpl . class ) , username , password , newSession . getSsid ( ) ) ) ; response . sendRedirect ( Pages . REG_PAGE ) ; }
tr	IDF	public static void delCat ( String selected ) throws SQLException { try ( Connection conn = DbConnect . Connect ( ) ) { String sql = "DELETE FROM categories WHERE catagoryid=" + Integer . parseInt ( selected ) ; conn . createStatement ( ) . executeUpdate ( sql ) ; conn . close ( ) ; } }
tr	IDF	public void P2keyDetection ( ) { if ( Greenfoot . isKeyDown ( "shift" ) ) { if ( P2character . equals ( "White" ) ) whiteKnight . control ( "jump" ) ; if ( P2character . equals ( "Bond" ) ) jamesBond . control ( "jump" ) ; if ( P2character . equals ( "Ninja" ) ) redNinja . control ( "jump" ) ; if ( P2character . equals ( "Mage" ) ) purpleMage . control ( "jump" ) ; if ( P2character . equals ( "Ringer" ) ) markGreen . control ( "jump" ) ; } else if ( Greenfoot . isKeyDown ( "/" ) ) { if ( P2character . equals ( "White" ) ) whiteKnight . control ( "attack" ) ; if ( P2character . equals ( "Bond" ) ) jamesBond . control ( "attack" ) ; if ( P2character . equals ( "Ninja" ) ) redNinja . control ( "attack" ) ; if ( P2character . equals ( "Mage" ) ) purpleMage . control ( "attack" ) ; if ( P2character . equals ( "Ringer" ) ) markGreen . control ( "attack" ) ; } else if ( Greenfoot . isKeyDown ( "up" ) ) { if ( P2character . equals ( "White" ) ) whiteKnight . control ( "moveUp" ) ; if ( P2character . equals ( "Bond" ) ) jamesBond . control ( "moveUp" ) ; if ( P2character . equals ( "Ninja" ) ) redNinja . control ( "moveUp" ) ; if ( P2character . equals ( "Mage" ) ) purpleMage . control ( "moveUp" ) ; if ( P2character . equals ( "Ringer" ) ) markGreen . control ( "moveUp" ) ; } else if ( Greenfoot . isKeyDown ( "left" ) && ! Greenfoot . isKeyDown ( "j" ) ) { if ( P2character . equals ( "White" ) ) whiteKnight . control ( "moveLeft" ) ; if ( P2character . equals ( "Bond" ) ) jamesBond . control ( "moveLeft" ) ; if ( P2character . equals ( "Ninja" ) ) redNinja . control ( "moveLeft" ) ; if ( P2character . equals ( "Mage" ) ) purpleMage . control ( "moveLeft" ) ; if ( P2character . equals ( "Ringer" ) ) markGreen . control ( "moveLeft" ) ; } else if ( Greenfoot . isKeyDown ( "right" ) && ! Greenfoot . isKeyDown ( "j" ) ) { if ( P2character . equals ( "White" ) ) whiteKnight . control ( "moveRight" ) ; if ( P2character . equals ( "Bond" ) ) jamesBond . control ( "moveRight" ) ; if ( P2character . equals ( "Ninja" ) ) redNinja . control ( "moveRight" ) ; if ( P2character . equals ( "Mage" ) ) purpleMage . control ( "moveRight" ) ; if ( P2character . equals ( "Ringer" ) ) markGreen . control ( "moveRight" ) ; } else { if ( P2character . equals ( "White" ) ) whiteKnight . control ( "null" ) ; if ( P2character . equals ( "Bond" ) ) jamesBond . control ( "null" ) ; if ( P2character . equals ( "Ninja" ) ) redNinja . control ( "null" ) ; if ( P2character . equals ( "Mage" ) ) purpleMage . control ( "null" ) ; if ( P2character . equals ( "Ringer" ) ) markGreen . control ( "null" ) ; } if ( Greenfoot . isKeyDown ( "." ) ) { if ( P2character . equals ( "White" ) ) whiteKnight . control ( "abilityH" ) ; if ( P2character . equals ( "Bond" ) ) jamesBond . control ( "abilityH" ) ; if ( P2character . equals ( "Ninja" ) ) redNinja . control ( "abilityH" ) ; if ( P2character . equals ( "Mage" ) ) purpleMage . control ( "abilityH" ) ; if ( P2character . equals ( "Ringer" ) ) markGreen . control ( "abilityH" ) ; } else if ( Greenfoot . isKeyDown ( " " ) ) { if ( P2character . equals ( "White" ) ) whiteKnight . control ( "abilityR" ) ; if ( P2character . equals ( "Bond" ) ) jamesBond . control ( "abilityR" ) ; if ( P2character . equals ( "Ninja" ) ) redNinja . control ( "abilityR" ) ; if ( P2character . equals ( "Mage" ) ) purpleMage . control ( "abilityR" ) ; if ( P2character . equals ( "Ringer" ) ) markGreen . control ( "abilityR" ) ; } else if ( Greenfoot . isKeyDown ( "m" ) ) { if ( P2character . equals ( "White" ) ) whiteKnight . control ( "abilityT" ) ; if ( P2character . equals ( "Bond" ) ) jamesBond . control ( "abilityT" ) ; if ( P2character . equals ( "Ninja" ) ) redNinja . control ( "abilityT" ) ; if ( P2character . equals ( "Mage" ) ) purpleMage . control ( "abilityT" ) ; if ( P2character . equals ( "Ringer" ) ) markGreen . control ( "abilityT" ) ; } else if ( Greenfoot . isKeyDown ( "n" ) ) { if ( P2character . equals ( "White" ) ) whiteKnight . control ( "abilityUlt" ) ; if ( P2character . equals ( "Bond" ) ) jamesBond . control ( "abilityUlt" ) ; if ( P2character . equals ( "Ninja" ) ) redNinja . control ( "abilityUlt" ) ; if ( P2character . equals ( "Mage" ) ) purpleMage . control ( "abilityUlt" ) ; if ( P2character . equals ( "Ringer" ) ) markGreen . control ( "abilityUlt" ) ; } }
tr	IDF	@ BeforeMethod public void beforeMethod ( ) { database = new Database ( "first_db" ) ; colDefs = new LinkedHashMap < > ( ) ; colDefs . put ( "foo" , new ColumnDefinition ( DataType . float , false , true ) ) ; colDefs . put ( "bar" , new ColumnDefinition ( DataType . INTEGER ) ) ; colDefs . put ( "baz" , new ColumnDefinition ( DataType . STRING , true , false ) ) ; Table table = new Table ( "table_1" , colDefs ) ; database . add ( table ) ; parser = new Parser ( database ) ; parser . parse ( "insert into table_1 values (15.46  17  'testing');" ) . executeModification ( ) ; parser . parse ( "insert into table_1 values (13  27  'foo');" ) . executeModification ( ) ; parser . parse ( "insert into table_1 values (57735.12  1  'this');" ) . executeModification ( ) ; parser . parse ( "insert into table_1 values (0.0007  3486978  'is');" ) . executeModification ( ) ; parser . parse ( "insert into table_1 values (1556.345  8975  'testing');" ) . executeModification ( ) ; }
tr	IDF	public void setInputChannel ( ) { this . channel = 3 ; System . out . println ( location + " TV channel is set for DVD" ) ; }
tr	IDF	public PosMenu ( VP vp ) { posMenu = new Menu ( "Kassen" ) ; PosItem showPOSitem = new PosItem ( vp ) ; posMenu . getItems ( ) . addAll ( showPOSitem . getPosItem ( ) ) ; }
tr	IDF	private void drillkeyTFActionPerformed ( java . awt . event . ActionEvent evt ) { }
tr	IDF	@ Override public int hashCode ( ) { final int prime = 31 ; int result = 1 ; result = prime * result + ( int ) ( id ^ ( id >>> 32 ) ) ; return result ; }
tr	KEY	public void incrementNumberOfPlays ( ) { numberOfPlays ++ ; }
tr	KEY	public void setTimeZoneOffset ( long value ) { this . timeZoneOffset = value ; }
tr	KEY	public long getWidth ( ) { return width ; }
tr	IDF	public void connect ( TreeLinkNode root ) { if ( root == null ) return ; TreeLinkNode left = root . left ; TreeLinkNode right = root . right ; connect ( left ) ; connect ( right ) ; while ( left != null && right != null ) { left . next = right ; left = left . right ; right = right . left ; } }
tr	KEY	public void setOffset ( long value ) { this . offset = value ; }
tr	KEY	public void windowIconified ( final WindowEvent e ) { }
tr	IDF	public int getPages ( int intRegsPerPag , ArrayList < FilterBean > alFilter , HashMap < String , String > hmOrder ) throws Exception { int pages ; try { oMysql . conexion ( enumTipoConexion ) ; pages = oMysql . getPages ( "entrada" , intRegsPerPag , alFilter , hmOrder ) ; oMysql . desconexion ( ) ; return pages ; } catch ( Exception e ) { throw new Exception ( "EntradaDao.getPages: Error: " + e . getMessage ( ) ) ; } finally { oMysql . desconexion ( ) ; } }
tr	IDF	public static String drawRequirementElement ( RequirementElement target , RequirementElement reference , String direction ) { String layer = target . getLayer ( ) ; double x = 0 , y = 0 ; String position = "" ; if ( direction . equals ( "up" ) ) { x = reference . origin_x ; y = reference . origin_y - 200 ; } else if ( direction . equals ( "down" ) ) { x = reference . origin_x ; y = reference . origin_y + 200 ; } else if ( direction . equals ( "left" ) ) { x = reference . origin_x - 200 ; y = reference . origin_y ; } else if ( direction . equals ( "right" ) ) { x = reference . origin_x + 200 ; y = reference . origin_y ; } else { } position = "{" + x + " " + y + "}" ; target . origin_x = x ; target . origin_y = y ; String shape = InfoEnum . reverse_req_elem_type_map . get ( target . getType ( ) ) ; String name = target . getName ( ) ; String corner_radius = "0" ; String stroke_pattern = "0" ; String thickness = "1" ; if ( target . getType ( ) . equals ( InfoEnum . RequirementElementType . DOMAIN_ASSUMPTION . name ( ) ) ) { corner_radius = "5" ; } else if ( target . getType ( ) . equals ( InfoEnum . RequirementElementType . SECURITY_GOAL . name ( ) ) ) { name = "(S)\n" + name ; } else if ( target . getType ( ) . equals ( InfoEnum . RequirementElementType . SECURITY_MECHANISM . name ( ) ) ) { name = "(S)\n" + name ; } else if ( target . getType ( ) . equals ( InfoEnum . RequirementElementType . ANTI_GOAL . name ( ) ) ) { stroke_pattern = "2" ; thickness = "2" ; } int size_type = 0 ; if ( target . getType ( ) . equals ( InfoEnum . RequirementElementType . ACTOR . name ( ) ) ) { size_type = InfoEnum . ACTOR_SIZE ; } else if ( target . getType ( ) . equals ( InfoEnum . RequirementElementType . MIDDLE_POINT . name ( ) ) ) { size_type = InfoEnum . POINT_SIZE ; } return drawArbitraryRequirementElement ( InfoEnum . REQ_TARGET_CANVAS , layer , shape , size_type , position , corner_radius , name , stroke_pattern , thickness ) ; }
tr	KEY	public boolean interact ( String action , Interactable target ) { if ( super . interact ( action , target ) ) { return true ; } else if ( action . equals ( "sleep" ) ) { return this . sleep ( ) ; } return false ; }
tr	KEY	protected abstract String getXMLPropertyDefinitionEnd ( ) ;
tr	KEY	public int hashCode ( ) { return toString ( ) . hashCode ( ) ; }
tr	KEY	public boolean isEnabled ( ) { return enabled ; }
tr	KEY	public double getDepth ( ) { return depth ; }
tr	IDF	public void setMessages ( List < Message > messages ) { this . messages = messages ; }
tr	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { jBConsultarChamadosActionPerformed ( evt ) ; }
tr	KEY	public int getStartRow ( ) { return ( this . getCurrentPage ( ) - 1 ) * this . pageSize + 1 ; }
tr	IDF	@ SuppressWarnings ( "serial" ) @ Override public void findClasses ( ) { possibleClasses = new ArrayList < String > ( ) { { add ( "a" ) ; add ( "b" ) ; add ( "c" ) ; add ( "d" ) ; add ( "e" ) ; add ( "f" ) ; add ( "g" ) ; add ( "h" ) ; add ( "i" ) ; add ( "j" ) ; add ( "k" ) ; add ( "l" ) ; add ( "m" ) ; add ( "n" ) ; add ( "o" ) ; add ( "p" ) ; add ( "q" ) ; add ( "r" ) ; add ( "s" ) ; add ( "t" ) ; add ( "u" ) ; add ( "v" ) ; add ( "w" ) ; add ( "x" ) ; add ( "y" ) ; add ( "z" ) ; } } ; }
tr	IDF	public void setSex ( String sex ) { this . sex = Sex . valueOf ( sex ) ; }
tr	KEY	@ Override public final int getWindingRule ( ) { return src . getWindingRule ( ) ; }
tr	IDF	@ Override public void actionPerformed ( ActionEvent e ) { System . exit ( 0 ) ; }
tr	IDF	private void jButton1ActionPerformed ( java . awt . event . ActionEvent evt ) { dispose ( ) ; }
tr	KEY	public void setColumn ( int column ) { this . column = column ; }
tr	IDF	public static void main ( String [ ] args ) { boolean [ ] primes = new boolean [ 10000000 ] ; for ( int i = 2 ; i < primes . length ; i ++ ) primes [ i ] = true ; for ( int i = 2 ; i < primes . length ; i ++ ) if ( primes [ i ] ) for ( int j = 2 ; i * j < primes . length ; j ++ ) primes [ i * j ] = false ; ArrayList < BigInteger > primeList = new ArrayList < BigInteger > ( ) ; for ( int i = 0 ; i < primes . length ; i ++ ) if ( primes [ i ] ) primeList . add ( new BigInteger ( i + "" ) ) ; ArrayList < BigInteger > repunits = new ArrayList < BigInteger > ( ) ; for ( int i = 2 ; i <= 100000 ; i ++ ) { int factorize = i ; int twos = 0 ; while ( factorize % 2 == 0 ) { factorize /= 2 ; twos ++ ; } while ( factorize % 5 == 0 ) factorize /= 5 ; if ( factorize == 1 && twos < 10 ) { String temp = "" ; for ( int k = 0 ; k < i ; k ++ ) temp += "1" ; repunits . add ( new BigInteger ( temp ) ) ; } } BigInteger sum = BigInteger . ZERO ; int count = 0 ; for ( int i = 0 ; i < primeList . size ( ) && count < 40 ; i ++ ) { BigInteger current = primeList . get ( i ) ; boolean found = false ; for ( int j = 0 ; j < repunits . size ( ) && ! found ; j ++ ) if ( repunits . get ( j ) . remainder ( current ) . compareTo ( BigInteger . ZERO ) == 0 ) { found = true ; count ++ ; sum = sum . add ( current ) ; } } System . out . println ( sum ) ; }
tr	IDF	public static JSONObject toJSONObject ( String string ) throws JSONException { JSONObject o = new JSONObject ( ) ; JSONTokener x = new JSONTokener ( string ) ; while ( x . more ( ) ) { String name = Cookie . unescape ( x . nextTo ( = ) ) ; x . next ( = ) ; o . put ( name , Cookie . unescape ( x . nextTo ( ; ) ) ) ; x . next ( ) ; } return o ; }
tr	IDF	TailSection ( int x , int y ) { this . xCordinate = x ; this . yCordinate = y ; }
tr	IDF	public void getDBContents ( ) { List < Software > entries = dbSource . fireQuery ( query ) ; this . data = new Object [ entries . size ( ) ] [ columnNames . length ] ; for ( int i = 0 ; i < entries . size ( ) ; ++ i ) { Software currentSoftware = entries . get ( i ) ; data [ i ] [ 0 ] = currentSoftware . getId ( ) ; data [ i ] [ 1 ] = currentSoftware . getHersteller ( ) ; data [ i ] [ 2 ] = currentSoftware . getName ( ) ; data [ i ] [ 3 ] = currentSoftware . getEdition ( ) ; data [ i ] [ 4 ] = currentSoftware . getPreis ( ) + " \u20AC" ; } }
tr	KEY	public static double acos ( double arg ) { if ( arg > 1 || arg < - 1 ) { return nan ; } return PIO2 - asin ( arg ) ; }
tr	KEY	public void setTime ( long time ) ;
tr	IDF	public ElementaryFileCIAInfo ( int version , String manufacturerId , byte [ ] cardFlags , AlgorithmInfo [ ] algorithmInfos ) { this . version = version ; this . manufacturerId = manufacturerId ; this . cardFlags = cardFlags ; this . algorithmInfos = algorithmInfos ; }
tr	KEY	public void setDes_blanco ( double des_blanco ) { this . des_blanco = des_blanco ; }
tr	IDF	public void setMaritalStatus ( LabeledDropdown maritalStatus ) { this . maritalStatus = maritalStatus ; }
tr	KEY	public double getReturns ( ) { return returns ; }
tr	KEY	public long getTagGroupID ( ) { return tagGroupID ; }
tr	IDF	@ Override public void leftMultiply ( Matrix other ) { }
tr	IDF	@ Override public void stateChanged ( ChangeEvent e ) { if ( _player != null ) _player . setVolume ( ( ( double ) ( ( JSlider ) e . getSource ( ) ) . getValue ( ) ) / 10 ) ; }
tr	KEY	public SummaryRanges ( ) { }
tr	IDF	public LevelInterface generateLevel ( String detailedInfo ) ;
tr	KEY	@ Override public void definirDefense ( ) { }
tr	KEY	public boolean interact ( String action , Interactable target ) { if ( super . interact ( action , target ) ) { return true ; } else if ( action . equals ( "put" ) ) { return this . put ( target ) ; } else if ( action . equals ( "remove" ) ) { return this . remove ( target ) ; } return false ; }
tr	KEY	public int getRowId ( ) { return rowId ; }
tr	KEY	protected abstract String getQueueName ( ) ;
tr	IDF	public int hammingWeight ( int n ) { int count = 0 ; while ( n != 0 ) { count ++ ; n &= n - 1 ; } return count ; }
tr	KEY	public int getId ( ) { return id ; }
tr	IDF	public void setNonadmDate ( String aval ) throws Exception { nonadmdate = dtfmt . parse ( aval ) ; }
tr	KEY	public void run ( ) { new GUIResultadosPartidos ( ) . setVisible ( true ) ; }
tr	IDF	private void repaintScore ( ) { scoreLabel . setText ( "Score: " + game . getScore ( ) ) ; }
tr	KEY	public boolean isBlackPiece ( ) { return ! ( isKing || isWhite ) ; }
tr	IDF	public void getMailProperties ( ) { this . properties = new Properties ( ) ; this . properties . put ( "mail.smtp.auth" , "true" ) ; this . properties . put ( "mail.smtp.starttls.enable" , "true" ) ; this . properties . put ( "mail.smtp.host" , "smtp.gmail.com" ) ; this . properties . put ( "mail.smtp.port" , "587" ) ; }
tr	IDF	public FeatureVector getSibFeatureVector ( int p , int a1 , int a2 , int r1 , int r2 ) { int id = sib2id [ ( p2id [ p ] * N + a1 ) * N + a2 ] ; Utils . assert ( id >= 0 ) ; int pos = ( id * L + r1 ) * L + r2 ; FeatureDataItem item = consSib [ pos ] ; if ( item == null ) { FeatureVector fv = pipe . smnFactory . addSibFeatures ( inst , p , a1 , a2 , r1 , r2 ) ; double score = parameters . dotProduct2 ( fv ) * gamma2 ; item = new FeatureDataItem ( fv , score ) ; consSib [ pos ] = item ; } return item . fv ; }
tr	KEY	public void setPageSize ( int value ) { this . pageSize = value ; }
tr	KEY	public void setLote ( long lote ) { this . lote = lote ; }
tr	KEY	@ Override public void execute ( ) { this . setScreenLocation ( ) ; this . setVisible ( true ) ; }
tr	IDF	private static Object [ ] makeArray2 ( Object key , Object value , Object [ ] left , Object [ ] right ) { int lnkeys = ( left == null ? 0 : left . length >> 1 ) ; int rnkeys = ( right == null ? 0 : right . length >> 1 ) ; int nkeys = lnkeys + 1 + rnkeys ; Object [ ] a = new Object [ nkeys << 1 ] ; for ( int i = 0 ; i < lnkeys ; ++ i ) { a [ i ] = left [ i ] ; a [ i + nkeys ] = left [ i + lnkeys ] ; } a [ lnkeys ] = key ; a [ lnkeys + nkeys ] = value ; for ( int i = 0 ; i < rnkeys ; ++ i ) { a [ i + lnkeys + 1 ] = right [ i ] ; a [ i + lnkeys + 1 + nkeys ] = right [ i + rnkeys ] ; } return a ; }
tr	KEY	public int getSnakeCount ( ) { return ( snakes . size ( ) ) ; }
tr	IDF	private void editTf ( ) { int dim = fodTools . getFormula ( ) . length ; int oNum = outTools . getFormula ( ) . length ; TfDialog tf = new TfDialog ( title , dim , oNum , params , parent . getPanel ( ) . getParams ( ) ) ; if ( tf . isOk ( ) ) { String [ ] xf = makeSysEqn ( dim , tf ) ; fodTools . setFormula ( xf ) ; String [ ] of = makeOutputEqn ( dim , oNum , tf ) ; outTools . setFormula ( of ) ; } }
tr	KEY	public void setIduser ( int iduser ) { this . iduser = iduser ; }
tr	IDF	private FileSystemEventType toType ( WatchEvent . Kind < ? > kind ) { if ( kind == StandardWatchEventKinds . ENTRY_CREATE ) { return FileSystemEventType . CREATE ; } if ( kind == StandardWatchEventKinds . ENTRY_DELETE ) { return FileSystemEventType . DELETE ; } if ( kind == StandardWatchEventKinds . ENTRY_MODIFY ) { return FileSystemEventType . MODIFY ; } throw new RuntimeException ( "Unknown type of WatchEvent: " + kind ) ; }
tr	KEY	public void run ( ) { new Promocion ( ) . setVisible ( true ) ; }
tr	KEY	public void setYFood ( int [ ] yFood ) { this . yFood = yFood ; }
tr	IDF	private void insertTweetsList ( ArrayList < tweetModel > tweets ) { model = ( DefaultTableModel ) tweetTable . getModel ( ) ; model . setRowCount ( 0 ) ; for ( tweetModel tm : tweets ) model . addRow ( new Object [ ] { tm } ) ; }
tr	KEY	private LAFactory ( ) { }
tr	KEY	public int size ( ) { return discs . size ( ) ; }
tr	KEY	@ Override public void run ( ) { new MainFrame ( ) . setVisible ( true ) ; }
tr	IDF	public boolean wasProperlyClosed ( ) { try ( RandomAccessFile file = new RandomAccessFile ( f , "r" ) ) { long index , length ; length = file . length ( ) ; index = length - 1 ; file . seek ( index ) ; return ( file . read ( ) == 28 ) ; } catch ( FileNotFoundException e ) { e . printStackTrace ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return false ; }
tr	KEY	public Builder ( ) { }
tr	IDF	public void gravarPartidas ( List < DadosPartida > partidas ) throws IOException { ArrayList < DadosPartida > partidasAPersistir = new ArrayList < DadosPartida > ( partidas ) ; arquivo . escrever ( partidasAPersistir ) ; }
tr	IDF	@ Override public void afterCommand ( VcsCommand < ? > command ) { for ( VcsCommand . Listener listener : listeners ) { listener . afterCommand ( command ) ; } }
tr	IDF	public void setUserCart ( Cart userCart ) { this . userCart = userCart ; }
tr	IDF	@ Override public boolean checaTipo ( AmbienteCompilacao ambiente ) throws IdentificadorJaDeclaradoException , IdentificadorNaoDeclaradoException { boolean result = expressao . checaTipo ( ambiente ) ; if ( result ) { ambiente . map ( id , expressao . getTipo ( ambiente ) ) ; } return result ; }
tr	KEY	public double getA ( ) { return a ; }
tr	KEY	public void setPID ( int pID ) { this . pID = pID ; }
tr	IDF	public ReportingAPI ( Configuration config ) { this . config = config ; connector = new HttpsConnector ( config . getMerchantId ( ) , config . getReportingApiPasscode ( ) ) ; connector . setCustomHttpClient ( config . getCustomHttpClient ( ) ) ; }
tr	IDF	public DeclaracaoVariavel ( Id id , Expressao expressao ) { this . id = id ; this . expressao = expressao ; }
tr	IDF	private LocalMap parseLocalMap ( String size ) { return new LocalMap ( Integer . parseInt ( size . split ( "x" ) [ 0 ] ) , Integer . parseInt ( size . split ( "x" ) [ 1 ] ) ) ; }
tr	IDF	public DynamicEditor ( DynaSys dyn ) { this . setModal ( true ) ; this . parent = dyn ; xFormula = dyn . getXFormula ( ) ; yFormula = dyn . getYFormula ( ) ; title = dyn . getName ( ) ; x0 = dyn . getX0 ( ) ; inputDim = dyn . getInputU ( ) . getDim ( ) ; this . setTitle ( "Editing [" + title + "]" ) ; fodTools = new FormulaTools ( "State Equations" , "f" , xFormula , true , params , dyn . getPanel ( ) . getParams ( ) ) ; outTools = new FormulaTools ( "Output Equations" , "y" , yFormula , true , params , dyn . getPanel ( ) . getParams ( ) ) ; addHelpMenu ( ) ; JPanel topPanel = new JPanel ( ) ; topPanel . add ( new JLabel ( "Name:" ) ) ; topPanel . add ( titleField ) ; topPanel . add ( new BlankPanel ( 10 , true ) ) ; topPanel . add ( new JLabel ( "available inputs::" ) ) ; topPanel . add ( varField ) ; varField . setEditable ( false ) ; topPanel . add ( new BlankPanel ( 10 , true ) ) ; topPanel . add ( setInitBtn ) ; topPanel . add ( new BlankPanel ( 10 , true ) ) ; topPanel . add ( tfBtn ) ; topPanel . add ( new BlankPanel ( 10 , true ) ) ; topPanel . add ( paramBtn ) ; topPanel . add ( new BlankPanel ( 10 , true ) ) ; topPanel . add ( okBtn ) ; topPanel . add ( cancelBtn ) ; paramBtn . addActionListener ( this ) ; okBtn . addActionListener ( this ) ; cancelBtn . addActionListener ( this ) ; tfBtn . addActionListener ( this ) ; setInitBtn . addActionListener ( this ) ; titleField . addActionListener ( this ) ; JPanel window = new JPanel ( ) ; window . setLayout ( new BoxLayout ( window , BoxLayout . X_AXIS ) ) ; window . add ( fodTools ) ; window . add ( outTools ) ; add ( topPanel , BorderLayout . NORTH ) ; add ( window ) ; pack ( ) ; this . setLocationRelativeTo ( null ) ; }
tr	KEY	public int getI ( ) { return this . i ; }
tr	KEY	public void run ( ) { new Encuesta ( ) . setVisible ( true ) ; }
tr	KEY	public boolean getStatus ( ) { return status ; }
tr	IDF	public static void setUsuario ( String Usuario ) { Conexion . Usuario = Usuario ; }
tr	IDF	@ Override public int hashCode ( ) { int result = revision . hashCode ( ) ; result = 31 * result + ( revisionBefore . hashCode ( ) ) ; result = 31 * result + ( time . hashCode ( ) ) ; result = 31 * result + ( author . hashCode ( ) ) ; result = 31 * result + ( message . hashCode ( ) ) ; result = 31 * result + ( changes . hashCode ( ) ) ; return result ; }
tr	IDF	void open ( TcpConnection conn ) ;
tr	KEY	public void snooze ( ) { }
tr	KEY	public ImageRequest createImageRequest ( ) { return new ImageRequest ( ) ; }
tr	IDF	public int evalBlackPiece ( int r , int c , int topLeft , int topRight , int bottomLeft , int bottomRight ) { int total = 0 ; total += param1 ; if ( c == 9 || c == 0 ) { total += param3 ; } if ( bottomLeft == 0 ) { total += param5 ; } else if ( bottomRight == 0 ) { total += param5 ; } total += r * param7 ; if ( r < 3 ) { total += param9 ; } if ( r > 6 ) { total += param10 ; } int adjacent = 0 ; adjacent += ( Draughts . isBlack ( topLeft ) ) ? 1 : 0 ; adjacent += ( Draughts . isBlack ( topRight ) ) ? 1 : 0 ; adjacent += ( Draughts . isBlack ( bottomLeft ) ) ? 1 : 0 ; adjacent += ( Draughts . isBlack ( bottomRight ) ) ? 1 : 0 ; total += ( adjacent == 0 ) ? param11 : 0 ; total += PLAYGROUND [ 9 - r ] [ 9 - c ] ; return total ; }
tr	IDF	@ Override public String toString ( ) { String data ; DecimalFormat df = new DecimalFormat ( "000000000000" ) ; data = df . format ( idremito ) ; return data ; }
tr	IDF	@ Test public final void testCheckExists ( ) { final File file = new File ( "mock.txt" ) ; file . checkExists ( ) ; file . delete ( ) ; }
tr	KEY	@ Override public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( ) != obj . getClass ( ) ) { return false ; } final Buying other = ( Buying ) obj ; if ( double . doubleToLongBits ( this . price ) != double . doubleToLongBits ( other . price ) ) { return false ; } return true ; }
tr	IDF	public int roundDiv ( int dividend , int divisor ) { final int remainder = dividend % divisor ; if ( Math . abs ( remainder ) * 2 <= Math . abs ( divisor ) ) { return dividend / divisor ; } else { if ( dividend * divisor < 0 ) { return dividend / divisor - 1 ; } else { return dividend / divisor + 1 ; } } }
tr	KEY	public void on ( ) { on = true ; }
tr	KEY	public static PlayerStats getInstance ( ) { if ( instance == null ) instance = new PlayerStats ( ) ; return instance ; }
tr	IDF	public void setVelocity ( Vector2D velocity ) { this . velocity = velocity ; }
tr	IDF	public void generateAttackPatternModel ( String pattern_ids ) { CAPECXMLProcessing xmlProcessing = new CAPECXMLProcessing ( ) ; xmlProcessing . importAttackDomainFromFile ( ) ; LinkedList < String > ids = createNonRepeatedList ( pattern_ids ) ; for ( String id : ids ) { CAPECXMLQuerying xmlQuery = new CAPECXMLQuerying ( ) ; AttackPattern ap = xmlQuery . getAttackInfoAndRelations ( id ) ; LinkedList < String > threats = ap . getAllThreats ( ) ; String target = xmlProcessing . findAttackDomainByID ( id ) ; String general_task_id = AppleScript . drawArbitraryRequirementElement ( "Model set" , "none" , "Hexagon" , InfoEnum . NORMAL_SIZE , "(300 300)" , "0" , ap . name , "0" , "1" ) ; String goal_content = "" ; if ( threats != null ) { String goal_id = "" ; for ( String threat : threats ) { goal_content = "" ; goal_content += "Threat: " + threat + "\n" ; goal_content += "Target: " + target ; goal_id = AppleScript . drawArbitraryRequirementElement ( "Model set" , "none" , "Circle" , InfoEnum . NORMAL_SIZE , "(300 300)" , "0" , goal_content , "0" , "1" ) ; AppleScript . drawArbitraryRequirementLink ( "Model set" , "none" , goal_id , general_task_id , "Arrow" , "0" , "none" , "none" ) ; } } String context_content = "" ; for ( String context : ap . contexts ) { context_content += context + "\n" ; } for ( String prerequisite : ap . prerequisites ) { context_content += prerequisite + "\n" ; } String context_id = AppleScript . drawArbitraryRequirementElement ( "Model set" , "none" , "Rectangle" , InfoEnum . NORMAL_SIZE , "(300 300)" , "0" , context_content , "0" , "0" ) ; AppleScript . drawArbitraryRequirementLink ( "Model set" , "none" , context_id , general_task_id , "" , "0" , "none" , "none" ) ; if ( ap . steps . size ( ) > 1 ) { String mid_id = AppleScript . drawArbitraryRequirementElement ( "Model set" , "none" , "Circle" , InfoEnum . POINT_SIZE , "(300 300)" , "0" , "" , "0" , "1" ) ; AppleScript . drawArbitraryRequirementLink ( "Model set" , "none" , general_task_id , mid_id , "SharpArrow" , "0" , "none" , "none" ) ; String task_id = "" ; for ( String step : ap . steps ) { task_id = AppleScript . drawArbitraryRequirementElement ( "Model set" , "none" , "Hexagon" , InfoEnum . NORMAL_SIZE , "(300 300)" , "0" , step , "0" , "1" ) ; AppleScript . drawArbitraryRequirementLink ( "Model set" , "none" , mid_id , task_id , "" , "0" , "none" , "none" ) ; } } else { } System . out . println ( "Successfully draw the model!" ) ; } }
tr	KEY	public boolean isOpen ( ) { return service . isOpen ( ) ; }
tr	IDF	public void projectPoint ( double [ ] xyz , double [ ] pxy , double [ ] [ ] [ ] lights ) { double x = xyz [ 0 ] ; double y = xyz [ 1 ] ; double z = xyz [ 2 ] ; pxy [ 0 ] = w / 2 + ( int ) ( h * x / ( FL - z ) ) ; pxy [ 1 ] = h / 2 - ( int ) ( h * y / ( FL - z ) ) ; vertexColor ( xyz , lights ) ; pxy [ 2 ] = ( 255 * Math . pow ( RGB [ 0 ] , 0.45 ) ) ; pxy [ 3 ] = ( 255 * Math . pow ( RGB [ 1 ] , 0.45 ) ) ; pxy [ 4 ] = ( 255 * Math . pow ( RGB [ 2 ] , 0.45 ) ) ; pxy [ 5 ] = ( int ) ( FL * z / ( FL - z ) ) ; }
tr	KEY	private static boolean hasRevisionArgumentError ( LogResult logResult ) { if ( logResult . isSuccessful ( ) ) return false ; for ( String error : logResult . vcsErrors ( ) ) { if ( error . contains ( "E205000: Syntax error in revision argument" ) ) { return true ; } } return false ; }
tr	KEY	public Cell ( ) { _terrain = null ; _building = null ; _unit = null ; }
tr	KEY	public final int getCorrectlyAnswered ( ) { assert _statistics != null : "Question statistics is null" ; return _statistics . getCorrectlyAnswered ( ) ; }
tr	IDF	@ Override public boolean equals ( Object o ) { if ( o == this ) { return true ; } if ( o == null || ! ( o instanceof TIPPResource ) ) { return false ; } TIPPResource f = ( TIPPResource ) o ; return sectionType == f . sectionType && Objects . equals ( name , f . name ) && Objects . equals ( sequence , f . sequence ) ; }
tr	IDF	public Borrowing ( double price , Date date_borrowing , Date date_delivery ) { this . price = price ; this . date_borrowing = date_borrowing ; this . date_delivery = date_delivery ; }
tr	KEY	public OptionDAO ( ) { super ( Option . class ) ; }
tr	IDF	@ Override public int compareTo ( DadosPartida o ) { return Collator . getInstance ( ) . compare ( this . jogo . getNomeVencedor ( ) , o . jogo . getNomeVencedor ( ) ) ; }
tr	IDF	private void handleGamePlaying ( ) { final long startTime = System . currentTimeMillis ( ) ; camera . renderScene ( this , world ) ; final long elapsedTime = System . currentTimeMillis ( ) - startTime ; final double ct = ( double ) elapsedTime / 33.33d ; world . update ( ct ) ; }
tr	KEY	public void reset ( ) { this . actionPoints = testingActionPoints ; this . famePoints = 0 ; this . numOneRiceTile = 3 ; this . numOneVillageTile = 2 ; this . numTwoTile = 5 ; this . numActionTokens = 3 ; this . palaceCards = new ArrayList < PalaceCard > ( ) ; this . hasPlacedLandTile = false ; this . hasUsedActionToken = false ; this . developersArray = new Developer [ 12 ] ; this . palacesInteractedWith = new ArrayList < JavaCell > ( ) ; }
tr	KEY	public static void abilityHOver ( ) { abilityHDuration = false ; }
tr	KEY	@ Override public Administrator find ( int index ) { return null ; }
tr	KEY	int [ ] getArray ( ) { if ( DO_STATS ) { getOp ++ ; } final int [ ] array = intArrays . pollLast ( ) ; if ( array != null ) { return array ; } if ( DO_STATS ) { createOp ++ ; } return new int [ arraySize ] ; }
tr	KEY	synchronized public static ServerManager getServerManager ( ) { if ( manager == null ) { manager = new ServerManager ( ) ; } return manager ; }
tr	KEY	public void onSelectAnotherTool ( ) ;
tr	KEY	@ Override public int getColumnCount ( ) { return 3 ; }
tr	KEY	public long getId ( ) { return id ; }
tr	IDF	void write ( DataOutputStream out ) throws IOException ;
tr	KEY	public NewsResult createNewsResult ( ) { return new NewsResult ( ) ; }
tr	KEY	public Builder depthOfTrees ( int depthOfTrees ) { this . depthOfTrees = depthOfTrees ; return this ; }
tr	IDF	public ASTStmtSequence add ( ASTStatement s ) { seq . add ( s ) ; return this ; }
tr	IDF	@ Override protected void setEstadoVisualizacao ( ) { jTFChamado . setEditable ( false ) ; jTFFerramenta . setEditable ( false ) ; jLFerramentaChamado . setVisible ( false ) ; }
tr	IDF	public void setFC1RunDt ( String aval ) throws Exception { fc1rundt = dtfmt . parse ( aval ) ; }
tr	IDF	public void paintBoard ( Snake snake , Food food , Player player ) { TailSection [ ] tail = snake . getTail ( ) ; boardPanel . removeAll ( ) ; boardPanel . revalidate ( ) ; boardPanel . repaint ( ) ; for ( int i = 0 ; i < tail . length ; i ++ ) { tailLabels = new JLabel [ tail . length ] ; tailLabels [ i ] = new javax . swing . JLabel ( "O" ) ; boardPanel . add ( tailLabels [ i ] ) ; tailLabels [ i ] . setLocation ( tail [ i ] . getxCordinate ( ) * 10 , tail [ i ] . getyCordinate ( ) * 10 ) ; tailLabels [ i ] . setSize ( 10 , 10 ) ; } foodLabel = new JLabel ( ) ; foodLabel = new javax . swing . JLabel ( "X" ) ; boardPanel . add ( foodLabel ) ; foodLabel . setLocation ( food . getxFood ( ) * 10 , food . getyFood ( ) * 10 ) ; foodLabel . setSize ( 10 , 10 ) ; foodLabel . setForeground ( Color . magenta ) ; playerScoreLabel . setText ( Integer . toString ( player . getScore ( ) ) ) ; }
tr	KEY	public List < long > getRoomIds ( ) { return roomIds ; }
tr	KEY	public int getElementCount ( ) { return elements . size ( ) ; }
tr	IDF	public void setName ( String value ) { this . name = value ; }
tr	KEY	public synchronized void xsetRightThumbMouse ( ) { isLeftThumbMouse = false ; isRightThumbMouse = true ; }
tr	IDF	@ Override public GameCharacterObject setBasePont ( GameCharacterBasePoint basePoint ) { this . basePoint = basePoint ; return this ; }
tr	IDF	@ Override public String toString ( ) { return getParent ( ) . getName ( ) + "." + getName ( ) ; }
tr	IDF	private void repaintButtons ( ) { < . repaint ( ) ; lb . repaint ( ) ; l1 . repaint ( ) ; l2 . repaint ( ) ; l3 . repaint ( ) ; l4 . repaint ( ) ; l5 . repaint ( ) ; d1 . repaint ( ) ; d2 . repaint ( ) ; d3 . repaint ( ) ; d4 . repaint ( ) ; s1 . repaint ( ) ; s2 . repaint ( ) ; r1 . repaint ( ) ; r2 . repaint ( ) ; r3 . repaint ( ) ; r4 . repaint ( ) ; r5 . repaint ( ) ; x . repaint ( ) ; y . repaint ( ) ; b . repaint ( ) ; a . repaint ( ) ; rb . repaint ( ) ; rt . repaint ( ) ; }
tr	KEY	public void setSelected ( ) { selected = true ; }
tr	KEY	protected boolean examine ( ) { System . out . println ( "It looks like a femur of a human! It is charred and has tooth marks." ) ; return true ; }
tr	KEY	public void setStk_Act ( boolean stk_Act ) { this . stk_Act = stk_Act ; }
tr	KEY	public int getY ( ) { return ( int ) this . getSqCoordinate ( ) . getY ( ) ; }
tr	KEY	public boolean isSoundOn ( ) { return soundOn ; }
tr	IDF	@ XmlElementDecl ( namespace = "http://resource.faturamento.soa32/" , name = "updateResponse" ) public JAXBElement < UpdateResponse > createUpdateResponse ( UpdateResponse value ) { return new JAXBElement < UpdateResponse > ( _UpdateResponse_QNAME , UpdateResponse . class , null , value ) ; }
tr	IDF	static CommandLine svnLog ( String pathToSvn , String repositoryUrl , TimeRange timeRange , boolean useMergeHistory , boolean quoteDateRange ) { String mergeHistory = ( useMergeHistory ? "--use-merge-history" : "" ) ; @ SuppressWarnings ( "UnnecessaryLocalVariable" ) Charset svnXmlCharset = CharsetUtil . UTF8 ; return newExternalCommand ( pathToSvn , "log" , repositoryUrl , "-r" , svnDateRange ( timeRange , quoteDateRange ) , mergeHistory , "--verbose" , "--xml" ) . outputCharset ( svnXmlCharset ) ; }
tr	KEY	public JSONArray put ( int value ) { this . put ( new Integer ( value ) ) ; return this ; }
tr	KEY	public void setLon ( double lon ) { this . lon = lon ; }
tr	IDF	private ArrayList < Creature > getPossibleTargets ( ) { ArrayList < Creature > possibleTargets = new ArrayList < Creature > ( ) ; TileMap map = ( ( Ship ) parent ) . getParent ( ) . parent . getMap ( ) ; LinkedList sprites = map . getSprites ( ) ; for ( int i = 0 ; i < sprites . size ( ) ; i ++ ) { if ( distanceBetween ( ( Creature ) sprites . get ( i ) , this . parent ) < areaOfInterest ) { possibleTargets . add ( ( Creature ) sprites . get ( i ) ) ; } } ArrayList < Ship > aiShips = map . getAIShips ( ) ; for ( int i = 0 ; i < aiShips . size ( ) ; i ++ ) { if ( aiShips . get ( i ) != this . parent && distanceBetween ( aiShips . get ( i ) , this . parent ) < areaOfInterest ) { possibleTargets . add ( aiShips . get ( i ) ) ; } } return possibleTargets ; }
tr	IDF	public void stateChanged ( javax . swing . event . ChangeEvent evt ) { jslideMatchPairsStateChanged ( evt ) ; }
tr	IDF	public static String getAddressFromArgument ( String remainCommandStr ) { String address = null ; if ( ( remainCommandStr != null ) && ( remainCommandStr . indexOf ( ":" ) > 0 ) ) { int colonIndex = remainCommandStr . indexOf ( ":" ) ; address = remainCommandStr . substring ( colonIndex + 1 ) . trim ( ) ; } return address ; }
tr	IDF	public boolean exists ( Issue issue ) throws SQLException { boolean exist = false ; mySQLDB = new MYSQLDB ( ) ; String sql = "select * from issue where idissue=" + issue . getIdIssue ( ) ; ResultSet res = mySQLDB . executeQuery ( sql ) ; if ( res . next ( ) ) { exist = true ; } mySQLDB . closeExecuteQuery ( ) ; return exist ; }
tr	IDF	@ Override public void onReceive ( Entity host ) { Object value = host . getAttribute ( name ) ; if ( null == value ) value = "" ; host . getProxy ( ) . send ( new Attribute ( name , value . toString ( ) ) ) ; }
tr	KEY	public synchronized int xgetYAssignedKeyCode ( ) { return y ; }
tr	KEY	float getVX ( ) ;
tr	IDF	public void actionPerformed ( ActionEvent e ) { String model = getCommand ( modelType ) ; String command = getCommand ( importSource ) ; boolean canvas = null ; if ( command . equals ( InfoEnum . Commands . IMP_SELECTION . name ( ) ) ) { canvas = true ; } else if ( command . equals ( InfoEnum . Commands . IMP_FILE . name ( ) ) ) { canvas = false ; } else { logger . warning ( "Import command error!" ) ; } try { if ( model . equals ( InfoEnum . ModelCategory . REQUIREMENT . name ( ) ) ) { Inference . importReqModel ( ms , canvas ) ; JOptionPane . showMessageDialog ( frmMuserControlPanel , "Finish importing requirement models!" ) ; } else if ( model . equals ( InfoEnum . ModelCategory . ACTOR . name ( ) ) ) { Inference . importActorModel ( ms . actor_model , canvas ) ; JOptionPane . showMessageDialog ( frmMuserControlPanel , "Finish importing trust models!" ) ; } else { logger . warning ( "Command error!" ) ; } } catch ( IOException e1 ) { e1 . printStackTrace ( ) ; } catch ( ScriptException e1 ) { e1 . printStackTrace ( ) ; } }
tr	IDF	protected void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { }
tr	KEY	protected Watcher ( ) { this ( true ) ; }
tr	IDF	private void jMenuItem4ActionPerformed ( java . awt . event . ActionEvent evt ) { Global . changemode ( 1 ) ; }
tr	IDF	public void put ( String key , String value ) { this . _fields . put ( key , value ) ; }
tr	IDF	@ Override public void run ( ) { try { player . play ( ) ; } catch ( JavaLayerException ex ) { JOptionPane . showMessageDialog ( null , "Error" + ex ) ; } }
tr	KEY	public int getValue ( ) { return this . value ; }
tr	KEY	public boolean isEnabled ( ) { return enabled ; }
tr	IDF	public Paint transform ( Node node ) { return node . getColor ( ) ; }
tr	IDF	@ Override public String toString ( ) { return "[command=" + command + "] [args=" + args + "]" ; }
tr	KEY	public boolean isCellEditable ( int rowIndex , int columnIndex ) { return canEdit [ columnIndex ] ; }
tr	KEY	public static GameManager getGame ( final int gameIndex ) { return gameManagers [ gameIndex ] ; }
tr	IDF	public String toString ( ) { StringBuffer sb = new StringBuffer ( "" ) ; sb . append ( "[word=" ) ; sb . append ( getWord ( ) ) ; sb . append ( "] " ) ; sb . append ( "[props=" ) ; sb . append ( props ) ; sb . append ( "]" ) ; return sb . toString ( ) ; }
tr	KEY	public byte [ ] [ ] getMap ( ) { return map ; }
tr	KEY	public double getY ( ) { return y ; }
tr	KEY	public ObjectFactory ( ) { }
tr	IDF	public void setMobile ( String value ) { this . mobile = value ; }
tr	KEY	public void pressRotateLeft ( ) ;
tr	KEY	public synchronized void xsetRBrepeatable ( boolean flag ) { isRBrepeatable = flag ; }
tr	KEY	public char [ ] getPIN ( ) { return passVal ; }
tr	KEY	public int [ ] GetBoardSize ( ) { return BoardSize ; }
tr	KEY	public void open ( ) ;
tr	IDF	public CensoDao ( Conexion . Tipo_conexion tipoConexion ) throws Exception { super ( tipoConexion , "censo" ) ; }
tr	KEY	public final void putAll ( Map < ? extends Key , ? extends Val > m ) { throw new UnsupportedOperationException ( ) ; }
tr	IDF	public List < Invite > getAllInvite ( List < Integer > idInvite ) ;
tr	IDF	public int getPiece ( int r , int c ) { int f = bs . rc2f ( r , c ) ; if ( f == - 1 ) throw new IllegalArgumentException ( ) ; return bs . getPiece ( f ) ; }
tr	KEY	@ Override public int getColumnCount ( ) { return 2 ; }
tr	KEY	public boolean getZFlag ( ) { return mZ ; }
tr	KEY	public DeleteAll createDeleteAll ( ) { return new DeleteAll ( ) ; }
tr	KEY	public DeleteResponse createDeleteResponse ( ) { return new DeleteResponse ( ) ; }
tr	IDF	public static void main ( String [ ] args ) { DateTime startTime = DateTime . now ( ) ; log . info ( "Starting main class for importing puls data" ) ; if ( args == null || args . length != 5 ) { System . err . println ( "Need 4 parameter for running import (exported file location  db host  db name  db user  db password)" ) ; System . exit ( 1 ) ; } if ( ! args [ 0 ] . endsWith ( File . separator ) ) { args [ 0 ] = args [ 0 ] + File . separator ; } File exportedDir = new File ( args [ 0 ] ) ; if ( ! exportedDir . isDirectory ( ) ) { System . err . println ( "First parameter need to be a directory" ) ; System . exit ( 1 ) ; } String exportedFileLocation = args [ 0 ] ; Properties props = System . getProperties ( ) ; String host = args [ 1 ] ; String daName = args [ 2 ] ; props . setProperty ( "db.user" , args [ 3 ] ) ; props . setProperty ( "db.password" , args [ 4 ] ) ; String jdbcUrl = "jdbc:mysql://" + host + "/" + daName + "?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true" ; props . setProperty ( "db.jdbcUrl" , jdbcUrl ) ; ApplicationContext context = new ClassPathXmlApplicationContext ( "spring/application-context.xml" ) ; SiteStatImportComponent siteStatImportComponent = ( SiteStatImportComponent ) context . getBean ( "siteStatImportComponent" ) ; ArticleImportComponent articleComponent = ( ArticleImportComponent ) context . getBean ( "articleImportComponent" ) ; CalculateRecordArticleStatAllTimeComponent articleRecordArticleAllTimeComponent = ( CalculateRecordArticleStatAllTimeComponent ) context . getBean ( "calculateRecordArticleStatAllTimeComponent" ) ; CalculateRecordArticleStatDayComponent calculateRecordArticleStatDayComponent = ( CalculateRecordArticleStatDayComponent ) context . getBean ( "calculateRecordArticleStatDayComponent" ) ; ImportRecordComponent importRecordComponent = ( ImportRecordComponent ) context . getBean ( "importRecordComponent" ) ; try { siteStatImportComponent . importSiteStat ( exportedFileLocation ) ; articleComponent . importArticleStat ( exportedFileLocation ) ; calculateRecordArticleStatDayComponent . calculateArticleStatDauRecord ( ) ; articleRecordArticleAllTimeComponent . calculateRecordForArticleStatAllTime ( ) ; } catch ( Exception e ) { log . error ( "Importing error " , e ) ; e . printStackTrace ( ) ; } log . info ( "Import ALL data finished in {} mil" , DateTime . now ( ) . getMillis ( ) - startTime . getMillis ( ) ) ; }
tr	IDF	private static List < File > execFondu ( File file , FileGarbage kill ) throws IOException { File dir = File . createTempFile ( "fontdir" , ".tmp" ) ; dir . delete ( ) ; dir . mkdirs ( ) ; kill . addFile ( dir , true ) ; File tempFile = new File ( dir , file . getName ( ) + ".tmp" ) ; kill . addFile ( tempFile , true ) ; NativeFiles . copy ( file , tempFile ) ; File execFile = new File ( "bin/fondu" ) ; String [ ] cmd = new String [ ] { execFile . getAbsolutePath ( ) , "-force" , tempFile . getName ( ) } ; try { Process p = Runtime . getRuntime ( ) . exec ( cmd , null , dir ) ; int err = p . waitFor ( ) ; if ( err != 0 ) { throw new IOException ( "Fondu failed: " + err ) ; } } catch ( InterruptedException ex ) { throw new InterruptedIOException ( ex . getMessage ( ) ) ; } List < File > ret = new ArrayList < File > ( ) ; File [ ] files = dir . listFiles ( ) ; if ( files == null ) return ret ; for ( File f : files ) { if ( f . getName ( ) . equals ( tempFile . getName ( ) ) ) { continue ; } ret . add ( f ) ; kill . addFile ( f , true ) ; } return ret ; }
tr	IDF	@ Override public void setNumSquare ( int numSquare ) { super . setNumSquare ( numSquare ) ; sqNumWidth = 3 ; sqNumHeight = 2 ; }
tr	KEY	private MongodbConnectionManager ( ) { }
tr	KEY	public void setGeometry ( int geometry ) ;
tr	KEY	public void TestPhysicsSolve ( int id1 , int id2 ) { }
tr	KEY	@ Override public void updateModelFromView ( ) { }
tr	KEY	public int length ( ) { if ( head == null ) return 0 ; else if ( tail == null ) return 1 ; else return 1 + tail . length ( ) ; }
tr	KEY	public boolean getNextImage ( ImageGetter < S > getter ) { if ( getTargetImage ( getter , this . currIndex + 1 ) ) { lastTryGetNext = true ; currIndex ++ ; return true ; } return false ; }
tr	KEY	void render ( ) ;
tr	KEY	public int getColumn ( ) { return column ; }
tr	KEY	public void windowClosing ( final WindowEvent e ) { }
tr	KEY	public static Manager getInstance ( ) { if ( instance == null ) { instance = new Manager ( ) ; } return instance ; }
tr	KEY	public void setOperatingSystemId ( int operatingSystemMobileId ) { this . operatingSystemId = operatingSystemMobileId ; }
tr	IDF	public SortedSet < Elt > subSet ( Elt fromElement , Elt toElement ) { if ( tree == null ) return this ; else { Elt fe = first ( ) , le = last ( ) ; if ( compare ( fromElement , toElement ) >= 0 || compare ( fe , toElement ) >= 0 || compare ( le , fromElement ) < 0 ) return new FTreeSet < Elt > ( comp ) ; else if ( compare ( fe , fromElement ) >= 0 && compare ( le , toElement ) < 0 ) return this ; else { Object t = split ( tree , fromElement , toElement ) ; Object = = findEquiv ( tree , fromElement ) ; if ( = != NO_ELEMENT ) t = with ( t , = ) ; return make ( t , comp ) ; } } }
tr	KEY	public boolean isValidValueForElementWithNumber ( int elementNumber , int value ) { if ( value == EMPTY_ELEMENT_VALUE ) { return false ; } else if ( elements [ elementNumber ] == value ) { return true ; } else { for ( int validElement : getValidValuesForElementWithNumber ( elementNumber ) ) { if ( validElement == value ) { return true ; } } return false ; } }
tr	IDF	@ Override public List < MessageResponseInfo > getMessageStatusesByBatch ( int start , int pageSize , String batchId , String username , String password ) { return mytxtbuddySoapApi . getMessageStatusesByBatch ( start , pageSize , batchId , username , password ) ; }
tr	IDF	static public double noise ( double x , double y , double z ) { int X = ( int ) Math . floor ( x ) & 255 , Y = ( int ) Math . floor ( y ) & 255 , Z = ( int ) Math . floor ( z ) & 255 ; x -= Math . floor ( x ) ; y -= Math . floor ( y ) ; z -= Math . floor ( z ) ; double u = fade ( x ) , v = fade ( y ) , w = fade ( z ) ; int A = p [ X ] + Y , AA = p [ A ] + Z , AB = p [ A + 1 ] + Z , B = p [ X + 1 ] + Y , BA = p [ B ] + Z , BB = p [ B + 1 ] + Z ; return lerp ( w , lerp ( v , lerp ( u , grad ( p [ AA ] , x , y , z ) , grad ( p [ BA ] , x - 1 , y , z ) ) , lerp ( u , grad ( p [ AB ] , x , y - 1 , z ) , grad ( p [ BB ] , x - 1 , y - 1 , z ) ) ) , lerp ( v , lerp ( u , grad ( p [ AA + 1 ] , x , y , z - 1 ) , grad ( p [ BA + 1 ] , x - 1 , y , z - 1 ) ) , lerp ( u , grad ( p [ AB + 1 ] , x , y - 1 , z - 1 ) , grad ( p [ BB + 1 ] , x - 1 , y - 1 , z - 1 ) ) ) ) ; }
tr	IDF	@ ManyToMany @ JoinTable ( name = "role_has_user" , joinColumns = @ JoinColumn ( name = "user_iduser" ) , inverseJoinColumns = @ JoinColumn ( name = "role_idrole" ) ) public List < Role > getRoles ( ) { return roles ; }
tr	IDF	@ Override public void registerEventListener ( EventListener el ) { this . listeners . add ( el ) ; }
tr	KEY	public static long daysToMillis ( double days ) { return Math . round ( days * 24 * 60 * 60 * 1000 ) ; }
tr	KEY	public double getLinePrice ( ) { return linePrice ; }
tr	IDF	public static void main ( String [ ] args ) throws Exception { BeanTreeDialog d = new BeanTreeDialog ( "CloudBand's Inspection Tree" ) ; Integer param2 = new Integer ( 4 ) ; String [ ] names = new String [ 0 ] ; Object objInstance = names ; String str = getAsString ( objInstance ) ; d . buildDialog ( ) ; d . initTreeTableModel ( objInstance ) ; d . showDialog ( ) ; if ( d . isSaveClicked ( ) ) { objInstance = d . getRootObject ( ) ; str = getAsString ( objInstance ) ; } objInstance = getFromString ( str ) ; d . initTreeTableModel ( objInstance ) ; d . showDialog ( ) ; System . out . println ( ( ( ( AbstractBeanTreeNode ) ( d . treeTableModel . getRoot ( ) ) ) . getUserObject ( ) ) ) ; }
tr	IDF	@ Test public final void testWriteProperties ( ) { final File file = new File ( "mock.txt" ) ; final OrderedProperties props = new OrderedProperties ( ) ; props . put ( "mock" , "value" ) ; props . put ( "test3" , "value" ) ; props . put ( "test1" , "value" ) ; props . put ( "test2" , "value" ) ; file . write ( props ) ; assertEquals ( "mock=value\ntest3=value\ntest1=value\ntest2=value\n" , file . readChars ( 50 ) ) ; file . delete ( ) ; }
tr	IDF	public void mouseReleased ( java . awt . event . MouseEvent evt ) { grid5BtnMouseReleased ( evt ) ; }
tr	KEY	public int boardCols ( ) { return maskCols ( getBoard ( ) ) ; }
tr	KEY	public static String getGameName ( ) { return gameName ; }
tr	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButton1ActionPerformed ( evt ) ; }
tr	IDF	private GuiManager ( ) { guiController = new Controller ( ) ; addListener ( new ActionListener ( ) { @ Override protected TaskAction getListenAction ( ) { return TaskAction . CUSER_NAMECHANGE ; } @ Override protected void onAction ( final HashMap < String , String > params ) { if ( params != null && params . containsKey ( "username" ) ) { Platform . runLater ( new Runnable ( ) { @ Override public void run ( ) { guiController . setUsername ( params . get ( "username" ) ) ; } } ) ; } } } ) ; addListener ( new ActionListener ( ) { @ Override protected TaskAction getListenAction ( ) { return TaskAction . CUSER_REQUESTNAMECHANGEFAILED ; } @ Override protected void onAction ( HashMap < String , String > params ) { Platform . runLater ( new Runnable ( ) { @ Override public void run ( ) { guiController . printError ( "Name is already in use. Please try again." ) ; guiController . askUsername ( ) ; } } ) ; } } ) ; addListener ( new ActionListener ( ) { @ Override protected TaskAction getListenAction ( ) { return TaskAction . CONNECT_SUCCESS ; } @ Override protected void onAction ( HashMap < String , String > params ) { Platform . runLater ( new Runnable ( ) { @ Override public void run ( ) { guiController . printSuccess ( "Connected to server." ) ; guiController . askUsername ( ) ; } } ) ; } } ) ; addListener ( new ActionListener ( ) { @ Override protected TaskAction getListenAction ( ) { return TaskAction . CONNECT_FAILED ; } @ Override protected void onAction ( HashMap < String , String > params ) { Platform . runLater ( new Runnable ( ) { @ Override public void run ( ) { guiController . printError ( "Connection to server failed. Please try again." ) ; guiController . askServer ( ) ; } } ) ; } } ) ; addListener ( new ActionListener ( ) { @ Override protected TaskAction getListenAction ( ) { return TaskAction . RUSER_NEWMESSAGE ; } @ Override protected void onAction ( HashMap < String , String > params ) { if ( params != null ) { if ( params . containsKey ( "username" ) && params . containsKey ( "message" ) && ! params . get ( "username" ) . equals ( guiController . getUsername ( ) ) ) { final MessageNode node = new MessageNode ( params . get ( "username" ) , params . get ( "message" ) ) ; node . setRemoteMessage ( ) ; Platform . runLater ( new Runnable ( ) { @ Override public void run ( ) { guiController . addChatMessage ( node ) ; } } ) ; } } } } ) ; addListener ( new ActionListener ( ) { @ Override protected TaskAction getListenAction ( ) { return TaskAction . FETCHUSER_PROCESS ; } @ Override protected void onAction ( final HashMap < String , String > params ) { if ( params != null ) { Platform . runLater ( new Runnable ( ) { @ Override public void run ( ) { guiController . userList . getItems ( ) . clear ( ) ; Collection < String > values = params . values ( ) ; for ( String username : values ) { guiController . userList . getItems ( ) . add ( username ) ; } } } ) ; } } } ) ; addListener ( new ActionListener ( ) { @ Override protected TaskAction getListenAction ( ) { return TaskAction . RUSER_ENTERED ; } @ Override protected void onAction ( final HashMap < String , String > params ) { if ( params != null && params . containsKey ( "username" ) ) { Platform . runLater ( new Runnable ( ) { @ Override public void run ( ) { guiController . printSystem ( String . format ( "%s entered the chat." , params . get ( "username" ) ) ) ; } } ) ; } } } ) ; addListener ( new ActionListener ( ) { @ Override protected TaskAction getListenAction ( ) { return TaskAction . RUSER_LEFT ; } @ Override protected void onAction ( final HashMap < String , String > params ) { if ( params != null && params . containsKey ( "username" ) ) { Platform . runLater ( new Runnable ( ) { @ Override public void run ( ) { guiController . printSystem ( String . format ( "%s left the chat." , params . get ( "username" ) ) ) ; } } ) ; } } } ) ; addListener ( new ActionListener ( ) { @ Override protected TaskAction getListenAction ( ) { return TaskAction . QUIT ; } @ Override protected void onAction ( HashMap < String , String > params ) { interrupt ( ) ; } } ) ; }
tr	IDF	public ArrayList < String > restoreIpAddresses ( String s ) { cache . clear ( ) ; return dfs ( s , 4 ) ; }
tr	KEY	protected abstract String getName ( ) ;
tr	KEY	public static long lowerPot ( long val ) { if ( val <= 1 ) { return 1 ; } return higherPot ( val - 1 ) >> 1 ; }
tr	KEY	public double FilteringRecall ( ) { return vis / ( totg + 1e-20 ) ; }
tr	KEY	public static void main ( String [ ] args ) { }
tr	IDF	public int available ( ) throws IOException { int avail = ( count - pos - 2 ) + in . available ( ) ; return ( avail < 0 ? 0 : avail ) ; }
tr	IDF	@ SuppressWarnings ( "unchecked" ) public List < Grafikkarte > findAll ( ) { EntityTransaction tx = getEntityManager ( ) . getTransaction ( ) ; tx . begin ( ) ; Query query = getEntityManager ( ) . createQuery ( "SELECT N FROM Grafikkarte N" ) ; tx . commit ( ) ; return query . getResultList ( ) ; }
tr	IDF	public JSONObject increment ( String key ) throws JSONException { Object value = this . opt ( key ) ; if ( value == null ) { this . put ( key , 1 ) ; } else if ( value instanceof Integer ) { this . put ( key , ( ( Integer ) value ) . intValue ( ) + 1 ) ; } else if ( value instanceof long ) { this . put ( key , ( ( long ) value ) . longValue ( ) + 1 ) ; } else if ( value instanceof double ) { this . put ( key , ( ( double ) value ) . doubleValue ( ) + 1 ) ; } else if ( value instanceof float ) { this . put ( key , ( ( float ) value ) . floatValue ( ) + 1 ) ; } else { throw new JSONException ( "Unable to increment [" + quote ( key ) + "]." ) ; } return this ; }
tr	KEY	public abstract double gradient ( double input , double output ) ;
tr	IDF	@ Override public String execute ( HttpServletRequest request , HttpServletResponse response ) throws Exception { try { String data = "{\"data\": [  \"id_censo\"  \"Ejercicio\"  \"Cargo\"  \"Recompensa\"  \"Falla\"]}" ; return data ; } catch ( Exception e ) { throw new ServletException ( "HistorialGetpagesJson: View Error: " + e . getMessage ( ) ) ; } }
tr	IDF	@ Override public String getRemark ( ) { return remark ; }
tr	KEY	public void setId ( long id ) { this . id = id ; }
tr	KEY	public void rotateX ( double radians ) ;
tr	KEY	public int getxExit ( ) ;
tr	IDF	public void setHousingTypeHomeless ( JRadioButton housingTypeHomeless ) { this . housingTypeHomeless = housingTypeHomeless ; }
tr	KEY	public void setKerne ( int kerne ) { this . kerne = kerne ; }
tr	KEY	public boolean isIsVrmlFile ( ) ;
tr	KEY	public int getIdTweets ( ) { return idTweets ; }
tr	IDF	public static void main ( String [ ] args ) { final int [ ] data = new int [ ] { 1 , 3 , 5 } ; Visitor v = new Visitor ( data ) ; v . run ( ) ; }
tr	KEY	@ Override public String toBase ( ) { return null ; }
tr	IDF	public void keyPress ( int keycode ) { peer . keyPress ( keycode ) ; }
tr	KEY	@ Override public double [ ] getWeights ( ) { double [ ] result = { 3 , 3 , 3 , 3 } ; return result ; }
tr	KEY	int getWidth ( ) ;
tr	IDF	public static Builder < ? > builder ( String name , int productType ) { return new Builder2 ( name , productType ) ; }
tr	IDF	public void keyReleased ( java . awt . event . KeyEvent evt ) { txtBuscarKeyReleased ( evt ) ; }
tr	KEY	public void setPort ( int value ) { this . port = value ; }
tr	IDF	public Point [ ] getCrticialPoints ( ) { Point left = getPosCritical ( Position . left ) ; Point right = getPosCritical ( Position . right ) ; Point top = getPosCritical ( Position . top ) ; Point bottom = getPosCritical ( Position . bottom ) ; return new Point [ ] { left , new Point ( left . x - getHeight ( ) / 2 , left . y ) , right , new Point ( right . x + getHeight ( ) / 2 , right . y ) , top , new Point ( top . x , top . y - getHeight ( ) / 2 ) , bottom , new Point ( bottom . x , bottom . y + getHeight ( ) / 2 ) } ; }
tr	KEY	public void createTopic ( ) ;
tr	KEY	public void setCurrentAxisX ( double currentAxisX ) ;
tr	IDF	private int max ( Node node ) { while ( node . rightTree != null ) node = node . rightTree ; return node . value ; }
tr	IDF	@ Override public Result callWithResult ( String param1 , int param2 ) { return new Result ( param1 , param2 ) ; }
tr	IDF	@ Column ( name = "CHANGING_TIME" , scale = 3 , nullable = false ) public Integer getChangingTime ( ) { return changingTime ; }
tr	IDF	@ Override public String next ( ) { String toReturn = keys [ location ] ; while ( toReturn == null || toReturn . equals ( Tombstone ) ) { location ++ ; toReturn = keys [ location ] ; } hits ++ ; location ++ ; return toReturn ; }
tr	KEY	public int getNrows ( ) { return r ; }
tr	IDF	@ Override public boolean equals ( Object o ) { if ( o == this ) return true ; if ( o == null || ! ( o instanceof TIPPCreator ) ) return false ; TIPPCreator c = ( TIPPCreator ) o ; return Objects . equals ( name , c . name ) && Objects . equals ( id , c . id ) && Objects . equals ( date , c . date ) && Objects . equals ( tool , c . tool ) ; }
tr	KEY	public Account ( ) { super ( ) ; }
tr	IDF	@ Override public void render ( GameContainer gc , StateBasedGame sbg , Graphics g ) { g . setColor ( Color . red ) ; current . draw ( body . getCenterX ( ) - ( current . getWidth ( ) / 2 ) , body . getY ( ) + body . getHeight ( ) - current . getHeight ( ) ) ; }
tr	IDF	public TBlock_T ( TBlockBox cont ) { super ( cont ) ; }
tr	KEY	public int getComputerCount ( ) { return computerCount ; }
tr	IDF	@ Override public Action loadObject ( JsonObject json ) { return new PlaceDeveloperOnBoardAction ( Integer . parseInt ( json . getString ( "actionID" ) ) , Integer . parseInt ( json . getString ( "x" ) ) , Integer . parseInt ( json . getString ( "y" ) ) ) ; }
tr	IDF	@ Override public AbstractMutableFormula accept ( FormulaVisitor visitor ) { return visitor . visit ( this ) ; }
tr	IDF	public boolean equals ( Person p ) { return p . name . equals ( this . name ) ; }
tr	IDF	public UnauthorisedException ( final String message , final Throwable caughtException ) { super ( message , caughtException ) ; }
tr	IDF	@ Test ( timeout = TIMEOUT ) public void testHugeArray ( ) { Integer [ ] testArray = new Integer [ 100 ] ; for ( int i = 0 ; i < 100 ; i ++ ) { testArray [ i ] = i ; } insertArray ( testArray ) ; assertTrue ( "Testing the heap for 100 elements" , deleteMinTest ( testArray ) ) ; }
tr	IDF	@ SuppressWarnings ( "unchecked" ) private void initComponents ( ) { jScrollPane1 = new javax . swing . JScrollPane ( ) ; tweetTable = new javax . swing . JTable ( ) ; tweetTable . setModel ( new javax . swing . table . DefaultTableModel ( new Object [ ] [ ] { { null , null } , { null , null } , { null , null } , { null , null } } , new String [ ] { "Tweet Message" , "Frequency" } ) { class [ ] types = new class [ ] { java . lang . String . class , java . lang . Integer . class } ; boolean [ ] canEdit = new boolean [ ] { false , false } ; public class getColumnClass ( int columnIndex ) { return types [ columnIndex ] ; } public boolean isCellEditable ( int rowIndex , int columnIndex ) { return canEdit [ columnIndex ] ; } } ) ; jScrollPane1 . setViewportView ( tweetTable ) ; if ( tweetTable . getColumnModel ( ) . getColumnCount ( ) > 0 ) { tweetTable . getColumnModel ( ) . getColumn ( 0 ) . setResizable ( false ) ; tweetTable . getColumnModel ( ) . getColumn ( 0 ) . setPreferredWidth ( 10 ) ; } javax . swing . GroupLayout layout = new javax . swing . GroupLayout ( getContentPane ( ) ) ; getContentPane ( ) . setLayout ( layout ) ; layout . setHorizontalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( javax . swing . GroupLayout . Alignment . TRAILING , layout . createSequentialGroup ( ) . addContainerGap ( ) . addComponent ( jScrollPane1 , javax . swing . GroupLayout . DEFAULT_SIZE , 770 , short . MAX_VALUE ) . addContainerGap ( ) ) ) ; layout . setVerticalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addContainerGap ( ) . addComponent ( jScrollPane1 , javax . swing . GroupLayout . DEFAULT_SIZE , 278 , short . MAX_VALUE ) . addContainerGap ( ) ) ) ; pack ( ) ; }
tr	KEY	public boolean is_returnSpecified ( ) { return local_returnTracker ; }
tr	IDF	TIPPCreator ( String name , String id , Date date , TIPPTool tool ) { this . name = name ; this . id = id ; this . date = date ; this . tool = tool ; }
tr	IDF	@ Override public void actionPerformed ( ActionEvent e ) { String source = source_TextArea . getText ( ) ; String regex = regex_TextArea . getText ( ) ; if ( regex == null || regex . isEmpty ( ) ) { notEmpty ( "Regex cannot be empty!" ) ; return ; } reset ( exe ( source , regex ) ) ; }
tr	KEY	public int getTurn ( ) { return turn ; }
tr	KEY	public void unload ( ) { }
tr	IDF	public String nextTo ( String delimiters ) throws JSONException { char c ; StringBuffer sb = new StringBuffer ( ) ; for ( ; ; ) { c = next ( ) ; if ( delimiters . indexOf ( c ) >= 0 || c == 0 || c == '' || c == '' ) { if ( c != 0 ) { back ( ) ; } return sb . toString ( ) . trim ( ) ; } sb . append ( c ) ; } }
tr	IDF	@ Override public void resetShoppingCart ( UserModel user ) throws WebshopAppException { if ( isValidUser ( user , "RESET_SHOPPING_CART" ) ) { try ( Connection conn = getConnection ( ) ) { String sql = "DELETE FROM shopping_cart WHERE user_email = ?" ; try ( PreparedStatement pstmt = conn . prepareStatement ( sql ) ) { setString ( pstmt , 1 , user . getEmail ( ) ) ; pstmt . executeUpdate ( ) ; Log . logOut ( LOGGER , this , "RESET_SHOPPING_CART" , "Resetted shopping cart of user: " , user . getEmail ( ) ) ; } } catch ( SQLException e ) { WebshopAppException excep = new WebshopAppException ( e . getMessage ( ) , this . getClass ( ) . getSimpleName ( ) , "RESET_SHOPPING_CART" ) ; Log . logOutWAException ( LOGGER , excep ) ; throw excep ; } } }
tr	KEY	public void testApp ( ) { assertTrue ( true ) ; }
tr	KEY	public int getStartRow ( ) { return startRow ; }
tr	KEY	public void restart ( ) ;
tr	IDF	public void setCurrentSong ( Song s ) { currentSong = s ; }
tr	IDF	public Repl ( class < ? extends Visitor < S , T >> vClass ) { this . interp = null ; evalClass = vClass ; try { interp = evalClass . newInstance ( ) ; } catch ( InstantiationException | IllegalAccessException ie ) { System . err . println ( ie . getMessage ( ) ) ; System . err . println ( "Fatal error: Failed to instantiate " + "interpreter!  Terminating..." ) ; System . exit ( 1 ) ; } }
tr	IDF	public void printData ( boolean isPrettyPrinted ) { System . out . println ( "[Mongo]: Printing....\n" ) ; DBCursor cursorDoc = coll . find ( ) ; if ( isPrettyPrinted ) { while ( cursorDoc . hasNext ( ) ) { System . out . println ( prettyPrints . resultingJson ( cursorDoc . next ( ) ) ) ; } } else { while ( cursorDoc . hasNext ( ) ) { System . out . println ( cursorDoc . next ( ) ) ; } } System . out . println ( "[Mongo]: Done." ) ; }
tr	IDF	public synchronized void connect ( ) throws IOException { m_socket = ( SocketConnection ) Connector . open ( url ) ; m_is = m_socket . openInputStream ( ) ; m_os = m_socket . openOutputStream ( ) ; m_connected = true ; }
tr	KEY	@ Override public void getInput ( ) { }
tr	IDF	public MapGenerator ( int width , int height ) { this . width = width ; this . height = height ; grid = new MapTile [ width ] [ height ] ; for ( int i = 0 ; i < width ; i ++ ) { for ( int j = 0 ; j < height ; j ++ ) { grid [ i ] [ j ] = MapTile . SPACE ; } } }
tr	IDF	private void menuItemConsultaIssuesActionPerformed ( java . awt . event . ActionEvent evt ) { ConsultaIssues consulta = new ConsultaIssues ( ) ; consulta . setVisible ( true ) ; consulta . setClosable ( true ) ; consulta . setMaximizable ( true ) ; consulta . setResizable ( true ) ; consulta . setTitle ( "Issues" ) ; jDesktopPane1 . add ( consulta ) ; }
tr	KEY	int getSequenceNumber ( ) ;
tr	IDF	@ Override public OutputStream getOutputStream ( ) { return toDriver . getOutputStream ( ) ; }
tr	IDF	public VehicleHandler ( IVehicle v ) { this . v = v ; }
tr	IDF	private void updateREFP0 ( int data ) { setRegister ( REFP0 , data ) ; updatePlayerGraphics ( 0 ) ; }
tr	IDF	public final boolean contains ( double x , double y , double w , double h ) { if ( java . lang . double . isNaN ( x + w ) || java . lang . double . isNaN ( y + h ) ) { return false ; } if ( w <= 0 || h <= 0 ) { return false ; } int mask = ( windingRule == WIND_NON_ZERO ? - 1 : 2 ) ; int crossings = rectCrossings ( x , y , x + w , y + h ) ; return ( crossings != Curve . RECT_INTERSECTS && ( crossings & mask ) != 0 ) ; }
tr	IDF	public SourcePanel ( ) { super ( ) ; setLayout ( new BoxLayout ( this , BoxLayout . X_AXIS ) ) ; final JRadioButton none = new JRadioButton ( Strings . BUTTON_SOURCE_NONE , true ) ; none . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { if ( setSourceNone ( ) ) current = none ; else current . setSelected ( true ) ; } } ) ; final JRadioButton file = new JRadioButton ( Strings . BUTTON_SOURCE_FILE , true ) ; file . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { if ( setSourceFile ( ) ) current = file ; else current . setSelected ( true ) ; } } ) ; final JRadioButton library = new JRadioButton ( Strings . BUTTON_SOURCE_LIBRARY , true ) ; library . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { if ( setSourceLibrary ( ) ) current = library ; else current . setSelected ( true ) ; } } ) ; final JRadioButton threeStar = new JRadioButton ( Strings . BUTTON_SOURCE_THREESTAR , true ) ; threeStar . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { if ( setSourceThreeStar ( ) ) current = threeStar ; else current . setSelected ( true ) ; } } ) ; add ( none ) ; add ( file ) ; add ( library ) ; add ( threeStar ) ; ButtonGroup group = new ButtonGroup ( ) ; group . add ( none ) ; group . add ( file ) ; group . add ( library ) ; group . add ( threeStar ) ; current = null ; }
tr	IDF	public Object next ( ) { MenuItem menuItem = this . items . get ( position ++ ) ; return menuItem ; }
tr	KEY	public void setCantidad ( int Cantidad ) { this . Cantidad = Cantidad ; }
tr	KEY	public static GitSettings defaults ( ) { return new GitSettings ( "git" , CharsetUtil . UTF8 , true ) ; }
tr	IDF	public double NLPIR_FileProcess ( String sSourceFilename , String sResultFilename , int bPOStagged ) ;
tr	IDF	protected int getTopLine ( int y ) { Dimension boardSize = getBoardSize ( ) ; Dimension windowSize = getWindowFavoriteSize ( ) ; return ( y * windowSize . height ) / boardSize . height + 1 ; }
tr	IDF	public void leaveGroup ( ) { try { this . multicastSocket . leaveGroup ( InetAddress . getByName ( group ) ) ; this . multicastSocket . close ( ) ; this . isClosed = true ; } catch ( UnknownHostException e ) { e . printStackTrace ( ) ; } catch ( IOException e ) { } }
tr	IDF	@ Override public String toString ( ) { return lines . toString ( ) ; }
tr	KEY	protected void freeObject ( ) { empty ( ) ; }
tr	KEY	public int getOrder ( ) { return p . length - 1 ; }
tr	KEY	public static void checkValidName ( char c ) throws UnsupportedCharacterException { if ( isValidCharOfName ( c ) ) return ; throw new UnsupportedCharacterException ( c ) ; }
tr	IDF	@ Override public void handle ( ActionEvent event ) { newGame ( ) ; }
tr	IDF	public static final int convertBCDToValue ( int data ) { int iHigh = ( data >> 4 ) & 0F ; int iLow = data & 0F ; return iHigh * 10 + iLow ; }
tr	KEY	static public int getYinYangByYear ( int year ) { return ( year - 4 ) % 60 % 2 ; }
tr	KEY	protected abstract WorldImpl nextGeneration ( ) ;
tr	KEY	public int getColorO ( ) { return colorO ; }
tr	IDF	public Object visitDoTree ( AST t ) { print ( "Do" , t ) ; return null ; }
tr	IDF	@ Override public void run ( ) { manager . onPacketReceived ( message ) ; }
tr	KEY	public String getCode ( ) { return this . code ; }
tr	KEY	public boolean isEmpty ( ) { return this . heapSize == 0 ; }
tr	IDF	public void write ( File fileName ) { FileWrite fp = new FileWrite ( fileName ) ; if ( fp != null ) { StringBuilder levelContent = new StringBuilder ( ) ; levelContent . append ( "# File autogenerated with Editor. Do not modify.\n\n" ) ; levelContent . append ( "COLLISION default.col 256\n\n" ) ; for ( int i = layers . size ( ) ; i > 0 ; i -- ) { LevelLayer curElem = layers . get ( i - 1 ) ; String imgPath = curElem . getImgPath ( ) ; int levelWidth = curElem . getWidth ( ) ; int levelHeight = curElem . getHeight ( ) ; ArrayList < ArrayList < Integer >> list = curElem . getList ( ) ; Integer [ ] [ ] array = new Integer [ list . size ( ) ] [ ] ; for ( int n = 0 ; n < list . size ( ) ; n ++ ) { array [ n ] = list . get ( n ) . toArray ( new Integer [ 0 ] ) ; } System . out . printf ( "Converted\n" ) ; levelContent . append ( "LAYER " + curElem . getId ( ) + "\n" ) ; levelContent . append ( "IMG " + tilesetName + "0.bmp " + curElem . getTileW ( ) + " " + curElem . getTileH ( ) + " " + curElem . getImgRowW ( ) + " " + curElem . getImgSize ( ) + "\n" ) ; for ( int y = 0 ; y < levelHeight ; y ++ ) { for ( int x = 0 ; x < levelWidth ; x ++ ) { levelContent . append ( Integer . toString ( array [ y ] [ x ] ) ) ; if ( x < levelWidth - 1 ) { levelContent . append ( "\t" ) ; } } levelContent . append ( "\n" ) ; } levelContent . append ( "END\n\n" ) ; } levelContent . append ( "OBJECTS\n" ) ; for ( GameObject curObj : this . objects ) { levelContent . append ( curObj . getName ( ) + "\t" + curObj . getX ( ) + "\t" + curObj . getY ( ) + "\t" + ( curObj . getDirection ( ) ? 1 : 0 ) + "\n" ) ; } levelContent . append ( "END\n" ) ; System . out . printf ( "Writing to file\n" ) ; fp . writeLine ( levelContent . toString ( ) ) ; String tmpName = fileName . getName ( ) ; if ( ! tmpName . equals ( "lvl.tmp" ) ) { this . levelName = tmpName ; this . setModified ( false ) ; } } fp . close ( ) ; }
tr	IDF	public Profile [ ] findByDynamicSelect ( String sql , Object [ ] sqlParams ) throws ProfileDaoException ;
tr	IDF	public BoardController ( ) { _pieceNameColumn = new TableColumn < Piece , String > ( "Piece Name" ) ; _pieceNameColumn . setCellValueFactory ( new PropertyValueFactory < Piece , String > ( "Piece Name" ) ) ; _pieceTypeColumn = new TableColumn < Piece , String > ( "Piece Type" ) ; _pieceTypeColumn . setCellValueFactory ( new PropertyValueFactory < Piece , String > ( "Piece Type" ) ) ; _pieces = FXCollections . observableArrayList ( ) ; _pieceButtons = new ArrayList < PieceButton > ( ) ; }
tr	KEY	public NGramExtractor ( ) { }
tr	KEY	public void newPlayerMatchDraw ( ) { synchronized ( this ) { drawAgainstPlayer ++ ; } }
tr	KEY	public void playFestivalSound ( ) { playSound ( "festivalSound" ) ; }
tr	IDF	@ Override public void desenharLinha ( int x , int y ) { System . out . println ( "Implementando a forma UM do desenho da linha pontos: x= " + x + " y= " + y ) ; }
tr	KEY	private ImageViewer createImageViewer ( ) { return new PanelImageViewer ( ) ; }
tr	KEY	public boolean isCellEditable ( int rowIndex , int columnIndex ) { return canEdit [ columnIndex ] ; }
tr	KEY	public ProfileRequest ( ) { super ( ) ; }
tr	IDF	@ Test public void demographicsCsvTest ( ) { Demographics d = new Demographics ( ) ; System . out . println ( d . toCsv ( ) ) ; Calendar c = Calendar . getInstance ( ) ; c . set ( 1988 , Calendar . JULY , 26 ) ; d = new Demographics ( c . getTime ( ) , GenderType . Male , 2 , true , GenderType . Female , 0 , 100000.0 , MaritalStatusCode . Single , false , EthnicityType . Caucasian , false , true , true , StateEmploymentCode . FullTime , "some  comments" , false ) ; System . out . println ( d . toCsv ( ) ) ; }
tr	KEY	public abstract void process ( String table ) throws SQLException ;
tr	IDF	public List < ReportSiteModel > findBySiteId ( long siteId ) { String sql = "SELECT id report_id site_id FROM report_site WHERE site_id = ?" ; List < ReportSiteModel > reportList = jdbcTemplate . query ( sql , new ReportSiteRowMapper ( ) , siteId ) ; return reportList ; }
tr	IDF	Binder ( Object v , Symbol p , Binder t ) { value = v ; prevtop = p ; tail = t ; }
tr	KEY	public int getBlocksEmptyDestroyed ( ) { return blocksEmptyDestroyed ; }
tr	KEY	public void setPrix ( double prix ) { this . prix = prix ; }
tr	KEY	public int getRowCount ( ) { return kontaks . size ( ) ; }
tr	IDF	private void find ( Map < String , PriorityQueue < String >> tickets , String cur , List < String > result ) { while ( tickets . containsKey ( cur ) && ! tickets . get ( cur ) . isEmpty ( ) ) { find ( tickets , tickets . get ( cur ) . poll ( ) , result ) ; } result . add ( 0 , cur ) ; return ; }
tr	KEY	public Building build ( ) { return new Building ( this ) ; }
tr	IDF	public MyInteger apply ( MyInteger x , MyInteger y ) { return new MyInteger ( ( x . intValue ( ) + 1 ) * y . intValue ( ) ) ; }
tr	IDF	public void cycleByIterator ( Set < String > set ) { Iterator < String > iterator = set . iterator ( ) ; while ( iterator . hasNext ( ) ) { String str = iterator . next ( ) ; System . out . println ( str ) ; } }
tr	IDF	private JPanel createFillInTheBlanksQuestion ( ) { _questionLabel . setText ( _fillInTheBlanks . getAnswer ( ) ) ; final SpringLayout springLayout = new SpringLayout ( ) ; final JPanel jPanel = new JPanel ( springLayout ) ; _optionsStrings = _fillInTheBlanks . getBlanks ( ) ; final int [ ] randomList = MathUtilities . generateRandomArray ( _optionsStrings . size ( ) ) ; _answers = new ArrayList < String > ( ) ; for ( int x = 0 ; x < _optionsStrings . size ( ) ; x ++ ) { final String value = _optionsStrings . get ( randomList [ x ] ) ; _answers . add ( _optionsStrings . get ( _optionsStrings . indexOf ( value ) ) ) ; } _optionComboBoxes = new ArrayList < JComboBox > ( ) ; for ( int x = 0 ; x < _optionsStrings . size ( ) ; x ++ ) { final JLabel label = new JLabel ( "Choose #" ) ; final String choice = _optionsStrings . get ( randomList [ x ] ) . toLowerCase ( ) ; springLayout . putConstraint ( SpringLayout . WEST , label , 15 , SpringLayout . WEST , jPanel ) ; springLayout . putConstraint ( SpringLayout . NORTH , label , 45 + x * 35 , SpringLayout . NORTH , jPanel ) ; jPanel . add ( label ) ; Object [ ] choices = new Object [ _optionsStrings . size ( ) + 1 ] ; choices [ 0 ] = "--" ; for ( int y = 0 ; y < choices . length - 1 ; y ++ ) { choices [ y + 1 ] = "[" + y + "]" ; } final JComboBox combobox = new JComboBox ( choices ) ; springLayout . putConstraint ( SpringLayout . WEST , combobox , 10 , SpringLayout . EAST , label ) ; springLayout . putConstraint ( SpringLayout . NORTH , combobox , - 20 , SpringLayout . SOUTH , label ) ; _optionComboBoxes . add ( combobox ) ; combobox . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( final ActionEvent arg0 ) { String question = "" ; if ( _choicesMade . containsKey ( choice ) ) { _choicesMade . remove ( choice ) ; } String begin = "Question #" + new Integer ( _questionData . getQuestionNumber ( ) ) . toString ( ) + ": " ; question = begin + _questionData . getQuestionString ( ) ; final Set < String > keys = _choicesMade . keySet ( ) ; for ( final String key : keys ) { question = replace ( _choicesMade . get ( key ) , question , key ) ; } final int indexToLookFor = combobox . getSelectedIndex ( ) - 1 ; if ( indexToLookFor >= 0 ) { _choicesMade . put ( choice , "[" + indexToLookFor + "]" ) ; question = replace ( "[" + indexToLookFor + "]" , question , choice ) ; } _beginLabel . setText ( question ) ; } private String replace ( final String needle , final String haystack , final String newNeedle ) { String result = haystack ; while ( result . indexOf ( needle ) != - 1 ) { result = result . replace ( needle , newNeedle ) ; } return result ; } } ) ; jPanel . add ( combobox ) ; final JLabel option = new JLabel ( choice ) ; springLayout . putConstraint ( SpringLayout . WEST , option , 10 , SpringLayout . EAST , combobox ) ; springLayout . putConstraint ( SpringLayout . NORTH , option , 1 , SpringLayout . NORTH , combobox ) ; jPanel . add ( option ) ; } final JLabel temp = new JLabel ( ) ; springLayout . putConstraint ( SpringLayout . EAST , jPanel , 600 , SpringLayout . WEST , temp ) ; springLayout . putConstraint ( SpringLayout . SOUTH , jPanel , 250 , SpringLayout . SOUTH , temp ) ; jPanel . setOpaque ( true ) ; return jPanel ; }
tr	IDF	private static Object equivLess ( Object eqm , Object key ) { ArrayList < Entry > al = ( ( EquivalentMap ) eqm ) . contents ; int found_at = - 1 ; for ( int i = 0 , siz = al . size ( ) ; i < siz && found_at < 0 ; ++ i ) { Entry e = ( Entry ) al . get ( i ) ; if ( eql ( key , e . key ) ) found_at = i ; } if ( found_at >= 0 ) { al = ( ArrayList < Entry > ) al . clone ( ) ; al . remove ( found_at ) ; if ( al . size ( ) == 1 ) return al . get ( 0 ) ; else return new EquivalentMap ( al ) ; } else return eqm ; }
tr	KEY	public int getWatchCount ( ) { return watchCount ; }
tr	IDF	protected static Player create ( Game game , Point position , String name ) { Player player = new Player ( game , position , name ) ; player . setLocation ( position ) ; return player ; }
tr	IDF	public void setYFormula ( String [ ] formula ) throws ParseException , ConnectException { if ( output == null ) output = new Output ( formula , this ) ; else output . setFormula ( formula ) ; outputY . setDim ( formula . length ) ; }
tr	KEY	public int getOrderDetailNum ( ) { return orderDetailNum ; }
tr	IDF	private List < Vector > createGeneration ( Vector x , int nChildren , int n , double div ) { ArrayList < Vector > result = new ArrayList < Vector > ( ) ; for ( int i = 0 ; i < nChildren ; ++ i ) { result . add ( mutate ( x , n , div ) ) ; } return result ; }
tr	KEY	public int getTurn ( ) { return turn ; }
tr	IDF	public void setContent ( String content ) { this . content = content ; }
tr	IDF	@ Override public void actionPerformed ( ActionEvent e ) { definirJacket ( ) ; panel_case . validate ( ) ; panel_case . repaint ( ) ; }
tr	IDF	@ Override public void startNow ( ) { netClient . startNow ( ) ; }
tr	IDF	ArrayList < TreeNode > combineTrees ( int val , ArrayList < TreeNode > leftTrees , ArrayList < TreeNode > rightTrees ) { ArrayList < TreeNode > result = new ArrayList < TreeNode > ( ) ; for ( TreeNode left : leftTrees ) { for ( TreeNode right : rightTrees ) { TreeNode node = new TreeNode ( val ) ; node . left = left ; node . right = right ; result . add ( node ) ; } } return result ; }
tr	IDF	public T visitASTSaveStmt ( ASTSaveStmt form , S state ) throws FractalException ;
tr	IDF	public void imprimir ( String texto ) { io . imprimir ( texto ) ; }
tr	IDF	public void actionPerformed ( ActionEvent e ) { if ( closeLevel ( ) ) { frame . setVisible ( false ) ; frame . dispose ( ) ; System . exit ( 0 ) ; } }
tr	IDF	public void setStart ( Date start ) { this . start = start ; }
tr	KEY	public boolean isLocked ( ) { return locked ; }
tr	KEY	public void setArticleNumber ( long articleNumber ) { this . articleNumber = articleNumber ; }
tr	IDF	@ SuppressWarnings ( "unchecked" ) @ SkipValidation public String load ( ) { if ( electiveId != null ) { elective = electiveService . loadElective ( electiveId ) ; meetingName = elective . getName ( ) ; lecturerId = elective . getLecturer ( ) . getId ( ) ; roomIds = ( List < long > ) CollectionUtils . collect ( elective . getRooms ( ) , new BeanToPropertyValueTransformer ( "id" ) ) ; cohortId = elective . getCohort ( ) . getId ( ) ; numberOfAppointments = elective . getNumberOfAppointments ( ) ; startDate = elective . getAppointments ( ) . get ( 0 ) . getStart ( ) ; endDate = elective . getAppointments ( ) . get ( 0 ) . getEnd ( ) ; return SUCCESS ; } return ERROR ; }
tr	KEY	public int getPageCount ( ) { return pageCount ; }
tr	KEY	public void setDirection ( char newDirection ) { switch ( newDirection ) { case N : case n : if ( direction == SNAKE_DIR_SOUTH ) break ; direction = SNAKE_DIR_NORTH ; break ; case E : case e : if ( direction == SNAKE_DIR_WEST ) break ; direction = SNAKE_DIR_EAST ; break ; case S : case s : if ( direction == SNAKE_DIR_NORTH ) break ; direction = SNAKE_DIR_SOUTH ; break ; case W : case w : if ( direction == SNAKE_DIR_EAST ) break ; direction = SNAKE_DIR_WEST ; break ; } }
tr	KEY	public CargoBean ( ) { }
tr	IDF	public void setProvincia ( String provincia ) { this . provincia = provincia ; }
tr	IDF	private static String formatString ( String str ) { String result = "" ; if ( str != null ) { result = str . replaceAll ( "'" , "''" ) ; } return result ; }
tr	IDF	public String getEntireString ( String key ) { String [ ] buffer = propertiesConfiguration . getStringArray ( key ) ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < buffer . length ; i ++ ) { sb . append ( buffer [ i ] ) ; if ( i != ( buffer . length - 1 ) ) { sb . append ( " " ) ; } } return sb . toString ( ) ; }
tr	IDF	public static String unescapeHtmlAndCapitalizeAndReplaceDash ( String inputText ) { if ( StringUtils . isEmpty ( inputText ) ) { return inputText ; } String cleanText ; cleanText = StringEscapeUtils . unescapeHtml ( inputText ) ; cleanText = cleanText . replaceAll ( "-" , " " ) ; cleanText = cleanText . replaceFirst ( "^\\s" , "" ) ; if ( Character . isLetter ( cleanText . charAt ( 0 ) ) ) { cleanText = StringUtils . capitalize ( cleanText ) ; } else { char [ ] stringArray = cleanText . toCharArray ( ) ; for ( int i = 0 ; i < cleanText . length ( ) ; i ++ ) { if ( Character . isLetter ( cleanText . charAt ( i ) ) ) { stringArray [ i ] = Character . toUpperCase ( stringArray [ i ] ) ; cleanText = new String ( stringArray ) ; break ; } } } return cleanText ; }
tr	KEY	public boolean isSolved ( ) { return this . emptyElements . size ( ) == 0 ; }
tr	KEY	public void updateViewFromModel ( ) ;
tr	IDF	public static void setDir ( String dir ) { MergeTRJTree . dir = dir ; }
tr	KEY	static boolean connected ( boolean [ ] nodesReached ) { for ( int i = 0 ; i < nodesReached . length ; i ++ ) if ( ! nodesReached [ i ] ) return false ; return true ; }
tr	IDF	private static ParseTree parse ( String programa ) { final ANTLRInputStream input = new ANTLRInputStream ( programa ) ; final EnquantoLexer lexer = new EnquantoLexer ( input ) ; final CommonTokenStream tokens = new CommonTokenStream ( lexer ) ; final EnquantoParser parser = new EnquantoParser ( tokens ) ; return parser . programa ( ) ; }
tr	KEY	float getScale ( ) ;
tr	KEY	public long getNumber ( ) { return number ; }
tr	IDF	private void m_uiBW_actionPerformed ( ActionEvent e ) { m_uiColor . setSelected ( false ) ; m_uiBW . setSelected ( true ) ; }
tr	IDF	@ Test public void canGetProductsByCategory ( ) { List < Integer > categories = new ArrayList < > ( ) ; categories . add ( CategoryJUnit . getACategory ( ) ) ; ProductModel addedProduct = ProductModel . builder ( "Night Visions" , 1 ) . description ( "Imagine Dragons" ) . cost ( 149 ) . rrp ( 400 ) . categories ( categories ) . build ( ) ; List < ProductModel > products = null ; boolean isInResult = false ; try { addedProduct = new ProductModel ( insertProduct ( addedProduct ) , addedProduct ) ; products = pd . getProductsByCategory ( addedProduct . getCategories ( ) . get ( 0 ) ) ; for ( ProductModel product : products ) { if ( addedProduct . equals ( product ) ) { isInResult = true ; break ; } } deleteProduct ( addedProduct . getId ( ) ) ; } catch ( WebshopAppException e ) { e . printStackTrace ( ) ; } assertTrue ( isInResult ) ; }
tr	IDF	private void updateBookListView ( ) { for ( Book book : bookList ) { if ( book . getAvailibility ( ) ) { Button btn1 = new Button ( "" ) ; StackPane stckPane = new StackPane ( ) ; stckPane . getChildren ( ) . add ( btn1 ) ; btn1 . setGraphic ( new ImageView ( new Image ( "file:" + book . getCover ( ) ) ) ) ; btn1 . setCursor ( Cursor . default ) ; btn1 . setPrefSize ( 120 , 150 ) ; Label label = new Label ( book . getName ( ) ) ; label . setCursor ( Cursor . default ) ; label . setTranslateY ( 65 ) ; label . setPrefWidth ( 120 ) ; label . setStyle ( "-fx-background-color: rgba(220  220  220  0.95); -fx-font-size : 15px;" ) ; Button removeBookBtn = new Button ( "Remove" ) ; removeBookBtn . setTranslateY ( - 65 ) ; removeBookBtn . setPrefWidth ( 120 ) ; removeBookBtn . setStyle ( "-fx-background-color: linear-gradient(#b21200 0%  #c21400 100%);-fx-text-fill: white;" + "-fx-background-radius: 0;" ) ; removeBookBtn . setOnMouseClicked ( new bookRemoveHandler ( book ) ) ; stckPane . getChildren ( ) . add ( label ) ; stckPane . getChildren ( ) . add ( removeBookBtn ) ; stckPane . setStyle ( "-fx-cursor: hand;" ) ; flowPane . getChildren ( ) . add ( stckPane ) ; } } }
tr	KEY	@ Override public ScenarioTreeStep getNextStep ( ) { if ( this . getFollowUpSteps ( ) . length == 0 ) { throw new RuntimeException ( "ScenarioTreeStepBDOWLAccessory: Kein Folgeschritt gesetzt!" ) ; } return this . getFollowUpStep ( 0 ) ; }
tr	KEY	private static void createInfo ( ) { MainMenuUI mainMenu = new MainMenuUI ( ) ; int option = mainMenu . createInformation ( ) ; switch ( option ) { case 1 : createProduct ( ) ; break ; case 2 : createCategory ( ) ; break ; case 3 : createUser ( ) ; break ; case 0 : break ; default : mainMenu . showOptionNotValid ( ) ; } }
tr	KEY	public void setBatchNumber ( int batchNumber ) { this . batchNumber = batchNumber ; }
tr	KEY	public static DAOBook getBookDAO ( ) { return daoBook ; }
tr	KEY	public int getCoord_X ( ) { return coord_X ; }
tr	IDF	private Dialog createErrorDialog ( String message ) { return new ErrorDialogSwing ( message ) ; }
tr	KEY	public double getLatitude ( ) { return latitude ; }
tr	IDF	public void actionPerformed ( ActionEvent e ) { if ( e . getSource ( ) == avbrytB ) { this . setVisible ( false ) ; } if ( e . getSource ( ) == sparaB ) { if ( kollaDatum ( datumT . getText ( ) ) ) return ; double newValue = 0 ; try { newValue = ParseUtil . parseDouble ( beloppT . getText ( ) ) ; } catch ( NumberFormatException n ) { meddelandeL . setText ( "Ange korrekt v\u00E4rde." ) ; } kalkylUI . reportInterest ( vardePost . getName ( ) , newValue - vardePost . getLatestValue ( ) ) ; vardePost . setValue ( CalendarUtil . parseString ( datumT . getText ( ) ) , newValue ) ; kalkylUI . updateTotal ( ) ; kalkylUI . uppdateraUtskriftsPanelen ( ) ; this . setVisible ( false ) ; } else if ( e . getSource ( ) == changeT ) { String valueChange = changeT . getText ( ) ; if ( valueChange . length ( ) == 0 ) { return ; } boolean add = valueChange . startsWith ( "+" ) ; boolean substract = valueChange . startsWith ( "-" ) ; if ( ! ( add || substract ) ) { meddelandeL . setText ( "V\u00E4rdef\u00F6r\u00E4ndring m\u00E5ste inledas med + eller -" ) ; return ; } if ( ! kollaVarde ( valueChange . substring ( 1 ) ) ) { double value = double . parseDouble ( valueChange . substring ( 1 ) ) ; if ( add ) { beloppT . setText ( "" + ( double . parseDouble ( beloppT . getText ( ) ) + value ) ) ; } else if ( substract ) { beloppT . setText ( "" + ( double . parseDouble ( beloppT . getText ( ) ) - value ) ) ; } } } else if ( e . getSource ( ) == interestT ) { String interestString = interestT . getText ( ) ; if ( ! kollaVarde ( interestString ) ) { double interest = double . parseDouble ( interestString ) ; double amount = vardePost . getLatestValue ( ) ; long numberOfDays = getNumberOfDays ( vardePost . getLastUppdateDate ( ) , CalendarUtil . getTodayCalendarWithClearedClock ( ) ) ; double earned = calculateEarned ( amount , numberOfDays , interest * 0.7D ) ; this . earned = earned ; this . amount = amount ; changeT . setText ( "+" + round ( earned ) ) ; } } }
tr	KEY	public long details ( ) { return this . value ; }
tr	KEY	boolean shouldContinue ( ) ;
tr	IDF	Point move ( Point position , long time ) { return new Point ( moveX ( position . x , time ) , moveY ( position . y , time ) ) ; }
tr	KEY	public JoystickButton getStartButton ( ) { return new JoystickButton ( this , BUTTON_START ) ; }
tr	KEY	public int getYCells ( ) { return yCells ; }
tr	IDF	public void print ( Node node ) { if ( node != null ) { System . out . print ( node . value + " " ) ; print ( node . next ) ; } else { System . out . println ( ) ; } }
tr	KEY	public static void main ( String [ ] args ) { new ThreeSum ( ) . threeSum ( new int [ ] { } ) ; }
tr	KEY	public long optLong ( int index ) { return this . optLong ( index , 0 ) ; }
tr	IDF	public void savePublishingProfile ( PublishingProfile profile ) { Element publishingProfileRootElement = workingDocument . getRootElement ( ) . element ( "PublishingProfiles" ) ; Element profileElement = null ; for ( Object profileObject : publishingProfileRootElement . elements ( "PublishingProfile" ) ) { Element thisProfile = ( Element ) profileObject ; if ( thisProfile . attributeValue ( "name" ) . equals ( profile . getName ( ) ) ) { profileElement = thisProfile ; break ; } } if ( profileElement == null ) { profileElement = publishingProfileRootElement . addElement ( "PublishingProfile" ) ; profileElement . addAttribute ( "name" , profile . getName ( ) ) ; } profileElement . element ( "fontsize" ) . setText ( double . toString ( profile . getFontSize ( ) ) ) ; profileElement . element ( "bmin" ) . setText ( float . toString ( profile . getBoarderMin ( ) ) ) ; profileElement . element ( "bmax" ) . setText ( float . toString ( profile . getBoarderMax ( ) ) ) ; profileElement . element ( "cSize" ) . setText ( Integer . toString ( profile . getcellSize ( ) ) ) ; Element brcolor = profileElement . element ( "brcolor" ) ; brcolor . addAttribute ( "Red" , Integer . toString ( profile . getBoarderColor ( ) . getRed ( ) ) ) ; brcolor . addAttribute ( "Green" , Integer . toString ( profile . getBoarderColor ( ) . getGreen ( ) ) ) ; brcolor . addAttribute ( "Blue" , Integer . toString ( profile . getBoarderColor ( ) . getBlue ( ) ) ) ; Element smbrcolor = profileElement . element ( "smbrcolor" ) ; smbrcolor . addAttribute ( "Red" , Integer . toString ( profile . getSmallBoarderColor ( ) . getRed ( ) ) ) ; smbrcolor . addAttribute ( "Green" , Integer . toString ( profile . getSmallBoarderColor ( ) . getGreen ( ) ) ) ; smbrcolor . addAttribute ( "Blue" , Integer . toString ( profile . getSmallBoarderColor ( ) . getBlue ( ) ) ) ; Element txtcol = profileElement . element ( "txtcol" ) ; txtcol . addAttribute ( "Red" , Integer . toString ( profile . getTextColor ( ) . getRed ( ) ) ) ; txtcol . addAttribute ( "Green" , Integer . toString ( profile . getTextColor ( ) . getGreen ( ) ) ) ; txtcol . addAttribute ( "Blue" , Integer . toString ( profile . getTextColor ( ) . getBlue ( ) ) ) ; }
tr	IDF	final public Person wireUp ( ) { Person p = f . makePerson ( ) ; Thing t = f . makeThing ( ) ; p . setThing ( t ) ; t . setPerson ( p ) ; return p ; }
tr	KEY	public Tile ( ) { }
tr	KEY	public String getName ( ) { return "null" ; }
tr	KEY	public boolean isSel ( ) { return sel ; }
tr	KEY	public void duplicateTopic ( ) ;
tr	IDF	public void run ( ) { try { Thread . sleep ( 1000 ) ; mn . waitToProceed ( ) ; } catch ( InterruptedException x ) { x . printStackTrace ( ) ; } }
tr	KEY	public static DAOCustomer getCustomerDAO ( ) { return daoCustomer ; }
tr	KEY	public boolean isSub ( ) { return - ; }
tr	KEY	public void setNaturalAC ( int naturalAC ) { this . naturalAC = naturalAC ; }
tr	IDF	@ Override public void run ( ) { long t , dt ; long min_t = 9999999 , max_t = 0 , accum = 0 ; for ( int i = 0 ; i < repetitions ; i ++ ) { t = System . currentTimeMillis ( ) ; subject . run ( ) ; dt = System . currentTimeMillis ( ) - t ; accum += dt ; if ( dt < min_t ) min_t = dt ; if ( dt > max_t ) max_t = dt ; passes = i + 1 ; av_t = accum / ( 1.0f * ( i + 1 ) ) ; total_t = accum * 0.001f ; } }
tr	KEY	public static PointEvent tripleHit ( int number ) { return new HitEvent ( number , 3 ) ; }
tr	KEY	public void setCanPro_Venta ( int CanPro_Venta ) { this . CanPro_Venta = CanPro_Venta ; }
tr	KEY	public static int getGongGanByTianZhiAndGongZhi ( int gongzhi , int tiangan ) { return gongGanBiao [ tiangan ] [ gongzhi ] ; }
tr	IDF	boolean isSuccessful ( T result ) ;
tr	IDF	public List < Inbox > findAll ( ) throws SQLException { try { return inboxRepository . findAll ( ) ; } catch ( SQLException ex ) { ex . printStackTrace ( ) ; throw new SQLException ( ex . toString ( ) ) ; } }
tr	KEY	public boolean getNoData ( ) { return NODATA ; }
tr	IDF	public void loadCreatureSprites ( ) { Image [ ] [ ] images = new Image [ 360 ] [ ] ; images [ 0 ] = new Image [ ] { getSmallerImage ( loadImage ( "2ship1.png" ) , .5f ) , getSmallerImage ( loadImage ( "2ship2.png" ) , .5f ) , getSmallerImage ( loadImage ( "2ship3.png" ) , .5f ) , getSmallerImage ( loadImage ( "2ship4.png" ) , .5f ) , getSmallerImage ( loadImage ( "fly1.png" ) , .5f ) , getSmallerImage ( loadImage ( "fly2.png" ) , .5f ) , getSmallerImage ( loadImage ( "fly3.png" ) , .5f ) , getSmallerImage ( loadImage ( "grub1.png" ) , .5f ) , getSmallerImage ( loadImage ( "grub2.png" ) , .5f ) , getSmallerImage ( loadImage ( "star1.png" ) , .5f ) , } ; for ( int i = 1 ; i < 360 ; i ++ ) { images [ i ] = new Image [ images [ 0 ] . length ] ; } for ( int j = 0 ; j < 360 ; j ++ ) { for ( int i = 0 ; i < images [ j ] . length ; i ++ ) { images [ j ] [ i ] = rotateImage ( images [ 0 ] [ i ] , Math . toRadians ( j + 1 ) ) ; } } for ( int j = 0 ; j < 360 ; j ++ ) { playerAnim [ j ] = createPlayerAnim ( images [ j ] [ 0 ] , images [ j ] [ 1 ] , images [ j ] [ 2 ] , images [ j ] [ 3 ] ) ; flyAnim [ j ] = createFlyAnim ( images [ j ] [ 4 ] , images [ j ] [ 5 ] , images [ j ] [ 6 ] ) ; grubAnim [ j ] = createGrubAnim ( images [ j ] [ 7 ] , images [ j ] [ 8 ] ) ; } playerSprite = new Player ( playerAnim ) ; flySprite = new Fly ( flyAnim ) ; grubSprite = new Grub ( grubAnim ) ; }
tr	IDF	private void butRotXActionPerformed ( java . awt . event . ActionEvent evt ) { _cuniv . p2cUpdateObject ( currentObjName , new Vector3d ( 0 , 0 , 0 ) , new Vector3d ( Rotation_Value , 0 , 0 ) ) ; }
tr	KEY	public String getUsername ( ) { return this . getString ( "username" ) ; }
tr	KEY	public abstract ScenarioTreeStep getNextStep ( ) ;
tr	KEY	@ Override public void pressRotateRight ( ) { }
tr	KEY	public void setRow ( int row ) { this . row = row ; }
tr	KEY	protected void interrupted ( ) { }
tr	KEY	public double getAbonoPag_Orden ( ) { return AbonoPag_Orden ; }
tr	KEY	public void setMaxDamage ( int maxDamage ) { this . maxDamage = maxDamage ; }
tr	IDF	@ Override public RecordArticleStatAllTimeModel mapRow ( ResultSet resultSet , int i ) throws SQLException { RecordArticleStatAllTimeModel recordArticleStatAllTimeModel = new RecordArticleStatAllTimeModel ( ) ; recordArticleStatAllTimeModel . setId ( resultSet . getLong ( "id" ) ) ; recordArticleStatAllTimeModel . setUniqueVisitor ( resultSet . getInt ( "uniquevisitor" ) ) ; recordArticleStatAllTimeModel . setUniqueVisitorArticleId ( resultSet . getString ( "uniquevisitorarticleid" ) ) ; recordArticleStatAllTimeModel . setUniqueVisitorArticleTitle ( resultSet . getString ( "uniquevisitorarticletitle" ) ) ; recordArticleStatAllTimeModel . setUniqueVisitorArticleUrl ( resultSet . getString ( "uniquevisitorarticleurl" ) ) ; recordArticleStatAllTimeModel . setPageView ( resultSet . getInt ( "pageview" ) ) ; recordArticleStatAllTimeModel . setPageViewArticleId ( resultSet . getString ( "pageviewarticleid" ) ) ; recordArticleStatAllTimeModel . setPageViewArticleTitle ( resultSet . getString ( "pageviewarticletitle" ) ) ; recordArticleStatAllTimeModel . setPageViewArticleUrl ( resultSet . getString ( "pageviewarticleurl" ) ) ; recordArticleStatAllTimeModel . setVisit ( resultSet . getInt ( "visit" ) ) ; recordArticleStatAllTimeModel . setVisitArticleId ( resultSet . getString ( "visitarticleid" ) ) ; recordArticleStatAllTimeModel . setVisitArticleTitle ( resultSet . getString ( "visitarticletitle" ) ) ; recordArticleStatAllTimeModel . setVisitArticleUrl ( resultSet . getString ( "visitarticleurl" ) ) ; recordArticleStatAllTimeModel . setSite ( siteDao . findById ( resultSet . getLong ( "site_id" ) ) ) ; return recordArticleStatAllTimeModel ; }
tr	IDF	public Level ( File fileName ) throws IOException { layers = new LinkedList < LevelLayer > ( ) ; objects = new LinkedList < GameObject > ( ) ; this . filePath = fileName ; this . levelName = fileName . getName ( ) ; System . out . printf ( "Path is: %s\n" , this . filePath ) ; load ( filePath ) ; this . retrieveTilesetNameFromLayer ( ) ; this . setModified ( false ) ; }
tr	KEY	public int getNHT_Empledo ( ) { return NHT_Empledo ; }
tr	IDF	@ Override public Action loadObject ( JsonObject json ) { return null ; }
tr	KEY	public ActorAssociationGraph ( ) { super ( ) ; }
tr	IDF	public static void GA_JailThrowDice ( ) { if ( JailDiceTries < 3 ) { Player player = players . get ( currentPlayer ) ; dices [ 0 ] . throw ( ) ; dices [ 1 ] . throw ( ) ; if ( dices [ 0 ] . number == dices [ 1 ] . number ) { player . InPrison = false ; player . PrisonTurns = 0 ; player . ChangePosition ( ( dices [ 0 ] . number + dices [ 1 ] . number ) ) ; Game . fields . get ( player . Position ) . Lands ( player ) ; gameboard . showJailFreeCardBtn = false ; gameboard . showJailPayBailBtn = false ; gameboard . showJailThrowDiceBtn = false ; gameboard . showMortgageBtn = false ; gameboard . showNextPlayerBtn = true ; gameboard . showThrowDiceBtn = false ; gameboard . refreshGameControl ( ) ; } else { JailDiceTries ++ ; } } else { } }
tr	IDF	public void setAlterationOverrideQuery ( String value ) { this . alterationOverrideQuery = value ; }
tr	KEY	public boolean getPodou ( ) { return podou ; }
tr	IDF	public String makeOptions ( String amast , String acode ) { String retstr = "" ; for ( int idx = 0 ; idx < getCount ( ) ; idx ++ ) { CDescItem myitem = ( CDescItem ) this . getItem ( idx ) ; if ( ! amast . equals ( myitem . mastval ) ) continue ; retstr = retstr + "<option" + ( acode . equals ( myitem . codeval ) ? " SELECTED " : " " ) + "value='" + myitem . codeval + "'>" + myitem . descval + "</option>" ; } return ( retstr ) ; }
tr	IDF	public void serialize ( final javax . xml . namespace . QName parentQName , javax . xml . stream . XMLStreamWriter xmlWriter ) throws javax . xml . stream . XMLStreamException , org . apache . axis2 . databinding . ADBException { serialize ( parentQName , xmlWriter , false ) ; }
tr	IDF	public void setLocalidad ( String localidad ) { this . localidad = localidad ; }
tr	KEY	public int getTextCollected ( ) { return textCollected ; }
tr	IDF	public String toString ( ) { String returnValue = "<position startposition=\"" + startposition + "\" size=\"" + size + "\"/>" ; return returnValue ; }
tr	KEY	public final AbstractFList < Elt > clone ( ) { return this ; }
tr	IDF	@ JsonProperty ( "factors" ) public void setFactors ( List < Object > factors ) { this . factors = factors ; }
tr	IDF	@ Override public void parseFile ( ) { data = new ArrayList < > ( ) ; try { Scanner in = new Scanner ( new File ( filePath ) ) ; findClasses ( ) ; while ( in . hasNext ( ) ) { String [ ] split = in . nextLine ( ) . split ( " " ) ; List < double > featureList = new ArrayList < > ( ) ; for ( int featureIterator = 0 ; featureIterator < inputs ; featureIterator ++ ) { double featureValue = double . MAX_VALUE ; switch ( split [ featureIterator ] ) { case "x" : featureValue = 1 ; break ; case "o" : featureValue = - 1 ; break ; case "b" : featureValue = 0 ; break ; default : System . out . println ( "Invalid character in parseFile of tic tac toe" ) ; } featureList . add ( featureValue ) ; } List < double > output = getOutputVector ( split [ inputs ] ) ; data . add ( new DataPoint ( featureList , output ) ) ; } in . close ( ) ; } catch ( FileNotFoundException e ) { System . out . println ( "File not found for poker dataset." ) ; e . printStackTrace ( ) ; } finally { findClasses ( ) ; } }
tr	IDF	public ArticleStatModel findByArticleIdAndSiteIdForTotalNumber ( String articleId , long siteId ) { String sql = "SELECT id  uniquevisitor  pageview  visit  date  articleid  articletitle  articleurl  site_id" + " FROM articlestat WHERE articleid = ? AND site_id = ? limit 1" ; ArticleStatModel model = jdbcTemplate . queryForObject ( sql , new Object [ ] { articleId , siteId } , new ArticleStatRowMapper ( ) ) ; return model ; }
tr	IDF	public AddEntity ( Entity one ) { fields . put ( "id" , new Integer ( one . getId ( ) ) ) ; fields . put ( "model" , one . getModel ( ) ) ; fields . put ( "type" , one . getType ( ) ) ; }
tr	KEY	public int size ( ) { return FTreeMap . this . size ( ) ; }
tr	KEY	public abstract void putSpace ( ) throws ParsingException ;
tr	KEY	public void setX ( boolean isX ) { this . isX = isX ; }
tr	KEY	public double getLat ( ) ;
tr	KEY	public void setDone ( int done ) { this . done = done ; }
tr	IDF	public static DataProviderStatus parse ( String value ) { DataProviderStatus status = null ; if ( ! Utilities . isNullOrWhitespace ( value ) ) { String [ ] items = value . split ( "[\\s\\[\\]]" ) ; if ( items != null ) { if ( items . length == 2 ) { status = new DataProviderStatus ( items [ 0 ] , items [ 1 ] ) ; } else if ( items . length == 4 ) { status = new DataProviderStatus ( items [ 0 ] , items [ 3 ] , items [ 1 ] ) ; } } } return status ; }
tr	IDF	public Context ( Strategy varObjStrategy ) { this . objStrategy = varObjStrategy ; }
tr	KEY	public List < double > getLocation ( ) { return location ; }
tr	IDF	public List < File > traversalFiles ( File file , String tail ) { List < File > files = new ArrayList < File > ( ) ; if ( file . isDirectory ( ) ) { for ( File descendant : file . listFiles ( ) ) { for ( File define : traversalFiles ( descendant , tail ) ) { if ( define . getName ( ) . endsWith ( tail ) ) { files . add ( define ) ; } } } } else { if ( file . getName ( ) . endsWith ( tail ) ) { files . add ( file ) ; } } return files ; }
tr	IDF	private VectorResiduumValue fittest ( List < Vector > mates , Matrix A , Vector b ) { Vector candidate = mates . get ( 0 ) ; double eps = residuum ( A , b , candidate ) ; for ( int i = 1 ; i < mates . size ( ) ; ++ i ) { double mateEps = residuum ( A , b , mates . get ( i ) ) ; if ( mateEps < eps ) { eps = mateEps ; candidate = mates . get ( i ) ; } } VectorResiduumValue vrv = new VectorResiduumValue ( ) ; vrv . eps = eps ; vrv . v = candidate ; return vrv ; }
tr	IDF	public final void yyclose ( ) throws java . io . IOException { zzAtEOF = true ; zzEndRead = zzStartRead ; if ( zzReader != null ) zzReader . close ( ) ; }
tr	KEY	public synchronized void xassignAKeyCode ( int code ) { a = code ; }
tr	KEY	public synchronized void start ( ) { this . fileWatcher . start ( ) ; this . portWatcher . start ( ) ; }
tr	IDF	public final void tickNoMove ( ) { xOld = x ; yOld = y ; }
tr	IDF	@ Override public Object invoke ( Object proxy , Method method , Object [ ] args ) throws Throwable { if ( method . isDefault ( ) ) { final class < ? > declaringClass = method . getDeclaringClass ( ) ; final MethodHandles . Lookup lookup = MethodHandles . publicLookup ( ) . in ( declaringClass ) ; final Field f = MethodHandles . Lookup . class . getDeclaredField ( "allowedModes" ) ; final int modifiers = f . getModifiers ( ) ; if ( Modifier . isFinal ( modifiers ) ) { final Field modifiersField = Field . class . getDeclaredField ( "modifiers" ) ; modifiersField . setAccessible ( true ) ; modifiersField . setInt ( f , modifiers & ~ Modifier . final ) ; f . setAccessible ( true ) ; f . set ( lookup , MethodHandles . Lookup . private ) ; } return lookup . unreflectSpecial ( method , declaringClass ) . bindTo ( proxy ) . invokeWithArguments ( args ) ; } if ( args . length == 1 ) { } else if ( args . length == 2 ) { } return null ; }
tr	KEY	public void takeAction ( ) { switch ( _text ) { case "Details" : break ; case "Produce" : break ; case "Move" : break ; case "Attack" : break ; case "Unload" : break ; default : throw new IllegalArgumentException ( "[ActionMenuItem.takeAction()] unable to parse text input (" + _text + ")" ) ; } _active = false ; }
tr	KEY	public synchronized int xgetR3InitialDelay ( ) { return r3ID ; }
tr	KEY	public boolean isEmpty ( ) ;
tr	IDF	protected void nextWaypoint ( ) { if ( path . isEmpty ( ) ) { waypointW = null ; state = IDLE ; } else { waypointW = path . get ( 0 ) ; path . remove ( 0 ) ; } }
tr	IDF	public void setBilling ( Address billing ) { this . billing = billing ; }
tr	IDF	public void dbDeleteResult1 ( Connection aconn ) { try { String qstr = "Delete From TestResultTbl Where TestGroupId='" + testgroupid + "' and TestId='" + testid + "' and ForecasterId='" + fc1 + "'" ; Statement qstmt = aconn . createStatement ( ) ; qstmt . executeUpdate ( qstr ) ; qstmt . close ( ) ; } catch ( Exception ex ) { CLogError . logError ( CAppConsts . ErrorFile , false , "CTestItem.dbDeleteResult1 cannot delete item. " , ex ) ; } }
tr	KEY	@ Override public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( ) != obj . getClass ( ) ) { return false ; } final Studio other = ( Studio ) obj ; if ( double . doubleToLongBits ( this . area ) != double . doubleToLongBits ( other . area ) ) { return false ; } return true ; }
tr	IDF	public void setComments ( String comments ) { this . comments = comments ; }
tr	IDF	@ Id @ GeneratedValue ( strategy = GenerationType . IDENTITY ) public int getId ( ) { return id ; }
tr	KEY	public int getMax ( ) { return max ; }
tr	KEY	public int getPoints ( ) { return points ; }
tr	IDF	public static void main ( String [ ] args ) throws Exception { long currentValue = long . decode ( args [ 0 ] ) ; int position = Integer . parseInt ( args [ 1 ] ) ; boolean value = boolean . parseBoolean ( args [ 2 ] ) ; currentValue = PackedLong . set ( currentValue , position , value ) ; System . out . println ( currentValue ) ; }
tr	KEY	public void commitTrans ( ) throws Exception ;
tr	KEY	public final OrderedProperties put ( final String key , final boolean value ) { super . put ( key , boolean . toString ( value ) ) ; return this ; }
tr	KEY	public int getColumnCount ( ) { return header . length ; }
tr	IDF	@ XmlElementDecl ( namespace = "http://resource.faturamento.soa32/" , name = "getResponse" ) public JAXBElement < GetResponse > createGetResponse ( GetResponse value ) { return new JAXBElement < GetResponse > ( _GetResponse_QNAME , GetResponse . class , null , value ) ; }
tr	IDF	public HgLog ( String hgPath , String folder , TimeRange timeRange ) { this . hgPath = hgPath ; this . folder = folder ; this . timeRange = timeRange ; this . commandLine = hgLog ( hgPath , folder , timeRange ) ; }
tr	KEY	public char next ( ) throws JSONException { if ( this . useLastChar ) { this . useLastChar = false ; if ( this . lastChar != 0 ) { this . index += 1 ; } return this . lastChar ; } int c ; try { c = this . reader . read ( ) ; } catch ( IOException exc ) { throw new JSONException ( exc ) ; } if ( c <= 0 ) { this . lastChar = 0 ; return 0 ; } this . index += 1 ; this . lastChar = ( char ) c ; return this . lastChar ; }
tr	IDF	void setPackageId ( String packageId ) { this . packageId = packageId ; }
tr	IDF	private TreeNode rebuild ( String [ ] nodes , int [ ] index ) { String data = nodes [ index [ 0 ] ++ ] ; if ( data . equals ( "NULL" ) ) return null ; TreeNode node = new TreeNode ( Integer . parseInt ( data ) ) ; if ( index [ 0 ] < nodes . length ) { TreeNode left = rebuild ( nodes , index ) ; node . left = left ; } if ( index [ 0 ] < nodes . length ) { TreeNode right = rebuild ( nodes , index ) ; node . right = right ; } return node ; }
tr	IDF	public void mouseExited ( java . awt . event . MouseEvent evt ) { buttonVoltar_HistoriaMouseExited ( evt ) ; }
tr	KEY	public void setBlank ( boolean isBlank ) { this . isBlank = isBlank ; }
tr	IDF	public Geometry ( int m1 , int n1 ) { m = m1 ; n = n1 ; vertices = new double [ ( m + 1 ) * ( n + 1 ) + 2 ] [ 3 ] ; faces = new int [ m * n ] [ 4 ] ; }
tr	IDF	public ExpressaoBinaria ( Expressao expressaoEsquerda , Expressao expressaoDireita , String operator ) { this . expressaoEsquerda = expressaoEsquerda ; this . expressaoDireita = expressaoDireita ; this . operador = operator ; }
tr	IDF	@ Override public double getLatestValue ( ) { double sum = 0 ; for ( int index = 0 ; index < poster . size ( ) ; index ++ ) { sum += poster . elementAt ( index ) . getLatestValue ( ) ; } return sum ; }
tr	KEY	public static final Country getByNumeric ( final int code ) { return numericMap . get ( code ) ; }
tr	IDF	public void setSubFactors ( List < SubFactor > subFactors ) { this . subFactors = subFactors ; }
tr	IDF	public void Insert ( int key ) { int i ; n ++ ; i = n - 1 ; while ( i > 0 && A [ ( i - 1 ) / 2 ] > key ) { A [ i ] = A [ ( i - 1 ) / 2 ] ; i = ( i - 1 ) / 2 ; } A [ i ] = key ; }
tr	IDF	public void jetsOff ( ) { if ( on ) { System . out . println ( "Hottub jets are off" ) ; } }
tr	KEY	@ Override public void call ( ) { throw toThrow ; }
tr	IDF	protected void fillRoom ( Rectangle r ) { fillRectangle ( MapRand . innerRectangle ( r ) , MapTile . ROOM_FLOOR ) ; fillWallRoom ( r ) ; }
tr	IDF	public void setApe2 ( String ape2 ) { this . ape2 = ape2 ; }
tr	IDF	@ Test public void test0 ( ) { LRUCache test = new LRUCache ( 0 ) ; test . set ( 1 , 1 ) ; assert . assertEquals ( test . get ( 1 ) , - 1 ) ; }
tr	IDF	@ Override public < T > T decode ( String jsonString , class < T > resultClass ) { if ( resultClass == void . TYPE ) { return null ; } return gson . fromJson ( jsonString , resultClass ) ; }
tr	IDF	public void put ( K toPut ) { evicted . remove ( toPut ) ; }
tr	KEY	@ Override public void putCharWhileString ( char c ) throws ParsingException { throw new UnsupportedCharacterException ( c ) ; }
tr	KEY	@ Override public boolean isNatural ( ) { return false ; }
tr	IDF	public void go ( String filename ) { File f = new File ( filename ) ; if ( ! f . isFile ( ) ) { System . out . println ( filename + " is not a file.  Exiting." ) ; System . exit ( 0 ) ; } for ( int i = 0 ; i < depthvals . size ( ) ; i ++ ) { String range = depthvals . get ( i ) ; StringTokenizer stk = new StringTokenizer ( range , "-\n" ) ; double mind = - double . parseDouble ( stk . nextToken ( ) ) ; double maxd = - double . parseDouble ( stk . nextToken ( ) ) ; ShapefileReader sr = new ShapefileReader ( filename ) ; String root = filename . substring ( 0 , inputFileName . lastIndexOf ( "." ) ) ; ShapefileWriter sw = new ShapefileWriter ( sr . getSchema ( ) , root + "_" + range + ".shp" ) ; FeatureIterator < SimpleFeature > fi = sr . getIterator ( ) ; List < SimpleFeature > features = new ArrayList < SimpleFeature > ( ) ; while ( fi . hasNext ( ) ) { SimpleFeature feature = fi . next ( ) ; feature . setAttribute ( minDepthFieldName , mind ) ; feature . setAttribute ( maxDepthFieldName , maxd ) ; features . add ( feature ) ; } sw . write ( features ) ; System . out . println ( depthvals . get ( i ) + " complete." ) ; } }
tr	IDF	public CONLLWriter ( Options options , DependencyPipe pipe ) { this . options = options ; this . labels = pipe . types ; this . args = pipe . args ; }
tr	IDF	void updateDic ( ) { Data d ; FlowArrow a ; dataDic . removeAll ( dataDic ) ; for ( int i = 0 ; i < shapes . size ( ) ; i ++ ) { Symbol s = shapes . get ( i ) ; if ( s . gettype ( ) . equals ( "flowarrow" ) ) { a = ( FlowArrow ) s ; d = new Data ( a . name , a . type , a . description ) ; dataDic . add ( d ) ; } } }
tr	IDF	protected final void mMISC ( boolean _createToken ) throws RecognitionException , CharStreamException , TokenStreamException { int _ttype ; Token _token = null ; int _begin = text . length ( ) ; _ttype = MISC ; int _saveIndex ; switch ( LA ( 1 ) ) { case - : { match ( - ) ; break ; } case _ : { match ( _ ) ; break ; } default : { throw new NoViableAltForCharException ( ( char ) LA ( 1 ) , getFilename ( ) , getLine ( ) , getColumn ( ) ) ; } } if ( _createToken && _token == null && _ttype != Token . SKIP ) { _token = makeToken ( _ttype ) ; _token . setText ( new String ( text . getBuffer ( ) , _begin , text . length ( ) - _begin ) ) ; } _returnToken = _token ; }
tr	IDF	@ Override public FractalValue div ( FractalValue val ) throws FractalException { if ( ! val . isNumber ( ) ) { throw new FractalTypeException ( FractalTypes . REAL , val . getType ( ) ) ; } else if ( val . isInt ( ) ) { return new FractalInt ( intValue ( ) / val . intValue ( ) ) ; } else { return new FractalReal ( realValue ( ) / val . realValue ( ) ) ; } }
tr	KEY	public void kill ( ) ;
tr	IDF	public void set ( final int questionNumber , final Location ql ) { final Database connect = new Database ( _databaseName ) ; final Hashtable < enum < ? > , Object > vals = new Hashtable < enum < ? > , Object > ( ) ; vals . put ( DatabaseAbstractQuestion . Column . QUESTION_NUMBER , "" + questionNumber ) ; vals . put ( Column . CATEGORY , ql . getCategory ( ) . replaceAll ( "\\'" , "\\\\'" ) ) ; vals . put ( Column . SUB_CATEGORY , ql . getSubCategory ( ) . replaceAll ( "\\'" , "\\\\'" ) ) ; vals . put ( Column . DOCUMENT , ql . getDocumentName ( ) . replaceAll ( "\\'" , "\\\\'" ) ) ; vals . put ( Column . CHAPTER , ql . getChapter ( ) . replaceAll ( "\\'" , "\\\\'" ) ) ; vals . put ( Column . SECTION , ql . getSection ( ) . replaceAll ( "\\'" , "\\\\'" ) ) ; vals . put ( Column . PAGE , ql . getPage ( ) . replaceAll ( "\\'" , "\\\\'" ) ) ; connect . insert ( TABLE_NAME , vals ) ; connect . disconnect ( ) ; }
tr	IDF	public void setNewInfo ( News newInfo ) { this . newInfo = newInfo ; }
tr	KEY	public void setFileSize ( long value ) { this . fileSize = value ; }
tr	KEY	public void setPreis ( double preis ) { this . preis = preis ; }
tr	IDF	public customerInfoHandler ( Customer customer ) { super ( ) ; this . customer = customer ; }
tr	IDF	@ Override public void go ( ) { super . go ( ) ; System . out . println ( ) ; }
tr	KEY	protected int getTripleBogeys ( ) { return tripleBogeys ; }
tr	KEY	public void setNumPiezas ( int numPiezas ) { this . numPiezas = numPiezas ; }
tr	IDF	public static void main ( String [ ] args ) { Connection connection = ConnectionFactory . getInstance ( ) . getConnection ( ) ; String script = ScriptHelper . getInstance ( ) . getScriptAsString ( "./scripts/scriptCreationStockDepotDB.sql" ) ; ScriptHelper . getInstance ( ) . executeScript ( script , connection ) ; }
tr	IDF	public Vector2D normalize ( ) { double mag = FastMath . sqrt ( x * x + y * y ) ; if ( mag < double . MIN_VALUE ) { x = y = 0.0 ; } else { x /= mag ; y /= mag ; } return this ; }
tr	KEY	float getPower ( ) ;
tr	KEY	public void setRows ( int rows ) { this . rows = rows ; }
tr	IDF	@ Override public int hash ( String s ) { int sum = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { sum += s . charAt ( i ) * 37 ; } return Math . abs ( sum ) ; }
tr	KEY	public void setA ( double a ) { this . a = a ; }
tr	IDF	public static void createDialogBackPanel2 ( JDialog dialog , Component parent ) { DialogBackPanel newContentPane = new DialogBackPanel ( dialog , "" ) ; dialog . setContentPane ( newContentPane ) ; dialog . setSize ( parent . getSize ( ) ) ; dialog . setLocation ( parent . getLocationOnScreen ( ) ) ; }
tr	KEY	public void setSpeichergroesse ( int speichergroesse ) { this . speichergroesse = speichergroesse ; }
tr	IDF	@ Override protected M doInBackground ( ) throws Exception { return SearchTask . this . search ( ) ; }
tr	IDF	@ Override public void update ( String event ) { if ( event . equalsIgnoreCase ( "Opened" ) ) checkAvailableCells ( ) ; if ( event . equalsIgnoreCase ( "Exploded" ) ) { lockBoard ( "E" ) ; clock . stopClock ( ) ; } }
tr	IDF	private void m_uiOperation1_actionPerformed ( ActionEvent e ) { showDebugger ( ) ; }
tr	KEY	public void setID ( long id ) { this . ID = id ; }
tr	KEY	void notifyClients ( ) ;
tr	IDF	@ Override protected float getLifeTime ( ) { return 0.8f * random ( 0.5f , 1.5f ) ; }
tr	KEY	public CPU ( ) { }
tr	KEY	public int getRowsAmount ( ) ;
tr	KEY	public int unpack ( int packedRGB , int component ) { return packedRGB >> 8 * ( 2 - component ) & 255 ; }
tr	IDF	public String multiplyChar ( String s1 , char c , int shift ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < shift ; i ++ ) builder . append ( 0 ) ; int x = c - 0 ; int carry = 0 ; for ( int i = s1 . length ( ) - 1 ; i >= 0 ; i -- ) { int product = ( s1 . charAt ( i ) - 0 ) * x + carry ; builder . append ( product % 10 ) ; carry = product / 10 ; } if ( carry > 0 ) builder . append ( carry ) ; builder . reverse ( ) ; return builder . toString ( ) ; }
tr	IDF	public void bumpInto ( int x , int y ) { byte block = level . getBlock ( x , y ) ; if ( ( ( Level . TILE_BEHAVIORS [ block & ff ] ) & Level . BIT_PICKUPABLE ) > 0 ) { Mario . getCoin ( ) ; sound . play ( Art . samples [ Art . SAMPLE_GET_COIN ] , new FixedSoundSource ( x * 16 + 8 , y * 16 + 8 ) , 1 , 1 , 1 ) ; level . setBlock ( x , y , ( byte ) 0 ) ; addSprite ( new CoinAnim ( x , y + 1 ) ) ; if ( recorder != null ) recorder . recordCoin ( ) ; } for ( Sprite sprite : sprites ) { sprite . bumpCheck ( x , y ) ; } }
tr	IDF	void saveOrUpdateSeminar ( long id , String meetingName , long lecturerId , List < long > roomIds , int numberOfAppointments , Date startDate , Date endDate ) ;
tr	IDF	public TestArrayWorld ( int w , int h ) { width = w ; height = h ; generation = 0 ; cells = new boolean [ height ] [ width ] ; }
tr	IDF	public String generateExhaustiveFormalExpression ( ) throws FileNotFoundException , UnsupportedEncodingException { String result = "" ; for ( Element e : this . elements ) { if ( e . getFormalExpressions ( ) != "" ) result += e . getFormalExpressions ( ) + "\n" ; } for ( SecurityGoal sg : this . sg_elems ) { if ( sg . getFormalExpressions ( ) != "" ) result += sg . getFormalExpressions ( ) + "\n" ; } for ( Link l : this . links ) { if ( l . getFormalExpressions ( ) != "" ) result += l . getFormalExpressions ( ) + "\n" ; } result = result . toLowerCase ( ) ; String output = "" ; if ( this . getType ( ) == InfoEnum . ModelCategory . REQUIREMENT . name ( ) ) { output = InfoEnum . current_directory + "/dlv/models/ex_req_" + this . getLayer ( ) . toLowerCase ( ) + "_model.dl" ; } else { output = InfoEnum . current_directory + "/dlv/models/other_model.dl" ; } PrintWriter writer = new PrintWriter ( output , "UTF-8" ) ; writer . println ( result ) ; writer . close ( ) ; return output + " " ; }
tr	KEY	public void setOverlap ( boolean overlap ) { this . overlap = overlap ; }
tr	KEY	public static int getInitialImageSize ( ) { return getInteger ( "sun.java2d.renderer.pixelsize" , 2048 , 64 , 32 * 1024 ) ; }
tr	KEY	private boolean reachNextLevel ( ) { int lines4NextLevel = this . getLevelGate ( ) * ( this . getLevel ( ) + 1 ) ; boolean ret = ( this . getScoredLineCnt ( ) >= lines4NextLevel ) ; return ret ; }
tr	IDF	public FTreeSet < Elt > union ( Collection < ? extends Elt > coll ) { if ( coll == this || coll . isEmpty ( ) ) return this ; else if ( coll instanceof FTreeSet && eql ( comp , ( ( FTreeSet ) coll ) . comp ) ) { FTreeSet < Elt > fts = ( FTreeSet < Elt > ) coll ; if ( isEmpty ( ) ) return fts ; Object t = union ( tree , fts . tree ) ; return make ( t , comp ) ; } else { FTreeSet < Elt > fts = new FTreeSet < Elt > ( coll , comp ) ; Object t = union ( tree , fts . tree ) ; return make ( t , comp ) ; } }
tr	KEY	public static boolean isValidLightState ( String state ) { try { parseLightState ( state ) ; } catch ( IllegalArgumentException e ) { return false ; } return true ; }
tr	KEY	@ AfterClass public static void tearDownClass ( ) throws Exception { }
tr	KEY	public void mouseMoved ( final MouseEvent event ) { }
tr	KEY	public final List < File > getFilesWithinIncSub ( ) throws DirectoryNotOnDiskException , DiskReadException { checkExists ( ) ; return this . deepListFiles ( null , this ) ; }
tr	IDF	@ Override public void onPacketSent ( int packetId , Socket socket ) { synchronized ( mListeners ) { for ( PacketListener listener : mListeners ) { try { listener . onPacketSent ( packetId , socket ) ; } catch ( RuntimeException e ) { System . out . println ( "Error notifying listener" ) ; e . printStackTrace ( ) ; } } } }
tr	IDF	public SimFileReader ( File systemSimFile ) { this . systemSimFile = systemSimFile ; metaDataRegex = Pattern . compile ( STEP_FILE_REGEX , Pattern . DOTALL ) ; stepLineRegex = Pattern . compile ( "[0-9MLF]{4 10}" ) ; }
tr	IDF	public Topic addTopic ( Topic topic ) ;
tr	KEY	@ Override public boolean blockExplosion ( ) { return false ; }
tr	KEY	public double getWeightChange ( ) { return weightChange ; }
tr	IDF	@ Override public void handle ( ActionEvent e ) { screenController . setScreen ( "USER_FIND_SCREEN" ) ; }
tr	IDF	public VButton ( String text , int x , int y , int w , int h ) { this . text = text ; this . x = x ; this . y = y ; this . w = w ; this . h = h ; }
tr	IDF	private void onCreate ( ) throws SQLException { setDefaultCloseOperation ( javax . swing . WindowConstants . HIDE_ON_CLOSE ) ; int strLng = DbUtil . loadCategories ( ) . length ; categories = DbUtil . loadCategories ( ) ; for ( int i = 0 ; i < strLng ; i ++ ) { list1 . add ( String . valueOf ( categories [ i ] [ 1 ] ) ) ; } }
tr	KEY	public void windowGainedFocus ( final WindowEvent e ) { }
tr	KEY	public static double millisToSeconds ( double millis ) { return millis / 1000f ; }
tr	IDF	private void jButton1ActionPerformed ( java . awt . event . ActionEvent evt ) { CambiarContrasena cambioContr = new CambiarContrasena ( ) ; String claveOriginal = jTextField1 . getText ( ) ; System . out . println ( jTextField2 . getText ( ) ) ; System . out . println ( jTextField3 . getText ( ) ) ; if ( ! cambioContr . ComprobacionCambioContrasena ( claveOriginal ) ) JOptionPane . showMessageDialog ( null , "La contrase\u00F1a no" + " es correcta." ) ; else { String contra1 = jTextField2 . getText ( ) ; String contra2 = jTextField3 . getText ( ) ; String usuario = this . nombreUsuario ; System . out . println ( nombreUsuario ) ; if ( cambioContr . ComprobacionCambioContrasena ( claveOriginal ) == true && contra1 . equals ( contra2 ) ) { try { class . forName ( "sun.jdbc.odbc.JdbcOdbcDriver" ) ; Connection conexion = DriverManager . getConnection ( "jdbc:odbc:ADSI" ) ; Statement sentencia = conexion . createStatement ( ) ; conexion . setAutoCommit ( false ) ; String consul = "Update Usuario set contrasena= '" + contra1 + "' where email = '" + usuario + "'" ; System . out . println ( consul ) ; sentencia . close ( ) ; conexion . close ( ) ; JOptionPane . showMessageDialog ( null , "La contrase\u00F1a se ha cambiado correctamente." ) ; if ( copiaTipoUsuario == 0 ) { GUIinterfazMenuAdministrador menuAdmin = new GUIinterfazMenuAdministrador ( nombreUsuario ) ; menuAdmin . setVisible ( true ) ; } else if ( copiaTipoUsuario == 1 ) { GUIinterfazMenuArbitro menuArbi = new GUIinterfazMenuArbitro ( nombreUsuario ) ; menuArbi . setVisible ( true ) ; } else if ( copiaTipoUsuario == 2 ) { GUIinterfazMenuPresidente menuPresid = new GUIinterfazMenuPresidente ( nombreUsuario ) ; menuPresid . setVisible ( true ) ; } } catch ( Exception err ) { System . out . println ( "Error " + err . getMessage ( ) ) ; } } else { JOptionPane . showMessageDialog ( null , "Las claves no coinciden. Compruebelo de nuevo" ) ; } } }
tr	IDF	public static void main ( String [ ] args ) { System . out . println ( "Testing binary Min Heap\n" ) ; MinHeap heap = new MinHeap ( 20 ) ; int [ ] inputs = { 10 , 20 , 30 , 40 , 100 , 50 , 60 , 70 , 80 , 90 , 190 } ; for ( int i = 0 ; i < inputs . length ; i ++ ) heap . insert ( inputs [ i ] ) ; heap . print ( ) ; System . out . println ( "Heap size is now " + ( heap . heapSize ) + "\n" ) ; System . out . println ( "Extract min returns " + heap . extractMin ( ) ) ; heap . print ( ) ; System . out . println ( "Heap size is now " + ( heap . heapSize ) + "\n" ) ; System . out . println ( "Extract min returns " + heap . extractMin ( ) ) ; heap . print ( ) ; System . out . println ( "Heap size is now " + ( heap . heapSize ) + "\n" ) ; System . out . println ( "Inserting 3" ) ; heap . insert ( 3 ) ; heap . print ( ) ; System . out . println ( "Heap size is now " + ( heap . heapSize ) + "\n" ) ; System . out . println ( "Running extractMin() 4 times" ) ; heap . extractMin ( ) ; heap . extractMin ( ) ; heap . extractMin ( ) ; int fifty = heap . extractMin ( ) ; System . out . println ( "Last extracted element was " + fifty + "\n" ) ; heap . print ( ) ; System . out . println ( "Heap size is now " + ( heap . heapSize ) + "\n" ) ; }
tr	KEY	public void setWeight ( double weight ) { this . weight = weight ; }
tr	IDF	private Set < Integer > findGivenValueInCol ( int value , int startPoint , int numberOfFinds ) { Set < Integer > valueLocations = new HashSet < Integer > ( ) ; int stopPoint = ( int ) Math . pow ( this . getSize ( ) , 2 ) ; int nextColCellNumber = this . getSize ( ) ; int foundNumber = 0 ; if ( numberOfFinds == 0 ) { foundNumber -- ; } boolean stopSearching = false ; Set < Integer > currentSet = new HashSet < Integer > ( ) ; for ( int i = startPoint ; i < stopPoint && ! stopSearching ; i += nextColCellNumber ) { if ( getElementWithNumber ( i ) == EMPTY_ELEMENT_VALUE ) { currentSet . addAll ( this . validElementsCache . get ( i ) ) ; for ( int valueTest : currentSet ) { if ( value == valueTest && foundNumber < numberOfFinds ) { valueLocations . add ( i ) ; if ( numberOfFinds != 0 ) { foundNumber ++ ; } } else if ( value == valueTest ) { valueLocations . clear ( ) ; stopSearching = true ; break ; } } currentSet . clear ( ) ; } } return ( valueLocations ) ; }
tr	KEY	public String [ ] getColumnNames ( ) { return this . columnNames ; }
tr	IDF	public List < Rol > getAlleRollen ( ) { List < Rol > rollen = new ArrayList < Rol > ( ) ; try { PreparedStatement prepareStatement = manager . prepareStatement ( "SELECT * FROM rol" ) ; ResultSet resultSet = prepareStatement . executeQuery ( ) ; while ( resultSet . next ( ) ) { Rol rol = new Rol ( resultSet . getLong ( 1 ) , resultSet . getString ( 2 ) ) ; for ( Permissie p : getPermissiesVanRol ( rol . getId ( ) ) ) { rol . addPermissie ( p ) ; } rollen . add ( rol ) ; } return rollen ; } catch ( SQLException e ) { e . printStackTrace ( ) ; return rollen ; } }
tr	IDF	@ Override public void add ( IKey dado ) throws SQLException { String sql = "INSERT INTO ferramenta(codigo descricao) VALUES (? ?)" ; PreparedStatement pst = connection . prepareStatement ( sql ) ; pst . setString ( 1 , ( ( Ferramenta ) dado ) . getCodigo ( ) ) ; pst . setString ( 2 , ( ( Ferramenta ) dado ) . getDescricao ( ) ) ; pst . executeUpdate ( ) ; pst . close ( ) ; }
tr	IDF	@ Override public Observable < RxMessage < String >> call ( RxMessage < String > stringRxMessage ) { assertEquals ( "hello1" , stringRxMessage . body ( ) ) ; return stringRxMessage . observeReply ( "goodday1" ) ; }
tr	IDF	public static void main ( String [ ] args ) { PlayerStats ps = PlayerStats . getInstance ( ) ; System . out . println ( ps . getProperty ( "total" ) ) ; }
tr	IDF	public void getSetUp ( ) { if ( setUp == false ) { if ( P1character . equals ( "White" ) ) { getWorld ( ) . addObject ( whiteKnight , 100 , 400 ) ; } else if ( P1character . equals ( "Bond" ) ) { getWorld ( ) . addObject ( jamesBond , 100 , 400 ) ; } else if ( P1character . equals ( "Ninja" ) ) { getWorld ( ) . addObject ( redNinja , 100 , 400 ) ; } else if ( P1character . equals ( "Mage" ) ) { getWorld ( ) . addObject ( purpleMage , 100 , 400 ) ; } else if ( P1character . equals ( "Ringer" ) ) { getWorld ( ) . addObject ( markGreen , 100 , 400 ) ; } setUp = true ; } }
tr	IDF	@ Override public void translate ( double x , double y , double z ) { for ( int i = 0 ; i < 4 ; i ++ ) for ( int j = 0 ; j < 4 ; j ++ ) temp . set ( j , i , 0 ) ; temp . set ( 0 , 0 , 1 ) ; temp . set ( 1 , 1 , 1 ) ; temp . set ( 2 , 2 , 1 ) ; temp . set ( 3 , 0 , x ) ; temp . set ( 3 , 1 , y ) ; temp . set ( 3 , 2 , z ) ; temp . set ( 3 , 3 , 1 ) ; this . rightMultiply ( temp ) ; }
tr	IDF	@ Override public UsuarioBean get ( UsuarioBean oUsuarioBean ) throws Exception { if ( oUsuarioBean . getId ( ) > 0 ) { try { oMysql . conexion ( enumTipoConexion ) ; if ( ! oMysql . existsOne ( "usuario" , oUsuarioBean . getId ( ) ) ) { oUsuarioBean . setId ( 0 ) ; } else { oUsuarioBean . setLogin ( oMysql . getOne ( "usuario" , "login" , oUsuarioBean . getId ( ) ) ) ; oUsuarioBean . setPassword ( oMysql . getOne ( "usuario" , "password" , oUsuarioBean . getId ( ) ) ) ; } } catch ( Exception e ) { throw new Exception ( "UsuarioDao.getUsuario: Error: " + e . getMessage ( ) ) ; } finally { oMysql . desconexion ( ) ; } } else { oUsuarioBean . setId ( 0 ) ; } return oUsuarioBean ; }
tr	IDF	@ Override protected void post ( Message request , Message response ) { new HashAndSaltService ( ) . doPost ( request , response ) ; request . put ( AuthenticationInfo . HASH , response . get ( AuthenticationInfo . HASH ) ) ; new PersistentAuthenticationInfoService ( ) . doPost ( request , response ) ; }
tr	KEY	public LogResult ( ) { this ( new ArrayList < > ( ) , new ArrayList < > ( ) , new ArrayList < > ( ) ) ; }
tr	KEY	public OrdenPinturaDetalle ( ) { }
tr	IDF	void actionViewCert ( int num ) { String fileName = pi . getCertificatesPane ( ) . getPath ( num ) ; X509Certificate cert = CryptoUtils . readCertFromDER ( fileName ) ; new ViewWindow ( this , "Certificate view" , "" + cert ) ; }
tr	IDF	@ Override public void onMessageSent ( Message < ClientProtocolParameters > message ) { synchronized ( mListeners ) { for ( MessageListener listener : mListeners ) { try { listener . onMessageSent ( message ) ; } catch ( RuntimeException e ) { System . out . println ( "Error notifying listener." ) ; e . printStackTrace ( ) ; } } } System . out . println ( "\n------------------------------------------------------------\n" + "Message sent.\n------------------------------------------------------------\n" + message ) ; }
tr	KEY	public int GetVItesseMouvement ( ) { return vitesseMouvement ; }
tr	IDF	@ Override public List < QueensAtom > atoms ( ) { return atoms ; }
tr	KEY	protected boolean isServerRunning ( ) { return mainThreadRunning ; }
tr	IDF	public SemanticFrame ( SemanticFrame a ) { sense = a . sense ; predid = a . predid ; arglbids = a . arglbids ; arglbs = null ; }
tr	IDF	public String showStatus ( String myforecaster1 , String myforecaster2 ) { String retstr = "<table class='result' summary='test case status'>\n" ; retstr = retstr + CTestItem . showStatusHead ( myforecaster1 , myforecaster2 ) ; for ( int itst = 0 ; itst < this . getCount ( ) ; itst ++ ) { CTestItem myitem = ( CTestItem ) this . getItem ( itst ) ; retstr = retstr + myitem . showStatus ( ) ; } retstr = retstr + "</table>\n" ; return ( retstr ) ; }
tr	KEY	@ Override public int size ( ) { return OrderedSubsetUnmodifiableMap . this . size ( ) ; }
tr	IDF	public DataAccessObject ( String dbName ) { this . dbName = dbName ; }
tr	IDF	@ Override public String sendMessageVerbose ( String subject , String message , String groupIds , String contactIds , String mobileNumbers , String reference , String from , String username , String password ) { return mytxtbuddySoapApi . sendMessageVerbose ( subject , message , groupIds , contactIds , mobileNumbers , reference , from , username , password ) ; }
tr	KEY	@ Override protected int calculateTabHeight ( int tabPlacement , int tabIndex , int fontHeight ) { return 35 ; }
tr	IDF	public void setLabel ( String label ) { this . label = label ; }
tr	IDF	@ Override public void setCell ( int x , int y , boolean live ) { if ( y < 0 || y >= getHeight ( ) ) return ; if ( x < 0 || x >= getWidth ( ) ) return ; if ( live ) world [ y ] [ x ] = 0 ; }
tr	IDF	public Image getSmallerImage ( Image image , float scale ) { float f_invScale = 1 / scale ; int invScale = ( int ) f_invScale ; AffineTransform transform = new AffineTransform ( ) ; transform . scale ( scale , scale ) ; Image newImage = gc . createCompatibleImage ( image . getWidth ( null ) / invScale , image . getHeight ( null ) / invScale , Transparency . BITMASK ) ; Graphics2D g = ( Graphics2D ) newImage . getGraphics ( ) ; g . drawImage ( image , transform , null ) ; g . dispose ( ) ; return newImage ; }
tr	KEY	@ AfterClass public static void tearDownClass ( ) throws Exception { }
tr	KEY	private int firstIndexOnPage ( final int page ) { return page * gridManager . getBoxCount ( ) ; }
tr	KEY	public int getColor ( ) { return color ; }
tr	KEY	public boolean isActive ( ) { return _active ; }
tr	KEY	public int getDataType ( ) { return dataType ; }
tr	KEY	public void initialize ( ) { }
tr	IDF	public void setFlightStatus ( FlightStatus value ) { this . flightStatus = value ; }
tr	KEY	public long getId ( ) { return id ; }
tr	KEY	public void setTime ( long time ) { this . time = time ; }
tr	KEY	public synchronized void xsetYrepeatable ( boolean flag ) { isYrepeatable = flag ; }
tr	IDF	public void DirectHit ( ABObject target , List < ABObject > objects ) { if ( ! target . IsAngular ( ) ) { double ratio = target . height / target . width ; } else { } }
tr	KEY	public TopicCreateViewImpl ( ) { super ( "TopicEditView" ) ; this . initComponents ( ) ; }
tr	IDF	@ Test public void testLoadPropertiesFile ( ) { Properties props = FileUtilities . loadPropertiesFile ( "H:\\p4\\dev\\java\\Questions\\Current\\test\\ca\\charland\\questions\\utilities\\test.properties" ) ; assertEquals ( "1234" , props . getProperty ( "test" ) ) ; assertEquals ( "another" , props . getProperty ( "test2" ) ) ; assertEquals ( null , props . getProperty ( "bad" ) ) ; }
tr	IDF	public Writer ( String file_path , boolean append_value ) { path = file_path ; append_to_text = append_value ; }
tr	IDF	private void playSound ( final AudioSample sample ) throws IOException , LineUnavailableException { final ByteArrayInputStream stream = sample . getStream ( ) ; stream . reset ( ) ; final SourceDataLine srcDataLine = ( SourceDataLine ) AudioSystem . getLine ( sample . getInfo ( ) ) ; srcDataLine . open ( sample . getFormat ( ) ) ; srcDataLine . start ( ) ; try { int count ; while ( ( count = stream . read ( buffer ) ) != - 1 ) { srcDataLine . write ( buffer , 0 , count ) ; } } finally { srcDataLine . drain ( ) ; srcDataLine . close ( ) ; } }
tr	IDF	boolean checaTipo ( AmbienteCompilacao ambiente ) throws VariavelNaoDeclaradaException , VariavelJaDeclaradaException ;
tr	KEY	public void setDataFreshness ( long value ) { this . dataFreshness = value ; }
tr	KEY	public JSONWriter array ( ) throws JSONException { if ( this . mode == i || this . mode == o || this . mode == a ) { this . push ( null ) ; this . append ( "[" ) ; this . , = false ; return this ; } throw new JSONException ( "Misplaced array." ) ; }
tr	IDF	public void setName ( String name ) { this . name = name ; }
tr	IDF	public Cliente ( int idcliente , String razon_social , String direccion , String telefonos , String cp , String localidad , String provincia , String pais , String fac_nombre , String fac_direccion , String fac_cuit , int idtransporte , String web , String mail , String comentarios , double por_fac , double iva , double descuento , int color , double precio_natural , double precio_blanco , double precio_color , boolean sel , Date fua , Date fi , int ruta , String aux1 , String aux2 , double des_natural , double des_blanco , double des_color ) { this . idcliente = idcliente ; this . razon_social = razon_social ; this . direccion = direccion ; this . telefonos = telefonos ; this . cp = cp ; this . localidad = localidad ; this . provincia = provincia ; this . pais = pais ; this . fac_nombre = fac_nombre ; this . fac_direccion = fac_direccion ; this . fac_cuit = fac_cuit ; this . idtransporte = idtransporte ; this . web = web ; this . mail = mail ; this . comentarios = comentarios ; this . por_fac = por_fac ; this . iva = iva ; this . descuento = descuento ; this . color = color ; this . precio_natural = precio_natural ; this . precio_blanco = precio_blanco ; this . precio_color = precio_color ; this . sel = sel ; this . fua = fua ; this . fi = fi ; this . setRuta ( ruta ) ; this . aux1 = aux1 ; this . aux2 = aux2 ; this . des_natural = des_natural ; this . des_blanco = des_blanco ; this . des_color = des_color ; }
tr	KEY	public SendMessageContactsResponse createSendMessageContactsResponse ( ) { return new SendMessageContactsResponse ( ) ; }
tr	IDF	public String readMessage ( ) throws InterruptedException { boolean myLock = false ; myLock = lock . readLock ( ) . tryLock ( ) ; try { if ( myLock ) { TimeUnit . SECONDS . sleep ( 1 ) ; return this . message ; } else { TimeUnit . SECONDS . sleep ( 1 ) ; return "Could not get lock" ; } } finally { if ( myLock ) lock . readLock ( ) . unlock ( ) ; } }
tr	IDF	public static < A > ITransducer < A , A > drop ( final long n ) { return new ATransducer < A , A > ( ) { @ Override public < R > IReducingFunction < R , A > apply ( IReducingFunction < R , ? super A > rf ) { return new AReducingFunctionOn < R , A , A > ( rf ) { long dropped = 0 ; @ Override public R apply ( R result , A input , AtomicBoolean reduced ) { R ret = result ; if ( dropped < n ) { dropped ++ ; } else { ret = rf . apply ( result , input , reduced ) ; } return ret ; } } ; } } ; }
tr	KEY	public void onNewTemperature ( int [ ] temperature ) ;
tr	IDF	public void displayLegend ( ) { System . out . println ( "===============LEGEND===============" ) ; System . out . println ( "The first letter of each pair represents the color. W is white. B is black." ) ; System . out . println ( "The second letter of each pair represents the type of piece." ) ; System . out . println ( "K - King" ) ; System . out . println ( "Q - Queen" ) ; System . out . println ( "B - Bishop" ) ; System . out . println ( "N - Knight" ) ; System . out . println ( "R - Rook" ) ; System . out . println ( "P - Pawn" ) ; System . out . println ( "====================================" ) ; }
tr	IDF	public NyKontoPostUI ( KalkylUI k , String klickadGrupp ) throws IOException , ClassNotFoundException { kalkyl = k ; setTitle ( "Registrera ny kontopost" ) ; Container c = getContentPane ( ) ; c . setLayout ( null ) ; setSize ( 600 , 300 ) ; c . add ( namnL ) ; namnL . setBounds ( fonsterBredd / 2 - ltDist - ltBredd , ltY + 0 * ( ltHojd + ltDist ) , ltBredd , ltHojd ) ; c . add ( beloppL ) ; beloppL . setBounds ( fonsterBredd / 2 - ltDist - ltBredd , ltY + 1 * ( ltHojd + ltDist ) , ltBredd , ltHojd ) ; c . add ( datumL ) ; datumL . setBounds ( fonsterBredd / 2 - ltDist - ltBredd , ltY + 2 * ( ltHojd + ltDist ) , ltBredd , ltHojd ) ; c . add ( gruppL ) ; gruppL . setBounds ( fonsterBredd / 2 - ltDist - ltBredd , ltY + 3 * ( ltHojd + ltDist ) , ltBredd , ltHojd ) ; c . add ( meddelandeL ) ; meddelandeL . setBounds ( fonsterBredd / 2 - ltDist - ltBredd , ltY + 4 * ( ltHojd + ltDist ) , ltBredd * 2 + ltDist , ltHojd ) ; c . add ( sparaB ) ; sparaB . setBounds ( fonsterBredd / 2 - ltBredd / 2 , ltY + 6 * ( ltHojd + ltDist ) , ltBredd , ltHojd ) ; sparaB . addActionListener ( this ) ; c . add ( avbrytB ) ; avbrytB . setBounds ( fonsterBredd / 2 - 3 * ltBredd / 2 - ltDist , ltY + 6 * ( ltHojd + ltDist ) , ltBredd , ltHojd ) ; avbrytB . addActionListener ( this ) ; c . add ( sparaStangB ) ; sparaStangB . setBounds ( fonsterBredd / 2 + ltBredd / 2 + ltDist , ltY + 6 * ( ltHojd + ltDist ) , ltBredd , ltHojd ) ; sparaStangB . addActionListener ( this ) ; c . add ( namnT ) ; namnT . setBounds ( fonsterBredd / 2 + ltDist , ltY + 0 * ( ltHojd + ltDist ) , ltBredd , ltHojd ) ; c . add ( beloppT ) ; beloppT . setBounds ( fonsterBredd / 2 + ltDist , ltY + 1 * ( ltHojd + ltDist ) , ltBredd , ltHojd ) ; c . add ( datumT ) ; datumT . setBounds ( fonsterBredd / 2 + ltDist , ltY + 2 * ( ltHojd + ltDist ) , ltBredd , ltHojd ) ; c . add ( gruppT ) ; gruppT . setBounds ( fonsterBredd / 2 + ltDist , ltY + 3 * ( ltHojd + ltDist ) , ltBredd , ltHojd ) ; gruppT . setText ( klickadGrupp ) ; setVisible ( true ) ; }
tr	KEY	public double getWeight ( ) { return weight ; }
tr	IDF	@ Override public void widgetSelected ( SelectionEvent arg0 ) { shell . close ( ) ; }
tr	IDF	public void setConnect4Table ( JTable connect4Table ) { this . connect4Table = connect4Table ; }
tr	KEY	public int getScore ( ) { return score ; }
tr	IDF	public void setTitle ( String title ) { this . title = title ; }
tr	KEY	public boolean isCellEditable ( int rowIndex , int columnIndex ) { return canEdit [ columnIndex ] ; }
tr	KEY	public int getIdCategory ( ) { return id_category ; }
tr	KEY	public ConstraintPuzzleGraphicsRenderer ( ) { }
tr	KEY	public void execute ( ) { }
tr	KEY	public SearchResponse createSearchResponse ( ) { return new SearchResponse ( ) ; }
tr	KEY	public boolean hasDeveloper ( ) { return hasDeveLoper ; }
tr	IDF	@ Override public void setFlapPatterns ( final Collection < AngleUnitFlapPattern > patterns ) { pieces = patterns ; }
tr	KEY	private EMF ( ) { }
tr	IDF	public BufferedImage plotTrajectory ( BufferedImage canvas , Rectangle slingshot , Rectangle activeBird ) { Point bird = new Point ( ( int ) ( activeBird . x + 0.5 * activeBird . width ) , ( int ) ( activeBird . y + 0.85 * activeBird . height ) ) ; return plotTrajectory ( canvas , slingshot , bird ) ; }
tr	IDF	@ Override public void delete ( T obj ) { sessionFactory . getCurrentSession ( ) . delete ( obj ) ; }
tr	IDF	public String create ( TableMapper dao ) throws QueryBuilderException { StringBuffer statementText = new StringBuffer ( ) ; statementText . append ( "UPDATE " ) . append ( dao . tableName ( ) ) ; statementText . append ( " SET " ) ; int count = 0 ; for ( String columnName : dao . getColumnNames ( ) ) { count ++ ; statementText . append ( columnName ) . append ( " = ?" ) ; if ( count < dao . getColumnNames ( ) . size ( ) ) { statementText . append ( "   " ) ; } } statementText . append ( " WHERE " ) . append ( "ID" ) . append ( " = ?" ) ; return statementText . toString ( ) ; }
tr	IDF	public String checkAndSave ( ) { collisionList = electiveService . getCollisions ( elective . getId ( ) , lecturerId , roomIds , cohortId , numberOfAppointments , startDate , endDate ) ; if ( collisionList . isEmpty ( ) ) { save ( ) ; return SUCCESS ; } isCollided = true ; showCollisionErrors ( collisionList ) ; return INPUT ; }
tr	KEY	public int getFileSize ( ) { return fileSize ; }
tr	IDF	@ Override public List < Cohort > loadAllCohortsSortedByYearOfAdmission ( ) { List < Cohort > cohortList = cohortDAO . loadAll ( ) ; Collections . sort ( cohortList , cohortComparator ) ; return cohortList ; }
tr	KEY	private String getAddressString ( int highByte , int lowByte ) { int iAddr = joinBytes ( highByte , lowByte ) ; switch ( iAddr ) { case VSYNC : return "VSYNC" ; case VBLANK : return "VBLANK" ; case WSYNC : return "WSYNC" ; case RSYNC : return "RSYNC" ; case NUSIZ0 : return "NUSIZ0" ; case NUSIZ1 : return "NUSIZ1" ; case COLUP0 : return "COLUP0" ; case COLUP1 : return "COLUP1" ; case COLUPF : return "COLUPF" ; case COLUBK : return "COLUBK" ; case CTRLPF : return "CTRLPF" ; case REFP0 : return "REFP0" ; case REFP1 : return "REFP1" ; case PF0 : return "PF0" ; case PF1 : return "PF1" ; case PF2 : return "PF2" ; case RESP0 : return "RESP0" ; case RESP1 : return "RESP1" ; case RESM0 : return "RESM0" ; case RESM1 : return "RESM1" ; case RESBL : return "RESBL" ; case AUDC0 : return "AUDC0" ; case AUDC1 : return "AUDC1" ; case AUDF0 : return "AUDF0" ; case AUDF1 : return "AUDF1" ; case AUDV0 : return "AUDV0" ; case AUDV1 : return "AUDV1" ; case GRP0 : return "GRP0" ; case GRP1 : return "GRP1" ; case ENAM0 : return "ENAM0" ; case ENAM1 : return "ENAM1" ; case ENABL : return "ENABL" ; case HMP0 : return "HMP0" ; case HMP1 : return "HMP1" ; case HMM0 : return "HMM0" ; case HMM1 : return "HMM1" ; case HMBL : return "HMBL" ; case VDELP0 : return "VDELP0" ; case VDELP1 : return "VDELP1" ; case VDELBL : return "VDELBL" ; case RESMP0 : return "RESMP0" ; case RESMP1 : return "RESMP1" ; case HMOVE : return "HMOVE" ; case HMCLR : return "HMCLR" ; case CXCLR : return "CXCLR" ; case CXM0P : return "CXM0P" ; case CXM1P : return "CXM1P" ; case CXP0FB : return "CXP0FB" ; case CXP1FB : return "CXP1FB" ; case CXM0FB : return "CXM0FB" ; case CXM1FB : return "CXM1FB" ; case CXBLPF : return "CXBLPF" ; case CXPPMM : return "CXPPMM" ; case INPT0 : return "INPT0" ; case INPT1 : return "INPT1" ; case INPT2 : return "INPT2" ; case INPT3 : return "INPT3" ; case INPT4 : return "INPT4" ; case INPT5 : return "INPT5" ; } return "$" + Integer . toHexString ( iAddr ) ; }
tr	IDF	private java . lang . String registerPrefix ( javax . xml . stream . XMLStreamWriter xmlWriter , java . lang . String namespace ) throws javax . xml . stream . XMLStreamException { java . lang . String prefix = xmlWriter . getPrefix ( namespace ) ; if ( prefix == null ) { prefix = generatePrefix ( namespace ) ; javax . xml . namespace . NamespaceContext nsContext = xmlWriter . getNamespaceContext ( ) ; while ( true ) { java . lang . String uri = nsContext . getNamespaceURI ( prefix ) ; if ( uri == null || uri . length ( ) == 0 ) { break ; } prefix = org . apache . axis2 . databinding . utils . BeanUtil . getUniquePrefix ( ) ; } xmlWriter . writeNamespace ( prefix , namespace ) ; xmlWriter . setPrefix ( prefix , namespace ) ; } return prefix ; }
tr	KEY	public int size ( ) { throw new UnsupportedOperationException ( "Not supported yet." ) ; }
tr	KEY	public long getId ( ) { return id ; }
tr	KEY	@ Override public void putCharWhileBlockComment ( char c ) throws ParsingException { }
tr	KEY	public abstract void undoEvent ( ) ;
tr	KEY	private GetOperatingSystem ( ) { }
tr	IDF	< A > ITransducer < A , C > comp ( ITransducer < A , ? super B > right ) ;
tr	KEY	public boolean interact ( String action , Interactable target ) { if ( super . interact ( action , target ) ) { return true ; } else if ( action . equals ( "go" ) ) { return this . goThrough ( ) ; } else if ( action . equals ( "open" ) ) { return this . open ( ) ; } return false ; }
tr	IDF	public void unload ( ) { ArrayList < Position > positions = _board . findPositions ( _position , 0 , 1 ) ; for ( Position position : positions ) { if ( _board . get_unit ( position ) != null ) positions . remove ( positions ) ; } _board . set_unit ( _loadedUnit , positions . get ( 0 ) ) ; _loadedUnit = null ; _active = false ; }
tr	IDF	public void fechamentoDaPartida ( String mensagemFinalizacao ) { imprimirLinha ( "" ) ; imprimirLinha ( mensagemFinalizacao + "\n" ) ; }
tr	KEY	public synchronized boolean isD2repetitionEnabled ( ) { return isD2repeatable ; }
tr	KEY	public JSONWriter object ( ) throws JSONException { if ( this . mode == i ) { this . mode = o ; } if ( this . mode == o || this . mode == a ) { this . append ( "{" ) ; this . push ( new JSONObject ( ) ) ; this . , = false ; return this ; } throw new JSONException ( "Misplaced object." ) ; }
tr	IDF	public DeclaracaoJunta ( Id id , Expressao aprenda1 , Expressao aprenda2 ) { this . id = id ; this . aprenda1 = aprenda1 ; this . aprenda2 = aprenda2 ; }
tr	IDF	@ Test public void testDeleteFail ( ) throws Exception { ac . register ( TEST_USER , TEST_PASSWORD ) ; assert . assertTrue ( ac . delete ( TEST_USER . concat ( "1337" ) ) == UserState . NO_SUCH_USER_FOUND ) ; }
tr	IDF	private Message sendMessage ( String operationName , String ... params ) throws DeadNodeException { return sendMessage ( operationName , 0 , params ) ; }
tr	IDF	public Player ( ) { Money = 50000 ; Color = new Color ( 0 , 0 , 0 ) ; Name = "" ; Position = 0 ; InPrison = false ; GetOutCard = 0 ; PrisonTurns = 0 ; }
tr	KEY	public WeightedDigraph ( int V ) { this . V = V ; this . E = 0 ; this . edges = new int [ 1000 ] ; this . vertices = new Vertex [ V ] ; }
tr	IDF	public static void assertThreeValuesOnly ( final CircleLinkElement < Integer > head , final CircleLinkElement < Integer > middle , final CircleLinkElement < Integer > tail ) { assertEquals ( tail , head . getPrevious ( ) ) ; assertMiddleValueInserted ( head , middle , tail ) ; assertEquals ( head , tail . getNext ( ) ) ; }
tr	KEY	public void setBorderSize ( int borderSize ) { this . borderSize = borderSize ; }
tr	IDF	public void update ( InvitePk pk , Invite dto ) throws InviteDaoException ;
tr	KEY	public double getB ( ) { return b ; }
tr	KEY	private void pop ( char c ) throws JSONException { if ( this . top <= 0 ) { throw new JSONException ( "Nesting error." ) ; } char m = this . stack [ this . top - 1 ] == null ? a : k ; if ( m != c ) { throw new JSONException ( "Nesting error." ) ; } this . top -= 1 ; this . mode = this . top == 0 ? d : this . stack [ this . top - 1 ] == null ? a : k ; }
tr	KEY	public FLinkedHashMap ( ) { map_tree = null ; list_tree = null ; dflt = null ; }
tr	KEY	public void initUserList ( ) { if ( userList == null ) { loadUserList ( ) ; } }
tr	KEY	public ScriptSpecificationBuilder tickingEvery ( int seconds ) { this . frequencyInSeconds = seconds ; return this ; }
tr	KEY	public void initDefaultCommand ( ) { }
tr	KEY	public void setY ( int y ) { this . y = y ; }
tr	IDF	public static void removeServerMessageListener ( ServerMessageListener listener ) { listeners . add ( listener ) ; }
tr	IDF	@ Override public void visitErrorNode ( @ NotNull ErrorNode node ) { }
tr	KEY	public void setHeaderWrite ( boolean headerWrite ) { this . headerWrite = headerWrite ; }
tr	IDF	@ Override public int hashCode ( ) { int result = message . hashCode ( ) ; result = 31 * result + stackTrace . hashCode ( ) ; return result ; }
tr	IDF	public Node insertRight ( final Node node ) { node . right = right ; node . left = this ; right . left = node ; right = node ; return node ; }
tr	IDF	public int createArgPosSequenceCode ( int [ ] arglbids , int [ ] posid , boolean [ ] isPruned , int p , int pid ) { long code = 0 ; for ( int i = 0 ; i < arglbids . length ; ++ i ) { if ( i == pid ) { code = ( code << auglbNumBits ) | ( DictionarySet . ARGINDEX ) ; code = ( code << tagNumBits ) | posid [ pid ] ; } if ( arglbids [ i ] == - 1 || arglbids [ i ] >= DictionarySet . ARGINDEX - 1 || isPruned [ p * arglbids . length + i ] ) continue ; code = ( code << auglbNumBits ) | ( arglbids [ i ] + 1 ) ; code = ( code << tagNumBits ) | posid [ i ] ; } int indexCode = argSeqAlphabet . lookupIndex ( code ) + 1 ; return indexCode ; }
tr	IDF	public void itemStateChanged ( ItemEvent event ) { JComboBox comboBox = ( JComboBox ) event . getSource ( ) ; Object item = event . getItem ( ) ; if ( event . getStateChange ( ) == ItemEvent . SELECTED && box_flag_company > 0 ) { Company selected_company = ( Company ) companyBox . getSelectedItem ( ) ; id_company = selected_company . getId ( ) ; System . out . println ( "Id firmy:" + id_company ) ; cmpa [ 0 ] = 1 ; } }
tr	IDF	Vector crossProduct ( Vector v ) ;
tr	IDF	@ Override public void updateRotation ( double h , double p , double r ) { pobj . rotate ( h , p , r ) ; updateAbstraction ( ) ; }
tr	KEY	public HighScore ( ) { }
tr	KEY	private static final String createMessage ( final String message , final String path ) { if ( path != null ) return message + " [" + path + "]" ; else return message ; }
tr	IDF	public static void register ( String name , Level level ) { levels . put ( name , level ) ; }
tr	IDF	public void itemStateChanged ( ItemEvent e ) { switch ( e . getStateChange ( ) ) { case ItemEvent . SELECTED : mapPanel . showObjects = true ; mapPanel . repaint ( ) ; break ; case ItemEvent . DESELECTED : mapPanel . showObjects = false ; mapPanel . repaint ( ) ; break ; default : break ; } }
tr	KEY	public void execute ( ) ;
tr	IDF	@ Test public final void testGetWithIndex_WhenNot ( ) { final OrderedMap < String , String > map = new OrderedMap < String , String > ( ) ; assertNull ( map . getWithIndex ( "key3" ) ) ; }
tr	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButton2ActionPerformed ( evt ) ; }
tr	IDF	public void mousePressed ( java . awt . event . MouseEvent evt ) { btnPlayRoundMousePressed ( evt ) ; }
tr	IDF	public static void shellSort ( int [ ] data , int length ) { int increment = length / 2 ; if ( increment < 1 ) { return ; } for ( int i = 0 ; i < increment ; ++ i ) { for ( int j = i + increment ; j < data . length ; j += increment ) { int temp = data [ j ] ; int x = j ; while ( ( x - increment ) >= 0 && temp < data [ x - increment ] ) { data [ x ] = data [ x - increment ] ; x -= increment ; } data [ x ] = temp ; } } System . out . println ( StringUtils . toString ( data ) ) ; shellSort ( data , increment ) ; }
tr	IDF	void exitBloco ( @ NotNull EnquantoParser . BlocoContext ctx ) ;
tr	IDF	public static Set < RemitoDetalle > getAll ( ) throws SQLException { Set < RemitoDetalle > res = new HashSet < > ( ) ; sql = "SELECT * FROM CLIENTES_DETALLE_REMITO " ; try ( ResultSet rs = ComunDP . getData ( sql ) ) { while ( rs . next ( ) ) { res . add ( DbToObj ( rs ) ) ; } } return res ; }
tr	KEY	public int getId ( ) { return id ; }
tr	IDF	public static ArrayList < CircuitProblem > loadCircuitProblems ( String filename ) { ArrayList < CircuitProblem > problemList ; problemList = new ArrayList < CircuitProblem > ( ) ; Scanner sc = null ; try { sc = new Scanner ( new File ( filename ) ) ; } catch ( FileNotFoundException e ) { e . printStackTrace ( ) ; } String s = null ; assert ( sc . hasNext ( ) ) ; s = sc . next ( ) ; int numProblems = Integer . parseInt ( s ) ; for ( int i = 0 ; i < numProblems ; i ++ ) { CircuitProblem cp = new CircuitProblem ( ) ; assert ( sc . hasNext ( ) ) ; s = sc . next ( ) ; int m = Integer . parseInt ( s ) ; assert ( sc . hasNext ( ) ) ; s = sc . next ( ) ; int n = Integer . parseInt ( s ) ; assert ( sc . hasNext ( ) ) ; s = sc . next ( ) ; int numComponents = Integer . parseInt ( s ) ; for ( int j = 0 ; j < numComponents ; j ++ ) { int w , h ; assert ( sc . hasNext ( ) ) ; s = sc . next ( ) ; w = Integer . parseInt ( s ) ; if ( w > m ) { System . out . println ( "piece is bigger than board! " + j ) ; System . exit ( 0 ) ; } assert ( sc . hasNext ( ) ) ; s = sc . next ( ) ; h = Integer . parseInt ( s ) ; if ( h > n ) { System . out . println ( "piece is bigger than board! " + j ) ; System . exit ( 0 ) ; } cp . add ( new Rect ( w , h ) ) ; } cp . height = n ; cp . width = m ; cp . size = numComponents ; problemList . add ( cp ) ; } return problemList ; }
tr	KEY	public void onDisconnect ( ) ;
tr	IDF	@ Override default GPerson P ( String name , String address ) { return new GPerson ( ) { public < Company , Dept , SubUnit , Employee , Person , Salary > Person accept ( SybAlg < Company , Dept , SubUnit , Employee , Person , Salary > alg ) { return alg . P ( name , address ) ; } } ; }
tr	KEY	public SnakeWithPartner ( ) { }
tr	IDF	public void setNumberOfPlays ( int plays ) { playerOne . setNumberOfPlays ( plays ) ; playerTwo . setNumberOfPlays ( plays ) ; }
tr	KEY	public int getHeight ( ) { return this . image . getHeight ( null ) ; }
tr	IDF	public void setDes_Descuento ( String Des_Descuento ) { this . Des_Descuento = Des_Descuento ; }
tr	IDF	@ Test public void testSanity ( ) { ArrayHashMap map = new ArrayHashMap ( 16 ) ; assertNull ( map . get ( "1" ) ) ; long first = new long ( 10 ) ; assertTrue ( map . put ( "1" , first ) ) ; assertEquals ( first , map . get ( "1" ) ) ; assertEquals ( first , map . remove ( "1" ) ) ; assertNull ( map . get ( "1" ) ) ; }
tr	IDF	public UpdaterWindow ( ) { setResizable ( false ) ; setTitle ( "DynQuiz Updater v1.6" ) ; setDefaultCloseOperation ( JFrame . DO_NOTHING_ON_CLOSE ) ; setBounds ( 100 , 100 , 450 , 200 ) ; contentPane = new JPanel ( ) ; contentPane . setBorder ( new EmptyBorder ( 5 , 5 , 5 , 5 ) ) ; setContentPane ( contentPane ) ; contentPane . setLayout ( null ) ; final JLabel lblStatus = new JLabel ( ) ; lblStatus . setFont ( new Font ( "Tahoma" , Font . PLAIN , 16 ) ) ; lblStatus . setIcon ( new ImageIcon ( UpdaterWindow . class . getResource ( "/de/codebucket/dynquiz/images/gif_load.gif" ) ) ) ; lblStatus . setHorizontalAlignment ( SwingConstants . CENTER ) ; lblStatus . setBounds ( 12 , 12 , 420 , 80 ) ; contentPane . add ( lblStatus ) ; final JLabel lblDetails = new JLabel ( ) ; lblDetails . setHorizontalAlignment ( SwingConstants . CENTER ) ; lblDetails . setFont ( new Font ( "Dialog" , Font . BOLD , 12 ) ) ; lblDetails . setBounds ( 12 , 104 , 420 , 17 ) ; contentPane . add ( lblDetails ) ; setVisible ( true ) ; final JProgressBar progressBar = new JProgressBar ( ) ; progressBar . setStringPainted ( true ) ; progressBar . setBounds ( 12 , 133 , 328 , 25 ) ; contentPane . add ( progressBar ) ; JButton btnCancel = new JButton ( "Cancel" ) ; btnCancel . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent arg0 ) { cancelled = true ; if ( download != null && download . getStatus ( ) == Download . DOWNLOADING ) { download . cancel ( ) ; return ; } if ( getDefaultCloseOperation ( ) == DO_NOTHING_ON_CLOSE ) { return ; } new Thread ( new Runnable ( ) { public void run ( ) { try { Thread . sleep ( 500 ) ; } catch ( InterruptedException e ) { } if ( getDefaultCloseOperation ( ) == DISPOSE_ON_CLOSE ) { dispose ( ) ; return ; } System . exit ( 1 ) ; } } ) . start ( ) ; } } ) ; btnCancel . setBounds ( 352 , 133 , 80 , 25 ) ; contentPane . add ( btnCancel ) ; FrameRunner . centerWindow ( this ) ; progressBar . setIndeterminate ( true ) ; lblStatus . setText ( "Checking for new Updates..." ) ; lblDetails . setText ( "Trying to fetch data from \"www.codebucket.de/downloads/dynquiz\"" ) ; new UpdateTask ( UUID . randomUUID ( ) , "http://www.codebucket.de/downloads/dynquiz/update.js" , UpdateTask . CURRENT_UPDATE ) { @ Override public void updateSucess ( Update update ) { if ( cancelled == true ) { return ; } if ( update == null ) { lblStatus . setIcon ( null ) ; lblStatus . setText ( "An error occurred while checking for new updates." ) ; lblDetails . setText ( "Nothing has been changed. You can close this window." ) ; setDefaultCloseOperation ( JFrame . DISPOSE_ON_CLOSE ) ; progressBar . setIndeterminate ( false ) ; JOptionPane . showMessageDialog ( null , "An error occurred while checking for new updates." , "DynQuiz Updater v1.6" , JOptionPane . ERROR_MESSAGE ) ; return ; } if ( update . getName ( ) . equals ( getCurrent ( ) . getName ( ) ) ) { if ( update . getVersion ( ) . equalsIgnoreCase ( getCurrent ( ) . getVersion ( ) ) ) { lblStatus . setIcon ( null ) ; lblStatus . setText ( "No Update found! You have already the newest version." ) ; lblDetails . setText ( "Nothing has been changed. You can close this window." ) ; setDefaultCloseOperation ( JFrame . DISPOSE_ON_CLOSE ) ; progressBar . setIndeterminate ( false ) ; JOptionPane . showMessageDialog ( null , "No Update found! You have already the newest version." , "DynQuiz Updater v1.6" , JOptionPane . INFORMATION_MESSAGE ) ; return ; } progressBar . setIndeterminate ( false ) ; lblStatus . setText ( "Waiting for user response..." ) ; lblDetails . setText ( "New Update found! Update version: " + update . getVersion ( ) ) ; int result = JOptionPane . showConfirmDialog ( null , "New Update found!\nUpdate version: " + update . getVersion ( ) + "\nYour version: " + getCurrent ( ) . getVersion ( ) + "\n\nDo you want to download the new Update?" , "DynQuiz Updater v1.6" , JOptionPane . YES_NO_CANCEL_OPTION , JOptionPane . QUESTION_MESSAGE ) ; if ( result == JOptionPane . YES_OPTION ) { try { download = new Download ( new URL ( update . getUpdate ( ) ) ) ; new Thread ( new Runnable ( ) { public void run ( ) { lblStatus . setText ( "Downloading update... Please wait." ) ; while ( download . getStatus ( ) == Download . DOWNLOADING ) { progressBar . setValue ( ( int ) download . getProgress ( ) ) ; int downloaded = ( download . getDownloaded ( ) / 1024 ) ; int size = ( download . getSize ( ) / 1024 ) ; lblDetails . setText ( "Downloading file: " + downloaded + "kB /" + size + "kB (" + ( int ) download . getProgress ( ) + "%)" ) ; } if ( download . getStatus ( ) != Download . COMPLETE ) { lblStatus . setIcon ( null ) ; lblStatus . setText ( "Update has been cancelled by user." ) ; lblDetails . setText ( "Nothing has been changed. You can close this window." ) ; setDefaultCloseOperation ( JFrame . DISPOSE_ON_CLOSE ) ; File file = new File ( download . getFileName ( ) ) ; if ( file . exists ( ) ) { file . delete ( ) ; } return ; } System . gc ( ) ; File jar = getJarFile ( ) ; if ( jar . exists ( ) ) { jar . deleteOnExit ( ) ; } lblStatus . setIcon ( null ) ; lblStatus . setText ( "Finished! Update sucessfully downloaded." ) ; lblDetails . setText ( "File sucessfully downloaded!" ) ; setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ) ; progressBar . setValue ( 100 ) ; int result = JOptionPane . showConfirmDialog ( null , "Update sucessfully downloaded!\nTo apply the changes  this program needs to be restarted.\nDo you like to restart this application?" , "DynQuiz Updater v1.6" , JOptionPane . YES_NO_OPTION , JOptionPane . QUESTION_MESSAGE ) ; if ( result == JOptionPane . YES_OPTION ) { try { restartApplication ( new File ( download . getFileName ( ) ) ) ; } catch ( Exception ex ) { System . exit ( 0 ) ; } } } } ) . start ( ) ; } catch ( Exception ex ) { } } else { lblStatus . setIcon ( null ) ; lblStatus . setText ( "Update has been cancelled by user." ) ; lblDetails . setText ( "Nothing has been changed. You can close this window." ) ; setDefaultCloseOperation ( JFrame . DISPOSE_ON_CLOSE ) ; } } } } . check ( ) ; }
tr	IDF	@ Override public int compareTo ( Node o ) { return this . value - o . value ; }
tr	IDF	private void campotexto1AncestorAdded ( javax . swing . event . AncestorEvent evt ) { }
tr	KEY	public abstract void isBeingDestroyed ( ) ;
tr	KEY	public MsgStatus ( ) { }
tr	KEY	private Randomizer ( ) { super ( ) ; }
tr	KEY	private SimpleParameterMapper ( ) { }
tr	IDF	public boolean update ( MasterBEAN update ) { try { session = sf . openSession ( ) ; session . beginTransaction ( ) ; session . update ( update ) ; session . getTransaction ( ) . commit ( ) ; session . close ( ) ; return true ; } catch ( Exception e ) { e . printStackTrace ( ) ; return false ; } }
tr	KEY	public double getValor ( ) { return valor ; }
tr	IDF	Test ( ) { setSize ( 300 , 400 ) ; b1 = new JButton ( "enter" ) ; b2 = new JButton ( "cancel" ) ; b3 = new JButton ( "blue" ) ; b4 = new JButton ( "red" ) ; t1 = new JTextArea ( 6 , 12 ) ; add ( b1 ) ; add ( b2 ) ; add ( b3 ) ; add ( b4 ) ; add ( t1 ) ; b1 . addActionListener ( this ) ; b2 . addActionListener ( this ) ; setLayout ( new FlowLayout ( ) ) ; setVisible ( true ) ; }
tr	IDF	public void setDisplayUrl ( String value ) { this . displayUrl = value ; }
tr	IDF	@ Override public int getCardCount ( int box ) { return getCards ( box ) . size ( ) ; }
tr	IDF	public void setDescuento ( Descuento descuento ) { this . ObDecuento = descuento ; }
tr	IDF	public static boolean canMove ( Direction dir , boolean selfAvoiding , RobotController rc ) { if ( selfAvoiding ) { MapLocation resultingLocation = rc . getLocation ( ) . add ( dir ) ; for ( int i = 0 ; i < snailTrail . size ( ) ; i ++ ) { MapLocation m = snailTrail . get ( i ) ; if ( ! m . equals ( rc . getLocation ( ) ) ) { if ( resultingLocation . isAdjacentTo ( m ) || resultingLocation . equals ( m ) ) { return false ; } } } } return rc . canMove ( dir ) ; }
tr	IDF	public static char [ ] [ ] rotate ( char [ ] [ ] block ) { int rowSize = block . length ; int colSize = block [ 0 ] . length ; char [ ] [ ] result = new char [ colSize ] [ rowSize ] ; for ( int i = 0 ; i < rowSize ; i ++ ) { for ( int j = 0 ; j < colSize ; j ++ ) { result [ j ] [ i ] = block [ i ] [ j ] ; } } for ( int i = 0 ; i < result . length ; i ++ ) { for ( int j = 0 , k = result [ i ] . length - 1 ; j < result [ i ] . length / 2 ; j ++ , k -- ) { char tmp = result [ i ] [ k ] ; result [ i ] [ k ] = result [ i ] [ j ] ; result [ i ] [ j ] = tmp ; } } return result ; }
tr	IDF	private void populateDto ( MsgStatus dto , ResultSet rs ) throws SQLException { dto . setMsgStatus ( rs . getString ( COLUMN_MSG_STATUS ) ) ; }
tr	KEY	protected abstract void sendXMLMessage ( String xml ) ;
tr	IDF	public static String normalize ( String fileName ) { String fileSeparator = File . separator ; if ( System . getProperty ( "os.name" ) . toLowerCase ( ) . contains ( "windows" ) ) { fileSeparator += File . separator ; } return fileName . replaceAll ( "[/\\\\]+" , fileSeparator ) ; }
tr	IDF	@ Override protected synchronized Board clone ( ) throws CloneNotSupportedException { int i , j ; Board board = ( Board ) super . clone ( ) ; board . grid = this . grid . clone ( ) ; for ( i = 0 ; i < board . grid . length ; i ++ ) for ( j = 0 ; j < board . grid [ i ] . length ; j ++ ) board . grid [ i ] [ j ] = board . grid [ i ] [ j ] . clone ( ) ; return board ; }
tr	KEY	public synchronized void xsetD2InitialDelay ( int a ) { d2ID = a ; }
tr	KEY	@ Override public int size ( ) { return 0 ; }
tr	IDF	private Element requestTaskToElement ( TIPPTask task , Document doc ) { Element requestEl = doc . createElement ( TASK_REQUEST ) ; return addTaskData ( task , doc , requestEl ) ; }
tr	KEY	public int getSqNum_Height ( ) { checkPD ( ) ; return this . sqNumHeight ; }
tr	IDF	public void setTile12 ( String tile12 ) { this . tile12 = tile12 ; }
tr	IDF	public boolean validateLogin ( String email , String password ) throws WebshopAppException { return userRepository . validateLogin ( email , password ) ; }
tr	IDF	public void setUsername ( String value ) { this . username = value ; }
tr	IDF	private void configIncludeAndNonInclude ( ) { try { StringBuilder includeSB = new StringBuilder ( ) ; int i = 0 ; for ( String include : FileUtils . getIncludeProperties ( ) ) { if ( i == 0 ) { includeSB . append ( include ) ; } else { includeSB . append ( SEPERATED_SYMBOL ) . append ( include ) ; } i ++ ; } includeTextField . setText ( includeSB . toString ( ) ) ; StringBuilder nonIncludeSB = new StringBuilder ( ) ; int j = 0 ; for ( String nonInclude : FileUtils . getNonIncludeProperties ( ) ) { if ( j == 0 ) { nonIncludeSB . append ( nonInclude ) ; } else { nonIncludeSB . append ( SEPERATED_SYMBOL ) . append ( nonInclude ) ; } j ++ ; } nonIncludeTextField . setText ( nonIncludeSB . toString ( ) ) ; } catch ( DocumentException e1 ) { UISupport . showMessage ( "Include and Non-include configuration error!" ) ; } }
tr	IDF	public void initPathUI ( ) { pathLabel = new JLabel ( "Path:" ) ; pathLabel . setBounds ( 10 , 10 , 50 , 30 ) ; pathField = new JTextField ( ) ; pathField . setBounds ( 70 , 10 , 600 , 30 ) ; this . add ( pathLabel ) ; this . add ( pathField ) ; }
tr	IDF	public String getPropertyValue ( String key ) { Enumeration en = properties . propertyNames ( ) ; while ( en . hasMoreElements ( ) ) { if ( key . equals ( ( String ) en . nextElement ( ) ) ) { String value = properties . getProperty ( key ) ; return value ; } } return "null" ; }
tr	KEY	public double getSpecularPower ( ) { return specularPower ; }
tr	IDF	public void setDicName ( String dicName ) { this . dicName = dicName ; }
tr	IDF	public void classLoaderMethod ( ClassLoader classLoader ) { URL systemUrl = ClassLoader . getSystemResource ( "" ) ; InputStream systemIs = ClassLoader . getSystemResourceAsStream ( "" ) ; URL resourceUrl = classLoader . getResource ( "" ) ; InputStream resourceIs = classLoader . getResourceAsStream ( "" ) ; }
tr	IDF	protected void sendXMLMessageToAllClients ( Element xml ) { for ( int i = 0 ; i < clients . size ( ) ; i ++ ) { INDIDeviceListener c = clients . get ( i ) ; if ( c instanceof INDIClient ) { c . sendXMLMessage ( xml ) ; } } }
tr	IDF	public void dbWriteItem ( Connection aconn ) { String qstr = "" ; String dbg = "" ; try { if ( createdate == null ) createdate = new Date ( ) ; dbDeleteItem ( aconn ) ; qstr = "Insert into TestCaseTbl (TestGroupId TestId TestTitle TestDesc TestNotes BugReqID CaseSource " + "LastName FirstName AgeYrs AgeMos AgeWks AgeDays BirthDate AgeEntryMethod GenderCd CreateBy CreationDate ModDate BaseDate TestResult ResultNotes) Values (? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ?)" ; PreparedStatement stmt = aconn . prepareStatement ( qstr ) ; setModDate ( ) ; dbg = " (" + testgroupid + " " + testid + " " + testtitle + " " + testdesc + " " + testnote + " " + testreqid + " " + casesource + " " + lastname + " " + firstname + " " + ageyears + " " + agemonths + " " + ageweeks + " " + agedays + " " + birthdate + " " + agemethod + " " + gendercd + " " + createby + " " + createdate + " " + moddate + " " + basedate + " " + testresult + " " + resultnotes + " " + ")" ; stmt . setString ( 1 , testgroupid ) ; stmt . setString ( 2 , testid ) ; stmt . setString ( 3 , testtitle ) ; stmt . setString ( 4 , testdesc ) ; stmt . setString ( 5 , testnote ) ; stmt . setString ( 6 , testreqid ) ; stmt . setString ( 7 , casesource ) ; stmt . setString ( 8 , lastname ) ; stmt . setString ( 9 , firstname ) ; stmt . setInt ( 10 , ageyears ) ; stmt . setInt ( 11 , agemonths ) ; stmt . setInt ( 12 , ageweeks ) ; stmt . setInt ( 13 , agedays ) ; stmt . setDate ( 14 , new java . sql . Date ( birthdate . getTime ( ) ) ) ; stmt . setString ( 15 , agemethod ) ; stmt . setString ( 16 , gendercd ) ; stmt . setString ( 17 , createby ) ; stmt . setDate ( 18 , new java . sql . Date ( createdate . getTime ( ) ) ) ; stmt . setDate ( 19 , new java . sql . Date ( moddate . getTime ( ) ) ) ; stmt . setDate ( 20 , new java . sql . Date ( basedate . getTime ( ) ) ) ; stmt . setString ( 21 , testresult ) ; stmt . setString ( 22 , resultnotes ) ; stmt . executeUpdate ( ) ; stmt . close ( ) ; } catch ( Exception ex ) { System . out . println ( dbg ) ; CLogError . logError ( CAppConsts . ErrorFile , false , qstr + dbg + "[] CTestItem.dbWriteItem cannot write item. " , ex ) ; } }
tr	IDF	public LevelScene ( GraphicsConfiguration graphicsConfiguration , MarioComponent renderer , long seed , int levelDifficulty , int type ) { this . graphicsConfiguration = graphicsConfiguration ; this . levelSeed = seed ; this . marioComponent = renderer ; this . levelDifficulty = levelDifficulty ; this . levelType = type ; widthArrow = 25 ; tipWidthArrow = 10 ; heightArrow = 20 ; xArrow = 160 ; yArrow = 40 ; xPositionsArrow = new int [ ] { xArrow + - widthArrow / 2 , xArrow + widthArrow / 2 - tipWidthArrow , xArrow + widthArrow / 2 - tipWidthArrow , xArrow + widthArrow / 2 , xArrow + widthArrow / 2 - tipWidthArrow , xArrow + widthArrow / 2 - tipWidthArrow , xArrow + - widthArrow / 2 } ; yPositionsArrow = new int [ ] { yArrow + - heightArrow / 4 , yArrow + - heightArrow / 4 , yArrow + - heightArrow / 2 , yArrow + 0 , yArrow + heightArrow / 2 , yArrow + heightArrow / 4 , yArrow + heightArrow / 4 } ; }
tr	KEY	public double getCostomedicamentos ( ) { return costomedicamentos ; }
tr	KEY	public void setOnDeleteTopic ( ) ;
tr	KEY	public static void setBirthRate ( int rate ) { BIRTH_RATE = rate ; }
tr	KEY	public abstract boolean save ( ) ;
tr	KEY	@ Override public double getWeight ( ) { return 5 ; }
tr	IDF	public static int addValue ( int r , int c , DraughtsState ds ) { int piece = ds . getPiece ( r , c ) ; if ( piece == DraughtsState . WHITEFIELD || piece == DraughtsState . EMPTY ) { return 0 ; } if ( piece == DraughtsState . WHITEKING ) { return 50 + KING ; } if ( piece == DraughtsState . WHITEPIECE ) { return calcPlayground ( r , c , true ) + DRAUGHT ; } if ( piece == DraughtsState . BLACKKING ) { return - 50 - KING ; } if ( piece == DraughtsState . BLACKPIECE ) { return - calcPlayground ( r , c , false ) - DRAUGHT ; } return 0 ; }
tr	KEY	public void go ( ) { }
tr	IDF	public void actionPerformed ( ActionEvent e ) { tutFrame . gotoNext ( frame ) ; System . out . println ( tutFrame . tutcount ) ; if ( currentPiece != null ) { submitButton . setEnabled ( false ) ; int X = currentPiece . xVal ; int Y = currentPiece . yVal ; currentPiece . finalize ( ) ; board . placePiece ( X , Y , piece ) ; piece . setPlaced ( ) ; player . updateScore ( piece . getValue ( ) ) ; frame . users [ frame . playerNum ] . score . setText ( String . valueOf ( player . getScore ( ) ) ) ; board . printBoard ( ) ; currentPiece = null ; Player tempPlayer ; tempPlayer = frame . players [ frame . turn ] ; frame . users [ frame . turn ] . score . setText ( String . valueOf ( player . getScore ( ) ) ) ; frame . users [ frame . turn ] . setBorder ( new LineBorder ( Color . DARK_GRAY , 3 ) ) ; do { frame . turn = ( frame . turn + 1 ) % frame . players . length ; tempPlayer = frame . players [ frame . turn ] ; if ( tempPlayer . isPlayable ( ) ) { if ( ! board . playerCanPlay ( tempPlayer ) ) tempPlayer . setPlayable ( false ) ; } } while ( ! tempPlayer . isPlayable ( ) ) ; frame . users [ frame . turn ] . setBorder ( new LineBorder ( Color . WHITE , 3 ) ) ; frame . mainPanel . remove ( frame . pieces ) ; frame . pieces = frame . piecePanelArray [ frame . turn ] ; frame . mainPanel . add ( frame . pieces ) ; frame . outter . add ( tutFrame . text , BorderLayout . NORTH ) ; frame . outter . add ( frame . mainPanel , BorderLayout . CENTER ) ; frame . setContentPane ( frame . outter ) ; } }
tr	KEY	public boolean lock ( ) { System . out . println ( "You need to use a key to lock this cell door." ) ; return true ; }
tr	KEY	public UTypeDaoImpl ( ) { }
tr	IDF	private Connection createNewConnection ( ) { Connection myconn = null ; try { try { class < ? > myclass = class . forName ( dbClassNm ) ; if ( myclass == null ) { CDbError . logError ( errfile , false , "Class loader did not return a class for " + dbClassNm , null ) ; return ( null ) ; } } catch ( ClassNotFoundException cex ) { CDbError . logError ( errfile , false , "Class loader did not return a class for " + dbClassNm , null ) ; return ( null ) ; } Properties dbInfo = makeProps ( ) ; if ( dbUserName != null ) dbInfo . setProperty ( "user" , dbUserName ) ; if ( dbPassword != null ) dbInfo . setProperty ( "password" , dbPassword ) ; myconn = DriverManager . getConnection ( dbUrl , dbInfo ) ; if ( myconn == null ) { CDbError . logError ( errfile , false , "DriverManager did not return a connection: " + dbUrl , null ) ; return ( null ) ; } if ( ! testConnection ( myconn ) ) { if ( ! myconn . isClosed ( ) ) myconn . close ( ) ; CDbError . logError ( errfile , false , "New connection failed test" , null ) ; return ( null ) ; } } catch ( Exception e ) { CDbError . logError ( errfile , false , "Error making connection: " , e ) ; return ( null ) ; } return ( myconn ) ; }
tr	IDF	private void jMenuCreateCardActionPerformed ( java . awt . event . ActionEvent evt ) { getPresenter ( ) . createCard ( ) ; }
tr	KEY	public void setOffset ( long value ) { this . offset = value ; }
tr	IDF	public void declare ( ) { Set < String > hashSet = new HashSet < String > ( ) ; Set < String > treeSet = new TreeSet < String > ( ) ; System . out . println ( "" + hashSet + treeSet ) ; }
tr	KEY	public double getAmount ( ) { return amount ; }
tr	IDF	public static void main ( String [ ] args ) { HelloActionWorld hello = new HelloActionWorld ( ) ; hello . setVisible ( true ) ; }
tr	KEY	public static ShortUrlGenerator instance ( ) { if ( null == m_instance ) { m_instance = new ShortUrlGenerator ( ) ; } return m_instance ; }
tr	IDF	public void addPlayerEvent ( int actionCost ) { timeQueue . addEventToQueue ( player , actionCost / player . getSpeed ( ) ) ; player . increaseHunger ( actionCost / 2 ) ; this . updatePlayerStatus ( ) ; messenger . updateTile ( player . getLocation ( ) . getColumn ( ) , player . getLocation ( ) . getRow ( ) ) ; }
tr	IDF	private MidiChannel channel ( int c ) { return ( synth . getChannels ( ) ) [ c ] ; }
tr	KEY	public CardChallengeViewImpl ( ) { super ( "CardChallengeView" ) ; this . initComponents ( ) ; }
tr	IDF	public void paint ( Graphics g ) { this . createWindow ( g ) ; this . drawImageAtCenter ( Img . SIGN , g ) ; }
tr	IDF	public Configuration ( int merchantId , String paymentsApiPasscode ) { this . merchantId = merchantId ; this . paymentsApiPasscode = paymentsApiPasscode ; }
tr	KEY	public Medicamentos ( ) { }
tr	IDF	public void displayPlayer ( ) { Iterator < PlayerID > iter = activePlayers . iterator ( ) ; PlayerID p ; System . out . println ( "--- PlayerIDs ---" ) ; while ( iter . hasNext ( ) ) { p = iter . next ( ) ; System . out . println ( "PlayerID: " + p . getPID ( ) + "  ConnectionID: " + p . getCID ( ) ) ; } }
tr	KEY	public synchronized int xgetLTinitialDeyal ( ) { return ltID ; }
tr	KEY	protected void interrupted ( ) { }
tr	KEY	public long getDataFreshness ( ) { return dataFreshness ; }
tr	KEY	public Node ( int value ) { this . next = null ; this . value = value ; }
tr	KEY	public boolean isNew ( ) { return participants . isEmpty ( ) ; }
tr	IDF	private void miHoleModeMousePressed ( java . awt . event . MouseEvent evt ) { JOptionPane . showMessageDialog ( null , "This feature has not yet been implemented." ) ; }
tr	IDF	@ Override public E set ( int index , E element ) { E e = l . set ( index , element ) ; setChanged ( ) ; notifyObservers ( Event . UPDATE ) ; return e ; }
tr	KEY	public boolean endPlayerTurn ( ) { if ( hasPlacedLandTile ) { hasPlacedLandTile = false ; hasUsedActionToken = false ; palacesInteractedWith . clear ( ) ; actionPoints = testingActionPoints ; return true ; } return false ; }
tr	IDF	public int [ ] next ( ) { if ( index >= data . length ) { return null ; } final int [ ] rotation = new int [ data . length ] ; int idx = 0 ; for ( int i = index ; i < data . length ; i ++ ) { rotation [ idx ++ ] = data [ i ] ; } for ( int i = 0 ; i < index ; i ++ ) { rotation [ idx ++ ] = data [ i ] ; } index ++ ; return rotation ; }
tr	KEY	public int getHeight ( ) { return height ; }
tr	KEY	public int getInstruction ( ) { return mInstruction ; }
tr	IDF	@ Override public void mouseClicked ( MouseEvent e ) { }
tr	KEY	public void setWheelDiameter ( double wheelDiameter ) { this . wheelDiameter = wheelDiameter ; }
tr	KEY	protected ContentValidator getResponseValidator ( ) { return null ; }
tr	KEY	public int getWidth ( ) { return width ; }
tr	IDF	@ Override public Map < String , ColumnDefinition > getColumnDefinitions ( ) { return Collections . unmodifiableMap ( columnDefinitions ) ; }
tr	KEY	public abstract void visit ( Print print ) ;
tr	KEY	public double optDouble ( int index ) { return optDouble ( index , double . NaN ) ; }
tr	IDF	public synchronized void addFrame ( Image image , long duration ) { totalDuration += duration ; frames . add ( new AnimFrame ( image , totalDuration ) ) ; }
tr	KEY	public void remove ( ) { }
tr	IDF	public ArrayList < Personnage > getPersonnages ( ) { return new ArrayList < Personnage > ( this . personnages ) ; }
tr	KEY	public Conn4DBinaryReader ( ) { }
tr	KEY	public int getPosition ( ) { return position ; }
tr	KEY	public abstract int getInitialAbsPos ( ) ;
tr	IDF	private boolean verifySession ( String username , String ssid , UserState status , long id ) { boolean res = sessionCaptor . getValue ( ) . getStatus ( ) == status && sessionCaptor . getValue ( ) . getName ( ) . equals ( username ) && sessionCaptor . getValue ( ) . getSsid ( ) . equals ( ssid ) ; if ( id != null ) res &= sessionCaptor . getValue ( ) . getId ( ) . equals ( id ) ; return res ; }
tr	IDF	private static Node createTree4 ( ) { Node root = new Node ( 4 ) ; root . left = new Node ( 1 ) ; root . right = new Node ( 2 ) ; return root ; }
tr	KEY	public void playerFire ( ) { }
tr	IDF	@ Override public void runTest ( ) { List < String > res = letterCombinations ( "302" ) ; for ( String s : res ) dbg ( s + "\n" ) ; }
tr	IDF	public UIManager ( Game gm , Dimension screenSize ) { super ( gm , screenSize ) ; widgets = new ArrayList < > ( ) ; evBus = gm . getEventBus ( ) ; }
tr	IDF	public javax . xml . stream . XMLStreamReader getPullParser ( javax . xml . namespace . QName qName ) throws org . apache . axis2 . databinding . ADBException { java . util . ArrayList elementList = new java . util . ArrayList ( ) ; java . util . ArrayList attribList = new java . util . ArrayList ( ) ; if ( local_returnTracker ) { elementList . add ( new javax . xml . namespace . QName ( "http://tinyurl.com.src" , "return" ) ) ; elementList . add ( local_return == null ? null : org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( local_return ) ) ; } return new org . apache . axis2 . databinding . utils . reader . ADBXMLStreamReaderImpl ( qName , elementList . toArray ( ) , attribList . toArray ( ) ) ; }
tr	KEY	public void incrementNumberOfPlays ( ) ;
tr	IDF	public void mouseClicked ( MouseEvent e ) { persoSelected = listPerso . getSelectedValue ( ) ; }
tr	KEY	public int getBox ( ) ;
tr	KEY	public int getId1 ( ) { return id1 ; }
tr	IDF	@ Override public < S , T > T visit ( Visitor < S , T > v , S arg ) throws FractalException { return v . visitASTStmtSequence ( this , arg ) ; }
tr	IDF	static Object insert ( Object subtree , int index , Object elt ) { if ( subtree == null ) { Object [ ] ary = new Object [ 1 ] ; ary [ 0 ] = elt ; return ary ; } else if ( ! ( subtree instanceof Node ) ) { Object [ ] ary = ( Object [ ] ) subtree ; int len = ary . length ; if ( len < MAX_LEAF_ARRAY_LENGTH ) return insert ( ary , index , elt ) ; else if ( index * 2 < len ) return makeNode ( subseqInsert ( ary , 0 , index , index , elt ) , subseq ( ary , index , len ) ) ; else return makeNode ( subseq ( ary , 0 , index ) , subseqInsert ( ary , index , len , 0 , elt ) ) ; } else { Node node = ( Node ) subtree ; int sizl = treeSize ( node . left ) ; if ( index < sizl ) return buildNode ( insert ( node . left , index , elt ) , node . right ) ; else return buildNode ( node . left , insert ( node . right , index - sizl , elt ) ) ; } }
tr	IDF	protected void load ( ) throws IOException { BufferedReader reader = null ; synchronized ( words ) { try { reader = new BufferedReader ( new InputStreamReader ( getDictionaryStream ( ) ) ) ; String line ; while ( ( line = reader . readLine ( ) ) != null ) { words . add ( line ) ; } System . err . printf ( "%s words loaded\n" , words . size ( ) ) ; } finally { if ( reader != null ) { try { reader . close ( ) ; } catch ( IOException e ) { } } } } }
tr	KEY	public void setPlayerID ( int playerID ) { this . playerID = playerID ; }
tr	IDF	@ Override public List < Appointment > getAppointmentsForRoomInWeek ( long roomId , int week , int year ) { Date start , end ; Calendar cal = Calendar . getInstance ( ) ; cal . clear ( ) ; cal . set ( Calendar . WEEK_OF_YEAR , week ) ; cal . set ( Calendar . YEAR , year ) ; start = cal . getTime ( ) ; cal . clear ( ) ; cal . set ( year , 11 , 31 ) ; if ( week == cal . get ( Calendar . WEEK_OF_YEAR ) ) { week = 0 ; year ++ ; } cal . clear ( ) ; cal . set ( Calendar . WEEK_OF_YEAR , week + 1 ) ; cal . set ( Calendar . YEAR , year ) ; end = cal . getTime ( ) ; return getAppointmentsForRoomInTimeperiod ( roomId , start , end ) ; }
tr	IDF	public List < Option > getOptions ( ) { return options ; }
tr	KEY	public void startGameIn ( int countdown ) ;
tr	IDF	private void showdownPlayerControls ( ArrayList < PokerHandEvaluation > playerEvaluation , boolean show ) { for ( int i = 0 ; i < playerEvaluation . size ( ) ; i ++ ) { String rankDescription = playerEvaluation . get ( i ) . getRankDescription ( ) ; if ( i == 0 ) { lblFirstPlayerHandResult . setVisible ( show ) ; lblFirstPlayerHandResultInfo . setVisible ( show ) ; lblFirstPlayerHandResultInfo . setText ( rankDescription ) ; } if ( i == 1 ) { lblSecondPlayerHandResult . setVisible ( show ) ; lblSecondPlayerHandResultInfo . setVisible ( show ) ; lblSecondPlayerHandResultInfo . setText ( rankDescription ) ; } if ( i == 2 ) { lblThirdPlayerHandResult . setVisible ( show ) ; lblThirdPlayerHandResultInfo . setVisible ( show ) ; lblThirdPlayerHandResultInfo . setText ( rankDescription ) ; } if ( i == 3 ) { lblFourthPlayerHandResult . setVisible ( show ) ; lblFourthPlayerHandResultInfo . setVisible ( show ) ; lblFourthPlayerHandResultInfo . setText ( rankDescription ) ; } } lblWinner . setVisible ( show ) ; lblWinnerInfo . setVisible ( show ) ; pnlWinner . setVisible ( show ) ; lblPot . setVisible ( show ) ; lblPotInfo . setVisible ( show ) ; }
tr	KEY	public void update ( final String event ) ;
tr	KEY	public void setIdsurvey ( int idsurvey ) { this . idsurvey = idsurvey ; }
tr	IDF	private void buttonColoredAction1ActionPerformed ( java . awt . event . ActionEvent evt ) { DefaultTableModel model = new DefaultTableModel ( ) ; this . jTable1 . setModel ( model ) ; model . setColumnIdentifiers ( new Object [ ] { "Id" , "Descripcion" , "Tarea" , "Estado" } ) ; Issue issue = new Issue ( ) ; issue . setIdTarea ( Integer . parseInt ( txtIdTarea . getText ( ) ) ) ; try { ResultSet res = QATracker . issueBus . consultaTarea ( issue ) ; while ( res . next ( ) ) { model . addRow ( new Object [ ] { res . getString ( 1 ) , res . getString ( 2 ) , res . getString ( 3 ) , res . getString ( 4 ) } ) ; } } catch ( SQLException ex ) { System . out . println ( ex . getMessage ( ) ) ; } }
tr	IDF	public Connection getConnection ( ) throws SQLException { return ps . getConnection ( ) ; }
tr	IDF	public Point ( int x , int y , int value ) { this . x = x ; this . y = y ; this . value = value ; }
tr	KEY	public synchronized void xsetS1InitialDelay ( int a ) { s1ID = a ; }
tr	KEY	@ Override public void clear ( ) { throw new UnsupportedOperationException ( ) ; }
tr	KEY	public GetContactsResponse createGetContactsResponse ( ) { return new GetContactsResponse ( ) ; }
tr	IDF	public void setTile10 ( String tile10 ) { this . tile10 = tile10 ; }
tr	IDF	@ Override public Bitmap createBitmap ( String input ) { try { return new BitmapSwing ( input ) ; } catch ( IOException ex ) { System . out . println ( "BitmapSwing Error." ) ; } return null ; }
tr	KEY	public ObjectFactory ( ) { }
tr	IDF	private Animation createPlayerAnim ( Image player1 , Image player2 , Image player3 , Image player4 ) { Animation anim = new Animation ( ) ; anim . addFrame ( player1 , 250 ) ; anim . addFrame ( player2 , 150 ) ; anim . addFrame ( player1 , 150 ) ; anim . addFrame ( player2 , 150 ) ; anim . addFrame ( player3 , 200 ) ; anim . addFrame ( player2 , 150 ) ; anim . addFrame ( player4 , 150 ) ; return anim ; }
tr	IDF	public PlaceDeveloperOnBoardAction ( int actionID , int x , int y ) { super ( actionID , x , y ) ; }
tr	KEY	public boolean areValuesEqual ( ) { return ( firstVal == secondVal ) ; }
tr	KEY	public void setWidth ( int width ) { this . width = width ; }
tr	IDF	@ Override public float getX ( ) { Point p = getBoardPosition ( ) ; int width = ( Board . getInstance ( ) . getIntWidth ( ) - 11 * FIELD_SIZE ) / 2 ; return Board . getInstance ( ) . getIntX ( ) + p . x * FIELD_SIZE + width ; }
tr	KEY	public void newMatchWon ( ) { matchesWon ++ ; }
tr	IDF	public void displayHighScores ( ) { this . displayBorder ( ) ; System . out . println ( "\t\tThis will eventually show all high score lists  \n" + "or a menu to choose which list to show" ) ; this . displayBorder ( ) ; }
tr	KEY	protected INDISwitchProperty getConnectionProperty ( ) { if ( this instanceof INDIConnectionHandler ) { return connectionP ; } return null ; }
tr	KEY	public double getY ( ) { return y ; }
tr	KEY	public boolean isEmbalado ( ) { return embalado ; }
tr	KEY	public double gradient ( ) { return neuronActivation . gradient ( this . neuronInput , this . neuronOutput ) ; }
tr	IDF	private void setHeight ( AVLNode current ) { int left_height = ( current . left == null ) ? - 1 : ( ( AVLNode ) current . left ) . height ; int right_height = ( current . right == null ) ? - 1 : ( ( AVLNode ) current . right ) . height ; current . height = 1 + Math . max ( left_height , right_height ) ; }
tr	KEY	public AlumnoBean ( ) { }
tr	KEY	public double getLon ( ) ;
tr	KEY	public GetSenderNamesResponse createGetSenderNamesResponse ( ) { return new GetSenderNamesResponse ( ) ; }
tr	IDF	public CDbConfig ( String aconf , String aerr , boolean aecho ) { dbClassNm = "myclass.has.noname" ; dbDriver = "jdbc:nothing:" ; dbHost = "0.0.0.0" ; dbPortSep = ":" ; dbPort = "0" ; dbUrlSep = "/" ; dbDatabase = "missing" ; dbUrl = dbDriver + dbHost + dbPortSep + dbPort + dbUrlSep + dbDatabase ; dbTableNm = "missing" ; dbProps = "" ; dbUserPath = "" ; dbUserName = "" ; dbPassword = "" ; readConfig ( aconf , aerr , aecho ) ; }
tr	KEY	protected void setupInitialState ( ) { }
tr	IDF	public void setBillingCountry ( String billingCountry ) { this . billingCountry = billingCountry ; }
tr	IDF	void saveToStream ( OutputStream outputStream , KeyPair keyPair ) throws TIPPException , IOException ;
tr	IDF	private void send ( final int code , final String path , final InputStream input ) throws IOException { out . write ( code ) ; send ( path ) ; send ( input ) ; }
tr	IDF	public java_cup . runtime . Symbol scan ( ) throws java . lang . Exception { try { return this . lexer . next_token ( ) ; } catch ( java . io . IOException ioe ) { System . out . println ( "Unrecognised token" ) ; System . out . println ( ioe . getMessage ( ) ) ; throw ioe ; } }
tr	KEY	public void setHasChanged ( boolean hasChanged ) { this . hasChanged = hasChanged ; }
tr	IDF	@ Override public Pizza createPizza ( String type ) { Pizza pizza = null ; if ( type . equals ( "cheese" ) ) { pizza = new ChicagoStyleCheesePizza ( ) ; } else if ( type . equals ( "pepperoni" ) ) { pizza = new ChicagoStylePepperoniPizza ( ) ; } else if ( type . equals ( "clam" ) ) { pizza = new ChicagoStyleClamPizza ( ) ; } else if ( type . equals ( "veggie" ) ) { pizza = new ChicagoStyleVeggiePizza ( ) ; } return pizza ; }
tr	KEY	protected abstract boolean doTest ( double v , double test ) ;
tr	KEY	public void updateViewFromModel ( ) ;
tr	KEY	public static String getDatabaseLogin ( ) { return "root" ; }
tr	KEY	public void setLevelGate ( int levelGate ) { this . levelGate = levelGate ; }
tr	KEY	public NotebookDao ( ) { super ( ) ; }
tr	IDF	public void save ( ) { JSONObject json = toJson ( ) ; try { File file = new File ( "rounds/" + System . currentTimeMillis ( ) + ".json" ) ; FileWriter fw = new FileWriter ( file . getAbsolutePath ( ) ) ; fw . write ( json . toString ( ) ) ; fw . close ( ) ; } catch ( IOException ex ) { Logger . getLogger ( Profile . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; } }
tr	IDF	void writeAll ( Iterable < T > objects ) ;
tr	KEY	public boolean isNullable ( ) ;
tr	IDF	CircleLinkElement < Value > insertAsNext ( final CircleLinkElement < Value > target , final Value v ) { if ( isEmpty ( ) ) { throw new InvalidUsageException ( "Please use insertIfEmpty() for empty list." ) ; } else { throwNoSuchElementExceptionIfNotContained ( target ) ; } CircleLinkElement < Value > element = target . insertAsNext ( v ) ; elements . add ( element ) ; return element ; }
tr	IDF	public Rectangular ( int length , int width ) { this . length = length ; this . width = width ; }
tr	KEY	public CPUDao ( ) { }
tr	KEY	public abstract void handleCollsion ( Entity entity ) ;
tr	KEY	public DrawPalaceCardAction ( int actionID ) { super ( actionID ) ; }
tr	IDF	@ EFReference public EFAttributeTestClass getChild ( ) { return m_Child ; }
tr	IDF	public JavaCell ( int x , int y , int cellId ) { this . xVal = x ; this . yVal = y ; elevation = 0 ; cellType = "blank" ; this . cellId = cellId ; this . numOriginalSpaces = 0 ; }
tr	IDF	private IMessageManager createMessageManager ( ) { int majorVersion = Integer . parseInt ( configurationProperties . getProperty ( "version.major" ) ) ; int minorVersion = Integer . parseInt ( configurationProperties . getProperty ( "version.minor" ) ) ; IncomingMessageParser < ServerProtocolParameters > incomingMessageParser = new IncomingMessageParser < ServerProtocolParameters > ( createMessageSubParsers ( ) ) ; return new MessageManager ( managers . packetManager , managers . connectionManager , incomingMessageParser , majorVersion , minorVersion ) ; }
tr	IDF	public String RutaCancion ( int indice_lista , String [ ] lista_p ) { if ( indice_lista >= 0 ) { Nombre_can = lista_p [ indice_lista ] ; leer_archivo Consulta_cancion = new leer_archivo ( 9 ) ; File miDir = new File ( "." ) ; try { Ruta = miDir . getCanonicalPath ( ) + "/" + Nombre_can + ".txt" ; } catch ( IOException e ) { } lista_metadatos = Consulta_cancion . leer_archivo1 ( Ruta ) ; return lista_metadatos [ 0 ] ; } else { JOptionPane . showMessageDialog ( frame , "Por favor seleccione una cancion" ) ; } return " " ; }
tr	KEY	static boolean within ( final double x , final double y , final double err ) { final double d = y - x ; return ( d <= err && d >= - err ) ; }
tr	KEY	public int getPageSize ( ) { return pageSize ; }
tr	IDF	public boolean mouseMove ( Event e , int x , int y ) { xy2I ( x , y ) ; return true ; }
tr	IDF	T find ( int index ) ;
tr	KEY	@ Override public int getUnitsPerBatch ( ) { return unitsPerBatch ; }
tr	KEY	public Pepperoni createPepperoni ( ) { return new SlicedPepperoni ( ) ; }
tr	IDF	public Gircosconfig . Listens getListens ( ) { return listens ; }
tr	IDF	public void setCpArray ( CashPointArray cpArray ) { this . cpArray = cpArray ; }
tr	IDF	private void updateHMM0 ( int data ) { setRegister ( HMM0 , data ) ; }
tr	IDF	public static List < Pattern > loadFromDisk ( String filename ) throws IOException { return load ( new FileReader ( filename ) ) ; }
tr	IDF	public void createBoardLocations ( int noRows , int noColumns ) { this . rowCount = noRows ; this . columnCount = noColumns ; this . boardLocations = new Player [ noRows ] [ noColumns ] ; for ( int row = 0 ; row < noRows ; row ++ ) { for ( int column = 0 ; column < noColumns ; column ++ ) { this . boardLocations [ row ] [ column ] = new Player ( ) ; } } }
tr	KEY	public int getHide ( ) { return hide ; }
tr	KEY	public boolean getNursingFacilityMoveRisk ( ) { return nursingFacilityMoveRisk ; }
tr	KEY	public int getId ( ) { return id ; }
tr	KEY	public void setMaxRestarts ( int maxRestarts ) { this . maxRestarts = maxRestarts ; }
tr	IDF	public boolean canPlant ( ) { return ! isDead ( ) && ( bombs . size ( ) < nbBombMax ) && game . canPlant ( getBoardPosition ( ) ) ; }
tr	KEY	public void setTilePairs ( int tilePairs ) { this . tilePairs = tilePairs ; }
tr	KEY	public int get_maxRange ( ) { return _maxRange ; }
tr	KEY	public int getSize ( ) { return size ; }
tr	KEY	public SoundEffectsThread ( ) { this . alive = true ; this . buffer = new byte [ 1024 ] ; start ( ) ; }
tr	IDF	public VSpray ( int n , Random r , VPoint s ) { this . r = r ; a = r . nextInt ( 360 ) ; i = ( byte ) n ; this . s = s ; if ( i == 2 ) { l = 25 ; } if ( i == 3 ) { l = 7 ; } if ( i == 4 ) { l = 5 ; } }
tr	IDF	@ Override public String toString ( ) { return "Moves{" + "name=" + name + "  UserIn=" + UserIn + } ; }
tr	KEY	public float getX ( float alpha ) { return x ; }
tr	KEY	protected void postProcessTask ( ) { }
tr	IDF	private void defineEstruturaTabela ( ) { try { estruturaTabela = dao . getEstrutura ( tabela ) ; } catch ( SQLException e ) { JOptionPane . showMessageDialog ( null , e . getMessage ( ) , "Modulo Listagem" , JOptionPane . ERROR_MESSAGE ) ; this . dispose ( ) ; } }
tr	KEY	public String getValue ( ) { return this . value ; }
tr	IDF	@ Test public void testRegisterSuccess ( ) throws Exception { UserState res = ac . register ( TEST_USER , TEST_PASSWORD ) ; assert . assertTrue ( res . isSuccess ( ) ) ; }
tr	IDF	@ Override default Query unit ( Object s ) { if ( s instanceof Query ) { System . out . println ( "here" ) ; Query res = ( Query ) s ; System . out . println ( "here2" ) ; return res ; } List < String > res = new ArrayList < String > ( ) ; res . add ( "" + s ) ; return ( ) -> res ; }
tr	IDF	public void actionPerformed ( ActionEvent e ) { if ( cursorMode ) { log . println ( "Invalid key" ) ; } else { equipArmour ( ) ; controller . addPlayerEvent ( 30 ) ; controller . playTurn ( ) ; } }
tr	KEY	public void setScore ( double score ) { this . score = score ; }
tr	KEY	public String getName ( ) { return this . name ; }
tr	KEY	@ JsonProperty ( "rating" ) public long getRating ( ) { return rating ; }
tr	IDF	@ Deprecated Val put ( Key key , Val value ) ;
tr	IDF	private void formWindowClosing ( java . awt . event . WindowEvent evt ) { finaliza ( ) ; }
tr	IDF	public BluetoothProtocolHandler ( StreamConnection connection , DiscoveryListener callback ) { this . connection = connection ; this . callback = callback ; }
tr	KEY	public TownHouse townHouse ( ) { return new TownHouse ( this ) ; }
tr	KEY	private boolean solutionIsValid ( OreSolution solution ) { for ( long mineral : solution . minerals ) { if ( mineral > 0 ) { return false ; } } return true ; }
tr	IDF	public void keyReleased ( java . awt . event . KeyEvent evt ) { jTFEmailKeyReleased ( evt ) ; }
tr	KEY	int nbConnectedUsers ( ) ;
tr	KEY	public Housing ( ) { this ( null , null , null , null , null , null ) ; }
tr	KEY	public static TimestampResultSetMapper getInstance ( ) { return instance ; }
tr	KEY	public int getUserConfigX ( ) { return userConfigX ; }
tr	KEY	boolean isEndState ( ) ;
tr	IDF	private static Object [ ] insert ( Object [ ] ary , int idx , Object elt ) { int len = ary . length + 1 ; Object [ ] a = new Object [ len ] ; for ( int i = 0 ; i < idx ; ++ i ) a [ i ] = ary [ i ] ; a [ idx ] = elt ; for ( int i = idx + 1 ; i < len ; ++ i ) a [ i ] = ary [ i - 1 ] ; return a ; }
tr	KEY	public boolean equals ( Object _other ) { if ( _other == null ) { return false ; } if ( _other == this ) { return true ; } if ( ! ( _other instanceof InviteRes ) ) { return false ; } final InviteRes _cast = ( InviteRes ) _other ; if ( inviteRes == null ? _cast . inviteRes != inviteRes : ! inviteRes . equals ( _cast . inviteRes ) ) { return false ; } return true ; }
tr	KEY	public void setPrecio_color ( double precio_color ) { this . precio_color = precio_color ; }
tr	KEY	@ Override public int addedColsCount ( ) { return addedColsCount ; }
tr	KEY	public LApplicationPanel ( ) { super ( ) ; }
tr	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButton1ActionPerformed ( evt ) ; }
tr	KEY	public void setDeveloper ( ) { this . hasDeveLoper = true ; }
tr	IDF	String describe ( ) ;
tr	KEY	public synchronized int xgetBInitialDelay ( ) { return bID ; }
tr	KEY	public int getId_company ( ) { return id_company ; }
tr	KEY	public DeclTree ( ) { }
tr	IDF	@ Override public List < Elective > loadAllElectives ( ) { List < Elective > allElectives = electiveDAO . loadAll ( ) ; initializeElectives ( allElectives ) ; return allElectives ; }
tr	IDF	public PiecePart getCurrentConstraint ( ) { return constraints . peekLast ( ) ; }
tr	IDF	@ Override public void stop ( ) { running . interrupt ( ) ; running = null ; }
tr	KEY	public Object parseObjectFromString ( String value ) { if ( objType == String . class ) { return value ; } try { if ( objType == boolean . class ) { if ( value != null ) { if ( value . equalsIgnoreCase ( "true" ) ) { return true ; } else if ( value . equalsIgnoreCase ( "false" ) ) { return false ; } } } else if ( objType . isEnum ( ) ) { return enum . valueOf ( ( class < enum > ) objType , value ) ; } else if ( objType == byte . class || objType == byte . class ) { return byte . parseByte ( value ) ; } else if ( objType == short . class || objType == short . class ) { return short . parseShort ( value ) ; } else if ( objType == Integer . class || objType == int . class ) { return Integer . parseInt ( value ) ; } else if ( objType == long . class || objType == long . class ) { return long . parseLong ( value ) ; } else if ( objType == float . class || objType == float . class ) { return float . parseFloat ( value ) ; } else if ( objType == double . class || objType == double . class ) { return double . parseDouble ( value ) ; } else if ( objType == Character . class ) { return ( value . length ( ) == 1 ? value . charAt ( 0 ) : null ) ; } else { System . out . println ( "Unsupported object type to parse from String : " + getObjType ( ) . getName ( ) ) ; } } catch ( NumberFormatException nfe ) { } return null ; }
tr	KEY	public int getTotalCycles ( ) { return mTotalCycles ; }
tr	IDF	@ Override public boolean equals ( Object o ) { if ( this == o ) return true ; if ( o == null || getClass ( ) != o . getClass ( ) ) return false ; SvnVcsRoot that = ( SvnVcsRoot ) o ; return repositoryUrl . equals ( that . repositoryUrl ) && settings . equals ( that . settings ) ; }
tr	IDF	public Stock ( String idPerfil , int color , int stock ) { this . idPerfil = idPerfil ; this . color = color ; this . stock = stock ; }
tr	IDF	protected void createOptionsPanel ( ) { SpringLayout optionsPanelSpringLayout = new SpringLayout ( ) ; _optionsPanel = new JPanel ( optionsPanelSpringLayout ) ; Border titled = BorderFactory . createTitledBorder ( "" ) ; _optionsPanel . setBorder ( titled ) ; Font fieldFont = new Font ( "Courier" , Font . PLAIN , 12 ) ; final JLabel title = new JLabel ( "Create a Fill In The Blanks Question." ) ; optionsPanelSpringLayout . putConstraint ( SpringLayout . WEST , title , MINIMUM_SPACING , SpringLayout . WEST , _optionsPanel ) ; optionsPanelSpringLayout . putConstraint ( SpringLayout . NORTH , title , 0 , SpringLayout . NORTH , _optionsPanel ) ; _optionsPanel . add ( title ) ; final JLabel statementLabel = new JLabel ( "Statement:" ) ; optionsPanelSpringLayout . putConstraint ( SpringLayout . WEST , statementLabel , MINIMUM_SPACING , SpringLayout . WEST , _optionsPanel ) ; optionsPanelSpringLayout . putConstraint ( SpringLayout . NORTH , statementLabel , 15 , SpringLayout . SOUTH , title ) ; _optionsPanel . add ( statementLabel ) ; _statementTextField = new JTextField ( FIELD_WIDTH ) ; _statementTextField . setDocument ( new JTextFieldLimit ( FIELD_WIDTH ) ) ; _statementTextField . setFont ( fieldFont ) ; optionsPanelSpringLayout . putConstraint ( SpringLayout . WEST , _statementTextField , 15 , SpringLayout . EAST , statementLabel ) ; optionsPanelSpringLayout . putConstraint ( SpringLayout . NORTH , _statementTextField , 0 , SpringLayout . NORTH , statementLabel ) ; _optionsPanel . add ( _statementTextField ) ; _blankTextFields = new ArrayList < JTextField > ( ) ; final int maxKeys = 5 ; for ( int x = 0 ; x < maxKeys ; ++ x ) { final JLabel keyWordLabel = new JLabel ( "Blank #" + x + ":" ) ; optionsPanelSpringLayout . putConstraint ( SpringLayout . WEST , keyWordLabel , 0 , SpringLayout . WEST , statementLabel ) ; optionsPanelSpringLayout . putConstraint ( SpringLayout . NORTH , keyWordLabel , ( x + 1 ) * 25 , SpringLayout . SOUTH , statementLabel ) ; _optionsPanel . add ( keyWordLabel ) ; JTextField keyWordTextField = new JTextField ( FIELD_WIDTH ) ; keyWordTextField . setDocument ( new JTextFieldLimit ( FIELD_WIDTH ) ) ; keyWordTextField . setFont ( fieldFont ) ; optionsPanelSpringLayout . putConstraint ( SpringLayout . EAST , keyWordTextField , 0 , SpringLayout . EAST , _statementTextField ) ; optionsPanelSpringLayout . putConstraint ( SpringLayout . NORTH , keyWordTextField , 0 , SpringLayout . NORTH , keyWordLabel ) ; _optionsPanel . add ( keyWordTextField ) ; _blankTextFields . add ( keyWordTextField ) ; } final JButton generate = new JButton ( LABEL_GENERATE ) ; generate . addActionListener ( this ) ; optionsPanelSpringLayout . putConstraint ( SpringLayout . WEST , generate , 15 , SpringLayout . EAST , statementLabel ) ; optionsPanelSpringLayout . putConstraint ( SpringLayout . NORTH , generate , 10 , SpringLayout . SOUTH , _blankTextFields . get ( _blankTextFields . size ( ) - 1 ) ) ; _optionsPanel . add ( generate ) ; _generateOutput = new JLabel ( ) ; optionsPanelSpringLayout . putConstraint ( SpringLayout . WEST , _generateOutput , 15 , SpringLayout . EAST , statementLabel ) ; optionsPanelSpringLayout . putConstraint ( SpringLayout . NORTH , _generateOutput , 10 , SpringLayout . SOUTH , generate ) ; _optionsPanel . add ( _generateOutput ) ; JLabel temp = new JLabel ( ) ; optionsPanelSpringLayout . putConstraint ( SpringLayout . EAST , _optionsPanel , SCREEN_WIDTH - 20 , SpringLayout . EAST , temp ) ; optionsPanelSpringLayout . putConstraint ( SpringLayout . SOUTH , _optionsPanel , 330 , SpringLayout . SOUTH , temp ) ; }
tr	KEY	int getNumberOfRows ( ) ;
tr	KEY	protected void switchUsable ( ) { if ( isUsable == true ) { isUsable = false ; _save . setEnabled ( false ) ; } else { isUsable = true ; _save . setEnabled ( true ) ; } }
tr	KEY	public void reset ( ) { setInputFile ( inf ) ; }
tr	IDF	@ Override public String getFormalName ( ) { String expression = this . getThreat ( ) + "_" + this . getAsset ( ) + "_" + this . getTarget ( ) + "_" + this . getProtection ( ) ; expression = expression . replaceAll ( " " , "_" ) ; return expression . toLowerCase ( ) ; }
tr	KEY	public void clientTick ( float alpha ) { }
tr	IDF	@ Override public boolean getValor ( ) { return esq . getValor ( ) && dir . getValor ( ) ; }
tr	IDF	public Rectangle findSlingshotMBR ( ) { if ( visionMBR == null ) { visionMBR = new VisionMBR ( image ) ; } return visionMBR . findSlingshotMBR ( ) ; }
tr	KEY	public void setTotal ( long value ) { this . total = value ; }
tr	KEY	public static ClipboardTools getDefault ( ) { return instance ; }
tr	IDF	public ArtillerieController ( JeuView view ) { super ( view ) ; }
tr	KEY	public void run ( ) { }
tr	KEY	public double [ ] getColor ( ) { return color ; }
tr	KEY	public int getColumn ( ) { return column ; }
tr	KEY	private synchronized void Reserve ( int quantity ) throws InsufficientInventoryException { if ( this . getCount ( ) < quantity ) { throw new InsufficientInventoryException ( "Cannot reserve itemID[" + this . productId + "] for quantity[" + quantity + "]" ) ; } this . reservations += quantity ; }
tr	KEY	public boolean isCollidable ( ) { return collidable ; }
tr	IDF	public PaymentCredit ( Main main ) { initComponents ( ) ; this . main = main ; this . setVisible ( false ) ; }
tr	IDF	public void setAlgorithm ( String algorithm ) { this . algorithm = algorithm ; }
tr	IDF	@ Override public void turnOffBluetooth ( ) { communicationThread . cancel ( ) ; }
tr	IDF	@ Override public void act2 ( ) { Object obj = capabilities . get ( Cap2 . class ) ; if ( obj != null ) { ( ( Cap2 ) obj ) . act2 ( ) ; } else { throw new UnsupportedOperationException ( "We do not have Cap2 capability yet" ) ; } }
tr	KEY	public boolean pressTab ( ) { return false ; }
tr	KEY	@ Override public void reset ( ) { }
tr	KEY	public void throw ( ) { this . number = ( int ) ( 1 + Math . random ( ) * 6 ) ; }
tr	IDF	public static double nextAfter ( double d , double direction ) { if ( double . isNaN ( d ) || double . isNaN ( direction ) ) { return double . NaN ; } else if ( d == direction ) { return direction ; } else if ( double . isInfinite ( d ) ) { return ( d < 0 ) ? - double . MAX_VALUE : double . MAX_VALUE ; } else if ( d == 0 ) { return ( direction < 0 ) ? - double . MIN_VALUE : double . MIN_VALUE ; } final long bits = double . doubleToLongBits ( d ) ; final long sign = bits & 8000000000000000 ; if ( ( direction < d ) ^ ( sign == 0 ) ) { return double . longBitsToDouble ( sign | ( ( bits & 7fffffffffffffff ) + 1 ) ) ; } else { return double . longBitsToDouble ( sign | ( ( bits & 7fffffffffffffff ) - 1 ) ) ; } }
tr	IDF	public void draw ( Graphics2D g , int left , int top ) { g . setColor ( Color . CYAN ) ; g . fillOval ( _start . x + left - 2 , _start . y + top - 2 , 4 , 4 ) ; }
tr	KEY	public void setOffset ( long value ) { this . offset = value ; }
tr	IDF	public SelectionPanel ( ) { setBorder ( BorderFactory . createEtchedBorder ( ) ) ; setLayout ( new MigLayout ( "" , "[grow fill]" , "" ) ) ; initPanels ( ) ; initRadioButtons ( ) ; }
tr	KEY	public int getReorderLevel ( ) { return reorderLevel ; }
tr	KEY	public void setLoggedIn ( boolean loggedIn ) { this . loggedIn = loggedIn ; }
tr	KEY	public CDbError ( ) { }
tr	IDF	@ Override public void undo ( ) { for ( int i = commands . length - 1 ; i >= 0 ; i -- ) { commands [ i ] . undo ( ) ; } }
tr	KEY	public boolean compareNumSymbols ( PalaceCard card ) { if ( this . numSymbols > card . getNumSymbols ( ) ) { return false ; } return true ; }
tr	IDF	public void set_return ( java . lang . String param ) { local_returnTracker = true ; this . local_return = param ; }
tr	IDF	public void postCheck ( Context ctx ) throws PolicyException { for ( Policy p : this ) { p . postCheck ( ctx ) ; } }
tr	IDF	public int hashCode ( ) { if ( hash_code == Integer . MIN_VALUE ) hash_code = myHashCode ( tree ) ; return hash_code ; }
tr	IDF	public JSONWriter value ( Object object ) throws JSONException { return this . append ( JSONObject . valueToString ( object ) ) ; }
tr	KEY	public void setTipodoc ( int tipodoc ) { this . tipodoc = tipodoc ; }
tr	KEY	protected Logger getLogger ( ) { return this . logger ; }
tr	KEY	public void setOrderItemID ( int orderItemID ) { this . orderItemID = orderItemID ; }
tr	KEY	public void setT1 ( int t1 ) { this . t1 = t1 ; }
tr	IDF	public void setInviteRes ( String inviteRes ) { this . inviteRes = inviteRes ; }
tr	IDF	@ Override public Message < ClientProtocolParameters > handleMessage ( ServerNodeCommandMessage message , void params ) { commandManager . onCommandReceived ( message . name , message . args , message . commandId ) ; int result = commandManager . executeCommand ( message . name , message . args , message . commandId ) ; ClientProtocolParameters parameters = messageManager . getProtocolParameters ( ) ; String responseMessage = null ; if ( result == 200 ) { responseMessage = "OK" ; } else if ( result == 401 ) { responseMessage = "INVALID_COMMAND" ; } else if ( result == 403 ) { responseMessage = "INVALID_ARGS" ; } return new NodeCommandMessage ( parameters , message . commandId , result , responseMessage ) ; }
tr	IDF	@ Override public void mouseEntered ( MouseEvent e ) { }
tr	KEY	@ AfterClass public static void tearDownClass ( ) throws Exception { }
tr	KEY	@ Override protected JMenu createAboutMenu ( ) { return null ; }
tr	IDF	@ Override public void setObj_path ( String obj_path ) { this . _obj_path = obj_path ; }
tr	IDF	public C findById ( long id ) throws SQLException { return find ( "id = ?" , id ) ; }
tr	IDF	ImageBufferedList ( int arrayLength , long limitSize ) { this . limitSize = limitSize ; this . weakImageList = new ArrayList < WeakReference < Image >> ( arrayLength ) ; for ( int i = 0 ; i < arrayLength ; ++ i ) { weakImageList . add ( new WeakReference < Image > ( null ) ) ; } }
tr	KEY	@ Override protected void doInBackground ( ) throws Exception { mergeSW ( ) ; return null ; }
tr	IDF	private boolean canAdd ( Loc l , int dir , State rr ) { int x = l . x ; int y = l . y ; switch ( dir ) { case 0 : return ( y - 1 >= 0 && ! map . isCollision ( x , y - 1 ) && ! rr . contains ( new Loc ( x , y - 1 ) ) ) ; case 1 : return ( y + 1 < map . gridSize && ! map . isCollision ( x , y + 1 ) && ! rr . contains ( new Loc ( x , y + 1 ) ) ) ; case 2 : return ( x - 1 >= 0 && ! map . isCollision ( x - 1 , y ) && ! rr . contains ( new Loc ( x - 1 , y ) ) ) ; case 3 : return ( x + 1 < map . gridSize && ! map . isCollision ( x + 1 , y ) && ! rr . contains ( new Loc ( x + 1 , y ) ) ) ; default : return false ; } }
tr	IDF	protected AbstractVisitor ( Node root ) { this . root = root ; }
tr	IDF	public String toString ( ) { String s = "" ; for ( int i = 0 ; i < map . length ; i ++ ) { for ( int j = 0 ; j < map [ i ] . length ; j ++ ) { s += map [ i ] [ j ] . getElevation ( ) + " " ; } s += "\n" ; } return s ; }
tr	IDF	public static void newTesting ( ) throws IOException , ScriptException { CommandPanel . setup ( ) ; HolisticSecurityGoalModel hsgm = new HolisticSecurityGoalModel ( ) ; HSGMInference . importHolisticSecurityGoalModel ( hsgm , true ) ; LinkedList < String > result = HSGMInference . sanityCheckRepeat ( hsgm ) ; if ( result . size ( ) > 0 ) { System . out . println ( result . get ( 0 ) ) ; } }
tr	IDF	@ Test public final void testHash ( ) { final String password = new String ( "password" ) ; assertEquals ( 64 , HashSystem . defaultHash ( password ) . length ( ) ) ; assertEquals ( HashSystem . defaultHash ( password ) , HashSystem . defaultHash ( password ) ) ; }
tr	IDF	@ Override public Integer getNumber ( ) { return rowSleepTime ; }
tr	IDF	public static void main ( String [ ] args ) { int count = 0 ; for ( int x1 = 0 ; x1 <= 50 ; x1 ++ ) for ( int y1 = 0 ; y1 <= 50 ; y1 ++ ) if ( x1 + y1 > 0 ) for ( int x2 = 0 ; x2 <= 50 ; x2 ++ ) for ( int y2 = 0 ; y2 <= 50 ; y2 ++ ) if ( x2 + y2 > 0 ) if ( x1 == 0 && x2 > 0 || 1.0 * y1 / x1 > 1.0 * y2 / x2 ) { double slope1 ; double slope2 ; double slope3 ; if ( x1 == 0 ) slope1 = double . POSITIVE_INFINITY ; else slope1 = 1.0 * y1 / x1 ; slope2 = 1.0 * y2 / x2 ; if ( x1 == x2 ) slope3 = double . POSITIVE_INFINITY ; else slope3 = 1.0 * ( y2 - y1 ) / ( x2 - x1 ) ; if ( slope1 == double . POSITIVE_INFINITY && ( slope2 == 0 || slope3 == 0 ) || slope3 == double . POSITIVE_INFINITY && ( slope1 == 0 || slope2 == 0 ) || Math . abs ( slope1 * slope2 + 1 ) < 0.001 || Math . abs ( slope1 * slope3 + 1 ) < 0.001 || Math . abs ( slope2 * slope3 + 1 ) < 0.001 ) count ++ ; } System . out . println ( count ) ; }
tr	IDF	public AcaoParaFrente ( Expressao expressao ) { super ( expressao , operador ) ; }
tr	IDF	public void setName ( String name ) { this . name = name ; }
tr	IDF	@ NotNull @ Override public String getFilePath ( ) { return filePath ; }
tr	IDF	public JdbcUtils ( ) { try { class . forName ( DRIVER ) ; System . out . println ( "\u6570\u636E\u5E93\u8FDE\u63A5\u6210\u529F\uFF01" ) ; } catch ( Exception e ) { } }
tr	KEY	public int nbUsersOnServer ( ) { return connections . size ( ) ; }
tr	IDF	public void keyReleased ( KeyEvent e ) { GameAction gameAction = getKeyAction ( e ) ; if ( gameAction != null ) { gameAction . release ( ) ; } e . consume ( ) ; }
tr	IDF	@ Override public IKey consulta ( String chave ) throws SQLException { Tecnico tecnico = null ; String sql = "SELECT * FROM tecnico WHERE codigo = '" + chave + "'" ; Statement stmt = connection . createStatement ( ) ; ResultSet rs = stmt . executeQuery ( sql ) ; while ( rs . next ( ) ) { tecnico = new Tecnico ( ) ; tecnico . setCodigo ( rs . getString ( "codigo" ) ) ; tecnico . setNome ( rs . getString ( "nome" ) ) ; tecnico . setEmail ( rs . getString ( "email" ) ) ; tecnico . setTelefone ( rs . getString ( "telefone" ) ) ; tecnico . setData_contratacao ( rs . getDate ( "data_contratacao" ) ) ; } return tecnico ; }
tr	IDF	float xat ( float t ) { return t * ( t * ( t * ax + bx ) + cx ) + dx ; }
tr	IDF	@ SuppressWarnings ( "unchecked" ) private void initComponents ( ) { objetsAffichebuttonGroup1 = new javax . swing . ButtonGroup ( ) ; BarbuttonGroup = new javax . swing . ButtonGroup ( ) ; directionbuttonGroup = new javax . swing . ButtonGroup ( ) ; camembergbuttonGroup = new javax . swing . ButtonGroup ( ) ; jPanel1 = new javax . swing . JPanel ( ) ; jPanel2 = new javax . swing . JPanel ( ) ; jLabel1 = new javax . swing . JLabel ( ) ; stockjRadioButton1 = new javax . swing . JRadioButton ( ) ; quantitejRadioButton2 = new javax . swing . JRadioButton ( ) ; jLabel2 = new javax . swing . JLabel ( ) ; jPanel4 = new javax . swing . JPanel ( ) ; bar2DjRadioButton1 = new javax . swing . JRadioButton ( ) ; bar3djRadioButton2 = new javax . swing . JRadioButton ( ) ; jPanel5 = new javax . swing . JPanel ( ) ; camenberg2DRadioButton = new javax . swing . JRadioButton ( ) ; camemberg3DRadioButton = new javax . swing . JRadioButton ( ) ; genereGrapePieChartButton = new javax . swing . JButton ( ) ; genererGrapheBarChartjButton = new javax . swing . JButton ( ) ; graphiquejPanel = new javax . swing . JPanel ( ) ; setClosable ( true ) ; setTitle ( "Statistiques avec JfreeChart" ) ; jPanel2 . setBorder ( javax . swing . BorderFactory . createTitledBorder ( "Command Options" ) ) ; jLabel1 . setText ( "- Afficher la liste des articles par :" ) ; objetsAffichebuttonGroup1 . add ( stockjRadioButton1 ) ; stockjRadioButton1 . setText ( "Stock" ) ; objetsAffichebuttonGroup1 . add ( quantitejRadioButton2 ) ; quantitejRadioButton2 . setText ( "Quantite" ) ; jLabel2 . setText ( "-  Choisir le type d'affichage : " ) ; jPanel4 . setBorder ( javax . swing . BorderFactory . createTitledBorder ( "Bar Chart" ) ) ; BarbuttonGroup . add ( bar2DjRadioButton1 ) ; bar2DjRadioButton1 . setText ( "Bar 2D" ) ; BarbuttonGroup . add ( bar3djRadioButton2 ) ; bar3djRadioButton2 . setText ( "Bar 3D" ) ; javax . swing . GroupLayout jPanel4Layout = new javax . swing . GroupLayout ( jPanel4 ) ; jPanel4 . setLayout ( jPanel4Layout ) ; jPanel4Layout . setHorizontalGroup ( jPanel4Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( jPanel4Layout . createSequentialGroup ( ) . addGap ( 24 , 24 , 24 ) . addGroup ( jPanel4Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( bar3djRadioButton2 ) . addComponent ( bar2DjRadioButton1 ) ) . addContainerGap ( 103 , short . MAX_VALUE ) ) ) ; jPanel4Layout . setVerticalGroup ( jPanel4Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( jPanel4Layout . createSequentialGroup ( ) . addContainerGap ( javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addComponent ( bar2DjRadioButton1 ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addComponent ( bar3djRadioButton2 ) ) ) ; jPanel5 . setBorder ( javax . swing . BorderFactory . createTitledBorder ( "Pie Chart" ) ) ; camembergbuttonGroup . add ( camenberg2DRadioButton ) ; camenberg2DRadioButton . setText ( "Camemberg 2D" ) ; camembergbuttonGroup . add ( camemberg3DRadioButton ) ; camemberg3DRadioButton . setText ( "Camemberg 3D" ) ; javax . swing . GroupLayout jPanel5Layout = new javax . swing . GroupLayout ( jPanel5 ) ; jPanel5 . setLayout ( jPanel5Layout ) ; jPanel5Layout . setHorizontalGroup ( jPanel5Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( jPanel5Layout . createSequentialGroup ( ) . addContainerGap ( ) . addGroup ( jPanel5Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( camenberg2DRadioButton ) . addComponent ( camemberg3DRadioButton ) ) . addContainerGap ( javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) ) ) ; jPanel5Layout . setVerticalGroup ( jPanel5Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( jPanel5Layout . createSequentialGroup ( ) . addGap ( 15 , 15 , 15 ) . addComponent ( camenberg2DRadioButton ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addComponent ( camemberg3DRadioButton ) . addContainerGap ( javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) ) ) ; genereGrapePieChartButton . setText ( "G\u00E9n\u00E9rer Graphe pie chart" ) ; genereGrapePieChartButton . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { genereGrapePieChartButtonActionPerformed ( evt ) ; } } ) ; genererGrapheBarChartjButton . setText ( "G\u00E9n\u00E9rer Graphe bar chart" ) ; genererGrapheBarChartjButton . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { genererGrapheBarChartjButtonActionPerformed ( evt ) ; } } ) ; javax . swing . GroupLayout jPanel2Layout = new javax . swing . GroupLayout ( jPanel2 ) ; jPanel2 . setLayout ( jPanel2Layout ) ; jPanel2Layout . setHorizontalGroup ( jPanel2Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( jPanel4 , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addComponent ( jPanel5 , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addGroup ( jPanel2Layout . createSequentialGroup ( ) . addContainerGap ( ) . addGroup ( jPanel2Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( jPanel2Layout . createSequentialGroup ( ) . addComponent ( jLabel2 ) . addGap ( 0 , 0 , short . MAX_VALUE ) ) . addGroup ( jPanel2Layout . createSequentialGroup ( ) . addGroup ( jPanel2Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( jPanel2Layout . createSequentialGroup ( ) . addGap ( 21 , 21 , 21 ) . addComponent ( stockjRadioButton1 ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . UNRELATED ) . addComponent ( quantitejRadioButton2 ) ) . addComponent ( jLabel1 ) . addComponent ( genererGrapheBarChartjButton ) ) . addContainerGap ( javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) ) ) ) . addGroup ( jPanel2Layout . createSequentialGroup ( ) . addGap ( 20 , 20 , 20 ) . addComponent ( genereGrapePieChartButton ) . addGap ( 0 , 0 , short . MAX_VALUE ) ) ) ; jPanel2Layout . setVerticalGroup ( jPanel2Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( jPanel2Layout . createSequentialGroup ( ) . addGap ( 23 , 23 , 23 ) . addComponent ( jLabel1 ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . UNRELATED ) . addGroup ( jPanel2Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE ) . addComponent ( quantitejRadioButton2 ) . addComponent ( stockjRadioButton1 ) ) . addGap ( 20 , 20 , 20 ) . addComponent ( jLabel2 ) . addGap ( 18 , 18 , 18 ) . addComponent ( jPanel4 , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . UNRELATED ) . addComponent ( genererGrapheBarChartjButton ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . UNRELATED ) . addComponent ( jPanel5 , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . UNRELATED ) . addComponent ( genereGrapePieChartButton ) . addContainerGap ( 67 , short . MAX_VALUE ) ) ) ; graphiquejPanel . setBorder ( javax . swing . BorderFactory . createEtchedBorder ( ) ) ; javax . swing . GroupLayout graphiquejPanelLayout = new javax . swing . GroupLayout ( graphiquejPanel ) ; graphiquejPanel . setLayout ( graphiquejPanelLayout ) ; graphiquejPanelLayout . setHorizontalGroup ( graphiquejPanelLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGap ( 0 , 782 , short . MAX_VALUE ) ) ; graphiquejPanelLayout . setVerticalGroup ( graphiquejPanelLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGap ( 0 , 447 , short . MAX_VALUE ) ) ; javax . swing . GroupLayout jPanel1Layout = new javax . swing . GroupLayout ( jPanel1 ) ; jPanel1 . setLayout ( jPanel1Layout ) ; jPanel1Layout . setHorizontalGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( jPanel1Layout . createSequentialGroup ( ) . addComponent ( jPanel2 , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addComponent ( graphiquejPanel , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) ) ) ; jPanel1Layout . setVerticalGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( jPanel2 , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addComponent ( graphiquejPanel , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) ) ; javax . swing . GroupLayout layout = new javax . swing . GroupLayout ( getContentPane ( ) ) ; getContentPane ( ) . setLayout ( layout ) ; layout . setHorizontalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( jPanel1 , javax . swing . GroupLayout . Alignment . TRAILING , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) ) ; layout . setVerticalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( jPanel1 , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) ) ; pack ( ) ; }
tr	IDF	@ Override public Action loadObject ( JsonObject json ) { return new DrawFestivalCardAction ( Integer . parseInt ( json . getString ( "actionID" ) ) ) ; }
tr	KEY	public ComandoContext ( ) { }
tr	IDF	public UType [ ] findByDynamicSelect ( String sql , Object [ ] sqlParams ) throws UTypeDaoException { final boolean isConnSupplied = ( userConn != null ) ; Connection conn = null ; PreparedStatement stmt = null ; ResultSet rs = null ; try { conn = isConnSupplied ? userConn : ResourceManager . getConnection ( ) ; final String SQL = sql ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Executing " + SQL ) ; } stmt = conn . prepareStatement ( SQL ) ; stmt . setMaxRows ( maxRows ) ; for ( int i = 0 ; sqlParams != null && i < sqlParams . length ; i ++ ) { stmt . setObject ( i + 1 , sqlParams [ i ] ) ; } rs = stmt . executeQuery ( ) ; return fetchMultiResults ( rs ) ; } catch ( Exception _e ) { logger . error ( "Exception: " + _e . getMessage ( ) , _e ) ; throw new UTypeDaoException ( "Exception: " + _e . getMessage ( ) , _e ) ; } finally { ResourceManager . close ( rs ) ; ResourceManager . close ( stmt ) ; if ( ! isConnSupplied ) { ResourceManager . close ( conn ) ; } } }
tr	KEY	public boolean canUseThree ( ) { return getAvailableActionPoints ( false ) > 0 ; }
tr	KEY	public void hello ( ) ;
tr	KEY	public char nextClean ( ) throws JSONException { for ( ; ; ) { char c = next ( ) ; if ( c == 0 || c >   ) { return c ; } } }
tr	KEY	public double getBalance ( ) { return balance ; }
tr	IDF	private void updatePieceCount ( DraughtsState gs ) { int [ ] pieces = gs . getPieces ( ) ; int whites = 0 , blacks = 0 ; for ( int f = 1 ; f < pieces . length ; f = f + 1 ) { int piece = pieces [ f ] ; if ( Draughts . isWhite ( piece ) ) whites ++ ; else if ( Draughts . isBlack ( piece ) ) blacks ++ ; } String status = "" + whites + " - " + blacks ; numberOfPiecesLabel . setText ( status ) ; }
tr	KEY	public void setKm ( int km ) { this . km = km ; }
tr	IDF	public void restore ( Memento memento ) { this . state = memento . state ; this . code = memento . code ; this . parameters = memento . parameters ; }
tr	IDF	@ Override public void removeLayoutComponent ( Component comp ) { }
tr	KEY	public int getColumnCount ( ) { return columnNames . length ; }
tr	KEY	public void setPowered ( boolean powered ) { this . powered = powered ; }
tr	IDF	public void initRandomPerso ( ) { String [ ] nameTab = { "Alpha" , "Beta" , "Gamma" , "Delta" , "Epsilon" , "Zeta" , "Eta" , "Theta" , "iota" } ; int ranName = ( int ) ( Math . random ( ) * nameTab . length ) ; name = nameTab [ ranName ] ; persoName . setText ( name ) ; int ranRace = ( int ) ( Math . random ( ) * 3 ) ; race . setSelectedItem ( race . getItemAt ( ranRace ) ) ; int ranVitesse = 0 ; int ranForce = 0 ; if ( race . getItemAt ( ranRace ) . equals ( "Elf" ) ) { ranVitesse = ( int ) ( Math . random ( ) * ( 11 - 8 ) + 8 ) ; ranForce = ( int ) ( Math . random ( ) * ( 4 - 1 ) + 1 ) ; } if ( race . getItemAt ( ranRace ) . equals ( "Ogre" ) ) { ranVitesse = ( int ) ( Math . random ( ) * ( 8 - 1 ) + 1 ) ; ranForce = ( int ) ( Math . random ( ) * ( 11 - 4 ) + 4 ) ; } if ( race . getItemAt ( ranRace ) . equals ( "Humain" ) ) { ranVitesse = ( int ) ( Math . random ( ) * ( 11 - 4 ) + 4 ) ; ranForce = ( int ) ( Math . random ( ) * ( 7 - 1 ) + 1 ) ; } vitesseSlider . setValue ( ranVitesse ) ; forceSlider . setValue ( ranForce ) ; int armeAleatoire = ( int ) ( Math . random ( ) * tabArme . length ) ; arme . setSelectedItem ( arme . getItemAt ( armeAleatoire ) ) ; int armureAleatoire = ( int ) ( Math . random ( ) * tabArmure . length ) ; armure . setSelectedItem ( armure . getItemAt ( armureAleatoire ) ) ; int inclinaisonAleatoire = ( int ) ( Math . random ( ) * ( 3 - 1 ) + 1 ) ; if ( inclinaisonAleatoire == 1 ) { gentil . setSelected ( true ) ; inclinaisonChoisie = gentil . getText ( ) ; } else { mechant . setSelected ( true ) ; inclinaisonChoisie = mechant . getText ( ) ; } }
tr	KEY	public LSPViolationTest ( ) { }
tr	IDF	private static double slowCos ( final double x , final double result [ ] ) { final double xs [ ] = new double [ 2 ] ; final double ys [ ] = new double [ 2 ] ; final double facts [ ] = new double [ 2 ] ; final double as [ ] = new double [ 2 ] ; split ( x , xs ) ; ys [ 0 ] = ys [ 1 ] = 0.0 ; for ( int i = 19 ; i >= 0 ; i -- ) { splitMult ( xs , ys , as ) ; ys [ 0 ] = as [ 0 ] ; ys [ 1 ] = as [ 1 ] ; if ( ( i & 1 ) != 0 ) { continue ; } split ( FACT [ i ] , as ) ; splitReciprocal ( as , facts ) ; if ( ( i & 2 ) != 0 ) { facts [ 0 ] = - facts [ 0 ] ; facts [ 1 ] = - facts [ 1 ] ; } splitAdd ( ys , facts , as ) ; ys [ 0 ] = as [ 0 ] ; ys [ 1 ] = as [ 1 ] ; } if ( result != null ) { result [ 0 ] = ys [ 0 ] ; result [ 1 ] = ys [ 1 ] ; } return ys [ 0 ] + ys [ 1 ] ; }
tr	KEY	public String getSmartDashboardType ( ) { return "PIDController" ; }
tr	KEY	public GetMessagesResponse createGetMessagesResponse ( ) { return new GetMessagesResponse ( ) ; }
tr	KEY	public final int getNumeric ( ) { return numeric ; }
tr	KEY	@ Override public boolean clearAllComponents ( ) { return false ; }
tr	IDF	@ Override protected String getXMLDefElement ( ) { String stat = Constants . getSwitchStatusAsString ( status ) ; String xml = "<defSwitch name=\"" + this . getName ( ) + "\" label=\"" + getLabel ( ) + "\">" + stat + "</defSwitch>" ; return xml ; }
tr	KEY	private FastMath ( ) { }
tr	KEY	public void run ( ) { new NewProfile ( ) . setVisible ( true ) ; }
tr	KEY	public TelaTecnico ( ) { initComponents ( ) ; this . setSize ( new Dimension ( 600 , 400 ) ) ; this . setResizable ( false ) ; this . setLocationRelativeTo ( null ) ; }
tr	IDF	public void __doGet ( HttpServletRequest req , HttpServletResponse resp ) throws IOException , ServletException { Context ctx = ( Context ) req . getSession ( ) . getAttribute ( Authtoken . TOKEN ) ; if ( ctx == null ) { ctx = new Context ( ) ; } String profileId = new String ( ) ; if ( req . getPathInfo ( ) != null ) { profileId = "/" + Profile . RESOURCE_NAME + "/" + req . getPathInfo ( ) . replaceAll ( "/" , "" ) ; } if ( ! profileId . equals ( "" ) ) { Message request = new Message ( ctx ) ; request . put ( Profile . ID , profileId ) ; Message response = new Message ( ctx ) ; new ProfileService ( ) . doGet ( request , response ) ; req . setAttribute ( Profile . RESOURCE_NAME , response ) ; Message eventRequest = new Message ( request . getContext ( ) ) ; eventRequest . put ( Event . DOCUMENT_TYPE , Profile . RESOURCE_NAME ) ; eventRequest . put ( Event . TYPE , "GET" ) ; eventRequest . put ( Event . DESCRIPTION , "View Profile" ) ; eventRequest . put ( Event . OBJECT , request . get ( Profile . ID ) ) ; eventRequest . put ( Event . USER , ctx . getLoggedInUserProfileId ( ) ) ; eventRequest . put ( Event . TIMESTAMP , request . get ( System . TIMESTAMP ) ) ; EventPublisherService pub = new EventPublisherService ( ) ; pub . doPost ( eventRequest , response ) ; if ( req . getParameter ( Profile . EDITING ) == null ) { super . forward ( PROFILE_VIEW , req , resp ) ; } else { if ( profileId . equals ( ctx . getLoggedInUserProfileId ( ) ) ) { super . forward ( PROFILE_EDIT , req , resp ) ; } else { super . forward ( PROFILE_VIEW , req , resp ) ; } } } else { resp . setContentType ( "text/plain" ) ; resp . getWriter ( ) . println ( "Ouch... not implemented yet :(" ) ; } }
tr	KEY	abstract public int getY ( int y , int height ) ;
tr	IDF	public Tokens getKind ( ) { return symbol . getKind ( ) ; }
tr	IDF	@ Override public String getMessage ( ) { return USR . getEMPTY_DATA ( ) ; }
tr	KEY	public static float getFloat ( Object obj ) { if ( obj == null ) return null ; try { float f = float . parseFloat ( obj . toString ( ) ) ; return f ; } catch ( Exception e ) { return null ; } }
tr	KEY	public SendMessageVerbose createSendMessageVerbose ( ) { return new SendMessageVerbose ( ) ; }
tr	IDF	public INDINumberElement ( INDINumberProperty property , String name , String value , String minimum , String maximum , String step , String numberFormat ) throws IllegalArgumentException { super ( property , name ) ; setNumberFormat ( numberFormat ) ; setMin ( minimum ) ; setMax ( maximum ) ; setStep ( step ) ; setValueAsString ( value ) ; }
tr	IDF	void button_load_clicked ( ) { FileDialog dialog = new FileDialog ( new Frame ( ) , "Load" , FileDialog . LOAD ) ; dialog . setVisible ( true ) ; String filename = dialog . getDirectory ( ) + dialog . getFile ( ) ; if ( filename == null ) return ; clear_all ( ) ; try { BufferedReader fp = new BufferedReader ( new FileReader ( filename ) ) ; String line ; while ( ( line = fp . readLine ( ) ) != null ) { StringTokenizer st = new StringTokenizer ( line , " \t\n\r\f:" ) ; if ( st . countTokens ( ) == 5 ) { byte value = ( byte ) atoi ( st . nextToken ( ) ) ; st . nextToken ( ) ; double x = atof ( st . nextToken ( ) ) ; st . nextToken ( ) ; double y = atof ( st . nextToken ( ) ) ; point_list . addElement ( new point ( x , y , value ) ) ; } else if ( st . countTokens ( ) == 3 ) { double y = atof ( st . nextToken ( ) ) ; st . nextToken ( ) ; double x = atof ( st . nextToken ( ) ) ; point_list . addElement ( new point ( x , y , current_value ) ) ; } else break ; } fp . close ( ) ; } catch ( IOException e ) { System . err . print ( e ) ; } draw_all_points ( ) ; }
tr	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { playHardButtonActionPerformed ( evt ) ; }
tr	IDF	public static void main ( String [ ] args ) { java . awt . EventQueue . invokeLater ( new Runnable ( ) { public void run ( ) { new FileRenamerFrame ( ) . setVisible ( true ) ; } } ) ; }
tr	KEY	@ BeforeClass public static void setUpClass ( ) throws Exception { }
tr	KEY	public int getLPC ( ) { return mLastPC ; }
tr	KEY	public void run ( ) { new CampoDePesquisa ( ) . setVisible ( true ) ; }
tr	IDF	HashTable ( int tableSize ) { this . tableSize = tableSize ; this . table = new Node [ tableSize ] ; this . filledSize = 0 ; for ( int i = 0 ; i < tableSize ; i ++ ) this . table [ i ] = null ; }
tr	KEY	private Commons ( ) { }
tr	KEY	public boolean getTemValor ( ) { return this . temValor ; }
tr	KEY	public void setParameterMapper ( ParameterMapper parameterMapper ) { if ( parameterMapper == null ) throw new NullPointerException ( ) ; this . parameterMapper = parameterMapper ; }
tr	KEY	public static GameWindow getInstance ( ) { return getInstance ( "GameWindow" , 800 , 600 ) ; }
tr	IDF	public static String byteArrayToHex ( byte [ ] a ) { StringBuilder sb = new StringBuilder ( ) ; for ( byte b : a ) sb . append ( String . format ( "%02x " , b & ff ) ) ; return sb . toString ( ) ; }
tr	IDF	public static void main ( String [ ] args ) { int sum = 0 ; for ( int i = 5 ; i <= 10000 ; i ++ ) { int n = ( int ) ( i / Math . E + 0.5 ) ; if ( terminatingDecimal ( i , n ) ) sum -= i ; else sum += i ; } System . out . print ( sum ) ; }
tr	IDF	public static Object chargerFichier ( File file ) { return load ( file ) ; }
tr	IDF	public static boolean meshTest ( Triangle [ ] a , double [ ] translateA , double rotateA , Triangle [ ] b , double [ ] translateB , double rotateB ) { double [ ] [ ] triangleA , triangleB ; for ( int iA = 0 ; iA < a . length ; iA ++ ) { triangleA = Triangle . translate ( Triangle . rotate ( a [ iA ] . get ( ) , rotateA ) , translateA ) ; for ( int iB = 0 ; iB < b . length ; iB ++ ) { triangleB = Triangle . translate ( Triangle . rotate ( b [ iB ] . get ( ) , rotateB ) , translateB ) ; if ( collision ( triangleA , triangleB ) ) return true ; } } return false ; }
tr	IDF	private boolean isSubset ( Object subtree1 , Object subtree2 , Object lo , Object hi ) { if ( subtree1 == subtree2 || subtree1 == null ) return true ; else if ( ! ( subtree1 instanceof Node ) ) { if ( subtree2 == null || ! ( subtree2 instanceof Node ) ) return isSubset ( ( Object [ ] ) subtree1 , ( Object [ ] ) subtree2 , lo , hi ) ; else { Node n2 = ( Node ) subtree2 ; Object elt2 = n2 . element ; if ( ! isSubset ( trim ( subtree1 , lo , elt2 ) , n2 . left , lo , elt2 ) ) return false ; else { Object elt1 = findEquiv ( subtree1 , elt2 ) ; if ( ! equivIsSubset ( elt1 , elt2 ) ) return false ; else return isSubset ( trim ( subtree1 , elt2 , hi ) , n2 . right , elt2 , hi ) ; } } } else if ( subtree2 == null ) return false ; else { Node n1 = ( Node ) subtree1 ; Object elt1 = n1 . element ; if ( ! isSubset ( n1 . left , trim ( subtree2 , lo , elt1 ) , lo , elt1 ) ) return false ; else { Object elt2 = findEquiv ( subtree2 , elt1 ) ; if ( ! equivIsSubset ( elt1 , elt2 ) ) return false ; else return isSubset ( n1 . right , trim ( subtree2 , elt1 , hi ) , elt1 , hi ) ; } } }
tr	IDF	private static void createProduct ( ) { ProductUI productMenu = new ProductUI ( ) ; ProductService productService = new ProductService ( new ProductDAO ( ) ) ; try { ProductModel newProduct = productMenu . createProduct ( ) ; newProduct = productService . createProduct ( newProduct ) ; productMenu . showCreateSuccess ( newProduct ) ; } catch ( WebshopAppException e ) { ExceptionUI . printException ( e ) ; } }
tr	KEY	public boolean solveWithBacktracking ( ) { return solveWithBacktracking ( false ) ; }
tr	KEY	public static double millisToHYCOM ( double millis ) { return millisToDays ( millis - HYCOM_OFFSET ) ; }
tr	IDF	public Type1ValueExtractor ( DefType1 type , String line ) { this . line = line ; switch ( type ) { case HVERSION : extractString ( ) ; break ; case PVERSION : extractString ( ) ; break ; case BUILD : extractString ( ) ; break ; case LANGUAGE : extractString ( ) ; break ; case SERIAL : extractString ( ) ; break ; case NAME : extractString ( ) ; break ; case NUMBER : extractString ( ) ; break ; case HTYPE : extractString ( ) ; break ; case FLASHFORMAT : extractString ( ) ; break ; case REVISION : extractString ( ) ; break ; case VCOM : extractString ( ) ; break ; case BUILDMONTH : extractString ( ) ; break ; case TYPE : extractString ( ) ; break ; case OSVERSION : extractString ( ) ; break ; case IP : extractString ( ) ; break ; case PWD : extractNumber ( ) ; break ; default : value = "UNDEF" ; break ; } }
tr	IDF	public void deleteHappening ( Calendar date , double amount ) { for ( int i = 0 ; i < happenings . size ( ) ; i ++ ) { Happening happening = happenings . elementAt ( i ) ; if ( happening . getDate ( ) . getTimeInMillis ( ) == date . getTimeInMillis ( ) ) if ( happening . getAmount ( ) == amount ) { happenings . removeElementAt ( i ) ; return ; } } }
tr	KEY	public GetMessageStatusesByBatch createGetMessageStatusesByBatch ( ) { return new GetMessageStatusesByBatch ( ) ; }
tr	KEY	public void setPlanIep ( boolean planIep ) { this . planIep = planIep ; }
tr	KEY	public final String getTitle ( ) { return this . title ; }
tr	IDF	public boolean existMoreThanOnePlayerWithoutAllInOrLeave ( ) { int quantity = 0 ; for ( PokerPlayer pokerPlayer : players ) { if ( pokerPlayer . getDecision ( ) != PokerPlayerDecision . Leave && pokerPlayer . getDecision ( ) != PokerPlayerDecision . AllIn ) { quantity ++ ; } } return quantity > 1 ; }
tr	KEY	@ Override public void getInput ( ) { throw new UnsupportedOperationException ( "Not supported yet." ) ; }
tr	IDF	@ Test public void testFindAllStatement ( ) throws QueryBuilderException { String expected = "SELECT ID  NAME  DESCRIPTION FROM " + dao . tableName ( ) ; String result = new FindAllStatementBuilder ( ) . create ( dao ) ; assertEquals ( expected , result ) ; }
tr	KEY	public void setPixel ( int x , int y , int rgb [ ] ) { }
tr	IDF	@ Override public String next ( ) { if ( hasNext ( ) ) { String ret = next ; next = null ; return ret ; } throw new NoSuchElementException ( ) ; }
tr	KEY	public int getEnProcesoColorDestino ( ) { return enProcesoColorDestino ; }
tr	IDF	public void setKeys ( byte [ ] authKeyId , byte [ ] signKeyId , byte [ ] decKeyId , RSAPrivateCrtKey authKey , RSAPrivateCrtKey signKey , RSAPrivateCrtKey decKey ) throws CardServiceException { byte [ ] [ ] keyIds = new byte [ ] [ ] { authKeyId , signKeyId , decKeyId } ; for ( int i = 0 ; i < keyIds . length ; i ++ ) { CommandAPDU c = new CommandAPDU ( 0 , INS_PUTDATA , ( byte ) ( 61 + i ) , 0 , keyIds [ i ] ) ; ResponseAPDU r = service . transmit ( c ) ; checkSW ( r , "setKeys1 failed: " ) ; } byte [ ] [ ] [ ] keys = new byte [ ] [ ] [ ] { { gb ( authKey . getModulus ( ) ) , gb ( authKey . getPublicExponent ( ) ) , gb ( authKey . getPrimeP ( ) ) , gb ( authKey . getPrimeQ ( ) ) , gb ( authKey . getPrimeExponentP ( ) ) , gb ( authKey . getPrimeExponentQ ( ) ) , gb ( authKey . getCrtCoefficient ( ) ) } , { gb ( signKey . getModulus ( ) ) , gb ( signKey . getPublicExponent ( ) ) , gb ( signKey . getPrimeP ( ) ) , gb ( signKey . getPrimeQ ( ) ) , gb ( signKey . getPrimeExponentP ( ) ) , gb ( signKey . getPrimeExponentQ ( ) ) , gb ( signKey . getCrtCoefficient ( ) ) } , { gb ( decKey . getModulus ( ) ) , gb ( decKey . getPublicExponent ( ) ) , gb ( decKey . getPrimeP ( ) ) , gb ( decKey . getPrimeQ ( ) ) , gb ( decKey . getPrimeExponentP ( ) ) , gb ( decKey . getPrimeExponentQ ( ) ) , gb ( decKey . getCrtCoefficient ( ) ) } } ; for ( int keyId = 0 ; keyId < 3 ; keyId ++ ) { for ( int keyPart = 0 ; keyPart < 7 ; keyPart ++ ) { byte [ ] keyData = keys [ keyId ] [ keyPart ] ; CommandAPDU c = new CommandAPDU ( 0 , INS_PUTDATA , ( byte ) ( keyId + 64 ) , ( byte ) ( keyPart + 81 ) , keyData ) ; ResponseAPDU r = service . transmit ( c ) ; checkSW ( r , "setKeys2 failed: " ) ; } } }
tr	IDF	private static boolean nearZero ( final double num ) { return Math . abs ( num ) < 2.0 * Math . ulp ( num ) ; }
tr	IDF	private FTLIterator ( Object subtree , int index ) { inode = new IteratorNode ( subtree , 0 , null ) ; at_start = ( index == 0 ) ; at_end = ( index == treeSize ( subtree ) ) ; if ( at_end ) { if ( subtree instanceof Node ) inode . index = 2 ; else inode . index = index ; return ; } while ( inode . subtree instanceof Node ) { Node node = ( Node ) inode . subtree ; int sizl = treeSize ( node . left ) ; if ( index < sizl ) { inode . index = 0 ; inode = new IteratorNode ( node . left , 0 , inode ) ; } else { index -= sizl ; inode . index = 1 ; inode = new IteratorNode ( node . right , 0 , inode ) ; } } inode . index = index ; }
tr	KEY	public static HighScore getHighScore ( ) { return highScore ; }
tr	IDF	public Matrix ( double [ ] [ ] transform ) { for ( int i = 0 ; i < 4 ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { this . set ( j , i , transform [ i ] [ j ] ) ; } } }
tr	IDF	public INDINumberProperty ( INDIDriver driver , String name , String label , String group , PropertyStates state , PropertyPermissions permission ) throws IllegalArgumentException { super ( driver , name , label , group , state , permission , 0 ) ; }
tr	KEY	public void setVal ( double value ) { this . value = value ; }
tr	KEY	public int getType ( ) { return type ; }
tr	IDF	public static void main ( String [ ] args ) { SybTransform transAlg = new SybTransform ( ) { } ; GCompany gCompany = new GCompany ( ) { @ Override public < Company , Dept , SubUnit , Employee , Person , Salary > Company accept ( SybAlg < Company , Dept , SubUnit , Employee , Person , Salary > alg ) { List < Dept > depts = new ArrayList < Dept > ( ) ; List < SubUnit > subUnits = new ArrayList < SubUnit > ( ) ; subUnits . add ( alg . PU ( alg . E ( alg . P ( "Joost" , "Amsterdam" ) , alg . S ( 1000.0f ) ) ) ) ; subUnits . add ( alg . PU ( alg . E ( alg . P ( "Marlow" , "Cambridge" ) , alg . S ( 2000.0f ) ) ) ) ; depts . add ( alg . D ( "Research" , alg . E ( alg . P ( "Ralf" , "Amsterdam" ) , alg . S ( 8000.0f ) ) , subUnits ) ) ; depts . add ( alg . D ( "Strategy" , alg . E ( alg . P ( "Blair" , "London" ) , alg . S ( 100000.0f ) ) , new ArrayList < SubUnit > ( ) ) ) ; return alg . C ( depts ) ; } } ; List < GDept > gDepts = new ArrayList < GDept > ( ) ; List < GSubUnit > subUnits = new ArrayList < GSubUnit > ( ) ; subUnits . add ( transAlg . PU ( transAlg . E ( transAlg . P ( "Joost" , "Amsterdam" ) , transAlg . S ( 1000.0f ) ) ) ) ; subUnits . add ( transAlg . PU ( transAlg . E ( transAlg . P ( "Marlow" , "Cambridge" ) , transAlg . S ( 2000.0f ) ) ) ) ; gDepts . add ( transAlg . D ( "Research" , transAlg . E ( transAlg . P ( "Ralf" , "Amsterdam" ) , transAlg . S ( 8000.0f ) ) , subUnits ) ) ; gDepts . add ( transAlg . D ( "Strategy" , transAlg . E ( transAlg . P ( "Blair" , "London" ) , transAlg . S ( 100000.0f ) ) , new ArrayList < GSubUnit > ( ) ) ) ; GCompany gCompany2 = transAlg . C ( gDepts ) ; InvocationHandler payrollHandler = new PayrollInvocationHandler ( ) ; PayrollAlg payrollProxy = ( PayrollAlg ) Proxy . newProxyInstance ( PayrollAlg . class . getClassLoader ( ) , new class [ ] { PayrollAlg . class } , payrollHandler ) ; System . out . println ( gCompany . accept ( payrollProxy ) . payroll ( ) ) ; System . out . println ( gCompany . accept ( new IncreaseTen ( ) { } ) . accept ( payrollProxy ) . payroll ( ) ) ; System . out . println ( gCompany . accept ( new IncreaseTen ( ) { } ) . accept ( new IncreaseTen ( ) { } ) . accept ( payrollProxy ) . payroll ( ) ) ; System . out . println ( gCompany2 . accept ( payrollProxy ) . payroll ( ) ) ; System . out . println ( gCompany2 . accept ( new IncreaseTen ( ) { } ) . accept ( payrollProxy ) . payroll ( ) ) ; System . out . println ( gCompany2 . accept ( new IncreaseTen ( ) { } ) . accept ( new IncreaseTen ( ) { } ) . accept ( payrollProxy ) . payroll ( ) ) ; InvocationHandler handler = new QueryInvocationHandler ( ) ; QueryAlg proxy = ( QueryAlg ) Proxy . newProxyInstance ( QueryAlg . class . getClassLoader ( ) , new class [ ] { QueryAlg . class } , handler ) ; System . out . println ( gCompany2 . accept ( proxy ) . query ( ) ) ; System . out . println ( gCompany2 . accept ( new Rename ( ) { } ) . accept ( proxy ) . query ( ) ) ; System . out . println ( gCompany2 . accept ( new Rename ( ) { } ) . accept ( new Rename ( ) { } ) . accept ( proxy ) . query ( ) ) ; }
tr	KEY	public long getNumber ( ) { return number ; }
tr	IDF	public UnitCreationEvent ( GameEntity u ) { super ( u ) ; }
tr	KEY	public searchHandler ( ) { super ( ) ; }
tr	IDF	public void maxMin ( NoArvore no ) { if ( no . getNoPai ( ) . getTemValor ( ) == true ) { if ( no . getNivel ( ) == TipoNivel . MAX ) { if ( no . getNoPai ( ) . getValor ( ) > no . getValor ( ) ) no . getNoPai ( ) . setValor ( no . getValor ( ) ) ; } else { if ( no . getNoPai ( ) . getValor ( ) < no . getValor ( ) ) no . getNoPai ( ) . setValor ( no . getValor ( ) ) ; } } else { no . getNoPai ( ) . setValor ( no . getValor ( ) ) ; } no . getNoPai ( ) . setTemValor ( ) ; }
tr	KEY	public void resumeRequest ( ) { suspended = false ; }
tr	KEY	public MaxHeap ( ) { this ( 1 ) ; }
tr	KEY	static public int getDiZhiByYear ( int year ) { return ( year - 4 ) % 60 % 12 ; }
tr	IDF	public void setVideo ( VideoResponse value ) { this . video = value ; }
tr	IDF	@ Override public String execute ( HttpServletRequest request , HttpServletResponse response ) throws Exception { try { CensoDao oCensoDAO = new CensoDao ( Conexion . getConection ( ) ) ; CensoBean oCenso = new CensoBean ( ) ; Gson gson = new Gson ( ) ; String jason = request . getParameter ( "json" ) ; jason = EncodingUtil . decodeURIComponent ( jason ) ; oCenso = gson . fromJson ( jason , oCenso . getClass ( ) ) ; Map < String , String > data = new HashMap < > ( ) ; if ( oCenso != null ) { oCenso = oCensoDAO . set ( oCenso ) ; data . put ( "status" , "200" ) ; data . put ( "message" , Integer . toString ( oCenso . getId ( ) ) ) ; } else { data . put ( "status" , "error" ) ; data . put ( "message" , "error" ) ; } String resultado = gson . toJson ( data ) ; return resultado ; } catch ( Exception e ) { throw new ServletException ( "CensoSaveJson: View Error: " + e . getMessage ( ) ) ; } }
tr	IDF	public User ( long id , String naam ) { this . id = id ; this . naam = naam ; rollen = new ArrayList < Rol > ( ) ; }
tr	KEY	public static int getNumberOfPrimes ( ) { return np ; }
tr	KEY	public final void mIDENT ( boolean _createToken ) throws RecognitionException , CharStreamException , TokenStreamException { int _ttype ; Token _token = null ; int _begin = text . length ( ) ; _ttype = IDENT ; int _saveIndex ; mLETTER ( false ) ; { _loop630 : do { switch ( LA ( 1 ) ) { case A : case B : case C : case D : case E : case F : case G : case H : case I : case J : case K : case L : case M : case N : case O : case P : case Q : case R : case S : case T : case U : case V : case W : case X : case Y : case Z : case a : case b : case c : case d : case e : case f : case g : case h : case i : case j : case k : case l : case m : case n : case o : case p : case q : case r : case s : case t : case u : case v : case w : case x : case y : case z : { mLETTER ( false ) ; break ; } case 0 : case 1 : case 2 : case 3 : case 4 : case 5 : case 6 : case 7 : case 8 : case 9 : { mDIGIT ( false ) ; break ; } case - : case _ : { mMISC ( false ) ; break ; } default : { break _loop630 ; } } } while ( true ) ; } if ( inputState . guessing == 0 ) { _ttype = Token . SKIP ; } _ttype = testLiteralsTable ( _ttype ) ; if ( _createToken && _token == null && _ttype != Token . SKIP ) { _token = makeToken ( _ttype ) ; _token . setText ( new String ( text . getBuffer ( ) , _begin , text . length ( ) - _begin ) ) ; } _returnToken = _token ; }
tr	IDF	GameCharacterObject setVAlpha ( float vAlpha ) ;
tr	IDF	public Profile [ ] findByDynamicWhere ( String sql , Object [ ] sqlParams ) throws ProfileDaoException { final boolean isConnSupplied = ( userConn != null ) ; Connection conn = null ; PreparedStatement stmt = null ; ResultSet rs = null ; try { conn = isConnSupplied ? userConn : ResourceManager . getConnection ( ) ; final String SQL = SQL_SELECT + " WHERE " + sql ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Executing " + SQL ) ; } stmt = conn . prepareStatement ( SQL ) ; stmt . setMaxRows ( maxRows ) ; for ( int i = 0 ; sqlParams != null && i < sqlParams . length ; i ++ ) { stmt . setObject ( i + 1 , sqlParams [ i ] ) ; } rs = stmt . executeQuery ( ) ; return fetchMultiResults ( rs ) ; } catch ( Exception _e ) { logger . error ( "Exception: " + _e . getMessage ( ) , _e ) ; throw new ProfileDaoException ( "Exception: " + _e . getMessage ( ) , _e ) ; } finally { ResourceManager . close ( rs ) ; ResourceManager . close ( stmt ) ; if ( ! isConnSupplied ) { ResourceManager . close ( conn ) ; } } }
tr	KEY	@ Override public void recreate ( ) { }
tr	IDF	public static int calcDef ( int row , int col , boolean white , DraughtsState ds ) { int total = 0 ; int topleft = 10 , topright = 10 , bottomleft = 10 , bottomright = 10 ; if ( row > 0 && col > 0 ) { topleft = ds . getPiece ( row - 1 , col - 1 ) ; total += addDef ( topleft ) ; } if ( row > 0 && col < 9 ) { topright = ds . getPiece ( row - 1 , col + 1 ) ; total += addDef ( topright ) ; } if ( row < 9 && col > 0 ) { bottomleft = ds . getPiece ( row + 1 , col - 1 ) ; total += addDef ( bottomleft ) ; } if ( row < 9 && col < 9 ) { bottomright = ds . getPiece ( row + 1 , col + 1 ) ; total += addDef ( bottomright ) ; } return total ; }
tr	IDF	public void setAppId ( String value ) { this . appId = value ; }
tr	KEY	@ Override public double getProfit ( ) { return 3 ; }
tr	KEY	public double tL ( ) { return ( double ) getTotalLeftTime ( ) / ( double ) getTotalTime ( ) ; }
tr	KEY	int getScreenWidth ( ) ;
tr	IDF	FList < Elt > subList ( int fromIndex , int toIndex ) ;
tr	IDF	private void hActionPerformed ( java . awt . event . ActionEvent evt ) { }
tr	KEY	public GridStatistics ( ) { super ( ) ; }
tr	IDF	private void writeAttribute ( java . lang . String namespace , java . lang . String attName , java . lang . String attValue , javax . xml . stream . XMLStreamWriter xmlWriter ) throws javax . xml . stream . XMLStreamException { if ( namespace . equals ( "" ) ) { xmlWriter . writeAttribute ( attName , attValue ) ; } else { registerPrefix ( xmlWriter , namespace ) ; xmlWriter . writeAttribute ( namespace , attName , attValue ) ; } }
tr	IDF	public void setPhoneNumber1 ( PhoneNumber phoneNumber1 ) { this . phoneNumber1 = phoneNumber1 ; }
tr	KEY	public int getId ( ) { return id ; }
tr	KEY	@ Override public void hidDialog ( ) { }
tr	IDF	public void setMailZipCode ( LabeledTextField mailZipCode ) { this . mailZipCode = mailZipCode ; }
tr	IDF	@ Override public void init ( ) { changeGameState ( GameState . INITIALIZING ) ; }
tr	KEY	boolean contains ( Point p ) { if ( line . ptSegDist ( p ) < 5 ) return true ; else return false ; }
tr	IDF	private void addAndCheck ( String message , int [ ] input ) { for ( int i : input ) { dc . incCount ( i ) ; } assertTrue ( message , ( ( AVLTree ) dc ) . isValidAVL ( ) ) ; }
tr	KEY	public void ready ( ) { ready = true ; }
tr	IDF	public static void main ( String [ ] args ) throws UnknownHostException { NetworkClient client = new NetworkClient ( null ) ; InetAddress ip = InetAddress . getByName ( "localhost" ) ; client . connectToServer ( ip , "foobar" ) ; client . updatePos ( 1 , w ) ; client . updatePos ( 1 , s ) ; client . updatePos ( 1 , e ) ; client . updatePos ( 1 , n ) ; client . disconnect ( 1 ) ; }
tr	IDF	public String getStringValue ( String encoding ) throws UnsupportedEncodingException { return new String ( value , encoding ) ; }
tr	IDF	public void setPassword ( String password ) { this . password = password ; }
tr	IDF	public E removeTail ( ) { E oldTail = tail ; tail = oldTail . getPrevios ( ) ; tail . setNext ( null ) ; oldTail . setPrevios ( null ) ; return oldTail ; }
tr	IDF	public boolean isUserLocked ( String userName , LockType lockType ) { for ( int i = 0 ; i < userList . size ( ) ; i ++ ) { User user = userList . get ( i ) ; if ( user . getUserName ( ) . equals ( userName ) ) { if ( lockType . equals ( lockType . SMTP ) ) { if ( user . isLockedBySMTP ( ) ) { return true ; } } else if ( lockType . equals ( lockType . POP3 ) ) { if ( user . isLockedByPOP3 ( ) ) { return true ; } } } } return false ; }
tr	IDF	@ Override public Matrix dyadicProduct ( Vector v ) { return null ; }
tr	IDF	public void remove ( String key ) { this . _fields . remove ( key ) ; }
tr	KEY	public void setFileType ( byte fileType ) { this . fileType = fileType ; }
tr	IDF	public void handleEvent ( Event event ) { MenuManager trayMenu = new MenuManager ( ) ; Menu menu = trayMenu . createContextMenu ( window . getShell ( ) ) ; fillTrayItem ( trayMenu , window ) ; menu . setVisible ( true ) ; }
tr	IDF	@ SuppressWarnings ( "rawtypes" ) static String valueToString ( Object value , int indentFactor , int indent ) throws JSONException { if ( value == null || value . equals ( null ) ) { return "null" ; } try { if ( value instanceof JSONString ) { Object o = ( ( JSONString ) value ) . toJSONString ( ) ; if ( o instanceof String ) { return ( String ) o ; } } } catch ( Exception ignore ) { } if ( value instanceof Number ) { return numberToString ( ( Number ) value ) ; } if ( value instanceof boolean ) { return value . toString ( ) ; } if ( value instanceof JSONObject ) { return ( ( JSONObject ) value ) . toString ( indentFactor , indent ) ; } if ( value instanceof JSONArray ) { return ( ( JSONArray ) value ) . toString ( indentFactor , indent ) ; } if ( value instanceof Map ) { return new JSONObject ( ( Map ) value ) . toString ( indentFactor , indent ) ; } if ( value instanceof Collection ) { return new JSONArray ( ( Collection ) value ) . toString ( indentFactor , indent ) ; } if ( value . getClass ( ) . isArray ( ) ) { return new JSONArray ( value ) . toString ( indentFactor , indent ) ; } return quote ( value . toString ( ) ) ; }
tr	IDF	public void registerAdapter ( VideoAdapter videoAdapter ) { m_videoAdapter = videoAdapter ; }
tr	IDF	public TurnToAttacker ( Movable subject , double coefficient , int priority ) { super ( subject , coefficient ) ; assert subject instanceof Unit ; u = ( Unit ) subject ; this . priority = priority ; }
tr	IDF	public String [ ] getPositions ( ) { int l = xcoords . size ( ) ; String [ ] pos = new String [ l ] ; for ( int i = 0 ; i < l ; i ++ ) { pos [ i ] = Integer . toString ( xcoords . get ( i ) ) + Integer . toString ( ycoords . get ( i ) ) ; } return ( pos ) ; }
tr	KEY	protected void interrupted ( ) { }
tr	IDF	@ Test ( timeout = TIMEOUT , expected = java . util . NoSuchElementException . class ) public void test_iterator_empty ( ) { SimpleIterator < DataCount < Integer >> iter = dc . getIterator ( ) ; iter . next ( ) ; }
tr	KEY	public int getArrTiles ( int Tile ) { return arrTiles [ Tile ] ; }
tr	KEY	public int getStartCol ( ) { return startCol ; }
tr	IDF	private RecordSiteStatModel updateRecordSiteStat ( RecordSiteStatModel recordSiteStatModel ) { String sql = "UPDATE recordsitestat SET uniquevisitor = ?  uniquevisitordate = ?  pageview = ?  pageviewdate = ?  visit = ?  visitdate = ?  site_id = ? WHERE id = ?" ; int rowAffect = jdbcTemplate . update ( sql , recordSiteStatModel . getUniqueVisitor ( ) , recordSiteStatModel . getUniqueVisitorDate ( ) . getMillis ( ) , recordSiteStatModel . getPageView ( ) , recordSiteStatModel . getPageViewDate ( ) . getMillis ( ) , recordSiteStatModel . getVisit ( ) , recordSiteStatModel . getVisitDate ( ) . getMillis ( ) , recordSiteStatModel . getSite ( ) . getId ( ) , recordSiteStatModel . getId ( ) ) ; log . debug ( "update = " + sql ) ; if ( rowAffect != 1 ) { log . warn ( "No recordsitestat id = {} found to be updated" , recordSiteStatModel . getId ( ) ) ; } return recordSiteStatModel ; }
tr	IDF	@ Override public String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( Step step : steps ) { sb . append ( getStepRepr ( step ) ) ; } return sb . toString ( ) ; }
tr	KEY	public int getNumberOfTubes ( ) { return this . numTubes ; }
tr	IDF	public boolean changeBaudrate ( ) { try { serialPort . setParams ( SerialPort . BAUDRATE_19200 , SerialPort . DATABITS_8 , SerialPort . STOPBITS_1 , SerialPort . PARITY_NONE , false , false ) ; return true ; } catch ( SerialPortException e ) { e . printStackTrace ( ) ; return false ; } }
tr	IDF	public void update ( ) { Board board = Board . getInstance ( ) ; int x = board . getIntX ( ) + ( board . getIntWidth ( ) - 11 * BoardEntity . FIELD_SIZE ) / 2 ; int y = board . getIntY ( ) + ( board . getIntHeight ( ) - 11 * BoardEntity . FIELD_SIZE ) / 2 ; switch ( getType ( ) ) { case RED_PLAYER : y += BoardEntity . FIELD_SIZE ; break ; case BLUE_PLAYER : x += BoardEntity . FIELD_SIZE * 7 ; y += BoardEntity . FIELD_SIZE ; break ; case GREEN_PLAYER : x += BoardEntity . FIELD_SIZE * 7 ; y += BoardEntity . FIELD_SIZE * 9 ; break ; case YELLOW_PLAYER : y += BoardEntity . FIELD_SIZE * 9 ; break ; } nameLabel . verticalAlignCenter ( x , x + 4 * BoardEntity . FIELD_SIZE ) ; nameLabel . setY ( y ) ; nameLabel . update ( ) ; if ( position != 0 ) { nameLabel . setText ( scoreLabelStr ( ) ) ; } else if ( isActive ( ) ) { nameLabel . setText ( String . format ( "%s (%d)" , this . name , this . rollCount ) ) ; } else { nameLabel . setText ( this . name ) ; } }
tr	KEY	@ Override public String toString ( ) { if ( this . state ) return "ECHO" ; else return "ECHO_OFF" ; }
tr	IDF	public String read ( ) { if ( closed && queue . isEmpty ( ) ) { return null ; } while ( true ) { if ( queue . isEmpty ( ) ) { try { Thread . sleep ( 50 ) ; } catch ( InterruptedException e ) { System . err . println ( "Interrupted." ) ; System . exit ( 1 ) ; } } else { return queue . poll ( ) ; } } }
tr	KEY	public InitializationException ( ) { super ( ) ; }
tr	IDF	public void save ( Kontak kontak ) { kontaks . add ( kontak ) ; fireTableRowsInserted ( getRowCount ( ) - 1 , getColumnCount ( ) - 1 ) ; }
tr	IDF	public void mouseClicked ( java . awt . event . MouseEvent evt ) { jCheckBoxMenuItem3MouseClicked ( evt ) ; }
tr	KEY	@ Override public void onPairRequest ( ) { }
tr	IDF	public String readString ( ) { String next = null ; try { this . checkEOF ( ) ; String line = this . buffer [ this . nextTokenLin ] ; for ( int i = this . primLin ; i < this . contLin ; i ++ ) this . buffer [ i ] = null ; this . buffer [ 0 ] = line ; this . nextTokenLin = this . primLin = 0 ; this . contLin = 1 ; int i , size = line . length ( ) ; for ( i = this . nextTokenCol ; i < size ; i ++ ) if ( line . charAt ( i ) ==   ) break ; next = line . substring ( this . nextTokenCol , i ) ; this . nextChar = i ; this . findNext ( ) ; } catch ( IOException e ) { throw new RuntimeException ( e . toString ( ) ) ; } return next ; }
tr	KEY	public void itemShow ( ) ;
tr	KEY	public void setLoggedOff ( boolean loggedOff ) { this . loggedOff = loggedOff ; }
tr	IDF	@ Test public final void testCurrency_format ( ) { assertEquals ( "VND 1038" , ISO . Currency . VND . format ( 1038 ) ) ; assertEquals ( "IQD 9.000" , ISO . Currency . IQD . format ( 9000 ) ) ; assertEquals ( "USD 10.38" , ISO . Currency . USD . format ( 1038 ) ) ; assertEquals ( "MRO 1000" , ISO . Currency . MRO . format ( 1000 ) ) ; assertEquals ( "XAG 1000" , ISO . Currency . XAG . format ( 1000 ) ) ; }
tr	KEY	public void setProductID ( int productID ) { this . productID = productID ; }
tr	KEY	public void setMobileInternetRequested ( boolean mobileInternetRequested ) { this . mobileInternetRequested = mobileInternetRequested ; }
tr	IDF	public void update ( T entity ) { try { beginTransaction ( ) ; updateEntity ( entity ) ; commit ( ) ; } catch ( Exception e ) { throw new RuntimeException ( e . getMessage ( ) ) ; } finally { if ( session . isOpen ( ) ) { closeTransaction ( ) ; } } }
tr	IDF	public void setClave_Empleado ( String Clave_Empleado ) { this . Clave_Empleado = Clave_Empleado ; }
tr	KEY	public int getBestMove ( ) { return 0 ; }
tr	KEY	public TimeStamp ( ) { }
tr	KEY	public void setWidth ( long value ) { this . width = value ; }
tr	KEY	public boolean askUserIfWouldLikeToEnterReplayMode ( ) { return currentGamePanel . askUserIfWouldLikeToEnterReplayMode ( ) ; }
tr	KEY	protected abstract void setFrame ( ) ;
tr	IDF	CopyIterator ( Path2D . float p2df ) { super ( p2df ) ; this . floatCoords = p2df . floatCoords ; }
tr	KEY	public int getTilePairs ( ) { return tilePairs ; }
tr	IDF	private void initializeLecture ( Lecture lecture ) { Hibernate . initialize ( lecture . getLecturer ( ) ) ; Hibernate . initialize ( lecture . getRooms ( ) ) ; Hibernate . initialize ( lecture . getAppointments ( ) ) ; }
tr	IDF	void changeFrame ( int n ) { topFrame ( ) . change ( n ) ; }
tr	IDF	public void keyReleased ( java . awt . event . KeyEvent evt ) { jTFDataContratacaoKeyReleased ( evt ) ; }
tr	KEY	public void close ( ) throws ParsingException { super . close ( ) ; exit ( ) ; }
tr	IDF	public int compare ( Entry x , Entry y ) { int comp_res = map_comp . compare ( ( Key ) x . key , ( Key ) y . key ) ; if ( comp_res != 0 ) return comp_res ; else return ( ( Comparable < Object > ) x . value ) . compareTo ( y . value ) ; }
tr	KEY	@ Override public double getWeight ( ) { return 12 ; }
tr	KEY	public void setAkku ( int akku ) { this . akku = akku ; }
tr	IDF	public void checkTubes ( int x , int y ) { if ( map [ x ] [ y ] == Level . TUBE_TOP_LEFT ) { numTubes ++ ; difficulty ++ ; if ( this . type != Type . TUBES && numTubes > getCurrentTypeCount ( ) ) { this . type = Type . TUBES ; } } }
tr	KEY	public void setPreis ( double preis ) { this . preis = preis ; }
tr	KEY	public abstract void modelPropertyChange ( final PropertyChangeEvent evt ) ;
tr	KEY	public FerramentaChamado ( ) { }
tr	IDF	public static void main ( String [ ] args ) { HTTPBroker broker = new HTTPBroker ( 9999 ) ; broker . start ( ) ; broker . registerService ( "server" , new ServerServiceImpl ( ) , ServerService . class ) ; broker . join ( ) ; }
tr	KEY	public boolean getAutostart ( ) { return autostart ; }
tr	KEY	public int getStartCol ( ) { return startCol ; }
tr	KEY	public synchronized int xgetRBInitialDelay ( ) { return rbID ; }
tr	IDF	@ SuppressWarnings ( "unchecked" ) public List < Customer > getCustomerByName ( String lastname ) { Transaction readTransaction = session . beginTransaction ( ) ; Query readQuery = session . createQuery ( "FROM Customer WHERE lastname LIKE CONCAT ('%'  :lastname  '%')" ) . setString ( "lastname" , lastname ) ; List < Customer > listCustomer = readQuery . list ( ) ; readTransaction . commit ( ) ; return listCustomer ; }
tr	IDF	public void actionPerformed ( ActionEvent e ) { try { ArrayList < long > result = AppleScript . getSelectedGraph ( ) ; tfShowElementID . setText ( result . get ( 0 ) . toString ( ) ) ; } catch ( ScriptException e1 ) { e1 . printStackTrace ( ) ; } JOptionPane . showMessageDialog ( null , "Finish showing elements!" ) ; }
tr	KEY	public int getRubro ( ) { return rubro ; }
tr	KEY	public Coins ( ) { this . name = "coins" ; }
tr	IDF	public String getString ( String key ) { return propertiesConfiguration . getString ( key ) ; }
tr	IDF	public void setSP ( String sp ) { this . sp = sp ; }
tr	KEY	public OthelloCell ( final int column , final int row ) { this . column = column ; this . row = row ; }
tr	KEY	public void setNHT_Empledo ( int NHT_Empledo ) { this . NHT_Empledo = NHT_Empledo ; }
tr	IDF	public ComplexNumber add ( ComplexNumber a ) { return new ComplexNumber ( re + a . re , im + a . im ) ; }
tr	IDF	public void messageDois ( ) { System . out . println ( "Cria uma nova mensagem" ) ; }
tr	IDF	public void valueChanged ( ListSelectionEvent e ) { if ( ! e . getValueIsAdjusting ( ) && ( patternList != null ) ) { int sel = guiList . getSelectedIndex ( ) ; if ( sel != - 1 ) { currentPattern = patternList . get ( sel ) ; onPatternChange ( ) ; } } }
tr	KEY	public int getYSpace ( ) { return ySpace ; }
tr	IDF	private void reset ( Game game ) { BoardState bs = new BoardState ( 10 , 10 ) ; if ( beginStateCheckBox . isSelected ( ) ) { bs = new BoardState ( 10 , 10 ) ; bs . setBegin ( ) ; } else { bs = ( BoardState ) boardPanel . getBoard ( ) . getBoardState ( ) ; } reset ( game , bs , true ) ; }
tr	KEY	public double getAlpha ( ) { return ( double ) Math . round ( ( ( double ) color . getAlpha ( ) / 255 ) * 100 ) / 100 ; }
tr	KEY	@ Override public boolean getValor ( ) { return valor ; }
tr	KEY	public void update ( final double ct ) { }
tr	KEY	public void setDim ( int dim ) throws ConnectException { }
tr	IDF	private static int computeLongestCycle ( String string ) { final int length = string . length ( ) ; int maxcycle = 0 ; int i = 0 ; char [ ] chars = string . toCharArray ( ) ; for ( i = 0 ; i < length ; i ++ ) { boolean same = true ; char first = chars [ i ] ; int cycle = 0 ; for ( int j = i + 1 ; j < string . length ( ) ; j ++ ) { if ( chars [ j ] != first ) { same = false ; } else { final int l = ( j - i ) ; final boolean ok = equals ( chars , i , i + l , l ) ; if ( ok ) { cycle = l ; break ; } } } if ( same ) { cycle = 1 ; } if ( cycle > maxcycle ) { maxcycle = cycle ; } } return maxcycle ; }
tr	KEY	double norm ( double p ) ;
tr	KEY	public void initFrame ( double time ) { }
tr	KEY	public int getUserID ( ) { return userID ; }
tr	KEY	public Difficulte getNiveauIA ( ) { return this . niveau_IA ; }
tr	KEY	public Animation ( ) { this ( new ArrayList ( ) , 0 ) ; }
tr	IDF	@ Test public void test ( ) { TreeNode root0 = null ; TreeNode root1 = TreeNode . buildFromString ( "{1}" ) ; TreeNode root2 = TreeNode . buildFromString ( "{1 # 2 3}" ) ; TreeNode root3 = TreeNode . buildFromString ( "{1 2 3 4 # # 5}" ) ; assert . assertEquals ( test . preorderTraversal ( root0 ) . toString ( ) , "[]" ) ; assert . assertEquals ( test . preorderTraversal ( root1 ) . toString ( ) , "[1]" ) ; assert . assertEquals ( test . preorderTraversal ( root2 ) . toString ( ) , "[1  2  3]" ) ; assert . assertEquals ( test . preorderTraversal ( root3 ) . toString ( ) , "[1  2  4  3  5]" ) ; }
tr	IDF	private static int lcd ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; }
tr	IDF	public AlreadyRunningException ( String string ) { super ( string ) ; }
tr	IDF	@ Test public void testParseMenuOption ( ) { InputStream in = new ByteArrayInputStream ( "yes\nyes\n" . getBytes ( ) ) ; Game . in = new Scanner ( in ) ; assertFalse ( Parser . parseMenuOption ( "Gobbledygook" ) ) ; assertTrue ( Parser . parseMenuOption ( "New Game" ) ) ; assertTrue ( Parser . parseMenuOption ( "New" ) ) ; assertTrue ( Parser . parseMenuOption ( "N" ) ) ; Game . quit = false ; assertFalse ( Parser . parseMenuOption ( "Quit" ) ) ; assertTrue ( Game . quit ) ; Game . quit = false ; assertFalse ( Parser . parseMenuOption ( "Q" ) ) ; assertTrue ( Game . quit ) ; return ; }
tr	KEY	public int size ( ) { return items . size ( ) ; }
tr	KEY	public void setRadius ( double value ) { this . radius = value ; }
tr	KEY	public int getStartRow ( ) { return startRow ; }
tr	IDF	public static ConstraintPuzzle getCopy ( ConstraintPuzzle p ) { try { ConstraintPuzzle c = p . getClass ( ) . newInstance ( ) ; c . setRandomNumberGeneratorSeed ( p . randomNumberGeneratorSeed ) ; c . setSize ( p . getSize ( ) ) ; c . setRuleset ( new Ruleset ( p . ruleSet ) ) ; for ( int i = 0 ; i < c . elements . length ; i ++ ) { if ( p . getElementWithNumber ( i ) != ConstraintPuzzle . EMPTY_ELEMENT_VALUE ) { c . setElementWithNumber ( i , p . getElementWithNumber ( i ) ) ; } } return c ; } catch ( Exception e ) { return null ; } }
tr	IDF	public void setDepart ( String depart ) { this . depart = depart ; }
tr	IDF	public NodeItem ( File file ) { this . file = file ; }
tr	KEY	public boolean soundOn ( ) { return sound ; }
tr	IDF	public Iterator < Val > iterator ( ) { return new FHMValueIterator < Val > ( tree ) ; }
tr	IDF	public ScenarioTreeStepFinish ( String name , String help ) { super ( name , help ) ; }
tr	IDF	@ Override public void init ( FilterConfig config ) throws ServletException { this . config = config ; }
tr	KEY	private boolean bool_sempred ( BoolContext _localctx , int predIndex ) { switch ( predIndex ) { case 3 : return 2 >= _localctx . _p ; } return true ; }
tr	IDF	BFSDisabilityCode ( int id ) { this . id = id ; }
tr	KEY	public static int lowerPot ( int val ) { if ( val <= 1 ) { return 1 ; } return higherPot ( val - 1 ) >> 1 ; }
tr	KEY	private static void removeDuplicates2 ( char [ ] s ) { int length = s . length ; }
tr	IDF	boolean verify ( ) { return verify ( tree , NEGATIVE_INFINITY , POSITIVE_INFINITY ) ; }
tr	IDF	public void draw ( Graphics g , boolean showBorder , int alignStyle ) { if ( showBorder ) { drawBoarder ( g ) ; } drawText ( g , alignStyle ) ; }
tr	KEY	public void runForm ( ) { form = new GameForm ( this ) ; }
tr	IDF	private org . apache . axiom . soap . SOAPEnvelope toEnvelope ( org . apache . axiom . soap . SOAPFactory factory , src . com . tinyurlwebservicestub . TinyUrlWebServiceStub . GetShortUrl param , boolean optimizeContent , javax . xml . namespace . QName methodQName ) throws org . apache . axis2 . AxisFault { try { org . apache . axiom . soap . SOAPEnvelope emptyEnvelope = factory . getDefaultEnvelope ( ) ; emptyEnvelope . getBody ( ) . addChild ( param . getOMElement ( src . com . tinyurlwebservicestub . TinyUrlWebServiceStub . GetShortUrl . MY_QNAME , factory ) ) ; return emptyEnvelope ; } catch ( org . apache . axis2 . databinding . ADBException e ) { throw org . apache . axis2 . AxisFault . makeFault ( e ) ; } }
tr	KEY	public TcpState getState ( ) { return this . state ; }
tr	KEY	public MobileWebResult createMobileWebResult ( ) { return new MobileWebResult ( ) ; }
tr	KEY	public final void mHEX_DIGIT ( boolean _createToken ) throws RecognitionException , CharStreamException , TokenStreamException { int _ttype ; Token _token = null ; int _begin = text . length ( ) ; _ttype = HEX_DIGIT ; int _saveIndex ; match ( "0x" ) ; { _loop590 : do { switch ( LA ( 1 ) ) { case 0 : case 1 : case 2 : case 3 : case 4 : case 5 : case 6 : case 7 : case 8 : case 9 : { mDIGIT ( false ) ; break ; } case a : case b : case c : case d : case e : case f : { matchRange ( a , f ) ; break ; } case A : case B : case C : case D : case E : case F : { matchRange ( A , F ) ; break ; } default : { break _loop590 ; } } } while ( true ) ; } if ( _createToken && _token == null && _ttype != Token . SKIP ) { _token = makeToken ( _ttype ) ; _token . setText ( new String ( text . getBuffer ( ) , _begin , text . length ( ) - _begin ) ) ; } _returnToken = _token ; }
tr	IDF	private void jButton12ActionPerformed ( java . awt . event . ActionEvent evt ) { jButton10 . setEnabled ( true ) ; jButton12 . setEnabled ( false ) ; Music . Resume ( ) ; }
tr	IDF	public NotebookDayNamePanelModel ( Logger logger ) { super ( logger ) ; }
tr	KEY	public ThreeTileAction ( ) { }
tr	IDF	public List < String > getFilterList ( ) { if ( filterList == null ) { filterList = new ArrayList < String > ( ) ; } return filterList ; }
tr	IDF	@ Override public String getMessage ( ) { return USR . getFAILED_AUTH ( ) ; }
tr	IDF	private List < WebSearchOption > getWebRequestOptions ( ) { return getWebRequest ( ) . getWebSearchOptionList ( ) ; }
tr	KEY	public int id ( ) { return System . identityHashCode ( this ) % 256 ; }
tr	KEY	public Vhost createVhost ( ) { return new Vhost ( ) ; }
tr	KEY	public double getRadius ( ) { return radius ; }
tr	IDF	private void txtDescripcionActionPerformed ( java . awt . event . ActionEvent evt ) { }
tr	KEY	public boolean blockExplosion ( ) { return true ; }
tr	IDF	private void incrementPlayer ( ) { indexOfCurrentPlayer = ( indexOfCurrentPlayer + 1 ) % players . size ( ) ; }
tr	KEY	public void reset ( ) { this . getTextField ( ) . setText ( "" ) ; }
tr	KEY	public void execute ( ) ;
tr	KEY	@ Override public void disconnectClient ( int playerID ) { }
tr	KEY	public static void main ( String [ ] args ) { new Main ( ) ; }
tr	IDF	public List < Parameter > getParams ( ) { return model . getParams ( ) ; }
tr	IDF	public static void copyFile ( String file ) throws IOException { BufferedReader br = null ; BufferedWriter bw = null ; try { br = new BufferedReader ( new FileReader ( file ) ) ; bw = new BufferedWriter ( new FileWriter ( file + ".bak" ) ) ; String line = null ; while ( ( line = br . readLine ( ) ) != null ) { bw . write ( line ) ; } } catch ( Exception ex ) { System . out . println ( "Error occurs during copying " + file ) ; } finally { if ( br != null ) br . close ( ) ; if ( bw != null ) bw . close ( ) ; } }
tr	IDF	public static void noSpace ( String string ) throws JSONException { int i , length = string . length ( ) ; if ( length == 0 ) { throw new JSONException ( "Empty string." ) ; } for ( i = 0 ; i < length ; i += 1 ) { if ( Character . isWhitespace ( string . charAt ( i ) ) ) { throw new JSONException ( "'" + string + "' contains a space character." ) ; } } }
tr	IDF	private void drawTopLineForElmement ( int elm ) { int x = elm % puzzleSize ; int y = elm / puzzleSize ; if ( y == 0 ) { y = 1 ; } else { y += 1 ; } int boxX = cellSize + x * cellSize ; int startX = boxX - cellSize ; int boxY = y * cellSize - cellSize ; if ( boxY >= 0 ) { output . drawLine ( startX , boxY , boxX , boxY ) ; } }
tr	KEY	public void initTrans ( ) throws Exception ;
tr	IDF	public void setMessage ( String message ) { this . message = message ; }
tr	KEY	public boolean is_returnSpecified ( ) { return local_returnTracker ; }
tr	IDF	@ Override public void onCommand ( POP3Session session , String argument1 , String argument2 ) throws POP3Exception { if ( session . getState ( ) != POP3State . TRANSACTION ) { throw new POP3Exception ( "-ERR auth first" ) ; } try { if ( argument1 != null && argument2 == null ) { int emailNum = Integer . parseInt ( argument1 ) ; dealOneArgument ( session , emailNum ) ; } else if ( argument1 != null && argument2 != null ) { int emailNum = Integer . parseInt ( argument1 ) ; int lineNum = Integer . parseInt ( argument2 ) ; dealTwoArgument ( session , emailNum , lineNum ) ; } else { throw new POP3Exception ( "-ERR syntax error" ) ; } } catch ( NumberFormatException e ) { throw new POP3Exception ( "-ERR syntax error" ) ; } }
tr	KEY	public static double getDifferenceInAngleDegrees ( double from , double to ) { return boundAngleNeg180to180Degrees ( to - from ) ; }
tr	KEY	public void setId ( int id ) { this . id = id ; }
tr	IDF	private boolean equals ( Object subtree1 , int base1 , Object subtree2 , int base2 , int lo , int hi ) { if ( ( subtree1 == subtree2 && base1 == base2 ) || lo == hi ) return true ; else if ( ! ( subtree1 instanceof Node ) ) { if ( ! ( subtree2 instanceof Node ) ) { Object [ ] ary1 = ( Object [ ] ) subtree1 , ary2 = ( Object [ ] ) subtree2 ; for ( int i = lo ; i < hi ; ++ i ) { Object key1 = ary1 [ i - base1 ] , key2 = ary2 [ i - base2 ] ; if ( ! eql ( key1 , key2 ) ) return false ; int nkeys1 = ary1 . length >> 1 , nkeys2 = ary2 . length >> 1 ; Object val1 = ary1 [ i - base1 + nkeys1 ] ; Object val2 = ary2 [ i - base2 + nkeys2 ] ; if ( ! eql ( val1 , val2 ) ) return false ; } return true ; } else return equals ( subtree2 , base2 , subtree1 , base1 , lo , hi ) ; } else { Node node1 = ( Node ) subtree1 ; Object left1 = node1 . left ; int l1size = treeSize ( left1 ) ; int new_hi = base1 + l1size ; RankTrimResult rtr1 = rankTrim ( left1 , base1 , lo , new_hi ) ; RankTrimResult rtr2 = rankTrim ( subtree2 , base2 , lo , new_hi ) ; if ( ! equals ( rtr1 . subtree , rtr1 . base , rtr2 . subtree , rtr2 . base , lo , new_hi ) ) return false ; else { Object key1 = node1 . key ; Object val1 = node1 . value ; Entry ent2 = rankEntry ( subtree2 , new_hi - base2 ) ; if ( ! equivEquals ( key1 , ent2 . key ) ) return false ; else if ( ! ( key1 instanceof EquivalentMap ) && ! eql ( val1 , ent2 . value ) ) return false ; else { int key1_size = keySize ( key1 ) ; int new_lo = base1 + l1size + key1_size ; RankTrimResult rtr3 = rankTrim ( node1 . right , new_lo , new_lo , hi ) ; RankTrimResult rtr4 = rankTrim ( subtree2 , base2 , new_lo , hi ) ; return equals ( rtr3 . subtree , rtr3 . base , rtr4 . subtree , rtr4 . base , new_lo , hi ) ; } } } }
tr	IDF	@ Override public List < AbstractMutableFormula > mate ( AbstractMutableFormula formula1 , AbstractMutableFormula formula2 , int numberOfCrossoverPoints , Random rnd ) { AbstractMutableFormula forAppending1 = formula2 . accept ( new RandomChooseVisitor ( rnd ) ) ; List < AbstractMutableFormula > childrens = new ArrayList < AbstractMutableFormula > ( ) ; childrens . add ( formula1 . accept ( new RandomAppendVisitor ( rnd , forAppending1 ) ) . accept ( new SimplifierVisitor ( ) ) ) ; AbstractMutableFormula forAppending2 = formula1 . accept ( new RandomChooseVisitor ( rnd ) ) ; childrens . add ( formula2 . accept ( new RandomAppendVisitor ( rnd , forAppending2 ) ) . accept ( new SimplifierVisitor ( ) ) ) ; return childrens ; }
tr	KEY	public int getRating ( ) { return rating ; }
tr	IDF	public void setCustomer ( Customer customer ) { this . customer = customer ; }
tr	KEY	public boolean isFlag ( int flag ) { return ( this . value & flag ) == flag ; }
tr	IDF	private void clearScreen ( ) { System . out . println ( "-------------------------------------" ) ; }
tr	IDF	@ Override public AbstractUnaryOperator getInstance ( AbstractMutableFormula formula ) { return new MinusOperator ( formula ) ; }
tr	KEY	public void setPixel ( int x , int y , int rgb [ ] ) { }
tr	IDF	public synchronized String getKey ( String algorithm ) { if ( algorithm . equals ( CAESAR ) ) { int key = keys . getCaesarKey ( ) ; return Conversion . intToHex ( key ) ; } else { SecretKey key = keys . getKey ( algorithm ) ; return Conversion . keyToHex ( key ) ; } }
tr	KEY	public void playSelectDeveloperSound ( ) { playSound ( "selectDeveloperSound" ) ; }
tr	IDF	FloatArrayCache getDirtyFloatArrayCache ( final int length ) { final int bucket = ArrayCache . getBucket ( length ) ; return getArrayCachesHolder ( ) . dirtyFloatArrayCaches [ bucket ] ; }
tr	KEY	public boolean unlock ( ) { System . out . println ( "You need to use a key to unlock the cell door." ) ; return true ; }
tr	KEY	public double [ ] getSpecular ( ) { return specular ; }
tr	KEY	public boolean optBoolean ( int index ) { return this . optBoolean ( index , false ) ; }
tr	KEY	private boolean validCommand ( String command ) { return true ; }
tr	IDF	@ Override public int compareTo ( SimFileDifficulty difficulty ) { int temp ; if ( ( temp = notesType . compareTo ( difficulty . getNotesType ( ) ) ) != 0 ) { return temp ; } return Integer . parseInt ( difficultyMeter ) - Integer . parseInt ( difficulty . getDifficultyMeter ( ) ) ; }
tr	IDF	public void setId_Empelado ( Empleado Id_Empelado ) { this . Id_Empelado = Id_Empelado ; }
tr	KEY	public boolean askUserIfWouldLikeToSaveChangesFromPlanningMode ( ) { int saveChanges = JOptionPane . showConfirmDialog ( null , "Would you like to Play mode to reflect these changes?" , "Planning Mode" , JOptionPane . YES_NO_OPTION ) ; if ( saveChanges == 0 ) return true ; return false ; }
tr	IDF	public int getScore ( ) { int result = 0 ; for ( Integer i : throwz ) { result += i ; } return result ; }
tr	KEY	public int getValor ( ) { return valor ; }
tr	KEY	public void paintDirtyRegions ( ) { }
tr	IDF	public Iterator keys ( ) { return this . map . keySet ( ) . iterator ( ) ; }
tr	KEY	public int get_y ( ) { return _y ; }
tr	IDF	private void writeQNames ( javax . xml . namespace . QName [ ] qnames , javax . xml . stream . XMLStreamWriter xmlWriter ) throws javax . xml . stream . XMLStreamException { if ( qnames != null ) { java . lang . StringBuffer stringToWrite = new java . lang . StringBuffer ( ) ; java . lang . String namespaceURI = null ; java . lang . String prefix = null ; for ( int i = 0 ; i < qnames . length ; i ++ ) { if ( i > 0 ) { stringToWrite . append ( " " ) ; } namespaceURI = qnames [ i ] . getNamespaceURI ( ) ; if ( namespaceURI != null ) { prefix = xmlWriter . getPrefix ( namespaceURI ) ; if ( ( prefix == null ) || ( prefix . length ( ) == 0 ) ) { prefix = generatePrefix ( namespaceURI ) ; xmlWriter . writeNamespace ( prefix , namespaceURI ) ; xmlWriter . setPrefix ( prefix , namespaceURI ) ; } if ( prefix . trim ( ) . length ( ) > 0 ) { stringToWrite . append ( prefix ) . append ( ":" ) . append ( org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qnames [ i ] ) ) ; } else { stringToWrite . append ( org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qnames [ i ] ) ) ; } } else { stringToWrite . append ( org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qnames [ i ] ) ) ; } } xmlWriter . writeCharacters ( stringToWrite . toString ( ) ) ; } }
tr	IDF	private void sucursalFieldKeyTyped ( java . awt . event . KeyEvent evt ) { if ( ! Character . isLetter ( evt . getKeyChar ( ) ) && ! Character . isISOControl ( evt . getKeyChar ( ) ) && ! Character . isWhitespace ( evt . getKeyChar ( ) ) ) { Toolkit . getDefaultToolkit ( ) . beep ( ) ; evt . consume ( ) ; } if ( sucursalField . getText ( ) . length ( ) == 45 ) { Toolkit . getDefaultToolkit ( ) . beep ( ) ; evt . consume ( ) ; JOptionPane . showMessageDialog ( this , "Nombre de la sucursal demadiado largo." , "ADVERTENCIA" , WIDTH ) ; } }
tr	IDF	public MsgStatus findByPrimaryKey ( MsgStatusPk pk ) throws MsgStatusDaoException ;
tr	IDF	public Holdable removeItem ( Character itemID ) throws InvalidKeyException { Holdable item ; if ( weapons . containsKey ( itemID ) ) { item = weapons . get ( itemID ) ; weapons . remove ( itemID ) ; size -- ; } else if ( armours . containsKey ( itemID ) ) { item = armours . get ( itemID ) ; armours . remove ( itemID ) ; size -- ; } else if ( foods . containsKey ( itemID ) ) { item = foods . get ( itemID ) ; foods . remove ( itemID ) ; size -- ; } else if ( misc . containsKey ( itemID ) ) { item = misc . get ( itemID ) ; misc . remove ( itemID ) ; size -- ; } else { throw new InvalidKeyException ( ) ; } return item ; }
tr	KEY	public abstract int insertQuestion ( ) ;
tr	KEY	public int getFrequency ( ) { return frequency ; }
tr	KEY	public void setPlan504 ( boolean plan504 ) { this . plan504 = plan504 ; }
tr	IDF	@ Override public void actionPerformed ( ActionEvent e ) { Transferable contents = Toolkit . getDefaultToolkit ( ) . getSystemClipboard ( ) . getContents ( this ) ; if ( contents != null ) { EveIPHDualInput input = new EveIPHDualInput ( ) ; if ( input . canAccept ( contents ) ) { if ( input . parse ( contents ) ) { MineralInput mineralInput = input . getMineralInput ( ) ; System . out . println ( mineralInput . toString ( ) ) ; MineralClipboardInputListener [ ] listeners = getDefault ( ) . listenerList . getListeners ( MineralClipboardInputListener . class ) ; for ( MineralClipboardInputListener listener : listeners ) { listener . mineralInput ( mineralInput ) ; } return ; } } } if ( oldAction != null ) { System . out . println ( "Executing old action" ) ; oldAction . actionPerformed ( e ) ; } }
tr	KEY	protected void interrupted ( ) { }
tr	KEY	public void setEnabled ( boolean enabled ) { this . enabled = enabled ; }
tr	IDF	public FenetreBloquee ( Salle salle ) { init ( ) ; this . salle = salle ; this . setVisible ( true ) ; this . setResizable ( false ) ; }
tr	IDF	public BookFindScreen ( Stage primaryStage ) { this . primaryStage = primaryStage ; }
tr	IDF	@ Override public void handle ( ActionEvent arg0 ) { primaryStage . close ( ) ; }
tr	KEY	public boolean handleQuit ( ) { System . exit ( 0 ) ; return true ; }
tr	KEY	final void dispose ( ) { this . src = null ; }
tr	KEY	public synchronized boolean isL5repetitionEnabled ( ) { return isL5repeatable ; }
tr	KEY	@ Before public void setUp ( ) throws Exception { }
tr	IDF	public static void main ( String [ ] args ) throws Exception { Creator c = new Creator ( ) ; Solver s = c . createAnySudoku ( 18 ) ; System . out . println ( "Solutions: " + s . getSolutions ( ) ) ; for ( String index : s . getSolutionIndex ( ) ) { System . out . println ( "  " + index ) ; } }
tr	IDF	@ Override public String apply ( String a , String b ) { return a + sep + b ; }
tr	KEY	public void initialize ( ) { }
tr	KEY	public Builder mutationOn ( boolean mutationOn ) { this . mutationOn = mutationOn ; return this ; }
tr	IDF	private void writeStartElement ( java . lang . String prefix , java . lang . String namespace , java . lang . String localPart , javax . xml . stream . XMLStreamWriter xmlWriter ) throws javax . xml . stream . XMLStreamException { java . lang . String writerPrefix = xmlWriter . getPrefix ( namespace ) ; if ( writerPrefix != null ) { xmlWriter . writeStartElement ( namespace , localPart ) ; } else { if ( namespace . length ( ) == 0 ) { prefix = "" ; } else if ( prefix == null ) { prefix = generatePrefix ( namespace ) ; } xmlWriter . writeStartElement ( prefix , localPart , namespace ) ; xmlWriter . writeNamespace ( prefix , namespace ) ; xmlWriter . setPrefix ( prefix , namespace ) ; } }
tr	IDF	@ XmlElementDecl ( namespace = "http://api.soap.mytxtbuddy.com/" , name = "countGroupContactsResponse" ) public JAXBElement < CountGroupContactsResponse > createCountGroupContactsResponse ( CountGroupContactsResponse value ) { return new JAXBElement < CountGroupContactsResponse > ( _CountGroupContactsResponse_QNAME , CountGroupContactsResponse . class , null , value ) ; }
tr	IDF	private Element referenceFileToElement ( TIPPReferenceFile file , Document doc ) { Element el = doc . createElement ( REFERENCE_FILE_RESOURCE ) ; if ( file . getLanguageChoice ( ) != null ) { el . setAttribute ( ObjectFile . ATTR_LANGUAGE_CHOICE , file . getLanguageChoice ( ) . name ( ) ) ; } return addFileChildren ( file , doc , el ) ; }
tr	IDF	@ Override public double eval ( Map < String , double > vars ) { return Math . sqrt ( formula . eval ( vars ) ) ; }
tr	IDF	private Collection < List < LineType >> createVMVAndVEMEV ( ) { Collection < List < LineType >> pieces = createVMVPiece ( ) ; pieces . add ( patternFactory . createPattern ( new LineType [ ] { LineType . VALLEY , LineType . EMPTY , LineType . MOUNTAIN , LineType . EMPTY , LineType . VALLEY } ) . getLines ( ) ) ; return pieces ; }
tr	KEY	public FileGarbage ( ) { }
tr	KEY	public void setEstadoUsuario ( int estadoUsuario ) { this . estadoUsuario = estadoUsuario ; }
tr	KEY	public void setHardValue ( int hardValue ) { this . hardValue = hardValue ; }
tr	KEY	protected abstract boolean setSourceThreeStar ( ) ;
tr	KEY	public void shutDown ( ) { alive = false ; }
tr	KEY	public long getConnectLostTime ( ) { return connectLostTime ; }
tr	KEY	public synchronized int xgetRTInitialDelay ( ) { return rtID ; }
tr	KEY	public void close ( ) ;
tr	KEY	public int getId ( ) { return id ; }
tr	KEY	private void beginColorClock ( ) throws SystemException { }
tr	IDF	public void evaluateSemanticLabeling ( DependencyInstance gold , DependencyInstance pred ) { Utils . assert ( gold . numframes == pred . numframes ) ; int n = gold . length ; for ( int k = 0 ; k < gold . numframes ; ++ k ) { Utils . assert ( gold . frames [ k ] . predid == pred . frames [ k ] . predid ) ; int p = gold . frames [ k ] . predid ; int [ ] ga = gold . frames [ k ] . arglbids ; int [ ] pa = pred . frames [ k ] . arglbids ; for ( int i = 0 ; i < n ; ++ i ) { if ( ga [ i ] >= 0 ) ++ totg ; if ( pa [ i ] >= 0 ) ++ totp ; if ( ga [ i ] >= 0 && ga [ i ] == pa [ i ] ) ++ corr ; if ( ga [ i ] >= 0 && SemanticFeatureFactory . isValidPredAugPair ( pred , p , i ) ) ++ vis ; if ( ga [ i ] >= 0 && SemanticFeatureFactory . isValidPredAugPair ( gold , p , i ) ) { int length = SemanticFeatureFactory . getPathLength ( gold , p , i ) ; goldlengthCounts . adjustOrPutValue ( length , 1 , 1 ) ; ++ totGL [ length ] ; if ( pa [ i ] == ga [ i ] ) ++ corrGL [ length ] ; } if ( pa [ i ] >= 0 ) { int length = SemanticFeatureFactory . getPathLength ( pred , p , i ) ; predlengthCounts . adjustOrPutValue ( length , 1 , 1 ) ; ++ totPL [ length ] ; if ( pa [ i ] == ga [ i ] ) ++ corrPL [ length ] ; } } ++ times ; for ( int i = 0 ; i < n ; ++ i ) { int x = ga [ i ] ; if ( x == - 1 ) continue ; if ( timeStamps [ x ] != times ) { timeStamps [ x ] = times ; ++ argAppearCnts [ x ] ; } ++ argFreqCnts [ x ] ; } } }
tr	KEY	public void write ( ) ;
tr	IDF	@ Override public Rectangle getBounds ( ) { return bounds ; }
tr	IDF	public RedirectionException ( int code , int category , String message , int httpStatusCode ) { super ( code , category , message , httpStatusCode ) ; }
tr	KEY	public void rotateY ( double radians ) ;
tr	KEY	public double findMedian ( ) { return findMedian ( root , 0 , 0 ) ; }
tr	KEY	public String getUserFacingMessage ( ) { return "There was an error processing your request. Please try again or use a different card." ; }
tr	IDF	public void notificarObservadores ( ) { Iterator i = observadores . iterator ( ) ; while ( i . hasNext ( ) ) { Operario o = ( Operario ) i . next ( ) ; o . atualizar ( this ) ; } }
tr	KEY	private void initAnimations ( ) throws SlickException { Image [ ] arrayAnimation = { new Image ( "assets/game/items/esfera/img1.png" ) , new Image ( "assets/game/items/esfera/img2.png" ) , new Image ( "assets/game/items/esfera/img3.png" ) } ; animation = new Animation ( arrayAnimation , new int [ ] { 200 , 200 , 200 } , false ) ; }
tr	KEY	public void stop ( ) ;
tr	IDF	@ Override void prepare ( ) { System . out . println ( "Prepareing " + name ) ; dough = inFactory . createDough ( ) ; sauce = inFactory . createSauce ( ) ; cheese = inFactory . createCheese ( ) ; clam = inFactory . createClam ( ) ; }
tr	IDF	@ Override public void render ( Graphics2D g ) { this . backgroundImage . render ( g ) ; this . board . render ( g ) ; }
tr	KEY	private boolean setAddress ( int address ) { return broadcastCommand ( new SetAddressCommand ( address ) ) ; }
tr	IDF	@ Override public UpdateResult aggregateWith ( UpdateResult result ) { List < String > newErrors = new ArrayList < > ( vcsErrors ) ; List < Exception > newExceptions = new ArrayList < > ( exceptions ) ; newErrors . addAll ( result . vcsErrors ) ; newExceptions . addAll ( result . exceptions ) ; return new UpdateResult ( newErrors , newExceptions ) ; }
tr	KEY	public int getHeight ( ) { return height ; }
tr	IDF	@ Before public void before ( ) { ia = new IARandomica ( "" , TipoCorJogador . PRETO ) ; tabuleiro = new TabuleiroXadrez ( ) ; reiBranco = new Rei ( TipoCorJogador . BRANCO ) ; torreBranca = new Torre ( TipoCorJogador . BRANCO ) ; reiPreto = new Rei ( TipoCorJogador . PRETO ) ; bispoPreto = new Bispo ( TipoCorJogador . PRETO ) ; rainhaPreta = new Rainha ( TipoCorJogador . PRETO ) ; rainhaBranca = new Rainha ( TipoCorJogador . BRANCO ) ; peaoBranco = new Peao ( TipoCorJogador . BRANCO ) ; peaoPreto = new Peao ( TipoCorJogador . PRETO ) ; }
tr	KEY	public int getMaxRows ( ) ;
tr	KEY	public int EOF_sym ( ) { return 0 ; }
tr	KEY	public boolean isEnd ( ) { return end ; }
tr	IDF	public void switchFullscreen ( ) { if ( fullscreen == false ) { throw new IllegalStateException ( "This window not supports fullscreen mode!" ) ; } if ( state == WindowState . WINDOW ) { Rectangle rc = this . getBounds ( ) ; boolean resizable = this . isResizable ( ) ; this . properties = new FrameProperties ( getX ( ) , getY ( ) , ( int ) rc . getWidth ( ) , ( int ) rc . getHeight ( ) , resizable ) ; } if ( device . getFullScreenWindow ( ) == null ) { FrameProperties properties = new FrameProperties ( 0 , 0 , getFullWidth ( ) , getFullHeight ( ) , false ) ; this . setExtendedState ( JFrame . MAXIMIZED_BOTH ) ; this . state = WindowState . FULLSCREEN ; properties . append ( this ) ; device . setFullScreenWindow ( this ) ; updateDisplay ( ) ; return ; } device . setFullScreenWindow ( null ) ; this . setExtendedState ( JFrame . NORMAL ) ; this . state = WindowState . WINDOW ; properties . append ( this ) ; updateDisplay ( ) ; }
tr	IDF	public double getReleaseAngle ( Rectangle sling , Point releasePoint ) { Point ref = getReferencePoint ( sling ) ; return - Math . atan2 ( ref . y - releasePoint . y , ref . x - releasePoint . x ) ; }
tr	IDF	public static String getProfileCardUrl ( String platform , String version , String profileId , String cardId ) { return MessageFormat . format ( BeanstreamUrls . BaseProfilesUrl + "/{2}/cards/{3}" , platform , version , profileId , cardId ) ; }
tr	KEY	abstract public void render ( ) ;
tr	IDF	public void setColor ( String color ) { this . color = color ; }
tr	IDF	@ Override public int getMeleeDamage ( ) { if ( equippedWeapon != null ) { return MapRand . randInt ( equippedWeapon . getMinDamage ( ) , equippedWeapon . getMaxDamage ( ) ) + getAbilityBonus ( getStrength ( ) + comboBonus ( ) ) ; } else return MapRand . randInt ( this . getBaseDamage ( ) ) + getAbilityBonus ( getStrength ( ) ) ; }
tr	KEY	public ToggleFeeder ( ) { }
tr	KEY	public boolean isEmpty ( ) { return isEmpty ; }
tr	IDF	public String print ( String whoOrWhat ) { if ( whoOrWhat . length ( ) > 3 ) { whoOrWhat = whoOrWhat . substring ( 0 , 3 ) ; } String show = "" ; for ( int row = localMap . height ( ) - 1 ; row >= 0 ; row -- ) { if ( row != lp . y ) { for ( int col = 0 ; col < localMap . width ( ) ; col ++ ) { show += "|" + STEP ; } show += "|\n" ; } else { for ( int col = 0 ; col < localMap . width ( ) ; col ++ ) { if ( col != lp . x ) { show += "|" + STEP ; } else { show += "|  " + whoOrWhat + "  " ; } } show += "|\n" ; } } return show ; }
tr	IDF	@ Override public String getColumnName ( int index ) { return header [ index ] ; }
tr	KEY	public int sizeOfMainQuery ( ) { return this . queryBuilder . sizeOfMainQuery ( ) ; }
tr	KEY	public void open ( ) ;
tr	KEY	public AuthorModel build ( ) { return new AuthorModel ( this ) ; }
tr	IDF	public void actionPerformed ( ActionEvent e ) { playerLeave ( ) ; }
tr	KEY	public boolean isSeaPassable ( ) { return this == SEA ; }
tr	KEY	public double getPriceLevel10 ( ) { return priceLevel10 ; }
tr	IDF	protected void end ( ) { if ( ! feederSolenoid . isSetIn ( ) ) { feeder . isIn = false ; } SmartDashboard . putBoolean ( "ShooterIsIn" , feeder . isIn ) ; }
tr	IDF	public TelaGestaoFerramenta ( java . awt . Frame parent , boolean modal ) { super ( parent , modal ) ; initComponents ( ) ; setComponentes ( ) ; try { dadosDAO = new FerramentaDAO ( ) ; } catch ( SQLException ex ) { javax . swing . JOptionPane . showMessageDialog ( null , ex . getMessage ( ) , "Conectando BD" , javax . swing . JOptionPane . ERROR_MESSAGE ) ; System . exit ( 1 ) ; } }
tr	KEY	public void translate ( double x , double y , double z ) ;
tr	KEY	public void setRing ( boolean ring ) { this . ring = ring ; }
tr	IDF	@ Override public void onTrigger ( Box other ) { if ( other instanceof Soldier ) ( ( Soldier ) other ) . takeHp ( 1 , null ) ; }
tr	KEY	float lastSegLen ( ) { return lastSegLen ; }
tr	KEY	public double getGoal ( ) { return goal ; }
tr	KEY	public int getIterationsNeeded ( ) { return iterationsNeeded ; }
tr	KEY	public boolean isCellEditable ( int rowIndex , int columnIndex ) { return canEdit [ columnIndex ] ; }
tr	KEY	public void setHide ( int hide ) { this . hide = hide ; }
tr	KEY	public void undo ( ) ;
tr	KEY	@ Test public final void testWriteNullParameter ( ) { }
tr	KEY	public int getX ( ) { return x ; }
tr	KEY	public void stopGrowth ( ) { growthStopped = true ; }
tr	KEY	public long getId ( ) { return id ; }
tr	IDF	public static NewsSortOption fromValue ( String v ) { for ( NewsSortOption c : NewsSortOption . values ( ) ) { if ( c . value . equals ( v ) ) { return c ; } } throw new IllegalArgumentException ( v ) ; }
tr	IDF	public FieldTyp getTile ( int x , int y ) { return tiles [ y * ROW_COUNT + x ] ; }
tr	KEY	public boolean isAlive ( ) { return true ; }
tr	KEY	public static Tile makeWall ( ) { return new Tile ( false ) ; }
tr	IDF	@ Test public void testWhenTailLeavesFromCircle ( ) { CircleLinkElement < Integer > head = new CircleLinkElement < Integer > ( headVal ) ; CircleLinkElement < Integer > tail = head . insertAsNext ( tailVal ) ; CircleLinkElement < Integer > returned = tail . leaveFromCircle ( false ) ; assertEquals ( head , returned ) ; assertEquals ( head , head . getNext ( ) ) ; assertEquals ( head , head . getPrevious ( ) ) ; }
tr	KEY	public void setUtilidad ( double utilidad ) { this . utilidad = utilidad ; }
tr	IDF	public Usuario getUsuarioActual ( ) throws SQLException { if ( this . usuarioActual != null ) { mySQLDB = new MYSQLDB ( ) ; String sql = "Select * from usuario where NombreUsuario='" + this . usuarioActual . getDescripcionUsuario ( ) + "'" ; ResultSet res = mySQLDB . executeQuery ( sql ) ; while ( res . next ( ) ) { this . usuarioActual . setIdUsuario ( res . getInt ( 1 ) ) ; this . usuarioActual . setEstadoUsuario ( res . getInt ( 4 ) ) ; this . usuarioActual . setClave ( res . getString ( 3 ) ) ; this . usuarioActual . setPuesto ( res . getString ( 5 ) ) ; } mySQLDB . closeExecuteQuery ( ) ; } return this . usuarioActual ; }
tr	IDF	public Set < String > keySetOfSubQueries ( ) { return subQueries . keySet ( ) ; }
tr	KEY	@ Override public boolean init ( ) { this . setLayout ( null ) ; initPathUI ( ) ; initIncludeUI ( ) ; initOperationAndResultUI ( ) ; this . repaint ( ) ; return true ; }
tr	KEY	public boolean isNonRotatableComponentOnBoard ( int x , int y ) { if ( x < 0 || x > 13 ) { return false ; } else if ( y < 0 || y > 13 ) { return false ; } else return true ; }
tr	IDF	@ Override public boolean equals ( final Object obj ) { if ( obj instanceof IntegerAngle ) { return angle == ( ( IntegerAngle ) obj ) . angle ; } return false ; }
tr	KEY	public int getFieldType ( int index ) { return types [ index ] ; }
tr	IDF	protected void processRequest ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException , Exception { if ( request . getSession ( ) . getAttribute ( "usuarioBean" ) == null ) { Gson gson = new Gson ( ) ; Map < String , String > data = new HashMap < > ( ) ; data . put ( "status" , "401" ) ; data . put ( "message" , "error de autenticaci\u00F3n" ) ; String resultado = gson . toJson ( data ) ; request . setAttribute ( "contenido" , resultado ) ; getServletContext ( ) . getRequestDispatcher ( "/jsp/messageAjax.jsp" ) . forward ( request , response ) ; } else { String op = request . getParameter ( "op" ) ; String ob = request . getParameter ( "ob" ) ; String callop = Character . toUpperCase ( ob . charAt ( 0 ) ) + ob . substring ( 1 ) + Character . toUpperCase ( op . charAt ( 0 ) ) + op . substring ( 1 ) ; try { try { GenericOperation operation = ( GenericOperation ) class . forName ( "net.fallamanises.operaciones." + callop ) . newInstance ( ) ; String data = operation . execute ( request , response ) ; request . setAttribute ( "contenido" , data ) ; getServletContext ( ) . getRequestDispatcher ( "/jsp/messageAjax.jsp" ) . forward ( request , response ) ; } catch ( ClassNotFoundException ex ) { Logger . getLogger ( ControlJson . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; } } catch ( InstantiationException | IllegalAccessException ex ) { Logger . getLogger ( ControlJson . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; } } }
tr	IDF	public static void main ( String [ ] args ) { final MissedNotifyDemo mn = new MissedNotifyDemo ( ) ; Runnable runA = new Runnable ( ) { public void run ( ) { try { Thread . sleep ( 1000 ) ; mn . waitToProceed ( ) ; } catch ( InterruptedException x ) { x . printStackTrace ( ) ; } } } ; Thread threadA = new Thread ( runA , "threadA" ) ; threadA . start ( ) ; Runnable runB = new Runnable ( ) { public void run ( ) { try { Thread . sleep ( 500 ) ; mn . proceed ( ) ; } catch ( InterruptedException x ) { x . printStackTrace ( ) ; } } } ; Thread threadB = new Thread ( runB , "threadB" ) ; threadB . start ( ) ; try { Thread . sleep ( 10000 ) ; } catch ( InterruptedException x ) { } print ( "about to invoke interrupt() on threadA" ) ; threadA . interrupt ( ) ; }
tr	KEY	public static String dataBaseUserName ( ) { return lePropriedade ( "Database.Username" ) ; }
tr	IDF	private static void parseInputLine ( String line ) { String [ ] args = line . trim ( ) . split ( "\\s+" ) ; if ( args . length < 1 ) { return ; } if ( args [ 0 ] . equals ( "help" ) ) { printCommandHelp ( ) ; return ; } else if ( args [ 0 ] . equals ( "list" ) ) { server . listDevices ( ) ; return ; } else if ( args [ 0 ] . equals ( "stop" ) ) { server . stopServer ( ) ; return ; } else if ( args [ 0 ] . equals ( "start" ) ) { if ( server . isServerRunning ( ) ) { System . err . println ( "Server already started" ) ; } else { server . startListeningToClients ( ) ; } return ; } else if ( args [ 0 ] . equals ( "r" ) ) { ArrayList < String > copy = ( ArrayList < String > ) jarFiles . clone ( ) ; for ( int i = 0 ; i < copy . size ( ) ; i ++ ) { String jar = copy . get ( i ) ; server . reloadJava ( jar ) ; } return ; } if ( args . length < 2 ) { System . err . println ( "Command error. 'help' for help.\n" ) ; return ; } if ( args [ 0 ] . equals ( "add" ) ) { String f = args [ 1 ] ; server . loadJava ( f ) ; return ; } else if ( args [ 0 ] . equals ( "remove" ) ) { String f = args [ 1 ] ; server . unloadJava ( f ) ; return ; } else if ( args [ 0 ] . equals ( "reload" ) ) { String f = args [ 1 ] ; server . reloadJava ( f ) ; return ; } else if ( ( args [ 0 ] . equals ( "addN" ) ) || ( args [ 0 ] . equals ( "addn" ) ) ) { String f = args [ 1 ] ; server . loadNative ( f ) ; return ; } else if ( ( args [ 0 ] . equals ( "removeN" ) ) || ( args [ 0 ] . equals ( "removen" ) ) ) { String f = args [ 1 ] ; server . unloadNative ( f ) ; return ; } else if ( ( args [ 0 ] . equals ( "reloadN" ) ) || ( args [ 0 ] . equals ( "reloadn" ) ) ) { String f = args [ 1 ] ; server . unloadNative ( f ) ; try { Thread . sleep ( 500 ) ; } catch ( InterruptedException e ) { } while ( server . isAlreadyLoaded ( f ) ) { System . err . println ( "Waiting for " + f + " to unload" ) ; try { Thread . sleep ( 500 ) ; } catch ( InterruptedException e ) { } } server . loadNative ( f ) ; return ; } else if ( ( args [ 0 ] . equals ( "connect" ) ) || ( args [ 0 ] . equals ( "disconnect" ) ) ) { String host = args [ 1 ] ; int port = 7624 ; if ( args . length > 2 ) { String p = args [ 2 ] ; try { port = Integer . parseInt ( p ) ; } catch ( NumberFormatException e ) { System . err . println ( "Port not valid." ) ; return ; } } if ( args [ 0 ] . equals ( "connect" ) ) { server . connect ( host , port ) ; } else if ( args [ 0 ] . equals ( "disconnect" ) ) { server . disconnect ( host , port ) ; } return ; } System . err . println ( "Command error. 'help' for help.\n" ) ; }
tr	IDF	@ Override public void setView ( TopicStatisticListView view ) { this . view = view ; }
tr	IDF	public DatabaseFillInTheBlanks ( final String databaseName ) { _databaseName = databaseName ; }
tr	IDF	public void off ( ) { System . out . println ( location + " light is off" ) ; }
tr	KEY	public ManageTransport ( ) { super ( ) ; }
tr	IDF	public PreviewDialog ( FileRenamerFrame frame , ResourceBundle rb , Replacer replacer , List < File > files ) { this . rb = rb ; this . replacer = replacer ; this . fromFiles = files ; this . frm = new FileRenamerManager ( ) ; this . frame = frame ; setLayout ( new MigLayout ( "" , "[grow fill]" , "[grow fill][]" ) ) ; setTitle ( rb . getString ( ResourceBundleKey . LABEL_PREVIEW . toString ( ) ) ) ; setDefaultCloseOperation ( DISPOSE_ON_CLOSE ) ; setModal ( true ) ; initComponents ( ) ; pack ( ) ; }
tr	IDF	public synchronized void updateElementUsed ( Node < T > element ) { if ( element == getFront ( ) ) { } else { try { if ( element . getNext ( ) != null ) { element . getNext ( ) . setPrev ( element . getPrev ( ) ) ; } else if ( element . getNext ( ) == null ) { setRear ( element . getPrev ( ) ) ; } element . getPrev ( ) . setNext ( element . getNext ( ) ) ; element . setNext ( null ) ; element . setPrev ( null ) ; addElement ( element ) ; } catch ( NullPointerException e ) { e . printStackTrace ( ) ; } } }
tr	IDF	public static void main ( String [ ] args ) { System . out . println ( "Testing Dynamic Array\n" ) ; DynamicArray da = new DynamicArray ( 10 ) ; for ( int i = 0 ; i < 100 ; i ++ ) { da . push ( i * i ) ; } da . print ( ) ; System . out . println ( da . index ) ; }
tr	IDF	public DriveTest ( double timer ) { addParallel ( new EqualizeEncoders ( CommandBase . driveTrain , timer ) ) ; addSequential ( new DriveFor ( 0.5 , timer ) ) ; addSequential ( new DriveFor ( 0.5 , timer ) ) ; }
tr	IDF	public void toggleAmrs ( ) { if ( arms . get ( ) == DoubleSolenoid . Value . kForward ) arms . set ( DoubleSolenoid . Value . kReverse ) ; else if ( arms . get ( ) == DoubleSolenoid . Value . kReverse ) arms . set ( DoubleSolenoid . Value . kForward ) ; }
tr	KEY	public synchronized void xsetMouseSpeed ( int speed ) { ms = speed ; }
tr	IDF	@ Override public String toString ( ) { return "SADDR" + address ; }
tr	IDF	public static void drawCircle ( Graphics2D g , int x , int y , int r ) { g . drawOval ( x - r , y - r , 2 * r - 1 , 2 * r - 1 ) ; }
tr	KEY	public int getStartCol ( ) { return startCol ; }
tr	KEY	public IntegerDocument ( ) { }
tr	IDF	void build ( TexTypefaceBuilder b ) throws IOException { if ( ! mEnableBox . isSelected ( ) ) return ; TexFontBuilder fb = TexFontBuilder . getInstance ( mFont . file ( ) ) ; b . setFont ( mSeriesSelector . getText ( ) , mShapeSelector . getText ( ) , fb ) ; }
tr	IDF	@ Override public void executeCommand ( ) { if ( gameOverDialog == null ) gameOverDialog = createOverDialog ( ) ; imageViewerControl . viewImage ( "loserIcon.jpg" ) ; gameOverDialog . showDialog ( ) ; }
tr	IDF	private void textUserActionPerformed ( java . awt . event . ActionEvent evt ) { }
tr	IDF	public static int countNeighbours ( boolean [ ] [ ] world , int col , int row ) { int c = 0 ; if ( getCell ( world , col - 1 , row - 1 ) == true ) { c += 1 ; } if ( getCell ( world , col , row - 1 ) == true ) { c += 1 ; } if ( getCell ( world , col + 1 , row - 1 ) == true ) { c += 1 ; } if ( getCell ( world , col - 1 , row ) == true ) { c += 1 ; } if ( getCell ( world , col + 1 , row ) == true ) { c += 1 ; } if ( getCell ( world , col - 1 , row + 1 ) == true ) { c += 1 ; } if ( getCell ( world , col , row + 1 ) == true ) { c += 1 ; } if ( getCell ( world , col + 1 , row + 1 ) == true ) { c += 1 ; } return c ; }
tr	IDF	void setTeam ( TEAM team ) ;
tr	IDF	public int [ ] twoSum ( int [ ] numbers , int target ) { HashMap < Integer , Integer > m = new HashMap < Integer , Integer > ( ) ; int [ ] result = null ; for ( int i = 0 ; i < numbers . length ; i ++ ) { if ( m . containsKey ( target - numbers [ i ] ) ) { result = new int [ ] { m . get ( target - numbers [ i ] ) + 1 , i + 1 } ; } else { m . put ( numbers [ i ] , i ) ; } } return result ; }
tr	IDF	private void OP_ASL ( ) { int iMem = readOperand ( ) ; int iVal = int8 ( iMem << 1 ) ; setCFlag ( getBit ( iMem , 7 ) ) ; setNFlag ( getBit ( iVal , 7 ) ) ; setZFlag ( iVal == 0 ) ; writeOperand ( iVal ) ; }
tr	KEY	public AppointmentDAOImpl ( ) { super ( Appointment . class ) ; }
tr	KEY	@ Override public void update ( ) { }
tr	KEY	public int getScore ( ) { return score ; }
tr	IDF	public String buildShotStr ( int achild , int ashot ) { String shotstr = "line~" + Integer . toString ( ashot ) + "^" + "shot_id~" + Integer . toString ( ashot ) + "^" + "child_id~" + Integer . toString ( achild ) + "^" + "shot_dt~" + getYmdStr ( ) + "^" + "vaccine_cd~" + vaccinecd + "^" + "mfr_cd~" + mfrcd + "^" ; return ( shotstr ) ; }
tr	IDF	public GUIinterfazMenuArbitro ( String nombre ) { initComponents ( ) ; nombreUsuario = nombre ; }
tr	IDF	public int [ ] search ( int [ ] a , int k ) { if ( a == null || k > a . length ) return new int [ 0 ] ; int [ ] result = new int [ k ] ; int cur = - 1 ; for ( int i = 0 ; i < k ; ++ i ) { cur = max ( a , cur , a . length - k + 1 + i ) ; result [ i ] = a [ cur ] ; } return result ; }
tr	KEY	public AddContactsToGroupsResponse createAddContactsToGroupsResponse ( ) { return new AddContactsToGroupsResponse ( ) ; }
tr	IDF	public static Color generateCosmosColor ( ) { float rand = random ( 0f , 1.4f ) ; float r = 1f ; float g = ( 1f < rand ) ? rand - 1f : 0f ; float b = ( rand <= 1f ) ? rand : 0f ; rand = random ( 0.3f , 1f ) ; r += ( ( 1f - r ) * rand ) ; g += ( ( 1f - g ) * rand ) ; b += ( ( 1f - b ) * rand ) ; rand = random ( 0.95f , 1f ) ; r *= rand ; g *= rand ; b *= rand ; return new Color ( r , g , b ) ; }
tr	IDF	public JavaPlayer ( String name , String color ) { this . name = name ; this . color = color ; this . actionPoints = testingActionPoints ; this . famePoints = 0 ; this . numOneRiceTile = 3 ; this . numOneVillageTile = 2 ; this . numTwoTile = 5 ; this . numActionTokens = 3 ; this . palaceCards = new ArrayList < PalaceCard > ( ) ; this . hasPlacedLandTile = false ; this . hasUsedActionToken = false ; this . developersArray = new Developer [ 12 ] ; this . palacesInteractedWith = new ArrayList < JavaCell > ( ) ; }
tr	KEY	public void levelWon ( ) { }
tr	KEY	public int getALCANCEMAQUINA ( ) { return ALCANCE_MAQUINA ; }
tr	KEY	public RotateShootingCharacter setElevation ( float elevation ) { this . elevation = elevation ; return this ; }
tr	KEY	public void setLimitedCommunication ( boolean limitedCommunication ) { this . limitedCommunication = limitedCommunication ; }
tr	IDF	public InputterCancer ( ) { inputs = 30 ; outputs = 2 ; name = "Cancer" ; }
tr	KEY	public Tarea ( ) { }
tr	KEY	private int getPreferredHeight ( ) { if ( isEvenLayout ) return 100 ; else return 435 ; }
tr	IDF	@ Override public void setPresenter ( TopicStatisticListPresenter presenter ) { this . presenter = presenter ; }
tr	KEY	public double getAmount ( ) { return amount ; }
tr	IDF	private Element makeInResponseTo ( TIPPTaskResponse task , Document doc ) { Element inReEl = doc . createElement ( TaskResponse . IN_RESPONSE_TO ) ; addTaskData ( task , doc , inReEl ) ; appendElementChildWithText ( doc , inReEl , UNIQUE_PACKAGE_ID , task . getRequestPackageId ( ) ) ; inReEl . appendChild ( creatorToElement ( task . getRequestCreator ( ) , doc ) ) ; return inReEl ; }
tr	KEY	public boolean isCellEditable ( int x , int y ) { return false ; }
tr	KEY	public static String getImageCacheDirectory ( ) { return getDataDirectory ( ) + "/cache" ; }
tr	IDF	public static void assertEquals ( final BlankAnswer expected , final BlankAnswer actual ) { DatabaseAbstractQuestionTest . assertEquals ( expected , actual ) ; assert . assertEquals ( expected . getQuestionString ( ) , actual . getQuestionString ( ) ) ; assert . assertEquals ( expected . getAnswer ( ) , actual . getAnswer ( ) ) ; }
tr	KEY	public void run ( ) { new NewProfile ( ) . setVisible ( true ) ; }
tr	IDF	public final List < String > readCharsWithDelimiter ( final int numOfChars , final char delimiter ) throws FileNotOnDiskException , DiskReadException { checkExists ( ) ; final String chars = readChars ( numOfChars ) ; final List < String > strings = new ArrayList < String > ( ) ; int currentStart = 0 ; for ( int i = 0 ; i < chars . length ( ) ; i ++ ) { if ( chars . charAt ( i ) == delimiter || i + 1 == chars . length ( ) ) { strings . add ( chars . subSequence ( currentStart , i + 1 ) . toString ( ) ) ; currentStart = i + 1 ; } } return strings ; }
tr	KEY	public int getId ( ) { return id ; }
tr	KEY	public final String getTitle ( ) { return title ; }
tr	IDF	@ Override public void putCharAsName ( char c ) throws ParsingException { if ( token . isClosed ( ) ) throw new NeedValueException ( ) ; Characters . checkValidName ( c ) ; token . addChar ( c ) ; }
tr	KEY	public abstract void next ( ) ;
tr	KEY	public final String getAlpha2 ( ) { return name ( ) ; }
tr	IDF	private static boolean formalStringCheck ( String target , String [ ] string_array ) { boolean result = false ; for ( String s : string_array ) { if ( Func . prepareFormalExpression ( s ) . equals ( target ) ) { result = true ; break ; } } return result ; }
tr	KEY	public MsgStatusPk ( ) { }
tr	IDF	@ Override public String call ( String accum , RxMessage < String > reply ) { return accum + reply . body ( ) ; }
tr	KEY	@ Override public void init ( ) { super . init ( ) ; new MainFrame ( ) . setVisible ( true ) ; }
tr	IDF	public void setRandomTotalPower ( ) { Random random = new Random ( ) ; int randomNumber = random . nextInt ( 1000000 - 10000 ) + 10000 ; totalPower ( randomNumber ) ; }
tr	KEY	public void setId_company ( int id_company ) { this . id_company = id_company ; }
tr	KEY	public int getSpeedY ( ) { return speed . moveY ( 0 , 1 ) ; }
tr	IDF	public Component prepareRenderer ( TableCellRenderer renderer , int Index_row , int Index_col ) { Component comp = super . prepareRenderer ( renderer , Index_row , Index_col ) ; if ( Index_row % 2 == 0 && ! isCellSelected ( Index_row , Index_col ) ) { comp . setBackground ( new Color ( 240 , 248 , 255 ) ) ; } else { comp . setBackground ( new Color ( 198 , 226 , 255 ) ) ; } JComponent jc = ( JComponent ) comp ; if ( Index_col > 1 ) { jc . setToolTipText ( "Edytuj: " + getValueAt ( Index_row , Index_col ) . toString ( ) ) ; } return comp ; }
tr	KEY	protected void end ( ) { }
tr	KEY	public BST search ( int key ) { if ( this == null ) { return null ; } else { if ( key == this . value ) { return this ; } else if ( key > this . value ) { return this . right . search ( key ) ; } else { return this . left . search ( key ) ; } } }
tr	KEY	public boolean isReceived ( ) { return received ; }
tr	KEY	public boolean getButtonStateRightStick ( ) { return getRawButton ( BUTTON_RIGHT_STICK ) ; }
tr	IDF	public void actualizar ( Issue issue ) throws SQLException { if ( issueDAO . exists ( issue ) == true ) { issueDAO . update ( issue ) ; } else { throw new SQLException ( "No se puede actualizar el issue por que no se encuentra en la base de datos" ) ; } }
tr	KEY	public void setId ( int id ) { this . id = id ; }
tr	KEY	public boolean canUsePalace ( ) { return getAvailableActionPoints ( false ) > 0 ; }
tr	IDF	@ Override public int getSourceActions ( JComponent c ) { return NONE ; }
tr	KEY	public JavaBean ( ) { }
tr	IDF	public void setTopics ( ArrayList < TopicOutput > topics ) { this . topics = topics ; }
tr	KEY	public int getDirectionY ( ) { return direction . y ; }
tr	IDF	@ Override public void handle ( Message < JsonObject > reply ) { JsonObject json = reply . body ( ) ; container . logger ( ) . info ( "response message: " + json ) ; assertEquals ( "error" , json . getString ( "status" ) ) ; assertEquals ( "unknown action." , json . getString ( "message" ) ) ; testComplete ( ) ; }
tr	IDF	public User getSelectedLeerling ( ) { int index = list . getSelectedIndex ( ) ; return leerlingLijst . get ( index ) ; }
tr	KEY	public int getId ( ) { return id ; }
tr	KEY	public int getStartRow ( ) { return startRow ; }
tr	IDF	public void addToFile ( Labyrinthe laby , File file ) throws Exception { BufferedWriter buffer = new BufferedWriter ( new FileWriter ( file ) ) ; buffer . write ( laby . toString ( ) ) ; buffer . close ( ) ; }
tr	IDF	@ Override public void addCharacter ( String character , CharacterHandle handle ) { outs . put ( character , handle ) ; }
tr	KEY	public static PointEvent singleHitOuter ( int number ) { return new HitEvent ( number ) ; }
tr	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { jBProximoActionPerformed ( evt ) ; }
tr	KEY	public int getId ( ) { return id ; }
tr	KEY	public void execute ( ) { }
tr	KEY	public String getNoEFAttribute ( ) { return "Nope" ; }
tr	IDF	public boolean isEmailExist ( String email ) { Session session = null ; try { session = HibernateUtil . getSessionFactory ( ) . openSession ( ) ; session . beginTransaction ( ) ; Criteria criteria = session . createCriteria ( User . class ) ; if ( criteria . add ( Restrictions . = ( "email" , email ) ) . uniqueResult ( ) != null ) { session . getTransaction ( ) . commit ( ) ; return true ; } } catch ( Exception exception ) { } finally { if ( session != null && session . isOpen ( ) ) { session . close ( ) ; } } return false ; }
tr	IDF	public static String escape ( String string ) { char c ; String s = string . trim ( ) ; StringBuffer sb = new StringBuffer ( ) ; int length = s . length ( ) ; for ( int i = 0 ; i < length ; i += 1 ) { c = s . charAt ( i ) ; if ( c <   || c == + || c == % || c == = || c == ; ) { sb . append ( % ) ; sb . append ( Character . forDigit ( ( char ) ( ( c >>> 4 ) & 0f ) , 16 ) ) ; sb . append ( Character . forDigit ( ( char ) ( c & 0f ) , 16 ) ) ; } else { sb . append ( c ) ; } } return sb . toString ( ) ; }
tr	IDF	@ Override protected void performInitialUpdate ( MessageListener listener ) { }
tr	KEY	protected abstract double toValue ( DoubleStream doubleStream ) ;
tr	IDF	public FeatureVector getTriSibFeatureVector ( int h , int s1 , int m , int s2 ) { int id = arc2id [ m * len + h ] ; Utils . assert ( id >= 0 && arc2id [ s1 * len + h ] >= 0 && arc2id [ s2 * len + h ] >= 0 ) ; int pos = ( id * len + s1 ) * len + s2 ; FeatureVector fv = pipe . synFactory . createTriSibFeatureVector ( inst , h , s1 , m , s2 ) ; trisib [ pos ] = parameters . dotProduct ( fv ) * gamma ; return fv ; }
tr	IDF	public void setTable ( String table ) { this . table = table ; }
tr	KEY	@ Override public double det ( ) { throw new RuntimeException ( "Not implemented yet!" ) ; }
tr	KEY	public int getCanPro_Compra ( ) { return CanPro_Compra ; }
tr	IDF	public PaymentRequest setCustomerIp ( String customer_ip ) { this . customerIp = customer_ip ; return this ; }
tr	KEY	public void setTies ( long ties ) { this . ties = ties ; }
tr	IDF	public void cardInserted ( CardEvent ce ) { System . out . println ( "Inserted card." ) ; }
tr	KEY	public Demographics ( ) { this ( null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null ) ; }
tr	IDF	GameCharacterObject setVScale ( float vScale ) ;
tr	KEY	@ Override public void putSubId ( ) throws ParsingException { throw new UnsupportedCharacterException ( this , Characters . SUB_ID ) ; }
tr	KEY	public TinyUrlWebServiceStub getServiceClient ( ) { return this . urlService ; }
tr	IDF	private HgVcsRoot ( @ NotNull String localPath , @ Nullable String repositoryUrl , @ NotNull HgSettings settings , VcsCommand . Listener listener ) { this . localPath = localPath ; this . repositoryUrl = repositoryUrl ; this . settings = settings ; this . listener = listener ; }
tr	IDF	private void addBorder ( JComponent component , String title ) { Border etch = BorderFactory . createEtchedBorder ( EtchedBorder . LOWERED ) ; Border tb = BorderFactory . createTitledBorder ( etch , title ) ; component . setBorder ( tb ) ; }
tr	KEY	public CountGroupContacts createCountGroupContacts ( ) { return new CountGroupContacts ( ) ; }
tr	KEY	public static void setLifeDegenSpeed ( int value ) { LIFE_DEGEN_SPEED = value ; }
tr	IDF	public FeatureVector getTripsFeatureVector ( int h , int m , int s ) { int id = arc2id [ m * len + h ] ; Utils . assert ( id >= 0 && arc2id [ s * len + h ] >= 0 ) ; int pos = id * len + s ; FeatureVector fv = pipe . synFactory . createTripsFeatureVector ( inst , h , m , s ) ; trips [ pos ] = parameters . dotProduct ( fv ) * gamma ; return fv ; }
tr	IDF	private static String [ ] concat ( String [ ] array1 , String [ ] array2 ) { String [ ] result = new String [ array1 . length + array2 . length ] ; System . arraycopy ( array1 , 0 , result , 0 , array1 . length ) ; System . arraycopy ( array2 , 0 , result , array1 . length , array2 . length ) ; return result ; }
tr	KEY	@ Override public void reload ( int weapon ) { }
tr	KEY	public void logout ( ) { this . mainPanel . setVisible ( false ) ; this . loginPanel . setVisible ( true ) ; }
tr	KEY	@ Override public double [ ] getWeights ( ) { double [ ] result = { 1 , 1 , 1 , 1 } ; return result ; }
tr	IDF	@ Override public Set < T > keySet ( ) { return self ; }
tr	IDF	private String newRecordId ( RecordType type ) { String recordId ; synchronized ( this . records ) { if ( records . size ( ) > 99999 ) { throw new RuntimeException ( "Out of primary key for record" ) ; } recordId = type . getCode ( ) + String . format ( "%05d" , ( countRecords ( ) + 1 ) ) ; } return recordId ; }
tr	IDF	public void setTileArrays2 ( int tilePairs2 , boolean fixed ) { try { int o = ( tilePairs2 - 1 ) ; arrTiles2 = new int [ o + 1 ] ; for ( int e : arrTiles1 ) { arrTiles2 [ o ] = e ; o -- ; } if ( debug ) { String arr2 = "" ; for ( int f : arrTiles2 ) { arr2 = arr2 + " " + f ; } jtMatchStatus . append ( "\n setTileArrays2: " + arr2 . substring ( 1 ) ) ; } } catch ( Exception x ) { if ( debug ) { jtMatchStatus . append ( "\n setTileArrays2: " + x . toString ( ) ) ; } } }
tr	KEY	public void setScroe ( int scroe ) { this . scroe = scroe ; }
tr	IDF	public StarCharacter makeChild ( String caption , float scale , float hankei , Color color , double koten , double jiten ) { StarCharacter childStar = new StarCharacter ( this , caption , scale , color , koten , jiten ) ; childStar . setX ( 0 ) ; childStar . setY ( hankei ) ; return childStar ; }
tr	KEY	public PlayMenu ( ) { }
tr	KEY	public void setReply ( boolean isReply ) { this . isReply = isReply ; }
tr	IDF	public int NLPIR_Init ( String sDataPath , int encoding , String sLicenceCode ) ;
tr	KEY	public void setCost ( int cost ) { this . cost = cost ; }
tr	IDF	@ Override public void run ( final String ... arg0 ) throws Exception { WindowManager windowManager = new MainWindowManager ( ) ; JFrame window = windowManager . getView ( ) ; Properties appInfo = getAppInfo ( ) ; String appName = appInfo . getProperty ( "app.name" ) ; String appVersion = appInfo . getProperty ( "app.version" ) ; String title = appName + " " + appVersion ; window . setTitle ( title ) ; window . setVisible ( true ) ; }
tr	KEY	public String add ( ) { return "addEvent.xhtml?faces-redirect=true" ; }
tr	KEY	public int getSize ( ) { return _playlist . size ( ) ; }
tr	KEY	protected abstract SimpleMap < String , long > getMapInstance ( int size ) ;
tr	KEY	public boolean canSpawn ( long frame ) { return this . spawnFrame == frame ; }
tr	IDF	@ Override public void actionPerformed ( ActionEvent arg0 ) { try { jTable1 . print ( ) ; } catch ( PrinterException pe ) { System . err . println ( "Blad przy drukowaniu" ) ; } }
tr	KEY	public long getStatusCode ( ) { return statusCode ; }
tr	IDF	public void setId_Servicio ( Servicio Id_Servicio ) { this . Id_Servicio = Id_Servicio ; }
tr	IDF	void volume ( ) { System . out . println ( "volume:" + length * width * height ) ; }
tr	IDF	public boolean createProfile ( TrasporteurBean transporteur ) { try { TransporteurDAO dao = new TransporteurDAO ( ) ; dao . insert ( transporteur ) ; return true ; } catch ( Exception e ) { return false ; } }
tr	IDF	protected void createContents ( ) { shell = new Shell ( ) ; shell . setSize ( 640 , 480 ) ; shell . setText ( title ) ; Label lblTaskTitle = new Label ( shell , SWT . NONE ) ; lblTaskTitle . setBounds ( 10 , 13 , 64 , 15 ) ; lblTaskTitle . setText ( "Task Title *" ) ; txtTitle = new Text ( shell , SWT . BORDER ) ; txtTitle . setTextLimit ( Task . MAX_TITLE_LENGTH ) ; txtTitle . setBounds ( 90 , 10 , 524 , 21 ) ; btnSave = new Button ( shell , SWT . NONE ) ; btnSave . addSelectionListener ( new SelectionAdapter ( ) { @ Override public void widgetSelected ( SelectionEvent arg0 ) { if ( txtTitle . getText ( ) . isEmpty ( ) || txtTitle . getText ( ) . length ( ) == 0 || txtTitle . getText ( ) == null ) { MyMessageBox error = new MyMessageBox ( shell , "Task has no Title" , "Please enter a Title for the task." , "OK" ) ; error . open ( ) ; } else if ( ! Validate . isPositiveDouble ( txtTimeSpent . getText ( ) ) || ! Validate . isPositiveDouble ( txtTimeEstimate . getText ( ) ) ) { MyMessageBox error = new MyMessageBox ( shell , "Error" , "Please enter a non-negative numeric value for Time Estimate and Time Spent." , "OK" ) ; error . open ( ) ; } else { save ( ) ; } } } ) ; btnSave . setBounds ( 539 , 407 , 75 , 25 ) ; btnSave . setText ( "Save" ) ; btnCancel = new Button ( shell , SWT . NONE ) ; btnCancel . addSelectionListener ( new SelectionAdapter ( ) { @ Override public void widgetSelected ( SelectionEvent arg0 ) { shell . close ( ) ; } } ) ; btnCancel . setBounds ( 458 , 407 , 75 , 25 ) ; btnCancel . setText ( "Cancel" ) ; Label titleSeparator = new Label ( shell , SWT . SEPARATOR | SWT . HORIZONTAL ) ; titleSeparator . setBounds ( 10 , 34 , 604 , 2 ) ; Label lblCreatedBy = new Label ( shell , SWT . NONE ) ; lblCreatedBy . setBounds ( 10 , 45 , 64 , 15 ) ; lblCreatedBy . setText ( "Created By" ) ; cboxAssignedTo = new Combo ( shell , SWT . READ_ONLY ) ; cboxAssignedTo . setBounds ( 90 , 71 , 195 , 23 ) ; Label lblAssignedTo = new Label ( shell , SWT . NONE ) ; lblAssignedTo . setText ( "Assigned To" ) ; lblAssignedTo . setBounds ( 10 , 74 , 75 , 15 ) ; Label lblCreatedDate = new Label ( shell , SWT . NONE ) ; lblCreatedDate . setBounds ( 312 , 45 , 75 , 15 ) ; lblCreatedDate . setText ( "Created Date" ) ; lblCreatedByField = new Label ( shell , SWT . BORDER | SWT . SHADOW_IN ) ; lblCreatedByField . setBounds ( 90 , 45 , 195 , 15 ) ; lblCreatedByField . setText ( AccessUsers . getLoggedInUser ( ) . getUserName ( ) ) ; lblCreatedDateField = new Label ( shell , SWT . BORDER | SWT . SHADOW_IN ) ; lblCreatedDateField . setBounds ( 458 , 45 , 156 , 15 ) ; lblCreatedDateField . setText ( FormatDate . formatDate ( Calendar . getInstance ( ) ) ) ; Label lblDueDate = new Label ( shell , SWT . NONE ) ; lblDueDate . setText ( "Due Date" ) ; lblDueDate . setBounds ( 312 , 74 , 75 , 15 ) ; dueDate = new DateTime ( shell , SWT . BORDER ) ; dueDate . setBounds ( 458 , 66 , 156 , 24 ) ; cboxStatus = new Combo ( shell , SWT . READ_ONLY ) ; cboxStatus . setBounds ( 90 , 100 , 195 , 23 ) ; Label lblStatus = new Label ( shell , SWT . NONE ) ; lblStatus . setText ( "Status" ) ; lblStatus . setBounds ( 10 , 103 , 75 , 15 ) ; Label lblAmountOfWork = new Label ( shell , SWT . NONE ) ; lblAmountOfWork . setBounds ( 312 , 132 , 140 , 15 ) ; lblAmountOfWork . setText ( "Current Time Spent" ) ; txtTimeSpent = new Text ( shell , SWT . BORDER ) ; txtTimeSpent . setText ( "0" ) ; txtTimeSpent . setBounds ( 457 , 129 , 157 , 21 ) ; cboxPriority = new Combo ( shell , SWT . READ_ONLY ) ; cboxPriority . setBounds ( 90 , 129 , 195 , 23 ) ; Label lblPriority = new Label ( shell , SWT . NONE ) ; lblPriority . setBounds ( 10 , 132 , 55 , 15 ) ; lblPriority . setText ( "Priority" ) ; Label lblTimeEstimate = new Label ( shell , SWT . NONE ) ; lblTimeEstimate . setBounds ( 312 , 103 , 87 , 15 ) ; lblTimeEstimate . setText ( "Time Estimate" ) ; txtTimeEstimate = new Text ( shell , SWT . BORDER ) ; txtTimeEstimate . setText ( "0" ) ; txtTimeEstimate . setBounds ( 458 , 100 , 156 , 21 ) ; txtDescription = new Text ( shell , SWT . MULTI | SWT . BORDER | SWT . WRAP | SWT . V_SCROLL ) ; txtDescription . setTextLimit ( Task . MAX_TEXT_LENGTH ) ; txtDescription . setBounds ( 10 , 183 , 275 , 210 ) ; txtComments = new Text ( shell , SWT . MULTI | SWT . BORDER | SWT . WRAP | SWT . V_SCROLL ) ; txtComments . setTextLimit ( Task . MAX_TEXT_LENGTH ) ; txtComments . setBounds ( 312 , 183 , 302 , 210 ) ; Label lblDescription = new Label ( shell , SWT . NONE ) ; lblDescription . setBounds ( 10 , 162 , 64 , 15 ) ; lblDescription . setText ( "Description" ) ; Label lblComments = new Label ( shell , SWT . NONE ) ; lblComments . setBounds ( 312 , 162 , 75 , 15 ) ; lblComments . setText ( "Comments" ) ; Label bottomSeparator = new Label ( shell , SWT . SEPARATOR | SWT . HORIZONTAL ) ; bottomSeparator . setBounds ( 10 , 399 , 604 , 2 ) ; setTextFieldValues ( ) ; }
tr	IDF	StateEducationLevel ( int id ) { this . id = id ; }
tr	KEY	public int getId ( ) { return id ; }
tr	KEY	@ Override public int hashCode ( ) { int hash = 5 ; return hash ; }
tr	KEY	public int getSequenceNumber ( ) { return sequenceNumber ; }
tr	KEY	public boolean isMondayFirstDayOfWeek ( ) { return isMondayFirstDayOfWeek ; }
tr	KEY	public void setNoData ( boolean nodata ) { this . NODATA = nodata ; }
tr	KEY	public double getP ( ) { return kP . getDouble ( ) ; }
tr	IDF	public static void main ( String [ ] args ) { Modele bn = new Modele ( ) ; Humain h1 = new Humain ( "Yanis" ) ; Humain h2 = new Humain ( "Maxime" ) ; Humain h3 = new Humain ( "Brady" ) ; Humain h4 = new Humain ( "Th\u00E9o" ) ; bn . setTypePartie ( TypePartie . CLASSIQUE ) ; bn . ajouterJoueur ( h1 ) ; bn . ajouterJoueur ( h2 ) ; bn . ajouterJoueur ( h3 ) ; bn . ajouterJoueur ( h4 ) ; Joueur [ ] adversaires = h3 . getAdversaires ( ) ; for ( int i = 0 ; i < adversaires . length ; i ++ ) { System . out . println ( "Adversaire n\u00B0" + i + ": " + adversaires [ i ] . toString ( ) ) ; } h2 . ajouterBateau ( new Cuirasse ( ) ) ; h2 . ajouterBateau ( new SousMarin ( ) ) ; h2 . ajouterBateau ( new Zodiac ( ) ) ; h2 . ajouterBateau ( new PorteAvion ( ) ) ; Bateau [ ] bateauxH2 = h2 . getBateaux ( ) ; Position p0 = new Position ( 6 , 4 ) ; Position p1 = new Position ( 14 , 4 ) ; Position p2 = new Position ( 1 , 15 ) ; Position p3 = new Position ( 6 , 8 ) ; h2 . placerBateau ( bateauxH2 [ 0 ] , new Placement ( p0 , true ) ) ; h2 . placerBateau ( bateauxH2 [ 1 ] , new Placement ( p1 , false ) ) ; h2 . placerBateau ( bateauxH2 [ 2 ] , new Placement ( p2 , true ) ) ; h2 . placerBateau ( bateauxH2 [ 3 ] , new Placement ( p3 , true ) ) ; Bloc [ ] blocs = h2 . getChampDeBataille ( ) . getEmplacements ( ) ; blocs [ 1 ] . setEtatBloc ( EtatBloc . TOUCHE ) ; bateauxH2 [ 0 ] . retirerPointDeVie ( ) ; blocs [ 2 ] . setEtatBloc ( EtatBloc . TOUCHE ) ; bateauxH2 [ 0 ] . retirerPointDeVie ( ) ; blocs [ 5 ] . setEtatBloc ( EtatBloc . TOUCHE ) ; bateauxH2 [ 1 ] . retirerPointDeVie ( ) ; for ( int i = 0 ; i < blocs . length ; i ++ ) { System . out . println ( blocs [ i ] . getPosition ( ) ) ; } System . out . println ( h2 . getChampDeBataille ( ) ) ; System . out . println ( "Cuirasse : " + bateauxH2 [ 0 ] . getTaille ( ) ) ; System . out . println ( "Point de Vie : " + bateauxH2 [ 0 ] . getPointDeVie ( ) ) ; System . out . println ( "\nSous marin : " + bateauxH2 [ 1 ] . getTaille ( ) ) ; System . out . println ( "Point de Vie : " + bateauxH2 [ 1 ] . getPointDeVie ( ) ) ; System . out . println ( "\nZodiac : " + bateauxH2 [ 2 ] . getTaille ( ) ) ; System . out . println ( "Point de Vie : " + bateauxH2 [ 2 ] . getPointDeVie ( ) ) ; System . out . println ( "\nPosition Cuirasse : " + p0 ) ; System . out . println ( "Position Cuirasse : " + p1 ) ; System . out . println ( "\nDistance entre Cuirasse et Sous-Marin : " + p0 . distance ( p1 ) + " bloc (ou km pour les intimes)." ) ; System . out . println ( "\nDistance entre Cuirasse et Sous-Marin : " + p0 . distance ( p1 ) + " bloc (ou km pour les intimes)." ) ; int j ; for ( j = 0 ; j <= blocs . length ; j ++ ) { if ( j < 3 ) System . out . println ( "Cuirasse : " + blocs [ j ] . getEtatBloc ( ) ) ; else if ( j < 7 ) System . out . println ( "Sous-Marin : " + blocs [ j ] . getEtatBloc ( ) ) ; else if ( j < 9 ) System . out . println ( "Zodiac :" + blocs [ j ] . getEtatBloc ( ) ) ; else if ( j < 13 ) System . out . println ( "Porte-Avion :" + blocs [ j ] . getEtatBloc ( ) ) ; } }
tr	KEY	public void setLeftComponentActivated ( boolean enabled ) { }
tr	IDF	public String formatWithLength ( Object buff , int length ) { String returnValue = null ; try { if ( buff != null ) { returnValue = String . valueOf ( buff ) . trim ( ) ; if ( returnValue . length ( ) <= length ) { if ( ( buff instanceof java . lang . long ) || ( buff instanceof java . lang . double ) ) { for ( int i = returnValue . length ( ) ; i < length ; i ++ ) { returnValue = " " + returnValue ; } } else { for ( int i = returnValue . length ( ) ; i < length ; i ++ ) { returnValue += " " ; } } } else { returnValue = returnValue . substring ( 0 , length ) ; } } else { returnValue = "" ; for ( int i = 0 ; i < length ; i ++ ) { returnValue += " " ; } } } catch ( Exception e ) { LOGGER . log ( Level . SEVERE , "Error during the formatting of string" , e ) ; } return returnValue ; }
tr	KEY	@ Override public double getMaxSecLevel ( ) { return maxSecLevel ; }
tr	KEY	float getHP ( ) ;
tr	KEY	public double getGoal ( ) { return 0 ; }
tr	IDF	public void execute ( ) { prevSpeed = ceilingFan . getSpeed ( ) ; ceilingFan . medium ( ) ; }
tr	KEY	public int getNumberOfCannons ( ) { return this . numCannons ; }
tr	IDF	public List < Document > getDocuments ( ) { return documents ; }
tr	IDF	public void imprimirLinha ( String texto ) { System . out . println ( texto ) ; }
tr	IDF	public void subtractV ( double v [ ] , double sphere [ ] , double vs [ ] ) { vs [ 0 ] = v [ 0 ] - sphere [ 0 ] ; vs [ 1 ] = v [ 1 ] - sphere [ 1 ] ; vs [ 2 ] = v [ 2 ] - sphere [ 2 ] ; }
tr	IDF	private static void trimWSFromNode ( Node node ) { NodeList children = node . getChildNodes ( ) ; for ( int i = 0 ; i < children . getLength ( ) ; ++ i ) { Node child = children . item ( i ) ; if ( child . getNodeType ( ) == Node . TEXT_NODE ) { child . setTextContent ( child . getTextContent ( ) . trim ( ) ) ; } trimWSFromNode ( child ) ; } }
tr	KEY	protected void initialize ( ) { }
tr	KEY	public void setScore ( int score ) { this . score = score ; }
tr	KEY	void setPageNumber ( long value ) ;
tr	IDF	private int min ( int a , int b ) { return a < b ? a : b ; }
tr	KEY	private CoolService ( ) { }
tr	KEY	public boolean getVeteranStatus ( ) { return veteranStatus ; }
tr	KEY	public void placedLandTile ( ) { hasPlacedLandTile = true ; }
tr	IDF	@ Override public void actionPerformed ( ActionEvent e ) { if ( _generalPanel . getInputField ( ) . equals ( "" ) ) { JOptionPane . showMessageDialog ( null , "No source file has been selected. Please select a file in the General tab." ) ; return ; } if ( _selectField . getText ( ) . equals ( "" ) ) { JOptionPane . showMessageDialog ( null , "You must select an audio file to overlay" ) ; return ; } if ( _bash . checkAudioFile ( _selectField . getText ( ) ) == false ) { JOptionPane . showMessageDialog ( null , "" + _selectField . getText ( ) + " does not appear to be an audio file" ) ; return ; } if ( formatCheck ( false ) == true ) { File f = new File ( _outFileT . getText ( ) ) ; if ( f . exists ( ) ) { Object [ ] options = { "Cancel" , "Overwrite existing" } ; int result = JOptionPane . showOptionDialog ( null , f . getName ( ) + " already exists. What would you like to do?" , "Already Exists" , JOptionPane . ERROR_MESSAGE , JOptionPane . WARNING_MESSAGE , null , options , options [ 1 ] ) ; if ( result == 0 ) { } else { f . delete ( ) ; _outFile = _outFileT . getText ( ) ; beginOverlay ( true ) ; } } else { _outFile = _outFileT . getText ( ) ; beginOverlay ( true ) ; } } else { JOptionPane . showMessageDialog ( null , "The output name must end in \".mp4\" when saving video" ) ; } }
tr	IDF	private JPanel makeNamePanel ( ) { JPanel np = new JPanel ( ) ; np . setLayout ( new FlowLayout ( FlowLayout . RIGHT ) ) ; np . add ( new JLabel ( "name: " ) ) ; np . add ( nameField ) ; return np ; }
tr	IDF	@ Override int makeTurn ( ) { int number = AIPlayer . randInt ( Game . MIN_CHOICE , Game . MAX_CHOICE ) ; return number ; }
tr	IDF	private void onPlayerSpawn ( Entity ent ) { broadcast ( new AddEntity ( ent ) ) ; addEntityToList ( ent ) ; }
tr	IDF	@ Override public void run ( ) { threadIndex . set ( index ) ; while ( threadContinue ) { try { backThreadRunLoop ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } }
tr	IDF	public AuthenticationObjectDirectoryEntry ( CommonObjectAttributes coa , CommonAuthenticationObjectAttributes caoa , PasswordAttributes pa ) { this . coa = coa ; this . caoa = caoa ; this . pa = pa ; }
tr	KEY	public ItemNotaBuilder comValor ( double valor ) { this . valor = valor ; return this ; }
tr	IDF	@ SuppressWarnings ( "unchecked" ) private void initComponents ( ) { setDefaultCloseOperation ( javax . swing . WindowConstants . EXIT_ON_CLOSE ) ; javax . swing . GroupLayout layout = new javax . swing . GroupLayout ( getContentPane ( ) ) ; getContentPane ( ) . setLayout ( layout ) ; layout . setHorizontalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGap ( 0 , 0 , short . MAX_VALUE ) ) ; layout . setVerticalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGap ( 0 , 0 , short . MAX_VALUE ) ) ; pack ( ) ; }
tr	IDF	public BoolContext ( ParserRuleContext parent , int invokingState , int _p ) { super ( parent , invokingState ) ; this . _p = _p ; }
tr	IDF	void visit ( Block block ) ;
tr	IDF	@ Override public void visit ( Block block ) { System . out . print ( block + ":" ) ; visit ( block . first ) ; System . out . print (   ) ; visit ( block . second ) ; }
tr	IDF	public CTestItem ( ) { testgroupid = "" ; testid = "" ; testtitle = "" ; testdesc = "" ; testnote = "" ; testreqid = "" ; casesource = "" ; lastname = "" ; firstname = "" ; ageyears = 0 ; agemonths = 0 ; ageweeks = 0 ; agedays = 0 ; agemethod = "1" ; birthdate = new Date ( 0 ) ; birthdate = new Date ( birthdate . getTime ( ) - 2 * 365 * 24 * 60 * 60 * 1000 ) ; gendercd = "" ; createby = "" ; createdate = new Date ( ) ; moddate = new Date ( ) ; basedate = new Date ( ) ; testresult = CAppConsts . StatusNone ; resultnotes = "" ; fc1 = "" ; fc1result = CAppConsts . StatusNone ; fc1rundt = null ; fc1resnotes = "" ; fc2 = "" ; fc2result = CAppConsts . StatusNone ; fc2rundt = null ; fc2resnotes = "" ; shotlist = new CShotList ( ) ; nonadmlist = new CNonadList ( ) ; ereslist = new CTextList ( ) ; edoselist = new CDoseList ( ) ; evallist = new CEvalList ( ) ; dosevlist = new CDosevList ( ) ; dtfmt = new SimpleDateFormat ( CAppConsts . DateFmtStr ) ; }
tr	IDF	public static Set < Remito > getAll ( ) throws SQLException { Set < Remito > res = new HashSet < > ( ) ; sql = "SELECT * FROM CLIENTES_REMITOS " ; try ( ResultSet rs = ComunDP . getData ( sql ) ) { while ( rs . next ( ) ) { res . add ( DbToObj ( rs ) ) ; } } return res ; }
tr	IDF	public Player ( String nick , int id ) { this . nick = nick ; this . ID = id ; }
tr	IDF	@ Test public void testAddTwoNumbers ( ) { AddTwoNumbers . ListNode index ; AddTwoNumbers . ListNode l1 = new AddTwoNumbers . ListNode ( 2 ) ; index = l1 ; index . next = new AddTwoNumbers . ListNode ( 4 ) ; index = index . next ; index . next = new AddTwoNumbers . ListNode ( 3 ) ; AddTwoNumbers . ListNode l2 = new AddTwoNumbers . ListNode ( 5 ) ; index = l2 ; index . next = new AddTwoNumbers . ListNode ( 6 ) ; index = index . next ; index . next = new AddTwoNumbers . ListNode ( 4 ) ; index = AddTwoNumbers . addTwoNumbers ( l1 , l2 ) ; assertEquals ( 7 , index . val ) ; assertEquals ( 0 , index . next . val ) ; assertEquals ( 8 , index . next . next . val ) ; }
tr	IDF	@ Override public void handle ( String msg ) { System . out . println ( getName ( ) + " has got a message: " + msg ) ; }
tr	KEY	public void init ( ) { }
tr	IDF	@ Override public SearchRequestBuilder withTranslationRequestSourceLanguage ( String sourceLanguage ) { getTranslationRequest ( ) . setSourceLanguage ( sourceLanguage ) ; return this ; }
tr	KEY	public boolean canUseRice ( ) { return numOneRiceTile > 0 && getAvailableActionPoints ( true ) > 0 ; }
tr	KEY	public void setyPosition ( int yPosition ) { this . yPosition = yPosition ; }
tr	KEY	public int getIntX ( ) { return ( int ) this . getX ( ) ; }
tr	KEY	public int getSize ( ) { return size ; }
tr	IDF	public RmiClient ( ) { Registry registry ; serverAddress = ConfigReseau . RMI_IP_ADR ; serverPort = ConfigReseau . RMI_PORT_NUMBER ; try { registry = LocateRegistry . getRegistry ( serverAddress , ( new Integer ( serverPort ) ) . intValue ( ) ) ; rmiServerInstance = ( C2SInterface ) ( registry . lookup ( ConfigReseau . BINDNAME ) ) ; } catch ( RemoteException e ) { e . printStackTrace ( ) ; } catch ( NotBoundException e ) { e . printStackTrace ( ) ; } }
tr	KEY	public static Database getInstance ( ) { return instance ; }
tr	IDF	public static void main ( String [ ] args ) { String [ ] testStrings = { "12 000 45" , "10 000 000" , "16 000" , "12.3" , "23 400.45" } ; int [ ] expectedInts = { - 1 , 10000000 , 16000 , - 1 , - 1 } ; for ( int i = 0 ; i < testStrings . length ; i ++ ) { try { System . out . print ( testStrings [ i ] + " -> " + parseInt ( testStrings [ i ] ) ) ; System . out . println ( " ## pass? " + ( parseInt ( testStrings [ i ] ) == expectedInts [ i ] ) ) ; } catch ( NumberFormatException ne ) { if ( expectedInts [ i ] == - 1 ) { System . out . println ( testStrings [ i ] + " ## exception thrown as expected" ) ; } else { System . out . println ( testStrings [ i ] + " ## not expected exception thrown" ) ; } } } double [ ] expectedDoubles = { 12000.45d , 10000000d , 16000 , 12.3d , 23400.45d } ; for ( int i = 0 ; i < testStrings . length ; i ++ ) { System . out . print ( testStrings [ i ] + " -> " + parseDouble ( testStrings [ i ] ) ) ; System . out . println ( " ## pass? " + ( parseDouble ( testStrings [ i ] ) == expectedDoubles [ i ] ) ) ; } }
tr	KEY	public double getNewAxisX ( ) { return newAxisX ; }
tr	KEY	public int getWidth ( ) { return ( int ) ( this . getSecondVertex ( ) . getX ( ) - this . getFirstVertex ( ) . getX ( ) ) ; }
tr	IDF	private boolean zzRefill ( ) throws java . io . IOException { if ( zzStartRead > 0 ) { System . arraycopy ( zzBuffer , zzStartRead , zzBuffer , 0 , zzEndRead - zzStartRead ) ; zzEndRead -= zzStartRead ; zzCurrentPos -= zzStartRead ; zzMarkedPos -= zzStartRead ; zzStartRead = 0 ; } if ( zzCurrentPos >= zzBuffer . length ) { char newBuffer [ ] = new char [ zzCurrentPos * 2 ] ; System . arraycopy ( zzBuffer , 0 , newBuffer , 0 , zzBuffer . length ) ; zzBuffer = newBuffer ; } int numRead = zzReader . read ( zzBuffer , zzEndRead , zzBuffer . length - zzEndRead ) ; if ( numRead > 0 ) { zzEndRead += numRead ; return false ; } if ( numRead == 0 ) { int c = zzReader . read ( ) ; if ( c == - 1 ) { return true ; } else { zzBuffer [ zzEndRead ++ ] = ( char ) c ; return false ; } } return true ; }
tr	IDF	public Friendsh [ ] findByFriendshStatus ( String statusFriendsh ) throws FriendshDaoException ;
tr	IDF	private static INDIBLOBProperty loadBLOBProperty ( INDIDriver driver , String name ) { INDIProperty prop ; try { prop = INDIProperty . loadFromFile ( driver , name ) ; } catch ( INDIException e ) { return null ; } if ( ! ( prop instanceof INDIBLOBProperty ) ) { return null ; } INDIBLOBProperty bp = ( INDIBLOBProperty ) prop ; bp . setSaveable ( true ) ; return bp ; }
tr	IDF	@ SuppressWarnings ( "unchecked" ) private void initComponents ( ) { promocion = new javax . swing . JComboBox ( ) ; otra = new javax . swing . JTextField ( ) ; jScrollPane1 = new javax . swing . JScrollPane ( ) ; tablaPromociones = new javax . swing . JTable ( ) ; jLabel1 = new javax . swing . JLabel ( ) ; btnOtra = new javax . swing . JToggleButton ( ) ; jButton1 = new javax . swing . JButton ( ) ; jButton2 = new javax . swing . JButton ( ) ; jButton3 = new javax . swing . JButton ( ) ; jToggleButton5 = new javax . swing . JToggleButton ( ) ; jToggleButton2 = new javax . swing . JToggleButton ( ) ; jButton4 = new javax . swing . JButton ( ) ; setDefaultCloseOperation ( javax . swing . WindowConstants . EXIT_ON_CLOSE ) ; getContentPane ( ) . setLayout ( new org . netbeans . lib . awtextra . AbsoluteLayout ( ) ) ; promocion . setModel ( new javax . swing . DefaultComboBoxModel ( new String [ ] { "Descuentos" , "Entrada a concursos o juegos" , "Regalos o muestras gratis" , "cantidad extra del producto" , "Reembolso o devolucion de efectivo" , "Rebajas en el precio del producto" , "Promociones online" , "Otra" } ) ) ; promocion . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { promocionActionPerformed ( evt ) ; } } ) ; getContentPane ( ) . add ( promocion , new org . netbeans . lib . awtextra . AbsoluteConstraints ( 80 , 70 , 166 , 32 ) ) ; getContentPane ( ) . add ( otra , new org . netbeans . lib . awtextra . AbsoluteConstraints ( 80 , 140 , 166 , 34 ) ) ; tablaPromociones . setModel ( new javax . swing . table . DefaultTableModel ( new Object [ ] [ ] { } , new String [ ] { } ) ) ; jScrollPane1 . setViewportView ( tablaPromociones ) ; getContentPane ( ) . add ( jScrollPane1 , new org . netbeans . lib . awtextra . AbsoluteConstraints ( 40 , 260 , 570 , 180 ) ) ; jLabel1 . setFont ( new java . awt . Font ( "Tahoma" , 0 , 24 ) ) ; jLabel1 . setText ( "Promociones" ) ; getContentPane ( ) . add ( jLabel1 , new org . netbeans . lib . awtextra . AbsoluteConstraints ( 270 , 20 , 150 , 30 ) ) ; btnOtra . setText ( "Otra" ) ; btnOtra . setToolTipText ( "Ingrese los datos en la Caja de Texto" ) ; btnOtra . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { btnOtraActionPerformed ( evt ) ; } } ) ; getContentPane ( ) . add ( btnOtra , new org . netbeans . lib . awtextra . AbsoluteConstraints ( 270 , 140 , 90 , 30 ) ) ; jButton1 . setIcon ( new javax . swing . ImageIcon ( getClass ( ) . getResource ( "/Imagenes/Guardar.png" ) ) ) ; jButton1 . setToolTipText ( "Guardar" ) ; jButton1 . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButton1ActionPerformed ( evt ) ; } } ) ; getContentPane ( ) . add ( jButton1 , new org . netbeans . lib . awtextra . AbsoluteConstraints ( 110 , 190 , 70 , 60 ) ) ; jButton2 . setIcon ( new javax . swing . ImageIcon ( getClass ( ) . getResource ( "/Imagenes/cancelar.png" ) ) ) ; jButton2 . setToolTipText ( "Cancelar" ) ; jButton2 . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButton2ActionPerformed ( evt ) ; } } ) ; getContentPane ( ) . add ( jButton2 , new org . netbeans . lib . awtextra . AbsoluteConstraints ( 200 , 190 , 70 , - 1 ) ) ; jButton3 . setIcon ( new javax . swing . ImageIcon ( getClass ( ) . getResource ( "/Imagenes/salir.png" ) ) ) ; jButton3 . setToolTipText ( "Salir" ) ; jButton3 . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButton3ActionPerformed ( evt ) ; } } ) ; getContentPane ( ) . add ( jButton3 , new org . netbeans . lib . awtextra . AbsoluteConstraints ( 290 , 190 , 80 , 60 ) ) ; jToggleButton5 . setIcon ( new javax . swing . ImageIcon ( getClass ( ) . getResource ( "/Imagenes/Encuestas.png" ) ) ) ; jToggleButton5 . setToolTipText ( "Encuestas" ) ; jToggleButton5 . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { jToggleButton5ActionPerformed ( evt ) ; } } ) ; getContentPane ( ) . add ( jToggleButton5 , new org . netbeans . lib . awtextra . AbsoluteConstraints ( 470 , 170 , 130 , 80 ) ) ; jToggleButton2 . setIcon ( new javax . swing . ImageIcon ( getClass ( ) . getResource ( "/Imagenes/cliente.png" ) ) ) ; jToggleButton2 . setToolTipText ( "Clientes" ) ; jToggleButton2 . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { jToggleButton2ActionPerformed ( evt ) ; } } ) ; getContentPane ( ) . add ( jToggleButton2 , new org . netbeans . lib . awtextra . AbsoluteConstraints ( 470 , 50 , 130 , 90 ) ) ; jButton4 . setIcon ( new javax . swing . ImageIcon ( getClass ( ) . getResource ( "/Imagenes/reporte.png" ) ) ) ; jButton4 . setToolTipText ( "Informe" ) ; jButton4 . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButton4ActionPerformed ( evt ) ; } } ) ; getContentPane ( ) . add ( jButton4 , new org . netbeans . lib . awtextra . AbsoluteConstraints ( 390 , 190 , 60 , - 1 ) ) ; pack ( ) ; }
tr	KEY	public void setGearRatio ( double gearRatio ) { this . gearRatio = gearRatio ; }
tr	IDF	public String toString ( ) { return "|?" + _name + "|?" + _year + "|?" + _artist ; }
tr	IDF	public void testDrop ( ) throws Exception { ITransducer < Integer , Integer > xf = drop ( 5 ) ; List < Integer > five = transduce ( xf , new IStepFunction < List < Integer > , Integer > ( ) { @ Override public List < Integer > apply ( List < Integer > result , Integer input , AtomicBoolean reduced ) { result . add ( input ) ; return result ; } } , new ArrayList < Integer > ( ) , ints ( 10 ) ) ; Integer [ ] expected = { 5 , 6 , 7 , 8 , 9 } ; assertTrue ( five . equals ( Arrays . asList ( expected ) ) ) ; }
tr	IDF	@ Override public void cannotListen ( String cause ) { System . err . println ( "Could not start server: " + cause ) ; }
tr	KEY	public long getTotal ( ) { return total ; }
tr	IDF	public int getInt ( String key ) throws JSONException { Object o = get ( key ) ; return o instanceof Number ? ( ( Number ) o ) . intValue ( ) : ( int ) getDouble ( key ) ; }
tr	IDF	private static void editProduct ( ) { ProductUI productMenu = new ProductUI ( ) ; ProductService productService = new ProductService ( new ProductDAO ( ) ) ; try { int productId = productMenu . askProductId ( ) ; ProductModel oldProduct = productService . getProductById ( productId ) ; if ( oldProduct != null ) { ProductModel productToUpdate = productMenu . updateProduct ( productId ) ; productService . updateProduct ( productToUpdate ) ; productMenu . showUpdatedSuccess ( ) ; } else { productMenu . showProductNotFound ( ) ; } } catch ( WebshopAppException e ) { ExceptionUI . printException ( e ) ; } }
tr	KEY	public ProposerVoyage ( ) { super ( ) ; }
tr	IDF	private static boolean equivEquals ( Object key1 , Object key2 ) { if ( key1 instanceof EquivalentMap ) { ArrayList < Entry > al1 = ( ( EquivalentMap ) key1 ) . contents ; if ( key2 instanceof EquivalentMap ) { ArrayList < Entry > al2 = ( ( EquivalentMap ) key2 ) . contents ; int siz1 = al1 . size ( ) , siz2 = al2 . size ( ) ; if ( siz1 != siz2 ) return false ; else { for ( int i1 = 0 ; i1 < siz1 ; ++ i1 ) { boolean found = false ; Entry ent1 = ( Entry ) al1 . get ( i1 ) ; for ( int i2 = 0 ; i2 < siz2 && ! found ; ++ i2 ) { Entry ent2 = ( Entry ) al2 . get ( i2 ) ; if ( eql ( ent1 . key , ent2 . key ) && eql ( ent1 . value , ent2 . value ) ) found = true ; } if ( ! found ) return false ; } return true ; } } else return false ; } else if ( key2 instanceof EquivalentMap ) return false ; else return eql ( key1 , key2 ) ; }
tr	IDF	private Object concat ( Object elt , Object left , Object right ) { if ( left == null ) return with ( right , elt ) ; else if ( right == null ) return with ( left , elt ) ; else { int sizl = treeSize ( left ) ; int sizr = treeSize ( right ) ; if ( left instanceof Node && sizl > sizr * BALANCE_FACTOR ) { Node l = ( Node ) left ; return buildNode ( l . element , l . left , concat ( elt , l . right , right ) ) ; } else if ( right instanceof Node && sizr > sizl * BALANCE_FACTOR ) { Node r = ( Node ) right ; return buildNode ( r . element , concat ( elt , left , r . left ) , r . right ) ; } else return buildNode ( elt , left , right ) ; } }
tr	IDF	public ArrayList < String > getColumnsName ( String strTabla , String strDatabase ) throws Exception ;
tr	KEY	public abstract void render ( Graphics g ) ;
tr	IDF	@ Override public GroupInfo viewGroup ( String groupId , String username , String password ) { return mytxtbuddySoapApi . viewGroup ( groupId , username , password ) ; }
tr	KEY	public Player ( ) { }
tr	IDF	public void stream ( ) { int con = 0 ; FileInputStream fis = null ; BufferedInputStream bis = null ; FileOutputStream fos = null ; BufferedOutputStream bos = null ; try { fis = new FileInputStream ( inFilePath ) ; bis = new BufferedInputStream ( fis ) ; fos = new FileOutputStream ( outFilePath ) ; bos = new BufferedOutputStream ( fos ) ; while ( ( con = bis . read ( ) ) != - 1 ) { content . append ( ( char ) con ) ; bos . write ( con ) ; } System . out . println ( content ) ; } catch ( FileNotFoundException e ) { e . printStackTrace ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } finally { try { bos . flush ( ) ; bos . close ( ) ; bis . close ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } }
tr	KEY	public int getRuta ( ) { return ruta ; }
tr	KEY	public void run ( ) { new NewProfile ( ) . setVisible ( true ) ; }
tr	IDF	ArrayList < Player > getPlayersInList ( ArrayList < String > playerNames ) ;
tr	IDF	public void actionPerformed ( ActionEvent e ) { i = i - 2 ; if ( i > 0 ) { slide ( slidePanel , slides ) ; } }
tr	IDF	public INDIOneElementBLOBProperty ( INDIDriver driver , String name , String label , String group , PropertyStates state , PropertyPermissions permission ) throws IllegalArgumentException { super ( driver , name , label , group , state , permission ) ; element = new INDIBLOBElement ( this , name , label ) ; }
tr	IDF	public LockedException ( final String message , final Throwable caughtException ) { super ( message , caughtException ) ; }
tr	IDF	public LCARSPanel ( ) { super ( ) ; this . setBackground ( Color . black ) ; setLayout ( null ) ; exitActionListener = new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { exit ( ) ; } } ; exitButton = new JButton ( "EXIT" ) ; exitButton . addActionListener ( exitActionListener ) ; this . add ( exitButton ) ; }
tr	KEY	public long getOffset ( ) { return offset ; }
tr	KEY	protected boolean canRollDiceAgain ( ) { return getDice ( ) . getLastNumber ( ) == 6 ; }
tr	IDF	public static TIPPTaskType forTypeUri ( String typeUri ) { for ( TIPPTaskType t : values ( ) ) { if ( t . getTaskURI ( ) . equals ( typeUri ) ) { return t ; } } return null ; }
tr	KEY	public String nextString ( char quote ) throws JSONException { char c ; StringBuffer sb = new StringBuffer ( ) ; for ( ; ; ) { c = this . next ( ) ; switch ( c ) { case 0 : case '' : case '' : throw this . syntaxError ( "Unterminated string" ) ; case \ : c = this . next ( ) ; switch ( c ) { case b : sb . append (  ) ; break ; case t : sb . append ( 	 ) ; break ; case n : sb . append ( '' ) ; break ; case f : sb . append (  ) ; break ; case r : sb . append ( '' ) ; break ; case u : sb . append ( ( char ) Integer . parseInt ( this . next ( 4 ) , 16 ) ) ; break ; case " : case ' : case \ : case / : sb . append ( c ) ; break ; default : throw this . syntaxError ( "Illegal escape." ) ; } break ; default : if ( c == quote ) { return sb . toString ( ) ; } sb . append ( c ) ; } } }
tr	IDF	public DependencyPipe ( Options options ) throws IOException { dictionaries = new DictionarySet ( ) ; synFactory = new SyntacticFeatureFactory ( options ) ; smnFactory = new SemanticFeatureFactory ( options , this ) ; this . options = options ; loadLanguageInfo ( ) ; }
tr	KEY	public void setSize ( int value ) { this . size = value ; }
tr	KEY	private static int monthNumber ( String month ) { int monthnum = 0 ; switch ( month ) { case "Jan" : return 1 ; case "Feb" : return 2 ; case "Mar" : return 3 ; case "Apr" : return 4 ; case "May" : return 5 ; case "Jun" : return 6 ; case "Jul" : return 7 ; case "Aug" : return 8 ; case "Sep" : return 9 ; case "Oct" : return 10 ; case "Nov" : return 11 ; case "Dec" : return 12 ; default : return monthnum ; } }
tr	KEY	public boolean isClosed ( ) { return isClosed ; }
tr	KEY	public double getImpostos ( ) { return impostos ; }
tr	KEY	public class getPuzzleClass ( ) { return puzzleClass ; }
tr	IDF	public void setAccessTransportation ( JCheckBox accessTransportation ) { this . accessTransportation = accessTransportation ; }
tr	IDF	@ Override public void actionPerformed ( ActionEvent e ) { definirBlock ( ) ; panel_case . validate ( ) ; panel_case . repaint ( ) ; }
tr	KEY	public int getBestMove ( ) { return 0 ; }
tr	IDF	public JSONArray getJSONArray ( int index ) throws JSONException { Object object = this . get ( index ) ; if ( object instanceof JSONArray ) { return ( JSONArray ) object ; } throw new JSONException ( "JSONArray[" + index + "] is not a JSONArray." ) ; }
tr	IDF	private FTreeMap ( Object _tree , Val _dflt , Comparator < Key > _comp ) { tree = _tree ; dflt = _dflt ; comp = _comp ; }
tr	IDF	public void itemStateChanged ( java . awt . event . ItemEvent evt ) { userStatusItemStateChanged ( evt ) ; }
tr	KEY	@ Override protected void bindSelf ( ) { }
tr	IDF	public LivingroomLightOffCommand ( Light light ) { this . light = light ; }
tr	KEY	public Dough createDough ( ) { return new ThinCrustDough ( ) ; }
tr	KEY	public double getDepth ( ) { return depth ; }
tr	KEY	public static void main ( String [ ] args ) { new GUIinicioSesion ( ) . setVisible ( true ) ; }
tr	KEY	public PlayerLVL1 ( ) { super ( PlayerLVL1 . class . getResource ( "resources/vegeta.JPG" ) ) ; }
tr	KEY	public void setPower ( double power ) { this . power = power ; }
tr	KEY	public boolean isBalanced ( TreeNode root ) { if ( root == null ) return true ; int [ ] depth = new int [ 3 ] ; if ( isBalancedRecursive ( root , depth ) ) { System . out . printf ( " %d  %d\n" , depth [ 1 ] , depth [ 2 ] ) ; return true ; } return false ; }
tr	KEY	public int getStage ( ) { return stage ; }
tr	IDF	@ Override public void setAttribute ( String name , Object value ) { if ( "KillServer" . equals ( name ) ) { TanksWorld . end ( ) ; System . out . println ( "Wys\u0142ano komunikat: KillServer > " + value ) ; System . out . println ( "Wy\u0142\u0105czanie..." ) ; } }
tr	KEY	public double get ( int col , int row ) ;
tr	IDF	@ Override public void visit ( Comment comment ) { System . out . print ( comment ) ; }
tr	KEY	protected void execute ( ) { }
tr	KEY	public double getDuration ( ) { return duration ; }
tr	KEY	public void setDes_color ( double des_color ) { this . des_color = des_color ; }
tr	IDF	public ArrayList < AlumnoBean > getPage ( int intRegsPerPag , int intPage , ArrayList < FilterBean > alFilter , HashMap < String , String > hmOrder ) throws Exception { ArrayList < Integer > arrId ; ArrayList < AlumnoBean > arrAlumno = new ArrayList < > ( ) ; try { oMysql . conexion ( enumTipoConexion ) ; arrId = oMysql . getPage ( "alumno" , intRegsPerPag , intPage , alFilter , hmOrder ) ; Iterator < Integer > iterador = arrId . listIterator ( ) ; while ( iterador . hasNext ( ) ) { AlumnoBean oAlumnoBean = new AlumnoBean ( iterador . next ( ) ) ; arrAlumno . add ( this . get ( oAlumnoBean ) ) ; } oMysql . desconexion ( ) ; return arrAlumno ; } catch ( Exception e ) { throw new Exception ( "AlumnoDao.getPage: Error: " + e . getMessage ( ) ) ; } finally { oMysql . desconexion ( ) ; } }
tr	IDF	public static void envoyerMessage ( String message ) { try { out . writeObject ( message ) ; out . flush ( ) ; } catch ( Exception e ) { fenetre . changerVue ( new MessageView ( "Connexion rompu !" , new AccueilView ( ) , true ) ) ; } }
tr	KEY	int getTargetScore ( ) ;
tr	KEY	public void setxCordinate ( int xCordinate ) { this . xCordinate = xCordinate ; }
tr	IDF	public static void postOrder ( AVL root ) { if ( root != null ) { postOrder ( root . leftChild ) ; postOrder ( root . rightChild ) ; System . out . print ( "(" + root . key + "   " + root . balance + ") " ) ; } }
tr	IDF	public void run ( ) { try { TexasHoldemMainApp window = new TexasHoldemMainApp ( ) ; window . frmTexasHoldemPoker . setVisible ( true ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }
tr	KEY	public synchronized void xsetLBRepeatDelay ( int a ) { lbRD = a ; }
tr	KEY	public void close ( ) throws SQLException ;
tr	IDF	@ Override public void actionPerformed ( ActionEvent e ) { UISupport . showMessage ( "Open" ) ; }
tr	IDF	public void changeGameState ( final GameState state ) { super . changeGameState ( state ) ; switch ( state ) { case INITIALIZING : break ; case STARTING : soundManager . play ( InvasionSoundKeys . GET_READY ) ; camera . setMessage ( new InGameMessage ( "Get Ready!" , WHITE , 2000 ) ) ; world . setupLevel ( ) ; break ; case LEVEL_CHANGE : camera . setMessage ( new InGameMessage ( "Great Job!" , WHITE , 2000 ) ) ; SharedGameData . getInstance ( ) . levelUp ( ) ; world . setupLevel ( ) ; break ; case LEVEL_RESET : soundManager . play ( InvasionSoundKeys . GET_READY ) ; world . resetEntities ( ) ; camera . setMessage ( new InGameMessage ( "Get Ready!" , WHITE , 2000 ) ) ; break ; case OUT_OF_BOUNDS : soundManager . play ( InvasionSoundKeys . OUT_OF_BOUNDS ) ; camera . setMessage ( new InGameMessage ( "You were killed" , WHITE , 1000 ) ) ; break ; case GAME_OVER : soundManager . play ( InvasionSoundKeys . GAME_OVER_ALIENS ) ; camera . setMessage ( new InGameMessage ( "Game Over" , RED , Integer . MAX_VALUE ) ) ; break ; } }
tr	KEY	public long getRunTime ( ) { return runTime ; }
tr	IDF	@ Override public int compareTo ( NotesType notesType ) { return toString ( ) . compareTo ( notesType . toString ( ) ) ; }
tr	IDF	@ Override public void Modificar ( ) throws SQLException { try { Conexion . GetInstancia ( ) . Conectar ( ) ; Conexion . GetInstancia ( ) . Ejecutar ( "UPDATE Descuento SET TipProSer_Descuento = '" + ObDecuento . getTipProSer_Descuento ( ) + "' Des_Descuento = '" + ObDecuento . getDes_Descuento ( ) + "' PorceN_Descuento =  WHERE Id_Descuento =" + ObDecuento . getId_Descuento ( ) ) ; } catch ( SQLException ex ) { throw ex ; } finally { Conexion . GetInstancia ( ) . Desconectar ( ) ; } }
tr	KEY	public double getpLength ( ) { if ( plength != - 1 ) return plength ; return height ; }
tr	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { btnConsultarActionPerformed ( evt ) ; }
tr	KEY	public boolean isEnableSound ( ) { return enableSound ; }
tr	KEY	public int getHeight ( ) { return height ; }
tr	KEY	@ Override public void aim ( double x , double y , double z ) { }
tr	KEY	public static void main ( String [ ] args ) { }
tr	IDF	public FileHelper ( String filename ) { this . setFilename ( filename ) ; }
tr	KEY	void pressMoveBackward ( ) ;
tr	IDF	public UnitOfWork using ( ICallBackDelegate delegateWork ) { this . delegate = delegateWork ; return this ; }
tr	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { closetabBtn1ActionPerformed ( evt ) ; }
tr	KEY	public synchronized void xsetL1RepeatDelay ( int a ) { l1RD = a ; }
tr	IDF	public void setArticleUrl ( String articleUrl ) { this . articleUrl = articleUrl ; }
tr	KEY	public void setEditions ( int [ ] editions ) { this . editions = editions ; }
tr	KEY	public boolean deleteCategory ( int id ) throws WebshopAppException ;
tr	IDF	public void mouseClicked ( java . awt . event . MouseEvent evt ) { jButton2MouseClicked ( evt ) ; }
tr	KEY	@ Override public String getUserFacingMessage ( ) { if ( isUserError ( ) ) return getMessage ( ) ; else return super . getUserFacingMessage ( ) ; }
tr	KEY	protected boolean isFinished ( ) { return true ; }
tr	IDF	public LM_DrillDown ( LMDrillModel lmDM ) { this . lmDM = lmDM ; initComponents ( ) ; if ( ( JTabbedPane ) this . getParent ( ) != null ) { JTabbedPane j = ( JTabbedPane ) this . getParent ( ) ; title = j . getTitleAt ( j . getSelectedIndex ( ) ) . substring ( j . getTitleAt ( j . getSelectedIndex ( ) ) . length ( ) - 3 , j . getTitleAt ( j . getSelectedIndex ( ) ) . length ( ) ) ; System . out . println ( "~~~~~ " + lmDM . getTablename ( ) ) ; if ( title . equals ( "LM" ) ) { } } WordCloud ( lmDM . getTopList ( ) , lmDM . getKeywords ( ) ) ; }
tr	KEY	public int getEncoderCount ( ) { return encoderCount ; }
tr	IDF	public void copyItem ( CTestItem aitem ) { testgroupid = aitem . testgroupid ; testid = aitem . testid ; testtitle = aitem . testtitle ; testdesc = aitem . testdesc ; testnote = aitem . testnote ; testreqid = aitem . testreqid ; casesource = aitem . casesource ; lastname = aitem . lastname ; firstname = aitem . firstname ; ageyears = aitem . ageyears ; agemonths = aitem . agemonths ; ageweeks = aitem . ageweeks ; agedays = aitem . agedays ; agemethod = aitem . agemethod ; birthdate . setTime ( aitem . birthdate . getTime ( ) ) ; gendercd = aitem . gendercd ; createby = aitem . createby ; createdate . setTime ( aitem . createdate . getTime ( ) ) ; moddate . setTime ( aitem . moddate . getTime ( ) ) ; basedate . setTime ( aitem . basedate . getTime ( ) ) ; testresult = aitem . testresult ; resultnotes = aitem . resultnotes ; }
tr	IDF	private void readObject ( ObjectInputStream strm ) throws IOException , ClassNotFoundException { hash_code = Integer . MIN_VALUE ; strm . defaultReadObject ( ) ; int size = strm . readInt ( ) ; Object mt = null ; Object [ ] keys = new Object [ size ] ; for ( int i = 0 ; i < size ; ++ i ) { Object key = strm . readObject ( ) ; Object val = strm . readObject ( ) ; mt = FHashMap . with ( mt , key , hashCode ( key ) , val ) ; keys [ i ] = key ; } try { MapTreeField . set ( this , mt ) ; ListTreeField . set ( this , FTreeList . fromCollection ( keys ) ) ; } catch ( IllegalAccessException ia ) { throw new RuntimeException ( "FLinkedHashMap deserialization failed" , ia ) ; } }
tr	KEY	public boolean interact ( String action , Interactable target ) { if ( super . interact ( action , target ) ) { return true ; } else if ( action . equals ( "attack" ) ) { return this . attack ( ) ; } return false ; }
tr	KEY	protected abstract boolean setSourceLibrary ( ) ;
tr	IDF	@ Override public void call ( RxMessage < JsonObject > message ) { ConcurrentMap < String , String > map = vertx . sharedData ( ) . getMap ( "muraken720.testexample" ) ; JsonObject json = message . body ( ) ; if ( "add" . equals ( json . getString ( "action" ) ) ) { String key = json . getString ( "key" ) ; String value = json . getString ( "value" ) ; map . put ( key , value ) ; } else { message . reply ( new JsonObject ( ) . putString ( "status" , "error" ) . putString ( "message" , "unknown action." ) ) ; } message . reply ( new JsonObject ( ) . putString ( "status" , "ok" ) ) ; }
tr	KEY	public String toString ( ) { return "table atan" ; }
tr	KEY	protected void execute ( ) { }
tr	IDF	public Holdable removeStackedItem ( Character itemID , int count ) throws InvalidKeyException { Holdable item ; Holdable returnItem ; if ( weapons . containsKey ( itemID ) ) { item = weapons . get ( itemID ) ; returnItem = item . reduceStack ( count ) ; if ( item . stackSize ( ) == 0 ) { weapons . remove ( itemID ) ; size -- ; } } else if ( armours . containsKey ( itemID ) ) { item = armours . get ( itemID ) ; returnItem = item . reduceStack ( count ) ; if ( item . stackSize ( ) == 0 ) { armours . remove ( itemID ) ; size -- ; } } else if ( foods . containsKey ( itemID ) ) { item = foods . get ( itemID ) ; returnItem = item . reduceStack ( count ) ; if ( item . stackSize ( ) == 0 ) { foods . remove ( itemID ) ; size -- ; } } else if ( misc . containsKey ( itemID ) ) { item = misc . get ( itemID ) ; returnItem = item . reduceStack ( count ) ; if ( item . stackSize ( ) == 0 ) { misc . remove ( itemID ) ; size -- ; } } else { throw new InvalidKeyException ( ) ; } return returnItem ; }
tr	IDF	private void updateInventoryActionPerformed ( java . awt . event . ActionEvent evt ) { this . main . hideView ( Main . view . Inventory ) ; this . main . showView ( Main . view . UpdateInventory ) ; }
tr	KEY	@ Override public void stop ( ) { stopped = true ; }
tr	KEY	public synchronized void xsetR4RepeatDelay ( int a ) { r4RD = a ; }
tr	KEY	protected void execute ( ) { }
tr	IDF	public Customer add ( Customer c ) { ensureCapacity ( ++ customer_count ) ; customers [ customer_count - 1 ] = c ; return c ; }
tr	KEY	public void explode ( ) ;
tr	IDF	private void mutate ( ) { double [ ] oldProbabilities = probabilities ; double [ ] newProbabilities = new double [ populationToMutate ] ; List < Individual < T >> newMembers = new ArrayList < Individual < T >> ( ) ; for ( int i = 0 ; i < populationToMutate ; i ++ ) { Individual < T > mutated = gap . mutate ( Distribution . sample ( population , probabilities ) ) ; newMembers . add ( mutated ) ; newProbabilities [ i ] = gap . value ( mutated ) ; } probabilities = new double [ population . size ( ) + populationToMutate ] ; System . arraycopy ( oldProbabilities , 0 , probabilities , 0 , oldProbabilities . length ) ; System . arraycopy ( newProbabilities , 0 , probabilities , oldProbabilities . length , newProbabilities . length ) ; population . addAll ( newMembers ) ; normalizeProbabilities ( ) ; }
tr	IDF	@ Override public void run ( ) { String smtpPorts = EmailServerStart . emailConf . getProperty ( "smtpPort" ) ; if ( smtpPorts == null ) { EmailServerStart . smtpLog . error ( "smtp:\u65E0\u6CD5\u521D\u59CB\u5316smtp\u7AEF\u53E3" ) ; return ; } strSmtpPorts = EmailServerStart . emailConf . getProperty ( "smtpPort" ) . split ( " " ) ; for ( String port : strSmtpPorts ) { new Thread ( new SMTPStart ( Integer . parseInt ( port ) ) ) . start ( ) ; } }
tr	KEY	public boolean hasNext ( ) { return inode != null ; }
tr	IDF	public void winForm ( boolean clientWin ) { if ( isClient ) { MainApplication . ticTacToePlay . getPlayerOne ( ) . incrementNumberOfPlays ( ) ; if ( clientWin ) { MainApplication . ticTacToePlay . getPlayerOne ( ) . incrementNumberOfWins ( ) ; } else { MainApplication . ticTacToePlay . getPlayerTwo ( ) . incrementNumberOfWins ( ) ; } System . out . println ( "Number of plays: " + MainApplication . ticTacToePlay . getPlayerOne ( ) . getNumberOfPlays ( ) ) ; } resultsWindow = new ResultWindow ( this , isNetwork , network ) ; resultsWindow . setLocationRelativeTo ( null ) ; resultsWindow . setNetPop ( clientWin , isClient , false ) ; TicTacToeUIApp . getApplication ( ) . show ( resultsWindow ) ; resultsWindow . setResizable ( false ) ; resultsWindow . setSize ( 450 , 280 ) ; setNoneClickable ( ) ; }
tr	KEY	protected boolean isFinished ( ) { return isTimedOut ( ) ; }
tr	KEY	public void setBestMove ( int move ) { throw new UnsupportedOperationException ( "Not supported yet." ) ; }
tr	IDF	public static String [ ] enumToStringArray ( ) { String [ ] result = new String [ StatusCode . values ( ) . length ] ; int count = 0 ; for ( StatusCode code : StatusCode . values ( ) ) { result [ count ] = code . toString ( ) ; count ++ ; } return result ; }
tr	IDF	public static void main ( String [ ] args ) throws InterruptedException { SharedObject object = new SharedObject ( ) ; ExecutorService service = Executors . newFixedThreadPool ( 3 ) ; service . execute ( new Worker ( Worker . Type . WRITER , object ) ) ; service . execute ( new Worker ( Worker . Type . READER , object ) ) ; service . execute ( new Worker ( Worker . Type . READER , object ) ) ; service . shutdown ( ) ; if ( ! service . awaitTermination ( patience , patienceUnit ) ) { System . out . println ( "*** ExecutorService didn't finish after a " + patience + " " + patienceUnit + " wait ***" ) ; service . shutdownNow ( ) ; } }
tr	IDF	@ Override public CircleLinkPointer < Value > insertAsPrevious ( final Value v ) { return new CircleLinkPointerImpl < > ( parent , parent . insertAsPrevious ( element , v ) ) ; }
tr	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { jToggleButton4ActionPerformed ( evt ) ; }
tr	KEY	public int getErrorType ( ) { return errorType ; }
tr	IDF	private JPanel createTextFieldPanel ( JTextField textField , String label ) { JPanel panel = new JPanel ( ) ; panel . setLayout ( new FlowLayout ( FlowLayout . RIGHT ) ) ; panel . add ( new Label ( label ) ) ; panel . add ( textField ) ; return panel ; }
tr	KEY	float getVY ( ) ;
tr	KEY	public static Statement getNewStatement ( ArrayList < StatementType > types ) { int statementTypeId ; do { statementTypeId = randomNumber ( 1 , StatementType . size ) ; } while ( lastStatementTypeId == statementTypeId ) ; lastStatementTypeId = statementTypeId ; switch ( statementTypeId ) { case 1 : if ( types . contains ( StatementType . + ) ) return new + ( ) ; case 2 : return new Minus ( ) ; case 3 : return new Multiply ( ) ; case 4 : return new Divide ( ) ; case 5 : return new Sqrt ( ) ; case 6 : return new Pow ( ) ; case 7 : return new Logarithm ( ) ; case 8 : return new EquatiansEasy ( ) ; case 9 : return new EquationsHard ( ) ; default : return new + ( ) ; } }
tr	KEY	public void answerRight ( ) ;
tr	KEY	public Board ( ) { this . clock = new Clock ( ) ; }
tr	KEY	@ Override public boolean equals ( Object obj ) { if ( this == obj ) return true ; if ( obj == null ) return false ; if ( getClass ( ) != obj . getClass ( ) ) return false ; StudentGroup other = ( StudentGroup ) obj ; if ( cohort == null ) { if ( other . cohort != null ) return false ; } else if ( ! cohort . equals ( other . cohort ) ) return false ; if ( fieldOfStudy != other . fieldOfStudy ) return false ; if ( groupIdentifier == null ) { if ( other . groupIdentifier != null ) return false ; } else if ( ! groupIdentifier . equals ( other . groupIdentifier ) ) return false ; return true ; }
tr	KEY	public boolean isEmptyOrNullBuffer ( ) { return ( getBuffer ( ) == null ) || getBuffer ( ) . equals ( "" ) ; }
tr	IDF	public AcaoCorCaneta ( Expressao expressao ) { super ( expressao , operador ) ; }
tr	KEY	public static String getMouseName ( int mouseCode ) { switch ( mouseCode ) { case MOUSE_MOVE_LEFT : return "Mouse Left" ; case MOUSE_MOVE_RIGHT : return "Mouse Right" ; case MOUSE_MOVE_UP : return "Mouse Up" ; case MOUSE_MOVE_DOWN : return "Mouse Down" ; case MOUSE_WHEEL_UP : return "Mouse Wheel Up" ; case MOUSE_WHEEL_DOWN : return "Mouse Wheel Down" ; case MOUSE_BUTTON_1 : return "Mouse Button 1" ; case MOUSE_BUTTON_2 : return "Mouse Button 2" ; case MOUSE_BUTTON_3 : return "Mouse Button 3" ; default : return "Unknown mouse code " + mouseCode ; } }
tr	KEY	public UnreferencedSwipeReturnRequest ( ) { complete = true ; }
tr	IDF	public String [ ] getWeaponTexts ( ) { String [ ] weaponText = new String [ weapons . size ( ) ] ; int itemCount = 0 ; if ( weapons . size ( ) > 0 ) { Iterator < Entry < Character , Weapon >> iter = weapons . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < Character , Weapon > entry = ( Map . Entry < Character , Weapon > ) iter . next ( ) ; weaponText [ itemCount ] = entry . getKey ( ) + " - " + entry . getValue ( ) . inventoryName ( ) ; itemCount ++ ; } } return weaponText ; }
tr	KEY	public GalleryDAO ( ) { super ( GalleryImage . class ) ; }
tr	KEY	public GetContacts createGetContacts ( ) { return new GetContacts ( ) ; }
tr	IDF	public void jMenuHelpAbout_actionPerformed ( ActionEvent e ) { AboutBox dlg = new AboutBox ( this ) ; Dimension dlgSize = dlg . getPreferredSize ( ) ; Dimension frmSize = getSize ( ) ; Point loc = getLocation ( ) ; dlg . setLocation ( ( frmSize . width - dlgSize . width ) / 2 + loc . x , ( frmSize . height - dlgSize . height ) / 2 + loc . y ) ; dlg . setModal ( true ) ; dlg . pack ( ) ; dlg . setVisible ( true ) ; }
tr	IDF	public Player ( Animation [ ] anim ) { super ( anim ) ; this . setMaxSpeed ( .5f ) ; this . setBoostSpeed ( this . getMaxSpeed ( ) * 2 ) ; this . setCurrentSpeed ( this . getMaxSpeed ( ) ) ; }
tr	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { txtClaveActionPerformed ( evt ) ; }
tr	KEY	@ Override public int hashCode ( ) { int hash = 5 ; return hash ; }
tr	IDF	@ SuppressWarnings ( "unchecked" ) private void laboratoriosButtonActionPerformed ( java . awt . event . ActionEvent evt ) { BuscarLaboratorio buscar_labb = new BuscarLaboratorio ( ) ; buscar_labb . setVisible ( true ) ; }
tr	IDF	public void setLinks ( LinkedList < Link > links ) { this . links = links ; }
tr	IDF	public void incrementAlarmMinute ( ) { if ( alarmMinute == 59 ) { alarmMinute = 0 ; } else { alarmMinute = alarmMinute + 1 ; } updateDisplay ( ) ; }
tr	IDF	public static Vector2D pointToWorldSpace ( Vector2D point , Vector2D AgentHeading , Vector2D AgentSide , Vector2D AgentPosition ) { Matrix2D matTransform = new Matrix2D ( ) ; matTransform . rotate ( AgentHeading , AgentSide ) ; matTransform . translate ( AgentPosition . x , AgentPosition . y ) ; return matTransform . transformVector2D ( point ) ; }
tr	KEY	public String getDescription ( ) { throw new UnsupportedOperationException ( ) ; }
tr	KEY	public double getIncremento ( ) { return incremento ; }
tr	KEY	public void newRandomMatchDraw ( ) { synchronized ( this ) { drawAgainstRandom ++ ; } }
tr	IDF	@ Override public boolean equals ( Object obj ) { boolean result = false ; if ( this == obj ) { result = true ; } else if ( obj != null ) { DataProviderStatus status = null ; if ( obj instanceof String ) { try { status = DataProviderStatus . parse ( ( String ) obj ) ; } catch ( Exception e ) { status = null ; result = false ; } } else if ( obj instanceof DataProviderStatus ) { status = ( DataProviderStatus ) obj ; } if ( status != null ) { if ( this . name . equals ( status . name ) && this . status . equals ( status . status ) ) { if ( Utilities . isNullOrWhitespace ( this . version ) ) { result = true ; } else { result = this . version . equals ( status . version ) ; } } } } return result ; }
tr	IDF	static void showUsage ( ) { System . out . println ( "Usage:java -jar AutoMateNode.jar <properties file>" ) ; System . exit ( 1 ) ; }
tr	KEY	public double [ ] getAmbient ( ) { return ambient ; }
tr	KEY	public RotatableComponentAction ( ) { }
tr	IDF	public ProcedimentoJaDeclaradoException ( Id id ) { super ( "Procedimento " + id + " j\u00E1 declarado." ) ; }
tr	IDF	public void logCommand ( byte [ ] apdu ) { text . append ( "Command APDU: " + Util . byteArrayToString ( apdu , true ) + "\n" ) ; status . setText ( "" ) ; }
tr	IDF	public void add ( int i , String item ) { if ( item == null ) return ; items . add ( i , item . trim ( ) ) ; }
tr	KEY	public float getVelocityY ( ) { return ( float ) velocity . y ; }
tr	KEY	public boolean give ( Interactable target ) { this . given = true ; return true ; }
tr	IDF	private void applyDefaultUDPSettings ( ) { udpProperties . setProperty ( "SPVM" , "localhost 9091" ) ; udpProperties . setProperty ( "SPB" , "localhost 9092" ) ; udpProperties . setProperty ( "SPL" , "localhost 9093" ) ; try { udpProperties . store ( new FileOutputStream ( "./udp.properties" ) , null ) ; log . debug ( this . stationType . getStationCode ( ) + ":Default config properites initialized" ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }
tr	KEY	protected void execute ( ) { }
tr	KEY	public double getCurrentMonthlyInterest ( ) { return currentMonthlyInterest ; }
tr	IDF	public void setTelefonolaboratorios2 ( String telefonolaboratorios2 ) { String oldTelefonolaboratorios2 = this . telefonolaboratorios2 ; this . telefonolaboratorios2 = telefonolaboratorios2 ; changeSupport . firePropertyChange ( "telefonolaboratorios2" , oldTelefonolaboratorios2 , telefonolaboratorios2 ) ; }
tr	IDF	public leer_archivo ( int capacidad ) { Lista_meta = new String [ capacidad ] ; Contador = 0 ; }
tr	KEY	public static KontakService getKontakService ( ) { return kontakService ; }
tr	KEY	protected void end ( ) { }
tr	KEY	public Person makePerson ( ) { return new Student ( ) ; }
tr	KEY	public double [ ] toArray ( ) { return new double [ ] { x , y } ; }
tr	KEY	public char getColor ( ) { return color ; }
tr	KEY	private int getPreferredWidth ( ) { if ( isEvenLayout ) return 470 ; else return 100 ; }
tr	IDF	public ArrayList < EntradaBean > getPage ( int intRegsPerPag , int intPage , ArrayList < FilterBean > alFilter , HashMap < String , String > hmOrder ) throws Exception { ArrayList < Integer > arrId ; ArrayList < EntradaBean > arrEntrada = new ArrayList < > ( ) ; try { oMysql . conexion ( enumTipoConexion ) ; arrId = oMysql . getPage ( "entrada" , intRegsPerPag , intPage , alFilter , hmOrder ) ; Iterator < Integer > iterador = arrId . listIterator ( ) ; while ( iterador . hasNext ( ) ) { EntradaBean oEntradaBean = new EntradaBean ( iterador . next ( ) ) ; arrEntrada . add ( this . get ( oEntradaBean ) ) ; } oMysql . desconexion ( ) ; return arrEntrada ; } catch ( Exception e ) { throw new Exception ( "EntradaDao.getPage: Error: " + e . getMessage ( ) ) ; } finally { oMysql . desconexion ( ) ; } }
tr	KEY	public int getValue ( ) { return value ; }
tr	IDF	public void setMailSubject ( String mailSubject ) { this . mailSubject = mailSubject ; }
tr	KEY	private static long getPentagonal ( long n ) { if ( n < 1 ) { return 0 ; } final long pn = ( n * ( 3 * n - 1 ) ) / 2 ; return pn ; }
tr	KEY	public Twitter ( ) { }
tr	KEY	public Color getColor ( ) { return this . clr ; }
tr	IDF	private void load ( File fileName ) throws IOException { FileRead fp = new FileRead ( fileName ) ; if ( fp != null ) { LevelLayer curElem = null ; while ( fp . hasNext ( ) ) { switch ( fp . getNext ( ) ) { case "COLLISION" : collision = new Collision ( fp . getNext ( ) , Integer . parseInt ( fp . getNext ( ) ) ) ; break ; case "LAYER" : curElem = new LevelLayer ( this ) ; layers . push ( curElem ) ; curElem . load ( Integer . parseInt ( fp . getNext ( ) ) ) ; break ; case "IMG" : curElem . load ( Data . getDataDirectory ( ) + "/data/gfx/tileset/" + fp . getNext ( ) , Integer . parseInt ( fp . getNext ( ) ) , Integer . parseInt ( fp . getNext ( ) ) , Integer . parseInt ( fp . getNext ( ) ) , Integer . parseInt ( fp . getNext ( ) ) ) ; curElem . load ( fp ) ; break ; case "OBJECTS" : loadObjects ( fp ) ; break ; default : break ; } } if ( layers . size ( ) == 0 ) { throw new IOException ( "No level layers found in:\n" + fileName + "\nPerhaps it is not a valid level file?" ) ; } } fp . close ( ) ; }
tr	KEY	public MsgStatusDaoImpl ( ) { }
tr	KEY	public void setId ( long id ) { this . id = id ; }
tr	IDF	public void setTitle ( String value ) { this . title = value ; }
tr	KEY	public Buying buying ( ) { return new Buying ( this ) ; }
tr	KEY	public void setId1 ( int id1 ) { this . id1 = id1 ; }
tr	IDF	private void mapGameAction ( int code , boolean isMouseMap ) { if ( inputManager . getMaps ( action ) . size ( ) >= 3 ) { inputManager . clearMap ( action ) ; } if ( isMouseMap ) { inputManager . mapToMouse ( action , code ) ; } else { inputManager . mapToKey ( action , code ) ; } resetInputs ( ) ; screen . getFullScreenWindow ( ) . requestFocus ( ) ; }
tr	KEY	@ Override public void onBind ( class < ? extends IListener > listenerClass ) { }
tr	IDF	public BoardEntity ( String spriteRef , int id ) { super ( spriteRef , 0 , 0 ) ; this . id = id ; }
tr	IDF	protected abstract void notifyDeviceListenersDefXXXVector ( INDIDevice device , Element xml ) ;
tr	KEY	private void createActions ( ) { }
tr	KEY	public abstract int getMaximumAbsPos ( ) ;
tr	KEY	public void setId ( int id ) { this . id = id ; }
tr	IDF	@ Override public Object execute ( HttpServletRequest request , HttpServletResponse response ) throws Exception { Contexto oContexto = ( Contexto ) request . getAttribute ( "contexto" ) ; if ( "hilo" . equals ( oContexto . getSearchingFor ( ) ) ) { oContexto . setVista ( "jsp/hilo/list.jsp" ) ; oContexto . setClase ( "hilo" ) ; oContexto . setMetodo ( "selectone" ) ; oContexto . setFase ( "1" ) ; oContexto . setClaseRetorno ( "entrada" ) ; oContexto . setMetodoRetorno ( "update" ) ; oContexto . setFaseRetorno ( "1" ) ; oContexto . removeParam ( "id_hilo" ) ; oContexto . removeParam ( "page" ) ; HiloList1 oOperacion = new HiloList1 ( ) ; return oOperacion . execute ( request , response ) ; } else { oContexto . setVista ( "jsp/mensaje.jsp" ) ; HiloBean oHiloBean = new HiloBean ( ) ; HiloDao oHiloDao = new HiloDao ( oContexto . getEnumTipoConexion ( ) ) ; HiloParam oHiloParam = new HiloParam ( request ) ; oHiloBean = oHiloParam . loadId ( oHiloBean ) ; oHiloBean = oHiloDao . get ( oHiloBean ) ; try { oHiloBean = oHiloParam . load ( oHiloBean ) ; } catch ( NumberFormatException e ) { return "Tipo de dato incorrecto en uno de los campos del formulario" ; } try { oHiloDao . set ( oHiloBean ) ; } catch ( Exception e ) { throw new ServletException ( "HiloController: Update Error: Phase 2: " + e . getMessage ( ) ) ; } String strMensaje = "Se ha a\u00F1adido la informaci\u00F3n del hilo con id=" + Integer . toString ( oHiloBean . getId ( ) ) + "<br />" ; strMensaje += "<a href=\"Controller?class=hilo&method=view&id=" + oHiloBean . getId ( ) + "\">Ver hilo creado</a><br />" ; return strMensaje ; } }
tr	IDF	Connection connSQL ( ) { PreparedStatement statement = null ; Connection conn = null ; String url = "jdbc:mysql://219.223.251.44:3306/dict?characterEncoding=UTF-8" ; String username = "root" ; String password = "123456" ; try { class . forName ( "com.mysql.jdbc.Driver" ) ; conn = DriverManager . getConnection ( url , username , password ) ; System . out . println ( "succeed!" ) ; } catch ( ClassNotFoundException cnfex ) { System . err . println ( "\u88C5\u8F7D JDBC/ODBC \u9A71\u52A8\u7A0B\u5E8F\u5931\u8D25\u3002" ) ; cnfex . printStackTrace ( ) ; } catch ( SQLException sqlex ) { System . err . println ( "\u65E0\u6CD5\u8FDE\u63A5\u6570\u636E\u5E93" ) ; sqlex . printStackTrace ( ) ; } return conn ; }
tr	KEY	public synchronized void xassignL5KeyCode ( int code ) { l5 = code ; }
tr	IDF	@ Override public TIPO_OBJETO set ( TIPO_OBJETO oBean ) throws Exception { class < TIPO_OBJETO > tipo = ( class < TIPO_OBJETO > ) ( ( ParameterizedType ) getClass ( ) . getGenericSuperclass ( ) ) . getActualTypeArguments ( ) [ 0 ] ; Method metodo_getId = tipo . getMethod ( "getId" ) ; Method metodo_setId = tipo . getMethod ( "setId" , Integer . class ) ; try { oMysql . conexion ( enumTipoConexion ) ; oMysql . initTrans ( ) ; if ( ( Integer ) metodo_getId . invoke ( oBean ) == 0 ) { metodo_setId . invoke ( oBean , oMysql . insertOne ( strTabla ) ) ; } for ( Method method : tipo . getMethods ( ) ) { if ( ! method . getName ( ) . substring ( 3 ) . equalsIgnoreCase ( "id" ) ) { if ( method . getName ( ) . substring ( 0 , 3 ) . equalsIgnoreCase ( "get" ) ) { if ( ! method . getName ( ) . equals ( "getClass" ) ) { final class < ? > strTipoDevueltoMetodoGet = method . getReturnType ( ) ; String value = ( String ) method . invoke ( oBean ) . toString ( ) ; if ( strTipoDevueltoMetodoGet . getName ( ) . equals ( "java.util.Date" ) ) { SimpleDateFormat format = new SimpleDateFormat ( "yyyy-MM-dd" ) ; value = format . format ( method . invoke ( oBean ) ) ; } String strCampo = method . getName ( ) . substring ( 3 ) . toLowerCase ( Locale . ENGLISH ) ; oMysql . updateOne ( ( Integer ) metodo_getId . invoke ( oBean ) , strTabla , strCampo , value ) ; } } } } oMysql . commitTrans ( ) ; } catch ( Exception e ) { oMysql . rollbackTrans ( ) ; throw new Exception ( "GenericDao.set: Error: " + e . getMessage ( ) ) ; } finally { oMysql . desconexion ( ) ; } return oBean ; }
tr	KEY	public int getResult ( ) { return result ; }
tr	KEY	public final void setHours ( int hours ) { if ( ( hours >= 0 ) && ( hours < 24 ) ) { this . hours = hours ; } }
tr	KEY	public double getSpeed ( ) { return speed ; }
tr	IDF	public int threeSumClosest ( int [ ] num , int target ) { Arrays . sort ( num ) ; int n = num . length ; if ( n < 3 ) { int sum = 0 ; for ( int i : num ) { sum += i ; } return sum ; } int closest = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { closest += num [ i ] ; } for ( int i = 0 ; i <= n - 3 ; i ++ ) { int a = num [ i ] ; int start = i + 1 ; int end = n - 1 ; while ( start < end ) { int b = num [ start ] ; int c = num [ end ] ; if ( a + b + c == target ) { return target ; } else if ( a + b + c > target ) { end -- ; } else { start ++ ; } if ( Math . abs ( a + b + c - target ) < Math . abs ( closest - target ) ) { closest = a + b + c ; } } } return closest ; }
tr	KEY	public int getId ( ) { return id ; }
tr	IDF	public Workspace ( JSONObject json ) throws JSONException { JSONArray jPoster = json . getJSONArray ( "poster" ) ; try { for ( int i = 0 ; i < jPoster . length ( ) ; i ++ ) { switch ( ( String ) jPoster . getJSONObject ( i ) . get ( "class" ) ) { case "Grupp" : poster . add ( new Grupp ( jPoster . getJSONObject ( i ) ) ) ; break ; case "KontoPost" : poster . add ( new KontoPost ( jPoster . getJSONObject ( i ) ) ) ; break ; case "RawMaterialPost" : poster . add ( new RawMaterialPost ( jPoster . getJSONObject ( i ) ) ) ; break ; case "AktiePost" : poster . add ( new AktiePost ( jPoster . getJSONObject ( i ) ) ) ; break ; } ; } } catch ( JSONException | MalformedURLException e ) { e . printStackTrace ( ) ; } lastUpdateDate = CalendarUtil . parseMillis ( json . getLong ( "lastUpdateDate" ) ) ; showFrom = CalendarUtil . parseMillis ( json . getLong ( "showFrom" ) ) ; showTo = CalendarUtil . parseMillis ( json . getLong ( "showTo" ) ) ; }
tr	IDF	public void setDurationUnits ( String durationUnits ) { this . durationUnits = durationUnits ; }
tr	IDF	public void actionPerformed ( ActionEvent evt ) { int i = threadExpData . getProgress ( ) ; progressBar . setValue ( i ) ; progressBar . setString ( "" + i + "%" ) ; if ( threadExpData . getErrorDescription ( ) != null ) { progressBar . setValue ( 0 ) ; progressBar . setString ( null ) ; progressBar . setStringPainted ( false ) ; statusBar . setText ( threadExpData . getErrorDescription ( ) ) ; timer . stop ( ) ; } if ( i > 100 || threadExpData . isEnd ( ) ) { progressBar . setValue ( 0 ) ; progressBar . setString ( null ) ; progressBar . setStringPainted ( false ) ; statusBar . setText ( null ) ; timer . stop ( ) ; } }
tr	KEY	public void identity ( ) ;
tr	IDF	public Object nextToken ( ) throws JSONException { char c ; char q ; StringBuffer sb ; do { c = next ( ) ; } while ( Character . isWhitespace ( c ) ) ; switch ( c ) { case 0 : throw syntaxError ( "Misshaped element" ) ; case < : throw syntaxError ( "Misplaced '<'" ) ; case > : return XML . > ; case / : return XML . / ; case = : return XML . = ; case ! : return XML . ! ; case ? : return XML . QUEST ; case " : case ' : q = c ; sb = new StringBuffer ( ) ; for ( ; ; ) { c = next ( ) ; if ( c == 0 ) { throw syntaxError ( "Unterminated string" ) ; } if ( c == q ) { return sb . toString ( ) ; } if ( c == & ) { sb . append ( nextEntity ( c ) ) ; } else { sb . append ( c ) ; } } default : sb = new StringBuffer ( ) ; for ( ; ; ) { sb . append ( c ) ; c = next ( ) ; if ( Character . isWhitespace ( c ) ) { return sb . toString ( ) ; } switch ( c ) { case 0 : return sb . toString ( ) ; case > : case / : case = : case ! : case ? : case [ : case ] : back ( ) ; return sb . toString ( ) ; case < : case " : case ' : throw syntaxError ( "Bad character in a name" ) ; } } } }
tr	KEY	public CSha1Hash ( ) { }
tr	IDF	public int compareTo ( FTreeList < Elt > obj ) { if ( obj == this ) return 0 ; else if ( obj == null || ! ( obj instanceof FTreeList ) || ! eql ( elt_comp , ( ( FTreeList ) obj ) . elt_comp ) ) throw new ClassCastException ( ) ; else return compareTo ( tree , ( ( FTreeList ) obj ) . tree ) ; }
tr	IDF	@ Override public void modelPropertyChange ( PropertyChangeEvent evt ) { }
tr	KEY	public void setNumberLine ( int numberLine ) { this . numberLine = numberLine ; }
tr	KEY	public void setCant_pack ( int cant_pack ) { this . cant_pack = cant_pack ; }
tr	IDF	@ WebResult ( name = "return" , targetNamespace = "" ) @ RequestWrapper ( localName = "countMessages" , targetNamespace = "http://api.soap.mytxtbuddy.com/" , className = "com.dreamoval.mytxtbuddy.api.proxy.CountMessages" ) @ WebMethod @ ResponseWrapper ( localName = "countMessagesResponse" , targetNamespace = "http://api.soap.mytxtbuddy.com/" , className = "com.dreamoval.mytxtbuddy.api.proxy.CountMessagesResponse" ) public java . lang . String countMessages ( @ WebParam ( name = "username" , targetNamespace = "" ) java . lang . String username , @ WebParam ( name = "password" , targetNamespace = "" ) java . lang . String password ) ;
tr	IDF	public String cookieLogin ( ) throws Exception { logger . info ( "user cookieLogin start." ) ; user = CookieUtils . getCookie ( request ) ; if ( user != null ) { String login = userServiceImpl . cookieLogin ( user , session ) ; if ( login != null ) { this . setMsg ( login ) ; CookieUtils . cleanCookie ( request , response ) ; logger . info ( "user cookieLogin end." ) ; return ResultConstants . LOGIN_FAIL ; } User currUser = ( User ) session . get ( OtherConstants . CURRENT_USER ) ; if ( OtherConstants . ADMIN_GROUP_ID . equals ( currUser . getAuth ( ) ) ) { logger . info ( "Admin user login system !" ) ; return ResultConstants . LOGIN_SUCCESS_ADMIN ; } if ( OtherConstants . USER_GROUP_ID . equals ( currUser . getAuth ( ) ) ) { logger . info ( "A user login system !" ) ; return ResultConstants . LOGIN_SUCCESS_USER ; } } CookieUtils . cleanCookie ( request , response ) ; logger . info ( "user cookieLogin end." ) ; return ResultConstants . LOGIN_FAIL ; }
tr	IDF	public ArrayList < Integer > getPage ( String strTabla , int intRegsPerPage , int intPagina , ArrayList < FilterBean > alFilter , HashMap < String , String > hmOrder ) throws Exception ;
tr	IDF	public void setName ( String name ) { this . name = name ; }
tr	IDF	public int getDigitAt ( int row , int col ) { return solutionKnitter . extractBoard ( ) [ row ] [ col ] ; }
tr	IDF	@ Test public void testEquals ( ) { XmlField a = new XmlField ( "aa" , FieldFormatEnum . STRING ) ; XmlField a1 = new XmlField ( "aa" , FieldFormatEnum . STRING ) ; assert . assertTrue ( a . equals ( a1 ) ) ; }
tr	IDF	@ Override public void setReciever ( String reciever ) { recieve = reciever ; }
tr	KEY	public JoystickButton getButtonY ( ) { return new JoystickButton ( this , BUTTON_Y ) ; }
tr	IDF	@ Override public A apply ( A a ) { if ( smap . containsKey ( a ) ) return smap . get ( a ) ; return a ; }
tr	IDF	public static String getParameterWithEndInsertStatement ( int parameter ) { return Integer . toString ( parameter ) + EndInsert ; }
tr	IDF	public void setTitle ( String title ) { this . title = title ; }
tr	KEY	@ Override public void CALL ( int i , long l ) { }
tr	IDF	public MainWindow ( ) { setDefaultCloseOperation ( JFrame . DISPOSE_ON_CLOSE ) ; }
tr	IDF	public static INDIBLOBProperty createSaveableBLOBProperty ( INDIDriver driver , String name , String label , String group , PropertyStates state , PropertyPermissions permission , int timeout ) throws IllegalArgumentException { INDIBLOBProperty bp = loadBLOBProperty ( driver , name ) ; if ( bp == null ) { bp = new INDIBLOBProperty ( driver , name , label , group , state , permission , timeout ) ; bp . setSaveable ( true ) ; } return bp ; }
tr	IDF	public Msg [ ] findByMsgType ( String typeMsg ) throws MsgDaoException ;
tr	KEY	private int getMissileSize ( int index ) { int iMissileFactorIndex = 0 ; if ( index == 0 ) iMissileFactorIndex = ( getRegister ( NUSIZ0 ) & 18 ) >> 4 ; else if ( index == 1 ) iMissileFactorIndex = ( getRegister ( NUSIZ1 ) & 18 ) >> 4 ; else return 1 ; switch ( iMissileFactorIndex ) { case 0 : return MISSILE_SINGLE_SIZE ; case 1 : return MISSILE_DOUBLE_SIZE ; case 2 : return MISSILE_QUAD_SIZE ; case 3 : return MISSILE_OCTA_SIZE ; } return 1 ; }
tr	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { ajoutStockjButton1ActionPerformed ( evt ) ; }
tr	KEY	public void rotateY ( double radians ) ;
tr	KEY	public int getId ( ) { return id ; }
tr	KEY	private boolean isMinHeap ( ) { return isMinHeap ( 1 ) ; }
tr	KEY	private void nextStage ( ) { }
tr	IDF	public final Pair < Integer , V > getWithIndex ( final K key ) { final int index = this . getIndex ( key ) ; if ( index < 0 ) return null ; final V value = this . get ( key ) ; return new Pair < Integer , V > ( index , value ) ; }
tr	IDF	private void printQuery ( Query q ) { System . out . println ( "########### printQuery ###############" ) ; System . out . println ( "id =" + q . getId ( ) ) ; System . out . println ( "sql =" + q . getText ( ) ) ; System . out . println ( "parameters : " ) ; for ( int i = 0 ; i < q . sizeOfParameters ( ) ; i ++ ) { System . out . println ( i + "=" + q . getParameter ( i ) ) ; } }
tr	IDF	public void displayControls ( ) { this . displayBorder ( ) ; System . out . println ( "\tCONTROLS" + "\n\tUse arrow keys to change direction" + "\n\tPress \"P\" to pause" + "\n\tPress \"Q\" to quit" ) ; this . displayBorder ( ) ; }
tr	KEY	public SurveyDAO ( ) { super ( Survey . class ) ; }
tr	KEY	public String getTableName ( ) { return "socialnetwork.msg" ; }
tr	KEY	public JSONStringer ( ) { super ( new StringWriter ( ) ) ; }
tr	IDF	public int findRightNearestChild ( DependencyArcList arclis , int pid , int id ) { int ret = - 1 ; int st = arclis . startIndex ( pid ) ; int en = arclis . endIndex ( pid ) ; for ( int i = st ; i < en ; ++ i ) if ( arclis . get ( i ) > id ) { ret = arclis . get ( i ) ; break ; } return ret ; }
tr	KEY	public abstract void update ( ) ;
tr	IDF	private void tryAddPieceRotations ( final Piece piece , final PieceAtom pieceAtom , final boolean [ ] [ ] mask ) { if ( piece . canRotate ) { boolean [ ] [ ] [ ] masks = new boolean [ 4 ] [ ] [ ] ; masks [ 0 ] = mask ; addPiecePart ( piece , pieceAtom , mask ) ; for ( int r = 0 ; r < 3 ; ++ r ) { masks [ r + 1 ] = maskRotate ( masks [ r ] ) ; boolean found = false ; for ( int i = 0 ; i <= r ; ++ i ) { if ( MaskUtils . areTheSame ( masks [ i ] , masks [ r + 1 ] ) ) { found = true ; break ; } } if ( ! found ) { addPiecePart ( piece , pieceAtom , masks [ r + 1 ] ) ; } } } else { addPiecePart ( piece , pieceAtom , mask ) ; } }
tr	IDF	public GitUpdate ( String gitPath , String folder ) { this . gitPath = gitPath ; this . folder = folder ; this . commandLine = gitUpdate ( gitPath , folder ) ; }
tr	IDF	@ Test ( timeout = TIMEOUT ) public void testingInsertThreeLevels ( ) { Integer [ ] testArray = { 0 , 1 , 2 , 3 , 4 , 5 } ; insertArray ( testArray ) ; assertTrue ( "Testing insertion and deletion on three levels" , deleteMinTest ( testArray ) ) ; }
tr	IDF	public boolean canFlip ( int segmentNum ) { Segment a = go_left_pair_ . right . getSegment ( segmentNum ) ; Segment b = go_left_pair_ . left . getSegment ( segmentNum ) ; return ( a . pos == b . pos ) && ( a . vel == b . vel ) ; }
tr	IDF	private void addComponents ( ) { this . add ( createTimerPanel ( ) ) ; this . add ( ( Component ) this . viewer ) ; this . add ( createMinesNumberPanel ( ) ) ; this . board . getClock ( ) . addObserver ( createObserver ( ) ) ; }
tr	IDF	public InputterTicTacToe ( ) { inputs = 9 ; outputs = 2 ; name = "TicTacToe" ; }
tr	IDF	@ Test public void testGetMinimumOreVolumeMultiple ( ) throws Exception { System . out . println ( "--- testGetMinimumOreVolumeMultiple()" ) ; ReprocessingPlantImpl rp = new ReprocessingPlantImpl ( ) ; rp . setSecurityStatus ( .5 ) ; rp . setSovereignty ( Sovereignty . empires ( ) ) ; rp . setUserStatistics ( 1.0 , 0.00 ) ; long [ ] minerals = { 10000 , 5000 , 300 , 1000 , 80 , 0 , 0 , 0 } ; ReprocessingSolution solution = rp . getMinimumOreVolume ( minerals ) ; assert . assertNotNull ( "Solution was not found" , solution ) ; for ( Map . Entry < Ore , long > entry : solution . getOreList ( ) . entrySet ( ) ) { System . out . printf ( "%s - %d m^3%n" , entry . getKey ( ) . getName ( ) , entry . getValue ( ) ) ; } assert . assertTrue ( solution . getOres ( ) . contains ( OreList . get ( ) . getOreByName ( "Omber" ) ) ) ; assert . assertTrue ( solution . getOres ( ) . contains ( OreList . get ( ) . getOreByName ( "Pyroxeres" ) ) ) ; assert . assertTrue ( solution . getOres ( ) . contains ( OreList . get ( ) . getOreByName ( "Scordite" ) ) ) ; }
tr	KEY	public void tick ( ) ;
tr	IDF	void executa ( NotaFiscal nf ) ;
tr	KEY	public void setHide ( int hide ) { this . hide = hide ; }
tr	KEY	@ BeforeMethod public void setUpMethod ( ) throws Exception { }
tr	IDF	@ Test public void testSize ( ) { assertEquals ( 3 , new MultOperator ( new Constant ( 6 ) , new Variable ( "x" ) ) . getSubtreeSize ( ) ) ; }
tr	IDF	public void run ( String tablename ) { StringBuffer xml = new StringBuffer ( ) ; String sql = "select * from " + tablename ; try { Statement stmt = connection . createStatement ( ) ; try { ResultSet rs = stmt . executeQuery ( sql ) ; try { Collection < SqlTypesEnum > fields = SqlTypesEnum . getColumns ( connection . getMetaData ( ) , schema , tablename . toUpperCase ( ) ) ; boolean first = true ; int position = 0 ; int old_position = 0 ; xml . append ( "<line name=\"" + tablename + "\" tablename=\"" + tablename + "\">" ) ; xml . append ( System . lineSeparator ( ) ) ; xml . append ( "  <key value=\"" + tablename + "#\" startposition=\"0\" size=\"" + ( tablename . length ( ) + 1 ) + "\"/>" ) ; xml . append ( System . lineSeparator ( ) ) ; position = tablename . length ( ) + 1 ; old_position = position ; while ( rs . next ( ) ) { fileWriterAsc . write ( tablename + "#" ) ; for ( SqlTypesEnum sqlTypesEnum : fields ) { String format = "MM/dd/yyyy HH:mm:ss.SSS" ; String buffer = null ; if ( ( sqlTypesEnum . getDataType ( ) == Types . TIMESTAMP ) || ( sqlTypesEnum . getDataType ( ) == Types . TIME ) || ( sqlTypesEnum . getDataType ( ) == Types . DATE ) ) { Timestamp timestamp = rs . getTimestamp ( sqlTypesEnum . getName ( ) ) ; buffer = formatWithLength ( timestamp , format . length ( ) , format ) ; position += format . length ( ) ; } else { Object object = rs . getObject ( sqlTypesEnum . getName ( ) ) ; buffer = formatWithLength ( object , sqlTypesEnum . getSize ( ) ) ; position += sqlTypesEnum . getSize ( ) ; } if ( first ) { xml . append ( "  <field fieldname=\"" + sqlTypesEnum . getName ( ) + "\">" ) ; if ( ( sqlTypesEnum . getDataType ( ) == Types . TIMESTAMP ) || ( sqlTypesEnum . getDataType ( ) == Types . TIME ) || ( sqlTypesEnum . getDataType ( ) == Types . DATE ) ) { xml . append ( "<datetime dateformat=\"" + format + "\"/>" ) ; } else { xml . append ( "<" ) ; xml . append ( sqlTypesEnum . getXmlType ( ) ) ; xml . append ( "/>" ) ; } xml . append ( "<position startposition=\"" + old_position + "\"" ) ; xml . append ( " size=\"" + ( position - old_position ) + "\"/>" ) ; xml . append ( "</field>" ) ; xml . append ( System . lineSeparator ( ) ) ; } old_position = position ; fileWriterAsc . write ( buffer ) ; } fileWriterAsc . write ( System . lineSeparator ( ) ) ; first = false ; } xml . append ( "</line>" ) ; xml . append ( System . lineSeparator ( ) ) ; if ( ! first ) { fileWriterXml . write ( xml . toString ( ) ) ; } } finally { rs . close ( ) ; } rs = null ; } finally { stmt . close ( ) ; } stmt = null ; } catch ( SQLException e ) { LOGGER . log ( Level . SEVERE , sql , e ) ; } catch ( IOException e ) { LOGGER . log ( Level . SEVERE , sql , e ) ; } }
tr	IDF	public static void main ( String args [ ] ) { try { for ( javax . swing . UIManager . LookAndFeelInfo info : javax . swing . UIManager . getInstalledLookAndFeels ( ) ) { if ( "Nimbus" . equals ( info . getName ( ) ) ) { javax . swing . UIManager . setLookAndFeel ( info . getClassName ( ) ) ; break ; } } } catch ( ClassNotFoundException ex ) { java . util . logging . Logger . getLogger ( Cat . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( InstantiationException ex ) { java . util . logging . Logger . getLogger ( Cat . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( IllegalAccessException ex ) { java . util . logging . Logger . getLogger ( Cat . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( javax . swing . UnsupportedLookAndFeelException ex ) { java . util . logging . Logger . getLogger ( Cat . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } java . awt . EventQueue . invokeLater ( new Runnable ( ) { public void run ( ) { try { new Cat ( ) . setVisible ( true ) ; } catch ( SQLException ex ) { Logger . getLogger ( Cat . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; } } } ) ; }
tr	KEY	public int frequencyInSeconds ( ) { return frequencyInSeconds ; }
tr	KEY	double norm ( double p ) ;
tr	IDF	public boolean accept ( File aFile ) { if ( aFile . isDirectory ( ) ) return true ; return aFile . getName ( ) . toLowerCase ( ) . endsWith ( ".bin" ) ; }
tr	KEY	public Cliente ( ) { }
tr	KEY	public boolean isOk ( ) { return ok ; }
tr	IDF	public int getIndexAt ( final double x , final double y ) { int i = 0 ; for ( Rectangle2D box : boxes ) { if ( box . contains ( x , y ) ) { return i ; } i ++ ; } return - 1 ; }
tr	IDF	@ Override public V get ( Object key ) { K alias = aliasMap . get ( key ) ; return alias == null ? null : backingMap . get ( alias ) ; }
tr	KEY	public void run ( ) { try { while ( true ) { repaint ( ) ; t . sleep ( 30 ) ; } } catch ( Exception e ) { } ; }
tr	IDF	@ SuppressWarnings ( "unchecked" ) private void initComponents ( ) { jPanel1 = new javax . swing . JPanel ( ) ; bSlideLeft = new javax . swing . JButton ( ) ; bMoveBackwards = new javax . swing . JButton ( ) ; bslideRight = new javax . swing . JButton ( ) ; bMoveForward = new javax . swing . JButton ( ) ; bLower = new javax . swing . JButton ( ) ; bRise = new javax . swing . JButton ( ) ; butRotZ = new javax . swing . JButton ( ) ; butRotY = new javax . swing . JButton ( ) ; butRotX = new javax . swing . JButton ( ) ; jButton12 = new javax . swing . JButton ( ) ; jLabel1 = new javax . swing . JLabel ( ) ; selectedObject = new javax . swing . JLabel ( ) ; jButton17 = new javax . swing . JButton ( ) ; jButton18 = new javax . swing . JButton ( ) ; objectSelector = new javax . swing . JComboBox ( ) ; vrmlFileLoader = new javax . swing . JButton ( ) ; butNewObj = new javax . swing . JButton ( ) ; JBtnDelete = new javax . swing . JButton ( ) ; jBtnCone = new javax . swing . JButton ( ) ; jbtnClientPov = new javax . swing . JButton ( ) ; jPanel2 = new javax . swing . JPanel ( ) ; setDefaultCloseOperation ( javax . swing . WindowConstants . EXIT_ON_CLOSE ) ; setTitle ( "Viewe3D" ) ; setMinimumSize ( new java . awt . Dimension ( 910 , 640 ) ) ; jPanel1 . setBackground ( new java . awt . Color ( 0 , 204 , 102 ) ) ; jPanel1 . setMaximumSize ( new java . awt . Dimension ( 900 , 90 ) ) ; jPanel1 . setMinimumSize ( new java . awt . Dimension ( 900 , 90 ) ) ; jPanel1 . setPreferredSize ( new java . awt . Dimension ( 900 , 90 ) ) ; bSlideLeft . setText ( "slide left" ) ; bSlideLeft . setName ( "butSlideLeft" ) ; bSlideLeft . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { bSlideLeftActionPerformed ( evt ) ; } } ) ; bMoveBackwards . setText ( "move backwards" ) ; bMoveBackwards . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { bMoveBackwardsActionPerformed ( evt ) ; } } ) ; bslideRight . setText ( "slide right" ) ; bslideRight . setName ( "butSlideRight" ) ; bslideRight . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { bslideRightActionPerformed ( evt ) ; } } ) ; bMoveForward . setText ( "move forward" ) ; bMoveForward . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { bMoveForwardActionPerformed ( evt ) ; } } ) ; bLower . setText ( "Lower" ) ; bLower . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { bLowerActionPerformed ( evt ) ; } } ) ; bRise . setText ( "Rise" ) ; bRise . setName ( "butRise" ) ; bRise . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { bRiseActionPerformed ( evt ) ; } } ) ; butRotZ . setText ( "Rot Z" ) ; butRotZ . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { butRotZActionPerformed ( evt ) ; } } ) ; butRotY . setText ( "Rot Y " ) ; butRotY . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { butRotYActionPerformed ( evt ) ; } } ) ; butRotX . setText ( "Rot X " ) ; butRotX . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { butRotXActionPerformed ( evt ) ; } } ) ; jButton12 . setText ( "...." ) ; jButton12 . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButton12ActionPerformed ( evt ) ; } } ) ; jLabel1 . setText ( "Selected : " ) ; jButton17 . setText ( "...." ) ; jButton17 . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButton17ActionPerformed ( evt ) ; } } ) ; jButton18 . setText ( "...." ) ; jButton18 . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButton18ActionPerformed ( evt ) ; } } ) ; objectSelector . setName ( "objectSelector" ) ; objectSelector . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { objectSelectorActionPerformed ( evt ) ; } } ) ; vrmlFileLoader . setText ( "vrml loader" ) ; vrmlFileLoader . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { vrmlFileLoaderActionPerformed ( evt ) ; } } ) ; butNewObj . setText ( "Cube" ) ; butNewObj . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { butNewObjActionPerformed ( evt ) ; } } ) ; JBtnDelete . setText ( "Delete" ) ; JBtnDelete . setName ( "deleteBtn" ) ; JBtnDelete . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { JBtnDeleteActionPerformed ( evt ) ; } } ) ; jBtnCone . setText ( "Cone" ) ; jBtnCone . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { jBtnConeActionPerformed ( evt ) ; } } ) ; jbtnClientPov . setText ( "pov" ) ; jbtnClientPov . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { jbtnClientPovActionPerformed ( evt ) ; } } ) ; javax . swing . GroupLayout jPanel1Layout = new javax . swing . GroupLayout ( jPanel1 ) ; jPanel1 . setLayout ( jPanel1Layout ) ; jPanel1Layout . setHorizontalGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( jPanel1Layout . createSequentialGroup ( ) . addContainerGap ( ) . addGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( jPanel1Layout . createSequentialGroup ( ) . addComponent ( butNewObj ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addComponent ( jBtnCone ) ) . addComponent ( bSlideLeft , javax . swing . GroupLayout . Alignment . TRAILING ) ) . addGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( jPanel1Layout . createSequentialGroup ( ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING , false ) . addComponent ( bMoveForward , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addComponent ( bMoveBackwards , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) ) ) . addGroup ( javax . swing . GroupLayout . Alignment . TRAILING , jPanel1Layout . createSequentialGroup ( ) . addGap ( 69 , 69 , 69 ) . addComponent ( JBtnDelete ) ) ) . addGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( jPanel1Layout . createSequentialGroup ( ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addComponent ( bslideRight ) . addGap ( 36 , 36 , 36 ) . addGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING , false ) . addComponent ( bRise , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addComponent ( bLower , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) ) . addGap ( 18 , 18 , 18 ) . addGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( jPanel1Layout . createSequentialGroup ( ) . addComponent ( objectSelector , javax . swing . GroupLayout . PREFERRED_SIZE , 101 , javax . swing . GroupLayout . PREFERRED_SIZE ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED , 159 , short . MAX_VALUE ) . addComponent ( jButton12 ) ) . addGroup ( jPanel1Layout . createSequentialGroup ( ) . addGap ( 0 , 0 , short . MAX_VALUE ) . addComponent ( butRotX ) ) ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( jbtnClientPov ) . addGroup ( jPanel1Layout . createSequentialGroup ( ) . addGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( butRotY ) . addGroup ( jPanel1Layout . createSequentialGroup ( ) . addGap ( 12 , 12 , 12 ) . addComponent ( jButton18 ) ) ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( jPanel1Layout . createSequentialGroup ( ) . addGap ( 12 , 12 , 12 ) . addComponent ( jButton17 ) ) . addComponent ( butRotZ ) ) ) ) . addGap ( 55 , 55 , 55 ) ) . addGroup ( jPanel1Layout . createSequentialGroup ( ) . addGap ( 44 , 44 , 44 ) . addComponent ( vrmlFileLoader ) . addGap ( 102 , 102 , 102 ) . addComponent ( jLabel1 ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addComponent ( selectedObject ) . addGap ( 0 , 0 , short . MAX_VALUE ) ) ) . addContainerGap ( ) ) ) ; jPanel1Layout . setVerticalGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( jPanel1Layout . createSequentialGroup ( ) . addGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( jPanel1Layout . createSequentialGroup ( ) . addContainerGap ( ) . addGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE ) . addComponent ( jLabel1 ) . addComponent ( selectedObject ) . addComponent ( vrmlFileLoader ) . addComponent ( JBtnDelete ) ) ) . addGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE ) . addComponent ( butNewObj ) . addComponent ( jBtnCone ) ) . addComponent ( jbtnClientPov ) ) . addGap ( 3 , 3 , 3 ) . addGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE ) . addComponent ( bMoveForward ) . addComponent ( bRise ) . addComponent ( butRotZ ) . addComponent ( butRotY ) . addComponent ( butRotX ) ) . addGap ( 0 , 0 , 0 ) . addGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( jButton12 , javax . swing . GroupLayout . Alignment . TRAILING ) . addGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE ) . addComponent ( bSlideLeft ) . addComponent ( bMoveBackwards ) . addComponent ( bslideRight ) . addComponent ( bLower ) . addComponent ( jButton17 ) . addComponent ( objectSelector , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) . addComponent ( jButton18 ) ) ) . addContainerGap ( javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) ) ) ; jButton12 . getAccessibleContext ( ) . setAccessibleName ( "to come" ) ; getContentPane ( ) . add ( jPanel1 , java . awt . BorderLayout . NORTH ) ; jPanel2 . setBackground ( new java . awt . Color ( 0 , 0 , 0 ) ) ; jPanel2 . setPreferredSize ( new java . awt . Dimension ( 400 , 300 ) ) ; jPanel2 . setLayout ( new java . awt . BorderLayout ( ) ) ; getContentPane ( ) . add ( jPanel2 , java . awt . BorderLayout . CENTER ) ; pack ( ) ; }
tr	IDF	public void resetSpriteTemplate ( ) { for ( int i = 0 ; i < spriteTemplates . length ; i ++ ) { for ( int j = 0 ; j < spriteTemplates [ i ] . length ; j ++ ) { SpriteTemplate st = spriteTemplates [ i ] [ j ] ; if ( st != null ) st . isDead = false ; } } }
tr	IDF	public void reset ( ) { followerLeft . reset ( ) ; followerRight . reset ( ) ; CommandBase . drive . resetEncoders ( ) ; }
tr	KEY	@ Override public int stackSize ( ) { return count ; }
tr	IDF	ParseResult ( K firstNode , K secondNode ) { this ( firstNode , secondNode , null ) ; }
tr	IDF	@ Override public void handle ( ActionEvent arg0 ) { ArticleTable table = new ArticleTable ( ) ; border . setCenter ( table . getTable ( vp . getArticles ( ) ) ) ; }
tr	IDF	@ Override public void remove ( IKey dado ) throws SQLException { String sql = "DELETE FROM maquina WHERE codigo = ?" ; PreparedStatement pst = connection . prepareStatement ( sql ) ; pst . setString ( 1 , dado . getIndex ( ) ) ; pst . execute ( ) ; pst . close ( ) ; }
tr	IDF	protected void drawComponentName ( Graphics2D g ) { if ( name != null ) { g . setColor ( Color . blue ) ; int fontSize = ( int ) ( ( width * 1 ) / name . length ( ) ) ; if ( fontSize > 12 ) fontSize = 12 ; g . setFont ( new Font ( Font . DIALOG , Font . PLAIN , fontSize ) ) ; float px , py ; FontMetrics fm = g . getFontMetrics ( ) ; px = ( int ) ( width - fm . stringWidth ( name ) ) / 2 ; py = ( int ) ( height - fm . getHeight ( ) ) / 2 ; int xx = ( int ) ( x ) ; int yy = ( int ) ( y ) ; g . drawString ( name , xx + px , yy + py + fm . getAscent ( ) ) ; } }
tr	IDF	@ Override public void exitBloco ( @ NotNull EnquantoParser . BlocoContext ctx ) { }
tr	KEY	public CSha256Hash ( ) { }
tr	IDF	@ Override public IKey consulta ( String chave ) throws SQLException { Chamado chamado = null ; String sql = "SELECT * FROM chamado WHERE codigo = '" + chave + "'" ; Statement stmt = connection . createStatement ( ) ; ResultSet rs = stmt . executeQuery ( sql ) ; while ( rs . next ( ) ) { chamado = new Chamado ( ) ; chamado . setCodigo ( rs . getString ( "codigo" ) ) ; chamado . setCodigoTecnico ( rs . getString ( "tecnico_codigo" ) ) ; chamado . setCodigoMaquina ( rs . getString ( "maquina_codigo" ) ) ; chamado . setTitulo ( rs . getString ( "titulo" ) ) ; chamado . setDescricao ( rs . getString ( "descricao" ) ) ; chamado . setData ( rs . getTimestamp ( "data" ) ) ; } return chamado ; }
tr	IDF	private void serialmedicamentosFieldKeyTyped ( java . awt . event . KeyEvent evt ) { if ( ! Character . isLetterOrDigit ( evt . getKeyChar ( ) ) && ! Character . isISOControl ( evt . getKeyChar ( ) ) ) { Toolkit . getDefaultToolkit ( ) . beep ( ) ; evt . consume ( ) ; } if ( serialmedicamentosField . getText ( ) . length ( ) == 45 ) { Toolkit . getDefaultToolkit ( ) . beep ( ) ; evt . consume ( ) ; JOptionPane . showMessageDialog ( this , "Serial demadiado largo." , "ADVERTENCIA" , WIDTH ) ; } }
tr	IDF	@ Override public void cluster ( ) { for ( DataPoint datapoint : data ) { competitiveLearning . trainIteration ( datapoint ) ; } for ( DataPoint datapoint : data ) { int cluster = competitiveLearning . assign ( datapoint ) ; if ( ! clusterMap . containsKey ( cluster ) ) clusterMap . put ( cluster , new ArrayList < DataPoint > ( ) ) ; clusterMap . get ( cluster ) . add ( datapoint ) ; } Set < Integer > clusterKeys = clusterMap . keySet ( ) ; clusters = new ArrayList < > ( clusterKeys . size ( ) ) ; for ( Integer cluster : clusterKeys ) { List < DataPoint > datapoints = clusterMap . get ( cluster ) ; List < Node > group = new ArrayList < Node > ( datapoints . size ( ) ) ; for ( DataPoint datapoint : datapoints ) { group . add ( new Node ( datapoint ) ) ; } clusters . add ( group ) ; } }
tr	IDF	@ Test public void testRegularRectangleBase ( ) { AngleUnitFlapPattern pattern = factory . createPattern ( LineType . VALLEY , LineType . MOUNTAIN , LineType . EMPTY , LineType . MOUNTAIN , LineType . VALLEY , LineType . MOUNTAIN , LineType . EMPTY , LineType . MOUNTAIN ) ; assertTrue ( pattern . isProbablyFoldable ( ) ) ; }
tr	IDF	public ActualizarProyecto ( ) { initComponents ( ) ; DateFormat formats = new SimpleDateFormat ( "yyyy/MM/dd" ) ; jxFechaInicio . setFormats ( formats ) ; jxFechaFinal . setFormats ( formats ) ; }
tr	KEY	public void setPriceLevel9 ( double priceLevel9 ) { this . priceLevel9 = priceLevel9 ; }
tr	KEY	public int numFoods ( ) { return foods . size ( ) ; }
tr	KEY	public void initialize ( ) { }
tr	IDF	public void setConfigService ( ConfigService configService ) { this . configService = configService ; }
tr	IDF	public ResponseTIPPBuilder setRequestPackageId ( String packageId ) { getManifestBuilder ( ) . setRequestPackageId ( packageId ) ; return this ; }
tr	KEY	static synchronized void incResizeDirtyInt ( ) { resizeDirtyInt ++ ; }
tr	KEY	public abstract Player getCurrentPlayer ( ) ;
tr	KEY	@ Override public void remove ( ) { throw new UnsupportedOperationException ( "Cannot delete column nodes." ) ; }
tr	IDF	@ Test public void testDelete ( ) { SimpleMap < String , long > map = getMapInstance ( 16 ) ; assertNull ( map . get ( "1" ) ) ; long first = new long ( 10 ) ; long second = new long ( 11 ) ; assertTrue ( map . put ( "1" , first ) ) ; assertEquals ( first , map . get ( "1" ) ) ; assertTrue ( map . putIfAbsent ( "2" , second ) ) ; assertEquals ( second , map . get ( "2" ) ) ; assertEquals ( first , map . remove ( "1" ) ) ; assertNull ( map . remove ( "1" ) ) ; assertEquals ( second , map . remove ( "2" ) ) ; assertNull ( map . remove ( "2" ) ) ; map = getMapInstance ( 3 ) ; map . put ( "foo" , 1 ) ; map . put ( "bar" , 2 ) ; assertEquals ( 2 , map . size ( ) ) ; assertEquals ( new long ( 1 ) , map . get ( "foo" ) ) ; assertEquals ( new long ( 2 ) , map . get ( "bar" ) ) ; assertEquals ( 2 , map . size ( ) ) ; assertEquals ( new long ( 1 ) , map . get ( "foo" ) ) ; assertEquals ( new long ( 2 ) , map . get ( "bar" ) ) ; assertTrue ( map . putIfAbsent ( "foobar" , 3 ) ) ; assertTrue ( map . put ( "foo" , 4 ) ) ; assertEquals ( new long ( 2 ) , map . remove ( "bar" ) ) ; }
tr	IDF	public static Matrix getRotationMatrix ( int degree ) { Matrix Mr = new Matrix ( 2 , 2 ) ; double dRad = Math . toRadians ( degree ) ; double r11 = Math . cos ( dRad ) ; double r12 = Math . sin ( dRad ) ; r11 = zeroCut ( r11 ) ; r12 = zeroCut ( r12 ) ; double r21 = - r12 ; double r22 = r11 ; double values [ ] [ ] = { { r11 , r12 } , { r21 , r22 } } ; Mr . setValue ( values ) ; return Mr ; }
tr	IDF	public OrderItemDAO ( ) throws NamingException , SQLException { lastOrderItemAutoKey = - 1 ; Context cxt = new InitialContext ( ) ; DataSource ds = ( DataSource ) cxt . lookup ( "java:/comp/env/jdbc/CartDB" ) ; con = ds . getConnection ( ) ; }
tr	KEY	public int getMax ( ) { return max ; }
tr	KEY	public Logout ( ) { super ( ) ; }
tr	IDF	@ Override public Connection crearConexion ( ) { try { class . forName ( "com.mysql.jdbc.Driver" ) ; Conexion oConexion = new Conexion ( ) ; Connection connection = DriverManager . getConnection ( "jdbc:mysql://" + Conexion . getDatabaseHost ( ) + ":" + Conexion . getDatabasePort ( ) + "/" + Conexion . getDatabaseName ( ) , Conexion . getDatabaseLogin ( ) , Conexion . getDatabasePassword ( ) ) ; return connection ; } catch ( ClassNotFoundException | SQLException ex ) { throw new RuntimeException ( ex ) ; } }
tr	IDF	void saveLecturer ( Lecturer lecturer ) ;
tr	KEY	public int getMoney ( ) { return money ; }
tr	IDF	private void continueToGame ( ) { String player1Marker = this . jtPlayer1Marker . getText ( ) ; String player2Marker = this . jtPlayer2Marker . getText ( ) ; this . dispose ( ) ; }
tr	KEY	public void setGameOver ( boolean gameOver ) { this . gameOver = gameOver ; }
tr	IDF	public String getAddress ( ) { return ctx . getUser ( ) == null ? "" : ctx . getUser ( ) . getAddress ( ) ; }
tr	KEY	public void setKeepScore ( boolean keepScore ) { this . keepScore = keepScore ; }
tr	IDF	private FieldFormatEnum ( String typeString , int typeInt ) { this . typeString = typeString ; this . typeInt = typeInt ; }
tr	KEY	protected void initialize ( ) { }
tr	KEY	public void alert ( ) ;
tr	IDF	public void render_fow ( VGraphics g , Point pcm ) { g . setTexture ( "fow/full.png" ) ; i ++ ; for ( int x = pcm . x / 64 ; x < 30 + pcm . x / 64 ; x ++ ) { for ( int y = - 10 + pcm . y / 64 ; y < 20 + pcm . y / 64 ; y ++ ) { int h = 20 ; int z = t ( point ( x , y ) ) * h ; VPoint test = VConvert . to2DPoint ( x * 64 + - pcm . x / 2 , y * 64 + 32 - pcm . y / 2 , z ) ; if ( x == 0 || x == 511 || y == 0 || y == 511 ) { g . setColor ( new Color ( 235 , 0 , 0 ) ) ; } else if ( tf ( point ( x , y ) ) > 0 ) { g . setColor ( new Color ( 235 , 235 , 235 ) ) ; } else { g . setColor ( new Color ( 135 , 135 , 135 ) ) ; } VPoint p = VConvert . to2DPoint ( x * 64 - pcm . x , y * 64 - pcm . y , z ) ; if ( tf ( point ( x , y ) ) <= 1 ) { if ( tf ( point ( x , y ) ) == 0 ) { g . setColor ( new Color ( 255 , 255 , 255 , 75 ) ) ; } else { g . setColor ( new Color ( 255 , 255 , 255 , 15 ) ) ; } g . drawRect ( ( int ) p . x , ( int ) p . y , 255 , 255 , i ) ; g . drawRect ( ( int ) p . x , ( int ) p . y , 255 , 255 , - i ) ; } } } }
tr	KEY	public int getStartCol ( ) { return startCol ; }
tr	IDF	public void send ( String message ) throws IOException { out . println ( message ) ; }
tr	IDF	@ Override protected AbstractMutableFormula goLeft ( AbstractBinaryOperator binaryOperator ) { AbstractMutableFormula left = binaryOperator . getLeft ( ) . accept ( this ) ; return binaryOperator . getInstance ( left , binaryOperator . getRight ( ) ) ; }
tr	IDF	public FeatureVector getSpanFeatureVector ( int h , int end , int punc , int bin ) { Utils . assert ( bin <= MAX_SPAN_LENGTH ) ; int pos = ( ( h * 2 + end ) * 2 + punc ) * ( MAX_SPAN_LENGTH + 1 ) + bin ; FeatureVector fv = synFactory . createSpanFeatureVector ( lfd . inst , h , end , punc , bin ) ; span [ pos ] = lfd . parameters . dotProduct ( fv ) * lfd . gamma ; return fv ; }
tr	IDF	public String toString ( ) { return "v: " + value + " p: " + priority ; }
tr	KEY	public synchronized int xgetLTRepeatDelay ( ) { return ltRD ; }
tr	IDF	public void addToFront ( E data , int count ) { if ( this . overallRoot == null ) { this . overallRoot = new MTFNode ( data , count ) ; this . size ++ ; } else { this . size ++ ; this . overallRoot = new MTFNode ( data , count , this . overallRoot ) ; this . overallRoot . next . prev = this . overallRoot ; } }
tr	KEY	public int getMaxRow ( ) { return maxRow ; }
tr	IDF	public JFrameScreen ( boolean fullscreen ) { this ( fullscreen , ( int ) Toolkit . getDefaultToolkit ( ) . getScreenSize ( ) . getWidth ( ) , ( int ) Toolkit . getDefaultToolkit ( ) . getScreenSize ( ) . getHeight ( ) ) ; }
tr	IDF	public void stopRecord ( ) { if ( recording ) { recording = false ; recordJumpLand ( ) ; endTime ( ) ; switch ( direction ) { case 1 : endRightMoveRecord ( ) ; break ; case - 1 : endLeftMoveRecord ( ) ; break ; } if ( levelScene . mario . running ) { endRunningRecord ( ) ; } if ( levelScene . mario . ducking ) { endDuckRecord ( ) ; } if ( Mario . large && ! Mario . fire ) { endLargeRecord ( ) ; } if ( Mario . fire ) { endFireRecord ( ) ; } if ( ! Mario . fire && ! Mario . large ) { endLittleRecord ( ) ; } } }
tr	IDF	T peek ( ) ;
tr	IDF	Relation executeQuery ( ) ;
tr	IDF	public boolean update ( Book book ) { return daoBook . update ( book ) ; }
tr	IDF	public static Set < Perfil > getAll ( ) throws SQLException { Set < Perfil > res = new HashSet < > ( ) ; sql = "SELECT * FROM PERFILES " ; try ( ResultSet rs = ComunDP . getData ( sql ) ) { while ( rs . next ( ) ) { res . add ( DbToObj ( rs ) ) ; } } return res ; }
tr	KEY	@ Override protected void bindSelf ( ) { this . messageManager . bind ( this ) ; this . connectionManager . bind ( this ) ; }
tr	KEY	private FastMath ( ) { }
tr	IDF	@ Override public SteeringBehaviorsV2 getSteering ( ) { return steering ; }
tr	IDF	public void win ( ) { scene = new WinScene ( ) ; scene . setSound ( sound ) ; scene . init ( ) ; }
tr	KEY	public static double nextUp ( final double a ) { return nextAfter ( a , double . POSITIVE_INFINITY ) ; }
tr	IDF	private void repaintForm ( ) { newStatement ( g . getS ( ) . getStatement ( ) ) ; newScore ( g . getAz ( ) . getPoints ( ) ) ; }
tr	KEY	public int start_production ( ) { return 1 ; }
tr	KEY	public double getPrice ( ) { return kurs ; }
tr	IDF	@ Transactional ( propagation = Propagation . SUPPORTS ) public Farm find ( String s ) { return null ; }
tr	KEY	public TBlock_Stick ( ) { super ( ) ; }
tr	IDF	@ Override public boolean equals ( Object o ) { return map . equals ( o ) ; }
tr	IDF	public List < SentItem > findAll ( ) throws SQLException { try { return sentItemRepository . findAll ( ) ; } catch ( SQLException ex ) { ex . printStackTrace ( ) ; throw new SQLException ( ex . toString ( ) ) ; } }
tr	KEY	public void desenharLinha ( int x , int y ) ;
tr	KEY	public int getT1 ( ) { return t1 ; }
tr	IDF	public User findByPrimaryKey ( UserPk pk ) throws UserDaoException { return findByPrimaryKey ( pk . getEmail ( ) ) ; }
tr	KEY	public void setTotal ( long value ) { this . total = value ; }
tr	IDF	private void insertNewRecord ( String lastName , Record record ) { List < Record > recordsList = this . records . get ( Character . toUpperCase ( lastName . charAt ( 0 ) ) ) ; synchronized ( recordsList ) { this . records . get ( Character . toUpperCase ( lastName . charAt ( 0 ) ) ) . add ( record ) ; } }
tr	IDF	@ Override public int hashCode ( ) { int result = id ; result = 31 * result + id ; result = 31 * result + ( answer != null ? answer . hashCode ( ) : 0 ) ; return result ; }
tr	IDF	public void terminateGame ( ) { try { resultsWindow . dispose ( ) ; } catch ( NullPointerException e ) { } if ( ! isClient ) { MainApplication . ticTacToePlay . registerPlayers ( ) ; } this . dispose ( ) ; TicTacToeUIApp . getApplication ( ) . getMainFrame ( ) . setVisible ( true ) ; }
tr	KEY	public int getGeometry ( ) ;
tr	IDF	@ Override public Texture getBulletTexture ( ) { return getShooter ( ) . getTexture ( ) ; }
tr	IDF	@ Override public < S , T > T visit ( Visitor < S , T > v , S state ) throws FractalException { return v . visitASTSelf ( this , state ) ; }
tr	IDF	public void setRequestReply ( String requestReply ) { this . requestReply = requestReply ; }
tr	KEY	private void displayInfo ( ) { JOptionPane . showMessageDialog ( this , "Example for input:\n1/2 + 2/3\nNeed space between operands and operation." ) ; }
tr	IDF	public void setTileMap ( TileMap tileMap ) { this . tiles = tileMap ; costMapLand = new boolean [ tiles . width ] [ tiles . height ] ; for ( int y = 0 ; y < tiles . height ; y ++ ) { for ( int x = 0 ; x < tiles . width ; x ++ ) { costMapLand [ x ] [ y ] = ! "1" . equals ( tiles . getTileProperty ( tiles . layers . get ( GROUND_LAYER ) . tiles [ x ] [ y ] . id , "landBlocked" ) ) ; } } }
tr	IDF	@ Override public ComplexValue multiply ( ComplexValue a ) { return new ComplexValue ( cv . re * a . re - cv . im * a . im , cv . re * a . im + cv . im * a . re ) ; }
tr	IDF	protected Collection < OthelloCellCapturePath > placePiece ( final int column , final int row , final OthelloPiece piece ) { final Collection < OthelloCellCapturePath > paths = new LinkedList < OthelloCellCapturePath > ( ) ; if ( grid [ column ] [ row ] != null ) { Logger . error ( "A piece already exists at {%d %d}\n" , column , row ) ; return paths ; } final OthelloPiece opponent = opposite ( piece ) ; boolean ok ; int x , y ; x = column + 1 ; ok = false ; while ( ( x < COLUMNS ) && ( grid [ x ] [ row ] == opponent ) ) { ok = true ; x ++ ; } if ( ok && ( x < COLUMNS ) && ( grid [ x ] [ row ] == piece ) ) { paths . add ( new OthelloCellCapturePath ( column , row , x , row , piece ) ) ; } x = column - 1 ; ok = false ; while ( ( x >= 0 ) && ( grid [ x ] [ row ] == opponent ) ) { ok = true ; x -- ; } if ( ok && ( x >= 0 ) && grid [ x ] [ row ] == piece ) { paths . add ( new OthelloCellCapturePath ( x , row , column , row , piece ) ) ; } y = row + 1 ; ok = false ; while ( ( y < ROWS ) && ( grid [ column ] [ y ] == opponent ) ) { ok = true ; y ++ ; } if ( ok && ( y < ROWS ) && grid [ column ] [ y ] == piece ) { paths . add ( new OthelloCellCapturePath ( column , row , column , y , piece ) ) ; } y = row - 1 ; ok = false ; while ( ( y >= 0 ) && ( grid [ column ] [ y ] == opponent ) ) { ok = true ; y -- ; } if ( ok && ( y >= 0 ) && grid [ column ] [ y ] == piece ) { paths . add ( new OthelloCellCapturePath ( column , row , column , y , piece ) ) ; } x = column + 1 ; y = row + 1 ; ok = false ; while ( ( x < COLUMNS ) && ( y < ROWS ) && ( grid [ x ] [ y ] == opponent ) ) { ok = true ; x ++ ; y ++ ; } if ( ok && ( x < COLUMNS ) && ( y < ROWS ) && grid [ x ] [ y ] == piece ) { paths . add ( new OthelloCellCapturePath ( column , row , x , y , piece ) ) ; } x = column + 1 ; y = row - 1 ; ok = false ; while ( ( x < COLUMNS ) && ( y >= 0 ) && ( grid [ x ] [ y ] == opponent ) ) { ok = true ; x ++ ; y -- ; } if ( ok && ( x < COLUMNS ) && ( y >= 0 ) && grid [ x ] [ y ] == piece ) { paths . add ( new OthelloCellCapturePath ( column , row , x , y , piece ) ) ; } x = column - 1 ; y = row + 1 ; ok = false ; while ( ( x >= 0 ) && ( y < ROWS ) && ( grid [ x ] [ y ] == opponent ) ) { ok = true ; x -- ; y ++ ; } if ( ok && ( x >= 0 ) && ( y < ROWS ) && grid [ x ] [ y ] == piece ) { paths . add ( new OthelloCellCapturePath ( column , row , x , y , piece ) ) ; } x = column - 1 ; y = row - 1 ; ok = false ; while ( ( x >= 0 ) && ( y >= 0 ) && ( grid [ x ] [ y ] == opponent ) ) { ok = true ; x -- ; y -- ; } if ( ok && ( x >= 0 ) && ( y >= 0 ) && grid [ x ] [ y ] == piece ) { paths . add ( new OthelloCellCapturePath ( column , row , x , y , piece ) ) ; } for ( final OthelloCellCapturePath path : paths ) { path . execute ( grid ) ; } return paths ; }
tr	KEY	public void setPlayerID ( int playerID ) { this . playerID = playerID ; }
tr	KEY	public boolean isLeaf ( ) { return this . getChildCount ( ) == 0 ; }
tr	KEY	public RemoveEntity ( ) { }
tr	IDF	public Snake ( Player player , int xInitial , int yInitial , short initDirection ) { super ( xInitial , yInitial ) ; this . player = player ; this . direction = initDirection ; }
tr	IDF	@ Override public void update ( ChessBoard board , int playerID ) { currBoard = board ; printBoard ( ) ; System . out . println ( "Is is currently player " + playerID + "'s turn." ) ; System . out . println ( "What would you like to do?" ) ; }
tr	KEY	public int getNodeNum ( ) { return nodeNum ; }
tr	IDF	public IdentificadorNaoDeclaradoException ( String msg ) { super ( msg ) ; }
tr	KEY	public void off ( ) { on = false ; }
tr	IDF	public void setParent ( Ship parent ) { this . parent = parent ; }
tr	KEY	public void remove ( int key ) { this . table [ key ] = null ; this . filledSize -- ; }
tr	IDF	public LineType getLast ( ) { return lines . get ( size ( ) - 1 ) ; }
tr	KEY	public Building getCopy ( ) { return new JumpBuilding ( this . start , this . lenght , this . floor ) ; }
tr	IDF	private static Font createFont ( FontDef fontDef ) { try { InputStream is = new FileInputStream ( fontDef . filePath ) ; return Font . createFont ( Font . TRUETYPE_FONT , is ) . deriveFont ( fontDef . size ) ; } catch ( FontFormatException | IOException e ) { e . printStackTrace ( ) ; return null ; } }
tr	IDF	public String writeBegin ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( "+=============================================================================+" ) ; sb . append ( System . lineSeparator ( ) ) ; sb . append ( "|" ) ; sb . append ( System . lineSeparator ( ) ) ; sb . append ( "|    " + RessourceReporting . getString ( "PROCESS_TYPE_LINE" ) + " : " + getName ( ) ) ; sb . append ( System . lineSeparator ( ) ) ; sb . append ( "|  ---------------------------------------------------------------------------+" ) ; return sb . toString ( ) ; }
tr	IDF	public BoardViewerSwing ( CellViewerFactory cellFactory , ActionFactory < Action > factory ) { super ( ) ; this . cellViewerFactory = cellFactory ; this . actionFactory = factory ; this . viewers = null ; }
tr	IDF	public void setId ( String value ) { this . id = value ; }
tr	KEY	@ Override public boolean isNatural ( ) { return false ; }
tr	KEY	public double getValorAtual ( ) { return valorAtual ; }
tr	KEY	private final void handleNotExists ( ) throws FileNotOnDiskException { throw new FileNotOnDiskException ( this . toString ( ) , null ) ; }
tr	IDF	public static String byteArrayToString ( byte [ ] a , boolean space , int split ) { if ( a == null ) return "NULL" ; String sep = space ? " " : "" ; String result = "" ; String onebyte = null ; for ( int i = 0 ; i < a . length ; i ++ ) { if ( i != 0 && ( i % split ) == 0 ) { result = result + "\n" ; } onebyte = Integer . toHexString ( a [ i ] ) ; if ( onebyte . length ( ) == 1 ) onebyte = "0" + onebyte ; else onebyte = onebyte . substring ( onebyte . length ( ) - 2 ) ; result = result + onebyte . toUpperCase ( ) + sep ; } return result ; }
tr	IDF	double value ( Individual < T > individual ) ;
tr	IDF	public DomainList ( int n , int maxValue ) { numVariables = n ; domains = new ArrayList < LinkedHashSet < Integer >> ( n ) ; for ( int i = 0 ; i < n ; i ++ ) { LinkedHashSet < Integer > dom = new LinkedHashSet < Integer > ( ) ; domains . add ( dom ) ; } }
tr	KEY	public void changeDirection ( int playerID , char newDirection ) ;
tr	KEY	protected int getStartId ( ) { return this . startId ; }
tr	KEY	public abstract int mult ( int a , int b ) ;
tr	IDF	private void moveImportedFile ( String exportFileLocation , String fileName ) { try { File doneFolder = new File ( exportFileLocation + "article_done" ) ; if ( ! doneFolder . exists ( ) ) { doneFolder . mkdir ( ) ; } String sourceFilePath = exportFileLocation + fileName ; String doneLocation = exportFileLocation + "article_done" + File . separator + fileName ; File sourceFile = new File ( sourceFilePath ) ; if ( sourceFile . exists ( ) ) { if ( sourceFile . renameTo ( new File ( doneLocation ) ) ) { log . debug ( "Import done move file {} to done dir" , fileName ) ; } else { throw new MoveFileException ( "Can not move finish article file to done folder" ) ; } } } catch ( Exception e ) { e . printStackTrace ( ) ; } }
tr	KEY	public static GrupService getGrupService ( ) { return grupService ; }
tr	IDF	private void goToNextLeaf ( ) { int _recLevel = recLevel ; final Side [ ] _sides = sides ; _recLevel -- ; while ( _sides [ _recLevel ] == Side . RIGHT ) { if ( _recLevel == 0 ) { recLevel = 0 ; done = true ; return ; } _recLevel -- ; } _sides [ _recLevel ] = Side . RIGHT ; System . arraycopy ( recCurveStack [ _recLevel ] , 0 , recCurveStack [ _recLevel + 1 ] , 0 , 8 ) ; _recLevel ++ ; recLevel = _recLevel ; goLeft ( ) ; }
tr	KEY	public int getY ( ) { return location . getY ( ) ; }
tr	KEY	public DeleteAllResponse createDeleteAllResponse ( ) { return new DeleteAllResponse ( ) ; }
tr	KEY	public OutputStub ( ) { super ( 60 , 30 , "y" ) ; }
tr	KEY	public static Modification insert ( ) { return INSERT ; }
tr	KEY	public String getUrlAppend ( ) { return this . append ; }
tr	KEY	public void setPriceValue ( float priceValue ) { this . priceValue = priceValue ; }
tr	KEY	public void setDiscontinued ( boolean discontinued ) { this . discontinued = discontinued ; }
tr	KEY	public int getId ( ) { return id ; }
tr	IDF	@ Test public void testUnknownAction ( ) { JsonObject request = new JsonObject ( ) . putString ( "action" , "unknown" ) . putString ( "key" , "name" ) . putString ( "value" , "@muraken720" ) ; container . logger ( ) . info ( "request message: " + request ) ; RxEventBus rxEventBus = new RxEventBus ( vertx . eventBus ( ) ) ; Observable < RxMessage < JsonObject >> obs = rxEventBus . send ( "muraken720.vertx.mod.testexample" , request ) ; obs . subscribe ( reply -> { JsonObject json = reply . body ( ) ; container . logger ( ) . info ( "response message: " + json ) ; assertEquals ( "error" , json . getString ( "status" ) ) ; assertEquals ( "unknown action." , json . getString ( "message" ) ) ; testComplete ( ) ; } ) ; }
tr	KEY	public int size ( ) { return treeSize ( tree ) ; }
tr	IDF	public static Font getFont ( String resourceRef , int fontSize ) { if ( ! fonts . containsKey ( resourceRef ) ) { Font font = loadFont ( resourceRef ) ; fonts . put ( resourceRef , font ) ; } return fonts . get ( resourceRef ) . deriveFont ( ( float ) fontSize ) ; }
tr	KEY	public Test ( ) { }
tr	IDF	public Msg [ ] findByDynamicWhere ( String sql , Object [ ] sqlParams ) throws MsgDaoException { final boolean isConnSupplied = ( userConn != null ) ; Connection conn = null ; PreparedStatement stmt = null ; ResultSet rs = null ; try { conn = isConnSupplied ? userConn : ResourceManager . getConnection ( ) ; final String SQL = SQL_SELECT + " WHERE " + sql ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Executing " + SQL ) ; } stmt = conn . prepareStatement ( SQL ) ; stmt . setMaxRows ( maxRows ) ; for ( int i = 0 ; sqlParams != null && i < sqlParams . length ; i ++ ) { stmt . setObject ( i + 1 , sqlParams [ i ] ) ; } rs = stmt . executeQuery ( ) ; return fetchMultiResults ( rs ) ; } catch ( Exception _e ) { logger . error ( "Exception: " + _e . getMessage ( ) , _e ) ; throw new MsgDaoException ( "Exception: " + _e . getMessage ( ) , _e ) ; } finally { ResourceManager . close ( rs ) ; ResourceManager . close ( stmt ) ; if ( ! isConnSupplied ) { ResourceManager . close ( conn ) ; } } }
tr	IDF	public static void main ( String [ ] args ) { String [ ] tmp = args [ 0 ] . split ( "x" ) ; long tmp1 = long . parseLong ( tmp [ 1 ] , 16 ) ; findLoop ( tmp1 ) ; }
tr	KEY	public ISPViolationTest ( ) { }
tr	IDF	public void on ( ) { level = 100 ; System . out . println ( "Light is on" ) ; }
tr	IDF	public void __doGet ( HttpServletRequest req , HttpServletResponse resp ) throws IOException , ServletException { resp . setContentType ( "text/plain" ) ; resp . getWriter ( ) . println ( "Ouch... not implemented yet :(" ) ; }
tr	KEY	public ChampDeBataille getChampDeBataille ( ) { return this . champ_de_bataille ; }
tr	IDF	@ Override public User getUserByPK ( String email ) { try { IUserDao _dao = getIUserDao ( ) ; User _result = _dao . findByPrimaryKey ( email ) ; return _result ; } catch ( Exception _e ) { _e . printStackTrace ( ) ; } return null ; }
tr	KEY	public static final int [ ] getTermRange ( ) { return termRange ; }
tr	KEY	public void setSub ( boolean - ) { this . - = - ; }
tr	KEY	public void setTakt ( double takt ) { this . takt = takt ; }
tr	IDF	public ElementaryFileObjectDirectory ( ObjectDirectoryEntry [ ] entries ) { this . entries = entries ; }
tr	KEY	public long [ ] toArray ( ) { return map . keys ( ) ; }
tr	IDF	private static String toHex ( byte [ ] array ) { BigInteger bi = new BigInteger ( 1 , array ) ; String hex = bi . toString ( 16 ) ; int paddingLength = ( array . length * 2 ) - hex . length ( ) ; if ( paddingLength > 0 ) return String . format ( "%0" + paddingLength + "d" , 0 ) + hex ; else return hex ; }
tr	IDF	public void keyTyped ( java . awt . event . KeyEvent evt ) { txtHijosKeyTyped ( evt ) ; }
tr	KEY	@ AfterMethod public void tearDownMethod ( ) throws Exception { }
tr	IDF	public Profile [ ] findWhereHobbyEquals ( String hobby ) throws ProfileDaoException ;
tr	IDF	@ Override public String getNameAndValueAsString ( ) { return getName ( ) + " - " + getValue ( ) ; }
tr	KEY	public int getWidth ( ) { return bounds . getWidth ( ) ; }
tr	IDF	int clip ( double t , int lo , int hi ) { return ( int ) ( t < lo ? lo : t > hi ? hi : t ) ; }
tr	IDF	public void setRoles ( List < Role > roles ) { this . roles = roles ; }
tr	IDF	private void jMenuItem18ActionPerformed ( java . awt . event . ActionEvent evt ) { new About ( ) . setVisible ( true ) ; }
tr	IDF	public void move ( ) { if ( deadTime > 0 ) { for ( int i = 0 ; i < 8 ; i ++ ) { world . addSprite ( new Sparkle ( ( int ) ( x + Math . random ( ) * 8 - 4 ) + 4 , ( int ) ( y + Math . random ( ) * 8 - 4 ) + 2 , ( float ) Math . random ( ) * 2 - 1 - facing , ( float ) Math . random ( ) * 2 - 1 , 0 , 1 , 5 ) ) ; } spriteContext . removeSprite ( this ) ; return ; } if ( facing != 0 ) anim ++ ; float sideWaysSpeed = 8f ; if ( xa > 2 ) { facing = 1 ; } if ( xa < - 2 ) { facing = - 1 ; } xa = facing * sideWaysSpeed ; world . checkFireballCollide ( this ) ; xFlipPic = facing == - 1 ; runTime += ( Math . abs ( xa ) ) + 5 ; xPic = ( anim ) % 4 ; if ( ! move ( xa , 0 ) ) { die ( ) ; } onGround = false ; move ( 0 , ya ) ; if ( onGround ) ya = - 10 ; ya *= 0.95f ; if ( onGround ) { xa *= GROUND_INERTIA ; } else { xa *= AIR_INERTIA ; } if ( ! onGround ) { ya += 1.5 ; } }
tr	KEY	public int getYear ( ) { return year ; }
tr	KEY	public ProgramTree ( ) { }
tr	IDF	@ Override protected boolean validarCampos ( ) { if ( jTFDescricao . getText ( ) . trim ( ) . isEmpty ( ) ) { JOptionPane . showMessageDialog ( this , "\u00C9 obrigat\u00F3rio o preenchimento do campo 'Descricao'" , "Aviso" , JOptionPane . WARNING_MESSAGE ) ; return false ; } return true ; }
tr	IDF	public void displayDbProperties ( ) { java . sql . DatabaseMetaData dm = null ; java . sql . ResultSet rs = null ; try { con = this . getConnection ( ) ; if ( con != null ) { dm = con . getMetaData ( ) ; LOGGER . finest ( "Driver Information" ) ; LOGGER . finest ( "\tDriver Name: " + dm . getDriverName ( ) ) ; LOGGER . finest ( "\tDriver Version: " + dm . getDriverVersion ( ) ) ; LOGGER . finest ( "\nDatabase Information " ) ; LOGGER . finest ( "\tDatabase Name: " + dm . getDatabaseProductName ( ) ) ; LOGGER . finest ( "\tDatabase Version: " + dm . getDatabaseProductVersion ( ) ) ; LOGGER . finest ( "Avalilable Catalogs " ) ; rs = dm . getCatalogs ( ) ; while ( rs . next ( ) ) { LOGGER . finest ( "\tcatalog: " + rs . getString ( 1 ) ) ; } rs . close ( ) ; rs = null ; closeConnection ( ) ; } else LOGGER . severe ( "Error: No active Connection" ) ; } catch ( Exception e ) { LOGGER . log ( Level . SEVERE , e . getLocalizedMessage ( ) , e ) ; } dm = null ; }
tr	IDF	public void setDim ( int dim ) throws ConnectException { int maxDim = dim ; for ( InputConnector ic : input ) { if ( ic . isConnected ( ) ) { if ( dim != 0 && ic . getSource ( ) . getDim ( ) != dim ) throw new ConnectException ( ic . getSource ( ) , dim ) ; if ( maxDim < ic . getDim ( ) ) maxDim = ic . getDim ( ) ; } } if ( output . getDim ( ) != maxDim ) { output . setDim ( maxDim ) ; for ( InputConnector ic : output . getConnected ( ) ) { ic . getParent ( ) . setDim ( maxDim ) ; } } }
tr	IDF	public String verifyAllFields ( ) { String result = "" ; result += _answerLocationPanel . verifyFields ( ) ; if ( _questionTextField . getText ( ) . equals ( "" ) ) { result += " Question field needs to be filled in." ; } return result ; }
tr	KEY	@ Override public void stop ( ) { }
tr	KEY	public DateComparer ( boolean sortDown ) { super ( sortDown ) ; }
tr	KEY	public long getId ( ) { return id ; }
tr	IDF	@ AfterClass public static void tearDownClass ( ) throws Exception { ic . unbind ( "java:/comp/env/jdbc/CartDB" ) ; ic . unbind ( "java:/comp/env/jdbc" ) ; ic . unbind ( "java:/comp/env" ) ; ic . unbind ( "java:/comp" ) ; ic . unbind ( "java:" ) ; }
tr	KEY	public void setDuration ( double duration ) { this . duration = duration ; }
tr	IDF	TIPPTask getTask ( ) { return task ; }
tr	KEY	public String getPublicKey ( ) { return "" ; }
tr	IDF	public char read ( ) throws IOException { if ( isPriorEndLine ) { lineno ++ ; position = - 1 ; nextLine = source . readLine ( ) ; if ( nextLine != null ) { System . out . println ( "READLINE:   " + nextLine ) ; } isPriorEndLine = false ; } if ( nextLine == null ) { throw new IOException ( ) ; } if ( nextLine . length ( ) == 0 ) { isPriorEndLine = true ; return   ; } position ++ ; if ( position >= nextLine . length ( ) ) { isPriorEndLine = true ; return   ; } return nextLine . charAt ( position ) ; }
tr	IDF	public void createInitialLayout ( IPageLayout layout ) { layout . setEditorAreaVisible ( false ) ; final IFolderLayout leftFolder = layout . createFolder ( FOLDER_ID_LEFT , IPageLayout . LEFT , 1.0f , IPageLayout . ID_EDITOR_AREA ) ; leftFolder . addView ( TianPanView . ID ) ; leftFolder . addView ( DaYunView . ID ) ; leftFolder . addView ( LiuNianView . ID ) ; }
tr	KEY	public int getId ( ) { return id ; }
tr	IDF	CircleLinkElement < Value > insertAsPrevious ( final CircleLinkElement < Value > target , final Value v ) { if ( isEmpty ( ) ) { throw new InvalidUsageException ( "Please use insertIfEmpty() for empty list." ) ; } else { throwNoSuchElementExceptionIfNotContained ( target ) ; } CircleLinkElement < Value > element = target . insertAsPrevious ( v ) ; elements . add ( element ) ; return element ; }
tr	IDF	@ Override public void putNewLine ( ) throws ParsingException { currentHandler . putNewLine ( ) ; }
tr	KEY	public void setPlanetType ( int planetType ) { this . planetType = planetType ; }
tr	IDF	public Dimension imageSize ( ) { Dimension dimension = getSize ( ) ; Dimension boardSIze = getGame ( ) . getBoardSize ( ) ; dimension = new Dimension ( dimension . width / boardSIze . width , dimension . height / boardSIze . height ) ; return dimension ; }
tr	IDF	public JSONException syntaxError ( String message ) { return new JSONException ( message + toString ( ) ) ; }
tr	KEY	public void call ( ) { fail ( "unexpected-complete: failure expected" ) ; }
tr	KEY	public String getTilesetName ( ) { return this . tilesetName ; }
tr	KEY	public double calcClock ( double clock ) { return clock + clock ; }
tr	IDF	private void initPanels ( BoardPanel board , PlayerPanel [ ] players , SharedComponentPanel shared ) { add ( shared , BorderLayout . NORTH ) ; add ( board , BorderLayout . CENTER ) ; JPanel leftColumn = new JPanel ( ) ; leftColumn . setLayout ( new BorderLayout ( ) ) ; leftColumn . setPreferredSize ( new Dimension ( 240 , 700 ) ) ; leftColumn . setBorder ( BorderFactory . createEmptyBorder ( 0 , 0 , 0 , 10 ) ) ; add ( leftColumn , BorderLayout . WEST ) ; JPanel rightColumn = new JPanel ( ) ; rightColumn . setLayout ( new BorderLayout ( ) ) ; rightColumn . setPreferredSize ( new Dimension ( 240 , 700 ) ) ; rightColumn . setBorder ( BorderFactory . createEmptyBorder ( 0 , 10 , 0 , 0 ) ) ; add ( rightColumn , BorderLayout . EAST ) ; for ( int i = 0 ; i < players . length ; i ++ ) { switch ( i ) { case 0 : leftColumn . add ( players [ i ] , BorderLayout . NORTH ) ; break ; case 1 : rightColumn . add ( players [ i ] , BorderLayout . NORTH ) ; break ; case 2 : leftColumn . add ( players [ i ] , BorderLayout . SOUTH ) ; break ; case 3 : rightColumn . add ( players [ i ] , BorderLayout . SOUTH ) ; break ; } } }
tr	IDF	private void cargarListaPerfileColor ( ) { if ( jtColores . getSelectedRow ( ) != - 1 ) { new Thread ( new Runnable ( ) { @ Override public void run ( ) { frmEspera espera = new frmEspera ( ) ; try { setCursor ( Cursor . getPredefinedCursor ( Cursor . WAIT_CURSOR ) ) ; Color c = ( Color ) jtColores . getValueAt ( jtColores . getSelectedRow ( ) , 0 ) ; jfOrden = new frmListadoPerfilesPorColor ( PedidosData . genOrdenPedidosPorColor ( pedidos , c ) ) ; jfOrden . setTitle ( "Perfiles pedidos en " + c . getColor ( ) ) ; jfOrden . setVisible ( true ) ; } finally { setCursor ( Cursor . getPredefinedCursor ( Cursor . DEFAULT_CURSOR ) ) ; espera . close ( ) ; } } } ) . start ( ) ; } else { JOptionPane . showMessageDialog ( null , "Debe seleccionar un color!" , "Listar Perfiles..." , JOptionPane . WARNING_MESSAGE ) ; } }
tr	KEY	public static Controller getInstance ( ) { if ( global == null ) { global = new Controller ( ) ; } return global ; }
tr	KEY	public ExitException ( int status ) { super ( "There is no escape!" ) ; this . status = status ; }
tr	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { jtPedidosBuscarActionPerformed ( evt ) ; }
tr	IDF	public int getScoreInGame ( BufferedImage screenshot ) { BufferedImage scoreImage = screenshot . getSubimage ( 632 , 21 , 200 , 32 ) ; int mask [ ] [ ] = new int [ scoreImage . getHeight ( ) ] [ scoreImage . getWidth ( ) ] ; for ( int y = 0 ; y < scoreImage . getHeight ( ) ; y ++ ) { for ( int x = 0 ; x < scoreImage . getWidth ( ) ; x ++ ) { final int colour = scoreImage . getRGB ( x , y ) ; mask [ y ] [ x ] = ( ( colour & 00ffffff ) == 00ffffff ) ? 1 : - 1 ; } } scoreImage = VisionUtils . int2image ( mask ) ; mask = VisionUtils . findConnectedComponents ( mask ) ; Rectangle [ ] letters = VisionUtils . findBoundingBoxes ( mask ) ; Arrays . sort ( letters , new RectLeftOf ( ) ) ; int score = 0 ; for ( int i = 0 ; i < letters . length ; i ++ ) { if ( letters [ i ] . width < 2 ) continue ; BufferedImage letterImage = scoreImage . getSubimage ( letters [ i ] . x , letters [ i ] . y , letters [ i ] . width , letters [ i ] . height ) ; final String letterHash = VisionUtils . imageDigest ( letterImage ) ; int value = 0 ; if ( letterHash . equals ( "62d05c5ce368be507a096aa6b5c68aeb" ) ) { value = 1 ; } else if ( letterHash . equals ( "518b4a3878a75aad32e23da4781e4c14" ) ) { value = 2 ; } else if ( letterHash . equals ( "be2b93e09c0f94a7c93b1b9cc675b26d" ) ) { value = 3 ; } else if ( letterHash . equals ( "3171f145ff67389b22d50ade7a13b5f7" ) ) { value = 4 ; } else if ( letterHash . equals ( "96c7dc988a5ad5aa50c3958a0f7869f4" ) ) { value = 5 ; } else if ( letterHash . equals ( "049b9aa34adf05ff2cca8cd4057a4d6b" ) ) { value = 6 ; } else if ( letterHash . equals ( "897aca1b39d4e2f6bc58b658e8819191" ) ) { value = 7 ; } else if ( letterHash . equals ( "e66e8aca895a06c1c9200b1b6b781567" ) ) { value = 8 ; } else if ( letterHash . equals ( "41c3010757c2e707146aa5d136e72c7a" ) ) { value = 9 ; } score = 10 * score + value ; } return score ; }
tr	IDF	public TEView ( int x , int y , int width , int height ) { this . x = x ; this . y = y ; this . width = width ; this . height = height ; }
tr	IDF	private void jButton2MouseClicked ( java . awt . event . MouseEvent evt ) { this . dispose ( ) ; }
tr	IDF	public static List < Integer > quicksort ( List < Integer > ints ) { if ( ints . size ( ) <= 1 ) return ints ; int mid = ints . size ( ) / 2 ; int pivot = ints . get ( mid ) ; List < Integer > less = new ArrayList < Integer > ( ) ; List < Integer > more = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < ints . size ( ) ; i ++ ) { if ( i == mid ) continue ; if ( ints . get ( i ) <= pivot ) { less . add ( ints . get ( i ) ) ; } else { more . add ( ints . get ( i ) ) ; } } return concat ( quicksort ( less ) , pivot , quicksort ( more ) ) ; }
tr	KEY	public boolean getLatinoOrHispanic ( ) { return latinoOrHispanic ; }
tr	KEY	public int getForce ( ) { return force ; }
tr	IDF	public void setAux2 ( String aux2 ) { this . aux2 = aux2 ; }
tr	IDF	@ Override protected String getName ( ) { return PersistentDocument . RESOURCE_NAME ; }
tr	KEY	protected static ExecutorService createService ( ) { return createService ( new DefaultThreadFactory ( ) ) ; }
tr	KEY	public static void main ( String [ ] args ) { }
tr	KEY	protected final Object clone ( ) { return this ; }
tr	KEY	private void handleGameOver ( ) { }
tr	IDF	public int minDepth ( TreeNode root ) { if ( root == null ) return 0 ; int lh = minDepth ( root . left ) ; int rh = minDepth ( root . right ) ; if ( lh == 0 && rh == 0 ) return 1 ; else if ( lh > 0 && rh > 0 ) return Math . min ( lh , rh ) + 1 ; else return Math . max ( lh , rh ) + 1 ; }
tr	KEY	public void setStockpro ( boolean stockpro ) { this . stockpro = stockpro ; }
tr	KEY	public final String getPage ( ) { return _page ; }
tr	IDF	public ImageWindow ( List < S > sourceList , int windowLength , int threadNum , long bufferedLimitSize , long imageLoadTimeOut ) { this . sourceList = sourceList ; this . windowLength = windowLength ; this . imageLoadTimeOut = imageLoadTimeOut ; this . windowTaskList = new ArrayList < Task > ( windowLength ) ; this . imageBufferedList = new ImageBufferedList ( sourceList . size ( ) , bufferedLimitSize ) ; for ( int i = 0 ; i < windowLength ; ++ i ) { this . windowTaskList . add ( null ) ; } this . initTreads ( threadNum ) ; this . moveWindow ( 0 ) ; }
tr	KEY	public abstract boolean clearAllComponents ( ) ;
tr	IDF	public List < String > seperateTables ( List < String > data , List < Integer > lineNums ) { List tables = new ArrayList < String > ( ) ; for ( int k = 0 ; k < lineNums . size ( ) ; k ++ ) { int start = lineNums . get ( k ) - 1 ; int i = start ; while ( ! "" . equals ( data . get ( i ) ) ) { i ++ ; } int end = i ; String [ ] entry = new String [ end - start ] ; for ( int line = start ; line < end ; line ++ ) { entry [ line - start ] = data . get ( line ) ; } tables . add ( entry ) ; } String [ ] blub = ( String [ ] ) tables . get ( 0 ) ; return tables ; }
tr	KEY	public void setAdditionalAccessoryNeeded ( boolean additionalAccessoryNeeded ) { this . additionalAccessoryNeeded = additionalAccessoryNeeded ; }
tr	IDF	@ Override public void getInput ( ) { int selection = - 1 ; boolean isValid = false ; do { this . displayMenu ( ) ; Scanner input = SnakeWithPartner . getInFile ( ) ; do { try { selection = input . nextInt ( ) ; isValid = true ; } catch ( NumberFormatException numx ) { System . out . println ( "Invalid Input. Please input a valid number." ) ; isValid = false ; } } while ( ! isValid ) ; switch ( selection ) { case 1 : this . gameOverMenuControl . repeatGame ( ) ; break ; case 2 : this . gameOverMenuControl . goToMain ( ) ; break ; case 3 : this . gameOverMenuControl . goToHighScores ( ) ; case 0 : break ; default : System . out . println ( "Please enter a valid menu item:" ) ; continue ; } } while ( selection != 0 ) ; }
tr	KEY	@ Override public void onNewTemperature ( int [ ] temperature ) { }
tr	IDF	private boolean listensToParticularDevice ( String deviceName ) { for ( int i = 0 ; i < devicesToListen . size ( ) ; i ++ ) { if ( devicesToListen . get ( i ) . isDevice ( deviceName ) ) { return true ; } } return false ; }
tr	IDF	private static void permutation ( char [ ] chars , int left , int right ) { if ( left == right ) { System . out . println ( new String ( chars ) ) ; return ; } for ( int i = left ; i < right ; i ++ ) { char tmp = chars [ left ] ; chars [ left ] = chars [ i ] ; chars [ i ] = tmp ; permutation ( chars , left + 1 , right ) ; tmp = chars [ left ] ; chars [ left ] = chars [ i ] ; chars [ i ] = tmp ; } }
tr	KEY	public abstract boolean isMilestoneDate ( Calendar date ) ;
tr	KEY	public SudokuPuzzle ( ) { super ( 0 , getRuleset ( ) ) ; }
tr	IDF	public void blit ( int layer , BufferedImage src , int destx1 , int desty1 , int destx2 , int desty2 , int srcx1 , int srcy1 , int srcx2 , int srcy2 ) { if ( this . drawAreaLayers . get ( layer ) != null && src != null ) { BufferedImage dest = this . drawAreaLayers . get ( layer ) ; dest . createGraphics ( ) . drawImage ( src , destx1 , desty1 , destx2 , desty2 , srcx1 , srcy1 , srcx2 , srcy2 , null ) ; WritableRaster raster = dest . getRaster ( ) ; for ( int j = desty1 ; j < desty2 ; j ++ ) { for ( int i = destx1 ; i < destx2 ; i ++ ) { int [ ] pixels = raster . getPixel ( i , j , ( int [ ] ) null ) ; if ( pixels [ 0 ] == 255 && pixels [ 1 ] == 0 && pixels [ 2 ] == 255 ) { pixels [ 3 ] = 0 ; raster . setPixel ( i , j , pixels ) ; } } } } }
tr	IDF	public void actionPerformed ( ActionEvent arg0 ) { if ( arg0 . getSource ( ) == view . getBoutonOrientation ( ) ) { orientation = ! ( orientation ) ; } else if ( arg0 . getSource ( ) == view . getBoutonAuto ( ) ) { autoPlacement ( ) ; } else if ( arg0 . getSource ( ) == view . getBoutonAnnuler ( ) ) { annulerPlacement ( ) ; } else if ( arg0 . getSource ( ) == view . getBoutonValider ( ) ) { validerPlacement ( ) ; } }
tr	IDF	Set < String > nearbyCharacters ( String character ) ;
tr	KEY	public String getCode ( ) { return this . code ; }
tr	KEY	@ Override public boolean equals ( Object obj ) { if ( ! ( obj instanceof Bomb ) ) return false ; return super . equals ( obj ) ; }
tr	KEY	public void setPixel ( int x , int y , int rgb [ ] ) { }
tr	KEY	public int getSizeY ( ) { return this . newSizeY ; }
tr	IDF	public UdpServer ( int port ) { try { socket = new DatagramSocket ( port ) ; } catch ( SocketException e ) { e . printStackTrace ( ) ; } }
tr	IDF	public void rotationToRotationState ( int rotationState ) { int rotations = ( rotationState - getRotationState ( ) + 4 ) % 4 ; for ( int x = 0 ; x < rotations ; ++ x ) rotate ( ) ; }
tr	KEY	public void setDfNumber ( int dfNumber ) { this . dfNumber = dfNumber ; }
tr	IDF	public Msg [ ] findWhereMailerEquals ( String mailer ) throws MsgDaoException ;
tr	KEY	public void run ( ) { new frmBuscarPedidos ( ) . setVisible ( true ) ; }
tr	IDF	@ Override public void setAttribute ( String name , Object value ) { if ( "model" . equals ( name ) ) { nextModel = ( String ) value ; } if ( "ammo" . equals ( name ) ) { try { int tmp = Integer . parseInt ( ( String ) value ) ; if ( tmp >= 0 && tmp <= 4 ) nextAmmo = tmp ; } catch ( Exception e ) { } } if ( "Kill" . equals ( name ) ) { if ( hp > 0 ) takeHp ( hp , this ) ; } super . setAttribute ( name , value ) ; }
tr	KEY	public WhileTree ( ) { }
tr	IDF	static void subdivideCubic ( float [ ] src , int srcoff , float [ ] left , int leftoff , float [ ] right , int rightoff ) { float x1 = src [ srcoff + 0 ] ; float y1 = src [ srcoff + 1 ] ; float ctrlx1 = src [ srcoff + 2 ] ; float ctrly1 = src [ srcoff + 3 ] ; float ctrlx2 = src [ srcoff + 4 ] ; float ctrly2 = src [ srcoff + 5 ] ; float x2 = src [ srcoff + 6 ] ; float y2 = src [ srcoff + 7 ] ; if ( left != null ) { left [ leftoff + 0 ] = x1 ; left [ leftoff + 1 ] = y1 ; } if ( right != null ) { right [ rightoff + 6 ] = x2 ; right [ rightoff + 7 ] = y2 ; } x1 = ( x1 + ctrlx1 ) / 2f ; y1 = ( y1 + ctrly1 ) / 2f ; x2 = ( x2 + ctrlx2 ) / 2f ; y2 = ( y2 + ctrly2 ) / 2f ; float centerx = ( ctrlx1 + ctrlx2 ) / 2f ; float centery = ( ctrly1 + ctrly2 ) / 2f ; ctrlx1 = ( x1 + centerx ) / 2f ; ctrly1 = ( y1 + centery ) / 2f ; ctrlx2 = ( x2 + centerx ) / 2f ; ctrly2 = ( y2 + centery ) / 2f ; centerx = ( ctrlx1 + ctrlx2 ) / 2f ; centery = ( ctrly1 + ctrly2 ) / 2f ; if ( left != null ) { left [ leftoff + 2 ] = x1 ; left [ leftoff + 3 ] = y1 ; left [ leftoff + 4 ] = ctrlx1 ; left [ leftoff + 5 ] = ctrly1 ; left [ leftoff + 6 ] = centerx ; left [ leftoff + 7 ] = centery ; } if ( right != null ) { right [ rightoff + 0 ] = centerx ; right [ rightoff + 1 ] = centery ; right [ rightoff + 2 ] = ctrlx2 ; right [ rightoff + 3 ] = ctrly2 ; right [ rightoff + 4 ] = x2 ; right [ rightoff + 5 ] = y2 ; } }
tr	IDF	public static BlendComposite getInstance ( BlendComposite . BlendingMode mode ) { return new BlendComposite ( mode ) ; }
tr	IDF	@ Override public int hashCode ( ) { int hash = 3 ; hash = 29 * hash + this . averageWeather ; return hash ; }
tr	KEY	public Wizard ( ) { this . name = "wizard" ; }
tr	KEY	public TopicStatisticListViewImpl ( ) { super ( "CardStatisticListView" ) ; this . initComponents ( ) ; }
tr	IDF	@ Override public void onBust ( Player currentPlayer , Score remaining ) { logger . info ( "{} busted!" , currentPlayer ) ; }
tr	IDF	public void constructDepTreeArcList ( int [ ] heads ) { for ( int i = 0 ; i < n ; ++ i ) st [ i ] = 0 ; for ( int i = 1 ; i < n ; ++ i ) { int j = heads [ i ] ; ++ st [ j ] ; } for ( int i = 1 ; i < n ; ++ i ) st [ i ] += st [ i - 1 ] ; for ( int i = n - 1 ; i > 0 ; -- i ) { int j = heads [ i ] ; -- st [ j ] ; edges [ st [ j ] ] = i ; } }
tr	IDF	public void setUsername ( String value ) { this . username = value ; }
tr	KEY	public abstract Component setImage ( ) ;
tr	KEY	public void setFileSize ( long value ) { this . fileSize = value ; }
tr	KEY	public Customer ( ) { }
tr	IDF	private JSlider createNewSlider ( int min , int max , int start , String s ) { Box panel = Box . createHorizontalBox ( ) ; add ( panel ) ; panel . add ( new JLabel ( s ) ) ; JSlider slider = new JSlider ( min , max , start ) ; panel . add ( slider ) ; return slider ; }
tr	KEY	public void keyPressed ( KeyEvent e ) { switch ( e . getKeyCode ( ) ) { case 9 : tabThroughPalaceCards ( ) ; break ; case 10 : playSelectedPalaceCard ( ) ; break ; case 27 : cancelTabbing ( ) ; break ; case 76 : dropPlayerFromFestival ( ) ; break ; case 88 : finishTurn ( ) ; } }
tr	IDF	@ Transactional ( propagation = Propagation . MANDATORY ) public BackPackers persist ( BackPackers entity ) { return null ; }
tr	IDF	public int singleNumber ( int [ ] A ) { HashMap < Integer , Integer > map = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < A . length ; i ++ ) { if ( map . containsKey ( A [ i ] ) ) { map . put ( A [ i ] , map . get ( A [ i ] ) + 1 ) ; } else { map . put ( A [ i ] , 1 ) ; } } for ( Entry < Integer , Integer > entry : map . entrySet ( ) ) { if ( entry . getValue ( ) == 1 ) { return entry . getKey ( ) ; } } return - 1 ; }
tr	KEY	@ Override public GameCharacterObject show ( ) { visible = true ; return this ; }
tr	KEY	public static void setDirectionToRight ( ) { InfoCenter . sentido = 1 ; }
tr	KEY	@ Override public int getHeight ( ) { return ( int ) ( height * scale ) ; }
tr	KEY	public int getDecimalDigits ( ) { return decimalDigits ; }
tr	KEY	public int getColumnCount ( ) { return columnNames . length ; }
tr	KEY	public static int maskCols ( final boolean [ ] [ ] mask ) { return mask [ 0 ] . length ; }
tr	KEY	public synchronized void xsetBRepeatDelay ( int a ) { bRD = a ; }
tr	KEY	protected abstract void generateMap ( ) ;
tr	KEY	public void setPagado ( boolean pagado ) { this . pagado = pagado ; }
tr	KEY	public static void stopOrdi ( ) { action_en_cours = false ; }
tr	KEY	public static Random getInstance ( ) { return random ; }
tr	IDF	@ Override public void setDim ( int dim ) throws ConnectException { this . dim = dim ; makeDynaSys ( ) ; outputY . setDim ( dim * ( order + 1 ) ) ; }
tr	KEY	public int getPoints ( ) { return points ; }
tr	KEY	public Builder loft ( double rooms ) { this . rooms = rooms ; return this ; }
tr	IDF	private Object loadValue ( String serial ) { serial = serial . trim ( ) ; if ( serial . charAt ( 0 ) == { ) { JsonObject object = new JsonObject ( serial ) ; return object ; } else if ( serial . charAt ( 0 ) == [ ) { Object [ ] arr = loadArray ( serial ) ; return arr ; } if ( serial . equals ( "\"null\"" ) || serial . equals ( "null" ) ) return null ; if ( serial . charAt ( 0 ) == " ) return serial . substring ( 1 , serial . length ( ) - 1 ) ; return serial ; }
tr	KEY	public int levelUp ( ) { level ++ ; return level ; }
tr	IDF	public Matrix ( double [ ] [ ] transform ) { for ( int i = 0 ; i < 4 ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { this . set ( j , i , transform [ i ] [ j ] ) ; } } }
tr	IDF	private void btnLoadBalgriffenMousePressed ( java . awt . event . MouseEvent evt ) { loadCourse ( manager . getCourses ( ) . get ( "Balgriffen Park" ) ) ; currentCourse = manager . getCourses ( ) . get ( "Balgriffen Park" ) ; }
tr	KEY	static boolean isPrime ( long number ) { if ( number < 2 ) return false ; for ( int i = 2 ; i <= Math . sqrt ( number ) ; i ++ ) if ( number % i == 0 ) return false ; return true ; }
tr	KEY	private void OP_SEI ( ) { setIFlag ( true ) ; }
tr	IDF	public void decrementTimeZone ( ) { TimeZone _tz = LCARSTime . getTimeZone ( ) ; int rawOffset = _tz . getRawOffset ( ) ; String [ ] tzid = TimeZone . getAvailableIDs ( rawOffset - LCARS . MILISECS_IN_HOUR ) ; if ( tzid [ 0 ] != null ) { LCARSTime . setTimeZone ( tzid [ 0 ] ) ; calendar . setTimeZone ( tzid [ 0 ] ) ; } }
tr	IDF	@ Override public String execute ( HttpServletRequest request , HttpServletResponse response ) throws Exception { String data ; try { int rpp ; if ( request . getParameter ( "rpp" ) == null ) { rpp = 10 ; } else { rpp = Integer . parseInt ( request . getParameter ( "rpp" ) ) ; } int page ; if ( request . getParameter ( "page" ) == null ) { page = 1 ; } else { page = Integer . parseInt ( request . getParameter ( "page" ) ) ; } ArrayList < FilterBean > alFilter = new ArrayList < > ( ) ; if ( request . getParameter ( "filter" ) != null ) { if ( request . getParameter ( "filteroperator" ) != null ) { if ( request . getParameter ( "filtervalue" ) != null ) { FilterBean oFilterBean = new FilterBean ( ) ; oFilterBean . setFilter ( request . getParameter ( "filter" ) ) ; oFilterBean . setFilterOperator ( request . getParameter ( "filteroperator" ) ) ; oFilterBean . setFilterValue ( request . getParameter ( "filtervalue" ) ) ; oFilterBean . setFilterOrigin ( "user" ) ; alFilter . add ( oFilterBean ) ; } } } if ( request . getParameter ( "systemfilter" ) != null ) { if ( request . getParameter ( "systemfilteroperator" ) != null ) { if ( request . getParameter ( "systemfiltervalue" ) != null ) { FilterBean oFilterBean = new FilterBean ( ) ; oFilterBean . setFilter ( request . getParameter ( "systemfilter" ) ) ; oFilterBean . setFilterOperator ( request . getParameter ( "systemfilteroperator" ) ) ; oFilterBean . setFilterValue ( request . getParameter ( "systemfiltervalue" ) ) ; oFilterBean . setFilterOrigin ( "system" ) ; alFilter . add ( oFilterBean ) ; } } } HashMap < String , String > hmOrder = new HashMap < > ( ) ; if ( request . getParameter ( "order" ) != null ) { if ( request . getParameter ( "ordervalue" ) != null ) { hmOrder . put ( request . getParameter ( "order" ) , request . getParameter ( "ordervalue" ) ) ; } else hmOrder = null ; } else hmOrder = null ; CargoDao oCargoDAO = new CargoDao ( Conexion . getConection ( ) ) ; List < CargoBean > oCargos = oCargoDAO . getPage ( rpp , page , alFilter , hmOrder ) ; data = new Gson ( ) . toJson ( oCargos ) ; data = "{\"list\":" + data + "}" ; return data ; } catch ( Exception e ) { throw new ServletException ( "CargoGetJson: View Error: " + e . getMessage ( ) ) ; } }
tr	IDF	public void setCheckInSql ( String checkInSql ) { this . checkInSql = checkInSql ; }
tr	IDF	public static void init ( ) { driveTrain = new DriveTrain ( ) ; feeder = new Feeder ( ) ; shooter = new Shooter ( ) ; compressor = new PurpleCompressor ( ) ; feederSolenoid = new FeederSolenoid ( ) ; driveSolenoid = new DriveSolenoid ( ) ; oi = new OI ( ) ; SmartDashboard . putData ( "Toggle Feeder" , new ToggleFeeder ( ) ) ; SmartDashboard . putData ( "Manage Feeder" , new ManageFeeder ( ) ) ; SmartDashboard . putData ( "Reverse Feeder" , new ReverseFeeder ( ) ) ; SmartDashboard . putBoolean ( "ShooterIsIn" , true ) ; SmartDashboard . putData ( "EncodersReset" , new EncodersReset ( ) ) ; SmartDashboard . putNumber ( "LeftEncoder" , driveTrain . left . getD ( ) ) ; SmartDashboard . putNumber ( "RightEncoder" , driveTrain . right . getD ( ) ) ; SmartDashboard . putNumber ( "LeftDriveScale" , driveTrain . leftScale ) ; SmartDashboard . putNumber ( "RightDriveScale" , driveTrain . rightScale ) ; }
tr	KEY	public int getRowCount ( ) { return data . length ; }
tr	KEY	private AbstractGame resolveGame ( ) { synchronized ( this ) { if ( this . activeGame != null ) { return this . activeGame ; } else { return null ; } } }
tr	KEY	public boolean isEndOfLine ( ) { return ( this . nextTokenLin != this . primLin ) ; }
tr	KEY	@ Override public boolean isValid ( ) { return solution != null ; }
tr	KEY	public int getMaxRows ( ) { return maxRows ; }
tr	KEY	public void translate ( double x , double y , double z ) ;
tr	IDF	public NodeLVL1 ( DraughtsState ds ) { if ( ds == null ) { throw new IllegalArgumentException ( "gs in gamenode" ) ; } NodeLVL1 . ds = ds . clone ( ) ; }
tr	KEY	public void mouseReleased ( final MouseEvent event ) { }
tr	KEY	public Listen createListen ( ) { return new Listen ( ) ; }
tr	KEY	public void setId_usuario ( int id_usuario ) { this . id_usuario = id_usuario ; }
tr	KEY	public boolean equals ( Object x ) { if ( x == this ) return true ; else if ( ! ( x instanceof MyInteger ) ) return false ; else return value == ( ( MyInteger ) x ) . value ; }
tr	IDF	public LMDrillModel ( int level , String tablename , ArrayList < Tfidf > topList ) { this . level = level ; this . tablename = tablename ; this . topList = topList ; }
tr	KEY	public static boolean isEmailAddress ( String str ) { if ( str . matches ( "^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1 3}\\.[0-9]{1 3}\\.[0-9]{1 3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2 4}|[0-9]{1 3})(\\]?)$" ) ) { return true ; } return false ; }
tr	KEY	public Page ( ) { }
tr	IDF	public void keyTyped ( java . awt . event . KeyEvent evt ) { textCelularKeyTyped ( evt ) ; }
tr	KEY	public void unlock ( ) { this . locked = false ; }
tr	KEY	public int intValue ( ) { return ( int ) value ; }
tr	IDF	Constructrs ( int a ) { System . out . println ( "this consructor has been initialized with value " + a ) ; }
tr	KEY	protected abstract T findNext ( ) ;
tr	IDF	protected WorldImpl ( WorldImpl prev ) { this . width = prev . width ; this . height = prev . height ; this . generation = prev . generation + 1 ; }
tr	IDF	public void setUsername ( String value ) { this . username = value ; }
tr	IDF	public static void main ( String [ ] args ) { Frame frameClass = new Frame ( ) ; }
tr	KEY	public float nextFloat ( ) { return next ( 24 ) / ( ( float ) ( 1 << 24 ) ) ; }
tr	IDF	private void writeQNameAttribute ( java . lang . String namespace , java . lang . String attName , javax . xml . namespace . QName qname , javax . xml . stream . XMLStreamWriter xmlWriter ) throws javax . xml . stream . XMLStreamException { java . lang . String attributeNamespace = qname . getNamespaceURI ( ) ; java . lang . String attributePrefix = xmlWriter . getPrefix ( attributeNamespace ) ; if ( attributePrefix == null ) { attributePrefix = registerPrefix ( xmlWriter , attributeNamespace ) ; } java . lang . String attributeValue ; if ( attributePrefix . trim ( ) . length ( ) > 0 ) { attributeValue = attributePrefix + ":" + qname . getLocalPart ( ) ; } else { attributeValue = qname . getLocalPart ( ) ; } if ( namespace . equals ( "" ) ) { xmlWriter . writeAttribute ( attName , attributeValue ) ; } else { registerPrefix ( xmlWriter , namespace ) ; xmlWriter . writeAttribute ( namespace , attName , attributeValue ) ; } }
tr	KEY	public boolean aindaPossuiIrmao ( ) { int posicao = this . posicaoListaAdjacencia - 1 ; int i ; for ( i = 0 ; i < this . getNoPai ( ) . getListaAdjacencia ( ) . size ( ) ; i ++ ) if ( this . getNoPai ( ) . getListaAdjacencia ( ) . get ( i ) != null ) if ( posicao == 1 ) return false ; return true ; }
tr	KEY	void getInput ( ) throws MenuException ;
tr	IDF	public List < Parameter > getParams ( ) { return params ; }
tr	KEY	public String getTableName ( ) { return "socialnetwork.inviteres" ; }
tr	KEY	public UserModel build ( ) { return new UserModel ( this ) ; }
tr	IDF	public final synchronized void closePath ( ) { if ( numTypes == 0 || pointTypes [ numTypes - 1 ] != SEG_CLOSE ) { needRoom ( true , 0 ) ; pointTypes [ numTypes ++ ] = SEG_CLOSE ; } }
tr	KEY	public long maximum ( int a , int b ) ;
tr	IDF	public void update ( ) { super . update ( ) ; if ( Mouse . isClicked ( MouseEvent . BUTTON1 ) ) { Point p = Mouse . location ( ) ; this . clicked = this . insideView ( p ) ; } else { this . clicked = false ; } this . highlighted = this . insideView ( Mouse . location ( ) ) ; }
tr	KEY	public int getId ( ) { return id ; }
tr	IDF	private static Object join ( Object left , Object right ) { if ( left == null ) return right ; else if ( right == null ) return left ; else { Object m = min ( right ) ; return concat ( m , hashCode ( m ) , left , lessMin ( right ) ) ; } }
tr	IDF	private static double toDouble ( Tuple tuple , String columnName ) { return ( ( Number ) tuple . select ( columnName ) . getValue ( ) ) . doubleValue ( ) ; }
tr	KEY	public float getMaxSpeed ( ) { return ( float ) this . dMaxSpeed ; }
tr	IDF	public TexasHoldemGame ( ArrayList < String > players , int bigBlind ) throws Exception { initialize ( ) ; this . bigBlindPos = 2 ; this . players = players ; this . bigBlind = bigBlind ; this . playerDAO = new PlayerDAO ( ) ; menuBar = new JMenuBar ( ) ; setJMenuBar ( menuBar ) ; JMenu mnGame = new JMenu ( "Juego" ) ; menuBar . add ( mnGame ) ; JMenuItem mnItemNewGame = new JMenuItem ( "Nuevo Juego" ) ; mnItemNewGame . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent arg0 ) { newGame ( ) ; } } ) ; mnGame . add ( mnItemNewGame ) ; JMenuItem mnItemExit = new JMenuItem ( "Salir" ) ; mnItemExit . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { exitGame ( ) ; } } ) ; mnGame . add ( mnItemExit ) ; }
tr	IDF	public void setSource ( String source ) { this . source = source ; }
tr	IDF	@ Override public void dispose ( ) { super . dispose ( ) ; hpCaption . dispose ( ) ; }
tr	IDF	@ Override public void setDim ( int dim ) throws ConnectException { super . setDim ( dim ) ; ip . setDim ( dim ) ; }
tr	KEY	public synchronized void xsetD1InitialDelay ( int a ) { d1ID = a ; }
tr	KEY	public void setDefaultAccel ( double defaultAccel ) { this . defaultAccel = defaultAccel ; }
tr	IDF	public void setOrder ( List < Order > orders ) { this . order = orders ; }
tr	KEY	public void windowActivated ( final WindowEvent e ) { }
tr	KEY	@ Override public void sendBroadcast ( ) { this . bluetooth . turnOnBluetooth ( this ) ; }
tr	KEY	public ICCC ( ) { }
tr	KEY	protected ContentManager ( ) { super ( ) ; }
tr	KEY	public void setId ( int id ) { this . id = id ; }
tr	IDF	public Bag ( ) { discs = new ArrayList < Disc > ( ) ; LOGGER = Logger . getLogger ( Bag . class . getName ( ) ) ; }
tr	KEY	public boolean decrementNActionPoints ( int n , boolean isLandTile ) { if ( getAvailableActionPoints ( isLandTile ) >= n ) { actionPoints -= n ; return true ; } return false ; }
tr	KEY	public double getCurrentBalance ( ) { return currentBalance ; }
tr	IDF	public static void main ( String s [ ] ) { JFileChooser chooser = new JFileChooser ( ) ; chooser . setCurrentDirectory ( new java . io . File ( "." ) ) ; chooser . setDialogTitle ( "Titulo" ) ; chooser . setFileSelectionMode ( JFileChooser . DIRECTORIES_ONLY ) ; chooser . setAcceptAllFileFilterUsed ( false ) ; }
tr	IDF	public void destroyConnection ( ) { try { out . close ( ) ; in . close ( ) ; socket . close ( ) ; } catch ( IOException e ) { } }
tr	IDF	@ Override public void render ( GameContainer gc , Graphics grphcs ) throws SlickException { }
tr	KEY	@ Override public boolean setSpeedMedium ( ) { setFanSpeed ( 2 ) ; return true ; }
tr	KEY	public DependencyInstance ( ) { }
tr	KEY	public abstract void visit ( Print print ) ;
tr	IDF	public PasswordAttributes ( byte [ ] flags , int type , int minLength , int storedLength ) { this . flags = flags ; this . type = type ; this . minLength = minLength ; this . storedLength = storedLength ; }
tr	IDF	TIPPSection getPreviewSection ( ) ;
tr	KEY	public boolean turnHasEvents ( ) ;
tr	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { getpagesLikedjButtonActionPerformed ( evt ) ; }
tr	KEY	public int getId ( ) { return id ; }
tr	KEY	public int get_cost ( ) { return _cost ; }
tr	IDF	public static void main ( String [ ] args ) { String pathinput = "C:/Users/lin/Desktop/myemotion/weibo/unlabel/weibounlabel.fenci2.xml" ; String pathoutputtrain = "C:/Users/lin/Desktop/myemotion/v2/unlabelfeatureSentence.arff" ; String pathunigram = "C:/Users/lin/Desktop/myemotion/v2/classCHI/feature.txt" ; String pathdic = "C:/Users/lin/Desktop/myemotion/dictionary/\u60C5\u611F\u8BCD\u6C47\u672C\u4F53.csv" ; File file = new File ( pathinput ) ; File unigramfile = new File ( pathunigram ) ; File dicfile = new File ( pathdic ) ; BufferedReader reader = null ; BufferedReader readerunigram = null ; BufferedReader readerdic = null ; List < String > unigramlist = new ArrayList < String > ( ) ; List < String > [ ] diclist = new ArrayList [ 7 ] ; for ( int i = 0 ; i < 7 ; i ++ ) { diclist [ i ] = new ArrayList < String > ( ) ; } List < String > emotionwordslist = new ArrayList < String > ( ) ; try { Pattern patweibo = Pattern . compile ( "(<weibo id=\")([0-9]*)(\">)" ) ; Pattern patn = Pattern . compile ( "<sentence id=\"([0-9]*)\">(.*)(</sentence>)" ) ; reader = new BufferedReader ( new FileReader ( file ) ) ; readerunigram = new BufferedReader ( new FileReader ( unigramfile ) ) ; readerdic = new BufferedReader ( new FileReader ( dicfile ) ) ; String tempString = null ; while ( ( tempString = readerunigram . readLine ( ) ) != null ) { unigramlist . add ( tempString ) ; } while ( ( tempString = readerdic . readLine ( ) ) != null ) { String word = tempString . split ( " " ) [ 0 ] ; if ( tempString . contains ( "PA" ) || tempString . contains ( "PE" ) ) { diclist [ 0 ] . add ( word ) ; } if ( tempString . contains ( "PD" ) || tempString . contains ( "PH" ) || tempString . contains ( "PG" ) || tempString . contains ( "PB" ) || tempString . contains ( "PK" ) ) { diclist [ 1 ] . add ( word ) ; } if ( tempString . contains ( "NA" ) ) { diclist [ 2 ] . add ( word ) ; } if ( tempString . contains ( "NB" ) || tempString . contains ( "NJ" ) || tempString . contains ( "NH" ) || tempString . contains ( "NF" ) ) { diclist [ 3 ] . add ( word ) ; } if ( tempString . contains ( "NI" ) || tempString . contains ( "NC" ) || tempString . contains ( "NG" ) ) { diclist [ 4 ] . add ( word ) ; } if ( tempString . contains ( "NE" ) || tempString . contains ( "ND" ) || tempString . contains ( "NN" ) || tempString . contains ( "NK" ) || tempString . contains ( "NL" ) ) { diclist [ 5 ] . add ( word ) ; } if ( tempString . contains ( "PC" ) ) { diclist [ 6 ] . add ( word ) ; } } for ( int i = 0 ; i < 7 ; i ++ ) { System . out . println ( diclist [ i ] . size ( ) ) ; } String polarity = "" ; OutputStreamWriter writeruniqueID = new OutputStreamWriter ( new FileOutputStream ( "C:/Users/lin/Desktop/myemotion/v2/uniqueID.map" ) , "UTF-8" ) ; OutputStreamWriter writertrain = new OutputStreamWriter ( new FileOutputStream ( pathoutputtrain ) , "UTF-8" ) ; writertrain . write ( "@relation emotion\r\n\r\n" ) ; writertrain . write ( "@attribute emotion {happiness like anger sadness fear disgust surprise}\r\n" ) ; writertrain . write ( "@attribute s1 {0 1}\r\n" ) ; writertrain . write ( "@attribute s2 {0 1}\r\n" ) ; for ( int i = 3 ; i <= 19 ; i ++ ) { writertrain . write ( "@attribute s" + i + " real\r\n" ) ; } writertrain . write ( "@attribute s20 {0 1}\r\n" ) ; writertrain . write ( "@attribute s21 {0 1}\r\n" ) ; writertrain . write ( "@attribute happiness {0 1}\r\n" ) ; writertrain . write ( "@attribute like {0 1}\r\n" ) ; writertrain . write ( "@attribute anger {0 1}\r\n" ) ; writertrain . write ( "@attribute sadness {0 1}\r\n" ) ; writertrain . write ( "@attribute fear {0 1}\r\n" ) ; writertrain . write ( "@attribute disgust {0 1}\r\n" ) ; writertrain . write ( "@attribute surprise {0 1}\r\n" ) ; for ( int i = 0 ; i < unigramlist . size ( ) ; i ++ ) { writertrain . write ( "@attribute f" + ( i + 1 ) + " {0 1}\r\n" ) ; } writertrain . write ( "@attribute id String\r\n" ) ; writertrain . write ( "\r\n@data\r\n" ) ; int num = 0 ; int weiboid = 0 ; String sentenceid = "" ; String weiboemo1 = "" ; String weiboemo2 = "" ; int eid = 0 ; boolean iszhuanfa = false ; String uniqueID = "" ; while ( ( tempString = reader . readLine ( ) ) != null ) { Matcher matcherweibo = patweibo . matcher ( tempString ) ; if ( matcherweibo . find ( ) ) { weiboid ++ ; System . out . println ( weiboid ) ; } String emotiontype1 = "like" ; String emotiontype2 = "happiness" ; String text = "" ; Matcher matchern = patn . matcher ( tempString ) ; if ( matchern . find ( ) ) { text = matchern . group ( 2 ) ; num ++ ; sentenceid = matchern . group ( 1 ) ; uniqueID = weiboid + "_" + sentenceid ; num ++ ; eid ++ ; } if ( ! "" . equals ( text ) ) { String featureresult = "" ; int unigramnum [ ] = new int [ unigramlist . size ( ) ] ; String thetext = "" ; String wordlist [ ] = text . split ( " " ) ; int dic [ ] = new int [ 7 ] ; for ( int i = 0 ; i < wordlist . length ; i ++ ) { String temp [ ] = wordlist [ i ] . split ( "/" ) ; String temp2 [ ] = { "" } ; if ( i < wordlist . length - 1 ) { temp2 = wordlist [ i + 1 ] . split ( "/" ) ; } else { } if ( temp . length == 2 ) { String name = temp [ 0 ] ; String pos = temp [ 1 ] ; String name2 = "" ; if ( temp2 . length == 2 ) { name2 = temp2 [ 0 ] ; } for ( int u = 0 ; u < unigramlist . size ( ) ; u ++ ) { if ( name . equals ( unigramlist . get ( u ) ) ) { unigramnum [ u ] = 1 ; break ; } } for ( int u = 0 ; u < unigramlist . size ( ) ; u ++ ) { if ( ( name + name2 ) . equals ( unigramlist . get ( u ) ) ) { unigramnum [ u ] = 1 ; break ; } } for ( int u = 0 ; u < 7 ; u ++ ) { if ( diclist [ u ] . contains ( name ) || diclist [ u ] . contains ( name + name2 ) ) dic [ u ] = 1 ; } thetext += name ; } } if ( isPaibi ( thetext ) ) { featureresult += "1 1 " ; } else { featureresult += "1 0 " ; } if ( isXingzuo ( thetext ) ) { featureresult += "2 1 " ; } else { featureresult += "2 0 " ; } featureresult += "3 " + count123 ( thetext ) + " " ; featureresult += "4 " + countABC ( thetext ) + " " ; featureresult += "5 " + ( countString ( thetext , "\uFF1B" ) + countString ( thetext , ";" ) ) + " " ; featureresult += "6 " + ( countString ( thetext , "\uFF1A" ) + countString ( thetext , ":" ) ) + " " ; featureresult += "7 " + countString ( thetext , "\u3001" ) + " " ; featureresult += "8 " + ( countString ( thetext , "\u201C" ) + countString ( thetext , "\"" ) ) + " " ; featureresult += "9 " + ( countString ( thetext , "\uFF0C" ) + countString ( thetext , " " ) ) + " " ; featureresult += "10 " + ( countString ( thetext , "\uFF01" ) + countString ( thetext , "!" ) ) + " " ; featureresult += "11 " + countString ( thetext , "\u300A" ) + " " ; featureresult += "12 " + countString ( thetext , "\u2014\u2014" ) + " " ; featureresult += "13 " + countString ( text , "/nr " ) + " " ; featureresult += "14 " + countString ( text , "/ns " ) + " " ; featureresult += "15 " + maxSame ( "" ) + " " ; featureresult += "16 " + countString ( thetext , "\u2026" ) + " " ; featureresult += "17 " + ( countString ( thetext , "\uFF5E" ) + countString ( thetext , "~" ) ) + " " ; featureresult += "18 " + countString ( thetext , "%" ) + " " ; int hasemotionwords = 0 ; for ( int i = 0 ; i < emotionwordslist . size ( ) ; i ++ ) { if ( thetext . contains ( emotionwordslist . get ( i ) ) ) { hasemotionwords ++ ; } } featureresult += "19 " + hasemotionwords + " " ; if ( ( thetext . contains ( "\u6708" ) && thetext . contains ( "\u65E5" ) ) || ( thetext . contains ( "\u5E74" ) && thetext . contains ( "\u6708" ) ) ) { featureresult += "20 1 " ; } else { featureresult += "20 0 " ; } if ( thetext . contains ( "\u2103" ) || thetext . contains ( "\u5929\u6C14\u9884\u62A5:" ) ) { featureresult += "21 1 " ; } else { featureresult += "21 0 " ; } int n ; for ( n = 0 ; n < 7 ; n ++ ) { featureresult += ( n + 22 ) + " " + dic [ n ] + " " ; } for ( n = 0 ; n < unigramnum . length ; n ++ ) { if ( unigramnum [ n ] == 1 ) { featureresult += ( n + 29 ) + ":1 " ; } } featureresult += ( n + 29 ) + " " + uniqueID + " " ; if ( ! weiboemo1 . equals ( "none" ) ) { if ( featureresult . trim ( ) . equals ( "" ) ) { writertrain . write ( "{0 " + emotiontype1 + "}\r\n" ) ; } else { writertrain . write ( "{0 " + emotiontype1 + " " + featureresult . substring ( 0 , featureresult . length ( ) - 1 ) + "}\r\n" ) ; } } } else { if ( tempString . contains ( "sentence" ) ) System . out . println ( weiboid ) ; } } System . out . println ( num ) ; reader . close ( ) ; writertrain . flush ( ) ; writertrain . close ( ) ; writeruniqueID . flush ( ) ; writeruniqueID . close ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } finally { if ( reader != null ) { try { reader . close ( ) ; } catch ( IOException e1 ) { } } } }
tr	IDF	private long calculateMonthlyPayment ( ) { monthlyInterest = apr / MONTHLY_INTEREST_DIVISOR ; double tmp = Math . pow ( 1d + monthlyInterest , - 1 ) ; tmp = Math . pow ( tmp , initialTermMonths ) ; tmp = Math . pow ( 1d - tmp , - 1 ) ; double rc = amountBorrowed * monthlyInterest * tmp ; return Math . round ( rc ) ; }
tr	IDF	public void onFault ( org . apache . axis2 . context . MessageContext faultContext ) { org . apache . axis2 . AxisFault fault = org . apache . axis2 . util . Utils . getInboundFaultFromMessageContext ( faultContext ) ; onError ( fault ) ; }
tr	IDF	@ Test public void test_getCategoryList ( ) throws Exception { ArrayList < String > catList = pDAO . getCategoryList ( ) ; assertEquals ( 2 , catList . size ( ) ) ; assertTrue ( "cheese" . equalsIgnoreCase ( catList . get ( 0 ) ) ) ; assertTrue ( "clothes" . equalsIgnoreCase ( catList . get ( 1 ) ) ) ; }
tr	KEY	public NewsRequest createNewsRequest ( ) { return new NewsRequest ( ) ; }
tr	IDF	@ Test public void test2 ( ) { test . solve ( board2 ) ; StringBuilder sb = new StringBuilder ( ) ; for ( char [ ] chars : board2 ) { sb . append ( new String ( chars ) ) ; } assert . assertEquals ( sb . toString ( ) , "XXXXXXXXX" ) ; }
tr	KEY	public boolean isPagado ( ) { return pagado ; }
tr	IDF	public int getHeight ( ) { int height = 0 ; for ( TEView view : this . collection ) { height += view . getHeight ( ) ; } height += this . collection . size ( ) == 0 ? 0 : ( this . collection . size ( ) - 1 ) * this . margin ; return height ; }
tr	KEY	public searchHandler ( ) { super ( ) ; }
tr	IDF	public static int getSaturation ( int r , int g , int b ) { int V = Math . max ( Math . max ( r , g ) , b ) ; int C = V - Math . min ( Math . min ( r , g ) , b ) ; if ( V != 0 ) return C * 100 / V ; else return 0 ; }
tr	IDF	protected long playerCanWinInTwoRounds ( char playerColour , char enemyColour , Game game ) { return new PlayerCanWinInTwoRounds ( ) . evaluate ( playerColour , enemyColour , game , null ) ; }
tr	IDF	public String askQuery ( ) { Scanner in = new Scanner ( System . in ) ; String queryVar ; System . out . println ( "Enter query variable: " ) ; queryVar = in . nextLine ( ) ; return queryVar ; }
tr	IDF	@ XmlElementDecl ( namespace = "http://api.soap.mytxtbuddy.com/" , name = "sendMessageContacts" ) public JAXBElement < SendMessageContacts > createSendMessageContacts ( SendMessageContacts value ) { return new JAXBElement < SendMessageContacts > ( _SendMessageContacts_QNAME , SendMessageContacts . class , null , value ) ; }
tr	IDF	public void handleExitChatRoom ( Message m ) throws JMSException { System . out . println ( "---SERVER RECEIVE EXIT CHATROOM OBJECT---" ) ; ExitChatRoomMessage e = ( ExitChatRoomMessage ) ( ( ObjectMessage ) m ) . getObject ( ) ; System . out . println ( "ID: " + e . getClient ( ) . getID ( ) ) ; ObjectMessage response = session . createObjectMessage ( ) ; List < ChatRoom > rooms = chatRoomManager . getChatRooms ( ) ; for ( ChatRoom chatRoom : rooms ) { if ( chatRoom . getName ( ) . equals ( e . getChatRoomName ( ) ) ) { chatRoom . removeMember ( e . getClient ( ) ) ; ObjectMessage updateMessage = session . createObjectMessage ( ) ; updateMessage . setObject ( new UpdateUserListMessage ( ) ) ; chatRoom . sendMessage ( updateMessage ) ; } } response . setObject ( new ExitChatRoomAcknowledgeMessage ( e . getClient ( ) ) ) ; response . setJMSCorrelationID ( m . getJMSCorrelationID ( ) ) ; replyProducer . send ( m . getJMSReplyTo ( ) , response ) ; }
tr	KEY	public synchronized int xgetInitialDelay ( ) { return initDelay ; }
tr	IDF	public Executor ( Node root ) { super ( root ) ; }
tr	IDF	public void updateColumnTitle ( int index , String title ) { JTableHeader th = tblScorecard . getTableHeader ( ) ; TableColumnModel tcm = th . getColumnModel ( ) ; TableColumn tc = tcm . getColumn ( index ) ; tc . setHeaderValue ( title ) ; th . repaint ( ) ; }
tr	KEY	long getTotalVolume ( ) ;
tr	KEY	public int hoursWorked ( ) { return d . hoursWorked ( ) ; }
tr	KEY	public class getColumnClass ( int columnIndex ) { return types [ columnIndex ] ; }
tr	IDF	public ParameterHandler ( TokenContext context ) { super ( context ) ; }
tr	IDF	public void useActionToken ( int numActionTokens , int newNumActionPoints ) { this . actionTokens . setText ( "" + numActionTokens ) ; updateActionPoints ( newNumActionPoints ) ; }
tr	KEY	public void translate ( double x , double y , double z ) ;
tr	KEY	public char [ ] getPIN2 ( ) { return pin2 . getPassword ( ) ; }
tr	KEY	public static double random ( ) { return Math . random ( ) ; }
tr	KEY	void set ( int i , int j , double value ) ;
tr	KEY	public int length ( ) { return this . myArrayList . size ( ) ; }
tr	IDF	public void update ( final double ct ) { final Entity [ ] entities = getEntities ( ) ; for ( final Entity entity : entities ) { entity . update ( ct ) ; } for ( final Entity entityA : entities ) { for ( final Entity entityB : entities ) { if ( ( entityA != entityB ) && entityA . isAlive ( ) && entityB . isAlive ( ) ) { if ( entityA . intersects ( entityB ) ) { entityA . handleCollsion ( entityB ) ; entityB . handleCollsion ( entityA ) ; if ( ! entityA . isAlive ( ) ) { remove ( entityA ) ; } if ( ! entityB . isAlive ( ) ) { remove ( entityB ) ; } } } } } }
tr	KEY	public double getCurrentAxisX ( ) ;
tr	IDF	private long getImageSize ( Image image ) { if ( image == ImageWindow . FailImage ) { return 0 ; } long width = image . getWidth ( null ) ; long height = image . getHeight ( null ) ; return width * height * DefaultColorDepth ; }
tr	IDF	@ Test ( expected = EntityNotFoundException . class ) public void tryCleanNullObject ( ) { registry . clean ( ( EFPersistable ) null ) ; }
tr	KEY	public boolean isCellEditable ( int rowIndex , int columnIndex ) { return canEdit [ columnIndex ] ; }
tr	KEY	public void setRam ( int ram ) { this . ram = ram ; }
tr	KEY	public int getWidth ( ) { return width ; }
tr	KEY	private void disposeNow ( ) { XbpadSwingUtils . fadeOut ( this ) ; }
tr	KEY	public BigClass ( ) { this . b = 0 ; }
tr	IDF	@ Override public void visit ( Block block ) { visit ( block . first ) ; visit ( block . second ) ; }
tr	IDF	public BeanstreamResponseBuilder withResponseBody ( String responseBody ) { this . responseBody = responseBody ; return this ; }
tr	KEY	public static Salle [ ] [ ] getTabSalle ( ) { return tab ; }
tr	IDF	@ Test public void queryTest ( ) { final Database connect = new Database ( "questions_test" ) ; final Hashtable < enum < ? > , Object > vals = new Hashtable < enum < ? > , Object > ( ) ; vals . put ( DatabaseAbstractQuestion . Column . TYPE , "queryTest" ) ; vals . put ( DatabaseAbstractQuestion . Column . SHOW , "TRUE" ) ; int questionNumber = - 1 ; final ResultSet rs = connect . insert ( DatabaseAbstractQuestion . TABLE_NAME , vals ) ; try { final int questionNumberColumn = 1 ; questionNumber = rs . getInt ( questionNumberColumn ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; fail ( ) ; } assertTrue ( questionNumber > 0 ) ; connect . delete ( DatabaseAbstractQuestion . TABLE_NAME , vals ) ; assertNull ( connect . select ( DatabaseAbstractQuestion . TABLE_NAME , vals ) ) ; connect . disconnect ( ) ; }
tr	IDF	@ Override public Object parseOneValue ( Element xml ) { return new INDIBLOBValue ( xml ) ; }
tr	KEY	public static String getDataDirectory ( ) { return dataDirectory ; }
tr	KEY	public synchronized boolean isR3repetitionEnabled ( ) { return isR3repeatable ; }
tr	KEY	public void dieTimeRecord ( ) { deaths [ 7 ] ++ ; }
tr	IDF	@ Override public < S , T > T visit ( Visitor < S , T > v , S state ) throws FractalException { return v . visitASTExpAdd ( this , state ) ; }
tr	KEY	public void setNodata ( boolean nodata ) { this . nodata = nodata ; }
tr	IDF	private static double expint ( int p , final double result [ ] ) { final double xs [ ] = new double [ 2 ] ; final double as [ ] = new double [ 2 ] ; final double ys [ ] = new double [ 2 ] ; xs [ 0 ] = 2.718281828459045 ; xs [ 1 ] = 1.4456468917292502E-16 ; split ( 1.0 , ys ) ; while ( p > 0 ) { if ( ( p & 1 ) != 0 ) { quadMult ( ys , xs , as ) ; ys [ 0 ] = as [ 0 ] ; ys [ 1 ] = as [ 1 ] ; } quadMult ( xs , xs , as ) ; xs [ 0 ] = as [ 0 ] ; xs [ 1 ] = as [ 1 ] ; p >>= 1 ; } if ( result != null ) { result [ 0 ] = ys [ 0 ] ; result [ 1 ] = ys [ 1 ] ; resplit ( result ) ; } return ys [ 0 ] + ys [ 1 ] ; }
tr	IDF	public void computeImage ( double time ) { initFrame ( time ) ; int i = 0 ; for ( int y = 0 ; y < H ; y ++ ) for ( int x = 0 ; x < W ; x ++ ) { setPixel ( x , y , rgb ) ; pix [ i ++ ] = pack ( rgb [ 0 ] , rgb [ 1 ] , rgb [ 2 ] ) ; } }
tr	IDF	@ Override protected void get ( Message request , Message response ) { if ( request . containsField ( Profile . ID ) ) { request . put ( Document . ID , request . get ( Profile . ID ) ) ; new PersistentDocumentService ( ) . doGet ( request , response ) ; } else { if ( response == null ) { response = new Message ( request . getContext ( ) ) ; } response . put ( System . RESULT_CODE , "-1" ) ; response . put ( System . RESULT_MSG , "Not implemented" ) ; } }
tr	IDF	public void placeTile ( int x , int y , Tile tile , JavaPlayer player ) { gameBoard . placeTile ( x , y , tile , player , getAllPlayerDevelopers ( ) ) ; }
tr	KEY	public static void setMinLife ( int value ) { MIN_LIFE = value ; }
tr	IDF	public void imageChangeBond ( int getList ) { if ( getList == 10 ) { return ; } imageFrames ++ ; if ( getList == 1 ) { loadImage = new GreenfootImage ( "Ranged//gunnerRun//gunnerRun" + imageFrames + ".png" ) ; imageFramesMax = 6 ; } else if ( getList == 2 ) { loadImage = new GreenfootImage ( "Ranged//gunnerNormal//gunnerNormal" + imageFrames + ".png" ) ; imageFramesMax = 4 ; } else if ( getList == 3 ) { loadImage = new GreenfootImage ( "Ranged//gunnerJump//gunnerJump" + imageFrames + ".png" ) ; imageFramesMax = 2 ; } else if ( getList == 4 ) { loadImage = new GreenfootImage ( "Ranged//gunnerDie//gunnerDie" + imageFrames + ".png" ) ; imageFramesMax = 20 ; } else if ( getList == 5 ) { loadImage = new GreenfootImage ( "Ranged//gunnerAttack//gunnerAttack" + imageFrames + ".png" ) ; imageFramesMax = 5 ; } else if ( getList == 6 ) { loadImage = new GreenfootImage ( "Ranged//gunnerAbilityT//gunnerAbilityT" + imageFrames + ".png" ) ; imageFramesMax = 25 ; } else if ( getList == 7 ) { loadImage = new GreenfootImage ( "Ranged//gunnerAbilityR//gunnerAbilityR" + imageFrames + ".png" ) ; imageFramesMax = 58 ; } else if ( getList == 8 ) { loadImage = new GreenfootImage ( "Ranged//gunnerAbility//gunnerAbilityH00" + imageFrames + ".png" ) ; imageFramesMax = 72 ; } else if ( getList == 9 ) { loadImage = new GreenfootImage ( "Ranged//explosive//explosive00" + imageFrames + ".png" ) ; imageFramesMax = 27 ; } if ( imageFrames == imageFramesMax ) { getList ++ ; imageFrames = 0 ; } setImage ( loadImage ) ; imageChangeNinja ( getList ) ; }
tr	IDF	private void btCrearActionPerformed ( java . awt . event . ActionEvent evt ) { try { Usuario usuario = new Usuario ( ) ; usuario . setDescripcionUsuario ( txtNombreUsuario . getText ( ) ) ; usuario . setPuesto ( txtPuesto . getText ( ) ) ; usuario . setClave ( txtContrasena . getText ( ) ) ; usuario . setEstadoUsuario ( 1 ) ; QATracker . usuarioBus . crear ( usuario ) ; JOptionPane . showMessageDialog ( rootPane , "El usuario ha sido creado." , "Exito" , JOptionPane . PLAIN_MESSAGE ) ; this . setVisible ( false ) ; } catch ( SQLException ex ) { System . out . println ( ex . getMessage ( ) ) ; } }
tr	KEY	public long getTime ( ) { return TIME ; }
tr	IDF	@ Action public void showUserManualDialog ( ) { if ( userManualDialog == null ) { JFrame mainFrame = SudokuApplication . getApplication ( ) . getMainFrame ( ) ; userManualDialog = new UserManualDialog ( mainFrame , true ) ; userManualDialog . setLocationRelativeTo ( mainFrame ) ; } SudokuApplication . getApplication ( ) . show ( userManualDialog ) ; }
tr	KEY	public void clean ( ) { this . setBackground ( new Color ( 112 , 128 , 144 ) ) ; this . setDisabledIcon ( null ) ; this . setIcon ( null ) ; }
tr	IDF	@ Override public R apply ( ) { return rf . apply ( ) ; }
tr	IDF	public ArrayList < OrderItem > getOrderItemsByProductID ( int productID ) throws SQLException { String sql = "SELECT lft.idOrderItem lft.idOrder lft.idProduct  " + "lft.quantity rgt.price * lft.quantity AS lineprice " + "FROM cart_comp461_db.OrderItem lft " + "JOIN cart_comp461_db.Product rgt " + "ON lft.idProduct = rgt.idProduct WHERE lft.idProduct = " + productID ; ArrayList < OrderItem > orderItemList = new ArrayList < OrderItem > ( ) ; Statement s = con . createStatement ( ) ; ResultSet rs = s . executeQuery ( sql ) ; int orderItemID , productID_ , orderID , quantity ; double linePrice ; while ( rs . next ( ) ) { orderItemID = rs . getInt ( "idOrderItem" ) ; productID_ = rs . getInt ( "idProduct" ) ; orderID = rs . getInt ( "idOrder" ) ; quantity = rs . getInt ( "quantity" ) ; linePrice = rs . getDouble ( "lineprice" ) ; OrderItem record = new OrderItem ( orderItemID , productID_ , orderID , quantity , linePrice ) ; orderItemList . add ( record ) ; } return orderItemList ; }
tr	IDF	public void run ( ) { System . out . println ( Thread . currentThread ( ) . getName ( ) + ":Go" ) ; try { Thread . sleep ( ( long ) ( 2000 * Math . random ( ) ) ) ; } catch ( InterruptedException e1 ) { e1 . printStackTrace ( ) ; } System . out . println ( Thread . currentThread ( ) . getName ( ) + ":\u6211\u5230\u7EC8\u70B9\u4E86" ) ; try { barrier . await ( ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } catch ( BrokenBarrierException e ) { e . printStackTrace ( ) ; } System . out . println ( Thread . currentThread ( ) . getName ( ) + ":\u7EC8\u4E8E\u53EF\u4EE5\u5403\u996D\u5566\uFF01" ) ; }
tr	KEY	public void setShowGridBlockBox ( boolean showGridBlockBox ) { this . showGridBlockBox = showGridBlockBox ; }
tr	IDF	public long nextLong ( long n ) { if ( n <= 0 ) throw new IllegalArgumentException ( "n must be positive  got: " + n ) ; long bits , val ; do { bits = ( nextLong ( ) >>> 1 ) ; val = bits % n ; } while ( bits - val + ( n - 1 ) < 0 ) ; return val ; }
tr	KEY	public abstract void visit ( Comment comment ) ;
tr	IDF	public void verify ( String ciphertext ) { try { byte [ ] plain = ( plaintext + key ) . getBytes ( "UTF-8" ) ; MessageDigest md = MessageDigest . getInstance ( algorithmSHA ) ; md . update ( plain ) ; byte [ ] cipher = md . digest ( ) ; String verifyCiphertext = BytesHexConverter . bytesToHexString ( cipher ) ; boolean bool = verifyCiphertext . equals ( ciphertext ) ; System . out . println ( bool ) ; } catch ( UnsupportedEncodingException e ) { e . printStackTrace ( ) ; } catch ( NoSuchAlgorithmException e ) { e . printStackTrace ( ) ; } }
tr	IDF	private ForegroundColor ( String sequencia ) { this . sequencia = sequencia ; }
tr	KEY	@ AfterClass public static void tearDownClass ( ) throws Exception { }
tr	KEY	public synchronized int xgetD4AssignedKeyCode ( ) { return d4 ; }
tr	KEY	@ Override public Editor find ( int index ) { return null ; }
tr	KEY	public int getFade ( ) { return fade ; }
tr	KEY	public abstract Tool clone ( ) ;
tr	IDF	Map < TIPPFile , String > getLocationMap ( ) { return locationMap ; }
tr	KEY	@ Override public void call ( int i ) { }
tr	KEY	public int getTotalJumpTime ( ) { return convertTime ( totalJumpTime ) ; }
tr	IDF	@ Override public int compareTo ( final AngleUnitFlapPattern o ) { int thisCountLine = this . countLines ( ) ; int oCountLine = o . countLines ( ) ; if ( this . divisionSize != o . divisionSize ) { return Integer . compare ( this . divisionSize , o . divisionSize ) ; } else if ( thisCountLine != oCountLine ) { return Integer . compare ( thisCountLine , oCountLine ) ; } else { for ( int i = 0 ; i < divisionSize ; i ++ ) { LineType thisLine = this . lines . get ( i ) ; LineType oLine = o . lines . get ( i ) ; if ( thisLine == oLine ) { continue ; } return thisLine . compareTo ( oLine ) ; } } return 0 ; }
tr	IDF	private void notifyClientsDeviceRemoved ( String [ ] deviceNames ) { for ( int h = 0 ; h < deviceNames . length ; h ++ ) { String deviceName = deviceNames [ h ] ; String message = "<delProperty device=\"" + deviceName + "\" />" ; ArrayList < INDIDeviceListener > list = this . getClientsListeningToDevice ( deviceName ) ; for ( int i = 0 ; i < list . size ( ) ; i ++ ) { INDIDeviceListener c = list . get ( i ) ; c . sendXMLMessage ( message ) ; } ArrayList < INDIDeviceListener > list2 = this . getClientsListeningToSingleProperties ( deviceName ) ; for ( int i = 0 ; i < list2 . size ( ) ; i ++ ) { INDIDeviceListener c = list2 . get ( i ) ; c . sendXMLMessage ( message ) ; } } }
tr	IDF	public HintAtom ( Sudoku sudoku , final int row , final int col , final int val ) { super ( sudoku ) ; this . row = row ; this . col = col ; this . val = val ; }
tr	KEY	@ Override public void receiveEvent ( InteractionEvent event ) { if ( event instanceof ButtonEvent ) { switch ( ( ( ButtonEvent ) event ) . getType ( ) ) { case DART_MISSED : this . dartMissed = true ; break ; case BOUNCE_OUT : this . bounceOut = true ; break ; case NEXT_PLAYER : this . nextPlayer = true ; break ; default : break ; } } else if ( event instanceof HitEvent ) { this . hitEvent = true ; } }
tr	KEY	static protected Rectangle getBorder ( ) { return new Rectangle ( 8 , 30 , 16 , 38 ) ; }
tr	KEY	public File getFile ( ) { if ( fFileDir == null || fFileName == null ) return null ; else return new File ( fFileDir + File . separator + fFileName ) ; }
tr	KEY	public XbpadKeyPreset xgetCurrentPreset ( ) { if ( pointer == 1 ) { return container [ 0 ] ; } else if ( pointer == 2 ) { return container [ 1 ] ; } else if ( pointer == 3 ) { return container [ 2 ] ; } else if ( pointer == 4 ) { return container [ 3 ] ; } else if ( pointer == 5 ) { return container [ 4 ] ; } else { return container [ 0 ] ; } }
tr	KEY	public JSONArray put ( boolean value ) { put ( value ? boolean . true : boolean . false ) ; return this ; }
tr	KEY	public boolean isAllSend ( ) { boolean flag = false ; if ( sendStatusMap . containsValue ( false ) ) { return false ; } return true ; }
tr	KEY	public class getColumnClass ( int columnIndex ) { return types [ columnIndex ] ; }
tr	KEY	public int getWins ( ) ;
tr	IDF	@ Override public void visit ( Comment comment ) { result = comment ; }
tr	IDF	@ Override public void setDim ( int dim ) throws ConnectException { this . dim = dim ; outputY . setDim ( dim ) ; reset ( ) ; }
tr	IDF	public void stop ( ) { if ( sequencer != null && sequencer . isOpen ( ) ) { sequencer . stop ( ) ; sequencer . setMicrosecondPosition ( 0 ) ; } }
tr	KEY	public final JPanel getQuestionPanel ( ) { assert _questionPanel != null : "The panel of the question is null!" ; return _questionPanel ; }
tr	IDF	ReprocessingPlantPanel ( Preferences preferences ) { super ( new GridBagLayout ( ) ) ; GridBagConstraints c = new GridBagConstraints ( ) ; c . gridy = 0 ; c . gridx = 0 ; c . weightx = 1.0 ; c . fill = GridBagConstraints . HORIZONTAL ; c . anchor = GridBagConstraints . BASELINE_LEADING ; mineralPanel = new MineralPanel ( preferences ) ; mineralPanel . setBorder ( BorderFactory . createTitledBorder ( "Minerals" ) ) ; add ( mineralPanel , c ) ; c . gridx = 1 ; c . weightx = 0.0 ; c . fill = GridBagConstraints . VERTICAL ; plantSettings = new UserPlantSettings ( preferences ) ; plantSettings . setBorder ( BorderFactory . createTitledBorder ( "Facility" ) ) ; add ( plantSettings , c ) ; plantSettings . setPreferredSize ( new Dimension ( 150 , 100 ) ) ; c . gridy = 1 ; c . gridx = 0 ; c . gridwidth = 2 ; c . fill = GridBagConstraints . HORIZONTAL ; sovereigntyPanel = new SovereigntyPanel ( preferences , new AbstractAction ( "Find solution" ) { @ Override public void actionPerformed ( ActionEvent e ) { SwingWorker < String , void > worker = new SwingWorker < String , void > ( ) { @ Override protected String doInBackground ( ) throws Exception { SwingUtilities . invokeLater ( new Runnable ( ) { @ Override public void run ( ) { ReprocessingPlantPanel . this . setEnabled ( false ) ; } } ) ; EnumSet < Sovereignty > sovereignty = sovereigntyPanel . getSovereignty ( ) ; double securityStatus = sovereigntyPanel . getMinimumSecurityStatus ( ) ; ServiceLoader < ReprocessingService > serviceLoader = ServiceLoader . load ( ReprocessingService . class ) ; Iterator < ReprocessingService > iterator = serviceLoader . iterator ( ) ; if ( iterator . hasNext ( ) ) { ReprocessingService service = iterator . next ( ) ; ReprocessingPlant plant = service . getPlant ( sovereignty , securityStatus ) ; double yield = plantSettings . getYield ( ) ; double tax = plantSettings . getTax ( ) ; plant . setUserStatistics ( yield / 100 , tax / 100 ) ; ReprocessingSolution solution = plant . getMinimumOreVolume ( mineralPanel . getMinerals ( ) ) ; return toFormattedString ( solution , plantSettings . getCargo ( ) ) ; } else { return "No suitable reprocessing service found." ; } } @ Override protected void done ( ) { try { resultDocument . remove ( 0 , resultDocument . getLength ( ) ) ; resultDocument . insertString ( 0 , get ( ) , null ) ; } catch ( BadLocationException e1 ) { e1 . printStackTrace ( ) ; } catch ( InterruptedException e1 ) { e1 . printStackTrace ( ) ; } catch ( ExecutionException e1 ) { e1 . printStackTrace ( ) ; } finally { ReprocessingPlantPanel . this . setEnabled ( true ) ; } } } ; worker . execute ( ) ; } } ) ; Border border = BorderFactory . createTitledBorder ( "Sovereignty" ) ; sovereigntyPanel . setBorder ( border ) ; add ( sovereigntyPanel , c ) ; c . gridy = 2 ; c . gridx = 0 ; c . gridwidth = 2 ; c . weightx = 1.0 ; c . weighty = 1.0 ; c . insets = new Insets ( 0 , 0 , 0 , 0 ) ; c . fill = GridBagConstraints . BOTH ; JTextArea resultArea = new JTextArea ( ) ; resultArea . setEditable ( false ) ; resultDocument = resultArea . getDocument ( ) ; JScrollPane scrollPane = new JScrollPane ( resultArea ) ; scrollPane . setBorder ( BorderFactory . createTitledBorder ( "Optimal ore volumes" ) ) ; add ( scrollPane , c ) ; }
tr	IDF	@ Override public Expressao redefinirParametro ( Map < DeclaracaoParametro , DeclaracaoParametro > map ) { Id id ; DeclaracaoParametro declaracaoParametro = new DeclaracaoParametro ( new Id ( idName ) ) ; if ( map . get ( declaracaoParametro ) != null ) { id = new Id ( map . get ( declaracaoParametro ) . getId ( ) . getIdName ( ) ) ; } else { id = new Id ( idName ) ; } return id ; }
tr	KEY	@ Action public void close ( ) { setVisible ( false ) ; }
tr	IDF	public long createContextCodeW ( FeatureTemplate . Context temp , long x ) { return ( x << numContextFeatBits ) | temp . ordinal ( ) ; }
tr	IDF	public static void securityGoalSimplification ( RequirementGraph req_model , ActorAssociationGraph actor_model , int scope ) throws IOException , ScriptException { String req_model_file = req_model . generateFormalExpressionToFile ( scope ) ; String actor_model_file = InfoEnum . current_directory + "/dlv/models/actor_association_model.dl " ; if ( actor_model . getElements ( ) . size ( ) != 0 ) { actor_model_file = actor_model . generateFormalExpressionToFile ( ) ; } String inference_rule = "" ; if ( req_model . getLayer ( ) . equals ( InfoEnum . Layer . BUSINESS . name ( ) ) ) { inference_rule = InfoEnum . current_directory + "/dlv/dlv -silent -nofacts " + InfoEnum . current_directory + "/dlv/rules/simplification_bus.rule " + InfoEnum . current_directory + "/dlv/rules/simplification_general.rule " + InfoEnum . current_directory + "/dlv/models/business_process_model.dl " + InfoEnum . current_directory + "/dlv/models/asset_model.dl " + req_model_file + " " + actor_model_file ; } else if ( req_model . getLayer ( ) . equals ( InfoEnum . Layer . APPLICATION . name ( ) ) ) { inference_rule = InfoEnum . current_directory + "/dlv/dlv -silent -nofacts " + InfoEnum . current_directory + "/dlv/rules/simplification_app.rule " + InfoEnum . current_directory + "/dlv/rules/simplification_general.rule " + InfoEnum . current_directory + "/dlv/models/software_architecture_model.dl " + InfoEnum . current_directory + "/dlv/models/asset_model.dl " + req_model_file + " " + actor_model_file ; } else if ( req_model . getLayer ( ) . equals ( InfoEnum . Layer . PHYSICAL . name ( ) ) ) { inference_rule = InfoEnum . current_directory + "/dlv/dlv -silent -nofacts " + InfoEnum . current_directory + "/dlv/rules/simplification_phy.rule " + InfoEnum . current_directory + "/dlv/rules/simplification_general.rule " + InfoEnum . current_directory + "/dlv/models/deployment_model.dl " + InfoEnum . current_directory + "/dlv/models/software_architecture_model.dl " + InfoEnum . current_directory + "/dlv/models/asset_model.dl " + req_model_file + " " + actor_model_file ; } else { CommandPanel . logger . severe ( "Error refinement type!" ) ; } Runtime rt = Runtime . getRuntime ( ) ; Process pr = rt . exec ( inference_rule ) ; BufferedReader input = new BufferedReader ( new InputStreamReader ( pr . getInputStream ( ) ) ) ; String line = null ; while ( ( line = input . readLine ( ) ) != null ) { line = line . substring ( 1 , line . length ( ) - 1 ) ; String [ ] result = line . split ( "  " ) ; for ( String s : result ) { CommandPanel . logger . info ( s ) ; if ( s . startsWith ( "is_critical" ) ) { s = s . replaceAll ( "is\\_critical\\(" , "" ) ; s = s . replaceAll ( "\\)" , "" ) ; SecurityGoal critical_sec_goal = ( SecurityGoal ) req_model . findElementByFormalName ( s ) ; critical_sec_goal . setCriticality ( true ) ; AppleScript . changeAttributeOfElement ( InfoEnum . REQ_TARGET_CANVAS , critical_sec_goal . getLayer ( ) , critical_sec_goal . getId ( ) , "5" , "none" , "none" ) ; } else if ( s . startsWith ( "non_deterministic" ) ) { s = s . replaceAll ( "non\\_deterministic\\(" , "" ) ; s = s . replaceAll ( "\\)" , "" ) ; SecurityGoal critical_sec_goal = ( SecurityGoal ) req_model . findElementByFormalName ( s ) ; critical_sec_goal . setNon_deterministic ( true ) ; AppleScript . changeAttributeOfElement ( InfoEnum . REQ_TARGET_CANVAS , critical_sec_goal . getLayer ( ) , critical_sec_goal . getId ( ) , "3" , "none" , "none" ) ; } } } input . close ( ) ; }
tr	IDF	@ Override public void onPacketReceived ( String packet ) { System . out . println ( "\n------------------------------------------------------------\n" + "Packet Received:\n------------------------------------------------------------\n" + packet ) ; synchronized ( mListeners ) { for ( PacketListener listener : mListeners ) { try { listener . onPacketReceived ( packet ) ; } catch ( RuntimeException e ) { System . out . println ( "Error notifying listener" ) ; e . printStackTrace ( ) ; } } } }
tr	IDF	public void setOrderID ( String orderID ) { this . orderID = orderID ; }
tr	IDF	public LiteralFactory ( ConstantFactory constantFactory , VariableFactory variableFactory ) { this . variableFactory = variableFactory ; this . constantFactory = constantFactory ; }
tr	IDF	private JPanel createBottomPartOfQuestion ( ) { final JPanel jPanel = new JPanel ( ) ; _answerTextLabel = new JLabel ( "Answer: " ) ; jPanel . add ( _answerTextLabel ) ; _answerLabel = new JLabel ( "" ) ; jPanel . add ( _answerLabel ) ; jPanel . setOpaque ( true ) ; return jPanel ; }
tr	KEY	public String getValue ( ) { return this . value ; }
tr	IDF	@ Override public void buttonY ( boolean pressed ) { if ( enabled ) { if ( ses2 != null ) { setFlagsFalse ( ) ; if ( future != null ) { future . cancel ( true ) ; } } if ( pressed == true ) { yFlag = true ; dllProc . dll_keyPressed ( container . xgetCurrentPreset ( ) . xgetYAssignedKeyCode ( ) ) ; if ( container . xgetCurrentPreset ( ) . isYrepetitionEnabled ( ) ) { keyTask = new KeyboardTask ( ) ; future = ses2 . scheduleAtFixedRate ( keyTask , container . xgetCurrentPreset ( ) . xgetYInitialDelay ( ) , container . xgetCurrentPreset ( ) . xgetYRepeatDelay ( ) , TimeUnit . MILLISECONDS ) ; } } else if ( pressed == false ) { yFlag = false ; if ( ses2 != null ) { if ( future != null ) { future . cancel ( true ) ; } } dllProc . dll_keyRealesed ( container . xgetCurrentPreset ( ) . xgetYAssignedKeyCode ( ) ) ; } } else { if ( future != null ) { future . cancel ( true ) ; } dllProc . dll_keyRealesed ( container . xgetCurrentPreset ( ) . xgetYAssignedKeyCode ( ) ) ; } }
tr	IDF	public void update ( final int questionNumber , final Statistics qs ) { final Database connect = new Database ( _databaseName ) ; final Hashtable < enum < ? > , Object > vals = new Hashtable < enum < ? > , Object > ( ) ; vals . put ( Column . CORRECTLY_ANSWERED , "" + qs . getCorrectlyAnswered ( ) ) ; vals . put ( Column . TOTAL_ANSWERED , "" + qs . getTotalTimesAnswered ( ) ) ; vals . put ( Column . DIFFICULTY , "" + qs . getDifficulty ( ) ) ; final Hashtable < enum < ? > , Object > compare = new Hashtable < enum < ? > , Object > ( ) ; compare . put ( DatabaseAbstractQuestion . Column . QUESTION_NUMBER , "" + questionNumber ) ; connect . update ( TABLE_NAME , vals , compare ) ; connect . disconnect ( ) ; }
tr	IDF	public PrisonCellDoor getOtherSide ( ) { if ( this . otherSide != null ) { return this . otherSide ; } else { for ( Aspect a : this . destination . aspects ) { if ( a instanceof PrisonCellDoor ) { PrisonCellDoor temp = ( PrisonCellDoor ) a ; if ( temp . destination == Game . player . currentLocation ) { this . otherSide = temp ; return this . otherSide ; } } } } System . out . println ( "ERROR: PrisonCellDoor failed to find other side." ) ; return null ; }
tr	KEY	public boolean remove ( Object x ) { throw new UnsupportedOperationException ( ) ; }
tr	KEY	@ Override public boolean delete ( Administrator object ) { return false ; }
tr	IDF	public void send ( String msg ) throws JMSException { ObjectMessage m = session . createObjectMessage ( ) ; m . setObject ( new ChatTextMessage ( id , clientName , msg ) ) ; m . setJMSReplyTo ( privateQueue ) ; m . setJMSCorrelationID ( createRandomString ( ) ) ; if ( currChatRoom == null ) { producer . send ( m ) ; } else { currChatRoomProducer . send ( m ) ; } }
tr	KEY	@ Override public int count ( ) { return 0 ; }
tr	KEY	@ Override public int getDisposeTimer ( ) { return disposeTimer ; }
tr	IDF	@ Override public void run ( ) { candidate = mutate ( x , n , div ) ; eps = residuum ( A , b , candidate ) ; synchronized ( readyCounter ) { readyCounter ++ ; System . out . println ( "update ready counter: " + Thread . currentThread ( ) . getName ( ) + "  ->  " + readyCounter ) ; } }
tr	KEY	@ Override public boolean equals ( Object obj ) { if ( this == obj ) return true ; if ( obj == null ) return false ; if ( getClass ( ) != obj . getClass ( ) ) return false ; Vak other = ( Vak ) obj ; if ( id != other . id ) return false ; return true ; }
tr	IDF	@ NotNull public static String shortened ( @ NotNull String s , int maxLength ) { return s . length ( ) <= maxLength ? s : s . substring ( 0 , maxLength ) + "[...]" ; }
tr	IDF	@ Test public void enteringGameGreetsPlayer ( ) { game . addCharacter ( "jim" , jim ) ; }
tr	KEY	public void setId ( int id ) { this . id = id ; }
tr	IDF	public void setPermisos ( Integer permisos ) { this . permisos = permisos ; }
tr	IDF	public void addMeasure ( Measure measure ) { measures . add ( measure ) ; }
tr	KEY	public ModificationException ( final class < ? > classTriedToChange , final String fieldTryingToChange ) { super ( createMessage ( classTriedToChange , fieldTryingToChange , null , null ) ) ; }
tr	KEY	protected boolean isFinished ( ) { return true ; }
tr	KEY	private void setCreator ( User creator ) { if ( creator == null ) { throw new IllegalArgumentException ( "Creator cannot be null!" ) ; } this . creator = creator ; }
tr	IDF	private List < DadosPessoa > pontuaPessoas ( DadosPartida partida , List < DadosPessoa > listaPessoas ) { DadosPessoa jogadorBranco = null ; DadosPessoa jogadorPreto = null ; for ( DadosPessoa pessoa : listaPessoas ) { if ( pessoa . getNome ( ) . equals ( partida . getJogo ( ) . getJogadorBrancas ( ) . getNome ( ) ) ) jogadorBranco = pessoa ; if ( pessoa . getNome ( ) . equals ( partida . getJogo ( ) . getJogadorPretas ( ) . getNome ( ) ) ) jogadorPreto = pessoa ; } if ( jogadorBranco . getNome ( ) . equals ( partida . getJogo ( ) . getNomeVencedor ( ) ) ) { jogadorBranco . setPartidasVencidas ( ) ; jogadorPreto . setPartidasPerdidas ( ) ; } if ( jogadorPreto . getNome ( ) . equals ( partida . getJogo ( ) . getNomeVencedor ( ) ) ) { jogadorPreto . setPartidasVencidas ( ) ; jogadorBranco . setPartidasPerdidas ( ) ; } return listaPessoas ; }
tr	IDF	public CreateCriminalRecord ( StationServer spvm , StationServer spb , StationServer spl ) { super ( spvm , spb , spl ) ; }
tr	IDF	public boolean examine ( ) { System . out . println ( "A steel broadsword. The hilt is wrapped in leather." ) ; if ( this . name . contains ( "vorpal" ) ) { System . out . println ( "The edge seems very sharp." ) ; } return true ; }
tr	KEY	public String getName ( ) { if ( name == null ) return "World" ; else return name ; }
tr	IDF	@ Override public void write ( int theByte ) throws java . io . IOException { if ( suspendEncoding ) { this . out . write ( theByte ) ; return ; } if ( encode ) { buffer [ position ++ ] = ( byte ) theByte ; if ( position >= bufferLength ) { this . out . write ( encode3to4 ( b4 , buffer , bufferLength , options ) ) ; lineLength += 4 ; if ( breakLines && lineLength >= MAX_LINE_LENGTH ) { this . out . write ( NEW_LINE ) ; lineLength = 0 ; } position = 0 ; } } else { if ( decodabet [ theByte & 7f ] > WHITE_SPACE_ENC ) { buffer [ position ++ ] = ( byte ) theByte ; if ( position >= bufferLength ) { int len = Base64 . decode4to3 ( buffer , 0 , b4 , 0 , options ) ; out . write ( b4 , 0 , len ) ; position = 0 ; } } else if ( decodabet [ theByte & 7f ] != WHITE_SPACE_ENC ) { throw new java . io . IOException ( "Invalid character in Base64 data." ) ; } } }
tr	IDF	public void init ( ) { try { Level . loadBehaviors ( new DataInputStream ( ResourcesManager . class . getResourceAsStream ( "res/tiles.dat" ) ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; System . exit ( 0 ) ; } if ( level == null ) if ( isCustom ) { MyLevelGenerator clg = new MyLevelGenerator ( ) ; GamePlay gp = new GamePlay ( ) ; gp = gp . read ( "player.txt" ) ; currentLevel = ( Level ) clg . generateLevel ( gp ) ; String detailedInfo = FileHandler . readFile ( "DetailedInfo.txt" ) ; } else currentLevel = new RandomLevel ( 320 , 15 , levelSeed , levelDifficulty , levelType ) ; try { level = currentLevel . clone ( ) ; } catch ( CloneNotSupportedException e ) { e . printStackTrace ( ) ; } Art . startMusic ( 1 ) ; paused = false ; Sprite . spriteContext = this ; sprites . clear ( ) ; layer = new LevelRenderer ( level , graphicsConfiguration , 320 , 240 ) ; for ( int i = 0 ; i < 2 ; i ++ ) { int scrollSpeed = 4 >> i ; int w = ( ( level . getWidth ( ) * 16 ) - 320 ) / scrollSpeed + 320 ; int h = ( ( level . getHeight ( ) * 16 ) - 240 ) / scrollSpeed + 240 ; Level bgLevel = BgLevelGenerator . createLevel ( w / 32 + 1 , h / 32 + 1 , i == 0 , levelType ) ; bgLayer [ i ] = new BgRenderer ( bgLevel , graphicsConfiguration , 320 , 240 , scrollSpeed ) ; } double oldX = 0 ; if ( mario != null ) oldX = mario . x ; mario = new Mario ( this ) ; sprites . add ( mario ) ; startTime = 1 ; timeLeft = 200 * 15 ; tick = 0 ; switchPoints = new ArrayList < double > ( ) ; int squareSize = 16 ; int sections = 10 ; double startX = 32 ; double endX = level . getxExit ( ) * squareSize ; if ( ! isCustom && recorder == null ) recorder = new DataRecorder ( this , ( RandomLevel ) level , keys ) ; gameStarted = false ; }
tr	IDF	public static boolean allUnique ( String s ) { HashMap < Character , Integer > map = new HashMap < Character , Integer > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( map . containsKey ( s . charAt ( i ) ) ) { return false ; } else { map . put ( s . charAt ( i ) , 1 ) ; } } return true ; }
tr	KEY	public DERObject getDERObject ( ) { return new DERSequence ( new ASN1Encodable [ ] { new DEROctetString ( this . authId ) } ) ; }
tr	KEY	public int getSourceCount ( ) { return sources . size ( ) ; }
tr	KEY	public long getId ( ) { return id ; }
tr	KEY	public void setLevel ( final int level ) { this . level = level ; }
tr	KEY	public static boolean isLogUnsafeMalloc ( ) { return getBoolean ( "sun.java2d.renderer.logUnsafeMalloc" , "false" ) ; }
tr	KEY	int nextPartId ( ) { return nextPartId ++ ; }
tr	KEY	public void setSpeed ( int speed ) { this . speed = speed ; }
tr	KEY	public double getPVP_Producto ( ) { return PVP_Producto ; }
tr	IDF	public void setFunction ( String function ) { this . function = function ; }
tr	KEY	protected void interrupted ( ) { }
tr	IDF	@ Override public void visit ( Print print ) { size += print . message . length ( ) ; }
tr	KEY	@ Override public TBlock rotateClockwise ( ) { return this ; }
tr	IDF	public void bind ( T listener ) { if ( mBindAllowed ) { synchronized ( mListeners ) { if ( listener != null ) { mListeners . add ( listener ) ; performInitialUpdate ( listener ) ; listener . onBind ( mListenerClass ) ; } else { System . out . println ( getClass ( ) . getName ( ) + " - Attempt to add null listener object." ) ; } } } }
tr	KEY	public void setId ( long id ) { this . id = id ; }
tr	IDF	public void initPanel ( ) { this . removeAll ( ) ; ImageIcon imageIcon = new ImageIcon ( this . getClass ( ) . getClassLoader ( ) . getResource ( "images/load.gif" ) ) ; this . icone . setDisabledIcon ( imageIcon ) ; this . icone . setIcon ( imageIcon ) ; this . icone . setBorder ( null ) ; this . icone . setBackground ( null ) ; this . icone . setEnabled ( false ) ; this . icone . setBounds ( 300 , 50 , 90 , 100 ) ; this . bouton . setBounds ( 300 , 75 , 50 , 50 ) ; this . label . setBounds ( 50 , 25 , 250 , 150 ) ; this . panneau . setBounds ( 250 , 200 , 400 , 200 ) ; this . panneau . setLayout ( null ) ; this . panneau . add ( label ) ; this . add ( panneau ) ; if ( isPopup ) fermer ( ) ; else if ( isGo ) this . panneau . add ( bouton ) ; else this . panneau . add ( icone ) ; }
tr	KEY	public double getEps ( ) { return eps ; }
tr	IDF	public TinyUrlWebServiceStub ( org . apache . axis2 . context . ConfigurationContext configurationContext , java . lang . String targetEndpoint , boolean useSeparateListener ) throws org . apache . axis2 . AxisFault { populateAxisService ( ) ; populateFaults ( ) ; _serviceClient = new org . apache . axis2 . client . ServiceClient ( configurationContext , _service ) ; _serviceClient . getOptions ( ) . setTo ( new org . apache . axis2 . addressing . EndpointReference ( targetEndpoint ) ) ; _serviceClient . getOptions ( ) . setUseSeparateListener ( useSeparateListener ) ; _serviceClient . getOptions ( ) . setSoapVersionURI ( org . apache . axiom . soap . SOAP12Constants . SOAP_ENVELOPE_NAMESPACE_URI ) ; }
tr	KEY	public boolean verifierObjet ( String s ) { for ( String objet : sac ) { if ( s . equalsIgnoreCase ( objet ) ) { return true ; } else { return false ; } } return false ; }
tr	IDF	public double objectArea ( ABObject ob ) { double area = 0 ; if ( ob . shape == ABShape . Circle ) { Circle c = ( Circle ) ob ; area = c . area ; } else if ( ob . shape == ABShape . Rect ) { Rect r = ( Rect ) ob ; area = r . area ; } else { Poly p = ( Poly ) ob ; area = p . area ; } return area ; }
tr	IDF	public List < Message > getMessages ( ) { return messages ; }
tr	KEY	public void scale ( double x , double y , double z ) ;
tr	KEY	public ProyectoDAOTest ( ) { }
tr	KEY	public int getA ( ) { return mA ; }
tr	IDF	@ Test public void testPD2 ( ) { PositionDirection pd = PositionDirection . CLOCK9 ; PositionDirection newPd = pd . next ( 3 ) ; int degree = Transformation2D . calculateRotaDegree ( pd , newPd ) ; assertTrue ( newPd == PositionDirection . CLOCK12 ) ; assertTrue ( degree == - 90 ) ; }
tr	KEY	public int getTotalLargeTime ( ) { return convertTime ( totalLargeTime ) ; }
tr	KEY	public abstract int read ( int addr ) ;
tr	KEY	private boolean getRandomBool ( ) { return ( randomNumber ( 0 , 1 ) > 0.5f ) ; }
tr	KEY	public Object nextMeta ( ) throws JSONException { char c ; char q ; do { c = next ( ) ; } while ( Character . isWhitespace ( c ) ) ; switch ( c ) { case 0 : throw syntaxError ( "Misshaped meta tag" ) ; case < : return XML . < ; case > : return XML . > ; case / : return XML . / ; case = : return XML . = ; case ! : return XML . ! ; case ? : return XML . QUEST ; case " : case ' : q = c ; for ( ; ; ) { c = next ( ) ; if ( c == 0 ) { throw syntaxError ( "Unterminated string" ) ; } if ( c == q ) { return boolean . true ; } } default : for ( ; ; ) { c = next ( ) ; if ( Character . isWhitespace ( c ) ) { return boolean . true ; } switch ( c ) { case 0 : case < : case > : case / : case = : case ! : case ? : case " : case ' : back ( ) ; return boolean . true ; } } } }
tr	IDF	public void actionPerformed ( ActionEvent e ) { if ( mTVSignal ) { m_emuConsole . updateFrame ( ) ; } updateDisplayGraphics ( ) ; }
tr	IDF	public void setTakt ( String takt ) { this . takt = takt ; }
tr	KEY	public int id ( ) { return System . identityHashCode ( this ) % 256 ; }
tr	IDF	public List < Transaction > getTransaction ( ) { if ( transaction == null ) { transaction = new ArrayList < Transaction > ( ) ; } return this . transaction ; }
tr	KEY	public BufferedImage getImg ( ) { return this . image ; }
tr	IDF	public void setDialogKontak ( DialogKontak dialogKontak ) { this . dialogKontak = dialogKontak ; int row = dialogKontak . getjTable1 ( ) . getSelectedRow ( ) ; Kontak kontak = dialogKontak . getKontakTableModel ( ) . findOne ( row ) ; jTextFieldNama . setText ( kontak . getNama ( ) ) ; jTextFieldNomor . setText ( kontak . getNomor ( ) ) ; jComboBoxGrup . setSelectedItem ( kontak . getGrup ( ) ) ; }
tr	IDF	public void run ( ) { System . out . println ( "\u597D\u4E86\uFF0C\u5927\u5BB6\u53EF\u4EE5\u53BB\u5403\u996D\u4E86\u2026\u2026" ) ; }
tr	IDF	public void setNickname ( String nickname ) { this . nickname = nickname ; }
tr	KEY	public String toString ( ) { try { return [ + this . join ( " " ) + ] ; } catch ( Exception e ) { return null ; } }
tr	KEY	public synchronized void xsetR2InitialDelay ( int a ) { r2ID = a ; }
tr	KEY	public String toString ( ) { return this . name ; }
tr	KEY	protected abstract void onBounceOut ( ) ;
tr	IDF	static public void update ( ) { time = ( System . currentTimeMillis ( ) - startTime ) / 1000.0 ; for ( int i = 0 ; i < nq ; i ++ ) { Note note = queue [ i ] ; if ( note . timeOff < time ) { release ( note . n , note . pitch ) ; for ( int j = i ; j < nq ; j ++ ) queue [ j ] = queue [ j + 1 ] ; -- nq ; } } }
tr	KEY	public void run ( ) { new Window ( ) . setVisible ( true ) ; }
tr	KEY	public byte [ ] [ ] getMap ( ) { return this . map ; }
tr	IDF	public final synchronized Rectangle2D getBounds2D ( ) { float x1 , y1 , x2 , y2 ; int i = numCoords ; if ( i > 0 ) { y1 = y2 = floatCoords [ -- i ] ; x1 = x2 = floatCoords [ -- i ] ; while ( i > 0 ) { float y = floatCoords [ -- i ] ; float x = floatCoords [ -- i ] ; if ( x < x1 ) x1 = x ; if ( y < y1 ) y1 = y ; if ( x > x2 ) x2 = x ; if ( y > y2 ) y2 = y ; } } else { x1 = y1 = x2 = y2 = 0.0f ; } return new Rectangle2D . float ( x1 , y1 , x2 - x1 , y2 - y1 ) ; }
tr	KEY	public void setPriceLevel5 ( double priceLevel5 ) { this . priceLevel5 = priceLevel5 ; }
tr	KEY	public int getNbTirsJoues ( ) { return tirs_joues . size ( ) ; }
tr	KEY	public Login ( ) { super ( ) ; }
tr	IDF	public DanceResourceProvider ( Resources parent ) { this . parent = parent ; }
tr	KEY	public AdditionalInformation ( ) { this ( null , null , null , null , null , null , null , null , null , null ) ; }
tr	IDF	public void setTransform ( Transform3D trs3d ) { _pofvTrans . setTransform ( trs3d ) ; }
tr	IDF	@ Override public String getId ( String strTabla , String strCampo , String strValor ) throws Exception { Statement oStatement ; ResultSet oResultSet ; try { oStatement = ( Statement ) oConexionMySQL . createStatement ( ) ; String strSQL = "SELECT id FROM " + strTabla + " WHERE " + strCampo + "='" + strValor + "'" ; oResultSet = oStatement . executeQuery ( strSQL ) ; if ( oResultSet . next ( ) ) { return oResultSet . getString ( "id" ) ; } else { return null ; } } catch ( SQLException ex ) { throw new Exception ( "mysql.getId: No se ha podido realizar la consulta: " + ex . getMessage ( ) ) ; } }
tr	IDF	@ Override public void addRow ( Row row ) { super . addRow ( row ) ; addConstraint ( ( ExactCoverPart ) row ) ; }
tr	KEY	private ImageUtils ( ) { }
tr	IDF	Food ( Board board ) { Random generator = SnakeWithPartner . getGenerator ( ) ; xFood = generator . nextInt ( board . getWidth ( ) - 1 ) ; yFood = generator . nextInt ( board . getHeight ( ) - 1 ) ; System . out . println ( "food is at: x-" + xFood + " y-" + yFood ) ; }
tr	IDF	@ Override public void actionPerformed ( ActionEvent e ) { if ( gameController . getCurrentGameExists ( ) ) { if ( gameNeedsToBeSaved ) { int shouldSave = askUserIfWouldLikeToSaveGame ( ) ; if ( shouldSave == 0 ) { gameController . saveGame ( ) ; gameNeedsToBeSaved = false ; displayNewGameFrame ( ) ; } else if ( shouldSave == 1 ) { displayNewGameFrame ( ) ; } else { } } else { displayNewGameFrame ( ) ; } } else { displayNewGameFrame ( ) ; } }
tr	KEY	public void cut ( ) { }
tr	IDF	private void setMines ( ) { int cellAmount = this . high * this . width ; Random rand = new Random ( ) ; int minesSet = this . minesNumber ; while ( minesSet > 0 ) { for ( int iteration = 0 ; iteration < cellAmount && minesSet > 0 ; iteration ++ ) { final int i = rand . nextInt ( this . high ) ; final int j = rand . nextInt ( this . width ) ; if ( minesPerRow [ i ] == maxMinePerRow ) continue ; if ( board [ i ] [ j ] . hasMine ( ) ) continue ; if ( putMine ( minesSet ) ) { board [ i ] [ j ] . setMine ( new Mine ( ) { @ Override public void explode ( ) { board [ i ] [ j ] . notifyObservers ( "Exploded" ) ; } } ) ; minesPerRow [ i ] ++ ; minesSet -- ; } } maxMinePerRow += 1 ; } }
tr	KEY	public final String getChapter ( ) { return _chapter ; }
tr	IDF	public void setNom_Equipo ( String Nom_Equipo ) { this . Nom_Equipo = Nom_Equipo ; }
tr	IDF	public ArrayList < PokerCard > getBestHand ( ) { Collections . sort ( bestHand , new PokerCardComparator ( ) ) ; return bestHand ; }
tr	KEY	private boolean isAncestorOf ( int [ ] heads , int par , int ch ) { int cnt = 0 ; while ( ch != 0 ) { if ( ch == par ) return true ; ch = heads [ ch ] ; } return false ; }
tr	KEY	public void sendGameTerminate ( ) { sendMessage ( "bye" ) ; }
tr	IDF	public AddUserDialog ( ) { setModal ( true ) ; setResizable ( false ) ; setAlwaysOnTop ( true ) ; setTitle ( "\u6DFB\u52A0\u7528\u6237" ) ; setBounds ( 100 , 100 , 329 , 300 ) ; getContentPane ( ) . setLayout ( new BorderLayout ( ) ) ; contentPanel . setBorder ( new EmptyBorder ( 5 , 5 , 5 , 5 ) ) ; getContentPane ( ) . add ( contentPanel , BorderLayout . CENTER ) ; GridBagLayout gbl_contentPanel = new GridBagLayout ( ) ; gbl_contentPanel . columnWidths = new int [ ] { 31 , 0 , 104 , 0 , 0 } ; gbl_contentPanel . rowHeights = new int [ ] { 0 , 0 , 0 , 0 } ; gbl_contentPanel . columnWeights = new double [ ] { 0.0 , 0.0 , 1.0 , 0.0 , double . MIN_VALUE } ; gbl_contentPanel . rowWeights = new double [ ] { 1.0 , 1.0 , 1.0 , double . MIN_VALUE } ; contentPanel . setLayout ( gbl_contentPanel ) ; { JLabel label = new JLabel ( "\u8D26\u53F7" ) ; GridBagConstraints gbc_label = new GridBagConstraints ( ) ; gbc_label . anchor = GridBagConstraints . SOUTH ; gbc_label . insets = new Insets ( 0 , 0 , 5 , 5 ) ; gbc_label . gridx = 1 ; gbc_label . gridy = 0 ; contentPanel . add ( label , gbc_label ) ; } { userNameText = new JTextField ( ) ; GridBagConstraints gbc_userNameText = new GridBagConstraints ( ) ; gbc_userNameText . anchor = GridBagConstraints . SOUTH ; gbc_userNameText . fill = GridBagConstraints . HORIZONTAL ; gbc_userNameText . insets = new Insets ( 0 , 0 , 5 , 5 ) ; gbc_userNameText . gridx = 2 ; gbc_userNameText . gridy = 0 ; contentPanel . add ( userNameText , gbc_userNameText ) ; userNameText . setColumns ( 10 ) ; } { JLabel lblNewLabel = new JLabel ( "\u5BC6\u7801" ) ; GridBagConstraints gbc_lblNewLabel = new GridBagConstraints ( ) ; gbc_lblNewLabel . insets = new Insets ( 0 , 0 , 5 , 5 ) ; gbc_lblNewLabel . gridx = 1 ; gbc_lblNewLabel . gridy = 1 ; contentPanel . add ( lblNewLabel , gbc_lblNewLabel ) ; } { passwordText1 = new JPasswordField ( ) ; GridBagConstraints gbc_passwordText1 = new GridBagConstraints ( ) ; gbc_passwordText1 . insets = new Insets ( 0 , 0 , 5 , 5 ) ; gbc_passwordText1 . fill = GridBagConstraints . HORIZONTAL ; gbc_passwordText1 . gridx = 2 ; gbc_passwordText1 . gridy = 1 ; contentPanel . add ( passwordText1 , gbc_passwordText1 ) ; passwordText1 . setColumns ( 10 ) ; } { JLabel lblNewLabel_1 = new JLabel ( "\u5BC6\u7801\u786E\u8BA4" ) ; GridBagConstraints gbc_lblNewLabel_1 = new GridBagConstraints ( ) ; gbc_lblNewLabel_1 . anchor = GridBagConstraints . NORTH ; gbc_lblNewLabel_1 . insets = new Insets ( 0 , 0 , 0 , 5 ) ; gbc_lblNewLabel_1 . gridx = 1 ; gbc_lblNewLabel_1 . gridy = 2 ; contentPanel . add ( lblNewLabel_1 , gbc_lblNewLabel_1 ) ; } { passwordText2 = new JPasswordField ( ) ; GridBagConstraints gbc_passwordText2 = new GridBagConstraints ( ) ; gbc_passwordText2 . anchor = GridBagConstraints . NORTH ; gbc_passwordText2 . insets = new Insets ( 0 , 0 , 0 , 5 ) ; gbc_passwordText2 . fill = GridBagConstraints . HORIZONTAL ; gbc_passwordText2 . gridx = 2 ; gbc_passwordText2 . gridy = 2 ; contentPanel . add ( passwordText2 , gbc_passwordText2 ) ; passwordText2 . setColumns ( 10 ) ; } { JPanel buttonPane = new JPanel ( ) ; buttonPane . setLayout ( new FlowLayout ( FlowLayout . RIGHT ) ) ; getContentPane ( ) . add ( buttonPane , BorderLayout . SOUTH ) ; { JButton okButton = new JButton ( "OK" ) ; okButton . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { String p1 = new String ( passwordText1 . getPassword ( ) ) ; String p2 = new String ( passwordText2 . getPassword ( ) ) ; if ( ! p1 . equals ( p2 ) ) { JOptionPane . showMessageDialog ( null , "\u5BC6\u7801\u4E0D\u5339\u914D" ) ; } else { UserListManager userManager = UserListManager . getInstance ( ) ; if ( ! userManager . checkUserExist ( userNameText . getText ( ) . trim ( ) ) ) { userName = userNameText . getText ( ) . trim ( ) ; password = p1 ; if ( userManager . addUser ( userName , password ) ) { JOptionPane . showMessageDialog ( null , "\u6DFB\u52A0\u8D26\u53F7\u6210\u529F" ) ; dispose ( ) ; } else { JOptionPane . showMessageDialog ( null , "\u6DFB\u52A0\u8D26\u53F7\u5931\u8D25" ) ; } } else { JOptionPane . showMessageDialog ( null , "\u8D26\u53F7\u5DF2\u5B58\u5728" ) ; } } } } ) ; okButton . setActionCommand ( "OK" ) ; buttonPane . add ( okButton ) ; getRootPane ( ) . setDefaultButton ( okButton ) ; } { JButton cancelButton = new JButton ( "Cancel" ) ; cancelButton . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { dispose ( ) ; } } ) ; cancelButton . setActionCommand ( "Cancel" ) ; buttonPane . add ( cancelButton ) ; } } }
tr	IDF	public TinyUrlWebServiceStub ( ) throws org . apache . axis2 . AxisFault { this ( "http://localhost:8080/TinyUrlWebService/services/TinyUrlWebService.TinyUrlWebServiceHttpSoap12Endpoint/" ) ; }
tr	KEY	public String getName ( ) { return this . name ; }
tr	KEY	public abstract E deleteMin ( ) ;
tr	IDF	public void stopAll ( ) { ArrayList < Presentable > temp = new ArrayList < Presentable > ( ) ; for ( Presentable obj : this . presentables ) { obj . stop ( ) ; temp . add ( obj ) ; } for ( Presentable obj : temp ) { this . presentables . remove ( obj ) ; } }
tr	KEY	public boolean isDrunk ( ) { return drunk ; }
tr	IDF	private void ButtonSaveDeleteActionPerformed ( java . awt . event . ActionEvent evt ) { try { try { list1 . setEnabled ( true ) ; jTextField1 . setEnabled ( false ) ; jTextField2 . setEnabled ( false ) ; jTextField2 . setEditable ( false ) ; jComboBox1 . setEnabled ( false ) ; jButton1 . setVisible ( true ) ; jButton2 . setVisible ( true ) ; jButton3 . setVisible ( true ) ; ButtonSaveDelete . setVisible ( false ) ; DbUtil . deleteUser ( list1 . getSelectedItem ( ) . toString ( ) ) ; } catch ( SQLException ex ) { Logger . getLogger ( UserControl . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; } list1 . removeAll ( ) ; onCreate ( ) ; } catch ( SQLException ex ) { Logger . getLogger ( UserControl . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; } }
tr	IDF	public String getTabbedHashKey ( ) { return this . players . get ( indexOfCurrentPlayer ) . getTabbedImageString ( ) ; }
tr	IDF	public ExactCover ( boolean [ ] [ ] matrix ) { this . matrix = matrix ; this . atoms = new ExactCoverAtom [ matrixCols ( ) ] ; this . parts = new ExactCoverPart [ matrixRows ( ) ] ; for ( int col = 0 ; col < matrixCols ( ) ; ++ col ) { atoms [ col ] = new ExactCoverAtom ( this , col ) ; } for ( int row = 0 ; row < matrixRows ( ) ; ++ row ) { parts [ row ] = new ExactCoverPart ( this , row ) ; } }
tr	KEY	public int getItemId ( ) { return itemId ; }
tr	KEY	@ Override public JMenu createAboutMenu ( ) { return null ; }
tr	KEY	public LiuNianView ( ) { }
tr	IDF	private List < SubFactor > subFactorsBuilder ( ) { List < SubFactor > subfactors = new ArrayList < SubFactor > ( ) { { ArrayList < Option > options1 = new ArrayList < Option > ( ) { { Option o1 = new Option ( ) ; o1 . setId ( 837456784356 ) ; o1 . setValue ( 3 ) ; o1 . setLabel ( "Description A" ) ; o1 . setIsSelected ( true ) ; add ( o1 ) ; Option o2 = new Option ( ) ; o2 . setId ( 837456784356 ) ; o2 . setValue ( 1 ) ; o2 . setLabel ( "Description B" ) ; o2 . setIsSelected ( false ) ; add ( o2 ) ; } } ; SubFactor sf1 = new SubFactor ( ) ; sf1 . setId ( 837456784356 ) ; sf1 . setRating ( 13 ) ; sf1 . setSelected ( 1 ) ; sf1 . setLabel ( "Economic Environment" ) ; sf1 . setOptions ( options1 ) ; add ( sf1 ) ; ArrayList < Option > options2 = new ArrayList < Option > ( ) { { Option o1 = new Option ( ) ; o1 . setId ( 837456784356 ) ; o1 . setValue ( 5 ) ; o1 . setLabel ( "Description" ) ; o1 . setIsSelected ( true ) ; add ( o1 ) ; Option o2 = new Option ( ) ; o2 . setId ( 837456784356 ) ; o2 . setValue ( 3 ) ; o2 . setLabel ( "Description available" ) ; o2 . setIsSelected ( false ) ; add ( o2 ) ; } } ; SubFactor sf2 = new SubFactor ( ) ; sf2 . setId ( 837456784356 ) ; sf2 . setRating ( 10 ) ; sf2 . setSelected ( 5 ) ; sf2 . setLabel ( "Something Else" ) ; sf2 . setOptions ( options2 ) ; add ( sf2 ) ; } } ; return subfactors ; }
tr	IDF	private void list1MouseClicked ( java . awt . event . MouseEvent evt ) { selected = list1 . getSelectedIndex ( ) ; textField1 . setText ( itemsLoad [ selected ] [ 0 ] ) ; textField2 . setText ( itemsLoad [ selected ] [ 1 ] ) ; jComboBox1 . setSelectedIndex ( Integer . parseInt ( categories [ Integer . parseInt ( itemsLoad [ selected ] [ 2 ] ) - 1 ] [ 0 ] ) - 1 ) ; System . out . println ( categories [ Integer . parseInt ( itemsLoad [ selected ] [ 2 ] ) - 1 ] [ 0 ] ) ; textField3 . setText ( itemsLoad [ selected ] [ 3 ] ) ; jComboBox2 . setSelectedIndex ( Integer . parseInt ( itemsLoad [ selected ] [ 4 ] ) ) ; textField4 . setText ( itemsLoad [ selected ] [ 5 ] ) ; }
tr	IDF	void actionVerifyPIN ( ) throws CardServiceException { char [ ] p = adminPane . getPIN3 ( ) ; if ( p != null && p . length != 0 ) { byte [ ] pin = new byte [ p . length ] ; for ( int i = 0 ; i < pin . length ; i ++ ) { pin [ i ] = ( byte ) p [ i ] ; } service . verifyPIN ( pin ) ; adminPane . clearPIN3 ( ) ; } }
tr	IDF	@ Override public void windowClosing ( WindowEvent arg0 ) { exit ( ) ; }
tr	IDF	public EditProfilesDialog ( java . awt . Frame parent , boolean modal ) { super ( parent , modal ) ; initComponents ( ) ; }
tr	KEY	public boolean isCellEditable ( int row , int column ) { if ( column < 8 ) { return false ; } else { return true ; } }
tr	KEY	public void setBoard ( int [ ] [ ] board ) { this . board = board ; }
tr	IDF	public void assignD4KeyCode ( XbpadButton button , String text , int keycode ) { container . xgetCurrentPreset ( ) . xassignD4KeyCode ( keycode ) ; button . setText ( text ) ; button . repaint ( ) ; }
tr	KEY	public abstract void updateSucess ( Update update ) ;
tr	IDF	@ Override public void windowOpened ( WindowEvent e ) { loadProp ( ) ; }
tr	IDF	private JLabel createPalaceCardJLabel ( String hashKey ) { JLabel label = new JLabel ( ) ; label . setIcon ( new ImageIcon ( imageSourceHashMap . get ( hashKey ) ) ) ; label . setPreferredSize ( new Dimension ( 80 , 110 ) ) ; label . setBorder ( BorderFactory . createEmptyBorder ( 0 , 5 , 10 , 5 ) ) ; return label ; }
tr	IDF	@ Override default GSalary S ( double salary ) { return new GSalary ( ) { public < Company , Dept , SubUnit , Employee , Person , Salary > Salary accept ( SybAlg < Company , Dept , SubUnit , Employee , Person , Salary > alg ) { return alg . S ( salary * 1.1 ) ; } } ; }
tr	KEY	public ReprocessingServiceImpl ( ) { }
tr	KEY	@ JsonProperty ( "id" ) public long getId ( ) { return id ; }
tr	IDF	protected void syncRun ( ) { synchronized ( account ) { long result = account . details ( ) ; account . add ( amount ) ; System . out . println ( "\u73B0\u6709" + result + "  \u5B58\u5165" + amount + "  \u4F59\u989D" + account . details ( ) ) ; } }
tr	KEY	int getNumberOfColumns ( ) ;
tr	KEY	double normp ( double p ) ;
tr	KEY	public int getPointDeVie ( ) { return this . point_de_vie ; }
tr	IDF	public void crear ( Proyecto proyecto ) throws SQLException { if ( proyectoDAO . exists ( proyecto ) == false ) { proyectoDAO . add ( proyecto ) ; } else { throw new SQLException ( "No se puede crear un nuevo proyecto ya que este proyecto ya existe" ) ; } }
tr	IDF	public void init ( ) { screen = new ScreenManager ( ) ; DisplayMode displayMode = screen . findFirstCompatibleMode ( POSSIBLE_MODES ) ; screen . setFullScreen ( displayMode ) ; System . out . println ( displayMode . getWidth ( ) + " " + displayMode . getHeight ( ) ) ; Window window = screen . getFullScreenWindow ( ) ; window . setFont ( new Font ( "Dialog" , Font . PLAIN , FONT_SIZE ) ) ; window . setBackground ( Color . blue ) ; window . setForeground ( Color . white ) ; isRunning = true ; }
tr	IDF	private static Object parse ( XMLTokener x , boolean arrayForm , JSONArray ja ) throws JSONException { String attribute ; char c ; String closeTag = null ; int i ; JSONArray newja = null ; JSONObject newjo = null ; Object token ; String tagName = null ; while ( true ) { token = x . nextContent ( ) ; if ( token == XML . < ) { token = x . nextToken ( ) ; if ( token instanceof Character ) { if ( token == XML . / ) { token = x . nextToken ( ) ; if ( ! ( token instanceof String ) ) { throw new JSONException ( "Expected a closing name instead of '" + token + "'." ) ; } if ( x . nextToken ( ) != XML . > ) { throw x . syntaxError ( "Misshaped close tag" ) ; } return token ; } else if ( token == XML . ! ) { c = x . next ( ) ; if ( c == - ) { if ( x . next ( ) == - ) { x . skipPast ( "-->" ) ; } x . back ( ) ; } else if ( c == [ ) { token = x . nextToken ( ) ; if ( token . equals ( "CDATA" ) && x . next ( ) == [ ) { if ( ja != null ) { ja . put ( x . nextCDATA ( ) ) ; } } else { throw x . syntaxError ( "Expected 'CDATA['" ) ; } } else { i = 1 ; do { token = x . nextMeta ( ) ; if ( token == null ) { throw x . syntaxError ( "Missing '>' after '<!'." ) ; } else if ( token == XML . < ) { i += 1 ; } else if ( token == XML . > ) { i -= 1 ; } } while ( i > 0 ) ; } } else if ( token == XML . QUEST ) { x . skipPast ( "?>" ) ; } else { throw x . syntaxError ( "Misshaped tag" ) ; } } else { if ( ! ( token instanceof String ) ) { throw x . syntaxError ( "Bad tagName '" + token + "'." ) ; } tagName = ( String ) token ; newja = new JSONArray ( ) ; newjo = new JSONObject ( ) ; if ( arrayForm ) { newja . put ( tagName ) ; if ( ja != null ) { ja . put ( newja ) ; } } else { newjo . put ( "tagName" , tagName ) ; if ( ja != null ) { ja . put ( newjo ) ; } } token = null ; for ( ; ; ) { if ( token == null ) { token = x . nextToken ( ) ; } if ( token == null ) { throw x . syntaxError ( "Misshaped tag" ) ; } if ( ! ( token instanceof String ) ) { break ; } attribute = ( String ) token ; if ( ! arrayForm && ( attribute == "tagName" || attribute == "childNode" ) ) { throw x . syntaxError ( "Reserved attribute." ) ; } token = x . nextToken ( ) ; if ( token == XML . = ) { token = x . nextToken ( ) ; if ( ! ( token instanceof String ) ) { throw x . syntaxError ( "Missing value" ) ; } newjo . accumulate ( attribute , JSONObject . stringToValue ( ( String ) token ) ) ; token = null ; } else { newjo . accumulate ( attribute , "" ) ; } } if ( arrayForm && newjo . length ( ) > 0 ) { newja . put ( newjo ) ; } if ( token == XML . / ) { if ( x . nextToken ( ) != XML . > ) { throw x . syntaxError ( "Misshaped tag" ) ; } if ( ja == null ) { if ( arrayForm ) { return newja ; } else { return newjo ; } } } else { if ( token != XML . > ) { throw x . syntaxError ( "Misshaped tag" ) ; } closeTag = ( String ) parse ( x , arrayForm , newja ) ; if ( closeTag != null ) { if ( ! closeTag . equals ( tagName ) ) { throw x . syntaxError ( "Mismatched '" + tagName + "' and '" + closeTag + "'" ) ; } tagName = null ; if ( ! arrayForm && newja . length ( ) > 0 ) { newjo . put ( "childNodes" , newja ) ; } if ( ja == null ) { if ( arrayForm ) { return newja ; } else { return newjo ; } } } } } } else { if ( ja != null ) { ja . put ( token instanceof String ? JSONObject . stringToValue ( ( String ) token ) : token ) ; } } } }
tr	IDF	public static void main ( String [ ] args ) { System . out . println ( "-- ForkJoin ---------------------------------------" ) ; int [ ] items = new int [ 40 ] ; for ( int i = 0 ; i < 40 ; i ++ ) items [ i ] = i ; ForkJoinPool pool = new ForkJoinPool ( 10 ) ; pool . invoke ( new Task ( items ) ) ; System . out . println ( "*** All Done ***" ) ; }
tr	IDF	public VakPanel ( ) { setLayout ( new BorderLayout ( 0 , 0 ) ) ; list = new JList < Vak > ( vakLijst ) ; list . addMouseListener ( new MouseAdapter ( ) { public void mouseClicked ( MouseEvent evt ) { JList < Vak > list = ( JList < Vak > ) evt . getSource ( ) ; if ( evt . getClickCount ( ) == 1 ) { int index = list . locationToIndex ( evt . getPoint ( ) ) ; if ( index < vakLijst . size ( ) && index >= 0 ) { Vak vak = vakLijst . get ( index ) ; List < Klas > klassen = Dao . getInstance ( ) . getKlassenVanVak ( vak . getId ( ) ) ; vakInfoPanel . setKlassenLijst ( klassen ) ; } } } } ) ; add ( list , BorderLayout . WEST ) ; list . setPreferredSize ( new Dimension ( 250 , 500 ) ) ; vakInfoPanel = new VakInfoPanel ( ) ; add ( vakInfoPanel , BorderLayout . CENTER ) ; JPanel panel = new JPanel ( ) ; add ( panel , BorderLayout . SOUTH ) ; JButton vakToevoegen = new JButton ( "Voeg vak toe" ) ; JButton verwijderVak = new JButton ( "Verwijder vak" ) ; JButton klasToevoegen = new JButton ( "Voeg klas toe aan vak" ) ; JButton klasVerwijderen = new JButton ( "Verwijder klas van vak" ) ; panel . add ( vakToevoegen ) ; panel . add ( verwijderVak ) ; panel . add ( klasToevoegen ) ; panel . add ( klasVerwijderen ) ; vakToevoegen . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent arg0 ) { JTextField naam = new JTextField ( ) ; JComboBox docenten = new JComboBox ( ) ; for ( User docent : Dao . getInstance ( ) . getDocenten ( ) ) { docenten . addItem ( docent ) ; } JLabel vulNaam = new JLabel ( "Hoe heet het vak?" ) ; JComponent [ ] inputs = null ; if ( Sessie . getIngelogdeGebruiker ( ) . heeftPermissie ( PermissieHelper . permissies . get ( "BEHEERALLEVAKKEN" ) ) ) { inputs = new JComponent [ ] { vulNaam , naam , new JLabel ( "Uitvoerende docent" ) , docenten } ; } else if ( Sessie . getIngelogdeGebruiker ( ) . heeftPermissie ( PermissieHelper . permissies . get ( "BEHEEREIGENVAKKEN" ) ) ) { inputs = new JComponent [ ] { vulNaam , naam } ; } int result = JOptionPane . showConfirmDialog ( null , inputs , "Vak toevoegen" , JOptionPane . OK_CANCEL_OPTION ) ; if ( result == JOptionPane . YES_OPTION ) { if ( Sessie . getIngelogdeGebruiker ( ) . heeftPermissie ( PermissieHelper . permissies . get ( "BEHEERALLEVAKKEN" ) ) ) { Dao . getInstance ( ) . addVak ( naam . getText ( ) , ( ( User ) ( docenten . getSelectedItem ( ) ) ) . getId ( ) ) ; } else if ( Sessie . getIngelogdeGebruiker ( ) . heeftPermissie ( PermissieHelper . permissies . get ( "BEHEEREIGENVAKKEN" ) ) ) { Dao . getInstance ( ) . addVak ( naam . getText ( ) , Sessie . getIngelogdeGebruiker ( ) . getId ( ) ) ; } refreshPanel ( ) ; } } } ) ; verwijderVak . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { Vak selected = vakLijst . get ( list . getSelectedIndex ( ) ) ; int result = JOptionPane . showConfirmDialog ( null , "Wil je " + selected . getNaam ( ) + " verwijderen?" , null , JOptionPane . YES_NO_OPTION ) ; if ( result == JOptionPane . YES_OPTION ) { Dao . getInstance ( ) . verwijderVak ( selected . getId ( ) ) ; refreshPanel ( ) ; vakInfoPanel . clear ( ) ; } } } ) ; klasToevoegen . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { JComboBox klassen = new JComboBox ( ) ; for ( Klas klas : Dao . getInstance ( ) . getKlassen ( ) ) { klassen . addItem ( klas ) ; } JLabel selecteer = new JLabel ( "Selecteer een klas en klik op Ok" ) ; final JComponent [ ] inputs = new JComponent [ ] { selecteer , klassen } ; int result = JOptionPane . showConfirmDialog ( null , inputs , "Klas toevoegen" , JOptionPane . OK_CANCEL_OPTION ) ; if ( result == JOptionPane . YES_OPTION ) { Klas selectedKlas = ( Klas ) klassen . getSelectedItem ( ) ; int index = list . getSelectedIndex ( ) ; if ( index < vakLijst . size ( ) && index >= 0 ) { Vak vakSelected = vakLijst . get ( index ) ; if ( ! selectedKlas . getVakken ( ) . contains ( vakSelected ) ) { selectedKlas . getVakken ( ) . add ( vakSelected ) ; Dao . getInstance ( ) . addKlasAanVak ( selectedKlas . getId ( ) , vakSelected . getId ( ) ) ; vakInfoPanel . setKlassenLijst ( Dao . getInstance ( ) . getKlassenVanVak ( vakSelected . getId ( ) ) ) ; } else { JOptionPane . showMessageDialog ( null , "Klas is al gekoppeld aan dit vak!" , "Fout" , JOptionPane . INFORMATION_MESSAGE ) ; } } } } } ) ; klasVerwijderen . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { Klas klas = vakInfoPanel . getSelectedKlas ( ) ; Vak vak = vakLijst . get ( list . getSelectedIndex ( ) ) ; int result = JOptionPane . showConfirmDialog ( null , "Wil je " + klas . getNaam ( ) + " verwijderen uit " + vak . getNaam ( ) + "?" , null , JOptionPane . YES_NO_OPTION ) ; if ( result == JOptionPane . YES_OPTION ) { Dao . getInstance ( ) . verwijderKlasVanVak ( klas . getId ( ) , vak . getId ( ) ) ; klas . getVakken ( ) . remove ( vak ) ; vakInfoPanel . setKlassenLijst ( Dao . getInstance ( ) . getKlassenVanVak ( vak . getId ( ) ) ) ; } } } ) ; }
tr	IDF	public JSONObject ( Object bean , boolean includeSuperClass ) { this ( ) ; populateInternalMap ( bean , includeSuperClass ) ; }
tr	IDF	public static boolean validate ( final String ip ) { Pattern pattern = Pattern . compile ( PATTERN ) ; Matcher matcher = pattern . matcher ( ip ) ; return matcher . matches ( ) ; }
tr	KEY	protected void interrupted ( ) { }
tr	KEY	float getX ( ) ;
tr	IDF	public void setInstructions ( String instructions ) { this . instructions = instructions ; }
tr	IDF	public void setLastName ( String value ) { this . lastName = value ; }
tr	IDF	public void exportTopic ( String name , String path ) ;
tr	IDF	public void setFecha ( Date fecha ) { this . fecha = fecha ; }
tr	IDF	public void setBeginGame ( JButton beginGame ) { this . beginGame = beginGame ; }
tr	IDF	public HTTPServiceCaller ( ) { encoder = new JsonCallEncoder ( JsonParserBuilder . build ( new ServiceProxyMaker ( this ) ) ) ; }
tr	KEY	public final void setTextureWidth ( final int texWidth ) { this . texWidth = texWidth ; }
tr	IDF	public void actionPerformed ( ActionEvent e ) { login ( ) ; }
tr	IDF	@ Test public void testPD ( ) { PositionDirection pd = PositionDirection . CLOCK3 ; PositionDirection newPd = pd . next ( 3 ) ; int degree = Transformation2D . calculateRotaDegree ( pd , newPd ) ; assertTrue ( newPd == PositionDirection . CLOCK6 ) ; assertTrue ( degree == - 90 ) ; }
tr	IDF	public void setConsole ( Console console ) { m_parentConsole = console ; }
tr	KEY	public boolean isPintado ( ) { return pintado ; }
tr	KEY	@ Override public boolean hasNext ( ) { return ( next == null || next <= k ) ? false : true ; }
tr	IDF	public static INDISwitchOneOrNoneProperty createSaveableSwitchOneOrNoneProperty ( INDIDriver driver , String name , String label , PropertyStates state , PropertyPermissions permission , String option , SwitchStatus initialStatus ) throws IllegalArgumentException { INDISwitchOneOrNoneProperty sp = loadSwitchOneOrNoneProperty ( driver , name ) ; if ( sp == null ) { sp = new INDISwitchOneOrNoneProperty ( driver , name , label , state , permission , option , initialStatus ) ; sp . setSaveable ( true ) ; } return sp ; }
tr	IDF	@ Override public Thread newThread ( Runnable r ) { Thread t = new Thread ( r ) ; t . setName ( "GameEventBus-Thread" ) ; return t ; }
tr	IDF	@ Override public String getMessage ( ) { return message ; }
tr	IDF	public String toString ( ) { return bytecode . toString ( ) ; }
tr	IDF	private static int zzUnpackTrans ( String packed , int offset , int [ ] result ) { int i = 0 ; int j = offset ; int l = packed . length ( ) ; while ( i < l ) { int count = packed . charAt ( i ++ ) ; int value = packed . charAt ( i ++ ) ; value -- ; do result [ j ++ ] = value ; while ( -- count > 0 ) ; } return j ; }
tr	KEY	public void setYear ( int year ) { this . year = year ; }
tr	IDF	public AbstractTIPPBuilder setTargetLocale ( String tgtLang ) { getManifestBuilder ( ) . setTargetLocale ( tgtLang ) ; return this ; }
tr	IDF	void heardFrom ( String from , String what ) ;
tr	IDF	FSet < Key > domain ( ) ;
tr	IDF	AmbienteExecucao executar ( AmbienteExecucao ambiente ) throws IdentificadorJaDeclaradoException , IdentificadorNaoDeclaradoException ;
tr	KEY	public double getCoefficient ( ) { return coefficient ; }
tr	KEY	public int getNbInsert ( ) { return nbInsert ; }
tr	KEY	public int getIdproveedor ( ) { return idproveedor ; }
tr	IDF	public T visitASTTCmdRight ( ASTTCmdRight form , S state ) throws FractalException ;
tr	KEY	public void startGame ( ) { start = true ; }
tr	KEY	public ImageResponse createImageResponse ( ) { return new ImageResponse ( ) ; }
tr	IDF	private void updateWSYNC ( int data ) { setRegister ( WSYNC , data ) ; mRDY = true ; }
tr	IDF	@ Override public void run ( ) { GuiApplication . guiController . scrollPane . setVvalue ( 1 ) ; }
tr	IDF	public void mouseReleased ( MouseEvent e ) { GameAction gameAction = getMouseButtonAction ( e ) ; if ( gameAction != null ) { gameAction . release ( ) ; } }
tr	IDF	public void remove ( Base o ) { Notebook notebook = ( Notebook ) o ; EntityTransaction tx = getEntityManager ( ) . getTransaction ( ) ; tx . begin ( ) ; getEntityManager ( ) . remove ( notebook ) ; tx . commit ( ) ; }
tr	KEY	public JsonElementFactory ( ) { super ( ) ; }
tr	IDF	public void setThreat ( String threat ) { this . threat = threat ; }
tr	KEY	public boolean equals ( Object _other ) { if ( _other == null ) { return false ; } if ( _other == this ) { return true ; } if ( ! ( _other instanceof InviteResPk ) ) { return false ; } final InviteResPk _cast = ( InviteResPk ) _other ; if ( inviteRes == null ? _cast . inviteRes != inviteRes : ! inviteRes . equals ( _cast . inviteRes ) ) { return false ; } return true ; }
tr	IDF	private org . apache . axiom . soap . SOAPEnvelope toEnvelope ( org . apache . axiom . soap . SOAPFactory factory , src . com . tinyurl . TinyUrlWebServiceStub . GetLongUrl param , boolean optimizeContent , javax . xml . namespace . QName methodQName ) throws org . apache . axis2 . AxisFault { try { org . apache . axiom . soap . SOAPEnvelope emptyEnvelope = factory . getDefaultEnvelope ( ) ; emptyEnvelope . getBody ( ) . addChild ( param . getOMElement ( src . com . tinyurl . TinyUrlWebServiceStub . GetLongUrl . MY_QNAME , factory ) ) ; return emptyEnvelope ; } catch ( org . apache . axis2 . databinding . ADBException e ) { throw org . apache . axis2 . AxisFault . makeFault ( e ) ; } }
tr	KEY	protected SonarSoundEngine ( ) { }
tr	KEY	public int getColumnStart ( ) { return columnStart ; }
tr	IDF	public void run ( ) { try { Search frame = new Search ( null , "1023" ) ; frame . setVisible ( true ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }
tr	KEY	public void setCurrentHP ( int currentHP ) { this . currentHP = currentHP ; }
tr	IDF	public static boolean areEqual ( Vector2D v0 , Vector2D v1 ) { return ( FastMath . abs ( v1 . x - v0 . x ) < EPSILON && FastMath . abs ( v1 . y - v0 . y ) < EPSILON ) ; }
tr	KEY	public static void setLifeDegenSpeed ( int value ) { LIFE_DEGEN_SPEED = value ; }
tr	KEY	public void setIdgalleryImage ( int idgalleryImage ) { this . idgalleryImage = idgalleryImage ; }
tr	KEY	public int getPar ( ) { return par ; }
tr	KEY	@ Override public long getTimestamp ( ) { return this . timestamp ; }
tr	IDF	@ Override public void putSpace ( ) throws ParsingException { if ( token . isBuilding ( ) ) { close ( ) ; } }
tr	IDF	private int readHeader ( ) throws IOException , JDBFException { byte abyte0 [ ] = new byte [ 16 ] ; try { stream . readFully ( abyte0 ) ; } catch ( EOFException eofexception ) { throw new JDBFException ( "Unexpected end of file reached." ) ; } int i = abyte0 [ 8 ] ; if ( i < 0 ) i += 256 ; i += 256 * abyte0 [ 9 ] ; i = -- i / 32 ; i -- ; try { stream . readFully ( abyte0 ) ; } catch ( EOFException eofexception1 ) { throw new JDBFException ( "Unexpected end of file reached." ) ; } return i ; }
tr	KEY	public int getStatisticCountRight ( ) ;
tr	IDF	public CONLLReader ( Options options ) { this . options = options ; }
tr	IDF	@ Test public void podeRealizarMovimentacao ( ) throws CasaOcupadaException { tabuleiro . colocarPeca ( new Posicao ( 2 , 3 ) , reiBranco ) ; assert . assertTrue ( tabuleiro . podeRealizarMovimentacao ( new Posicao ( 1 , 1 ) , new Posicao ( 8 , 8 ) ) ) ; assert . assertTrue ( tabuleiro . podeRealizarMovimentacao ( new Posicao ( 4 , 1 ) , new Posicao ( 4 , 8 ) ) ) ; assert . assertTrue ( tabuleiro . podeRealizarMovimentacao ( new Posicao ( 8 , 1 ) , new Posicao ( 1 , 8 ) ) ) ; assert . assertTrue ( tabuleiro . podeRealizarMovimentacao ( new Posicao ( 1 , 4 ) , new Posicao ( 8 , 4 ) ) ) ; assert . assertFalse ( tabuleiro . podeRealizarMovimentacao ( new Posicao ( 2 , 1 ) , new Posicao ( 2 , 8 ) ) ) ; assert . assertFalse ( tabuleiro . podeRealizarMovimentacao ( new Posicao ( 1 , 3 ) , new Posicao ( 4 , 3 ) ) ) ; }
tr	IDF	@ Override public String getErrorName ( ) { return super . getErrorName ( ) + "." + businessRuleViolated ; }
tr	KEY	public boolean nextLine ( ) { if ( ( this . line = this . getLine ( ) ) != null ) { words = this . line . split ( "\\s" ) ; token = - 1 ; return false ; } else return true ; }
tr	KEY	public synchronized void xassignBKeyCode ( int code ) { b = code ; }
tr	IDF	public ProtocolSignature ( String name , String version ) { this . name = name ; this . value = version ; }
tr	KEY	public CParser ( ) { }
tr	KEY	public boolean setPosition ( int position ) ;
tr	KEY	public void setMpp ( int mpp ) { this . mpp = mpp ; }
tr	IDF	@ Before public void setup ( ) { when ( root1 . withListener ( any ( ) ) ) . thenReturn ( root1 ) ; when ( root2 . withListener ( any ( ) ) ) . thenReturn ( root2 ) ; }
tr	IDF	@ Override public Action pressEnter ( GameModel game ) { Action action = new PlaceDeveloperOnBoardAction ( game . nextActionID ( ) , x , y ) ; if ( action . doAction ( game ) ) return action ; return null ; }
tr	IDF	private JMenu createHelpMenu ( ) { JMenu help = new JMenu ( "Help" ) ; help . add ( createItem ( "Help" , "How to play" ) ) ; return help ; }
tr	KEY	private FileNameUtils ( ) { }
tr	KEY	public double getCurrentAxisY ( ) ;
tr	KEY	public void setDepth ( double depth ) { this . depth = depth ; }
tr	IDF	public static Person create ( Supplier < Person > supplier ) { Person person = supplier . get ( ) ; System . out . println ( "'create()' has been called and created class " + person ) ; return person ; }
tr	KEY	public PentHouse pentHouse ( ) { return new PentHouse ( this ) ; }
tr	IDF	public static void main ( String [ ] args ) { Context objContext ; objContext = new Context ( new ConcreteStrategyAdd ( ) ) ; int resultA = objContext . executeStrategy ( 3 , 4 ) ; objContext = new Context ( new ConcreteStrategySubtract ( ) ) ; int resultB = objContext . executeStrategy ( 3 , 4 ) ; }
tr	IDF	public void init ( FilterConfig fConfig ) throws ServletException { IS_OPEN_VALUE = fConfig . getInitParameter ( IS_OPEN ) ; INDEX_PAGE_VALUE = fConfig . getInitParameter ( INDEX_PAGE ) ; LOGIN_PAGE_VALUE = fConfig . getInitParameter ( LOGIN_PAGE ) ; SIGN_PAGE_VALUE = fConfig . getInitParameter ( SIGN_PAGE ) ; HELP_PAGE_VALUE = fConfig . getInitParameter ( HELP_PAGE ) ; FINDPWD_PAGE_VALUE = fConfig . getInitParameter ( FINDPWD_PAGE ) ; }
tr	IDF	@ Test ( expected = InterfaceHasMethodsWithSimilarName . class ) public void registrationFailsIfInterfaceHasMethodsWithNamesDifferingInCase ( ) { proxyMaker . make ( serviceAddress , ServiceInterfaceWithMethodNamesDifferingInCase . class ) ; }
tr	IDF	@ Override public boolean CanMove ( ChessTile Start , ChessTile End ) { int ForwardMove = Start . GetPosition ( ) [ 1 ] - End . GetPosition ( ) [ 1 ] ; int SideMove = Math . abs ( Start . GetPosition ( ) [ 0 ] - End . GetPosition ( ) [ 0 ] ) ; ChessPiece MovingPiece = Start . GetHeldPiece ( ) ; ChessPiece TargetPiece = End . GetHeldPiece ( ) ; if ( ! Start . HasClearPath ( End ) ) { return false ; } if ( MovingPiece . GetOwner ( ) == ChessState . PieceOwner . White ) { ForwardMove = - ForwardMove ; } if ( ForwardMove == 2 && SideMove == 0 ) { return ! Start . GetHeldPiece ( ) . HasMoved ( ) && TargetPiece == null ; } else if ( ForwardMove == 1 && SideMove == 1 ) { return TargetPiece != null && TargetPiece . GetOwner ( ) != MovingPiece . GetOwner ( ) ; } else if ( ForwardMove == 1 && SideMove == 0 ) { return TargetPiece == null ; } else { return false ; } }
tr	KEY	public boolean isShowGridBlockBox ( ) { return showGridBlockBox ; }
tr	IDF	OreMineralImpl toOreMineral ( Ore ore ) { return new OreMineralImpl ( mineral , ore , unitsPerCubicMeter , unitsPerBatch ) ; }
tr	KEY	@ Override public void end ( ) { ended = true ; }
tr	KEY	public TerminalNode int ( ) { return getToken ( EnquantoParser . int , 0 ) ; }
tr	IDF	private void aplicarRoqueMenor ( ) throws JogadaInvalidaException { int linha = getMinhaLinhaDeRoque ( ) ; Peca torre = tabuleiro . retirarPeca ( new Posicao ( 8 , linha ) ) ; Peca rei = tabuleiro . retirarPeca ( new Posicao ( 5 , linha ) ) ; try { tabuleiro . colocarPeca ( new Posicao ( 7 , linha ) , rei ) ; tabuleiro . colocarPeca ( new Posicao ( 6 , linha ) , torre ) ; } catch ( CasaOcupadaException e ) { throw new JogadaInvalidaException ( "O caminho para fazer o Roque Menor n\u00E3o est\u00E1 livre." ) ; } }
tr	KEY	abstract void prepare ( ) ;
tr	KEY	protected abstract IKey montaDado ( ) ;
tr	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButtonTambahkanActionPerformed ( evt ) ; }
tr	KEY	public void startTurn ( ) { this . currentTurn = new Turn ( ) ; this . turns . add ( this . currentTurn ) ; }
tr	IDF	public Crypto ( ) { supportedAlgorithms . add ( AES ) ; supportedAlgorithms . add ( DES ) ; supportedAlgorithms . add ( BLOWFISH ) ; supportedAlgorithms . add ( CAESAR ) ; }
tr	KEY	public int getStatus ( ) { return status ; }
tr	KEY	public boolean isStarted ( ) { return started ; }
tr	KEY	public synchronized void xassignRBKeyCode ( int code ) { rb = code ; }
tr	KEY	public int getColumnCount ( ) { return columnNames . length ; }
tr	KEY	public void setNumberOfPlays ( int numberOfPlays ) { this . numberOfPlays = numberOfPlays ; }
tr	IDF	@ Override protected void get ( Message request , Message response ) { if ( request . containsField ( Question . ID ) ) { request . put ( Document . ID , request . get ( Question . ID ) ) ; new PersistentDocumentService ( ) . doGet ( request , response ) ; } else { new QuestionSearchIndexService ( ) . doGet ( request , response ) ; } }
tr	IDF	public static Value of ( long l ) { return new Value ( DataType . INTEGER , l ) ; }
tr	IDF	public static void main ( String [ ] args ) { Solution solution = new Solution ( ) ; int [ ] array = { 6 , 1 , 2 , 3 , 4 , 5 , 4 , 3 , 2 , 1 , 5 } ; System . out . println ( solution . singleNumber ( array ) ) ; }
tr	IDF	@ Override public ActionMenuItem [ ] get_menus ( ) { ActionMenuItem move = new ActionMenuItem ( "Move" , this ) ; ActionMenuItem unload = new ActionMenuItem ( "Unload" , this ) ; return new ActionMenuItem [ ] { move , unload } ; }
tr	IDF	private void collideShipToPlanet ( ShipV2 player , Planet planet ) { player . setVelocity ( new Vector2D ( 0 , 0 ) ) ; }
tr	IDF	public void endLargeRecord ( ) { endLargeTime = 2982 - levelScene . timeLeft ; totalLargeTime += endLargeTime - startLargeTime ; System . out . println ( "LARGE END" ) ; detailedLog += "LargeState: StTime = " + startLargeTime + " EdTime = " + endLargeTime ; detailedLog += "\n" ; }
tr	KEY	public double getSeconds ( ) { return seconds ; }
tr	IDF	public int getWidth ( ) { int width = 0 ; for ( TEView view : this . collection ) { if ( view . getWidth ( ) >= width ) { width = view . getWidth ( ) ; } } return width ; }
tr	KEY	public void setDistance ( double distance ) { this . distance = distance ; }
tr	KEY	@ Override public TBlock rotateClockwiseCounter ( ) { return this ; }
tr	IDF	private JMenuItem createSubMenuMainMenu ( ) { JMenuItem item = new JMenuItem ( "Main Menu" ) ; item . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { dispose ( ) ; disconnecFromServer ( ) ; StartSnakeGame . frame . setVisible ( true ) ; } } ) ; return item ; }
tr	KEY	@ Override public void popCol ( ) { }
tr	IDF	public static String reverse ( String s ) { char [ ] arr = s . toCharArray ( ) ; for ( int i = 0 , j = arr . length - 1 ; i < arr . length / 2 ; i ++ , j -- ) { arr [ i ] ^= arr [ j ] ; arr [ j ] ^= arr [ i ] ; arr [ i ] ^= arr [ j ] ; } return new String ( arr ) ; }
tr	IDF	protected abstract void __doPost ( HttpServletRequest req , HttpServletResponse resp ) throws IOException , ServletException ;
tr	IDF	private void buttonAbrir_FaseActionPerformed ( java . awt . event . ActionEvent evt ) { JFileChooser loadEmp = new JFileChooser ( ) ; FileNameExtensionFilter filter = new FileNameExtensionFilter ( "Arquivo de Texto" , "txt" ) ; loadEmp . addChoosableFileFilter ( filter ) ; loadEmp . setAcceptAllFileFilterUsed ( false ) ; loadEmp . setFileFilter ( filter ) ; loadEmp . setMultiSelectionEnabled ( false ) ; if ( loadEmp . showOpenDialog ( null ) != JFileChooser . APPROVE_OPTION ) { return ; } try { FileReader fr = new FileReader ( loadEmp . getSelectedFile ( ) ) ; BufferedReader br = new BufferedReader ( fr ) ; String linha ; StringBuffer sb = new StringBuffer ( ) ; while ( ( linha = br . readLine ( ) ) != null ) { sb . append ( linha ) . append ( "\n" ) ; } fr . close ( ) ; codeEditor . setText ( "" ) ; codeEditor . setText ( sb . toString ( ) ) ; } catch ( Exception e ) { } }
tr	KEY	public boolean isEmpty ( ) { if ( head == null && elements . isEmpty ( ) ) { return true ; } if ( head != null && ! elements . isEmpty ( ) ) { return false ; } throw new IllegalStateException ( "Wrong implementation" ) ; }
tr	IDF	public LSInput resolveResource ( String type , String namespaceURI , String publicId , String systemId , String baseURI ) { LSInput input = ( ( DOMImplementationLS ) dom . getImplementation ( ) ) . createLSInput ( ) ; if ( ( "TIPPCommon.xsd" . equals ( systemId ) && W3C_XML_SCHEMA_NS_URI . equals ( type ) ) || COMMON_SCHEMA_LOCATION . equalsIgnoreCase ( baseURI ) ) { input . setByteStream ( getClass ( ) . getResourceAsStream ( "/TIPPCommon-1_5.xsd" ) ) ; } else if ( XMLDSIG_SCHEMA_URI . equalsIgnoreCase ( baseURI ) || XMLDSIG_NS_PREFIX . equalsIgnoreCase ( namespaceURI ) ) { input . setByteStream ( getClass ( ) . getResourceAsStream ( "/xmldsig-core-schema.xsd" ) ) ; } else if ( "http://www.w3.org/2001/XMLSchema.dtd" . equals ( baseURI ) || "http://www.w3.org/2001/XMLSchema.dtd" . equals ( systemId ) ) { input . setByteStream ( getClass ( ) . getResourceAsStream ( "/XMLSchema.dtd" ) ) ; } else if ( "datatypes.dtd" . equals ( systemId ) ) { input . setByteStream ( getClass ( ) . getResourceAsStream ( "/datatypes.dtd" ) ) ; } else { return null ; } return input ; }
tr	KEY	public static boolean isDoChecks ( ) { return getBoolean ( "sun.java2d.renderer.doChecks" , "false" ) ; }
tr	IDF	public static void main ( String [ ] args ) { char [ ] [ ] block = new char [ ] [ ] { {   ,   ,   } , { * , * , * } , {   ,   , * } , } ; print ( block ) ; block = rotate ( block ) ; print ( block ) ; block = rotate ( block ) ; print ( block ) ; block = rotate ( block ) ; print ( block ) ; }
tr	IDF	public UserCreationScreen ( Stage primaryStage ) { this . primaryStage = primaryStage ; }
tr	IDF	protected void navigateTo ( double targetX , double targetY ) { try { int tarX = ( int ) targetX / 32 ; int tarY = ( int ) targetY / 32 ; rpath = pathfinder . findPath ( new Point ( tileX , tileY ) , new Point ( tarX , tarY ) ) ; if ( rpath != null ) { dest = new Point2D . double ( targetX , targetY ) ; path = preparePath ( rpath , dest ) ; state = NAVIGATING ; nextWaypoint ( ) ; } else { state = IDLE ; dest = null ; } } catch ( Exception e ) { e . printStackTrace ( ) ; } }
tr	KEY	private OptionsEnum ( ) { }
tr	KEY	public void setContributor ( Contributor contributor ) { if ( contributor == null ) { throw new NullPointerException ( ) ; } this . contributor = contributor ; }
tr	IDF	@ Override public < S , T > T visit ( Visitor < S , T > v , S state ) throws FractalException { return v . visitASTExpVar ( this , state ) ; }
tr	IDF	public int execute ( T t ) throws EFrameWorkUserIsIdiotException { if ( dml . getClass ( ) == Insert . class ) { } if ( dml . getClass ( ) == Update . class ) { } if ( dml . getClass ( ) == Delete . class ) { } try { int effectedRowCount = super . statement . executeUpdate ( ) ; return executePost ( effectedRowCount ) ; } catch ( SQLException e ) { throw new EFrameWorkUserIsIdiotException ( "Failed at insert" ) ; } }
tr	KEY	public int getScoreFactor ( ) { return scoreFactor ; }
tr	KEY	public synchronized int xgetBRepeatDelay ( ) { return bRD ; }
tr	KEY	public NewsDAO ( ) { super ( News . class ) ; }
tr	IDF	@ Override public void actionPerformed ( ActionEvent e ) { Map < String , Object > param = new HashMap < String , Object > ( ) ; param . put ( Constants . USER_NO , user . get ( Constants . USER_NO ) ) ; param . put ( Constants . FRIEND_NO , friendNO ) ; if ( friendNO . equals ( user . get ( Constants . USER_NO ) ) ) { return ; } param . put ( Constants . GROUP_NAME , temp ) ; try { userDao . moveFriend ( param ) ; } finally { initJTree ( ) ; } }
tr	KEY	private int getBallSize ( ) { int iBallFactorIndex = ( getRegister ( CTRLPF ) & 18 ) >> 4 ; switch ( iBallFactorIndex ) { case 0 : return BALL_SINGLE_SIZE ; case 1 : return BALL_DOUBLE_SIZE ; case 2 : return BALL_QUAD_SIZE ; case 3 : return BALL_OCTA_SIZE ; } return 1 ; }
tr	IDF	public List < Category > getCategory ( ) throws SQLException { List < Category > cat = new ArrayList < Category > ( ) ; Connection conn = Database . getInstance ( ) . getConnection ( ) ; String sql = "select id  name from kategorie" ; Statement selectStatement = conn . createStatement ( ) ; ResultSet results = selectStatement . executeQuery ( sql ) ; while ( results . next ( ) ) { int id = results . getInt ( "id" ) ; String name = results . getString ( "name" ) ; Category category = new Category ( id , name ) ; cat . add ( category ) ; } results . close ( ) ; selectStatement . close ( ) ; return cat ; }
tr	KEY	public abstract void putTab ( ) throws ParsingException ;
tr	KEY	public abstract void visit ( PrintBold printBold ) ;
tr	KEY	public boolean isValid ( ) { return this . nome != null && nome . length ( ) > 0 ; }
tr	KEY	public int getAverageScore ( ) { return averageScore ; }
tr	KEY	public int getHeight ( ) { return height ; }
tr	IDF	public int getPenaliteSombre ( Personnage p , Salle s ) { if ( s . getEtat ( ) . equalsIgnoreCase ( "dark" ) && p . getProtectionSombre ( ) == 0 ) { return 3 ; } else { return 1 ; } }
tr	KEY	public final boolean add ( Elt e ) { throw new UnsupportedOperationException ( ) ; }
tr	IDF	public void hit_world ( int cx , int cy , int cz ) { int x = cx / 64 ; int y = cy / 64 ; Point p = point ( x , y ) ; if ( ! types [ type [ p . x ] [ p . y ] ] . g ( "tree" ) . equals ( "" ) ) { type [ p . x ] [ p . y ] = ( byte ) types [ type [ p . x ] [ p . y ] ] . gi ( "next" ) ; } }
tr	IDF	private static void print ( String msg ) { String name = Thread . currentThread ( ) . getName ( ) ; System . out . println ( name + ": " + msg ) ; }
tr	IDF	default Selector chain ( Selector next ) { return in -> next . select ( select ( in ) ) ; }
tr	KEY	@ Override public void onDartMissedPressed ( ) { }
tr	IDF	public static void assertOrderedRelationsEqual ( Relation actual , Relation expected ) { assertOrderedMapsEqual ( actual . getColumnDefinitions ( ) , expected . getColumnDefinitions ( ) ) ; List < ? extends Iterable < Value >> actualValues = actual . getValues ( ) . collect ( Collectors . < Iterable < Value >> toList ( ) ) ; List < ? extends Iterable < Value >> expectedValues = expected . getValues ( ) . collect ( Collectors . < Iterable < Value >> toList ( ) ) ; assertIterablesEqual ( actualValues , expectedValues ) ; }
tr	IDF	public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; System . out . print ( "Enter a positive Integer number: " ) ; int numN = scan . nextInt ( ) ; scan . close ( ) ; if ( numN > 0 ) { int countZeroes = 0 ; while ( numN > 4 ) { numN /= 5 ; countZeroes += numN ; } System . out . printf ( "The Count Zeroes in that N-Factorial is: %d !\n" , countZeroes ) ; } else { System . out . println ( "Error! - Invalid Input number!!!" ) ; } }
tr	KEY	boolean isMulticast ( ) ;
tr	IDF	public void extractNumber ( ) { int anf = line . indexOf ( ":" ) + 1 ; value = line . substring ( anf , line . length ( ) ) ; }
tr	IDF	static int getCommandNum ( String prefix , String command ) { int num = 0 ; try { num = Integer . parseInt ( command . substring ( prefix . length ( ) ) ) ; } catch ( NumberFormatException nfe ) { } return num ; }
tr	IDF	public PositionAtom ( final Sudoku sudoku , final int row , final int col ) { super ( sudoku ) ; this . row = row ; this . col = col ; for ( int val = 1 ; val <= 9 ; ++ val ) { attach ( row , col , val ) ; } }
tr	KEY	public float getMoneyValue ( ) { return moneyValue ; }
tr	KEY	public void disconnectClient ( int playerID ) ;
tr	KEY	public int getId_Empleado ( ) { return Id_Empleado ; }
tr	KEY	public int execute ( int nbLigne ) ;
tr	IDF	@ SuppressWarnings ( "unchecked" ) @ Override public Iterable < T > readAll ( ) { try ( ObjectInputStream objectInputStream = new ObjectInputStream ( new FileInputStream ( fileName ( ) ) ) ) { return ( Iterable < T > ) objectInputStream . readObject ( ) ; } catch ( IOException | ClassNotFoundException e ) { logger . warn ( "Failed to read objects from {} with exception {}" , fileName ( ) , e ) ; throw new LessonPlanPersistenceException ( "Failed to read objects." , e ) ; } }
tr	IDF	@ Test public void testAddAction ( ) { container . logger ( ) . info ( "in testAddAction()" ) ; JsonObject request = new JsonObject ( ) . putString ( "action" , "add" ) . putString ( "key" , "name" ) . putString ( "value" , "@muraken720" ) ; container . logger ( ) . info ( "request message: " + request ) ; vertx . eventBus ( ) . send ( "muraken720.vertx.mod.testexample" , request , new Handler < Message < JsonObject >> ( ) { @ Override public void handle ( Message < JsonObject > reply ) { JsonObject json = reply . body ( ) ; container . logger ( ) . info ( "response message: " + json ) ; assertEquals ( "ok" , json . getString ( "status" ) ) ; ConcurrentMap < String , String > map = vertx . sharedData ( ) . getMap ( "muraken720.testexample" ) ; assertEquals ( "@muraken720" , map . get ( "name" ) ) ; testComplete ( ) ; } } ) ; }
tr	IDF	public FormataColuna ( FontMetrics fm , ArrayList < EstruturaTabela > estruturaTabela ) { int tamanhoColuna = 0 ; Iterator iterator = estruturaTabela . iterator ( ) ; int i = 0 ; while ( iterator . hasNext ( ) ) { EstruturaTabela estrutura = ( EstruturaTabela ) iterator . next ( ) ; if ( estrutura . getCampo ( ) . length ( ) > estrutura . getTamanho ( ) ) { tamanhoColuna = estrutura . getCampo ( ) . length ( ) ; } else { tamanhoColuna = estrutura . getTamanho ( ) ; } addColumn ( criaColuna ( i , tamanhoColuna , fm , true , estrutura . getCampo ( ) . toUpperCase ( ) ) ) ; i ++ ; } }
tr	KEY	public int getParameterCount ( ) { return this . getParameters ( ) . size ( ) ; }
tr	KEY	public UpdateCompte ( ) { super ( ) ; }
tr	KEY	public void Select ( ) { }
tr	KEY	public SetRightHardLimitOffCommand ( ) { }
tr	KEY	public int getY ( ) { return mY ; }
tr	KEY	public void setStage ( int stage ) { this . stage = stage ; }
tr	IDF	private JPanel createDivisionSizeInputArea ( ) { JPanel area = createBasicInputArea ( ) ; area . add ( divisionText ) ; return area ; }
tr	IDF	public ListNode sortList ( ListNode head ) { return mergeSortList ( head ) ; }
tr	IDF	public Bag getDiscsWithTurn ( int turn ) { LOGGER . log ( Level . INFO , "Getting discs with turn " + turn ) ; Bag discBag = new Bag ( ) ; for ( int i = 0 ; i < discs . size ( ) ; i ++ ) { if ( discs . get ( i ) . getTurn ( ) == turn ) { discBag . addDisc ( discs . get ( i ) ) ; } } LOGGER . log ( Level . INFO , "Found " + discBag . size ( ) + " discs with turn " + turn ) ; return discBag ; }
tr	KEY	public ResetPasswordResponse createResetPasswordResponse ( ) { return new ResetPasswordResponse ( ) ; }
tr	KEY	public void startThread ( ) { this . thread = new Thread ( this ) ; thread . start ( ) ; }
tr	KEY	public boolean failFast ( ) { return failFast ; }
tr	KEY	public boolean isPressing ( ) { return ( state >= 0 ) ; }
tr	IDF	public AntiGoal ( ) { super ( ) ; this . setType ( InfoEnum . RequirementElementType . ANTI_GOAL . name ( ) ) ; }
tr	IDF	public String outputInputJSON ( ) { JSONParser parser = new JSONParser ( ) ; JSONObject jsonObject = null ; try { jsonObject = ( JSONObject ) parser . parse ( new FileReader ( jsonFileLocation ) ) ; } catch ( IOException | ParseException e ) { e . printStackTrace ( ) ; } String input = jsonObject . toJSONString ( ) ; return input ; }
tr	KEY	public static double max ( final double a , final double b ) { if ( a > b ) { return a ; } if ( a < b ) { return b ; } if ( a != b ) { return double . NaN ; } long bits = double . doubleToRawLongBits ( a ) ; if ( bits == 8000000000000000 ) { return b ; } return a ; }
tr	KEY	public static User getIngelogdeGebruiker ( ) { return ingelogdeGebruiker ; }
tr	IDF	public Cliente ( String Tip_Cliente , double SalPen_Cliente , int Id_Persona , int CedRuc_Persona , String Nom_Persona , String Ape_Persona , String Dir_Persona , String Tel_Persona , String Email_Persona ) { super ( Id_Persona , CedRuc_Persona , Nom_Persona , Ape_Persona , Dir_Persona , Tel_Persona , Email_Persona ) ; this . Tip_Cliente = Tip_Cliente ; this . SalPen_Cliente = SalPen_Cliente ; }
tr	IDF	private static < E > DataCount < E > [ ] getCountsArray ( DataCounter < E > counter ) { DataCount < E > [ ] dataCounts = ( DataCount < E > [ ] ) new DataCount [ counter . getSize ( ) ] ; SimpleIterator < DataCount < E >> iter = counter . getIterator ( ) ; for ( int index = 0 ; iter . hasNext ( ) ; index ++ ) { dataCounts [ index ] = iter . next ( ) ; } return dataCounts ; }
tr	KEY	protected void initialize ( ) { }
tr	IDF	public int getInt ( String key ) throws JSONException { Object object = this . get ( key ) ; try { return object instanceof Number ? ( ( Number ) object ) . intValue ( ) : Integer . parseInt ( ( String ) object ) ; } catch ( Exception e ) { throw new JSONException ( "JSONObject[" + quote ( key ) + "] is not an int." ) ; } }
tr	KEY	public int getCID ( ) { return cID ; }
tr	IDF	@ Override public void notifyObservers ( String event ) { this . observer . update ( event ) ; }
tr	KEY	public void setAccessTransportation ( boolean accessTransportation ) { this . accessTransportation = accessTransportation ; }
tr	IDF	@ Override public void pathDone ( ) { if ( prev == DRAWING_OP_TO ) { finish ( ) ; } out . pathDone ( ) ; this . prev = CLOSE ; dispose ( ) ; }
tr	IDF	@ SuppressWarnings ( "unchecked" ) private void initComponents ( ) { jTextField1 = new javax . swing . JTextField ( ) ; jButton1 = new javax . swing . JButton ( ) ; jButton2 = new javax . swing . JButton ( ) ; setDefaultCloseOperation ( javax . swing . WindowConstants . EXIT_ON_CLOSE ) ; jTextField1 . setFont ( new java . awt . Font ( "Tahoma" , 0 , 18 ) ) ; jTextField1 . setText ( "Delivery update was successful." ) ; jButton1 . setText ( "Exit" ) ; jButton1 . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButton1ActionPerformed ( evt ) ; } } ) ; jButton2 . setText ( "Main Menu" ) ; jButton2 . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButton2ActionPerformed ( evt ) ; } } ) ; javax . swing . GroupLayout layout = new javax . swing . GroupLayout ( getContentPane ( ) ) ; getContentPane ( ) . setLayout ( layout ) ; layout . setHorizontalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addContainerGap ( 18 , short . MAX_VALUE ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( javax . swing . GroupLayout . Alignment . TRAILING , layout . createSequentialGroup ( ) . addComponent ( jTextField1 , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) . addGap ( 128 , 128 , 128 ) ) . addGroup ( javax . swing . GroupLayout . Alignment . TRAILING , layout . createSequentialGroup ( ) . addComponent ( jButton2 ) . addGap ( 67 , 67 , 67 ) ) ) ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addContainerGap ( 344 , short . MAX_VALUE ) . addComponent ( jButton1 ) . addGap ( 5 , 5 , 5 ) ) ) ) ; layout . setVerticalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addGap ( 128 , 128 , 128 ) . addComponent ( jTextField1 , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED , 88 , short . MAX_VALUE ) . addComponent ( jButton2 ) . addGap ( 33 , 33 , 33 ) ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addContainerGap ( 244 , short . MAX_VALUE ) . addComponent ( jButton1 ) . addGap ( 33 , 33 , 33 ) ) ) ) ; pack ( ) ; }
tr	IDF	public void setDes_Venta ( String Des_Venta ) { this . Des_Venta = Des_Venta ; }
tr	IDF	protected void initMouseMenu ( ) { mouseMenu . add ( utiliser ) ; mouseMenu . add ( deposer ) ; }
tr	IDF	private void processLeftMove ( ) { if ( ! LEFT_MOVE . isPressing ( ) ) { return ; } if ( DASH . isPressing ( ) && canDash ( ) ) { moveStart ( DASH_START_SPEED ) ; return ; } setAngle ( getAngle ( ) + ROTATE_SPEED ) ; }
tr	IDF	private void send ( final InputStream input ) throws IOException { final BufferedInputStream bis = new BufferedInputStream ( input ) ; final BufferedOutputStream bos = new BufferedOutputStream ( out ) ; for ( int b ; ( b = bis . read ( ) ) != - 1 ; ) { if ( b == 00 || b == FF ) bos . write ( FF ) ; bos . write ( b ) ; } bos . write ( 0 ) ; bos . flush ( ) ; info = receive ( ) ; if ( ! ok ( ) ) throw new IOException ( info ) ; }
tr	IDF	public void setEst_Producto ( String Est_Producto ) { this . Est_Producto = Est_Producto ; }
tr	IDF	private static void testDataImplementation ( String name , String dcType , String txtfile ) { System . out . println ( "Testing " + name ) ; String [ ] ins = { dcType , "-is" , txtfile } ; System . out . println ( "IS: " + getAverageRuntime ( ins ) ) ; String [ ] hs = { dcType , "-hs" , txtfile } ; System . out . println ( "HS: " + getAverageRuntime ( hs ) ) ; String [ ] os = { dcType , "-os" , txtfile } ; System . out . println ( "OS: " + getAverageRuntime ( os ) ) ; }
tr	KEY	protected boolean editorHasChanged ( ) { return codeEditorChanged ; }
tr	KEY	public int getW ( ) { return this . w ; }
tr	IDF	static int LCH_to_sRGB ( final float [ ] LCH ) { return sRGB_to_i ( XYZ_to_sRGB ( Lab_to_XYZ ( LCH_to_Lab ( LCH ) ) ) ) ; }
tr	KEY	public int getLargo ( ) { return largo ; }
tr	IDF	public Val get ( Object key ) { Object val = FHashMap . get ( map_tree , key , hashCode ( key ) ) ; if ( val == FHashMap . NO_ELEMENT ) return dflt ; else return ( Val ) val ; }
tr	KEY	static void updatestatus ( int m ) { switch ( m ) { case 1 : status . setText ( "Drag to create an entity" ) ; break ; case 2 : status . setText ( "Drag to create an bubble" ) ; break ; case 3 : status . setText ( "Drag to create an data store" ) ; break ; case 4 : status . setText ( "Drag to create an data flow arrow" ) ; break ; case 6 : status . setText ( "Drag to create an control flow arrow" ) ; break ; default : status . setText ( "" ) ; } }
tr	IDF	private void save ( ) throws IOException { BufferedWriter writer = new BufferedWriter ( new OutputStreamWriter ( new FileOutputStream ( ParamsFile ) , FileCharset ) ) ; try { writer . write ( storeParams . toString ( ) ) ; writer . flush ( ) ; } finally { writer . close ( ) ; } }
tr	IDF	private void setupRamViewer ( ) { m_uiRamViewer . setLocation ( 0 , ( int ) getSize ( ) . getHeight ( ) ) ; }
tr	KEY	@ Override public void clear ( ) { throw new UnsupportedOperationException ( "AliasedMap is read-only" ) ; }
tr	IDF	public void updateItem ( HttpServletRequest arequest ) throws Exception { try { for ( int idx = this . getCount ( ) - 1 ; idx >= 0 ; idx -- ) { CDoseItem myitem = ( CDoseItem ) this . getItem ( idx ) ; String serid = "Series" + myitem . doseid ; String resid = "Imstat" + myitem . doseid ; String dosid = "Dose" + myitem . doseid ; String accid = "Adate" + myitem . doseid ; String ayrsid = "Ayrs" + myitem . doseid ; String amosid = "Amos" + myitem . doseid ; String awksid = "Awks" + myitem . doseid ; String adysid = "Adys" + myitem . doseid ; String recid = "Rdate" + myitem . doseid ; String ryrsid = "Ryrs" + myitem . doseid ; String rmosid = "Rmos" + myitem . doseid ; String rwksid = "Rwks" + myitem . doseid ; String rdysid = "Rdys" + myitem . doseid ; String ovrid = "Odate" + myitem . doseid ; String oyrsid = "Oyrs" + myitem . doseid ; String omosid = "Omos" + myitem . doseid ; String owksid = "Owks" + myitem . doseid ; String odysid = "Odys" + myitem . doseid ; String serstr = arequest . getParameter ( serid ) ; if ( serstr == null || serstr . equals ( CAppConsts . TagNoValue ) ) { this . delItem ( idx ) ; continue ; } String resstr = arequest . getParameter ( resid ) ; if ( resstr == null || resstr . equals ( CAppConsts . TagNoValue ) ) { this . delItem ( idx ) ; continue ; } String dosstr = CParser . truncStr ( arequest . getParameter ( dosid ) , CAppConsts . MaxLenDoseNum ) ; String accstr = CParser . truncStr ( arequest . getParameter ( accid ) , CAppConsts . MaxLenDate ) ; String recstr = CParser . truncStr ( arequest . getParameter ( recid ) , CAppConsts . MaxLenDate ) ; String ovrstr = CParser . truncStr ( arequest . getParameter ( ovrid ) , CAppConsts . MaxLenDate ) ; myitem . seriescd = serstr ; myitem . resultcd = resstr ; if ( dosstr . length ( ) < 1 ) { myitem . doseord = 0 ; } else { myitem . doseord = Integer . parseInt ( dosstr ) ; } if ( accstr . length ( ) < 1 ) { myitem . setAccelDate ( 0 ) ; } else { myitem . setAccelDate ( accstr ) ; } if ( recstr . length ( ) < 1 ) { myitem . setRecomDate ( 0 ) ; } else { myitem . setRecomDate ( recstr ) ; } if ( ovrstr . length ( ) < 1 ) { myitem . setOverdueDate ( 0 ) ; } else { myitem . setOverdueDate ( ovrstr ) ; } myitem . accageyears = getIntVal ( arequest . getParameter ( ayrsid ) ) ; myitem . accagemonths = getIntVal ( arequest . getParameter ( amosid ) ) ; myitem . accageweeks = getIntVal ( arequest . getParameter ( awksid ) ) ; myitem . accagedays = getIntVal ( arequest . getParameter ( adysid ) ) ; myitem . recageyears = getIntVal ( arequest . getParameter ( ryrsid ) ) ; myitem . recagemonths = getIntVal ( arequest . getParameter ( rmosid ) ) ; myitem . recageweeks = getIntVal ( arequest . getParameter ( rwksid ) ) ; myitem . recagedays = getIntVal ( arequest . getParameter ( rdysid ) ) ; myitem . ovrageyears = getIntVal ( arequest . getParameter ( oyrsid ) ) ; myitem . ovragemonths = getIntVal ( arequest . getParameter ( omosid ) ) ; myitem . ovrageweeks = getIntVal ( arequest . getParameter ( owksid ) ) ; myitem . ovragedays = getIntVal ( arequest . getParameter ( odysid ) ) ; } int nslot = Math . max ( CAppConsts . NewSlotAntEval , CAppConsts . NumSlotAntEval - getCount ( ) ) ; for ( int idx = 0 ; idx < nslot ; idx ++ ) { CDoseItem myitem = new CDoseItem ( ) ; String myid = "New" + Integer . toString ( idx ) ; String serid = "Series" + myid ; String resid = "Imstat" + myid ; String dosid = "Dose" + myid ; String accid = "Adate" + myid ; String ayrsid = "Ayrs" + myid ; String amosid = "Amos" + myid ; String awksid = "Awks" + myid ; String adysid = "Adys" + myid ; String recid = "Rdate" + myid ; String ryrsid = "Ryrs" + myid ; String rmosid = "Rmos" + myid ; String rwksid = "Rwks" + myid ; String rdysid = "Rdys" + myid ; String ovrid = "Odate" + myid ; String oyrsid = "Oyrs" + myid ; String omosid = "Omos" + myid ; String owksid = "Owks" + myid ; String odysid = "Odys" + myid ; String serstr = arequest . getParameter ( serid ) ; if ( serstr == null || serstr . equals ( CAppConsts . TagNoValue ) ) { continue ; } String resstr = arequest . getParameter ( resid ) ; if ( resstr == null || resstr . equals ( CAppConsts . TagNoValue ) ) { continue ; } String dosstr = CParser . truncStr ( arequest . getParameter ( dosid ) , CAppConsts . MaxLenDoseNum ) ; String accstr = CParser . truncStr ( arequest . getParameter ( accid ) , CAppConsts . MaxLenDate ) ; String recstr = CParser . truncStr ( arequest . getParameter ( recid ) , CAppConsts . MaxLenDate ) ; String ovrstr = CParser . truncStr ( arequest . getParameter ( ovrid ) , CAppConsts . MaxLenDate ) ; myitem . doseid = this . makeNewId ( "dos" , 6 ) ; myitem . seriescd = serstr ; myitem . resultcd = resstr ; if ( dosstr . length ( ) < 1 ) { myitem . doseord = 0 ; } else { myitem . doseord = Integer . parseInt ( dosstr ) ; } if ( accstr . length ( ) < 1 ) { myitem . setAccelDate ( 0 ) ; } else { myitem . setAccelDate ( accstr ) ; } if ( recstr . length ( ) < 1 ) { myitem . setRecomDate ( 0 ) ; } else { myitem . setRecomDate ( recstr ) ; } if ( ovrstr . length ( ) < 1 ) { myitem . setOverdueDate ( 0 ) ; } else { myitem . setOverdueDate ( ovrstr ) ; } myitem . accageyears = getIntVal ( arequest . getParameter ( ayrsid ) ) ; myitem . accagemonths = getIntVal ( arequest . getParameter ( amosid ) ) ; myitem . accageweeks = getIntVal ( arequest . getParameter ( awksid ) ) ; myitem . accagedays = getIntVal ( arequest . getParameter ( adysid ) ) ; myitem . recageyears = getIntVal ( arequest . getParameter ( ryrsid ) ) ; myitem . recagemonths = getIntVal ( arequest . getParameter ( rmosid ) ) ; myitem . recageweeks = getIntVal ( arequest . getParameter ( rwksid ) ) ; myitem . recagedays = getIntVal ( arequest . getParameter ( rdysid ) ) ; myitem . ovrageyears = getIntVal ( arequest . getParameter ( oyrsid ) ) ; myitem . ovragemonths = getIntVal ( arequest . getParameter ( omosid ) ) ; myitem . ovrageweeks = getIntVal ( arequest . getParameter ( owksid ) ) ; myitem . ovragedays = getIntVal ( arequest . getParameter ( odysid ) ) ; this . addItem ( myitem . doseid , myitem ) ; } } catch ( Exception ex ) { CLogError . logError ( CAppConsts . ErrorFile , false , "CDoseList.updateItem " , ex ) ; throw ( ex ) ; } }
tr	IDF	@ Test public void testGetFieldValue ( ) throws Exception { ReflectInfo info = ReflectUtil . buildReflectInfo ( User . class ) ; assertEquals ( amountOld , info . getFieldValue ( 0 , u ) ) ; assertEquals ( idOld , info . getFieldValue ( 3 , u ) ) ; assertEquals ( userNameOld , info . getFieldValue ( 5 , u ) ) ; assertEquals ( createdOld , info . getFieldValue ( 1 , u ) ) ; }
tr	IDF	private void addMessageToJsfContext ( FacesMessage facesMessage ) { FacesContext . getCurrentInstance ( ) . addMessage ( null , facesMessage ) ; }
tr	KEY	public String addNewInfo ( ) { return "addNews.xhtml?faces-redirect=true" ; }
tr	KEY	public Edits ( ) { super . workCode = 102 ; }
tr	IDF	public Holdable removeItem ( Character itemID ) throws InvalidKeyException { Holdable item = getInventory ( ) . removeItem ( itemID ) ; return item ; }
tr	KEY	public synchronized void xassignL2KeyCode ( int code ) { l2 = code ; }
tr	IDF	public static void main ( String [ ] args ) { MysqlDataSource dataSource = new MysqlDataSource ( ) ; dataSource . setServerName ( "localhost" ) ; dataSource . setUser ( "root" ) ; dataSource . setPassword ( "" ) ; dataSource . setDatabaseName ( "sms" ) ; try { grupService = new GrupService ( ) ; grupService . setDataSource ( dataSource ) ; inboxService = new InboxService ( ) ; inboxService . setDataSource ( dataSource ) ; kontakService = new KontakService ( ) ; kontakService . setDataSource ( dataSource ) ; outboxService = new OutboxService ( ) ; outboxService . setDataSource ( dataSource ) ; sentItemService = new SentItemService ( ) ; sentItemService . setDataSource ( dataSource ) ; } catch ( Exception ex ) { JOptionPane . showMessageDialog ( null , "Error : \n" + ex ) ; return ; } try { UIManager . setLookAndFeel ( "com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel" ) ; new FormUtama ( ) . setVisible ( true ) ; } catch ( ClassNotFoundException ex ) { Logger . getLogger ( App . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; } catch ( InstantiationException ex ) { Logger . getLogger ( App . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; } catch ( IllegalAccessException ex ) { Logger . getLogger ( App . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; } catch ( UnsupportedLookAndFeelException ex ) { Logger . getLogger ( App . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; } }
tr	IDF	public void setCostomedicamentos ( double costomedicamentos ) { double oldCostomedicamentos = this . costomedicamentos ; this . costomedicamentos = costomedicamentos ; changeSupport . firePropertyChange ( "costomedicamentos" , oldCostomedicamentos , costomedicamentos ) ; }
tr	IDF	protected void addDeviceToListen ( String deviceName ) { devicesToListen . add ( new DevicePropertyBLOBEnableTuple ( deviceName ) ) ; }
tr	KEY	public static String getCurrentTimestamp ( ) { return formatTimestamp ( new Date ( ) ) ; }
tr	IDF	private UserSelling ( Builder b ) { price = b . price ; id = b . id ; }
tr	KEY	protected void end ( ) { }
tr	KEY	public void setUseChapterNumbers ( boolean useChapterNumbers ) { this . useChapterNumbers = useChapterNumbers ; }
tr	KEY	public void setDx ( int dx ) { this . dx = dx ; }
tr	KEY	public abstract void edit ( IKey dado ) throws SQLException ;
tr	KEY	public DIPCorrectionTest ( ) { }
tr	KEY	public void setyCordinate ( int yCordinate ) { this . yCordinate = yCordinate ; }
tr	IDF	public void setOtherPlayer ( Player otherPlayer ) { this . otherPlayer = otherPlayer ; }
tr	KEY	public final boolean removeRange ( int fromIndex , int toIndex ) { throw new UnsupportedOperationException ( ) ; }
tr	KEY	public void setValor ( int valor ) { this . valor = valor ; }
tr	IDF	@ Test public void testInsertAsNext ( ) { CircleLinkElement < Integer > head = new CircleLinkElement < Integer > ( headVal ) ; CircleLinkElement < Integer > tail = head . insertAsNext ( tailVal ) ; CircleLinkAssertion . assertTwoValuesOnly ( head , tail ) ; CircleLinkElement < Integer > middle = head . insertAsNext ( middleVal ) ; CircleLinkAssertion . assertThreeValuesOnly ( head , middle , tail ) ; CircleLinkAssertion . assertValueOrder ( head , headVal , middleVal , tailVal ) ; }
tr	IDF	@ Override public Collection < ApiLocation > getLocationsWithMinerals ( ApiAuth < ? > character ) throws ApiException { Set < long > result = new TreeSet < long > ( ) ; api . setAuth ( character ) ; ApiConnector connector = EveApi . getConnector ( ) ; AssetListResponse response = connector . execute ( new ApiRequest ( ApiPath . CHARACTER , ApiPage . ASSET_LIST , 2 , character ) , new AssetListHandler ( ) , AssetListResponse . class ) ; Stack < EveAsset < ? >> assets = new Stack < EveAsset < ? >> ( ) ; assets . addAll ( response . getAll ( ) ) ; while ( ! assets . isEmpty ( ) ) { EveAsset < ? > asset = assets . pop ( ) ; if ( asset . getAssets ( ) != null ) { assets . addAll ( asset . getAssets ( ) ) ; } if ( isMineral ( asset ) && asset . getLocationID ( ) != null ) { result . add ( asset . getLocationID ( ) ) ; } } long [ ] objects = result . toArray ( new long [ 0 ] ) ; long [ ] ids = new long [ objects . length ] ; for ( int i = 0 ; i < ids . length ; i ++ ) { ids [ i ] = objects [ i ] ; } String join = StringUtils . join ( " " , ids ) ; Map < String , String > params = Collections . singletonMap ( "IDs" , join ) ; LocationsResponse locationsResponse = connector . execute ( new ApiRequest ( ApiPath . CHARACTER , ApiPage . LOCATIONS , 2 , character , params ) , new LocationsHandler ( ) , LocationsResponse . class ) ; return locationsResponse . getAll ( ) ; }
tr	KEY	@ Override public void clear ( ) { throw new UnsupportedOperationException ( "Read only data set" ) ; }
tr	KEY	void initialize ( int n ) ;
tr	KEY	public boolean canEndTurn ( ) { return hasPlacedLandTile ; }
tr	IDF	private static List < Integer > notIn ( int [ ] a , int [ ] b ) { List < Integer > result = new ArrayList < > ( ) ; Arrays . sort ( a ) ; for ( int i = 0 ; i < b . length ; i ++ ) { int idx = Arrays . binarySearch ( a , b [ i ] ) ; if ( idx < 0 ) { result . add ( b [ i ] ) ; } } return result ; }
tr	KEY	public boolean isRated ( ) { return rated ; }
tr	IDF	public void setName ( String name ) { this . name = name ; }
tr	KEY	@ SuppressWarnings ( "unchecked" ) public class getCls ( ) { return cls ; }
tr	KEY	public void throwAway ( ) throws Throwable { this . finalize ( ) ; }
tr	IDF	@ Override public void displace ( double dx , double dy ) { this . dx += dx ; this . dy += dy ; if ( Math . abs ( this . dx ) > MAX_DISPLACE ) this . dx = Math . signum ( dx ) * MAX_DISPLACE ; if ( Math . abs ( this . dy ) > MAX_DISPLACE ) this . dy = Math . signum ( dy ) * MAX_DISPLACE ; }
tr	KEY	public byte getFileType ( ) { return fileType ; }
tr	IDF	public void actionPerformed ( ActionEvent arg0 ) { testController . goForwardInScenario ( ) ; }
tr	KEY	public final void setMaxVelocity ( double v ) { velocity = v ; }
tr	KEY	public ProfileManager ( ) { super ( ) ; this . profile = new ProfileImpl ( ) ; this . profilePath = "" ; }
tr	KEY	private static String getCodePath ( ) { if ( codePath != null ) { return codePath ; } else { return getPath ( "../programebrincando/src/plp/programebrincando/arduino/arduino.ino" ) ; } }
tr	IDF	@ Test public void testSetSecurityStatus ( ) throws Exception { double security = 0.314 ; ReprocessingPlantImpl rp = new ReprocessingPlantImpl ( ) ; rp . setSecurityStatus ( security ) ; assert . assertEquals ( security , rp . getSecurityStatus ( ) , 0.001 ) ; try { rp . setSecurityStatus ( 5.0 ) ; assert . fail ( "Exception expected but not thrown" ) ; } catch ( IllegalArgumentException e ) { ; } try { rp . setSecurityStatus ( - 1.1 ) ; assert . fail ( "Exception expected but not thrown" ) ; } catch ( IllegalArgumentException e ) { ; } }
tr	IDF	public void initialise ( World nWorld ) throws PatternFormatException { String [ ] newCells = cells . split ( " " ) ; for ( int i = 0 ; i < newCells . length ; i ++ ) { char [ ] row = newCells [ i ] . toCharArray ( ) ; for ( int j = 0 ; j < row . length ; j ++ ) { if ( row [ j ] == 1 ) { nWorld . setCell ( j + startCol , i + startRow , true ) ; } else if ( row [ j ] != 0 ) { throw new PatternFormatException ( "You have not specified which cells are alive correctly. The data contains values which are not either 0 or 1." + original ) ; } } } }
tr	IDF	private void ajoutArticlejButton8ActionPerformed ( java . awt . event . ActionEvent evt ) { c = clientDAO . find ( Integer . parseInt ( clientjComboBox1 . getSelectedItem ( ) . toString ( ) ) ) ; s = stockDAO . find ( Integer . parseInt ( articlestockjComboBox2 . getSelectedItem ( ) . toString ( ) ) ) ; int qtite = Integer . parseInt ( quantitejSpinner1 . getValue ( ) . toString ( ) ) ; a . setClient ( c ) ; a . setStock ( s ) ; int oldQtite = s . getQtiteStock ( ) ; if ( qtite > oldQtite ) { JOptionPane . showMessageDialog ( this , "La quatit\u00E9 qui reste est insuffisante  :" + s . getQtiteStock ( ) + " unit\u00E9s" ) ; } else if ( qtite <= oldQtite ) { s . setQtiteStock ( oldQtite - qtite ) ; a . setQuantite ( qtite ) ; System . out . println ( "Insertion de l'article a : " + a . toString ( ) ) ; articleDAO . create ( a ) ; stockDAO . update ( s ) ; JOptionPane . showMessageDialog ( this , "Achat effectu\u00E9 avec succ\u00E8s ." ) ; } }
tr	KEY	public Builder numberOfPlayers ( int numberOfPlayers ) { this . numberOfPlayers = numberOfPlayers ; return this ; }
tr	KEY	public GolfEstate golfEstate ( ) { return new GolfEstate ( this ) ; }
tr	KEY	public void setLevel ( int level ) { this . level = level ; }
tr	IDF	@ Test public void testReplaceWithInvalidToPattern ( ) { try { Map < AttributeKey , Object > attributes = new HashMap < AttributeKey , Object > ( ) ; attributes . put ( AttributeKey . FROM_PATTERN , "{1- 2-3}" ) ; attributes . put ( AttributeKey . TO_PATTERN , "{123}?" ) ; attributes . put ( AttributeKey . TURN_ON_REGEX , boolean . false ) ; ReplacerFactory . getInstance ( ReplacerType . PATTERN , attributes ) ; fail ( "InvalidFileNameException should be thrown" ) ; } catch ( InvalidFileNameException e ) { } }
tr	IDF	public void mouseReleased ( java . awt . event . MouseEvent evt ) { mainMenuBtnMouseReleased ( evt ) ; }
tr	KEY	public int getType ( ) { return _type ; }
tr	IDF	public void setReturn ( ContactInfo value ) { this . _return = value ; }
tr	KEY	boolean canDispose ( ) ;
tr	KEY	public int getIdCompany ( ) { return id_company ; }
tr	IDF	public static INDIOneElementBLOBProperty createSaveableOneElementBLOBProperty ( INDIDriver driver , String name , PropertyStates state , PropertyPermissions permission ) throws IllegalArgumentException { INDIOneElementBLOBProperty bp = loadOneElementBLOBProperty ( driver , name ) ; if ( bp == null ) { bp = new INDIOneElementBLOBProperty ( driver , name , state , permission ) ; bp . setSaveable ( true ) ; } return bp ; }
tr	KEY	public void setKm ( int km ) { this . km = km ; }
tr	KEY	public int get_money ( ) { return _money ; }
tr	KEY	public int getHide ( ) { return hide ; }
tr	KEY	@ Override public boolean isFieldEditable ( ) { return true ; }
tr	IDF	public static String drawExhaustiveRefinementLink ( RequirementLink rl ) throws ScriptException { String initial_layer = "none" ; String layer_value = "All" ; String target_id = rl . getTarget ( ) . getId ( ) ; String source_id = rl . getSource ( ) . getId ( ) ; String head_type = "StickArrow" ; String stroke_pattern = "0" ; String label = null ; String canvas = "" ; if ( rl . refine_type . equals ( InfoEnum . RefineType . ATTRIBUTE . name ( ) ) ) { label = "S" ; canvas = InfoEnum . esg_canvas_mapping . get ( rl . getSource ( ) . getLayer ( ) ) ; } else if ( rl . refine_type . equals ( InfoEnum . RefineType . ASSET . name ( ) ) ) { label = "A" ; canvas = InfoEnum . esg_canvas_mapping . get ( rl . getSource ( ) . getLayer ( ) ) ; } else if ( rl . refine_type . equals ( InfoEnum . RefineType . INTERVAL . name ( ) ) ) { label = "I" ; canvas = InfoEnum . esg_canvas_mapping . get ( rl . getSource ( ) . getLayer ( ) ) ; } else { label = rl . refine_type ; canvas = InfoEnum . eag_canvas_mapping . get ( rl . getSource ( ) . getLayer ( ) ) ; } return drawArbitraryRequirementLink ( canvas , initial_layer , target_id , source_id , head_type , stroke_pattern , label , layer_value ) ; }
tr	IDF	HousingType ( int id ) { this . id = id ; }
tr	IDF	private void btnSaveClick ( ) { PlayerDAO playerDao = new PlayerDAO ( ) ; String playerName = txtName . getText ( ) ; String playerEmail = txtEmail . getText ( ) ; String playerBalance = txtBalance . getText ( ) ; if ( Validators . StringIsNotNullOrEmpty ( playerName ) && Validators . StringIsNotNullOrEmpty ( playerEmail ) && Validators . isNumeric ( playerBalance ) ) { int playerSalary = Integer . parseInt ( playerBalance ) ; Player player = new Player ( playerName , playerEmail , playerSalary ) ; playerDao . insertPlayer ( player ) ; JOptionPane . showMessageDialog ( new JFrame ( ) , "Se ha creado el jugador" , "Jugador creado con exito" , JOptionPane . INFORMATION_MESSAGE ) ; this . dispose ( ) ; } else { JOptionPane . showMessageDialog ( new JFrame ( ) , "El valor ingresado no es un numero " , "Error" , JOptionPane . ERROR_MESSAGE ) ; } }
tr	KEY	public synchronized void xsetLBrepeatable ( boolean flag ) { isLBrepeatable = flag ; }
tr	IDF	public DisjointSet ( int numElements ) { this . elements = new int [ numElements ] ; for ( int i = 0 ; i < this . elements . length ; i ++ ) this . elements [ i ] = - 1 ; }
tr	IDF	public void capture ( ) { ArrayList < Position > positions = _board . findPositions ( _position , 0 , 1 ) ; for ( Position position : positions ) { if ( _board . get_building ( position ) == null ) positions . remove ( position ) ; } Building building = _board . get_building ( positions . get ( 0 ) ) ; building . set_hitpoints ( building . get_hitpoints ( ) - _hitpoints ) ; if ( building . get_hitpoints ( ) < 0 ) { building . set_owner ( _owner ) ; building . set_hitpoints ( 100 ) ; } _active = false ; }
tr	IDF	public void setSurveyHasUsersByIdsurvey ( Collection < SurveyHasUser > surveyHasUsersByIdsurvey ) { this . surveyHasUsersByIdsurvey = surveyHasUsersByIdsurvey ; }
tr	IDF	public void mouseReleased ( java . awt . event . MouseEvent evt ) { buttonJogar_MenuPrincipalMouseReleased ( evt ) ; }
tr	IDF	@ Override public BoardModel loadObject ( JsonObject json ) { return this ; }
tr	KEY	public CompressorDisable ( ) { }
tr	KEY	public int getWorstHole ( ) { return worstHole ; }
tr	IDF	@ Override public double getFitness ( Formula formula , List < ? extends Formula > population ) { double fitness = 0 ; for ( double x = 0.1 ; x <= 1 ; x += 0.1 ) { Map < String , double > vals = new HashMap < String , double > ( ) ; vals . put ( "x" , x ) ; double val = formula . eval ( vals ) ; if ( val != val ) { return double . MAX_VALUE ; } fitness += Math . pow ( ( val - x * x ) / x , 2.0 ) ; } return fitness ; }
tr	IDF	@ Override public Date getEnd ( ) { return ( Date ) end . clone ( ) ; }
tr	IDF	private void finish ( ) { if ( capStyle == CAP_ROUND ) { drawRoundCap ( cx0 , cy0 , cmx , cmy ) ; } else if ( capStyle == CAP_SQUARE ) { emitLineTo ( cx0 - cmy + cmx , cy0 + cmx + cmy ) ; emitLineTo ( cx0 - cmy - cmx , cy0 + cmx - cmy ) ; } emitReverse ( ) ; if ( capStyle == CAP_ROUND ) { drawRoundCap ( sx0 , sy0 , - smx , - smy ) ; } else if ( capStyle == CAP_SQUARE ) { emitLineTo ( sx0 + smy - smx , sy0 - smx - smy ) ; emitLineTo ( sx0 + smy + smx , sy0 - smx + smy ) ; } emitClose ( ) ; }
tr	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { miFinishRoundActionPerformed ( evt ) ; }
tr	KEY	public int getPlayerId ( ) { return playerId ; }
tr	KEY	public void run ( ) { new Cliente ( ) . setVisible ( true ) ; }
tr	IDF	public void checkTailCollision ( ) { TailSection [ ] tail = snake . getTail ( ) ; for ( int i = 1 ; i < tail . length ; i ++ ) { if ( ( snake . getxPosition ( ) == tail [ i ] . getxCordinate ( ) ) && ( snake . getyPosition ( ) == tail [ i ] . getyCordinate ( ) ) ) { endGame ( ) ; } } }
tr	KEY	@ Override public void reset ( ) { }
tr	IDF	private boolean loadImageFromFile ( ) { if ( imageE . getValue ( ) . getSize ( ) == 0 ) { byte [ ] fileContents ; try { File file = new File ( "image.jpg" ) ; int size = ( int ) file . length ( ) ; fileContents = new byte [ size ] ; FileInputStream in = new FileInputStream ( file ) ; in . read ( fileContents ) ; in . close ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; return false ; } INDIBLOBValue v = new INDIBLOBValue ( fileContents , ".jpg" ) ; imageE . setValue ( v ) ; } return true ; }
tr	KEY	public void setMaxResiduum ( double maxResiduum ) { this . maxResiduum = maxResiduum ; }
tr	KEY	@ BeforeMethod public void setUpMethod ( ) throws Exception { }
tr	KEY	public void destroy ( ) { }
tr	IDF	@ SuppressWarnings ( "unchecked" ) private void initComponents ( ) { jScrollPane1 = new javax . swing . JScrollPane ( ) ; jList1 = new javax . swing . JList ( ) ; jButton1 = new javax . swing . JButton ( ) ; jLabel1 = new javax . swing . JLabel ( ) ; jLabel2 = new javax . swing . JLabel ( ) ; jButton2 = new javax . swing . JButton ( ) ; jpBody = new javax . swing . JPanel ( ) ; jpTitle = new javax . swing . JPanel ( ) ; jlTitle = new javax . swing . JLabel ( ) ; jpMenuItems = new javax . swing . JPanel ( ) ; jLabel3 = new javax . swing . JLabel ( ) ; jpGame = new javax . swing . JPanel ( ) ; jpFirstTile = new javax . swing . JPanel ( ) ; jScrollPane3 = new javax . swing . JScrollPane ( ) ; recentScore = new javax . swing . JTextArea ( ) ; closeWin = new javax . swing . JButton ( ) ; setDefaultCloseOperation ( javax . swing . WindowConstants . EXIT_ON_CLOSE ) ; setTitle ( "Scores" ) ; jList1 . setModel ( new javax . swing . AbstractListModel ( ) { String [ ] strings = { "Item 1" , "Item 2" , "Item 3" , "Item 4" , "Item 5" } ; public int getSize ( ) { return strings . length ; } public Object getElementAt ( int i ) { return strings [ i ] ; } } ) ; jScrollPane1 . setViewportView ( jList1 ) ; jButton1 . setText ( "OK" ) ; jButton1 . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButton1ActionPerformed ( evt ) ; } } ) ; jLabel1 . setFont ( new java . awt . Font ( "Tempus Sans ITC" , 1 , 12 ) ) ; jLabel1 . setForeground ( new java . awt . Color ( 0 , 51 , 153 ) ) ; jLabel1 . setText ( "Recent Scores" ) ; jLabel1 . setToolTipText ( "" ) ; jLabel2 . setFont ( new java . awt . Font ( "Tempus Sans ITC" , 1 , 12 ) ) ; jLabel2 . setForeground ( new java . awt . Color ( 0 , 51 , 153 ) ) ; jLabel2 . setText ( "Help Menu" ) ; jButton2 . setText ( "OK" ) ; jButton2 . setToolTipText ( "" ) ; jButton2 . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButton2ActionPerformed ( evt ) ; } } ) ; jpBody . setBackground ( new java . awt . Color ( 204 , 204 , 204 ) ) ; jpTitle . setBackground ( new java . awt . Color ( 204 , 204 , 204 ) ) ; jlTitle . setBackground ( new java . awt . Color ( 204 , 204 , 204 ) ) ; jlTitle . setFont ( new java . awt . Font ( "Tempus Sans ITC" , 1 , 18 ) ) ; jlTitle . setHorizontalAlignment ( javax . swing . SwingConstants . CENTER ) ; jlTitle . setText ( "meh murray" ) ; jlTitle . setHorizontalTextPosition ( javax . swing . SwingConstants . CENTER ) ; javax . swing . GroupLayout jpTitleLayout = new javax . swing . GroupLayout ( jpTitle ) ; jpTitle . setLayout ( jpTitleLayout ) ; jpTitleLayout . setHorizontalGroup ( jpTitleLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( javax . swing . GroupLayout . Alignment . TRAILING , jpTitleLayout . createSequentialGroup ( ) . addContainerGap ( ) . addComponent ( jlTitle , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addContainerGap ( ) ) ) ; jpTitleLayout . setVerticalGroup ( jpTitleLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( jpTitleLayout . createSequentialGroup ( ) . addComponent ( jlTitle , javax . swing . GroupLayout . PREFERRED_SIZE , 43 , javax . swing . GroupLayout . PREFERRED_SIZE ) . addGap ( 0 , 0 , short . MAX_VALUE ) ) ) ; jpMenuItems . setBackground ( new java . awt . Color ( 153 , 153 , 153 ) ) ; jpMenuItems . setBorder ( javax . swing . BorderFactory . createLineBorder ( new java . awt . Color ( 0 , 0 , 0 ) ) ) ; jLabel3 . setFont ( new java . awt . Font ( "Tempus Sans ITC" , 1 , 14 ) ) ; jLabel3 . setForeground ( new java . awt . Color ( 0 , 51 , 153 ) ) ; jLabel3 . setText ( "Recent Scores" ) ; javax . swing . GroupLayout jpMenuItemsLayout = new javax . swing . GroupLayout ( jpMenuItems ) ; jpMenuItems . setLayout ( jpMenuItemsLayout ) ; jpMenuItemsLayout . setHorizontalGroup ( jpMenuItemsLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( jpMenuItemsLayout . createSequentialGroup ( ) . addContainerGap ( ) . addComponent ( jLabel3 , javax . swing . GroupLayout . PREFERRED_SIZE , 128 , javax . swing . GroupLayout . PREFERRED_SIZE ) . addContainerGap ( javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) ) ) ; jpMenuItemsLayout . setVerticalGroup ( jpMenuItemsLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( jLabel3 , javax . swing . GroupLayout . DEFAULT_SIZE , 25 , short . MAX_VALUE ) ) ; jpGame . setBackground ( new java . awt . Color ( 204 , 204 , 204 ) ) ; jpFirstTile . setBorder ( javax . swing . BorderFactory . createLineBorder ( new java . awt . Color ( 0 , 0 , 0 ) ) ) ; jpFirstTile . setToolTipText ( "" ) ; jpFirstTile . setPreferredSize ( new java . awt . Dimension ( 335 , 140 ) ) ; recentScore . setEditable ( false ) ; recentScore . setColumns ( 20 ) ; recentScore . setRows ( 5 ) ; recentScore . setBorder ( javax . swing . BorderFactory . createLineBorder ( new java . awt . Color ( 0 , 0 , 0 ) ) ) ; recentScore . setEnabled ( false ) ; recentScore . setName ( "" ) ; recentScore . addInputMethodListener ( new java . awt . event . InputMethodListener ( ) { public void caretPositionChanged ( java . awt . event . InputMethodEvent evt ) { } public void inputMethodTextChanged ( java . awt . event . InputMethodEvent evt ) { recentScoreInputMethodTextChanged ( evt ) ; } } ) ; jScrollPane3 . setViewportView ( recentScore ) ; javax . swing . GroupLayout jpFirstTileLayout = new javax . swing . GroupLayout ( jpFirstTile ) ; jpFirstTile . setLayout ( jpFirstTileLayout ) ; jpFirstTileLayout . setHorizontalGroup ( jpFirstTileLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( jpFirstTileLayout . createSequentialGroup ( ) . addGap ( 23 , 23 , 23 ) . addComponent ( jScrollPane3 , javax . swing . GroupLayout . PREFERRED_SIZE , 290 , javax . swing . GroupLayout . PREFERRED_SIZE ) . addContainerGap ( 55 , short . MAX_VALUE ) ) ) ; jpFirstTileLayout . setVerticalGroup ( jpFirstTileLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( jpFirstTileLayout . createSequentialGroup ( ) . addGap ( 19 , 19 , 19 ) . addComponent ( jScrollPane3 , javax . swing . GroupLayout . PREFERRED_SIZE , 265 , javax . swing . GroupLayout . PREFERRED_SIZE ) . addContainerGap ( 19 , short . MAX_VALUE ) ) ) ; closeWin . setText ( "OK" ) ; closeWin . addMouseListener ( new java . awt . event . MouseAdapter ( ) { public void mouseExited ( java . awt . event . MouseEvent evt ) { closeWinMouseExited ( evt ) ; } } ) ; javax . swing . GroupLayout jpGameLayout = new javax . swing . GroupLayout ( jpGame ) ; jpGame . setLayout ( jpGameLayout ) ; jpGameLayout . setHorizontalGroup ( jpGameLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( jpGameLayout . createSequentialGroup ( ) . addContainerGap ( ) . addComponent ( jpFirstTile , javax . swing . GroupLayout . DEFAULT_SIZE , 370 , short . MAX_VALUE ) . addContainerGap ( ) ) . addGroup ( jpGameLayout . createSequentialGroup ( ) . addGap ( 143 , 143 , 143 ) . addComponent ( closeWin ) . addContainerGap ( javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) ) ) ; jpGameLayout . setVerticalGroup ( jpGameLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( jpGameLayout . createSequentialGroup ( ) . addContainerGap ( ) . addComponent ( jpFirstTile , javax . swing . GroupLayout . PREFERRED_SIZE , 305 , javax . swing . GroupLayout . PREFERRED_SIZE ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED , 24 , short . MAX_VALUE ) . addComponent ( closeWin ) ) ) ; javax . swing . GroupLayout jpBodyLayout = new javax . swing . GroupLayout ( jpBody ) ; jpBody . setLayout ( jpBodyLayout ) ; jpBodyLayout . setHorizontalGroup ( jpBodyLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( jpTitle , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addGroup ( jpBodyLayout . createSequentialGroup ( ) . addContainerGap ( ) . addGroup ( jpBodyLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( jpGame , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addComponent ( jpMenuItems , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) ) . addContainerGap ( ) ) ) ; jpBodyLayout . setVerticalGroup ( jpBodyLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( jpBodyLayout . createSequentialGroup ( ) . addComponent ( jpTitle , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addComponent ( jpMenuItems , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . UNRELATED ) . addComponent ( jpGame , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) . addContainerGap ( ) ) ) ; javax . swing . GroupLayout layout = new javax . swing . GroupLayout ( getContentPane ( ) ) ; getContentPane ( ) . setLayout ( layout ) ; layout . setHorizontalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addGap ( 155 , 155 , 155 ) . addComponent ( jButton1 ) ) . addGroup ( layout . createSequentialGroup ( ) . addGap ( 49 , 49 , 49 ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( jScrollPane1 , javax . swing . GroupLayout . PREFERRED_SIZE , 108 , javax . swing . GroupLayout . PREFERRED_SIZE ) . addComponent ( jLabel1 , javax . swing . GroupLayout . PREFERRED_SIZE , 212 , javax . swing . GroupLayout . PREFERRED_SIZE ) ) ) ) . addContainerGap ( 149 , short . MAX_VALUE ) ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addGap ( 0 , 0 , short . MAX_VALUE ) . addComponent ( jLabel2 , javax . swing . GroupLayout . PREFERRED_SIZE , 121 , javax . swing . GroupLayout . PREFERRED_SIZE ) . addGap ( 0 , 0 , short . MAX_VALUE ) ) ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addGap ( 0 , 0 , short . MAX_VALUE ) . addComponent ( jButton2 , javax . swing . GroupLayout . PREFERRED_SIZE , 61 , javax . swing . GroupLayout . PREFERRED_SIZE ) . addGap ( 0 , 0 , short . MAX_VALUE ) ) ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addGap ( 0 , 0 , short . MAX_VALUE ) . addComponent ( jpBody , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) . addGap ( 0 , 0 , short . MAX_VALUE ) ) ) ) ; layout . setVerticalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( javax . swing . GroupLayout . Alignment . TRAILING , layout . createSequentialGroup ( ) . addGap ( 28 , 28 , 28 ) . addComponent ( jLabel1 ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED , 208 , short . MAX_VALUE ) . addComponent ( jScrollPane1 , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) . addGap ( 44 , 44 , 44 ) . addComponent ( jButton1 ) . addContainerGap ( ) ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addGap ( 0 , 0 , short . MAX_VALUE ) . addComponent ( jLabel2 , javax . swing . GroupLayout . PREFERRED_SIZE , 22 , javax . swing . GroupLayout . PREFERRED_SIZE ) . addGap ( 0 , 0 , short . MAX_VALUE ) ) ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addGap ( 0 , 0 , short . MAX_VALUE ) . addComponent ( jButton2 ) . addGap ( 0 , 0 , short . MAX_VALUE ) ) ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addGap ( 0 , 0 , short . MAX_VALUE ) . addComponent ( jpBody , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) . addGap ( 0 , 0 , short . MAX_VALUE ) ) ) ) ; pack ( ) ; }
tr	IDF	@ Override public String toString ( ) { return start + " --> " + end ; }
tr	KEY	public int getNbMotors ( ) { return nbMotors ; }
tr	KEY	public void setScore ( boolean score ) { this . score = score ; }
tr	KEY	public double getResolution ( ) { return resolution ; }
tr	IDF	public void init ( ) { setLayout ( new BorderLayout ( ) ) ; W = getBounds ( ) . width ; H = getBounds ( ) . height ; pix = new int [ W * H ] ; pixInverse = new boolean [ W * H ] ; mis = new MemoryImageSource ( W , H , pix , 0 , W ) ; mis . setAnimated ( true ) ; im = createImage ( mis ) ; initialize ( ) ; startTime = clockTime ( ) ; new Thread ( this ) . start ( ) ; }
tr	KEY	public TBlock_Z ( ) { super ( ) ; }
tr	IDF	public void executarJogadaTurno ( Jogada jogada ) throws CasaOcupadaException , JogadaInvalidaException { this . getJogadorTurnoAtual ( ) . executarJogada ( jogada ) ; if ( this . getJogadorTurnoAtual ( ) . getTipoJogador ( ) == TipoJogador . IAELABORADA || this . getJogadorTurnoAtual ( ) . getTipoJogador ( ) == TipoJogador . IARANDOMICA ) modificarMaquinaPromocao ( jogada ) ; tabuleiro . resetaPodeEnPassant ( TipoCorJogador . getCorOposta ( turno ) ) ; if ( tabuleiro . verificarXequeMate ( this . getOponente ( ) . getCor ( ) ) ) { finalizarPartida ( getJogadorTurnoAtual ( ) , TipoSituacaoPartida . VITORIA ) ; return ; } }
tr	KEY	public void clearParameters ( ) throws SQLException { this . ps . clearParameters ( ) ; }
tr	KEY	public abstract void initController ( ) ;
tr	KEY	public boolean hasNext ( ) { if ( this . position >= items . length || items [ position ] == null ) { return false ; } else { return true ; } }
tr	KEY	public boolean isXequeMate ( ) { return xequeMate ; }
tr	KEY	private ThreeDSupportor ( ) { setIs3d ( true ) ; }
tr	IDF	@ Override public Map < Ore , long > getOreList ( ) { if ( solution != null ) { return Collections . unmodifiableSortedMap ( new TreeMap < Ore , long > ( solution . volumes ) ) ; } return Collections . emptyMap ( ) ; }
tr	IDF	@ Override protected void performInitialUpdate ( DiscoveryListener listener ) { if ( this . ssid != null && this . username != null && this . passphrase != null ) { listener . onWifiCredsProvided ( ssid , username , passphrase ) ; } if ( nodeId > 0 && password != null ) { listener . onPairSuccess ( nodeId , password ) ; } }
tr	KEY	public abstract void append ( PathIterator pi , boolean connect ) ;
tr	KEY	public void act3 ( ) ;
tr	IDF	void removeClient ( Client client ) ;
tr	KEY	public static synchronized GameEventBus instance ( ) { if ( instance == null ) { instance = new GameEventBus ( ) ; } return instance ; }
tr	IDF	@ Override public void executeCommand ( ) { Dialog help = createHelpDialog ( ) ; help . showDialog ( ) ; }
tr	IDF	@ Test public final void testDelete ( ) { try { new java . io . File ( "mock.txt" ) . createNewFile ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; fail ( ) ; } new MockDiskUnit ( "mock.txt" ) . delete ( ) ; }
tr	IDF	@ BeforeClass public static void setUp ( ) throws Exception { when ( request . getSession ( ) ) . thenReturn ( session ) ; when ( messageSystem . getAddressService ( ) ) . thenReturn ( addressService ) ; when ( session . getId ( ) ) . thenReturn ( SSID ) ; }
tr	KEY	public final K getKey ( final int index ) { if ( index < 0 || index >= this . keys . size ( ) ) return null ; return this . keys . get ( index ) ; }
tr	KEY	public int getTileH ( ) { return this . tileH ; }
tr	IDF	public void setTelefono ( Integer telefono ) { this . telefono = telefono ; }
tr	IDF	@ Override public void visit ( Comment comment ) { printIndent ( "// " + comment . comment ) ; }
tr	IDF	public boolean isNameValid ( String name ) { if ( name . length ( ) == 0 ) { return false ; } synchronized ( nameSet ) { return ! nameSet . contains ( name ) ; } }
tr	IDF	@ Before public void setUp ( ) throws Exception { out = new PrintStream ( "testing.txt" ) ; System . setOut ( out ) ; }
tr	IDF	public FTreeMap ( SortedMap < Key , Val > map ) { comp = ( Comparator < Key > ) map . comparator ( ) ; tree = fromMap ( map ) ; dflt = null ; }
tr	KEY	public boolean isSuccessful ( ) { return errors . isEmpty ( ) && exception == null ; }
tr	IDF	public boolean accept ( File aFile ) { if ( aFile . isDirectory ( ) ) return true ; return aFile . getName ( ) . toLowerCase ( ) . endsWith ( ".sav" ) ; }
tr	KEY	public static String getLabel ( ) { return label ; }
tr	KEY	public CMd5Hash ( ) { }
tr	KEY	public String getTableName ( ) { return "socialnetwork.msgstatus" ; }
tr	KEY	public synchronized void press ( ) { press ( 1 ) ; }
tr	IDF	public void setId ( String value ) { this . id = value ; }
tr	KEY	public int getId_Venta ( ) { return Id_Venta ; }
tr	KEY	public void setX ( double x ) { this . X = x ; }
tr	IDF	public void setLongUrl ( java . lang . String param ) { localLongUrlTracker = true ; this . localLongUrl = param ; }
tr	IDF	@ Override public ArrayList todosToString ( EstruturaPesquisa pesquisa ) throws SQLException { ArrayList < String [ ] > funcoes = new ArrayList < > ( ) ; String sql = "SELECT * FROM tecnico" ; if ( pesquisa . getCondicao ( ) != null && pesquisa . getCondicao ( ) . length ( ) > 0 ) { sql += pesquisa . getCondicao ( ) ; } sql += " ORDER by " + pesquisa . getCampo ( ) + pesquisa . getOrdem ( ) ; if ( pesquisa . getLimite ( ) > 0 ) { sql += " LIMIT " + pesquisa . getLimite ( ) ; } SimpleDateFormat formatador = new SimpleDateFormat ( "dd/MM/yyyy" ) ; PreparedStatement pst = connection . prepareStatement ( sql ) ; ResultSet rs = pst . executeQuery ( ) ; while ( rs . next ( ) ) { String tupla [ ] = { rs . getString ( "codigo" ) , rs . getString ( "nome" ) , rs . getString ( "email" ) , rs . getString ( ( "telefone" ) ) , formatador . format ( rs . getDate ( "data_contratacao" ) ) } ; funcoes . add ( tupla ) ; } rs . close ( ) ; pst . close ( ) ; return funcoes ; }
tr	KEY	public FloatTypeTree ( ) { }
tr	IDF	public FeatureVector createHeadBiFeatureVector ( DependencyInstance inst , int ch , int par1 , int par2 ) { FeatureVector fv = new FeatureVector ( numArcFeats ) ; int [ ] pos = inst . postagids ; int [ ] posA = inst . cpostagids ; int flag = 0 ; if ( par1 == par2 ) flag = 1 ; else if ( par1 == ch + 1 ) flag = 2 ; else if ( par2 == ch ) flag = 3 ; int dirFlag = flag ; dirFlag = ( dirFlag << 1 ) | ( par1 < ch ? 1 : 0 ) ; dirFlag = ( dirFlag << 1 ) | ( par2 < ch + 1 ? 1 : 0 ) ; long code = 0 ; int H1P = pos [ par1 ] ; int H2P = pos [ par2 ] ; int M1P = pos [ ch ] ; int M2P = pos [ ch + 1 ] ; int H1C = posA [ par1 ] ; int H2C = posA [ par2 ] ; int M1C = posA [ ch ] ; int M2C = posA [ ch + 1 ] ; code = createArcCodePPPP ( H1P_H2P_M1P_M2P , H1P , H2P , M1P , M2P ) ; addArcFeature ( code | flag , fv ) ; code = createArcCodePPPP ( H1P_H2P_M1P_M2P_DIR , H1P , H2P , M1P , M2P ) ; addArcFeature ( code | dirFlag , fv ) ; code = createArcCodePPPP ( H1C_H2C_M1C_M2C , H1C , H2C , M1C , M2C ) ; addArcFeature ( code | flag , fv ) ; code = createArcCodePPPP ( H1C_H2C_M1C_M2C_DIR , H1C , H2C , M1C , M2C ) ; addArcFeature ( code | dirFlag , fv ) ; return fv ; }
tr	KEY	public int getMaxRestarts ( ) { return maxRestarts ; }
tr	IDF	static boolean isSubset ( Object subtree1 , Object subtree2 ) { return isSubset ( subtree1 , subtree2 , NEGATIVE_INFINITY , POSITIVE_INFINITY ) ; }
tr	IDF	@ Override public FractalValue visitASTExpMod ( ASTExpMod form , FractalState state ) throws FractalException { System . out . print ( "->ExpMod" ) ; FractalValue v1 = form . getFirst ( ) . visit ( this , state ) ; FractalValue v2 = form . getSecond ( ) . visit ( this , state ) ; FractalValue result = v1 . mod ( v2 ) ; return result ; }
tr	IDF	public void actionPerformed ( ActionEvent e ) { try { ms . req_bus_model . generateFormalExpressionToFile ( InfoEnum . ALL_MODELS ) ; ms . req_app_model . generateFormalExpressionToFile ( InfoEnum . ALL_MODELS ) ; ms . req_phy_model . generateFormalExpressionToFile ( InfoEnum . ALL_MODELS ) ; } catch ( FileNotFoundException e1 ) { e1 . printStackTrace ( ) ; } catch ( UnsupportedEncodingException e1 ) { e1 . printStackTrace ( ) ; } JOptionPane . showMessageDialog ( frmMuserControlPanel , "Finish writing support links to a file!" ) ; }
tr	KEY	public void setNumber ( int number ) { this . number = number ; }
tr	KEY	public RecompensaBean ( ) { }
tr	KEY	public boolean getOptOut ( ) { return optOut ; }
tr	KEY	public void setHeight ( long value ) { this . height = value ; }
tr	IDF	private FeatureVector getdW ( int k , LocalFeatureData lfd , int [ ] actDeps , int [ ] predDeps ) { double [ ] [ ] wpU = lfd . wpU , wpV = lfd . wpV ; FeatureVector [ ] wordFvs = lfd . wordFvs ; int L = wordFvs . length ; double [ ] dW = new double [ D ] ; for ( int mod = 1 ; mod < L ; ++ mod ) { int head = actDeps [ mod ] ; int head2 = predDeps [ mod ] ; if ( head == head2 ) continue ; int d = getBinnedDistance ( head - mod ) ; int d2 = getBinnedDistance ( head2 - mod ) ; double dotu = wpU [ head ] [ k ] ; double dotu2 = wpU [ head2 ] [ k ] ; double dotv = wpV [ mod ] [ k ] ; dW [ 0 ] += ( dotu - dotu2 ) * dotv ; dW [ d ] += dotu * dotv ; dW [ d2 ] -= dotu2 * dotv ; } FeatureVector dW2 = new FeatureVector ( D ) ; for ( int i = 0 ; i < D ; ++ i ) dW2 . addEntry ( i , dW [ i ] ) ; return dW2 ; }
tr	KEY	public char [ ] [ ] getBoard ( ) { return board ; }
tr	KEY	public int getIdProyecto ( ) { return idProyecto ; }
tr	KEY	public int get_number ( ) { return _number ; }
tr	KEY	public int getWidth ( ) { return this . width ; }
tr	IDF	AttendantCode ( int id ) { this . id = id ; }
tr	KEY	@ Override public float getPower ( ) { return BULLET_POWER ; }
tr	IDF	public String findAttackDomainByID ( String id ) { String result = null ; for ( LinkedList < String > domain_list : all ) { for ( String attack_id : domain_list ) { if ( attack_id . equals ( id ) ) { result = domain_list . getFirst ( ) ; return domain_target_mapping . get ( result ) ; } } } return null ; }
tr	KEY	protected abstract String [ ] getNames ( ) ;
tr	KEY	public String toString ( ) { String str = "" ; if ( this . number == null ) { str += "; " ; } else { str += this . number + "; " ; } if ( this . name == null ) { str += "; " ; } else str += this . name + "; " ; if ( this . ip == null ) { str += "; " ; } else { str += this . ip + "; " ; } if ( this . serialNumber == null ) { str += "; " ; } else { str += this . serialNumber + "; " ; } if ( this . hardwareVersion == null ) { str += "; " ; } else { str += this . hardwareVersion + "; " ; } if ( this . hardwareType == null ) { str += "; " ; } else { str += this . hardwareType + "; " ; } if ( this . type == null ) { str += "; " ; } else { str += this . type + "; " ; } if ( this . softwareVersion == null ) { str += "; " ; } else { str += this . softwareVersion + "; " ; } if ( this . language == null ) { str += "; " ; } else { str += this . language + "; " ; } if ( this . osVersion == null ) { str += "; " ; } else { str += this . osVersion + "; " ; } if ( this . build == null ) { str += "; " ; } else { str += this . build + "; " ; } if ( this . hardwareRevision == null ) { str += "; " ; } else { str += this . hardwareRevision + "; " ; } if ( this . flashFormat == null ) { str += "; " ; } else { str += this . flashFormat + "; " ; } if ( this . dumpPWD == null ) { } else { str += this . dumpPWD ; } return str ; }
tr	IDF	void prepareUpdateBuffer ( ) { if ( prepareFlag == frame ) { return ; } prepareFlag = frame ; updateBuffer = ByteBuffer . allocate ( UPDATEBUFFER_SIZE ) ; protocol . send ( updateBuffer , new Frame ( frame ) ) ; }
tr	KEY	protected abstract void configureComponentActions ( ) ;
tr	KEY	public boolean getButtonStateB ( ) { return getRawButton ( BUTTON_B ) ; }
tr	IDF	public void endGame ( ) { boolean isHighScore = false ; System . out . println ( "Game Over" ) ; this . timer . stop ( ) ; SnakeWithPartner . boardFrame . dispose ( ) ; SnakeWithPartner . GameOverFrame = new GameOverFrame ( player ) ; SnakeWithPartner . GameOverFrame . setVisible ( true ) ; isHighScore = highScore . addToHighScores ( player ) ; if ( isHighScore ) { SnakeWithPartner . GameOverFrame . newHighScore ( ) ; } inGame = false ; try { this . finalize ( ) ; snake . kill ( ) ; food . throwAway ( ) ; board . burn ( ) ; } catch ( Throwable ex ) { Logger . getLogger ( Game . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; } }
tr	IDF	public T handle ( ResultSet res ) throws SQLException ;
tr	KEY	public int getHeight ( ) { return tiles [ 0 ] . length ; }
tr	KEY	public int getYears ( ) { return years ; }
tr	KEY	public void setSize ( int size ) { this . size = size ; }
tr	IDF	public void ancestorRemoved ( javax . swing . event . AncestorEvent evt ) { }
tr	KEY	public int getSizeX ( ) { return this . newSizeX ; }
tr	IDF	public static List < Pattern > loadFromURL ( String url ) throws IOException , PatternFormatException { URL destination = new URL ( url ) ; URLConnection conn = destination . openConnection ( ) ; return load ( new InputStreamReader ( conn . getInputStream ( ) ) ) ; }
tr	IDF	public ProductModel createBook ( BookModel book ) throws WebshopAppException ;
tr	KEY	public OrderedPropertiesTest ( ) { }
tr	IDF	public static void main ( String [ ] args ) throws EmailException , MalformedURLException { sendSimpleEmail ( GOOGLE , false ) ; }
tr	IDF	@ Override public void actionPerformed ( ActionEvent e ) { configIncludeAndNonInclude ( ) ; }
tr	IDF	@ Override public void updatePlayer ( Player player ) { String query = "update Player set " + "email = " + QueryBuilder . getParameterWithQuotesAndComma ( player . getEmail ( ) ) + "balance = " + QueryBuilder . getParameterWithFinalSpace ( player . getSalary ( ) ) + "where name = " + QueryBuilder . getParameterWithQuotes ( player . getName ( ) ) ; SqlLiteConnection . executeQuery ( query ) ; }
tr	IDF	public void setSecond ( int x , int y ) { vertices [ SECOND ] = new Point ( x , y ) ; }
tr	IDF	public void process ( Task task ) { if ( task . getAction ( ) . equals ( getListenAction ( ) ) ) { onAction ( task . getParameters ( ) ) ; } }
tr	KEY	public void setIdcliente ( int idcliente ) { this . idcliente = idcliente ; }
tr	KEY	public Building getCopy ( ) { return new CannonBuilding ( this . start , this . lenght , this . floor ) ; }
tr	IDF	public static void drawTexture ( final Texture texture , final int width , final int height ) { texture . bind ( ) ; glBegin ( GL_QUADS ) ; texture . point ( texture . getWidth ( ) , 0 ) ; glVertex3f ( width / 2 , height / 2 , 0 ) ; texture . point ( 0 , 0 ) ; glVertex3f ( - width / 2 , height / 2 , 0 ) ; texture . point ( 0 , texture . getHeight ( ) ) ; glVertex3f ( - width / 2 , - height / 2 , 0 ) ; texture . point ( texture . getWidth ( ) , texture . getHeight ( ) ) ; glVertex3f ( width / 2 , - height / 2 , 0 ) ; glEnd ( ) ; }
tr	IDF	private Strategy ( String value ) { value_ = value ; }
tr	IDF	@ Override public Vector subtract ( Vector v ) { HashMapVector res = new HashMapVector ( ) ; res . initialize ( n ) ; HashSet < Integer > keys = new HashSet < Integer > ( ) ; keys . addAll ( vec . keySet ( ) ) ; keys . addAll ( ( ( HashMapVector ) v ) . vec . keySet ( ) ) ; for ( Integer key : keys ) { res . set ( key , this . get ( key ) - v . get ( key ) ) ; } return res ; }
tr	KEY	public synchronized boolean isLBrepetitionEnabled ( ) { return isLBrepeatable ; }
tr	KEY	public boolean isEmpty ( ) { return isEmpty ; }
tr	KEY	public void cancel ( ) { if ( _process != null ) { _process . destroy ( ) ; } }
tr	IDF	public static void main ( String [ ] args ) { System . out . println ( "Testing Hash Table\n" ) ; HashTable hash = new HashTable ( 100 ) ; int [ ] lines = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 } ; int [ ] columns = { 10 , 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1 } ; for ( int i = 0 ; i < lines . length ; i ++ ) { for ( int j = 0 ; j < columns . length ; j ++ ) { hash . put ( lines [ i ++ ] , columns [ j ] ) ; } } hash . put ( 1 , 1000 ) ; System . out . println ( hash . get ( 0 ) ) ; System . out . println ( hash . get ( 1 ) ) ; System . out . println ( "Filled size is " + hash . filledSize ) ; hash . put ( 31 , 1001 ) ; hash . put ( 22 , 1001 ) ; System . out . println ( hash . get ( 1 ) ) ; System . out . println ( hash . get ( 5 ) ) ; System . out . println ( "Filled size is " + hash . filledSize ) ; hash . print ( ) ; System . out . println ( "Removing element 5:" ) ; hash . remove ( 5 ) ; System . out . println ( "Filled size is " + hash . filledSize ) ; hash . print ( ) ; }
tr	IDF	private void playEasyButtonActionPerformed ( java . awt . event . ActionEvent evt ) { java . awt . EventQueue . invokeLater ( new Runnable ( ) { public void run ( ) { player . setDifficulty ( EASY ) ; Game game = new Game ( player ) ; game . initGame ( ) ; } } ) ; this . dispose ( ) ; }
tr	KEY	public double runIteration ( ) { return swarm . runIteration ( ) ; }
tr	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { cancelarButtonActionPerformed ( evt ) ; }
tr	KEY	public int getTimesDucked ( ) { return timesDucked ; }
tr	KEY	public static void main ( String [ ] args ) throws ClassNotFoundException { new Simu5 ( ) ; }
tr	IDF	public static void main ( String [ ] args ) throws AWTException , InterruptedException { test ( ) ; }
tr	IDF	private static final long [ ] mk_tokenSet_4 ( ) { long [ ] data = new long [ 260 ] ; data [ 0 ] = - 71776119061217288 ; data [ 1 ] = - 72057594037927937 ; for ( int i = 2 ; i <= 3 ; i ++ ) { data [ i ] = - 1 ; } for ( int i = 64 ; i <= 127 ; i ++ ) { data [ i ] = - 1 ; } return data ; }
tr	KEY	public abstract Value getNextValue ( ) ;
tr	KEY	public void shuffle ( ) { }
tr	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { startBtnActionPerformed ( evt ) ; }
tr	IDF	@ Override public void updatePosition ( Vector3d deltapos ) { pobj . translate ( deltapos ) ; updateAbstraction ( ) ; }
tr	IDF	public void setParamValue ( String paramValue ) { this . paramValue = paramValue ; }
tr	KEY	public void restaura ( ) ;
tr	IDF	@ Override public List < Integer > apply ( List < Integer > result , Integer input , AtomicBoolean reduced ) { result . add ( input ) ; return result ; }
tr	IDF	public int pack ( double red , double grn , double blu ) { return 255 << 24 | clip ( red , 0 , 255 ) << 16 | clip ( grn , 0 , 255 ) << 8 | clip ( blu , 0 , 255 ) ; }
tr	KEY	public int get_cost ( ) { return _cost ; }
tr	KEY	public int getColumnCount ( ) { return columnNames . length ; }
tr	KEY	protected void setupInitialState ( ) { timer = new Timer ( ) ; }
tr	IDF	public PublishingProfile ( String name ) { this ( name , 0 , 0 , 0 , 0 , new Color ( 0 ) , new Color ( 0 ) , new Color ( 0 ) ) ; }
tr	KEY	public int getId ( ) { return id ; }
tr	IDF	protected GeneralPath createSWShape ( ) { GeneralPath componentShape = new GeneralPath ( ) ; componentShape . moveTo ( 0 , 0 ) ; componentShape . lineTo ( barV , 0 ) ; componentShape . lineTo ( barV , h - barH - barThin / 2 ) ; componentShape . curveTo ( barV , h - barH - barThin / 2 , barV , h - barH , barV + barThin / 2 , h - barH ) ; componentShape . lineTo ( w , h - barH ) ; componentShape . lineTo ( w , h ) ; componentShape . lineTo ( barThin , h ) ; componentShape . curveTo ( barThin , h , 0 , h , 0 , h - barThin ) ; componentShape . closePath ( ) ; area = new Area ( componentShape ) ; return componentShape ; }
tr	KEY	public int size ( ) { return sensitiveWords . size ( ) ; }
tr	KEY	public void run ( ) { change ( ) ; }
tr	KEY	public Checking ( int id ) { super ( id ) ; }
tr	KEY	public void setLevel ( int level ) { this . level = level ; }
tr	KEY	public final List < K > keyList ( ) { return this . keys ; }
tr	IDF	public void init ( ) { coreFiltersService . registerFilter ( vhostFilter ) ; }
tr	KEY	public void write ( int addr , int data ) { }
tr	KEY	public ElectiveDAOImpl ( ) { super ( Elective . class ) ; }
tr	KEY	public double getSecurityStatus ( ) { return securityStatus ; }
tr	IDF	public SvnSettings withSvnPath ( String value ) { return new SvnSettings ( value , defaultFileCharset , useMergeHistory , failFast ) ; }
tr	IDF	@ ManyToOne ( optional = false ) public StudentGroup getStudentGroup ( ) { return studentGroup ; }
tr	KEY	public double getCountsRevs ( ) { return countsRevs ; }
tr	KEY	public static void main ( String [ ] args ) { new Interpretador ( ) ; }
tr	IDF	public Vector2D seek ( Vector2D targetPos ) { Vector2D desiredVelocity = targetPos . minus ( parent . getPosition ( ) ) . scalarMult ( parent . getMaxSpeed ( ) ) ; desiredVelocity = desiredVelocity . minus ( parent . getVelocity ( ) ) ; desiredVelocity . truncate ( parent . getMaxSpeed ( ) ) ; return desiredVelocity . minus ( parent . getVelocity ( ) ) ; }
tr	KEY	public static void endTurn ( int fame ) { GameRobot . type ( "X" ) ; }
tr	IDF	public JList < Personnage > getJList ( ) { return listPerso ; }
tr	KEY	@ Override public void pressMoveForward ( ) { }
tr	KEY	@ Override public boolean pressTab ( ) { return false ; }
tr	KEY	public static void main ( String [ ] args ) { }
tr	IDF	public void setQueryParams ( LinkedList < XmlQueryParam > queryParams ) { this . queryParams = queryParams ; }
tr	KEY	public UsuarioBusiness ( ) { this . usuarioDAO = new UsuarioDAO ( ) ; }
tr	KEY	public boolean simulate ( ) { return false ; }
tr	KEY	abstract int rectCrossings ( double rxmin , double rymin , double rxmax , double rymax ) ;
tr	IDF	@ Override protected void setupInitialState ( ) { this . timer = new Timer ( "Reconnect timer" ) ; this . state = AuthenticatedState . NOT_AUTHENTICATED ; }
tr	KEY	public int read ( ) throws IOException { if ( totalRead >= totalExpected ) { return - 1 ; } return in . read ( ) ; }
tr	KEY	public int intConfig ( ) { return intConfig ; }
tr	IDF	@ Override public void mouseMoved ( MouseEvent e ) { mouse = e . getPoint ( ) ; }
tr	KEY	public void setDisponible ( boolean disponible ) { this . disponible = disponible ; }
tr	IDF	public byte [ ] getEncoded ( ) { byte [ ] result = new byte [ 0 ] ; for ( AuthenticationObjectDirectoryEntry e : entries ) { result = ElementaryFileObjectDirectory . append ( result , e . getDERObject ( ) . getDEREncoded ( ) ) ; } return result ; }
tr	IDF	@ Override public void putSeparator ( ) throws ParsingException { context . warn ( "detected '" + Characters . SEPARATOR + "'  Maybe you missed ';' at the end of the previous query." ) ; putChar ( Characters . SEPARATOR ) ; }
tr	IDF	public Database ( String name ) { this . name = name ; }
tr	IDF	@ Override public Action loadObject ( JsonObject json ) { return new RiceTileAction ( Integer . parseInt ( json . getString ( "actionID" ) ) , Integer . parseInt ( json . getString ( "x" ) ) , Integer . parseInt ( json . getString ( "y" ) ) ) ; }
tr	KEY	public int getNumberOfPlays ( ) { return numberOfPlays ; }
tr	KEY	public int getCommission ( ) { return commission ; }
tr	IDF	public void setLecturer ( Lecturer lecturer ) { this . lecturer = lecturer ; }
tr	KEY	@ Override public void hidDialog ( ) { this . setVisible ( false ) ; }
tr	IDF	private void printUser ( User user ) { System . out . println ( "--- bean user is ---" ) ; System . out . println ( user . toString ( ) ) ; }
tr	KEY	public void onConnecting ( ) { }
tr	IDF	public void setMenuLocation ( JTabbedPane menu , int x , int y ) { menu . setLocation ( x , y ) ; }
tr	IDF	@ Override public DivOperator getInstance ( AbstractMutableFormula left , AbstractMutableFormula right ) { return new DivOperator ( left , right ) ; }
tr	IDF	public FlashShot ( String getColour , boolean fade ) { style = fade ; if ( fade ) { transparency = 255 ; } if ( getColour . equals ( "Black" ) ) { flashScreen . setColor ( Color . BLACK ) ; } else if ( getColour . equals ( "White" ) ) { flashScreen . setColor ( Color . WHITE ) ; } else if ( getColour . equals ( "Red" ) ) { flashScreen . setColor ( Color . RED ) ; } flashScreen . fill ( ) ; }
tr	IDF	@ Override public boolean equals ( Object o ) { if ( ! ( o instanceof GameEntity ) ) { return false ; } GameEntity e = ( GameEntity ) o ; return e . id == id ; }
tr	KEY	public int [ ] getEditions ( ) { return editions ; }
tr	IDF	@ Override public String toString ( ) { return player . getClass ( ) . getName ( ) ; }
tr	KEY	public boolean isVisited ( ) { return visited ; }
tr	IDF	@ SuppressWarnings ( "unchecked" ) public static void printDL ( DomainList dl , CircuitProblem cp ) { try { class cls = class . forName ( "hw4.Rect" ) ; Object foo = cls . newInstance ( ) ; Method method = cls . getMethod ( "intToString" , new class [ ] { int . class , int . class } ) ; System . out . println ( dl . toString ( foo , method , cp . width ) ) ; } catch ( Exception e ) { System . out . println ( "error printing: " + e ) ; } }
tr	IDF	public final void append ( PathIterator pi , boolean connect ) { float [ ] coords = new float [ 6 ] ; while ( ! pi . isDone ( ) ) { switch ( pi . currentSegment ( coords ) ) { case SEG_MOVETO : if ( ! connect || numTypes < 1 || numCoords < 1 ) { moveTo ( coords [ 0 ] , coords [ 1 ] ) ; break ; } if ( pointTypes [ numTypes - 1 ] != SEG_CLOSE && floatCoords [ numCoords - 2 ] == coords [ 0 ] && floatCoords [ numCoords - 1 ] == coords [ 1 ] ) { break ; } lineTo ( coords [ 0 ] , coords [ 1 ] ) ; break ; case SEG_LINETO : lineTo ( coords [ 0 ] , coords [ 1 ] ) ; break ; case SEG_QUADTO : quadTo ( coords [ 0 ] , coords [ 1 ] , coords [ 2 ] , coords [ 3 ] ) ; break ; case SEG_CUBICTO : curveTo ( coords [ 0 ] , coords [ 1 ] , coords [ 2 ] , coords [ 3 ] , coords [ 4 ] , coords [ 5 ] ) ; break ; case SEG_CLOSE : closePath ( ) ; break ; } pi . next ( ) ; connect = false ; } }
tr	IDF	public Record ( final String id , final String firstName , final String lastName ) { this . recordID = id ; this . firstName = firstName ; this . lastName = lastName ; }
tr	KEY	@ Override public LAProvider getProvider ( ) { return null ; }
tr	KEY	public Instruction ( ) { }
tr	KEY	public DadosPessoa ( ) { }
tr	KEY	public FormulaCrossoverOperator ( int crossoverPoints ) { super ( crossoverPoints ) ; }
tr	IDF	public void render ( final Graphics2D g ) { final int cx = ( int ) x ; final int cy = ( int ) y ; g . setColor ( WHITE ) ; g . fillOval ( cx , cy , SIZE , SIZE ) ; }
tr	KEY	public int getAttackBonus ( ) { return attackBonus ; }
tr	IDF	public FTreeSet ( Comparator < ? super Elt > c ) { tree = null ; comp = ( Comparator < Elt > ) c ; }
tr	IDF	public Port ( Board board , Player owner , Position position ) { super ( board , "Port" , "PT" , owner , position ) ; _produceableUnits = new String [ ] { "BShip" , "Cruiser" , "Lander" , "Sub" , "BBoat" , "Carrier" } ; }
tr	IDF	private void insertImageToWindow ( Image image , int index ) { if ( isIndexOutOfWindow ( index ) ) { return ; } windowTaskList . get ( index ) . image = image ; }
tr	KEY	public double getTotalPayments ( ) { return totalPayments ; }
tr	IDF	private boolean [ ] getMissileGraphics ( int index ) { int iSize = getMissileSize ( index ) ; boolean [ ] bGraphics = new boolean [ MISSILE_WIDTH * iSize ] ; for ( int i = 0 ; i < bGraphics . length ; i ++ ) { bGraphics [ i ] = true ; } return bGraphics ; }
tr	IDF	public Segment getSegment ( int index ) { if ( index < getNumSegments ( ) ) { if ( ! inverted_y_ ) { return segments_ [ index ] ; } else { Segment segment = new Segment ( segments_ [ index ] ) ; segment . y *= - 1.0 ; segment . heading = ChezyMath . boundAngle0to2PiRadians ( 2 * Math . PI - segment . heading ) ; return segment ; } } else { return new Segment ( ) ; } }
tr	KEY	@ Override public boolean isLoaded ( ) { return isLoaded ; }
tr	IDF	@ Override public List < Integer > apply ( List < Integer > result , Integer input , AtomicBoolean reduced ) { result . add ( input ) ; return result ; }
tr	IDF	public ASTTCmdBack ( ASTExp length ) { this . length = length ; }
tr	IDF	public static String getTimeToSec ( ) { SimpleDateFormat dateFormat = new SimpleDateFormat ( dateFormatToSec ) ; return dateFormat . format ( new Date ( ) ) ; }
tr	KEY	public boolean isFile ( ) { return false ; }
tr	IDF	public void setApprovalCode ( String approvalCode ) { this . approvalCode = approvalCode ; }
tr	IDF	@ Override public Set < Integer > getRelatedElementNumbers ( ConstraintPuzzle cp , int elementNumber ) { Set < Integer > numbersInColumn = new TreeSet < Integer > ( ) ; int currentElementNumber = elementNumber % cp . getSize ( ) ; while ( currentElementNumber < cp . getNumberOfElements ( ) ) { if ( elementNumber != currentElementNumber ) { numbersInColumn . add ( currentElementNumber ) ; } currentElementNumber += cp . getSize ( ) ; } return numbersInColumn ; }
tr	KEY	public Student makeStudent ( ) { return new Student ( ) ; }
tr	KEY	public int getBestMove ( ) { return 0 ; }
tr	IDF	private String HomePhone ( ) { if ( this . getPhoneNumber1 ( ) . getType ( ) == PhoneType . Home ) { return this . getPhoneNumber1 ( ) . toCsv ( ) ; } else if ( this . getPhoneNumber2 ( ) . getType ( ) == PhoneType . Home ) { return this . getPhoneNumber2 ( ) . toCsv ( ) ; } else { return "" ; } }
tr	KEY	public void setPrecio_natural ( double precio_natural ) { this . precio_natural = precio_natural ; }
tr	KEY	@ After public void tearDown ( ) throws Exception { }
tr	IDF	public Model ( Entity ent ) { fields . put ( "id" , ent . getId ( ) ) ; fields . put ( "model" , ent . getModel ( ) ) ; }
tr	IDF	public Object [ ] nextRecord ( Charset charset ) throws JDBFException { if ( ! hasNextRecord ( ) ) throw new JDBFException ( "No more records available." ) ; Object aobj [ ] = new Object [ nFieldCount ] ; int i = 1 ; for ( int j = 0 ; j < aobj . length ; j ++ ) { int k = fields [ j ] . getLength ( ) ; StringBuffer stringbuffer = new StringBuffer ( k ) ; stringbuffer . append ( new String ( nextRecord , i , k , charset ) ) ; aobj [ j ] = fields [ j ] . parse ( stringbuffer . toString ( ) ) ; i += fields [ j ] . getLength ( ) ; } try { stream . readFully ( nextRecord ) ; } catch ( EOFException eofexception ) { nextRecord = null ; } catch ( IOException ioexception ) { throw new JDBFException ( ioexception ) ; } return aobj ; }
tr	KEY	void CALL ( int i , long l ) ;
tr	KEY	public LevelNode getLevelHead ( ) { return this . head ; }
tr	KEY	private CommonMethod ( ) { }
tr	IDF	@ Override public TaskAction getAction ( ) { return TaskAction . RUSER_ENTERED ; }
tr	KEY	public boolean willValidate ( ) { return this . validate ; }
tr	KEY	public void turn ( ) { this . addCardInTable ( ) ; }
tr	IDF	public AlumnoBean get ( AlumnoBean oAlumnoBean ) throws Exception { if ( oAlumnoBean . getId ( ) > 0 ) { try { oMysql . conexion ( enumTipoConexion ) ; if ( ! oMysql . existsOne ( "alumno" , oAlumnoBean . getId ( ) ) ) { oAlumnoBean . setId ( 0 ) ; } else { oAlumnoBean . setId_usuario ( Integer . parseInt ( oMysql . getOne ( "alumno" , "id_usuario" , oAlumnoBean . getId ( ) ) ) ) ; oAlumnoBean . setDni ( oMysql . getOne ( "alumno" , "dni" , oAlumnoBean . getId ( ) ) ) ; oAlumnoBean . setNumexpediente ( oMysql . getOne ( "alumno" , "numexpediente" , oAlumnoBean . getId ( ) ) ) ; oAlumnoBean . setNombre ( oMysql . getOne ( "alumno" , "nombre" , oAlumnoBean . getId ( ) ) ) ; oAlumnoBean . setApe1 ( oMysql . getOne ( "alumno" , "ape1" , oAlumnoBean . getId ( ) ) ) ; oAlumnoBean . setApe2 ( oMysql . getOne ( "alumno" , "ape2" , oAlumnoBean . getId ( ) ) ) ; oAlumnoBean . setSexo ( oMysql . getOne ( "alumno" , "sexo" , oAlumnoBean . getId ( ) ) ) ; oAlumnoBean . setDomicilio ( oMysql . getOne ( "alumno" , "domicilio" , oAlumnoBean . getId ( ) ) ) ; oAlumnoBean . setCodpostal ( oMysql . getOne ( "alumno" , "codpostal" , oAlumnoBean . getId ( ) ) ) ; oAlumnoBean . setPoblacion ( oMysql . getOne ( "alumno" , "poblacion" , oAlumnoBean . getId ( ) ) ) ; oAlumnoBean . setProvincia ( oMysql . getOne ( "alumno" , "provincia" , oAlumnoBean . getId ( ) ) ) ; oAlumnoBean . setTelefono ( oMysql . getOne ( "alumno" , "telefono" , oAlumnoBean . getId ( ) ) ) ; oAlumnoBean . setEmail ( oMysql . getOne ( "alumno" , "email" , oAlumnoBean . getId ( ) ) ) ; oAlumnoBean . setValidado ( oMysql . getOne ( "alumno" , "validado" , oAlumnoBean . getId ( ) ) ) ; String strId_usuario = oMysql . getOne ( "alumno" , "id_usuario" , oAlumnoBean . getId ( ) ) ; if ( strId_usuario != null ) { UsuarioBean oUsuarioBean = new UsuarioBean ( ) ; oAlumnoBean . setUsuario ( oUsuarioBean ) ; oAlumnoBean . getUsuario ( ) . setId ( Integer . parseInt ( strId_usuario ) ) ; UsuarioDao oUsuarioDao = new UsuarioDao ( enumTipoConexion ) ; oAlumnoBean . setUsuario ( oUsuarioDao . get ( oAlumnoBean . getUsuario ( ) ) ) ; } } } catch ( Exception e ) { throw new Exception ( "AlumnoDao.getAlumno: Error: " + e . getMessage ( ) ) ; } finally { oMysql . desconexion ( ) ; } } else { oAlumnoBean . setId ( 0 ) ; } return oAlumnoBean ; }
tr	IDF	@ Before public void before ( ) { tabuleiro = new TabuleiroXadrez ( ) ; reiBranco = new Rei ( TipoCorJogador . BRANCO ) ; torreBranca = new Torre ( TipoCorJogador . BRANCO ) ; reiPreto = new Rei ( TipoCorJogador . PRETO ) ; torrePreta = new Torre ( TipoCorJogador . PRETO ) ; cavaloBranco = new Cavalo ( TipoCorJogador . BRANCO ) ; cavaloPreto = new Cavalo ( TipoCorJogador . PRETO ) ; peaoBranco = new Peao ( TipoCorJogador . BRANCO ) ; peaoPreto = new Peao ( TipoCorJogador . PRETO ) ; }
tr	KEY	public boolean getRegisteredVoter ( ) { return registeredVoter ; }
tr	KEY	public int getSpeichergroesse ( ) { return speichergroesse ; }
tr	KEY	public int getBirdies ( ) { return birdies ; }
tr	IDF	public void clearQueue ( ) { synchronized ( queue ) { queue . clear ( ) ; queue . notify ( ) ; } }
tr	KEY	public void setRated ( boolean rated ) { this . rated = rated ; }
tr	IDF	private int getIndex ( String [ ] split , int start ) { int index = - 1 ; for ( int i = start ; i < split . length ; i ++ ) { if ( split [ i ] . equals ( "1" ) ) { if ( index >= 0 ) System . out . println ( "ERROR: Only one class may be assigned to each example." ) ; index = i - start ; } } if ( index < 0 ) System . out . println ( "ERROR: No class found." ) ; return index ; }
tr	KEY	public HashMapVectorMatrix ( ) { }
tr	KEY	public String getArtista ( ) { return this . Artista ; }
tr	IDF	@ Override public void mouseClicked ( MouseEvent me ) { }
tr	IDF	public TBlock_L ( TBlockBox box ) { super ( box ) ; }
tr	KEY	public void setRowId ( int rowId ) { this . rowId = rowId ; }
tr	IDF	public void setId_Producto ( Producto Id_Producto ) { this . Id_Producto = Id_Producto ; }
tr	IDF	@ Override public void transform ( double [ ] src , double [ ] dst ) { for ( int j = 0 ; j < 3 ; j ++ ) { double temp = 0 ; for ( int k = 0 ; k < 3 ; k ++ ) { temp = temp + matrix [ j ] [ k ] * src [ k ] ; } dst [ j ] = temp + matrix [ j ] [ 3 ] ; } }
tr	KEY	public int size ( ) { return size ; }
tr	IDF	public Capra6 ( ) { setWidth ( ROBOT_WIDTH ) ; setNbMotors ( NB_MOTORS ) ; setMaxSpeed ( MAX_SPEED ) ; setDefaultSpeed ( DEFAULT_SPEED ) ; setDefaultAccel ( DEFAULT_ACCEL ) ; setBroadcastAddress ( BROADCAST_ADDRESS ) ; setResolution ( RESOLUTION ) ; setCountsRpm ( COUNTS_RPM ) ; setCountsRps ( COUNTS_RPS ) ; setCountsRevs ( COUNTS_REVS ) ; setCountsSec ( COUNTS_SEC ) ; setGearRatio ( GEAR_RATIO ) ; setWheelDiameter ( WHEEL_DIAMETER ) ; setPortName ( PORT_NAME ) ; }
tr	IDF	@ Override protected void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { try { processRequest ( request , response ) ; } catch ( Exception ex ) { Logger . getLogger ( Controller . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; throw new ServletException ( "Controller: Error: ClassNotFoundException " + ex . getMessage ( ) ) ; } }
tr	IDF	public void save ( ) throws IOException { JSONObject json = new JSONObject ( ) ; json . put ( "startYear" , startDate . getYear ( ) ) ; json . put ( "startMonth" , startDate . getMonth ( ) ) ; json . put ( "startDay" , startDate . getDay ( ) ) ; json . put ( "username" , username ) ; json . put ( "displayName" , displayName ) ; json . put ( "isRightHanded" , isRightHanded ) ; json . put ( "favoriteDiscName" , favoriteDiscName ) ; json . put ( "favoriteCourseName" , favoriteCourseName ) ; json . put ( "gamesPlayed" , gamesPlayed ) ; json . put ( "holesInOne" , holesInOne ) ; json . put ( "albatrosses" , albatrosses ) ; json . put ( "eagles" , eagles ) ; json . put ( "birdies" , birdies ) ; json . put ( "pars" , pars ) ; json . put ( "bogeys" , bogeys ) ; json . put ( "doubleBogeys" , doubleBogeys ) ; json . put ( "tripleBogeys" , tripleBogeys ) ; json . put ( "worstHole" , worstHole ) ; json . put ( "lifetimeThrows" , lifetimeThrows ) ; json . put ( "lifetimeOverUnder" , lifetimeOverUnder ) ; try { File file = new File ( "profiles/" + username + ".json" ) ; FileWriter fw = new FileWriter ( file . getAbsolutePath ( ) ) ; fw . write ( json . toString ( ) ) ; fw . close ( ) ; } catch ( IOException ex ) { Logger . getLogger ( Profile . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; } saveDiscs ( ) ; }
tr	KEY	public void adjustScore ( final int delta ) { this . score += delta ; }
tr	KEY	public void close ( ) ;
tr	IDF	public int createArgSequenceCode ( int [ ] arglbids , boolean [ ] isPruned , int p , int pid ) { long code = 0 ; for ( int i = 0 ; i < arglbids . length ; ++ i ) { if ( i == pid ) { code = ( code << auglbNumBits ) | ( DictionarySet . ARGINDEX ) ; } if ( arglbids [ i ] == - 1 || arglbids [ i ] >= DictionarySet . ARGINDEX - 1 || isPruned [ p * arglbids . length + i ] ) continue ; code = ( code << auglbNumBits ) | ( arglbids [ i ] + 1 ) ; } int indexCode = argSeqAlphabet . lookupIndex ( code ) + 1 ; return indexCode ; }
tr	IDF	List < Appointment > getAppointmentsForStudentGroup ( long studentGroupId ) ;
tr	IDF	public Topic getTopic ( String name ) ;
tr	KEY	public int executePost ( int effectedRowCount ) throws EFrameWorkUserIsIdiotException { if ( effectedRowCount == 0 ) { throw new EFrameWorkUserIsIdiotException ( "Insert did not insert a row." ) ; } else if ( effectedRowCount != 1 ) { throw new EFrameWorkUserIsIdiotException ( "Insert inserted more then one row." ) ; } return effectedRowCount ; }
tr	KEY	private static boolean isPrime ( int number ) { if ( number < 2 ) { return false ; } else if ( number == 2 ) { return true ; } else if ( number == 3 ) { return true ; } else if ( number == 5 ) { return true ; } final int start = 2 ; final int end = ( int ) Math . sqrt ( ( double ) number ) ; final boolean result = isDivisible ( number , start , end ) ; return result ; }
tr	IDF	public void setDepartamento ( String value ) { this . departamento = value ; }
tr	KEY	public void setId_Compra ( int Id_Compra ) { this . Id_Compra = Id_Compra ; }
tr	KEY	private double func ( double x ) { return Math . PI ; }
tr	KEY	public void collideHorizontal ( ) { setVelocityX ( 0 ) ; }
tr	IDF	public static void main ( String [ ] args ) { MaxIncreasingPathInMatrix maxIncreasingPathInMatrix = new MaxIncreasingPathInMatrix ( ) ; int [ ] [ ] input = { { 9 , 9 , 4 } , { 6 , 6 , 8 } , { 2 , 1 , 1 } } ; int [ ] [ ] input1 = { { 3 , 4 , 5 } , { 3 , 2 , 6 } , { 2 , 2 , 1 } } ; System . out . println ( maxIncreasingPathInMatrix . longestIncreasingPathII ( null ) ) ; System . out . println ( maxIncreasingPathInMatrix . longestIncreasingPathII ( new int [ 0 ] [ ] ) ) ; System . out . println ( maxIncreasingPathInMatrix . longestIncreasingPathII ( input ) ) ; System . out . println ( maxIncreasingPathInMatrix . longestIncreasingPathII ( input1 ) ) ; }
tr	KEY	@ Override public void setFocus ( ) { }
tr	IDF	public Jogada escolherJogada ( TabuleiroXadrez tabuleiroAtual ) { List < Estado > estadosPossiveis = null ; try { estadosPossiveis = tabuleiroAtual . getGeraEstado ( ) . proximosEstadosPossiveis ( tabuleiroAtual , this . cor ) ; } catch ( CasaOcupadaException | JogadaInvalidaException e ) { return null ; } Random random = new Random ( ) ; if ( ! estadosPossiveis . isEmpty ( ) ) { return estadosPossiveis . get ( random . nextInt ( estadosPossiveis . size ( ) ) ) . getJogada ( ) ; } return null ; }
tr	KEY	public boolean isSsl ( ) { return ssl ; }
tr	IDF	public void update ( double dt ) { for ( GameEntity u : entities ) { u . update ( dt ) ; } quadTree . clear ( ) ; for ( GameEntity u : entities ) { quadTree . add ( u ) ; } generateContacts ( ) ; processContacts ( ) ; }
tr	IDF	public Playlist ( String name ) { _name = name ; _playlist = new ArrayList < Song > ( ) ; _index = 0 ; }
tr	KEY	public ProcedimentoNaoDeclaradoException ( ) { super ( ) ; }
tr	KEY	public static void main ( String args [ ] ) { new Boss3 ( ) ; }
tr	IDF	public void mousePressed ( java . awt . event . MouseEvent evt ) { buttonSair_MenuPrincipalMousePressed ( evt ) ; }
tr	IDF	void actionRestoreCert ( int num ) { String fileName = null ; if ( num == 0 ) { fileName = TestKeys . authcertFileName ; } else if ( num == 1 ) { fileName = TestKeys . signcertFileName ; } else if ( num == 2 ) { fileName = TestKeys . deccertFileName ; } else if ( num == 3 ) { fileName = TestKeys . cacertFileName ; } else { fileName = "<NONE>" ; } pi . getCertificatesPane ( ) . setPath ( num , fileName ) ; }
tr	KEY	public NoArvore getPrimeiroFilho ( ) { if ( this . temNoFilho ( ) == true ) return this . listaAdjacencia . get ( 1 ) ; return null ; }
tr	KEY	public void setFirstSolutionOnly ( boolean firstSolutionOnly ) { this . firstSolutionOnly = firstSolutionOnly ; }
tr	IDF	public static void dump ( Node node ) { if ( node instanceof Comment ) { System . out . print ( node ) ; } else if ( node instanceof PrintBold ) { System . out . print ( node ) ; } else if ( node instanceof Print ) { System . out . print ( node ) ; } else if ( node instanceof Block ) { System . out . print ( ( Block ) node + ":" ) ; dump ( ( ( Block ) node ) . first ) ; System . out . print (   ) ; dump ( ( ( Block ) node ) . second ) ; } else { System . err . println ( "ERR: no match for node." ) ; System . exit ( 42 ) ; } }
tr	KEY	public void setPixel ( int x , int y , int rgb [ ] ) { }
tr	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { comboEstadoActionPerformed ( evt ) ; }
tr	KEY	public boolean interact ( String action , Interactable target ) { if ( super . interact ( action , target ) ) { return true ; } else if ( action . equals ( "give" ) ) { return this . give ( target ) ; } return false ; }
tr	IDF	public void save ( ) { AccessTasks tasks = new AccessTasks ( ) ; String title = txtTitle . getText ( ) ; User creator = null ; User assignedTo = null ; for ( User u : users . getUsers ( ) ) { if ( u . getUserName ( ) . equals ( lblCreatedByField . getText ( ) ) ) { creator = u ; } if ( u . getUserName ( ) . equals ( cboxAssignedTo . getText ( ) ) ) { assignedTo = u ; } } Task task ; try { task = new Task ( title , creator , assignedTo ) ; task . setComments ( txtComments . getText ( ) ) ; task . setDescription ( txtDescription . getText ( ) ) ; task . setUpdatedDate ( Calendar . getInstance ( ) ) ; task . setPriority ( PriorityCode . valueOf ( cboxPriority . getText ( ) ) ) ; task . setStatus ( StatusCode . valueOf ( cboxStatus . getText ( ) ) ) ; final int MIN_YEAR = 1800 ; Calendar currentDueDate = FormatDate . convertDateTimeToCalendar ( dueDate ) ; if ( currentDueDate . get ( Calendar . YEAR ) < MIN_YEAR ) { throw new IllegalArgumentException ( "Please enter a date with a year no less than " + MIN_YEAR ) ; } task . setDueDate ( currentDueDate ) ; try { double number ; number = double . parseDouble ( txtTimeEstimate . getText ( ) ) ; task . setTimeEstimate ( number ) ; number = double . parseDouble ( txtTimeSpent . getText ( ) ) ; task . setTimeSpent ( number ) ; } catch ( NumberFormatException nfe ) { MyMessageBox error = new MyMessageBox ( shell , "Error" , "Please enter a non-negative numeric value for Time Estimate and Time Spent." , "OK" ) ; error . open ( ) ; } tasks . getTasks ( ) ; tasks . addTask ( task ) ; MyMessageBox success = new MyMessageBox ( shell , "Save succeeded" , "Task has been saved" , "OK" ) ; success . open ( ) ; shell . close ( ) ; } catch ( IllegalArgumentException iae ) { MyMessageBox error ; if ( iae . getMessage ( ) == null ) { error = new MyMessageBox ( shell , "Illegal Field" , "Check your inputs" , "OK" ) ; } else { error = new MyMessageBox ( shell , "Illegal Field" , iae . getMessage ( ) , "OK" ) ; } error . open ( ) ; } }
tr	IDF	@ Override public void init ( ) { camera . init ( ) ; changeGameState ( GameState . INITIALIZING ) ; }
tr	IDF	public List < String > restoreIpAddresses ( String s ) { List < String > current = new ArrayList < String > ( ) ; List < String > result = new ArrayList < String > ( ) ; parseIP ( s , 0 , current , result ) ; return result ; }
tr	KEY	public synchronized void xsetD4InitialDelay ( int a ) { d4ID = a ; }
tr	IDF	public void construct ( ) { this . north = new CardinalDirection ( "north" , World . neForest , "To the north there is dense forest." ) ; this . east = new CardinalDirection ( "east" , World . eForestBuffer , "To the east the road continues into the forest." ) ; this . south = new CardinalDirection ( "south" , World . seForest , "To the south there is a mysterious cave hidden in the trees." ) ; this . west = new CardinalDirection ( "west" , World . cField , "To the west there is a road leading to a house." ) ; this . aspects . add ( north ) ; this . aspects . add ( east ) ; this . aspects . add ( south ) ; this . aspects . add ( west ) ; return ; }
tr	KEY	public void setPassable ( boolean passable ) { this . passable = passable ; }
tr	IDF	public void mouseClicked ( MouseEvent evt ) { JList < Vak > list = ( JList < Vak > ) evt . getSource ( ) ; if ( evt . getClickCount ( ) == 1 ) { vulToetslijst ( ) ; } }
tr	KEY	public void update ( ) { }
tr	KEY	public boolean isBorder ( ) { if ( this . xVal == 13 || this . yVal == 13 || this . xVal == 0 || this . yVal == 0 ) return true ; return false ; }
tr	IDF	private void playPoker ( ) { if ( listPokerPlayers . getModel ( ) != null && listPokerPlayers . getModel ( ) . getSize ( ) >= 2 ) { try { String bigBlind = this . txtBigBlind . getText ( ) ; if ( Validators . isNumeric ( bigBlind ) ) { int startBigBlind = Integer . parseInt ( bigBlind ) ; ArrayList < Player > players = this . getPlayers ( ) ; ArrayList < String > playerCantPlay = Validators . somePlayerHasSalaryLessThanBigBlind ( players , startBigBlind ) ; if ( playerCantPlay . isEmpty ( ) ) { ArrayList < String > playerNames = this . getPlayerNamesAsList ( players ) ; TexasHoldemGame game = new TexasHoldemGame ( playerNames , startBigBlind ) ; game . setVisible ( true ) ; } else { JOptionPane . showInputDialog ( new JFrame ( ) , "No es posible iniciar el juego  los siguientes jugadores tienen un salario menor a la ciega grande" , "Error al Iniciar el juego" , JOptionPane . ERROR_MESSAGE , null , playerCantPlay . toArray ( ) , playerCantPlay . toArray ( ) [ 0 ] ) ; playerCantPlay . toArray ( ) ; } } else { JOptionPane . showMessageDialog ( new JFrame ( ) , "El valor ingresado no es un numero " , "Error" , JOptionPane . ERROR_MESSAGE ) ; } } catch ( Exception e ) { e . printStackTrace ( ) ; } } else { JOptionPane . showMessageDialog ( new JFrame ( ) , "Se necesita un minimo de dos jugadores para iniciar la partida" , "Error" , JOptionPane . ERROR_MESSAGE ) ; } }
tr	IDF	public JavaPlayer playerWithHighestRankedDeveloperSurroundingBodyOfWater ( ArrayList < JavaCell > coast , LinkedList < Developer > gameDevelopers ) { int dontSearchAtOrAboveThisElevation = 200 ; int maxElevation = 0 ; HashMap < JavaPlayer , Integer > playersWithElevation = new HashMap < JavaPlayer , Integer > ( ) ; while ( dontSearchAtOrAboveThisElevation > 0 ) { for ( int i = 0 ; i < coast . size ( ) ; i ++ ) { if ( maxElevation < coast . get ( i ) . getElevation ( ) && coast . get ( i ) . getElevation ( ) < dontSearchAtOrAboveThisElevation ) { maxElevation = coast . get ( i ) . getElevation ( ) ; } } for ( int i = 0 ; i < coast . size ( ) ; i ++ ) { if ( maxElevation == coast . get ( i ) . getElevation ( ) ) { for ( int j = 0 ; j < gameDevelopers . size ( ) ; j ++ ) { if ( gameDevelopers . get ( j ) != null ) { if ( gameDevelopers . get ( j ) . getX ( ) == coast . get ( i ) . getX ( ) && gameDevelopers . get ( j ) . getY ( ) == coast . get ( i ) . getY ( ) ) { if ( playersWithElevation . get ( gameDevelopers . get ( j ) . getOwner ( ) ) != null ) { playersWithElevation . put ( gameDevelopers . get ( j ) . getOwner ( ) , playersWithElevation . get ( gameDevelopers . get ( j ) . getOwner ( ) ) + 1 ) ; } else { playersWithElevation . put ( gameDevelopers . get ( j ) . getOwner ( ) , 1 ) ; } break ; } } } } } HashSet < JavaPlayer > playersWithDevelopersAtMaxElevation = new HashSet < JavaPlayer > ( ) ; int maxValueInMap = ( Collections . max ( playersWithElevation . values ( ) ) ) ; for ( Entry < JavaPlayer , Integer > entry : playersWithElevation . entrySet ( ) ) { if ( entry . getValue ( ) == maxValueInMap ) { playersWithDevelopersAtMaxElevation . add ( entry . getKey ( ) ) ; } } if ( playersWithDevelopersAtMaxElevation . size ( ) == 1 ) { JavaPlayer [ ] maxPlayer = new JavaPlayer [ 1 ] ; playersWithDevelopersAtMaxElevation . toArray ( maxPlayer ) ; return maxPlayer [ 0 ] ; } else { dontSearchAtOrAboveThisElevation = maxElevation ; } } return null ; }
tr	IDF	@ Test public void canGetCategoryThatNotExist ( ) { CategoryDAO cd = new CategoryDAO ( ) ; CategoryModel retrieved = null ; try { retrieved = cd . getCategory ( - 2 ) ; } catch ( WebshopAppException e ) { e . printStackTrace ( ) ; fail ( "Exception" ) ; } assertNull ( retrieved ) ; }
tr	KEY	public int getGeom ( ) ;
tr	IDF	public void changeGameState ( final GameState state ) { super . changeGameState ( state ) ; switch ( state ) { case INITIALIZING : break ; case STARTING : soundManager . play ( BreakOutSoundKeys . GET_READY ) ; playingField . setupLevel ( ) ; camera . setMessage ( new InGameMessage ( "Get Ready!" , WHITE , 2000 ) ) ; break ; case LEVEL_CHANGE : camera . setMessage ( new InGameMessage ( "Great Job!" , WHITE , 2000 ) ) ; SharedGameData . getInstance ( ) . levelUp ( ) ; playingField . setupLevel ( ) ; break ; case LEVEL_RESET : soundManager . play ( BreakOutSoundKeys . GET_READY ) ; playingField . resetEntities ( ) ; camera . setMessage ( new InGameMessage ( "Get Ready!" , WHITE , 2000 ) ) ; break ; case OUT_OF_BOUNDS : soundManager . play ( BreakOutSoundKeys . OUT_OF_BOUNDS ) ; camera . setMessage ( new InGameMessage ( "Out Of Bounds" , WHITE , 1000 ) ) ; break ; case GAME_OVER : soundManager . play ( BreakOutSoundKeys . GAME_OVER ) ; camera . setMessage ( new InGameMessage ( "Game Over" , RED , Integer . MAX_VALUE ) ) ; break ; } }
tr	IDF	public boolean dansTirsSurJoueur ( Position p ) { Tir [ ] tirs = getTirsSurJoueur ( ) ; for ( int i = 0 ; i < tirs . length ; i ++ ) if ( tirs [ i ] . getPosition ( ) . equals ( p ) ) return true ; return false ; }
tr	IDF	public void setAssociatedDate ( Date associatedDate ) { this . associatedDate = associatedDate ; }
tr	KEY	public boolean tileFree ( ) { if ( occupant != null ) return false ; return true ; }
tr	IDF	private void closeConnection ( ) { try { if ( con != null ) con . close ( ) ; con = null ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }
tr	IDF	void c2sDeleteObject ( String obId ) throws RemoteException ;
tr	IDF	public final void addWordFeature ( long code , double value , FeatureVector mat ) { int id = wordAlphabet . lookupIndex ( code , numWordFeats ) ; if ( id >= 0 ) { mat . addEntry ( id , value ) ; if ( id == numWordFeats ) ++ numWordFeats ; } }
tr	IDF	public void addMileStone ( Calendar date ) { new AddMilestoneUI ( this , name , date , value ) ; }
tr	KEY	public void onEmptyPacketReceived ( ) { }
tr	KEY	@ Override public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( ) != obj . getClass ( ) ) { return false ; } final Building other = ( Building ) obj ; if ( this . floors != other . floors ) { return false ; } return true ; }
tr	IDF	void setFont ( FontHandle font ) { Font jfont = font . font ( ) ; if ( jfont != null ) { mNameLabel . setText ( jfont . getName ( ) ) ; mSampleLabel . setFont ( jfont ) ; mSampleLabel . setVisible ( true ) ; } else { mNameLabel . setText ( "" ) ; mSampleLabel . setVisible ( false ) ; } mFileLabel . setText ( font . file ( ) . getName ( ) ) ; }
tr	KEY	public void setGoalRaw ( double goal ) { this . goal = goal ; }
tr	IDF	private void dealTwoArgument ( POP3Session session , int emailNum , int lineNum ) throws POP3Exception { User user = session . getUser ( ) ; List < Email > emailList = user . getEmailList ( ) ; if ( emailNum <= 0 || emailNum > user . getEmailNumber ( ) ) { throw new POP3Exception ( "-ERR no such message  only " + user . getEmailNumber ( ) + " messages in maildrop" ) ; } else if ( lineNum < 0 ) { throw new POP3Exception ( "-ERR syntax error" ) ; } Email email = emailList . get ( emailNum - 1 ) ; if ( email . isDeleted ( ) == true ) { throw new POP3Exception ( "-ERR message already deleted" ) ; } boolean isHeaderFound = false ; int countLine = lineNum ; session . sendResponse ( "+OK" ) ; String content = email . getContent ( ) ; String temp [ ] = content . split ( "\n" ) ; for ( int i = 0 ; i < temp . length ; i ++ ) { if ( isHeaderFound == false ) { session . sendResponse ( temp [ i ] ) ; } if ( isHeaderFound == true ) { if ( lineNum == 0 ) { session . sendResponse ( temp [ i ] ) ; break ; } if ( countLine > 0 ) { session . sendResponse ( temp [ i ] ) ; countLine -- ; } } if ( temp [ i ] . trim ( ) . length ( ) == 0 ) { isHeaderFound = true ; } } session . sendResponse ( "." ) ; }
tr	KEY	public Stein ( ) { }
tr	IDF	public Piece ( Board board , int hitpoints , String name , String symbol , Player owner , Position position ) { _active = true ; _board = board ; _hitpoints = hitpoints ; _name = name ; _symbol = symbol ; _owner = owner ; _position = position ; _pieceNameProperty = new SimpleStringProperty ( name ) ; }
tr	KEY	public RotateShootingCharacter setVElevation ( float vElevation ) { this . vElevation = vElevation ; return this ; }
tr	KEY	public int length ( ) { return this . map . size ( ) ; }
tr	IDF	@ Override public Puzzle read ( InputStream in ) { try ( Scanner sc = new Scanner ( in ) ) { int size = sc . nextInt ( ) ; return new Queens ( size ) ; } }
tr	KEY	public double getWidth ( ) { return width ; }
tr	IDF	@ Test public void testSignup ( ) throws Exception { System . out . println ( "************ Testing signup ************" ) ; String message = mtbService . signup ( fullname , username , plainTextPassword ) ; System . out . println ( "Message from API: " + message ) ; String [ ] response = message . split ( "::" ) ; if ( response [ 0 ] . toLowerCase ( ) . equals ( "ok" ) ) { assert . assertEquals ( "Success response from API" , "success" , response [ 1 ] . toLowerCase ( ) ) ; } if ( response [ 0 ] . toLowerCase ( ) . equals ( "err" ) ) { assert . assertEquals ( "User Already Exists Error" , "2" , response [ 1 ] ) ; } }
tr	KEY	public void setNumFacCom_DevCompra ( int NumFacCom_DevCompra ) { this . NumFacCom_DevCompra = NumFacCom_DevCompra ; }
tr	IDF	static int firstInvalid ( String N ) { for ( int i = 0 ; i < N . length ( ) ; i ++ ) if ( N . charAt ( N . length ( ) - i - 1 ) != 0 && N . charAt ( N . length ( ) - i - 1 ) != 1 && N . charAt ( N . length ( ) - i - 1 ) != 2 ) return i ; return - 1 ; }
tr	IDF	@ Override public void doMove ( Move m ) { super . doMove ( m ) ; moves . add ( m ) ; }
tr	KEY	public RenderEvent ( long ticks ) { super ( ticks ) ; }
tr	IDF	protected int getCurrentYear ( ) { SimpleDateFormat yearformat = new SimpleDateFormat ( "yyyy" ) ; yearformat . setTimeZone ( timezone ) ; return Integer . parseInt ( yearformat . format ( Calendar . getInstance ( ) . getTime ( ) ) ) ; }
tr	KEY	public String toString ( ) { if ( this == TipoCorJogador . BRANCO ) return "BRANCO" ; return "PRETO" ; }
tr	IDF	public FriendshDaoImpl ( final java . sql . Connection userConn ) { this . userConn = userConn ; }
tr	IDF	public static int maxSame ( String str ) { str = str . replaceAll ( "\\[" , "" ) . replaceAll ( "\\(" , "" ) . replaceAll ( "\\+" , "" ) . replaceAll ( "\\)" , "" ) . replaceAll ( "\\{" , "" ) . replaceAll ( "\\*" , "" ) . replaceAll ( "\\?" , "" ) . replaceAll ( "\\|" , "" ) . replaceAll ( "\\\\" , "" ) . replaceAll ( "\\^" , "" ) ; int max_length = 0 ; String max_str = "" ; while ( str . length ( ) > 0 ) { int length = str . length ( ) ; String first = str . substring ( 0 , 1 ) ; str = str . replaceAll ( first , "" ) ; if ( max_length < length - str . length ( ) ) { max_length = length - str . length ( ) ; max_str = first ; } } if ( max_length != 0 ) return max_length - 1 ; return 0 ; }
tr	IDF	@ Bean ( name = "areaStatCrud" ) public AreaStatCrud getAreaStat ( ) { return new AreaStatCrudImpl ( ) ; }
tr	KEY	public void setId ( int id ) { this . id = id ; }
tr	KEY	@ Override public long getNativeConsumer ( ) { return 0 ; }
tr	IDF	@ Override public void actionPerformed ( ActionEvent e ) { Help . showOnFormula ( ) ; }
tr	KEY	public DaYunView ( ) { }
tr	KEY	public void setUp ( ) { sComparer = new StringComparer ( false ) ; iComparer = new IntegerComparer ( false ) ; dComparer = new DateComparer ( false ) ; }
tr	KEY	public double getJAngle ( ) { return jitenAngle ; }
tr	IDF	@ Override public void onCommand ( POP3Session session , String argument1 , String argument2 ) throws POP3Exception { if ( session . getState ( ) != POP3State . TRANSACTION || argument1 == null || argument2 != null ) { throw new POP3Exception ( "-ERR syntax error" ) ; } int emailNum = - 1 ; try { emailNum = Integer . parseInt ( argument1 ) ; } catch ( NumberFormatException e ) { throw new POP3Exception ( "-ERR syntax error" ) ; } User user = session . getUser ( ) ; List < Email > emailList = user . getEmailList ( ) ; if ( emailNum <= 0 || emailNum > user . getEmailNumber ( ) ) { throw new POP3Exception ( "-ERR no such message  only " + user . getEmailNumber ( ) + " messages in maildrop" ) ; } if ( emailList . get ( emailNum - 1 ) . isDeleted ( ) ) { throw new POP3Exception ( "-ERR message " + emailNum + " already deleted" ) ; } emailList . get ( emailNum - 1 ) . setDeleted ( true ) ; session . sendResponse ( "+OK message " + emailNum + " deleted" ) ; }
tr	IDF	@ Override public void actionPerformed ( ActionEvent e ) { final JFrame bankTeller = new JFrame ( "Dodaj nowy produkt" ) ; bankTeller . setDefaultCloseOperation ( JFrame . DO_NOTHING_ON_CLOSE ) ; bankTeller . getRootPane ( ) . setWindowDecorationStyle ( JRootPane . NONE ) ; newrow_flag = 1 ; bankTeller . setSize ( 500 , 280 ) ; bankTeller . setLocationRelativeTo ( null ) ; bankTeller . setResizable ( false ) ; bankTeller . setLayout ( new GridBagLayout ( ) ) ; bankTeller . setBackground ( Color . gray ) ; GridBagConstraints c = new GridBagConstraints ( ) ; JPanel acctInfo = new JPanel ( new GridBagLayout ( ) ) ; c . gridx = 0 ; c . gridy = 0 ; c . gridwidth = 2 ; c . gridheight = 1 ; c . insets = new Insets ( 5 , 5 , 5 , 5 ) ; bankTeller . add ( acctInfo , c ) ; c . gridwidth = 1 ; JLabel custNameLbl = new JLabel ( "Nazwa produktu" ) ; c . gridx = 0 ; c . gridy = 0 ; c . insets = new Insets ( 0 , 0 , 0 , 0 ) ; acctInfo . add ( custNameLbl , c ) ; c . weightx = 1. ; JLabel custCategoryLbl = new JLabel ( "Kategoria" ) ; c . gridx = 0 ; c . gridy = 1 ; c . insets = new Insets ( 0 , 0 , 0 , 0 ) ; acctInfo . add ( custCategoryLbl , c ) ; c . weightx = 1. ; JLabel custCompanyLbl = new JLabel ( "Firma" ) ; c . gridx = 0 ; c . gridy = 2 ; c . insets = new Insets ( 0 , 0 , 0 , 0 ) ; acctInfo . add ( custCompanyLbl , c ) ; c . weightx = 1. ; c . fill = GridBagConstraints . HORIZONTAL ; custNameTxt = new JTextField ( "" , 1000 ) ; c . gridx = 1 ; c . gridy = 0 ; c . insets = new Insets ( 5 , 5 , 5 , 5 ) ; acctInfo . add ( custNameTxt , c ) ; c . fill = GridBagConstraints . HORIZONTAL ; c . gridx = 1 ; c . gridy = 1 ; c . insets = new Insets ( 5 , 5 , 5 , 5 ) ; acctInfo . add ( categoryBox , c ) ; c . fill = GridBagConstraints . HORIZONTAL ; c . gridx = 1 ; c . gridy = 2 ; c . insets = new Insets ( 5 , 5 , 5 , 5 ) ; acctInfo . add ( companyBox , c ) ; closeBtn = new JButton ( "Anuluj" ) ; c . gridx = 0 ; c . gridy = 3 ; c . insets = new Insets ( 5 , 5 , 5 , 5 ) ; acctInfo . add ( closeBtn , c ) ; savingsBtn = new JButton ( "Dodaj" ) ; c . gridx = 1 ; c . gridy = 3 ; c . insets = new Insets ( 5 , 5 , 5 , 5 ) ; acctInfo . add ( savingsBtn , c ) ; bankTeller . setVisible ( true ) ; closeBtn . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { bankTeller . dispose ( ) ; newrow_flag = 0 ; } } ) ; final int [ ] cmp ; cmp = new int [ 1 ] ; final int [ ] cmpa ; cmpa = new int [ 1 ] ; categoryBox . addItemListener ( new ItemListener ( ) { public void itemStateChanged ( ItemEvent event ) { JComboBox comboBox = ( JComboBox ) event . getSource ( ) ; Object item = event . getItem ( ) ; if ( event . getStateChange ( ) == ItemEvent . SELECTED && box_flag_category > 0 ) { Category selected_category = ( Category ) categoryBox . getSelectedItem ( ) ; id_category = selected_category . getId ( ) ; System . out . println ( "Id kategorii:" + id_category ) ; cmp [ 0 ] = 1 ; } } } ) ; companyBox . addItemListener ( new ItemListener ( ) { public void itemStateChanged ( ItemEvent event ) { JComboBox comboBox = ( JComboBox ) event . getSource ( ) ; Object item = event . getItem ( ) ; if ( event . getStateChange ( ) == ItemEvent . SELECTED && box_flag_company > 0 ) { Company selected_company = ( Company ) companyBox . getSelectedItem ( ) ; id_company = selected_company . getId ( ) ; System . out . println ( "Id firmy:" + id_company ) ; cmpa [ 0 ] = 1 ; } } } ) ; savingsBtn . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { String name = custNameTxt . getText ( ) ; if ( ! name . isEmpty ( ) && cmp [ 0 ] > 0 && cmpa [ 0 ] > 0 ) { JOptionPane . showMessageDialog ( View . this , "Dodano" , "Dodano" , JOptionPane . INFORMATION_MESSAGE ) ; fireItemEvent ( new ItemsEvent ( 0 , "produkty" , "" , "" , name , id_category , id_company , "add" ) , "normal" ) ; System . out . println ( "dodaje" ) ; id_company = 0 ; id_category = 0 ; cmp [ 0 ] = 0 ; cmpa [ 0 ] = 0 ; } else { String ka = "" ; String cc = "" ; String nn = "" ; System . out . print ( cmp [ 0 ] ) ; if ( name . isEmpty ( ) ) { nn = "NAZWA" ; } if ( cmp [ 0 ] < 1 ) { ka = "KATEGORIA" ; } if ( cmpa [ 0 ] != 1 ) { cc = "FIRMA" ; } JOptionPane . showMessageDialog ( View . this , "Uzupenij pola: " + ka + " " + cc + " " + nn , "Uzupe\u0142nij pola" , JOptionPane . WARNING_MESSAGE ) ; } } } ) ; }
tr	IDF	@ Override public void mouseClicked ( MouseEvent e ) { if ( e . getClickCount ( ) == 2 ) { String name = liste . getSelectedValue ( ) . toString ( ) ; Topic topic = getPresenter ( ) . getModel ( ) . getTopic ( name ) ; getPresenter ( ) . openTopic ( topic ) ; } }
tr	IDF	public static String writeJsonToUserSpecifiedFile ( Component component , JSONObject json ) throws IOException , URISyntaxException { File choosedFile = null ; JFileChooser chooser = new JFileChooser ( ) ; int returnVal = chooser . showSaveDialog ( component ) ; if ( returnVal == JFileChooser . APPROVE_OPTION ) { choosedFile = chooser . getSelectedFile ( ) ; writeJsonToFile ( json , choosedFile . getPath ( ) ) ; return choosedFile . getPath ( ) ; } return null ; }
tr	KEY	public final PathIterator getPathIterator ( AffineTransform at ) { if ( at == null ) { return new CopyIterator ( this ) ; } else { return new TxIterator ( this , at ) ; } }
tr	IDF	private void button1ActionPerformed ( java . awt . event . ActionEvent evt ) { String userInput = jTextField2 . getText ( ) ; this . main . hideView ( Main . view . AlbumnSearch ) ; this . main . showView ( Main . view . AlbumnSearchResult ) ; }
tr	KEY	public int getId ( ) { return id ; }
tr	KEY	@ Override public boolean isQuery ( ) { return true ; }
tr	IDF	protected void emptyElementWithNumber ( int elementNumber ) { placedElements . remove ( elementNumber ) ; emptyElements . add ( elementNumber ) ; elements [ elementNumber ] = EMPTY_ELEMENT_VALUE ; Set < Integer > affectedElements = getRelatedElementNumbersForElementWithNumber ( elementNumber ) ; affectedElements . add ( elementNumber ) ; for ( Integer affectedElementNumber : affectedElements ) { validElementsCache . set ( affectedElementNumber , getValidValuesForElementWithNumber ( affectedElementNumber ) ) ; } }
tr	IDF	public Row copy ( ) { Row copy = new Row ( ) { @ Override public Map < String , ColumnDefinition > getColumnDefinitions ( ) { return Row . this . getColumnDefinitions ( ) ; } } ; copy . values . putAll ( values ) ; return copy ; }
tr	KEY	public int previousIndex ( ) { return nextIndex ( ) - 1 ; }
tr	IDF	@ SuppressWarnings ( { "rawtypes" , "unchecked" } ) public XbpadMouseUI ( ) { this . setPreferredSize ( new Dimension ( 450 , 220 ) ) ; XbpadButton xbpdbtnAssignMouse = new XbpadButton ( ) ; xbpdbtnAssignMouse . setBounds ( 10 , 24 , 117 , 25 ) ; xbpdbtnAssignMouse . setText ( "Assign mouse:" ) ; comboBox = new JComboBox ( ) ; comboBox . setModel ( new DefaultComboBoxModel ( new String [ ] { "Left Analog" , "Right Analog" } ) ) ; comboBox . setBounds ( 133 , 27 , 241 , 20 ) ; XbpadButton xbpdbtnSensivity = new XbpadButton ( ) ; xbpdbtnSensivity . setBounds ( 10 , 60 , 117 , 25 ) ; xbpdbtnSensivity . setText ( "Speed:" ) ; slider = new JSlider ( ) ; slider . setPaintLabels ( true ) ; slider . setMinorTickSpacing ( 1 ) ; slider . setPaintTicks ( true ) ; slider . setMajorTickSpacing ( 10 ) ; slider . setValue ( 10 ) ; slider . setMaximum ( 40 ) ; slider . setBounds ( 133 , 58 , 241 , 52 ) ; setLayout ( null ) ; add ( xbpdbtnAssignMouse ) ; add ( comboBox ) ; add ( xbpdbtnSensivity ) ; add ( slider ) ; XbpadButton xbpdbtnLatency = new XbpadButton ( ) ; xbpdbtnLatency . setText ( "Latency:" ) ; xbpdbtnLatency . setBounds ( 10 , 124 , 117 , 25 ) ; add ( xbpdbtnLatency ) ; slider_1 = new JSlider ( ) ; slider_1 . setSnapToTicks ( true ) ; slider_1 . setMinorTickSpacing ( 1 ) ; slider_1 . setValue ( 10 ) ; slider_1 . setPaintTicks ( true ) ; slider_1 . setPaintLabels ( true ) ; slider_1 . setMaximum ( 40 ) ; slider_1 . setMajorTickSpacing ( 10 ) ; slider_1 . setBounds ( 133 , 121 , 241 , 52 ) ; add ( slider_1 ) ; }
tr	KEY	public void onSendNoServerPort ( int packetId ) ;
tr	KEY	private boolean formatCheck ( ) { if ( _outFileT . getText ( ) . endsWith ( ".mp4" ) ) { return true ; } else { return false ; } }
tr	IDF	private void loginToFBjButtonActionPerformed ( java . awt . event . ActionEvent evt ) { firstFacebookConnection ( ) ; }
tr	KEY	public void close ( ) { cleanUp ( ) ; super . close ( ) ; }
tr	KEY	public double getValue ( ) { return value ; }
tr	IDF	public boolean intersects ( final double x , final double y ) { final double x1 = this . x - ( ( double ) width / 2 ) ; final double y1 = this . y - ( ( double ) height / 2 ) ; final double x2 = x1 + width ; final double y2 = y1 + height ; return ( x >= x1 ) && ( x <= x2 ) && ( y >= y1 ) && ( y <= y2 ) ; }
tr	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { buttonVoltar_MenuFasesActionPerformed ( evt ) ; }
tr	IDF	private void send ( final String string ) throws IOException { out . write ( ( string +  ) . getBytes ( UTF8 ) ) ; }
tr	IDF	public void renderScene ( vgame . VGame vg , VGraphics g ) { i . renderScene ( vg , g ) ; }
tr	IDF	private void readObject ( ObjectInputStream strm ) throws IOException , ClassNotFoundException { hash_code = Integer . MIN_VALUE ; strm . defaultReadObject ( ) ; int size = strm . readInt ( ) ; Object t = null ; for ( int i = 0 ; i < size ; ++ i ) t = with ( t , ( Elt ) strm . readObject ( ) ) ; try { TreeField . set ( this , t ) ; } catch ( IllegalAccessException ia ) { throw new RuntimeException ( "FTreeSet deserialization failed" , ia ) ; } }
tr	IDF	public static String jsonValue ( String value ) { return "\"" + value + "\"" ; }
tr	KEY	int makeTurn ( int enemyPoints ) { return 5 ; }
tr	IDF	public void setCity ( String value ) { this . city = value ; }
tr	IDF	public static List < Integer > findCommonElements ( List < Integer > list1 , List < Integer > list2 ) { List < Integer > result = new ArrayList < > ( ) ; int idx1 = 0 ; int idx2 = 0 ; while ( idx1 < list1 . size ( ) && idx2 < list2 . size ( ) ) { int val1 = list1 . get ( idx1 ) ; int val2 = list2 . get ( idx2 ) ; if ( val1 == val2 ) { idx1 ++ ; idx2 ++ ; result . add ( val1 ) ; } else { if ( val1 < val2 ) { idx1 ++ ; } else { idx2 ++ ; } } } return result ; }
tr	KEY	public boolean isCriticality ( ) { return criticality ; }
tr	IDF	@ ManyToMany ( fetch = FetchType . EAGER ) @ JoinTable ( name = "message_has_news" , joinColumns = @ JoinColumn ( name = "news_idnews" ) , inverseJoinColumns = @ JoinColumn ( name = "message_idmessage" ) ) public List < Message > getMessages ( ) { return messages ; }
tr	IDF	public InsattningUtagUI ( KalkylUI k , String klickadPost ) throws IOException , ClassNotFoundException { kalkyl = k ; setTitle ( "Registrera ins\u00E4ttning/utag" ) ; Container c = getContentPane ( ) ; c . setLayout ( null ) ; setSize ( 600 , 320 ) ; int x = leftColumnWidth ; int y = vertDist ; c . add ( insattningL ) ; insattningL . setBounds ( x , y , fieldWidth , fieldHeight ) ; y += vertDist + fieldHeight ; c . add ( utagL ) ; utagL . setBounds ( x , y , fieldWidth , fieldHeight ) ; y += vertDist + fieldHeight ; c . add ( benamningL ) ; benamningL . setBounds ( x , y , fieldWidth , fieldHeight ) ; y += vertDist + fieldHeight ; c . add ( beloppL ) ; beloppL . setBounds ( x , y , fieldWidth , fieldHeight ) ; y += vertDist + fieldHeight ; c . add ( adjustValueL ) ; adjustValueL . setBounds ( x , y , fieldWidth , fieldHeight ) ; y += vertDist + fieldHeight ; c . add ( datumL ) ; datumL . setBounds ( x , y , fieldWidth , fieldHeight ) ; y += vertDist + fieldHeight ; c . add ( kommentarL ) ; kommentarL . setBounds ( x , y , fieldWidth , fieldHeight ) ; y += vertDist + fieldHeight ; c . add ( meddelandeL ) ; meddelandeL . setBounds ( x , y , fieldWidth * 3 , fieldHeight ) ; y += vertDist + fieldHeight ; c . add ( avbrytB ) ; avbrytB . setBounds ( x , y , fieldWidth , fieldHeight ) ; avbrytB . addActionListener ( this ) ; x += fieldWidth + horDist ; c . add ( sparastangB ) ; sparastangB . setBounds ( x , y , fieldWidth , fieldHeight ) ; sparastangB . addActionListener ( this ) ; y = vertDist ; insUtagSel . add ( insattningR ) ; c . add ( insattningR ) ; insattningR . addActionListener ( this ) ; insattningR . setBounds ( x , y , fieldHeight , fieldHeight ) ; y += vertDist + fieldHeight ; insUtagSel . add ( utagR ) ; c . add ( utagR ) ; utagR . addActionListener ( this ) ; utagR . setBounds ( x , y , fieldHeight , fieldHeight ) ; y += vertDist + fieldHeight ; c . add ( benomningT ) ; benomningT . setBounds ( x , y , fieldWidth , fieldHeight ) ; benomningT . setText ( klickadPost ) ; y += vertDist + fieldHeight ; c . add ( beloppT ) ; beloppT . setBounds ( x , y , fieldWidth , fieldHeight ) ; y += vertDist + fieldHeight ; c . add ( adjustValueR ) ; adjustValueR . setBounds ( x , y , fieldHeight , fieldHeight ) ; y += vertDist + fieldHeight ; c . add ( datumT ) ; datumT . setBounds ( x , y , fieldWidth , fieldHeight ) ; y += vertDist + fieldHeight ; c . add ( kommentarT ) ; kommentarT . setBounds ( x , y , fieldWidth , fieldHeight ) ; setVisible ( true ) ; }
tr	KEY	public TBlock_LOpposite ( ) { super ( ) ; }
tr	KEY	public int getTicks ( ) { return ticks ; }
tr	KEY	public int getX ( ) { return x ; }
tr	IDF	public void setLastFailure ( Date value ) { lastfailure = value ; }
tr	KEY	public boolean isCellEditable ( int rowIndex , int columnIndex ) { return canEdit [ columnIndex ] ; }
tr	KEY	public double getPrecio_natural ( ) { return precio_natural ; }
tr	KEY	@ transient public Integer getMinBreak ( ) { return minBreak ; }
tr	KEY	public void setNodata ( boolean nodata ) { this . nodata = nodata ; }
tr	KEY	public abstract void closeConnections ( ) ;
tr	KEY	@ Override protected void bindSelf ( ) { this . messageManager . bind ( this ) ; this . connectionManager . bind ( this ) ; }
tr	KEY	TIPPTaskResponse ( ) { super ( ) ; }
tr	IDF	public boolean announceTurn ( int turn ) { boolean good = true ; for ( int i = 0 ; i < numPlayers ; ++ i ) { try { if ( ! sendString ( "7 " + turn , i ) ) { good = false ; } } catch ( Exception e ) { System . out . println ( "Someone isn't listening :" + i ) ; } } return good ; }
tr	KEY	private static boolean isSolaris ( ) { return ( OS . contains ( "sunos" ) ) ; }
tr	KEY	public InvalidNodeRepresentationException ( ) { }
tr	IDF	private MailQueue ( ) { logger = EmailServerStart . sendLog ; }
tr	IDF	@ SuppressWarnings ( "unchecked" ) private void initComponents ( ) { buttonFase = new javax . swing . JButton ( ) ; jLabel3 = new javax . swing . JLabel ( ) ; labelPontos = new javax . swing . JLabel ( ) ; labelId = new javax . swing . JLabel ( ) ; setBackground ( new java . awt . Color ( 32 , 30 , 30 ) ) ; setBorder ( javax . swing . BorderFactory . createLineBorder ( new java . awt . Color ( 204 , 204 , 204 ) ) ) ; buttonFase . setIcon ( new javax . swing . ImageIcon ( getClass ( ) . getResource ( "/app/images/cadeadoAberto.png" ) ) ) ; buttonFase . setContentAreaFilled ( false ) ; buttonFase . setCursor ( new java . awt . Cursor ( java . awt . Cursor . HAND_CURSOR ) ) ; buttonFase . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { buttonFaseActionPerformed ( evt ) ; } } ) ; jLabel3 . setFont ( new java . awt . Font ( "Verdana" , 1 , 12 ) ) ; jLabel3 . setForeground ( new java . awt . Color ( 255 , 255 , 255 ) ) ; jLabel3 . setText ( "SCORE: " ) ; labelPontos . setFont ( new java . awt . Font ( "Verdana" , 1 , 18 ) ) ; labelPontos . setForeground ( new java . awt . Color ( 255 , 255 , 0 ) ) ; labelPontos . setText ( "xxx" ) ; labelId . setFont ( new java . awt . Font ( "Verdana" , 1 , 18 ) ) ; labelId . setForeground ( new java . awt . Color ( 255 , 255 , 255 ) ) ; labelId . setHorizontalAlignment ( javax . swing . SwingConstants . CENTER ) ; labelId . setText ( "xx" ) ; javax . swing . GroupLayout layout = new javax . swing . GroupLayout ( this ) ; this . setLayout ( layout ) ; layout . setHorizontalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addGap ( 23 , 23 , 23 ) . addComponent ( jLabel3 ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . UNRELATED ) . addComponent ( labelPontos , javax . swing . GroupLayout . PREFERRED_SIZE , 47 , javax . swing . GroupLayout . PREFERRED_SIZE ) ) . addGroup ( layout . createSequentialGroup ( ) . addGap ( 47 , 47 , 47 ) . addComponent ( labelId , javax . swing . GroupLayout . PREFERRED_SIZE , 60 , javax . swing . GroupLayout . PREFERRED_SIZE ) ) . addGroup ( layout . createSequentialGroup ( ) . addGap ( 17 , 17 , 17 ) . addComponent ( buttonFase , javax . swing . GroupLayout . PREFERRED_SIZE , 121 , javax . swing . GroupLayout . PREFERRED_SIZE ) ) ) . addContainerGap ( 18 , short . MAX_VALUE ) ) ) ; layout . setVerticalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addGap ( 0 , 0 , 0 ) . addComponent ( buttonFase , javax . swing . GroupLayout . PREFERRED_SIZE , 121 , javax . swing . GroupLayout . PREFERRED_SIZE ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addComponent ( labelId , javax . swing . GroupLayout . PREFERRED_SIZE , 18 , javax . swing . GroupLayout . PREFERRED_SIZE ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE ) . addComponent ( jLabel3 ) . addComponent ( labelPontos ) ) . addContainerGap ( javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) ) ) ; }
tr	KEY	private static int getCost ( String mechanism ) { if ( mechanism . contains ( "alternative_service" ) ) { return 1101 ; } else if ( mechanism . contains ( "client_checking" ) ) { return 1202 ; } else if ( mechanism . contains ( "separation_of_duty" ) ) { return 2103 ; } else if ( mechanism . contains ( "certification_authority" ) ) { return 1204 ; } else if ( mechanism . contains ( "supervision_relation" ) ) { return 2105 ; } else if ( mechanism . contains ( "control" ) && mechanism . contains ( "access" ) ) { return 1406 ; } else if ( mechanism . contains ( "auditing" ) ) { return 1507 ; } else if ( mechanism . contains ( "input_guard" ) ) { return 6008 ; } else if ( mechanism . contains ( "firewall" ) ) { return 4009 ; } else if ( mechanism . contains ( "server_sandbox" ) ) { return 2100 ; } else if ( mechanism . contains ( "replicated_system" ) ) { return 1201 ; } else if ( mechanism . contains ( "load_balancer" ) ) { return 3002 ; } else if ( mechanism . contains ( "limited_view" ) ) { return 2003 ; } else if ( mechanism . contains ( "full_view_with_errors" ) ) { return 2104 ; } else if ( mechanism . contains ( "secure_access_layer" ) ) { return 1205 ; } else if ( mechanism . contains ( "secure_pipe" ) ) { return 3006 ; } else if ( mechanism . contains ( "storage_encryption" ) ) { return 2007 ; } else if ( mechanism . contains ( "equipment_siting_and_protection" ) ) { return 3008 ; } else if ( mechanism . contains ( "supporting_utility" ) ) { return 2009 ; } else if ( mechanism . contains ( "physical_entry_control" ) ) { return 2100 ; } else if ( mechanism . contains ( "cabling_security" ) ) { return 1201 ; } return 0 ; }
tr	KEY	public float getElevation ( ) { return elevation ; }
tr	KEY	public char [ ] getPIN3 ( ) { return pin3 . getPassword ( ) ; }
tr	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { txtNombreActionPerformed ( evt ) ; }
tr	KEY	int getRowNum ( ) ;
tr	KEY	public void reset ( ) { started = false ; closed = false ; sb = new StringBuilder ( ) ; }
tr	KEY	public int getFieldCount ( ) { return nFieldCount ; }
tr	KEY	public static User getLoggedInUser ( ) { return loggedInUser ; }
tr	KEY	@ Override public int getScoreValue ( ) { return this . base * this . multi ; }
tr	IDF	public void stop ( ) { logger . debug ( ">> ServerManager stopping connections" ) ; factory . releaseExternalResources ( ) ; }
tr	KEY	public void setCanPro_Fac ( int CanPro_Fac ) { this . CanPro_Fac = CanPro_Fac ; }
tr	KEY	public void unload ( ) { }
tr	IDF	public void setType ( String type ) { this . type = type ; }
tr	KEY	public String getAlbum ( ) { return this . Album ; }
tr	IDF	@ Override protected void onAction ( HashMap < String , String > params ) { Platform . runLater ( new Runnable ( ) { @ Override public void run ( ) { guiController . printError ( "Connection to server failed. Please try again." ) ; guiController . askServer ( ) ; } } ) ; }
tr	IDF	public void assignL5KeyCode ( XbpadButton button , String text , int keycode ) { container . xgetCurrentPreset ( ) . xassignL5KeyCode ( keycode ) ; button . setText ( text ) ; button . repaint ( ) ; }
tr	KEY	public int getSqNum_Height ( ) { return this . numSquareCell_Height ; }
tr	IDF	public String ObtenerImagen ( String Ruta , String Nombre ) { try { Mp3File mp3file = null ; mp3file = new Mp3File ( Ruta ) ; if ( mp3file != null && mp3file . hasId3v2Tag ( ) ) { ID3v2 id3v2Tag = mp3file . getId3v2Tag ( ) ; byte [ ] imageData = id3v2Tag . getAlbumImage ( ) ; BufferedImage img = ImageIO . read ( new ByteArrayInputStream ( imageData ) ) ; File miDir = new File ( "." ) ; try { Ruta = miDir . getCanonicalPath ( ) ; } catch ( IOException e ) { } Ruta = Ruta + "/" + Nombre + ".GIF" ; ImageIO . write ( img , "gif" , new File ( Ruta ) ) ; } } catch ( NullPointerException e ) { } catch ( IOException | UnsupportedTagException | InvalidDataException ex ) { Logger . getLogger ( Extraer_imgen_allbum . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; } return Ruta ; }
tr	KEY	public void setVal_Servicio ( double Val_Servicio ) { this . Val_Servicio = Val_Servicio ; }
tr	KEY	public void open ( ) ;
tr	IDF	public static int reverseInt ( int num ) { if ( num < 10 ) return num ; int reverse = 0 ; do { reverse = ( reverse * 10 ) + ( num % 10 ) ; num = num / 10 ; } while ( num > 0 ) ; return reverse ; }
tr	IDF	@ Test public void testSetIntersection ( ) { List < Set < Integer >> l = new ArrayList < Set < Integer >> ( ) ; l . add ( new HashSet < Integer > ( Arrays . asList ( 1 , 5 , 3 , 4 ) ) ) ; l . add ( new HashSet < Integer > ( Arrays . asList ( 2 , 6 , 5 , 9 ) ) ) ; l . add ( new HashSet < Integer > ( Arrays . asList ( 0 , 1 , - 3 , 5 ) ) ) ; Set < Integer > inter = getIntersection ( l ) ; for ( int i : inter ) { System . out . println ( i ) ; } }
tr	KEY	private void redraw ( ) { }
tr	IDF	public MessageManager ( IPacketManager packetManager , IConnectionManager connectionManager , IncomingMessageParser < ServerProtocolParameters > incomingMessageParser , int majorVersion , int minorVersion ) { super ( MessageListener . class ) ; this . packetManager = packetManager ; this . connectionManager = connectionManager ; this . incomingMessageParser = incomingMessageParser ; this . majorVersion = majorVersion ; this . minorVersion = minorVersion ; }
tr	KEY	public int getNumberOfMeasures ( ) { return measures . size ( ) ; }
tr	IDF	public void toggleKey ( int key , boolean isPressed ) { keys [ key ] = isPressed ; }
tr	IDF	@ Override public void modelPropertyChange ( PropertyChangeEvent evt ) { for ( int i = 0 ; i < days . length ; i ++ ) { for ( int j = 0 ; j < days [ i ] . length ; j ++ ) { days [ i ] [ j ] = controller . getModel ( ) . getDayButton ( i , j ) ; } } }
tr	KEY	public EstruturaTabela ( ) { }
tr	IDF	public void init ( ) { w = gm . getWorld ( ) ; tm = gm . getTileMap ( ) ; }
tr	IDF	public void update ( float alpha ) { for ( Iterator it = sounds . iterator ( ) ; it . hasNext ( ) ; ) { Sound sound = ( Sound ) it . next ( ) ; sound . update ( soundListener , alpha ) ; if ( ! sound . isLive ( ) ) { it . remove ( ) ; } } }
tr	IDF	public void endTime ( ) { if ( timeStopped == false ) { timeStopped = true ; timeEnd = 2982 - levelScene . timeLeft ; totalTime += timeEnd - timeStart ; completionTime = timeEnd - timeStart ; detailedLog += "Totaltime = " + completionTime ; detailedLog += "\n" ; } }
tr	KEY	public synchronized boolean isD4repetitionEnabled ( ) { return isD4repeatable ; }
tr	KEY	public void set ( int col , int row , double value ) ;
tr	KEY	protected void initialize ( ) { }
tr	IDF	public Subject getSubject ( SubjectID subject ) { return this . subjects . get ( subject ) ; }
tr	KEY	public boolean getError ( ) { return ! ( error == null ) ; }
tr	KEY	public ChoixModeView ( ) { super ( ) ; this . controleur = new ChoixModeController ( this ) ; }
tr	IDF	public String getText ( String key ) { try { return bundle . getString ( key ) ; } catch ( Exception e ) { return key ; } }
tr	IDF	private void miChangeProfileActionPerformed ( ActionEvent e ) { Object [ ] profileNames = Manager . getInstance ( ) . getProfileNames ( ) . toArray ( ) ; String selectedProfile = ( String ) JOptionPane . showInputDialog ( this , "Select a player." , "Profile Select" , JOptionPane . QUESTION_MESSAGE , null , profileNames , profileNames [ 0 ] ) ; if ( selectedProfile == null ) { return ; } Manager . getInstance ( ) . setCurrentProfile ( selectedProfile ) ; updateProfile ( ) ; }
tr	KEY	protected abstract void onDartMissed ( ) ;
tr	IDF	protected abstract void notifyDeviceListenersSetXXXVector ( INDIDevice device , Element xml ) ;
tr	IDF	@ Override public void update ( Observable o , Object arg ) { if ( arg . equals ( ObservableList . Event . ADD ) ) { List < String > l = ( List ) o ; shift ( l . get ( l . size ( ) - 1 ) ) ; } }
tr	IDF	void openFrame ( ) { frameSizes . push ( new Frame ( ) ) ; }
tr	KEY	public int getPort ( ) { return port ; }
tr	IDF	public static void main ( String [ ] args ) { Connection conn = null ; Statement stmt = null ; try { class . forName ( "com.mysql.jdbc.Driver" ) ; conn = DriverManager . getConnection ( DB_URL , USER , PASS ) ; stmt = conn . createStatement ( ) ; String sql ; sql = "SELECT * FROM Transport" ; ResultSet rs = stmt . executeQuery ( sql ) ; while ( rs . next ( ) ) { int id = rs . getInt ( "ID" ) ; System . out . print ( "ID: " + id ) ; } rs . close ( ) ; stmt . close ( ) ; conn . close ( ) ; } catch ( SQLException se ) { se . printStackTrace ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } finally { try { if ( stmt != null ) stmt . close ( ) ; } catch ( SQLException se2 ) { } try { if ( conn != null ) conn . close ( ) ; } catch ( SQLException se ) { se . printStackTrace ( ) ; } } }
tr	KEY	public static Map getLevelsMap ( ) { return levels ; }
tr	KEY	public Building getCopy ( ) { return new EndBuilding ( this . start , this . lenght , this . floor ) ; }
tr	IDF	public Vector2D pursuit ( Sprite target ) { Vector2D toTarget = target . getPosition ( ) . minus ( parent . getPosition ( ) ) ; double relativeHeading = parent . heading . dotProduct ( target . heading ) ; if ( ( toTarget . dotProduct ( parent . heading ) > 0 ) && ( relativeHeading < - 0.95 ) ) { return seek ( target . position ) ; } else { double lookAheadTime = toTarget . length ( ) / ( parent . getMaxSpeed ( ) + target . getMaxSpeed ( ) ) ; return seek ( target . velocity . scalarMult ( lookAheadTime ) . + ( target . position ) ) ; } }
tr	KEY	public void setPreis ( double preis ) { this . preis = preis ; }
tr	KEY	public long getTimestamp ( ) ;
tr	KEY	public void setImageNumber ( int imageNumber ) { this . imageNumber = imageNumber ; }
tr	KEY	public int getCol ( ) { return col ; }
tr	IDF	public boolean checkUserExist ( String user ) { if ( CheckUtil . isEmailAddress ( user ) ) { user = StringUtil . getEmailName ( user ) ; } for ( int i = 0 ; i < userList . size ( ) ; i ++ ) { if ( userList . get ( i ) . getUserName ( ) . equals ( user ) ) { return true ; } } return false ; }
tr	KEY	void performJob ( ) ;
tr	IDF	private void nbBtnMouseReleased ( java . awt . event . MouseEvent evt ) { String player1NameString = player1Name . getText ( ) ; if ( ! ( player1NameString . isEmpty ( ) ) ) { MainApplication . ticTacToePlay = new TicTacToePlay ( GameType . WithAnotherPersonInNetwork ) ; MainApplication . ticTacToePlay . setPlayerOne ( player1NameString ) ; IfNetworkBased ifNetworkBased = new IfNetworkBased ( ) ; JFrame mainFrame = TicTacToeUIApp . getApplication ( ) . getMainFrame ( ) ; ifNetworkBased . setLocationRelativeTo ( mainFrame ) ; this . dispose ( ) ; TicTacToeUIApp . getApplication ( ) . show ( ifNetworkBased ) ; ifNetworkBased . setSize ( 300 , 280 ) ; } }
tr	KEY	public boolean getEmployed ( ) { return employed ; }
tr	IDF	public PlayerNames ( ) { initComponents ( ) ; Dimension screenSize = Toolkit . getDefaultToolkit ( ) . getScreenSize ( ) ; this . setLocation ( ( screenSize . width / 2 ) - ( this . getWidth ( ) / 2 ) , ( screenSize . height / 2 ) - ( this . getHeight ( ) / 2 ) ) ; }
tr	IDF	public static void main ( final String [ ] args ) { LoadQuestions . load ( args [ 0 ] ) ; }
tr	KEY	public void selectionScreen ( ) { if ( Greenfoot . isKeyDown ( "left" ) ) { selection = true ; } else if ( Greenfoot . isKeyDown ( "right" ) ) { selection = false ; } }
tr	IDF	private void clearSelection ( ButtonGroup bg ) { Enumeration < AbstractButton > e = bg . getElements ( ) ; while ( e . hasMoreElements ( ) ) { e . nextElement ( ) . setSelected ( false ) ; } bg . clearSelection ( ) ; }
tr	KEY	@ Override public void call ( ) { }
tr	KEY	public void setIterationsNeeded ( int iterationsNeeded ) { this . iterationsNeeded = iterationsNeeded ; }
tr	IDF	public void doPut ( HttpServletRequest req , HttpServletResponse resp ) throws IOException { this . __doPut ( req , resp ) ; }
tr	IDF	public static void saveXmlFile ( String fileLocation , Document doc ) throws IOException , TransformerException { File file = new File ( fileLocation ) ; if ( ! file . exists ( ) ) { file . createNewFile ( ) ; } FileWriter fw = new FileWriter ( file . getAbsoluteFile ( ) ) ; BufferedWriter bw = new BufferedWriter ( fw ) ; bw . write ( Utilities . stringify ( doc ) ) ; bw . close ( ) ; }
tr	IDF	public double approximateAngle ( ) { double xDiff = _start . x - _end . x ; double yDiff = _start . y - _end . y ; if ( xDiff == 0 ) return Math . PI / 2 ; else { if ( Math . atan ( yDiff / xDiff ) < 0 ) return Math . atan ( yDiff / xDiff ) + Math . PI ; else return Math . atan ( yDiff / xDiff ) ; } }
tr	IDF	public void dieRecord ( Sprite sprite ) { if ( sprite instanceof FlowerEnemy ) { detailedLog += "Die:  EnemyType = FlowerEnemy " ; detailedLog += "\n" ; deaths [ SpriteTemplate . JUMP_FLOWER ] ++ ; } else if ( sprite instanceof BulletBill ) { detailedLog += "Die:  EnemyType = BulletBill " ; detailedLog += "\n" ; deaths [ 5 ] ++ ; } else if ( sprite instanceof Shell ) { detailedLog += "Die:  EnemyType = TurtleShell " ; detailedLog += "\n" ; deaths [ 9 ] ++ ; } else if ( sprite instanceof Enemy ) { Enemy enemy = ( Enemy ) sprite ; deaths [ enemy . type ] ++ ; detailedLog += "Die:  EnemyType = " + enemy . type ; detailedLog += "\n" ; } }
tr	IDF	public Msg [ ] findByRecipient ( String recipient ) throws MsgDaoException ;
tr	IDF	public static CFG readCFG ( File cfg ) { CFG r = new CFG ( ) ; try { Scanner s = new Scanner ( cfg ) ; while ( s . hasNextLine ( ) ) { String c = s . nextLine ( ) ; if ( c . contains ( ":" ) ) { String c2 [ ] = c . split ( ":" ) ; for ( int i = 2 ; i < c2 . length ; i ++ ) { c2 [ 1 ] = c2 [ 1 ] + ":" + c2 [ i ] ; } r . s ( c2 [ 0 ] . replace ( " " , "" ) , ( c2 [ 1 ] . replace ( " " , "" ) ) ) ; } } } catch ( FileNotFoundException ex ) { Logger . getLogger ( VFileReader . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; } return r ; }
tr	IDF	private int basicSelect ( Connection conn ) { System . out . println ( "############# basicSelect ##########" ) ; QueryUtil qu = qm . createQueryUtil ( "basicSelect" ) ; int result = 0 ; try { qu . setConnection ( conn ) ; qu . executeQuery ( ) ; if ( qu . next ( ) ) result = qu . getInt ( 1 ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } finally { qu . closeJust ( ) ; } System . out . println ( "result=" + result ) ; return result ; }
tr	IDF	public static void main ( String [ ] args ) { ProfileManager pm = ProfileManager . getInstance ( ) ; ProfilePresenterImpl ps = new ProfilePresenterImpl ( ) ; ProfileViewImpl pv = new ProfileViewImpl ( ) ; ps . setModel ( pm . getProfile ( ) ) ; ps . setView ( pv ) ; ps . run ( ) ; }
tr	KEY	public void rotateX ( double radians ) ;
tr	KEY	public void printDescription ( ) { return ; }
tr	IDF	public static void setLabel ( String label ) { MergeTRJTree . label = label ; }
tr	KEY	public JSONArray put ( int index , long value ) throws JSONException { this . put ( index , new long ( value ) ) ; return this ; }
tr	KEY	public static boolean estConnecte ( ) { return ( socket != null && socket . isConnected ( ) ) ; }
tr	KEY	public void setFullWidth ( int width ) { this . width = width ; }
tr	IDF	public void setCard ( Card card ) { this . card = card ; }
tr	IDF	public List < Customer > list ( ) { return daoCustomer . list ( ) ; }
tr	IDF	public void updateDisplay ( ) { try { device . setDisplayMode ( getDisplayMode ( getWindowState ( ) ) ) ; } catch ( Exception ex ) { } ; }
tr	IDF	public String intercept ( ActionInvocation invocation ) throws Exception { ActionContext ctx = invocation . getInvocationContext ( ) ; Map < String , Object > session = ctx . getSession ( ) ; User user = ( User ) session . get ( OtherConstants . CURRENT_USER ) ; if ( user != null ) { logger . info ( "The user pass UserInterceptor." ) ; return invocation . invoke ( ) ; } HttpServletRequest request = ( HttpServletRequest ) ctx . get ( StrutsStatics . HTTP_REQUEST ) ; HttpServletResponse response = ( HttpServletResponse ) ctx . get ( StrutsStatics . HTTP_RESPONSE ) ; String isAjaxRequest = request . getHeader ( "x-requested-with" ) ; if ( "XMLHttpRequest" . equals ( isAjaxRequest ) ) { response . setContentType ( "text/text" ) ; response . setCharacterEncoding ( "UTF-8" ) ; response . getOutputStream ( ) . print ( "Session Timeout." ) ; response . getOutputStream ( ) . close ( ) ; logger . info ( "The AJAX has been interceptor by UserInterceptor !" ) ; return null ; } logger . info ( "The user has been interceptor by UserInterceptor !" ) ; return Action . LOGIN ; }
tr	IDF	private BeanstreamApiException getMappedException ( int statusCode ) { return BeanstreamApiException . getMappedException ( statusCode ) ; }
tr	KEY	int colId ( ) ;
tr	IDF	@ Override public double get ( int i ) { double d = vec . get ( i ) ; return d == null ? 0. : d . doubleValue ( ) ; }
tr	KEY	public int getPercentage ( ) { return _percent ; }
tr	IDF	public SortedMap < Key , Val > subMap ( Key fromKey , Key toKey ) { if ( tree == null ) return this ; else { Object fk = firstKey ( ) , lk = lastKey ( ) ; if ( compare ( fromKey , toKey ) >= 0 || compare ( fk , toKey ) >= 0 || compare ( lk , fromKey ) < 0 ) return new FTreeMap < Key , Val > ( null , dflt , comp ) ; else if ( compare ( fk , fromKey ) >= 0 && compare ( lk , toKey ) < 0 ) return this ; else { Object t = split ( tree , fromKey , toKey ) ; Entry ent = findEquiv ( tree , fromKey ) ; if ( ent != null ) t = with ( t , ent . key , ent . value ) ; return new FTreeMap < Key , Val > ( t , dflt , comp ) ; } } }
tr	IDF	EnumClass ( String s ) { this . name = s ; }
tr	KEY	public int nextActionID ( ) { return ++ actionIDCounter ; }
tr	KEY	public int getId_Descuento ( ) { return Id_Descuento ; }
tr	IDF	public IdentificadorJaDeclaradoException ( String msg ) { super ( msg ) ; }
tr	IDF	public void setJcbTimerEnabled ( JCheckBox jcbTimerEnabled ) { this . jcbTimerEnabled = jcbTimerEnabled ; }
tr	KEY	public void setWidth ( long value ) { this . width = value ; }
tr	KEY	protected void end ( ) { }
tr	IDF	@ Override public void Nuevo ( ) throws SQLException { ObProducto . setProductoBodega ( null ) ; ObProducto . setId_Producto ( 0 ) ; ObProducto . setId_Bodega ( null ) ; ObProducto . setId_Proveedor ( null ) ; ObProducto . setId_Descuento ( null ) ; ObProducto . setNom_Producto ( null ) ; ObProducto . setDes_Producto ( null ) ; ObProducto . setEst_Producto ( null ) ; ObProducto . setStock_Producto ( null ) ; ObProducto . setPVP_Producto ( 0 ) ; ObProducto . setMar_Producto ( null ) ; ObProducto . setTam_Producto ( null ) ; }
tr	IDF	public String [ ] getArray ( ) { return ( String [ ] ) this . items . toArray ( ) ; }
tr	KEY	public int getTileH ( ) { return this . tileH ; }
tr	IDF	public void testNull ( ) { System . out . println ( "\nStarting testNull: task functions" ) ; assertNotNull ( tasksAccess ) ; try { tasksAccess . addTask ( null ) ; fail ( "Illegal Argument Exception expected!" ) ; } catch ( IllegalArgumentException iae ) { } try { tasksAccess . editTask ( null ) ; fail ( "Illegal Argument Exception expected!" ) ; } catch ( IllegalArgumentException iae ) { } System . out . println ( "Finished testNull: task functions" ) ; }
tr	KEY	public EditMode getEditMode ( ) { return this . editMode ; }
tr	IDF	public FeatureVector createLabelFeatures ( DependencyInstance inst , DependencyArcList arcLis , int [ ] heads , int mod , int type ) { FeatureVector fv = new FeatureVector ( numLabeledArcFeats ) ; if ( ! options . learnLabel ) return fv ; type = type + 1 ; int head = heads [ mod ] ; fv . addEntries ( createLabeledArcFeatures ( inst , head , mod , type + 1 ) ) ; return fv ; }
tr	KEY	public void setId_Empleado ( int Id_Empleado ) { this . Id_Empleado = Id_Empleado ; }
tr	IDF	public int [ ] [ ] extractBoard ( ) { int [ ] [ ] board = new int [ 9 ] [ 9 ] ; for ( SudokuPart constraint : stack ) { board [ constraint . getRow ( ) ] [ constraint . getCol ( ) ] = constraint . getVal ( ) ; } return board ; }
tr	KEY	public void setY ( double y ) { this . Y = y ; }
tr	KEY	public void setEstadoTarea ( int estadoTarea ) { this . estadoTarea = estadoTarea ; }
tr	KEY	public Object getSlot ( int i ) { throw new UnsupportedOperationException ( "Not supported yet." ) ; }
tr	IDF	public void testIntegers ( ) { System . out . println ( "\nStarting TestIntegers" ) ; assertTrue ( iComparer . compare ( 4 , 7 ) > 0 ) ; assertEquals ( iComparer . compare ( 4 , 7 ) , 3 ) ; assertTrue ( iComparer . compare ( 10 , 7 ) < 0 ) ; assertTrue ( iComparer . compare ( - 1000 , 5 ) > 0 ) ; assertEquals ( iComparer . compare ( - 1000 , 5 ) , 1005 ) ; assertTrue ( iComparer . compare ( 5 , - 1000 ) < 0 ) ; assertEquals ( iComparer . compare ( 0 , - 1 ) , - 1 ) ; assertEquals ( iComparer . compare ( - 1 , 0 ) , 1 ) ; assertEquals ( iComparer . compare ( 0 , 0 ) , 0 ) ; assertTrue ( iComparer . compare ( 55 , 100 ) > 0 ) ; assertTrue ( iComparer . compare ( 595 , 54 ) < 0 ) ; assertTrue ( iComparer . compare ( 35 , 46 ) > 0 ) ; assertTrue ( iComparer . compare ( 25 , 15 ) < 0 ) ; iComparer = new IntegerComparer ( true ) ; assertTrue ( iComparer . compare ( 2 , 3 ) < 0 ) ; assertEquals ( iComparer . compare ( 1 , 2 ) , - 1 ) ; assertTrue ( iComparer . compare ( 7 , 1 ) > 0 ) ; assertEquals ( iComparer . compare ( - 1 , - 1 ) , 0 ) ; assertTrue ( iComparer . compare ( - 5 , - 7 ) > 0 ) ; assertTrue ( iComparer . compare ( - 1000 , 5 ) < 0 ) ; assertEquals ( iComparer . compare ( ( 0 - 5 ) , 0 ) , - 5 ) ; assertEquals ( iComparer . compare ( 0 , - 6 ) , 6 ) ; assertEquals ( iComparer . compare ( 0 , 0 ) , 0 ) ; assertTrue ( iComparer . compare ( 55 , 100 ) < 0 ) ; assertTrue ( iComparer . compare ( 595 , 54 ) > 0 ) ; assertTrue ( iComparer . compare ( 35 , 46 ) < 0 ) ; assertTrue ( iComparer . compare ( 25 , 15 ) > 0 ) ; iComparer = new IntegerComparer ( false ) ; assertTrue ( iComparer . compare ( Integer . MAX_VALUE , 0 ) < 0 ) ; assertTrue ( iComparer . compare ( 0 , Integer . MAX_VALUE ) > 0 ) ; assertEquals ( iComparer . compare ( Integer . MAX_VALUE , Integer . MAX_VALUE ) , 0 ) ; assertTrue ( iComparer . compare ( Integer . MIN_VALUE , Integer . MAX_VALUE ) < 0 ) ; assertTrue ( iComparer . compare ( Integer . MAX_VALUE , Integer . MIN_VALUE ) > 0 ) ; assertEquals ( iComparer . compare ( - 1 , Integer . MAX_VALUE ) , Integer . MIN_VALUE ) ; iComparer = new IntegerComparer ( true ) ; assertTrue ( iComparer . compare ( Integer . MAX_VALUE , 0 ) > 0 ) ; assertTrue ( iComparer . compare ( 0 , Integer . MAX_VALUE ) < 0 ) ; assertEquals ( iComparer . compare ( Integer . MAX_VALUE , Integer . MAX_VALUE ) , 0 ) ; assertTrue ( iComparer . compare ( Integer . MIN_VALUE , Integer . MAX_VALUE ) > 0 ) ; assertTrue ( iComparer . compare ( Integer . MAX_VALUE , Integer . MIN_VALUE ) < 0 ) ; assertEquals ( iComparer . compare ( - 1 , Integer . MIN_VALUE ) , Integer . MAX_VALUE ) ; System . out . println ( "\nFinished TestIntegers" ) ; }
tr	IDF	private static void createAndShowGUI ( ) { GameFrame frame = new GameFrame ( WIDTH , HEIGHT ) ; @ SuppressWarnings ( "unused" ) GameController controller = new GameController ( frame ) ; frame . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ) ; frame . setVisible ( true ) ; }
tr	IDF	@ Override public void error ( SAXParseException arg0 ) throws SAXException { StringBuilder builder = new StringBuilder ( ) ; builder . append ( "  Validation error" ) ; int line = arg0 . getLineNumber ( ) ; int col = arg0 . getColumnNumber ( ) ; if ( line != - 1 && col != - 1 ) { builder . append ( " [Line: " ) ; builder . append ( line ) ; builder . append ( "  Col: " ) ; builder . append ( col ) ; builder . append ( "]" ) ; } builder . append ( ":" ) ; builder . append ( arg0 . getMessage ( ) ) ; logger . error ( builder . toString ( ) ) ; }
tr	IDF	private void jBListarActionPerformed ( java . awt . event . ActionEvent evt ) { listar ( ) ; }
tr	IDF	public InviteRes findByPrimaryKey ( InviteResPk pk ) throws InviteResDaoException ;
tr	IDF	public TrackSelector ( Song s ) { currentSong = s ; }
tr	IDF	public static Instant asInstant ( TemporalAccessor temporal ) { if ( temporal instanceof Instant ) { return ( Instant ) temporal ; } try { long instantSecs = temporal . getLong ( INSTANT_SECONDS ) ; if ( temporal . isSupported ( OFFSET_SECONDS ) ) { instantSecs = instantSecs - temporal . getLong ( OFFSET_SECONDS ) ; } int nanoOfSecond = temporal . get ( NANO_OF_SECOND ) ; return Instant . ofEpochSecond ( instantSecs , nanoOfSecond ) ; } catch ( DateTimeException ex ) { throw new DateTimeException ( "Unable to obtain Instant from TemporalAccessor: " + temporal + " of type " + temporal . getClass ( ) . getName ( ) , ex ) ; } }
tr	KEY	public synchronized void tap ( ) { press ( ) ; release ( ) ; }
tr	KEY	public boolean isCellEditable ( int row , int col ) { return true ; }
tr	KEY	public int getState ( ) { return state ; }
tr	IDF	@ Test public void invalidCardCreateProfile ( ) { Address billing = getTestBillingAddress ( ) ; Card card = getTestCard ( ) ; ProfileResponse createdProfile = null ; try { Card nillCard = null ; createdProfile = beanstream . profiles ( ) . createProfile ( nillCard , billing ) ; assert . fail ( "Fail test because the card was empty" ) ; } catch ( BeanstreamApiException ex ) { assert . assertTrue ( "" , ex . getHttpStatusCode ( ) == 400 ) ; } try { card . setName ( null ) ; createdProfile = beanstream . profiles ( ) . createProfile ( card , billing ) ; assert . fail ( "Fail test because the card name was empty" ) ; } catch ( BeanstreamApiException ex ) { assert . assertTrue ( "" , ex . getHttpStatusCode ( ) == 400 ) ; } try { card . setName ( "Jhon Garcia" ) ; card . setNumber ( "" ) ; createdProfile = beanstream . profiles ( ) . createProfile ( card , billing ) ; assert . fail ( "Fail test because the card number was empty" ) ; } catch ( BeanstreamApiException ex ) { assert . assertTrue ( "" , ex . getHttpStatusCode ( ) == 400 ) ; } try { card . setNumber ( "5100000010001004" ) ; card . setExpiryYear ( "" ) ; createdProfile = beanstream . profiles ( ) . createProfile ( card , billing ) ; assert . fail ( "Fail test because the card expiry year was empty" ) ; } catch ( BeanstreamApiException ex ) { assert . assertTrue ( "" , ex . getHttpStatusCode ( ) == 400 ) ; } try { card . setExpiryYear ( "2018" ) ; card . setExpiryMonth ( null ) ; createdProfile = beanstream . profiles ( ) . createProfile ( card , billing ) ; assert . fail ( "Fail test because the card expiry month was empty" ) ; } catch ( BeanstreamApiException ex ) { assert . assertTrue ( "" , ex . getHttpStatusCode ( ) == 400 ) ; } }
tr	KEY	public int read ( ) throws IOException { return bufferedReader . read ( ) ; }
tr	IDF	public void testShortUrlGenerationWithMRUCache ( ) { MRUHashtable < String , String > mruCache = new MRUHashtable < String , String > ( 1000 ) ; ShortUrl min = ShortUrl . getMinShortUrl ( ) ; ShortUrlGenerator . instance ( ) . initialize ( min ) ; try { for ( int i = 0 ; i < 10000 ; ++ i ) { String key = "Key" + i ; String s = ShortUrlGenerator . instance ( ) . getNextShortUrl ( ) . getUrlString ( ) ; System . out . println ( "\nGenerated " + i + " short url:" + s ) ; mruCache . put ( key , s ) ; } } catch ( ShortUrlGeneratorNotInitialized e ) { System . out . println ( e . getMessage ( ) ) ; } catch ( ShortUrlGenerationFailed e ) { System . out . println ( e . getMessage ( ) ) ; } }
tr	KEY	public synchronized void xassignLBKeyCode ( int code ) { lb = code ; }
tr	IDF	public CommandPanel ( ) { initialize ( ) ; ms = new ModelSet ( ) ; }
tr	KEY	private static long getFirstPrime ( ) { return primes [ 0 ] ; }
tr	IDF	public String nextCDATA ( ) throws JSONException { char c ; int i ; StringBuffer sb = new StringBuffer ( ) ; for ( ; ; ) { c = next ( ) ; if ( c == 0 ) { throw syntaxError ( "Unclosed CDATA" ) ; } sb . append ( c ) ; i = sb . length ( ) - 3 ; if ( i >= 0 && sb . charAt ( i ) == ] && sb . charAt ( i + 1 ) == ] && sb . charAt ( i + 2 ) == > ) { sb . setLength ( i ) ; return sb . toString ( ) ; } } }
tr	IDF	public void rename ( Tarea tarea ) throws SQLException { mySQLDB = new MYSQLDB ( ) ; String sql = "update tarea set descripciontarea='" + tarea . getDescripcionTarea ( ) + "' where idtarea= " + tarea . getIdTarea ( ) ; mySQLDB . execute ( sql ) ; mySQLDB . closeExecute ( ) ; }
tr	KEY	public void setCount ( long value ) { this . count = value ; }
tr	IDF	private Bond ( Builder b ) { this . years = b . years ; this . id = b . id ; }
tr	IDF	private static int computePermutations ( int [ ] indexes , int offset , int n ) { if ( offset == n ) { return 0 ; } int count = 0 ; int num = factorial ( ( n - offset - 1 ) ) ; int off = 0 ; for ( int i = 0 ; i < num ; i ++ ) { count ++ ; np ++ ; if ( offset == n - 1 ) { swap ( indexes , off , 0 ) ; off = 0 ; } else { swap ( indexes , off , off + 1 ) ; } off ++ ; System . out . println ( "# " + np + "; permutation = " + Arrays . toString ( indexes ) ) ; } count += computePermutations ( indexes , offset + 1 , n ) ; return count ; }
tr	KEY	public int getCartID ( ) { return cartID ; }
tr	IDF	public static Date toUtilDateFromSqlDate ( java . sql . Date p_sqlDate ) { java . util . Date returnDate = null ; if ( p_sqlDate != null ) { returnDate = new java . util . Date ( p_sqlDate . getTime ( ) ) ; } return returnDate ; }
tr	KEY	public static void main ( String [ ] args ) { }
tr	IDF	public static String encodeFromFile ( String filename ) throws java . io . IOException { String encodedData = null ; Base64 . InputStream bis = null ; try { java . io . File file = new java . io . File ( filename ) ; byte [ ] buffer = new byte [ Math . max ( ( int ) ( file . length ( ) * 1.4 + 1 ) , 40 ) ] ; int length = 0 ; int numBytes = 0 ; bis = new Base64 . InputStream ( new java . io . BufferedInputStream ( new java . io . FileInputStream ( file ) ) , Base64 . ENCODE ) ; while ( ( numBytes = bis . read ( buffer , length , 4096 ) ) >= 0 ) { length += numBytes ; } encodedData = new String ( buffer , 0 , length , Base64 . PREFERRED_ENCODING ) ; } catch ( java . io . IOException e ) { throw e ; } finally { try { bis . close ( ) ; } catch ( Exception e ) { } } return encodedData ; }
tr	IDF	public Report ( FileAsciiWriter bw ) { this . bw = bw ; }
tr	IDF	public ReceiveThread ( Connection connection ) { this . connection = connection ; }
tr	IDF	public Rectangle2D getWorldClip ( ) { AffineTransform T = getInverseWorldTransform ( ) ; Point2D pt1 = T . transform ( new Point2D . double ( 0 , 0 ) , null ) ; Point2D pt2 = T . transform ( new Point2D . double ( screenSize . width , screenSize . height ) , null ) ; return new Rectangle2D . double ( pt1 . getX ( ) , pt1 . getY ( ) , pt2 . getX ( ) - pt1 . getX ( ) , pt2 . getY ( ) - pt1 . getY ( ) ) ; }
tr	IDF	@ Test public void podeAtacar ( ) throws CasaOcupadaException { assert . assertFalse ( peaoBranco . podeAtacar ( new Posicao ( 6 , 5 ) , new Posicao ( 6 , 6 ) , tabuleiro ) ) ; assert . assertFalse ( peaoBranco . podeAtacar ( new Posicao ( 8 , 6 ) , new Posicao ( 8 , 7 ) , tabuleiro ) ) ; assert . assertFalse ( peaoBranco . podeAtacar ( new Posicao ( 5 , 1 ) , new Posicao ( 5 , 2 ) , tabuleiro ) ) ; assert . assertTrue ( peaoBranco . podeAtacar ( new Posicao ( 5 , 5 ) , new Posicao ( 6 , 6 ) , tabuleiro ) ) ; assert . assertTrue ( peaoBranco . podeAtacar ( new Posicao ( 6 , 1 ) , new Posicao ( 5 , 2 ) , tabuleiro ) ) ; assert . assertTrue ( peaoBranco . podeAtacar ( new Posicao ( 4 , 1 ) , new Posicao ( 5 , 2 ) , tabuleiro ) ) ; assert . assertTrue ( peaoBranco . podeAtacar ( new Posicao ( 7 , 6 ) , new Posicao ( 8 , 7 ) , tabuleiro ) ) ; assert . assertFalse ( peaoBranco . podeAtacar ( new Posicao ( 6 , 4 ) , new Posicao ( 6 , 5 ) , tabuleiro ) ) ; assert . assertFalse ( peaoBranco . podeAtacar ( new Posicao ( 7 , 3 ) , new Posicao ( 8 , 4 ) , tabuleiro ) ) ; assert . assertFalse ( peaoBranco . podeAtacar ( new Posicao ( 3 , 2 ) , new Posicao ( 3 , 3 ) , tabuleiro ) ) ; assert . assertFalse ( peaoBranco . podeAtacar ( new Posicao ( 2 , 2 ) , new Posicao ( 3 , 3 ) , tabuleiro ) ) ; }
tr	IDF	public Player getPlayer ( ) { return player . clone ( ) ; }
tr	KEY	public int getCount ( ) { return this . countInsert ; }
tr	KEY	public int getOWidth ( ) { return outer . width ; }
tr	IDF	public void dbReadItem ( Connection aconn , String agroup , String atest ) { try { testgroupid = agroup ; testid = atest ; String qstr = "Select TestTitle TestDesc TestNotes BugReqID CaseSource " + "LastName FirstName AgeYrs AgeMos AgeWks AgeDays BirthDate AgeEntryMethod GenderCd CreateBy CreationDate ModDate BaseDate TestResult ResultNotes" + " From TestCaseTbl" + " Where TestGroupId='" + agroup + "' and TestId='" + atest + "'" ; Statement qstmt = aconn . createStatement ( ) ; ResultSet rset = qstmt . executeQuery ( qstr ) ; if ( rset . next ( ) ) { testtitle = rset . getString ( 1 ) ; testdesc = rset . getString ( 2 ) ; testnote = rset . getString ( 3 ) ; testreqid = rset . getString ( 4 ) == null ? "" : rset . getString ( 4 ) ; casesource = rset . getString ( 5 ) == null ? "" : rset . getString ( 5 ) ; lastname = rset . getString ( 6 ) ; firstname = rset . getString ( 7 ) ; ageyears = rset . getInt ( 8 ) ; agemonths = rset . getInt ( 9 ) ; ageweeks = rset . getInt ( 10 ) ; agedays = rset . getInt ( 11 ) ; birthdate = rset . getDate ( 12 ) ; agemethod = rset . getString ( 13 ) == null ? "" : rset . getString ( 13 ) ; gendercd = rset . getString ( 14 ) ; createby = rset . getString ( 15 ) ; createdate = rset . getDate ( 16 ) ; moddate = rset . getDate ( 17 ) ; basedate = rset . getDate ( 18 ) ; testresult = rset . getString ( 19 ) ; resultnotes = rset . getString ( 20 ) ; } rset . close ( ) ; qstmt . close ( ) ; } catch ( Exception ex ) { CLogError . logError ( CAppConsts . ErrorFile , false , "CTestItem.dbReadItem cannot read item. " , ex ) ; } }
tr	IDF	private void finaliza ( ) { ConnectionManager . desconecta ( ) ; System . exit ( 0 ) ; }
tr	IDF	public Friendsh [ ] findWhereIdFriendshEquals ( Integer idFriendsh ) throws FriendshDaoException ;
tr	KEY	public int getY ( ) { return tailleChoisieY ; }
tr	KEY	public boolean getButtonStateShoulderLeft ( ) { return getRawButton ( BUTTON_SHOULDER_LEFT ) ; }
tr	KEY	public int getWidth ( ) { return this . width ; }
tr	KEY	public void setDepth ( double depth ) ;
tr	KEY	void provideRemainingScore ( ) ;
tr	KEY	public String [ ] getColumnNames ( ) { return this . columnNames ; }
tr	IDF	public static void main ( String [ ] args ) { final int [ ] coins = new int [ ] { 1 , 2 , 5 , 10 , 20 , 50 , 100 , 200 } ; final int [ ] limits = new int [ coins . length ] ; for ( int i = 0 ; i < limits . length ; i ++ ) { limits [ i ] = target / coins [ i ] ; } final int [ ] counts = new int [ coins . length ] ; loop ( coins , limits , counts , 0 ) ; System . out . println ( "# count = " + count ) ; }
tr	IDF	public double trainIteration ( ) { double change = 0.0 ; for ( Node node : graph . getVertices ( ) ) { DataPoint datapoint = node . getDataPoint ( ) ; int closestCenter = assignCluster ( node ) ; clustersMap . put ( datapoint , closestCenter ) ; } change = calculateCenters ( ) ; return change ; }
tr	IDF	private void jButton2ActionPerformed ( java . awt . event . ActionEvent evt ) { copiaInicio . setEnabled ( true ) ; dispose ( ) ; copiaInicio . setEnabled ( true ) ; }
tr	IDF	@ WebResult ( name = "return" , targetNamespace = "" ) @ RequestWrapper ( localName = "checkBalance" , targetNamespace = "http://api.soap.mytxtbuddy.com/" , className = "com.dreamoval.mytxtbuddy.api.proxy.CheckBalance" ) @ WebMethod @ ResponseWrapper ( localName = "checkBalanceResponse" , targetNamespace = "http://api.soap.mytxtbuddy.com/" , className = "com.dreamoval.mytxtbuddy.api.proxy.CheckBalanceResponse" ) public java . lang . String checkBalance ( @ WebParam ( name = "username" , targetNamespace = "" ) java . lang . String username , @ WebParam ( name = "password" , targetNamespace = "" ) java . lang . String password ) ;
tr	IDF	private void applyDefaultTCPSettings ( ) { tcpProperties . setProperty ( "SPVM" , "localhost 9094" ) ; tcpProperties . setProperty ( "SPB" , "localhost 9095" ) ; tcpProperties . setProperty ( "SPL" , "localhost 9096" ) ; try { tcpProperties . store ( new FileOutputStream ( "./tcp.properties" ) , null ) ; log . debug ( this . stationType . getStationCode ( ) + ":Default config properites initialized" ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }
tr	IDF	public void addContextFeature ( long code , FeatureVector fv ) { int id = contextAlphabet . lookupIndex ( code , numContextFeats ) ; if ( id >= 0 ) { fv . addEntry ( id , 1.0 ) ; if ( id == numContextFeats ) ++ numContextFeats ; } }
tr	IDF	void exitExiba ( @ NotNull EnquantoParser . ExibaContext ctx ) ;
tr	KEY	public BookSeries ( ) { }
tr	IDF	public void mouse2PupdateObject ( String objname , Vector3d deltapos , Vector3d deltarot ) { _cuniv . p2cUpdateObject ( objname , deltapos , deltarot ) ; }
tr	KEY	public String getGeneration ( ) { return this . generation ; }
tr	KEY	public void setScore ( int [ ] score ) { this . score = score ; }
tr	IDF	@ Override public void add ( int index , E element ) { l . add ( index , element ) ; setChanged ( ) ; notifyObservers ( Event . ADD ) ; }
tr	KEY	public int getPageSize ( ) { return pageSize ; }
tr	KEY	private FPSManager ( ) { }
tr	IDF	private static List < Integer > getCategories ( Connection conn , int id ) throws SQLException { String sql = "SELECT category_id FROM product_categories where product_id = ?" ; try ( PreparedStatement pstmt = conn . prepareStatement ( sql ) ) { pstmt . setInt ( 1 , id ) ; try ( ResultSet rs = pstmt . executeQuery ( ) ) { List < Integer > categoryIds = new ArrayList < Integer > ( ) ; while ( rs . next ( ) ) { int categoryId = rs . getInt ( "category_id" ) ; categoryIds . add ( categoryId ) ; } return categoryIds ; } } }
tr	IDF	@ SuppressWarnings ( "unused" ) public void fileMethod ( ) { File file = new File ( "E:/Test.java" ) ; boolean exists = file . exists ( ) ; boolean isFile = file . isFile ( ) ; boolean isDirectory = file . isDirectory ( ) ; long length = file . length ( ) ; String name = file . getName ( ) ; String path = file . getPath ( ) ; String absolutePath = file . getAbsolutePath ( ) ; }
tr	IDF	@ Override public int hashCode ( ) { return Integer . parseInt ( Integer . toString ( x ) + Integer . toString ( y ) ) ; }
tr	IDF	public static void main ( String [ ] args ) { String pathinput = "C:/Users/lin/Desktop/myemotion/trainData4000-weight.fenci.xml" ; String pathstopword = "C:/Users/lin/Desktop/emotionExp/stopword1208.txt" ; String pathoutput = "C:/Users/lin/Desktop/myemotion/bigram.data" ; File file = new File ( pathinput ) ; File filestopwords = new File ( pathstopword ) ; BufferedReader reader = null ; BufferedReader readerstop = null ; try { Pattern pat = Pattern . compile ( "(<sentence .*>)(.*)(</sentence>)" ) ; String tempString = null ; Map < String , String > stopwords = new HashMap < String , String > ( ) ; readerstop = new BufferedReader ( new FileReader ( filestopwords ) ) ; while ( ( tempString = readerstop . readLine ( ) ) != null ) { System . out . println ( tempString ) ; stopwords . put ( tempString , "" ) ; } OutputStreamWriter writer = new OutputStreamWriter ( new FileOutputStream ( pathoutput ) , "UTF-8" ) ; Map < String , Integer > unigramwords = new HashMap < String , Integer > ( ) ; reader = new BufferedReader ( new FileReader ( file ) ) ; while ( ( tempString = reader . readLine ( ) ) != null ) { Matcher matcher = pat . matcher ( tempString ) ; String text = "" ; if ( matcher . find ( ) ) { text = matcher . group ( 2 ) ; String wordlist [ ] = text . split ( " " ) ; for ( int i = 0 ; i < wordlist . length - 1 ; i ++ ) { String temp [ ] = wordlist [ i ] . split ( "/" ) ; String temp2 [ ] = wordlist [ i + 1 ] . split ( "/" ) ; if ( temp . length == 2 && temp2 . length == 2 ) { String name = temp [ 0 ] ; String pos = temp [ 1 ] ; String name2 = temp2 [ 0 ] ; String pos2 = temp2 [ 1 ] ; if ( true ) { if ( ! unigramwords . containsKey ( name + name2 ) ) { unigramwords . put ( name + name2 , 1 ) ; } else { unigramwords . put ( name + name2 , unigramwords . get ( name + name2 ) + 1 ) ; } } } } } } unigramwords = sortByValue ( unigramwords , true ) ; Set < Map . Entry < String , Integer >> set = unigramwords . entrySet ( ) ; for ( Iterator < Map . Entry < String , Integer >> it = set . iterator ( ) ; it . hasNext ( ) ; ) { Map . Entry < String , Integer > entry = it . next ( ) ; String key = entry . getKey ( ) ; if ( key . contains ( "\u3002" ) || key . contains ( "\u3002" ) || key . contains ( "\uFF0C" ) || key . contains ( "\uFF1F" ) || key . contains ( "\u2018" ) || key . contains ( " " ) || key . contains ( "\uFF01" ) || key . contains ( "\u201C" ) || key . contains ( "\uFF09" ) || key . contains ( "\uFF08" ) || key . contains ( "\uFF09" ) || key . contains ( "\u2026" ) || key . contains ( "\uFF1B" ) || key . contains ( ";" ) || key . contains ( "&" ) || key . contains ( "\u201D" ) || key . contains ( "\uFF1A" ) || key . contains ( "\u2014\u2014" ) || key . contains ( "\u3001" ) || key . contains ( "\u300A" ) || key . contains ( "`" ) || key . contains ( "-" ) || key . contains ( "`" ) || key . contains ( "*" ) || key . contains ( "." ) ) { } else { if ( entry . getValue ( ) > 1 && ! stopwords . containsKey ( entry . getKey ( ) ) ) { System . out . println ( entry . getKey ( ) + "--->" + entry . getValue ( ) ) ; writer . write ( entry . getKey ( ) + "\r\n" ) ; } } } System . out . println ( unigramwords . size ( ) ) ; reader . close ( ) ; writer . flush ( ) ; writer . close ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } finally { if ( reader != null ) { try { reader . close ( ) ; } catch ( IOException e1 ) { } } } }
tr	KEY	@ Override public boolean equals ( Object obj ) { if ( this == obj ) return true ; if ( obj == null ) return false ; if ( getClass ( ) != obj . getClass ( ) ) return false ; CharacterLocations other = ( CharacterLocations ) obj ; if ( charsLocations == null ) { if ( other . charsLocations != null ) return false ; } else if ( ! charsLocations . equals ( other . charsLocations ) ) return false ; if ( positions == null ) { if ( other . positions != null ) return false ; } else if ( ! positions . equals ( other . positions ) ) return false ; return true ; }
tr	IDF	private boolean listensToParticularProperty ( String deviceName , String propertyName ) { for ( int i = 0 ; i < propertiesToListen . size ( ) ; i ++ ) { if ( propertiesToListen . get ( i ) . isProperty ( deviceName , propertyName ) ) { return true ; } } return false ; }
tr	IDF	@ Override public double normMaximum ( ) { double max = 0. ; for ( int i = 0 ; i < v . length ; ++ i ) { double d = v [ i ] < 0. ? - v [ i ] : v [ i ] ; if ( d > max ) max = d ; } return max ; }
tr	IDF	public boolean setPhysicalPosition ( int pos ) { allowPositionSet ( ) ; mainBoard . markPosition ( pos , buttons [ pos ] , false ) ; return true ; }
tr	KEY	public float getOrderTotle ( ) { return orderTotle ; }
tr	IDF	public CharacterLocations ( WorldMap map ) { super ( ) ; this . map = map ; }
tr	IDF	public void setPageView ( Integer pageView ) { this . pageView = pageView ; }
tr	KEY	public void setSsl ( boolean value ) { this . ssl = value ; }
tr	IDF	public void warn ( String msg ) { ++ countWarn ; this . fileInfo . warn ( msg ) ; }
tr	KEY	public synchronized void xsetS2RepeatDelay ( int a ) { s2RD = a ; }
tr	KEY	public static String getOutpath ( ) { return outpath ; }
tr	IDF	public ClientActionRobot ( String ... ip ) { String _ip = "localhost" ; if ( ip . length > 0 ) { _ip = ip [ 0 ] ; } try { requestSocket = new Socket ( _ip , 2004 ) ; requestSocket . setReceiveBufferSize ( 100000 ) ; System . out . println ( "Connected to " + _ip + " in port 2004" ) ; out = requestSocket . getOutputStream ( ) ; out . flush ( ) ; in = requestSocket . getInputStream ( ) ; } catch ( UnknownHostException unknownHost ) { System . err . println ( "You are trying to connect to an unknown host!" ) ; } catch ( IOException ioException ) { ioException . printStackTrace ( ) ; } }
tr	KEY	public abstract void reset ( ) ;
tr	KEY	@ Override public int getSelection ( ) { return 0 ; }
tr	IDF	public final void actionPerformed ( final ActionEvent e ) { if ( "Answer Questions" . equals ( e . getActionCommand ( ) ) ) { _mainWindowFrame . setVisible ( false ) ; @ SuppressWarnings ( "unused" ) final Frame qf = new Frame ( _mainWindowFrame ) ; } else if ( "View Results" . equals ( e . getActionCommand ( ) ) ) { System . out . println ( "Not implemented yet" ) ; } else if ( "Modify Questions" . equals ( e . getActionCommand ( ) ) ) { System . out . println ( "Not implemented yet" ) ; } else if ( "Create Questions" . equals ( e . getActionCommand ( ) ) ) { _mainWindowFrame . setVisible ( false ) ; @ SuppressWarnings ( "unused" ) final CreateQuestionsFrame cqf = new CreateQuestionsFrame ( _mainWindowFrame ) ; } }
tr	IDF	public static void removeOutliers ( ) { double trim = ngramlist . size ( ) * 0.20 ; System . out . print ( "********************trim**** " + trim ) ; for ( int top = 0 ; top < trim ; top ++ ) { ngramlist . remove ( ngramlist . get ( top ) ) ; ngramlist . remove ( ngramlist . get ( ngramlist . size ( ) - 1 - top ) ) ; } }
tr	IDF	protected void init ( Point pos , Dimension size ) { this . pos = pos ; this . size = size ; margin = 1 ; borderWidth = 1 ; bgCol = new Color ( 0 , 200 , 255 , 127 ) ; borderCol = new Color ( 255 , 255 , 255 , 127 ) ; mouseOverBorderCol = new Color ( 0 , 200 , 255 , 192 ) ; mouseOverBgCol = new Color ( 255 , 255 , 255 , 192 ) ; mouseOver = false ; refresh ( ) ; }
tr	IDF	public static INDIOneElementNumberProperty createSaveableOneElementNumberProperty ( INDIDriver driver , String name , String label , String group , PropertyStates state , PropertyPermissions permission , String minimum , String maximum , String step , String format , String value ) throws IllegalArgumentException { INDIOneElementNumberProperty np = loadOneElementNumberProperty ( driver , name ) ; if ( np == null ) { np = new INDIOneElementNumberProperty ( driver , name , label , group , state , permission , minimum , maximum , step , format , value ) ; np . setSaveable ( true ) ; } return np ; }
tr	IDF	public GameBoard ( ) { initComponents ( ) ; setVisible ( true ) ; gamecontrol = new GameControl ( this ) ; gamecontrol . setVisible ( true ) ; int width = this . getWidth ( ) + gamecontrol . getWidth ( ) ; Dimension screenSize = Toolkit . getDefaultToolkit ( ) . getScreenSize ( ) ; this . setLocation ( ( screenSize . width / 2 ) - ( width / 2 ) , ( screenSize . height / 2 ) - ( this . getHeight ( ) / 2 ) ) ; updatePosition ( ) ; easteregg = new EasterEggSound ( ) ; addKeyListener ( new KeyListener ( ) { private boolean aDown = false ; private boolean sDown = false ; private boolean dDown = false ; private boolean fDown = false ; @ Override public void keyTyped ( KeyEvent e ) { } @ Override public void keyPressed ( KeyEvent e ) { int keycode = e . getKeyCode ( ) ; if ( ( keycode == KeyEvent . VK_A ) || ( keycode == KeyEvent . VK_S ) || ( keycode == KeyEvent . VK_D ) || ( keycode == KeyEvent . VK_F ) ) { if ( keycode == KeyEvent . VK_A ) { aDown = true ; } else if ( keycode == KeyEvent . VK_S ) { sDown = true ; } else if ( keycode == KeyEvent . VK_D ) { dDown = true ; } else if ( keycode == KeyEvent . VK_F ) { fDown = true ; } if ( aDown && sDown && dDown && fDown ) { mapBoard1 . whackKeyDown = true ; easteregg . startSound ( ) ; } } } @ Override public void keyReleased ( KeyEvent e ) { int keycode = e . getKeyCode ( ) ; if ( ( keycode == KeyEvent . VK_A ) || ( keycode == KeyEvent . VK_S ) || ( keycode == KeyEvent . VK_D ) || ( keycode == KeyEvent . VK_F ) ) { aDown = sDown = dDown = fDown = false ; mapBoard1 . whackKeyDown = false ; easteregg . stopSound ( ) ; } if ( keycode == KeyEvent . VK_F5 ) { Game . generateColor ( ) ; refreshGameControl ( ) ; } } } ) ; Timer timer = new Timer ( ) ; timer . schedule ( new TimerTask ( ) { private JFrame frame ; public TimerTask getVars ( JFrame frm ) { frame = frm ; return this ; } public String generateName ( ) { char [ ] sequence = new char [ 25 ] ; for ( int i = 0 ; i < sequence . length ; i ++ ) { int r = ( new int [ ] { 65 , 97 } ) [ new Random ( ) . nextInt ( 1 ) ] ; sequence [ i ] = ( char ) ( r + new Random ( ) . nextInt ( 25 ) ) ; } return String . valueOf ( sequence ) ; } @ Override public void run ( ) { mapBoard1 . updateUI ( ) ; updatePosition ( ) ; if ( mapBoard1 . whackKeyDown ) { frame . setTitle ( generateName ( ) ) ; } else if ( frame . getTitle ( ) != "Matador" ) { frame . setTitle ( "Matador" ) ; } } } . getVars ( this ) , 100 , 10 ) ; JButton throwDiceBtn = new JButton ( ) ; throwDiceBtn . setText ( "Kast terningerne" ) ; throwDiceBtn . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { Game . GA_ThrowDice ( ) ; } } ) ; JButton mortgageBtn = new JButton ( ) ; mortgageBtn . setText ( "Pants\u00E6t" ) ; mortgageBtn . addActionListener ( new ActionListener ( ) { private Frame frame ; public ActionListener getVars ( Frame frm ) { frame = frm ; return this ; } @ Override public void actionPerformed ( ActionEvent e ) { MortgageDialog mortgageDialog = new MortgageDialog ( frame , true , Game . currentPlayer ) ; } } . getVars ( this ) ) ; JButton nextPlayerBtn = new JButton ( ) ; nextPlayerBtn . setText ( "N\u00E6ste spiller" ) ; nextPlayerBtn . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { Game . nextPlayer ( ) ; clearGameControl ( ) ; } } ) ; JButton jailThrowDiceBtn = new JButton ( ) ; jailThrowDiceBtn . setText ( "Kast terningerne for 2 ens" ) ; jailThrowDiceBtn . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { Game . GA_JailThrowDice ( ) ; if ( Game . players . get ( Game . currentPlayer ) . InPrison ) { if ( Game . JailDiceTries < 3 ) { showJailPayBailBtn = false ; } else { if ( Game . players . get ( Game . currentPlayer ) . PrisonTurns > 1 ) { showJailThrowDiceBtn = false ; showJailPayBailBtn = true ; showNextPlayerBtn = false ; } else { Game . JailDiceTries = 0 ; Game . players . get ( Game . currentPlayer ) . PrisonTurns ++ ; showJailThrowDiceBtn = false ; showJailPayBailBtn = false ; showNextPlayerBtn = true ; } } refreshGameControl ( ) ; } else { } } } ) ; JButton jailPayBailBtn = new JButton ( ) ; jailPayBailBtn . setText ( "Betal kaution (1000 kr.)" ) ; jailPayBailBtn . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { System . out . println ( "Button (jail) pay bail clicked" ) ; Game . players . get ( Game . currentPlayer ) . ChangeMoney ( - 1000 ) ; Game . players . get ( Game . currentPlayer ) . InPrison = false ; Game . players . get ( Game . currentPlayer ) . PrisonTurns = 0 ; if ( Game . JailDiceTries == 0 ) { showThrowDiceBtn = false ; showJailThrowDiceBtn = false ; showNextPlayerBtn = true ; showJailPayBailBtn = false ; } else { showThrowDiceBtn = false ; showMortgageBtn = false ; showJailThrowDiceBtn = false ; showNextPlayerBtn = true ; showJailPayBailBtn = false ; Game . players . get ( Game . currentPlayer ) . ChangePosition ( Game . dices [ 0 ] . number + Game . dices [ 1 ] . number ) ; } refreshGameControl ( ) ; } } ) ; JButton jailFreeCardBtn = new JButton ( ) ; jailFreeCardBtn . setText ( "Brug f\u00E6ngselsfripas" ) ; jailFreeCardBtn . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { System . out . println ( "Button jail freepass clicked" ) ; Game . players . get ( Game . currentPlayer ) . GetOutCard -- ; Game . players . get ( Game . currentPlayer ) . InPrison = false ; Game . players . get ( Game . currentPlayer ) . PrisonTurns = 0 ; refreshGameControl ( ) ; } } ) ; choices . add ( throwDiceBtn ) ; choices . add ( mortgageBtn ) ; choices . add ( nextPlayerBtn ) ; choices . add ( jailThrowDiceBtn ) ; choices . add ( jailPayBailBtn ) ; choices . add ( jailFreeCardBtn ) ; }
tr	KEY	public Point getReleasePoint ( ) { if ( releasePoints . size ( ) == 0 ) { return null ; } else { return releasePoints . remove ( 0 ) ; } }
tr	KEY	public static SimpleResultSetMapper getInstance ( ) { return instance ; }
tr	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButton4ActionPerformed ( evt ) ; }
tr	IDF	public void deposerObjet ( Salle s ) { s . setObjet ( this . objet ) ; s . getPanel ( ) . validate ( ) ; s . getPanel ( ) . repaint ( ) ; InterfaceEditeur . tab [ s . GetX ( ) ] [ s . GetY ( ) ] = s ; definirObjet ( "empty" ) ; s . getPerso ( ) . setObjetdansSac ( index , "empty" ) ; }
tr	KEY	public ObjectFactory ( ) { }
tr	IDF	@ Override public void processNewNumberValue ( INDINumberProperty property , Date timestamp , INDINumberElementAndValue [ ] elementsAndValues ) { if ( property == absFocusPositionP ) { int newVal = elementsAndValues [ 0 ] . getValue ( ) . intValue ( ) ; if ( ( newVal >= getMinimumAbsPos ( ) ) && ( newVal <= getMaximumAbsPos ( ) ) ) { if ( focusAbsolutePositionE . getValue ( ) . intValue ( ) != newVal ) { absFocusPositionP . setState ( PropertyStates . BUSY ) ; desiredAbsPosition = newVal ; try { updateProperty ( absFocusPositionP ) ; } catch ( INDIException e ) { } absolutePositionHasBeenChanged ( ) ; } else { absFocusPositionP . setState ( PropertyStates . OK ) ; try { updateProperty ( absFocusPositionP ) ; } catch ( INDIException e ) { } } } } if ( property == focusSpeedP ) { int newVal = elementsAndValues [ 0 ] . getValue ( ) . intValue ( ) ; if ( ( newVal >= 0 ) && ( newVal <= getMaximumSpeed ( ) ) ) { if ( focusSpeedValueE . getValue ( ) . intValue ( ) != newVal ) { focusSpeedP . setState ( PropertyStates . BUSY ) ; focusSpeedValueE . setValue ( "" + newVal ) ; try { updateProperty ( focusSpeedP ) ; } catch ( INDIException e ) { } speedHasBeenChanged ( ) ; } else { focusSpeedP . setState ( PropertyStates . OK ) ; try { updateProperty ( focusSpeedP ) ; } catch ( INDIException e ) { } } } } }
tr	KEY	public AbstractFractalEvaluator ( ) { this ( "FRACTAL Display" ) ; }
tr	KEY	public static float random ( final float min , final float max ) { float dist = max - min ; return ( float ) ( Math . random ( ) * dist + min ) ; }
tr	KEY	public int getPlayerY_Axis ( ) { return ( int ) ( player . y / 50 ) + 2 ; }
tr	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButton4ActionPerformed ( evt ) ; }
tr	IDF	public void setFields ( ) { if ( ! _documentCheckBox . isSelected ( ) ) { _documentTextField . setText ( "" ) ; } if ( ! _categoryCheckBox . isSelected ( ) ) { _categoryTextField . setText ( "" ) ; } if ( ! _subcategoryCheckBox . isSelected ( ) ) { _subcategoryTextField . setText ( "" ) ; } if ( ! _chapterCheckBox . isSelected ( ) ) { _chapterTextField . setText ( "" ) ; } if ( ! _sectionCheckBox . isSelected ( ) ) { _sectionTextField . setText ( "" ) ; } if ( ! _pageCheckBox . isSelected ( ) ) { _pageTextField . setText ( "" ) ; } }
tr	IDF	public ArrayWorld ( ArrayWorld prev ) { super ( prev ) ; cells = new boolean [ getHeight ( ) ] [ getWidth ( ) ] ; }
tr	KEY	public OptionsView ( ) { super ( ) ; this . controleur = new OptionsController ( this ) ; }
tr	KEY	public int getFollowerCurrentSegment ( ) { return followerLeft . getCurrentSegment ( ) ; }
tr	IDF	public void update ( UserSession src ) { this . id = src . id ; this . ssid = src . ssid ; this . status = src . status ; this . username = src . username ; this . stopWatch = src . stopWatch ; }
tr	KEY	public boolean isActive ( ) { return this . active ; }
tr	IDF	public void revealMap ( boolean reveal ) { for ( int i = 0 ; i < map . getWidth ( ) ; i ++ ) { for ( int j = 0 ; j < map . getHeight ( ) ; j ++ ) { map . getTile ( i , j ) . setDiscovered ( reveal ) ; map . getTile ( i , j ) . setVisible ( reveal ) ; messenger . updateTile ( i , j ) ; } } }
tr	KEY	public void pauseGame ( ) { sendMessage ( "pauseGame" ) ; }
tr	IDF	@ Override public void runTest ( ) { char [ ] input = "#######*" . toCharArray ( ) ; char [ ] res = findSameSubArray ( input ) ; System . out . println ( new String ( res ) ) ; }
tr	KEY	public BorrowController ( ) { }
tr	KEY	protected void kill ( ) { if ( isDead ( ) ) return ; nbLives -- ; }
tr	KEY	public double getEps2 ( ) { return eps2 ; }
tr	IDF	@ EFAttribute public String getString ( ) { return m_String ; }
tr	IDF	@ Test public void test_removeUser ( ) throws Exception { User newUser = new User ( - 1 , "Jim" , "321 Test Road" , "Columbus" , "OH" , "43230" , "6148881234" ) ; int userId = uDAO . createUser ( newUser ) ; User testUser = uDAO . getUserByUserID ( userId ) ; assertTrue ( "NAME did not match" , testUser . getName ( ) . equalsIgnoreCase ( "Jim" ) ) ; assertTrue ( "ADDRESS did not match" , testUser . getAddress ( ) . equalsIgnoreCase ( "321 Test Road" ) ) ; assertTrue ( "CITY did not match" , testUser . getCity ( ) . equalsIgnoreCase ( "Columbus" ) ) ; assertTrue ( "STATE did not match" , testUser . getState ( ) . equalsIgnoreCase ( "OH" ) ) ; assertTrue ( "ZIP did not match" , testUser . getZip ( ) . equalsIgnoreCase ( "43230" ) ) ; assertTrue ( "PHONE did not match" , testUser . getPhone ( ) . equalsIgnoreCase ( "6148881234" ) ) ; uDAO . removeUser ( testUser ) ; testUser = uDAO . getUserByUserID ( userId ) ; assertNull ( "expected no record to be returned (null)" , testUser ) ; }
tr	IDF	public String toString ( ) { return "|?" + _artistID + "|?" + _albumID ; }
tr	IDF	private static boolean isPanDigital ( int number ) { final StringBuilder sb = new StringBuilder ( ) ; sb . append ( number ) ; if ( sb . length ( ) != 9 ) { return false ; } final int num = Integer . parseInt ( sb . toString ( ) ) ; if ( num < min || num > max ) { return false ; } final int [ ] dst = new int [ 10 ] ; for ( int n = 0 ; n < sb . length ( ) ; n ++ ) { final String s = sb . substring ( n , n + 1 ) ; final int m = Integer . parseInt ( s ) ; dst [ m ] ++ ; if ( dst [ m ] > 1 ) { return false ; } } return true ; }
tr	IDF	public static INDISwitchProperty createSaveableSwitchProperty ( INDIDriver driver , String name , String label , String group , PropertyStates state , PropertyPermissions permission , int timeout , SwitchRules rule ) throws IllegalArgumentException { INDISwitchProperty sp = loadSwitchProperty ( driver , name ) ; if ( sp == null ) { sp = new INDISwitchProperty ( driver , name , label , group , state , permission , timeout , rule ) ; sp . setSaveable ( true ) ; } return sp ; }
tr	IDF	public int build ( int start , int length , int floor , MyLevel level ) { if ( firstTime ) { int [ ] parameters = { MyLevel . random . nextInt ( 1 ) , MyLevel . random . nextInt ( 3 ) } ; copyParamaters ( parameters ) ; } for ( int x = start ; x < start + length ; x ++ ) { for ( int y = 0 ; y < level . height ; y ++ ) { if ( y >= floor ) { level . setBlock ( x , y , MyLevel . GROUND ) ; } } } if ( this . isSafe ) return length ; if ( this . hasEnemies ) level . addEnemyLine ( start + 1 , start + length - 1 , floor - 1 ) ; if ( this . hasDecoration ) level . decorate ( start , start + length , floor ) ; return length ; }
tr	KEY	public double getTotalInterestPaid ( ) { return totalInterestPaid ; }
tr	KEY	public Issue ( ) { }
tr	KEY	@ Override public boolean setSpeedOff ( ) { setFanSpeed ( 0 ) ; return true ; }
tr	KEY	public int getTopY ( ) { int mostTopY = ( int ) this . getBlkCoordinate ( ) . getY ( ) ; return mostTopY ; }
tr	KEY	@ Override public int hashCode ( ) { int hash = 3 ; return hash ; }
tr	KEY	public int getMaxRows ( ) { return maxRows ; }
tr	IDF	Thing makeThing ( ) ;
tr	KEY	private void playerChecks ( ) { this . playerDecision = PokerPlayerDecision . Call ; this . setVisible ( false ) ; }
tr	KEY	public int calculateXAfterLeftMove ( int moveStep ) { return ( this . getLeftX ( ) - moveStep ) ; }
tr	IDF	@ Override protected void notifyDeviceListenersDefXXXVector ( INDIDevice device , Element xml ) { String deviceName = xml . getAttribute ( "device" ) . trim ( ) ; String propertyName = xml . getAttribute ( "name" ) . trim ( ) ; ArrayList < INDIDeviceListener > list = getClientsListeningToProperty ( deviceName , propertyName ) ; for ( int i = 0 ; i < list . size ( ) ; i ++ ) { INDIDeviceListener c = list . get ( i ) ; c . sendXMLMessage ( xml ) ; } }
tr	IDF	@ Override public void actionPerformed ( ActionEvent e ) { ok = false ; setVisible ( false ) ; }
tr	IDF	void putDirtyArray ( final byte [ ] array , final int length ) { if ( length != arraySize ) { System . out . println ( "bad length = " + length ) ; return ; } if ( DO_STATS ) { returnOp ++ ; } if ( DO_CLEAN_DIRTY ) { Arrays . fill ( array , 0 , array . length , BYTE_0 ) ; } byteArrays . addLast ( array ) ; }
tr	KEY	public static double skim ( double p , double a ) { if ( p > 1.0 ) { return - ( ( p - 1.0 ) ) * a ; } else if ( p < - 1.0 ) { return - ( ( p + 1.0 ) ) * a ; } return 0 ; }
tr	KEY	public Cord left ( ) { if ( i <= 0 ) return null ; return new Cord ( i - 1 , j ) ; }
tr	KEY	protected boolean canMove ( ) { for ( GameFigure gameFigure : getGameFigures ( ) ) { if ( gameFigure . canMove ( getDice ( ) . getLastNumber ( ) ) ) { return true ; } } return false ; }
tr	KEY	public void setIdCategory ( int id_category ) { this . id_category = id_category ; }
tr	KEY	boolean isDisposed ( ) ;
tr	KEY	public boolean lastTurnTerminatedCorrect ( ) ;
tr	IDF	@ Override public void showDialog ( Point point ) { NameEditor editor = new NameEditor ( "Name of the plotter" , "Name" , this . getName ( ) ) ; editor . showDialog ( "input dim: " + input . getDim ( ) + "  input max norm: " + maxv ) ; if ( editor . isOk ( ) ) { setName ( editor . getName ( ) ) ; } }
tr	KEY	public void setId ( long id ) { this . id = id ; }
tr	IDF	private void initializeComponents ( ) { years = 0 ; months = 1 ; days = 1 ; hours = 0 ; minutes = 0 ; seconds = 0 ; }
tr	IDF	public XYLayout ( ) { info = new Hashtable < Component , XYConstraints > ( ) ; }
tr	IDF	boolean endRendering ( ) { if ( edgeMinY == float . POSITIVE_INFINITY ) { return false ; } final int _boundsMinY = boundsMinY ; final int _boundsMaxY = boundsMaxY ; final int spminX = Math . max ( FloatMath . ceil_int ( edgeMinX - 0.5f ) , boundsMinX ) ; final int spmaxX = Math . min ( FloatMath . ceil_int ( edgeMaxX - 0.5f ) , boundsMaxX - 1 ) ; final int spminY = Math . max ( FloatMath . ceil_int ( edgeMinY ) , _boundsMinY ) ; int maxY = FloatMath . ceil_int ( edgeMaxY ) ; final int spmaxY ; if ( maxY <= _boundsMaxY - 1 ) { spmaxY = maxY ; } else { spmaxY = _boundsMaxY - 1 ; maxY = _boundsMaxY ; } buckets_minY = spminY - _boundsMinY ; buckets_maxY = maxY - _boundsMinY ; if ( DO_LOG_BOUNDS ) { MarlinUtils . logInfo ( "edgesXY = [" + edgeMinX + " ... " + edgeMaxX + "][" + edgeMinY + " ... " + edgeMaxY + "]" ) ; MarlinUtils . logInfo ( "spXY    = [" + spminX + " ... " + spmaxX + "][" + spminY + " ... " + spmaxY + "]" ) ; } if ( ( spminX > spmaxX ) || ( spminY > spmaxY ) ) { return false ; } final int pminX = spminX >> SUBPIXEL_LG_POSITIONS_X ; final int pmaxX = ( spmaxX + SUBPIXEL_MASK_X ) >> SUBPIXEL_LG_POSITIONS_X ; final int pminY = spminY >> SUBPIXEL_LG_POSITIONS_Y ; final int pmaxY = ( spmaxY + SUBPIXEL_MASK_Y ) >> SUBPIXEL_LG_POSITIONS_Y ; this . cache . init ( pminX , pminY , pmaxX , pmaxY ) ; bbox_spminX = pminX << SUBPIXEL_LG_POSITIONS_X ; bbox_spmaxX = pmaxX << SUBPIXEL_LG_POSITIONS_X ; bbox_spminY = spminY ; bbox_spmaxY = Math . min ( spmaxY + 1 , pmaxY << SUBPIXEL_LG_POSITIONS_Y ) ; if ( DO_LOG_BOUNDS ) { MarlinUtils . logInfo ( "pXY       = [" + pminX + " ... " + pmaxX + "[ [" + pminY + " ... " + pmaxY + "[" ) ; MarlinUtils . logInfo ( "bbox_spXY = [" + bbox_spminX + " ... " + bbox_spmaxX + "[ [" + bbox_spminY + " ... " + bbox_spmaxY + "[" ) ; } final int width = ( pmaxX - pminX ) + 2 ; if ( width > INITIAL_AA_ARRAY ) { if ( DO_STATS ) { RendererContext . stats . stat_array_renderer_alphaline . add ( width ) ; } alphaLine = rdrCtx . getIntArray ( width ) ; } if ( DO_MONITORS ) { RendererContext . stats . mon_rdr_endRendering . start ( ) ; } endRendering ( pminY ) ; return true ; }
tr	KEY	@ Override public int getNumberOfRows ( ) { return 0 ; }
tr	IDF	public void run ( ) { try { Thread . sleep ( 500 ) ; } catch ( InterruptedException e ) { } FrameRunner . run ( ConverterWindow . class ) ; }
tr	KEY	public synchronized void xassignL3KeyCode ( int code ) { l3 = code ; }
tr	KEY	public CreateCompte ( ) { super ( ) ; }
tr	KEY	@ Override public void onNextPlayerPressed ( ) { }
tr	KEY	public abstract void putEnd ( ) throws ParsingException ;
tr	IDF	@ SuppressWarnings ( "serial" ) @ Override public void findClasses ( ) { possibleClasses = new ArrayList < String > ( ) { { add ( "0" ) ; add ( "1" ) ; add ( "2" ) ; add ( "3" ) ; add ( "4" ) ; add ( "5" ) ; add ( "6" ) ; add ( "7" ) ; add ( "8" ) ; add ( "9" ) ; } } ; }
tr	KEY	public boolean isNullable ( ) { return nullable ; }
tr	IDF	public INDITextProperty ( INDIDriver driver , String name , String label , String group , PropertyStates state , PropertyPermissions permission , int timeout ) throws IllegalArgumentException { super ( driver , name , label , group , state , permission , timeout ) ; }
tr	KEY	boolean isHuman ( ) ;
tr	KEY	@ Override public Matrix transpose ( ) { return null ; }
tr	KEY	void execute ( ) ;
tr	KEY	public int getPorcen_Descuento ( ) { return Porcen_Descuento ; }
tr	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { quitButtonActionPerformed ( evt ) ; }
tr	IDF	private static void testMyWay ( ) { String s = "" ; s = myWay ( s ) ; System . out . println ( s ) ; }
tr	KEY	public String getReason ( ) { return this . reason ; }
tr	KEY	public NewsArticle createNewsArticle ( ) { return new NewsArticle ( ) ; }
tr	KEY	public void setId ( long id ) { this . id = id ; }
tr	KEY	private int newID ( ) { if ( ID < MAX_PLAYERS ) { return ID ++ ; } else { return ERROR_ID ; } }
tr	IDF	public void sendLoginMessage ( String username , String password ) throws JMSException { ObjectMessage msg = session . createObjectMessage ( ) ; this . clientName = username ; this . id . setClientName ( clientName ) ; msg . setObject ( new LoginMessage ( id , username , password ) ) ; msg . setJMSReplyTo ( privateQueue ) ; msg . setJMSCorrelationID ( createRandomString ( ) ) ; producer . send ( msg ) ; }
tr	KEY	public double getLinearVelocity ( ) { return dx ; }
tr	KEY	boolean isReply ( ) ;
tr	KEY	public EnemyStoneAtNode ( ) { super ( ) ; }
tr	IDF	public void sort ( ) { int n = customer_count ; boolean sorted = false ; while ( ! sorted ) { sorted = true ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( customers [ i ] . compareTo ( customers [ i + 1 ] ) > 0 ) { Customer temp = customers [ i + 1 ] ; customers [ i + 1 ] = customers [ i ] ; customers [ i ] = temp ; sorted = false ; } } n -- ; } }
tr	KEY	protected int getListeningPort ( ) { return listeningPort ; }
tr	KEY	public boolean isPressed ( ) { return ( state == STATE_PRESSED ) ; }
tr	KEY	public void windowActivated ( final WindowEvent e ) { }
tr	IDF	public boolean exists ( Tarea tarea ) throws SQLException { boolean exist = false ; mySQLDB = new MYSQLDB ( ) ; String sql = "select * from tarea where idtarea=" + tarea . getIdTarea ( ) ; ResultSet res = mySQLDB . executeQuery ( sql ) ; if ( res . next ( ) ) { exist = true ; } mySQLDB . closeExecuteQuery ( ) ; return exist ; }
tr	IDF	@ Override public void run ( ) { try { player . play ( ) ; } catch ( JavaLayerException ex ) { JOptionPane . showMessageDialog ( null , "Error" + ex ) ; } }
tr	IDF	@ SuppressWarnings ( "SimplifiableIfStatement" ) @ Override public boolean equals ( Object o ) { if ( this == o ) return true ; if ( o == null || getClass ( ) != o . getClass ( ) ) return false ; HgLogFileContent that = ( HgLogFileContent ) o ; if ( pathToHg != null ? ! pathToHg . equals ( that . pathToHg ) : that . pathToHg != null ) return false ; if ( folder != null ? ! folder . equals ( that . folder ) : that . folder != null ) return false ; if ( filePath != null ? ! filePath . equals ( that . filePath ) : that . filePath != null ) return false ; if ( revision != null ? ! revision . equals ( that . revision ) : that . revision != null ) return false ; return ! ( charset != null ? ! charset . equals ( that . charset ) : that . charset != null ) ; }
tr	IDF	public PokerPlayer ( String name ) { super ( name ) ; this . hand = new ArrayList < PokerCard > ( ) ; this . setBet ( 0 ) ; this . setBalance ( 0 ) ; this . setDecision ( PokerPlayerDecision . Play ) ; }
tr	IDF	UserState register ( String username , String password ) ;
tr	IDF	@ Override public void paint ( Graphics graph ) { Date now = new Date ( ) ; if ( now . after ( end ) ) { if ( now . getTime ( ) < end . getTime ( ) + duration ) { die ( ( Graphics2D ) graph ) ; } } else { show ( ( Graphics2D ) graph ) ; } }
tr	KEY	public static void testValidity ( Object o ) throws JSONException { if ( o != null ) { if ( o instanceof double ) { if ( ( ( double ) o ) . isInfinite ( ) || ( ( double ) o ) . isNaN ( ) ) { throw new JSONException ( "JSON does not allow non-finite numbers." ) ; } } else if ( o instanceof float ) { if ( ( ( float ) o ) . isInfinite ( ) || ( ( float ) o ) . isNaN ( ) ) { throw new JSONException ( "JSON does not allow non-finite numbers." ) ; } } } }
tr	KEY	public long getExamId ( ) { return examId ; }
tr	KEY	public int getGeom ( ) { return _geom ; }
tr	IDF	@ Override public void close ( ) throws java . io . IOException { flushBase64 ( ) ; super . close ( ) ; buffer = null ; out = null ; }
tr	IDF	public NewAntiGoal ( String name , String type , String layer , LinkedList < RequirementLink > inLinks , LinkedList < RequirementLink > outLinks ) { super ( name , type , layer , inLinks , outLinks ) ; }
tr	KEY	public int getX ( ) { return mX ; }
tr	KEY	@ Override public void connectionLost ( ) { }
tr	IDF	public void run ( ) { try { CommandPanel . setup ( ) ; CommandPanel window = new CommandPanel ( ) ; window . frmMuserControlPanel . setVisible ( true ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }
tr	KEY	public boolean isCellEditable ( int row , int col ) { switch ( col ) { case 3 : return true ; default : return false ; } }
tr	KEY	public long getId ( ) { return id ; }
tr	IDF	TIPPReferenceFile ( TIPPSectionType sectionType , String name , int sequence , LanguageChoice langChoice ) { super ( sectionType , TIPPResourceType . REFERENCE_FILE , name , sequence ) ; this . languageChoice = langChoice ; }
tr	IDF	public void update ( Usuario usuario ) throws SQLException { mySQLDB = new MYSQLDB ( ) ; String sql = "update usuario set NombreUsuario='" + usuario . getDescripcionUsuario ( ) + "'  Puesto='" + usuario . getPuesto ( ) + "' where NombreUsuario='" + this . usuarioActual . getDescripcionUsuario ( ) + "'" ; mySQLDB . execute ( sql ) ; mySQLDB . closeExecute ( ) ; }
tr	IDF	private void drillkeyTF3ActionPerformed ( java . awt . event . ActionEvent evt ) { }
tr	IDF	public String getPriorityString ( ) { return priority . toString ( ) ; }
tr	IDF	protected void registerSubdriver ( INDIDriver driver ) { subdrivers . add ( driver ) ; }
tr	KEY	public synchronized void xassignLTKeyCode ( int code ) { < = code ; }
tr	KEY	public void setTotal ( long value ) { this . total = value ; }
tr	KEY	public boolean logout ( ) { return false ; }
tr	KEY	@ Override public int rowId ( ) { return id ; }
tr	KEY	public int getHeight ( ) { if ( this == null ) return - 1 ; int leftH = this . left . getHeight ( ) ; int rightH = this . right . getHeight ( ) ; if ( leftH > rightH ) return leftH + 1 ; return rightH + 1 ; }
tr	KEY	@ Override public void run ( ) { ReprocessingPlantPanel . this . setEnabled ( false ) ; }
tr	IDF	private void addCommand ( String command ) { command += "\n" ; in = new SequenceInputStream ( in , new ByteArrayInputStream ( command . getBytes ( ) ) ) ; }
tr	IDF	@ Override public int getPages ( int intRegsPerPag , ArrayList < FilterBean > hmFilter , HashMap < String , String > hmOrder ) throws Exception { int pages ; try { oMysql . conexion ( enumTipoConexion ) ; pages = oMysql . getPages ( "usuario" , intRegsPerPag , hmFilter , hmOrder ) ; oMysql . desconexion ( ) ; return pages ; } catch ( Exception e ) { throw new Exception ( "UsuarioDao.getPages: Error: " + e . getMessage ( ) ) ; } }
tr	IDF	private static void ruleTesting ( ) throws IOException { String refine_rule = "" ; refine_rule = InfoEnum . current_directory + "/dlv/dlv -silent " + InfoEnum . current_directory + "/dlv/anti_goal_rules/refine_target.rule " + InfoEnum . current_directory + "/dlv/anti_goal_rules/threat_knowledge.rule " + InfoEnum . current_directory + "/dlv/models/req_business_model.dl " + InfoEnum . current_directory + "/dlv/models/security_model_business.dl " ; refine_rule = "/Users/litong30/research/Trento/Workspace/TLSRAF/dlv/dlv -silent  " + "/Users/litong30/research/Trento/Workspace/TLSRAF/dlv/anti_goal_rules/refine_all.rule " + "/Users/litong30/research/Trento/Workspace/TLSRAF/dlv/models/req_business_model.dl " + "/Users/litong30/research/Trento/Workspace/TLSRAF/dlv/models/security_model_business.dl  " + "/Users/litong30/research/Trento/Workspace/TLSRAF/dlv/anti_goal_rules/threat_knowledge.rule " + "/Users/litong30/research/Trento/Workspace/TLSRAF/dlv/models/asset_model.dl " ; refine_rule = "/Users/litong30/research/Trento/Workspace/TLSRAF/dlv/dlv -silent  " + "/Users/litong30/research/Trento/Workspace/TLSRAF/dlv/models/req_business_model.dl " + "/Users/litong30/research/Trento/Workspace/TLSRAF/dlv/models/security_model_business.dl  " + "/Users/litong30/research/Trento/Workspace/TLSRAF/dlv/rules/refine_security_attribute.rule " ; refine_rule = InfoEnum . current_directory + "/dlv/dlv -silent  " + InfoEnum . current_directory + "/dlv/models/req_business_model.dl " + InfoEnum . current_directory + "/dlv/models/data_flow_model.dl " + InfoEnum . current_directory + "/dlv/models/asset_model.dl " + InfoEnum . current_directory + "/dlv/models/threat_model.dl " + InfoEnum . current_directory + "/dlv/rules/threat_based_simplification.rule " ; refine_rule = InfoEnum . current_directory + "/dlv/dlv -silent -nofacts " + InfoEnum . current_directory + "/dlv/rules/threat_based_simplification.rule " + InfoEnum . current_directory + "/dlv/models/data_flow_model.dl " + InfoEnum . current_directory + "/dlv/models/threat_model.dl " + InfoEnum . current_directory + "/dlv/models/asset_model.dl " + InfoEnum . current_directory + "/dlv/models/req_business_model.dl " ; int visualization = 1 ; refine_rule = InfoEnum . current_directory + "/graphviz/dot -Tpdf " + InfoEnum . current_directory + "/graphviz/sec_goal_" + visualization + ".gv -o " + InfoEnum . current_directory + "/graphviz/sec_goal_" + visualization + ".pdf" ; refine_rule = "/usr/bin/neato -Tpdf -O" + InfoEnum . current_directory + "/graphviz/sec_goal_" + visualization + ".gv" ; refine_rule = InfoEnum . current_directory + "/dlv/dlv -silent -nofacts " + InfoEnum . current_directory + "/dlv/rules/operationalization.rule " + "/Users/tongli/research/Trento/Workspace/TLSRAF/dlv/models/req_business_model.dl  " + "/Users/tongli/research/Trento/Workspace/TLSRAF/dlv/models/security_model_business.dl " ; refine_rule = "/Users/tongli/OneDrive/reseach/Workspace/TLSRAF/dlv/dlv -silent -nofacts " + "/Users/tongli/OneDrive/reseach/Workspace/TLSRAF/dlv/rules/operationalization.rule " + "/Users/tongli/OneDrive/reseach/Workspace/TLSRAF/dlv/models/req_business_model.dl  " + "/Users/tongli/OneDrive/reseach/Workspace/TLSRAF/dlv/models/security_model_business.dl  " ; refine_rule = InfoEnum . current_directory + "/dlv/dlv -silent  -nofacts " + InfoEnum . current_directory + "/dlv/rules/threat_based_simplification.rule " + InfoEnum . current_directory + "/dlv/models/data_flow_model.dl " + InfoEnum . current_directory + "/dlv/models/threat_model.dl " + InfoEnum . current_directory + "/dlv/models/asset_model.dl " + "/Users/tongli/OneDrive/reseach/Workspace/TLSRAF/dlv/models/req_business_model.dl  " + "/Users/tongli/OneDrive/reseach/Workspace/TLSRAF/dlv/models/req_application_model.dl  " ; refine_rule = InfoEnum . current_directory + "/dlv/dlv -silent -nofacts " + InfoEnum . current_directory + "/dlv/rules/cross_layer.rule " + "/Users/tongli/OneDrive/reseach/Workspace/TLSRAF/dlv/models/req_physical_model.dl  " + "/Users/tongli/OneDrive/reseach/Workspace/TLSRAF/dlv/models/req_application_model.dl  " ; String hsgm_file = InfoEnum . current_directory + "/dlv/models/holistic_security_goal_model.dl" ; refine_rule = InfoEnum . current_directory + "/dlv/dlv -silent -nofacts " + InfoEnum . current_directory + "/dlv/rules/find_alternative.rule " + hsgm_file ; refine_rule = "/Users/tongli/OneDrive/reseach/Workspace/TLSRAF/dlv/dlv -silent  /Users/tongli/OneDrive/reseach/Workspace/TLSRAF/dlv/rules/threat_based_simplification.rule /Users/tongli/OneDrive/reseach/Workspace/TLSRAF/dlv/models/data_flow_model.dl /Users/tongli/OneDrive/reseach/Workspace/TLSRAF/dlv/models/threat_model.dl /Users/tongli/OneDrive/reseach/Workspace/TLSRAF/dlv/models/asset_model.dl /Users/tongli/OneDrive/reseach/Workspace/TLSRAF/dlv/models/ex_req_business_model.dl /Users/tongli/OneDrive/reseach/Workspace/TLSRAF/dlv/models/ex_req_application_model.dl /Users/tongli/OneDrive/reseach/Workspace/TLSRAF/dlv/models/ex_req_physical_model.dl\u00A0" ; Runtime rt = Runtime . getRuntime ( ) ; Process pr = rt . exec ( refine_rule ) ; BufferedReader input = new BufferedReader ( new InputStreamReader ( pr . getInputStream ( ) ) ) ; String line = null ; while ( ( line = input . readLine ( ) ) != null ) { String [ ] result = line . split ( "  " ) ; for ( String s : result ) System . out . println ( s ) ; } }
tr	KEY	public void setNumber ( long number ) { this . number = number ; }
tr	IDF	@ Override public SearchRequestBuilder withImageRequestCount ( long count ) { getImageRequest ( ) . setCount ( count ) ; return this ; }
tr	KEY	public int getDownloaded ( ) { return downloaded ; }
tr	IDF	public CategoryModel getCategory ( int id ) throws WebshopAppException { return categoryRepository . getCategory ( id ) ; }
tr	KEY	public boolean isActive ( ) { return active ; }
tr	KEY	public Product [ ] getProducts ( ) { return this . products ; }
tr	KEY	protected boolean isConnected ( ) { if ( connectedE . getValue ( ) == SwitchStatus . ON ) { return true ; } return false ; }
tr	KEY	public TopicCardListPresenterImpl ( ) { super ( ) ; this . onDeleteCard = null ; this . model = null ; this . view = new TopicCardListViewImpl ( ) ; PresenterManager . getInstance ( ) . add ( this ) ; }
tr	IDF	public void setSite ( SiteModel site ) { this . site = site ; }
tr	IDF	@ Override protected void onAction ( HashMap < String , String > params ) { if ( server != null ) { server . interrupt ( ) ; server . close ( ) ; } interrupt ( ) ; }
tr	IDF	@ Override public void onSendIoException ( int packetId ) { synchronized ( mListeners ) { for ( PacketListener listener : mListeners ) { try { listener . onSendIoException ( packetId ) ; } catch ( RuntimeException e ) { System . out . println ( "Error notifying listener" ) ; e . printStackTrace ( ) ; } } } }
tr	KEY	protected void interrupted ( ) { }
tr	KEY	public int [ ] getScore ( ) { return score ; }
tr	IDF	void exitEscreva ( @ NotNull EnquantoParser . EscrevaContext ctx ) ;
tr	IDF	public void draw ( Graphics2D g , Color color ) { g . setColor ( color ) ; drawHandle ( g ) ; if ( directLineTo ( g , from , pTo ) ) return ; if ( directLineTo ( g , to , pFrom ) ) return ; if ( verticalLineTo ( g , from , pTo ) ) return ; if ( verticalLineTo ( g , to , pFrom ) ) return ; if ( bothVertical ( g ) ) return ; if ( bothHorizontal ( g ) ) return ; if ( from . isVertical ( ) ) { Point tp = new Point ( getMx ( ) , pFrom . y ) ; Point tp2 = new Point ( tp . x , pTo . y ) ; if ( ! ( eFrom . intersects ( pFrom , tp ) || eTo . intersects ( pFrom , tp ) ) || eFrom . intersects ( tp , tp2 ) || eTo . intersects ( tp , tp2 ) || eFrom . intersects ( tp2 , pTo ) || eTo . intersects ( tp2 , pTo ) ) { drawLine ( g , pFrom , tp ) ; drawLine ( g , tp , tp2 ) ; drawLine ( g , tp2 , pTo ) ; return ; } else { int mx = 0 ; if ( to . getPosition ( ) == Component . Position . left ) { mx = Math . min ( eFrom . getX ( ) - gap , pTo . x ) ; } else { mx = Math . max ( eFrom . getX ( ) + eFrom . getOWidth ( ) + gap , pTo . x ) ; } tp = new Point ( mx , pFrom . y ) ; tp2 = new Point ( mx , pTo . y ) ; drawLine ( g , tp2 , pTo ) ; drawLine ( g , pFrom , tp ) ; drawLine ( g , tp , tp2 ) ; return ; } } else { Point tp = new Point ( pFrom . x , getMy ( ) ) ; Point tp2 = new Point ( pTo . x , tp . y ) ; if ( ! eTo . intersects ( tp2 , pTo ) ) { drawLine ( g , tp2 , pTo ) ; drawLine ( g , pFrom , tp ) ; drawLine ( g , tp , tp2 ) ; return ; } else { int my = 0 ; if ( to . getPosition ( ) == Component . Position . top ) { my = Math . min ( pTo . y , eFrom . getY ( ) - gap ) ; } else { my = Math . max ( pTo . y , eFrom . getY ( ) + eFrom . getOHeight ( ) + gap ) ; } tp = new Point ( pFrom . x , my ) ; tp2 = new Point ( pTo . x , tp . y ) ; drawLine ( g , tp2 , pTo ) ; drawLine ( g , pFrom , tp ) ; drawLine ( g , tp , tp2 ) ; return ; } } }
tr	KEY	public final void setAlphaPremultiplied ( final boolean isAlphaPremultiplied ) { this . isAlphaPremultiplied = isAlphaPremultiplied ; }
tr	KEY	public static void closeHostMenu ( ) { StartSnakeGame . frame . setVisible ( true ) ; }
tr	KEY	private ClipboardTools ( ) { }
tr	IDF	private void writeStartElement ( java . lang . String prefix , java . lang . String namespace , java . lang . String localPart , javax . xml . stream . XMLStreamWriter xmlWriter ) throws javax . xml . stream . XMLStreamException { java . lang . String writerPrefix = xmlWriter . getPrefix ( namespace ) ; if ( writerPrefix != null ) { xmlWriter . writeStartElement ( namespace , localPart ) ; } else { if ( namespace . length ( ) == 0 ) { prefix = "" ; } else if ( prefix == null ) { prefix = generatePrefix ( namespace ) ; } xmlWriter . writeStartElement ( prefix , localPart , namespace ) ; xmlWriter . writeNamespace ( prefix , namespace ) ; xmlWriter . setPrefix ( prefix , namespace ) ; } }
tr	KEY	public abstract boolean redo ( GameModel game ) ;
tr	IDF	public void modifyDates ( Date abirthdt ) { Date lastdt = new Date ( abirthdt . getTime ( ) ) ; for ( int idx = 0 ; idx < this . getCount ( ) ; idx ++ ) { CShotItem myitem = ( CShotItem ) this . getItem ( idx ) ; } }
tr	IDF	public String createBorrow ( String idUSer , String idBook ) { if ( idUSer . equals ( "" ) || idBook . equals ( "" ) ) { return "One ore more fields are empty" ; } if ( ! IntegerUtil . isInteger ( idUSer ) || ! IntegerUtil . isInteger ( idBook ) ) { return "The field's value must be numeric" ; } int idUserInt = Integer . parseInt ( idUSer ) ; int idBookInt = Integer . parseInt ( idBook ) ; if ( borrowService . createBorrow ( idUserInt , idBookInt ) ) { return "Creation succeed" ; } else { return "Error the book is not available or wrong ids" ; } }
tr	KEY	@ Override public void isBeingDestroyed ( ) { }
tr	IDF	public TileDisplay ( int xCells , int yCells ) { super ( DOUBLE_BUFFERING ) ; super . setBackground ( BACKGROUND ) ; this . xCells = xCells ; this . yCells = yCells ; this . width = xCells * TILE_SIZE ; this . height = yCells * TILE_SIZE ; buffer = new BufferedImage ( this . width , this . height , BufferedImage . TYPE_INT_RGB ) ; clearDisplay ( ) ; this . setPreferredSize ( new java . awt . Dimension ( width , height ) ) ; repaint ( ) ; }
tr	IDF	public Builder ( String name , int productType ) { this . name = name ; this . productType = productType ; id = DEFAULT_PRODUCT_ID ; description = "" ; cost = 0 ; rrp = 0 ; categories = new ArrayList < Integer > ( ) ; }
tr	KEY	public int [ ] GetBoundY ( ) { return new int [ ] { ( int ) this . getMinY ( ) , ( int ) this . getMaxY ( ) , ( int ) this . getMaxY ( ) , ( int ) this . getMinY ( ) } ; }
tr	KEY	public TakeDeveloperOffBoardAction ( ) { }
tr	KEY	public int getAvailableActionPoints ( boolean isLandTile ) { if ( hasPlacedLandTile || isLandTile ) { return actionPoints ; } return actionPoints - 1 ; }
tr	IDF	static int RGB_to_sRGBi ( float val ) { int c = Math . round ( 255f * RGB_to_sRGB ( val ) ) ; if ( TRACE ) { System . out . println ( "val: " + val + " c: " + c ) ; } return c ; }
tr	KEY	protected Logger getLogger ( ) { return this . logger ; }
tr	IDF	public AppTest ( String testName ) { super ( testName ) ; }
tr	IDF	public GameOverFrame ( Player player ) { this . player = player ; initComponents ( ) ; scoreValueLabel . setText ( Integer . toString ( player . getScore ( ) ) ) ; }
tr	KEY	public static double ulp ( double x ) { if ( double . isInfinite ( x ) ) { return double . POSITIVE_INFINITY ; } return abs ( x - double . longBitsToDouble ( double . doubleToLongBits ( x ) ^ 1 ) ) ; }
tr	KEY	@ Override public int count ( ) { return 0 ; }
tr	IDF	private void calculateAction ( ) { input_value . setText ( Main . calculate ( input_equation . getText ( ) ) ) ; }
tr	KEY	public double getPriceLevel8 ( ) { return priceLevel8 ; }
tr	KEY	public void setNumRep_Equipo ( int NumRep_Equipo ) { this . NumRep_Equipo = NumRep_Equipo ; }
tr	KEY	public double getDistance ( ) { return DISTANCE ; }
tr	KEY	public void windowDeactivated ( final WindowEvent e ) { }
tr	IDF	public ListNode mergeKLists ( ListNode [ ] lists ) { ListNode head = new ListNode ( 0 ) ; ListNode p = head ; PriorityQueue < ListNode > heap = new PriorityQueue < ListNode > ( lists . length + 1 , new Comparator < ListNode > ( ) { @ Override public int compare ( ListNode o1 , ListNode o2 ) { return o1 . val - o2 . val ; } } ) ; for ( ListNode node : lists ) { if ( node != null ) { heap . add ( node ) ; } } while ( heap . size ( ) > 0 ) { ListNode least = heap . poll ( ) ; p . next = least ; p = p . next ; if ( least . next != null ) { heap . add ( least . next ) ; } } return head . next ; }
tr	KEY	@ Override public void recreate ( ) { }
tr	KEY	public void setHga ( int hga ) { this . hga = hga ; }
tr	KEY	@ Override protected int getShootDelayFrame ( ) { return SHOOT_DELAY_FRAME ; }
tr	IDF	static String toBinaryString ( int number , int digits ) { String binaryString = "" ; for ( int i = 0 ; i < digits ; i ++ ) { if ( number >= Math . round ( Math . pow ( 2 , digits - i - 1 ) ) ) { number -= Math . round ( Math . pow ( 2 , digits - i - 1 ) ) ; binaryString += "1" ; } else binaryString += "0" ; } return binaryString ; }
tr	KEY	public Software ( ) { }
tr	KEY	public void setMaxRows ( int maxRows ) ;
tr	IDF	public void setQuantidade ( Integer value ) { this . quantidade = value ; }
tr	KEY	public void setUp ( ) { }
tr	IDF	public FeatureVector createPNXFeatureVector ( DependencyInstance inst , int head , int arg , int pair ) { FeatureVector fv = new FeatureVector ( numArcFeats ) ; int [ ] pos = inst . postagids ; int [ ] word = inst . formids ; int flag = ( head - arg ) * ( head - pair ) < 0 ? 0 : 1 ; flag = ( flag + 1 ) ; long code = 0 ; code = createArcCodeW ( PNX_MW , word [ arg ] ) ; addArcFeature ( code | flag , fv ) ; code = createArcCodeWP ( PNX_HP_MW , word [ arg ] , pos [ head ] ) ; addArcFeature ( code | flag , fv ) ; return fv ; }
tr	KEY	public void resetarCor ( ) { imprimir ( "\u001B[0m" ) ; }
tr	KEY	public int getSource ( ) { return this . source ; }
tr	IDF	@ Override public boolean isAnswerCorrect ( ) { boolean result = false ; final String answered = _answerTextField . getText ( ) ; final String actual = _shortCut . getShortCut ( ) ; if ( answered . equalsIgnoreCase ( actual ) ) { result = true ; _shortCut . setCorrectlyAnswered ( ) ; _session . setCorrectlyAnswered ( ) ; setAnswerLabel ( "CORRECT" ) ; } else { _shortCut . setIncorrectlyAnswered ( ) ; _session . setIncorrectlyAnswered ( ) ; setAnswerLabel ( "INCORRECT" ) ; } this . updatePanel ( ) ; return result ; }
tr	IDF	public String cleanUrl ( URL url ) { String s = url . toString ( ) ; System . out . println ( "Before Clean" ) ; System . out . println ( s ) ; String delims = "/" ; String [ ] tokens = s . split ( delims ) ; System . out . println ( "After Clean" ) ; String mailPart = "" ; for ( int i = 1 ; i < tokens . length ; i ++ ) { mailPart += tokens [ i ] + "\\\\" ; } System . out . println ( mailPart ) ; return mailPart ; }
tr	KEY	public DeclaracaoProcedimento ( ) { }
tr	KEY	public boolean isUsed ( ) { return used ; }
tr	KEY	public int getNumChildren ( ) ;
tr	KEY	public abstract Building getCopy ( ) ;
tr	KEY	public void update ( long elapsedTime ) { }
tr	KEY	public int getActionID ( ) { return actionID ; }
tr	IDF	@ Override public void dispose ( ) { super . dispose ( ) ; weaponView . dispose ( ) ; remainBulletView . dispose ( ) ; }
tr	KEY	public abstract int getCount ( E data ) ;
tr	KEY	public int getWidth ( ) { return width ; }
tr	KEY	protected void initialize ( ) { }
tr	KEY	public void noFreshMeat ( ) ;
tr	KEY	public double getRotationSpeed ( ) { return rotationSpeed ; }
tr	KEY	public int getCount ( ) { return antal ; }
tr	KEY	public static long min ( final long a , final long b ) { return ( a <= b ) ? a : b ; }
tr	IDF	public Object clone ( ) { Constructor constructor = getClass ( ) . getConstructors ( ) [ 0 ] ; try { return constructor . newInstance ( new Object [ ] { creatureAnim . clone ( ) } ) ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; return null ; } }
tr	KEY	public void startGame ( ) { start = true ; }
tr	KEY	public void setRow ( int row ) { this . row = row ; }
tr	KEY	public void setId ( long id ) { this . id = id ; }
tr	IDF	public TV ( String location ) { this . location = location ; }
tr	KEY	public default void savePreferences ( Preferences preferences ) { }
tr	KEY	public int getT_shot ( ) { return t_shot ; }
tr	KEY	public double getCountsSec ( ) { return countsSec ; }
tr	IDF	public abstract LinkedList < LineGap > toLineGaps ( Object pattern ) ;
tr	IDF	public void setItens ( List < Item > itens ) { this . itens = itens ; }
tr	KEY	public void keyTyped ( final KeyEvent event ) { }
tr	KEY	public boolean isReceivedMsg ( ) { return receivedMsg ; }
tr	IDF	public DateTime fineMinTimeFromSiteStat ( long siteId ) { String sql = "SELECT MIN(hour) FROM sitestat WHERE site_id = " + siteId ; long maxdateInLong = jdbcTemplate . queryForObject ( sql , long . class ) ; return new DateTime ( maxdateInLong ) ; }
tr	IDF	public String selectOrdering ( ) throws Exception { logger . info ( "selectOrdering start." ) ; price = orderingServiceImpl . selectDetail ( price , dic ) ; if ( price == null ) { response . getWriter ( ) . print ( ERROR ) ; logger . info ( "selectOrdering end." ) ; return null ; } @ SuppressWarnings ( "unchecked" ) Map < Integer , Price > priceMap = ( Map < Integer , Price > ) session . get ( OtherConstants . SELECTED_TODAY_ORDERING ) ; if ( priceMap == null ) { priceMap = new LinkedHashMap < Integer , Price > ( ) ; } Integer current_index = ( Integer ) session . get ( OtherConstants . CURRENT_INDEX ) ; if ( current_index == null ) { current_index = 0 ; } current_index = current_index + 1 ; priceMap . put ( current_index , price ) ; session . put ( OtherConstants . SELECTED_TODAY_ORDERING , priceMap ) ; session . put ( OtherConstants . CURRENT_INDEX , current_index ) ; response . getWriter ( ) . print ( SUCCESS + ":" + current_index ) ; logger . info ( "selectOrdering end." ) ; return null ; }
tr	KEY	protected void end ( ) { }
tr	KEY	public NotaFiscal createNotaFiscal ( ) { return new NotaFiscal ( ) ; }
tr	IDF	public void setPolicies ( PolicyList policies ) { this . policies = policies ; }
tr	KEY	public void setDiffuse ( double [ ] diffuse ) { this . diffuse = diffuse ; }
tr	KEY	public abstract void connectionLost ( ) ;
tr	KEY	public double getValPenPag_Entrega ( ) { return ValPenPag_Entrega ; }
tr	IDF	private void initSlider ( ) { this . setMinimum ( 0 ) ; this . setMaximum ( 100 ) ; _player . setVolume ( 50 ) ; this . setValue ( 50 ) ; this . addMouseListener ( new MouseAdapter ( ) { @ Override public void mousePressed ( MouseEvent e ) { Point p = VolumeSlider . this . getMousePosition ( ) ; VolumeSlider . this . setValue ( 100 * p . x / VolumeSlider . this . getWidth ( ) ) ; } @ Override public void mouseReleased ( MouseEvent e ) { _player . setVolume ( VolumeSlider . this . getValue ( ) ) ; } } ) ; }
tr	KEY	public void setLockedByPOP3 ( boolean isLockedByPOP3 ) { this . isLockedByPOP3 = isLockedByPOP3 ; }
tr	KEY	private void loader ( ) { loadMenuFases ( ) ; }
tr	KEY	@ Override public boolean hasNext ( ) { if ( next == null ) { next = findNext ( ) ; } return next != null ; }
tr	KEY	public long getAttributeID ( ) { return attributeID ; }
tr	KEY	public byte [ ] getPict ( ) { return pict ; }
tr	KEY	public long getTime ( ) { return time ; }
tr	IDF	public static boolean isSameDomain ( String domain , String [ ] domainList ) { for ( int i = 0 ; i < domainList . length ; i ++ ) { if ( domain . equals ( domainList [ i ] ) ) { return true ; } } return false ; }
tr	KEY	public void getCompany ( ) ;
tr	KEY	public void setCount ( long value ) { this . count = value ; }
tr	KEY	public PlayerLVL5 ( ) { super ( PlayerLVL5 . class . getResource ( "resources/squirtle.jpg" ) ) ; }
tr	IDF	public MAction pressM ( BoardModel board , JavaPlayer player ) { return null ; }
tr	IDF	@ Override public Object execute ( HttpServletRequest request , HttpServletResponse response ) throws Exception { Contexto oContexto = ( Contexto ) request . getAttribute ( "contexto" ) ; HiloParam oHiloParam = new HiloParam ( request ) ; HiloBean oHiloBean = new HiloBean ( ) ; try { oHiloBean = oHiloParam . load ( oHiloBean ) ; } catch ( NumberFormatException e ) { oContexto . setVista ( "jsp/mensaje.jsp" ) ; return "Tipo de dato incorrecto en uno de los campos del formulario" ; } oContexto . setVista ( "jsp/hilo/form.jsp" ) ; return oHiloBean ; }
tr	IDF	public void setId_Compra ( Compra Id_Compra ) { this . Id_Compra = Id_Compra ; }
tr	IDF	protected void processMouseMotionEvent ( MouseEvent e ) { e . consume ( ) ; }
tr	KEY	protected abstract void dealWithPossibleNewDeviceName ( String possibleNewName ) ;
tr	KEY	@ Override protected void doInBackground ( ) throws Exception { downloadSW ( _url ) ; return null ; }
tr	KEY	public void off ( ) { on = false ; }
tr	IDF	public boolean createRecord ( String badgeId , Record record ) { newRecordsList ( record . getLastName ( ) ) ; insertNewRecord ( record . getLastName ( ) , record ) ; return true ; }
tr	IDF	private SpriteStore ( ) { store = new HashMap < String , Sprite > ( ) ; }
tr	KEY	public boolean selectThreeTile ( ) { return sharedModel . hasThreeTile ( ) ; }
tr	KEY	public Administrator ( ) { }
tr	KEY	public void setWeightChange ( double weightChange ) { this . weightChange = weightChange ; }
tr	IDF	public Vector2D arrive ( Vector2D targetPos , Deceleration deceleration ) { Vector2D toTarget = targetPos . minus ( parent . position ) ; double dist = toTarget . length ( ) ; if ( dist > 0 ) { double decelerationTweaker = 0.3 ; double speed = dist / ( ( double ) deceleration . value * decelerationTweaker ) ; speed = Math . min ( speed , parent . getMaxSpeed ( ) ) ; Vector2D desiredVelocity = toTarget . scalarMult ( speed / dist ) ; desiredVelocity = desiredVelocity . minus ( parent . getVelocity ( ) ) ; return desiredVelocity ; } return new Vector2D ( 0 , 0 ) ; }
tr	IDF	public Album ( String name , int year , String artist ) { _name = name ; _year = year ; _artist = artist ; }
tr	KEY	public synchronized boolean isEnabled ( ) { return m_enabled ; }
tr	IDF	@ Override public void componentResized ( ComponentEvent arg0 ) { }
tr	IDF	List < Lecturer > loadAllLecturers ( ) ;
tr	IDF	public Sound getSound ( String filename ) { return getSound ( getAudioInputStream ( filename ) ) ; }
tr	KEY	public boolean isCollision ( int x , int y ) { if ( x >= gridSize || y >= gridSize || x < 0 || y < 0 ) { return false ; } if ( current_map [ y ] . charAt ( x ) == # ) { return true ; } else { return false ; } }
tr	IDF	public DebugInfoRenderer ( Game gm , Dimension screenSize ) { super ( gm , screenSize ) ; }
tr	IDF	public void setStatus ( String status ) { this . status = status ; }
tr	IDF	public Tileset ( TilesetInfo inf ) { init ( inf . name , inf . tilewidth , inf . tileheight ) ; }
tr	IDF	private void checkShipToPlanetsCollision ( ShipV2 player , ArrayList < Planet > p ) { for ( int i = 0 ; i < p . size ( ) ; i ++ ) { Planet planet = p . get ( i ) ; if ( player . getPosition ( ) . x >= planet . getPosition ( ) . x && player . getPosition ( ) . x <= ( planet . getPosition ( ) . x + planet . getWidth ( ) ) && player . getPosition ( ) . y >= planet . getPosition ( ) . y && player . getPosition ( ) . y <= ( planet . getPosition ( ) . y + planet . getHeight ( ) ) ) { collideShipToPlanet ( player , planet ) ; } } }
tr	IDF	@ Override public V put ( final K key , final V value ) { final V returnedValue = super . put ( key , value ) ; this . keys . add ( key ) ; return returnedValue ; }
tr	IDF	private void jButton7ActionPerformed ( java . awt . event . ActionEvent evt ) { ( ( Bubble ) s ) . d . shapes . removeAll ( null ) ; }
tr	IDF	private LinkedList < OthelloCellCapturePath > getCapturePaths ( final Collection < OthelloCell > cells ) { final LinkedList < OthelloCellCapturePath > list = new LinkedList < OthelloCellCapturePath > ( ) ; for ( final OthelloCell cell : cells ) { list . addAll ( getCapturePath ( cell ) ) ; } return list ; }
tr	KEY	public RaspberryPiThread ( ) { super ( "RaspberryPiSocket" ) ; }
tr	KEY	public boolean getDPadLeft ( ) { double x = getDPadX ( ) ; return ( x < - 0.5 ) ; }
tr	KEY	@ Test public void test ( ) throws Exception { }
tr	KEY	public int getProductType ( ) { return productType ; }
tr	IDF	public Vector2D ( double x , double y ) { this . x = x ; this . y = y ; }
tr	KEY	public int getT1_slider_position ( ) { return t1_slider_position ; }
tr	KEY	public int getId ( ) { return id ; }
tr	KEY	public int getSpeed ( ) { return level ; }
tr	IDF	public static String getProjectPath ( ) { String path = System . getProperty ( "user.dir" ) ; return path ; }
tr	IDF	public boolean exist ( char [ ] [ ] board , String word ) { if ( board == null ) return false ; if ( word == null ) return false ; if ( word . equals ( "" ) ) return true ; boolean [ ] [ ] visited = new boolean [ board . length ] [ board [ 0 ] . length ] ; for ( int i = 0 ; i < board . length ; i ++ ) { for ( int j = 0 ; j < board [ i ] . length ; j ++ ) { if ( board [ i ] [ j ] == word . charAt ( 0 ) ) { initVisited ( visited ) ; visited [ i ] [ j ] = true ; if ( searchSurroundings ( board , visited , word , 1 , i , j ) ) { return true ; } } } } return false ; }
tr	KEY	public void setSpecular ( double [ ] specular ) { this . specular = specular ; }
tr	KEY	public boolean isEmpty ( ) { return this . size == 0 ; }
tr	IDF	public List < PhotoSet > getSets ( String userId ) { String response = call ( "flickr.photosets.getList" , "user_id=" + urlEncode ( userId ) + "&primary_photo_extras=url_q" ) ; JSONObject json = ( JSONObject ) jsonParse ( response ) ; if ( json == null ) return null ; JSONArray photosets = ( JSONArray ) ( ( JSONObject ) json . get ( "photosets" ) ) . get ( "photoset" ) ; List < PhotoSet > sets = new ArrayList ( ) ; for ( int i = 0 ; i < photosets . size ( ) ; i ++ ) { JSONObject photoset = ( JSONObject ) photosets . get ( new Integer ( i ) ) ; PhotoSet set = new PhotoSet ( ) ; set . id = long . parseLong ( photoset . get ( "id" ) . toString ( ) ) ; set . title = ( ( JSONObject ) photoset . get ( "title" ) ) . get ( "_content" ) . toString ( ) ; set . description = ( ( JSONObject ) photoset . get ( "title" ) ) . get ( "_content" ) . toString ( ) ; set . coverUrl = ( ( JSONObject ) photoset . get ( "primary_photo_extras" ) ) . get ( "url_q" ) . toString ( ) ; sets . add ( set ) ; } return sets ; }
tr	IDF	public static void main ( String [ ] args ) { javax . swing . SwingUtilities . invokeLater ( new Runnable ( ) { public void run ( ) { try { UIManager . setLookAndFeel ( UIManager . getCrossPlatformLookAndFeelClassName ( ) ) ; } catch ( Exception e ) { System . out . println ( "Error setting Java LAF: " + e ) ; } createGui ( ) ; } } ) ; }
tr	KEY	public double getPreis ( ) { return preis ; }
tr	KEY	public boolean isVrmlObj ( ) { return _vrmlObj ; }
tr	IDF	public ListeLabyrinthes ( ) { labyrinthes = new ArrayList < Labyrinthe > ( ) ; }
tr	IDF	public static void main ( String args [ ] ) { try { for ( javax . swing . UIManager . LookAndFeelInfo info : javax . swing . UIManager . getInstalledLookAndFeels ( ) ) { if ( "Nimbus" . equals ( info . getName ( ) ) ) { javax . swing . UIManager . setLookAndFeel ( info . getClassName ( ) ) ; break ; } } } catch ( ClassNotFoundException ex ) { java . util . logging . Logger . getLogger ( jfProgressBar . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( InstantiationException ex ) { java . util . logging . Logger . getLogger ( jfProgressBar . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( IllegalAccessException ex ) { java . util . logging . Logger . getLogger ( jfProgressBar . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( javax . swing . UnsupportedLookAndFeelException ex ) { java . util . logging . Logger . getLogger ( jfProgressBar . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } java . awt . EventQueue . invokeLater ( new Runnable ( ) { public void run ( ) { jfProgressBar dialog = new jfProgressBar ( new javax . swing . JFrame ( ) , true ) ; dialog . addWindowListener ( new java . awt . event . WindowAdapter ( ) { @ Override public void windowClosing ( java . awt . event . WindowEvent e ) { System . exit ( 0 ) ; } } ) ; dialog . setVisible ( true ) ; } } ) ; }
tr	IDF	public void verifyPIN ( byte [ ] pinData ) throws CardServiceException { CommandAPDU c = new CommandAPDU ( 0 , INS_VERIFY , 0 , 0 , pinData ) ; ResponseAPDU r = service . transmit ( c ) ; checkSW ( r , "verifyPIN failed: " ) ; }
tr	IDF	@ Override public void exitRule ( ParseTreeListener listener ) { if ( listener instanceof EnquantoListener ) ( ( EnquantoListener ) listener ) . exitLeia ( this ) ; }
tr	IDF	public void nextMode ( ) { if ( mode == NUM_MODES ) { mode = 1 ; } else { mode = mode + 1 ; } setMode ( ) ; }
tr	KEY	public int getLine ( ) { return yyline + 1 ; }
tr	IDF	@ Override public String getMessage ( ) { return USR . getNO_SUCH_USER_FOUND ( ) ; }
tr	KEY	public void setSpecularPower ( double specularPower ) { this . specularPower = specularPower ; }
tr	IDF	@ WebEndpoint ( name = "NotaFiscalResourcePort" ) public NotaFiscalResourcePortType getNotaFiscalResourcePort ( WebServiceFeature ... features ) { return super . getPort ( NotaFiscalResourcePort , NotaFiscalResourcePortType . class , features ) ; }
tr	IDF	public ArrayList < Ship > getAIShips ( ) { return aiShips ; }
tr	IDF	public LocaleParser ( ) { this . setStatesByShortCode ( new HashMap < String , State > ( ) ) ; this . setStatesByInt ( new HashMap < Integer , State > ( ) ) ; this . setCountiesByStateAndCounty ( new HashMap < String , County > ( ) ) ; this . setCountiesSetByState ( new HashMap < String , ArrayList < County >> ( ) ) ; StateParser ( ) ; CountyParser ( ) ; }
tr	KEY	@ Override public void popCol ( ) { }
tr	KEY	public void start ( ) { if ( this . thread == null ) { this . thread = new Thread ( this ) ; this . thread . start ( ) ; } }
tr	IDF	public Collection < HasBounds > get ( Rectangle bounds , Collection < HasBounds > list ) { if ( list == null ) { list = new ArrayList < > ( ) ; } return root . get ( bounds , list ) ; }
tr	KEY	public boolean isDiscontinued ( ) { return discontinued ; }
tr	IDF	List < ERoomType > getAllRoomTypes ( ) ;
tr	KEY	public int getTileX ( ) { return tileX ; }
tr	KEY	public void remove ( ) { throw new UnsupportedOperationException ( ) ; }
tr	IDF	private void jTextFieldCheckKeyPerformed ( java . awt . event . KeyEvent e ) { if ( e . getKeyCode ( ) == KeyEvent . VK_ENTER ) { timer . stop ( ) ; getPresenter ( ) . checkAnswer ( this . answerField . getText ( ) ) ; } }
tr	KEY	public PaymentRequest setAmount ( double amount ) { this . amount = "" + amount ; return this ; }
tr	IDF	public List < ActorModel > getAllActors ( ) throws WebshopAppException { return actorRepository . getAllActors ( ) ; }
tr	KEY	public void setTilePairs ( int tilePairs ) { this . tilePairs = tilePairs ; }
tr	KEY	public int getVitesse ( ) { return vitesse ; }
tr	KEY	public void updatePos ( int playerID , char direction ) ;
tr	IDF	static public Gson build ( ServiceProxyMaker serviceProxyMaker ) { GsonBuilder builder = new GsonBuilder ( ) ; builder . registerTypeHierarchyAdapter ( ServiceProxy . class , new JsonServiceProxyAdapter ( serviceProxyMaker ) ) . disableHtmlEscaping ( ) ; return builder . create ( ) ; }
tr	KEY	public void setId ( int id ) { this . id = id ; }
tr	IDF	public static void writeFile ( File file , String text ) { writeFile ( file , new String [ ] { text } ) ; }
tr	IDF	public FileRenamerException ( Throwable cause ) { super ( cause ) ; }
tr	IDF	public void setChatRoom ( String name ) { currChatRoomName = name ; setDestination ( chatRooms . get ( name ) ) ; System . out . println ( "NEW CHATROOM (" + name + "  " + currChatRoom + ")" ) ; }
tr	IDF	public List < Integer > grayCode ( int n ) { List < Integer > result ; if ( n <= 0 ) { result = new ArrayList < Integer > ( ) ; result . add ( 0 ) ; } else { result = grayCode ( n - 1 ) ; int prevSize = result . size ( ) ; for ( int i = prevSize - 1 ; i >= 0 ; i -- ) { int num = result . get ( i ) ; num |= 1 << ( n - 1 ) ; result . add ( num ) ; } } return result ; }
tr	IDF	public void setSectionInformation ( JLabel sectionInformation ) { this . sectionInformation = sectionInformation ; }
tr	KEY	public boolean go ( ) { return ready ; }
tr	KEY	public float ( ) { this ( WIND_NON_ZERO , INIT_SIZE ) ; }
tr	IDF	private InterruptInputStream ( InputStream inputStream , int targetIndex ) { this . inputStream = inputStream ; this . targetIndex = targetIndex ; }
tr	KEY	public JMenuItem getItemCredits ( ) { return this . item_fichier_credits ; }
tr	KEY	protected int getNumOfRows ( ) { return t . size ( ) ; }
tr	IDF	@ Override public Message < ClientProtocolParameters > handleMessage ( ServerNodeStatusUpdateMessage message , void params ) { statusManager . onStatusUpdateRequested ( ) ; return new NodeStatusUpdateMessage ( messageManager . getProtocolParameters ( ) , statusManager . getStatuses ( ) ) ; }
tr	IDF	public void isBeingDestroyed ( ) { finishReader ( ) ; removeDevice ( "Removing " + getName ( ) ) ; }
tr	IDF	public void execute ( ) { hottub . setTemperature ( 98 ) ; hottub . off ( ) ; }
tr	IDF	public OperatingEnvironment operatingEnvironmentBuilder ( ) { OperatingEnvironment OEB = new OperatingEnvironment ( ) ; OEB . setFactors ( factorsBuilder ( ) ) ; OEB . setSubFactors ( subFactorsBuilder ( ) ) ; return OEB ; }
tr	KEY	public Usuario ( ) { }
tr	KEY	protected abstract void connectionWithClientBroken ( INDIClient client ) ;
tr	IDF	public void move ( ) { if ( y > world . level . getHeight ( ) * 16 + 16 && deadTime <= 0 ) { if ( world . recorder != null ) world . recorder . killSuicideRecord ( this ) ; deadTime = 1 ; } wingTime ++ ; if ( deadTime > 0 ) { deadTime -- ; if ( deadTime == 0 ) { deadTime = 1 ; for ( int i = 0 ; i < 8 ; i ++ ) { world . addSprite ( new Sparkle ( ( int ) ( x + Math . random ( ) * 16 - 8 ) + 4 , ( int ) ( y - Math . random ( ) * 8 ) + 4 , ( float ) ( Math . random ( ) * 2 - 1 ) , ( float ) Math . random ( ) * - 1 , 0 , 1 , 5 ) ) ; } spriteContext . removeSprite ( this ) ; } if ( flyDeath ) { x += xa ; y += ya ; ya *= 0.95 ; ya += 1 ; } return ; } float sideWaysSpeed = 1.75f ; if ( xa > 2 ) { facing = 1 ; } if ( xa < - 2 ) { facing = - 1 ; } xa = facing * sideWaysSpeed ; mayJump = ( onGround ) ; xFlipPic = facing == - 1 ; runTime += ( Math . abs ( xa ) ) + 5 ; int runFrame = ( ( int ) ( runTime / 20 ) ) % 2 ; if ( ! onGround ) { runFrame = 1 ; } if ( ! move ( xa , 0 ) ) facing = - facing ; onGround = false ; move ( 0 , ya ) ; ya *= winged ? 0.95f : 0.85f ; if ( onGround ) { xa *= GROUND_INERTIA ; } else { xa *= AIR_INERTIA ; } if ( ! onGround ) { if ( winged ) { ya += 0.6f ; } else { ya += 2 ; } } else if ( winged ) { ya = - 10 ; } if ( winged ) runFrame = wingTime / 4 % 2 ; xPic = runFrame ; }
tr	KEY	public void setNullableError ( boolean nullableError ) { this . nullableError = nullableError ; }
tr	IDF	public void setCampos ( ArrayList < String > campos ) { this . campos = campos ; }
tr	IDF	public static String fill ( String a , String b , int l ) { assert ! b . isEmpty ( ) ; String rv = a ; while ( rv . length ( ) < l ) { rv = b + rv ; } return rv ; }
tr	KEY	public DrawFestivalCardAction ( int actionID ) { super ( actionID ) ; }
tr	IDF	CharacterLocations characterLocations ( ) ;
tr	IDF	@ Override public Set < Entry < K , V >> entrySet ( ) { return Collections . unmodifiableSet ( map . entrySet ( ) ) ; }
tr	KEY	public void windowDeactivated ( final WindowEvent e ) { }
tr	KEY	public int getY ( ) { return y ; }
tr	KEY	public long getNumber ( ) { return number ; }
tr	KEY	public void setAdditionalScreenRequirements ( boolean additionalScreenRequirements ) { this . additionalScreenRequirements = additionalScreenRequirements ; }
tr	IDF	@ Override public INDINumberProperty getProperty ( ) { return ( INDINumberProperty ) super . getProperty ( ) ; }
tr	KEY	public void windowIconified ( final WindowEvent e ) { }
tr	IDF	@ SuppressWarnings ( "rawtypes" ) public static String valueToString ( Object value ) throws JSONException { if ( value == null || value . equals ( null ) ) { return "null" ; } if ( value instanceof JSONString ) { Object object ; try { object = ( ( JSONString ) value ) . toJSONString ( ) ; } catch ( Exception e ) { throw new JSONException ( e ) ; } if ( object instanceof String ) { return ( String ) object ; } throw new JSONException ( "Bad value from toJSONString: " + object ) ; } if ( value instanceof Number ) { return numberToString ( ( Number ) value ) ; } if ( value instanceof boolean || value instanceof JSONObject || value instanceof JSONArray ) { return value . toString ( ) ; } if ( value instanceof Map ) { return new JSONObject ( ( Map ) value ) . toString ( ) ; } if ( value instanceof Collection ) { return new JSONArray ( ( Collection ) value ) . toString ( ) ; } if ( value . getClass ( ) . isArray ( ) ) { return new JSONArray ( value ) . toString ( ) ; } return quote ( value . toString ( ) ) ; }
tr	KEY	public double componentProduct ( ) { return x * y ; }
tr	KEY	public int unpack ( int packedRGB , int component ) { return packedRGB >> 8 * ( 2 - component ) & 255 ; }
tr	KEY	public ShieldAspect ( ) { this . name = "shield" ; }
tr	KEY	private static boolean isDivisible ( final int number , final int divisor ) { final int result = number / divisor ; return ( number == ( result * divisor ) ) ; }
tr	KEY	@ Override public boolean equals ( Object obj ) { if ( this == obj ) return true ; if ( obj == null ) return false ; if ( getClass ( ) != obj . getClass ( ) ) return false ; Toets other = ( Toets ) obj ; if ( id != other . id ) return false ; return true ; }
tr	KEY	public static float min ( final float a , final float b ) { if ( a > b ) { return b ; } if ( a < b ) { return a ; } if ( a != b ) { return float . NaN ; } int bits = float . floatToRawIntBits ( a ) ; if ( bits == 80000000 ) { return a ; } return b ; }
tr	IDF	private void exitHelpButtonActionPerformed ( java . awt . event . ActionEvent evt ) { java . awt . EventQueue . invokeLater ( new Runnable ( ) { public void run ( ) { SnakeWithPartner . mainFrame = new MainFrame ( ) ; new MainFrame ( ) . setVisible ( true ) ; } } ) ; this . dispose ( ) ; }
tr	IDF	private void loadPackageObjects ( ManifestBuilder builder , Element parent ) { NodeList children = parent . getChildNodes ( ) ; EnumSet < TIPPSectionType > seenSections = EnumSet . noneOf ( TIPPSectionType . class ) ; Map < TIPPFile , String > locationMap = new HashMap < > ( ) ; for ( int i = 0 ; i < children . getLength ( ) ; i ++ ) { if ( children . item ( i ) . getNodeType ( ) != Node . ELEMENT_NODE ) { continue ; } TIPPSection section = loadPackageObjectSection ( ( Element ) children . item ( i ) , errorHandler , locationMap ) ; if ( seenSections . contains ( section . getType ( ) ) ) { errorHandler . reportError ( TIPPErrorType . DUPLICATE_SECTION_IN_MANIFEST , "Duplicate section: " + section . getType ( ) , null ) ; continue ; } seenSections . add ( section . getType ( ) ) ; builder . addSection ( section ) ; } builder . setLocationMap ( locationMap ) ; }
tr	KEY	public void setFrequency ( int frequency ) { this . frequency = frequency ; }
tr	IDF	@ Override public float damage ( float damage ) { if ( undead ) { return float . MAX_VALUE ; } hp -= damage ; if ( hp < 0 ) { hp = 0 ; } return hp ; }
tr	KEY	public RoleDAO ( ) { super ( Role . class ) ; }
tr	KEY	public void incrementNumberOfWins ( ) ;
tr	IDF	@ Basic @ Column ( name = "activate_key" ) public String getActivateKey ( ) { return activateKey ; }
tr	IDF	public Compiler ( Node root ) { super ( root ) ; }
tr	IDF	public void merge ( String mp3Input1 , String mp3Input2 , String outFile ) { _processString = "avconv -i '" + mp3Input1 + "' -i '" + mp3Input2 + "' -filter_complex amix=inputs=2:duration=longest '" + outFile + "'" ; _isWorking = true ; this . execute ( ) ; }
tr	IDF	@ Test public void bottomRight2x5 ( ) throws Exception { GridPrinter g = new GridPrinter ( new LocalPosition ( 4 , 0 ) , new LocalMap ( 5 , 2 ) ) ; assertEquals ( "|       |       |       |       |       |\n" + "|       |       |       |       |  you  |\n" , g . print ( "you" ) ) ; }
tr	IDF	public static INDITextProperty createSaveableTextProperty ( INDIDriver driver , String name , PropertyStates state , PropertyPermissions permission ) throws IllegalArgumentException { INDITextProperty tp = loadTextProperty ( driver , name ) ; if ( tp == null ) { tp = new INDITextProperty ( driver , name , state , permission ) ; tp . setSaveable ( true ) ; } return tp ; }
tr	KEY	public int getTileY ( ) { return tileY ; }
tr	KEY	public abstract void parse ( String responseString ) ;
tr	KEY	public double Recall ( ) { return corr / ( totg + 1e-20 ) ; }
tr	KEY	public Builder userBuying ( boolean family ) { this . family = family ; return this ; }
tr	IDF	public int hashCode ( ) { if ( hash_code == Integer . MIN_VALUE ) hash_code = hashCode ( tree , 1 ) ; return hash_code ; }
tr	IDF	@ Test public void espiarPeca ( ) throws CasaOcupadaException { Peca peca = reiBranco ; tabuleiro . colocarPeca ( new Posicao ( 1 , 1 ) , peca ) ; assert . assertEquals ( peca , tabuleiro . espiarPeca ( new Posicao ( 1 , 1 ) ) ) ; assert . assertEquals ( peca , tabuleiro . espiarPeca ( new Posicao ( 1 , 1 ) ) ) ; }
tr	KEY	public final OrderedProperties put ( final String key , final long value ) { super . put ( key , long . toString ( value ) ) ; return this ; }
tr	KEY	@ Override public int getSelection ( ) { return 0 ; }
tr	KEY	public synchronized int xgetL4InitialDelay ( ) { return l4ID ; }
tr	KEY	public double getDistance ( ) { return DISTANCE ; }
tr	KEY	public int getStart_row ( ) { return start_row ; }
tr	KEY	public int getIntExit ( ) { return intExit ; }
tr	KEY	protected abstract void createGameZonePanel ( ) ;
tr	IDF	public void set ( int key , int value ) { map . put ( key , value ) ; }
tr	IDF	public TinyUrlWebServiceCallbackHandler ( Object clientData ) { this . clientData = clientData ; }
tr	KEY	public int getMouseY ( ) { return mouseLocation . y ; }
tr	IDF	public void actionPerformed ( ActionEvent e ) { String layer_choice = getCommand ( layer ) ; String object_choice = getCommand ( object ) ; LinkedList < String > alternatives = null ; try { if ( layer_choice . equals ( InfoEnum . Layer . BUSINESS . name ( ) ) ) { Inference . securityGoalOperationalization ( ms . req_bus_model , Integer . valueOf ( object_choice ) ) ; } else if ( layer_choice . equals ( InfoEnum . Layer . APPLICATION . name ( ) ) ) { Inference . securityGoalOperationalization ( ms . req_app_model , Integer . valueOf ( object_choice ) ) ; } else if ( layer_choice . equals ( InfoEnum . Layer . PHYSICAL . name ( ) ) ) { Inference . securityGoalOperationalization ( ms . req_phy_model , Integer . valueOf ( object_choice ) ) ; } else { NewCommandPanel . logger . severe ( "Layer selection error!" ) ; } JOptionPane . showMessageDialog ( frmMuserControlPanel , "Finish Operationalization of critical security goals!" ) ; } catch ( IOException e1 ) { e1 . printStackTrace ( ) ; } catch ( ScriptException e1 ) { e1 . printStackTrace ( ) ; } }
tr	KEY	double getMaxSecLevel ( ) ;
tr	IDF	public T visitASTSetScale ( ASTSetScale form , S state ) throws FractalException ;
tr	KEY	public int getIdcliente ( ) { return idcliente ; }
tr	KEY	public synchronized int xgetRTRepeatDelay ( ) { return rtRD ; }
tr	KEY	public synchronized int xgetD3InitialDelay ( ) { return d3ID ; }
tr	KEY	public boolean endGame ( ) { return choice ; }
tr	IDF	public static void main ( String aa [ ] ) { int [ ] array = new int [ 5 ] ; for ( int i = 4 ; i < 9 ; i ++ ) { array [ i - 4 ] = i ; } for ( int i = 0 ; i < array . length ; i ++ ) System . out . print ( array [ i ] ) ; System . out . println ( ) ; array = rotate ( array , 2 ) ; for ( int i = 0 ; i < array . length ; i ++ ) System . out . print ( array [ i ] ) ; }
tr	KEY	public void run ( ) { new InterfazAdministrador ( ) . setVisible ( true ) ; }
tr	KEY	public JSONWriter value ( double d ) throws JSONException { return this . value ( new double ( d ) ) ; }
tr	IDF	private boolean oisRegistred ( ObjectInputStream ois ) { Iterator < Connection > iter = activeConnections . iterator ( ) ; Connection c ; while ( iter . hasNext ( ) ) { c = iter . next ( ) ; if ( c . getOIS ( ) != null && c . getOIS ( ) . equals ( ois ) ) return true ; } return false ; }
tr	IDF	private static long getNumPaths ( int max , int row , int col , int num , Map < String , long > memo ) { String key = buildKeyPadKey ( row , col ) ; if ( ! KEYPAD_MAP . containsKey ( key ) ) { return 0 ; } if ( max == num ) { return + 1 ; } long result = 0 ; result += getResult ( max , row - 1 , col - 2 , num + 1 , memo ) ; result += getResult ( max , row - 1 , col + 2 , num + 1 , memo ) ; result += getResult ( max , row + 1 , col - 2 , num + 1 , memo ) ; result += getResult ( max , row + 1 , col + 2 , num + 1 , memo ) ; result += getResult ( max , row - 2 , col - 1 , num + 1 , memo ) ; result += getResult ( max , row - 2 , col + 1 , num + 1 , memo ) ; result += getResult ( max , row + 2 , col - 1 , num + 1 , memo ) ; result += getResult ( max , row + 2 , col + 1 , num + 1 , memo ) ; String keyPadKey = buildKeyPadKey ( row , col ) ; String memoKey = buildMemoKey ( num , KEYPAD_MAP . get ( keyPadKey ) ) ; result += 1 ; memo . put ( memoKey , result ) ; return result ; }
tr	IDF	@ Override public void propertyChange ( PropertyChangeEvent evt ) { if ( evt . getPropertyName ( ) != null && evt . getNewValue ( ) != null ) { setModelProperty ( evt . getPropertyName ( ) , evt . getNewValue ( ) ) ; } registeredView . modelPropertyChange ( evt ) ; }
tr	IDF	@ Override public void actionPerformed ( ActionEvent e ) { personalizeButton . setSelected ( false ) ; setParameters ( index , rows , columns , mines , false ) ; }
tr	IDF	public void setMail ( String mail ) { this . mail = mail ; }
tr	KEY	public void onDisconnected ( ) ;
tr	IDF	public static void main ( String score ) { @ SuppressWarnings ( "empty-statement" ) Moves answers = new Moves ( ) ; System . out . println ( "Let's begin!" ) ; int guess , tiles , x = 0 ; tiles = 16 ; for ( ; x <= tiles ; x ++ ) { System . out . println ( "What is your first guess?" ) ; Scanner answer1 = new Scanner ( System . in ) ; x ++ ; System . out . println ( "What is your next guess?" ) ; Scanner answer2 = new Scanner ( System . in ) ; if ( answer1 == answer2 ) { tiles -- ; System . out . println ( "You got one!  Try again!" ) ; } else { System . out . println ( "Try again!" ) ; } } System . out . println ( "You won the game!" ) ; guess = x / 2 ; System . out . println ( "Moves: " + guess ) ; }
tr	KEY	public static String get_symbol ( String name ) { switch ( name ) { case "AntiAir" : return "AA" ; case "BCopter" : return "BC" ; case "Bomber" : return "BB" ; case "BShip" : return "BS" ; case "Cruiser" : return "CS" ; case "Fighter" : return "FT" ; case "Infantry" : return "IF" ; case "MdTank" : return "MT" ; case "Mech" : return "MC" ; case "Megatank" : return "MG" ; case "Neotank" : return "NT" ; case "Recon" : return "RC" ; case "Stealth" : return "ST" ; case "Sub" : return "SB" ; case "Tank" : return "TK" ; case "Artillery" : return "AT" ; case "Carrier" : return "CR" ; case "Missiles" : return "MS" ; case "Rockets" : return "RK" ; case "APCarrier" : return "AP" ; case "Lander" : return "LD" ; case "TCopter" : return "TC" ; default : throw new IllegalArgumentException ( "[Unit.get_symbol] unable to parse name input (" + name + ")" ) ; } }
tr	IDF	@ Override protected void post ( Message request , Message response ) { PersistenceManager pm = PMF . getInstance ( ) . getPersistenceManager ( ) ; Transaction tx = pm . currentTransaction ( ) ; try { tx . begin ( ) ; PersistentDocument doc = new PersistentDocument ( ) ; doc . setId ( request . get ( Document . ID ) ) ; doc . setType ( request . get ( Document . TYPE ) ) ; doc . setUserId ( request . getContext ( ) . getLoggedInUserProfileId ( ) ) ; doc . setContentString ( request . toJson ( ) ) ; pm . makePersistent ( doc ) ; tx . commit ( ) ; if ( response == null ) { response = new Message ( request . getContext ( ) ) ; } response . put ( System . RESULT_CODE , "0" ) ; response . put ( System . RESULT_MSG , "Success" ) ; } catch ( Exception e ) { if ( tx . isActive ( ) ) { tx . rollback ( ) ; } if ( response == null ) { response = new Message ( request . getContext ( ) ) ; } response . put ( System . RESULT_CODE , "-1" ) ; response . put ( System . RESULT_MSG , "Error accessing the data store: " + e . getMessage ( ) ) ; } finally { pm . close ( ) ; } }
tr	KEY	public RiceTileAction ( ) { }
tr	KEY	protected boolean isClicked ( ) { return clicked ; }
tr	IDF	public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; System . out . print ( "Enter a whole positive number: " ) ; int number = scanner . nextInt ( ) ; scanner . close ( ) ; if ( number > 0 ) { System . out . printf ( "All the numbers from 1 to %d are:\n" , number ) ; for ( int i = 1 ; i <= number ; i ++ ) { System . out . print ( i ) ; if ( i < number ) { System . out . print ( " " ) ; } } } else { System . out . println ( "Error! - Invalid Input number!!!" ) ; } }
tr	IDF	public ArrayList < Position > findPositions ( Position currentPosition , int minRange , int maxRange ) { int x0 = currentPosition . get_x ( ) ; int y0 = currentPosition . get_y ( ) ; ArrayList < Position > positions = new ArrayList < Position > ( ) ; for ( int i = - 1 * maxRange ; i <= maxRange ; i ++ ) { for ( int j = - 1 * maxRange ; j <= maxRange ; j ++ ) { if ( ( i == 0 ) && ( j == 0 ) ) { continue ; } int x1 = i + x0 ; int y1 = j + y0 ; if ( ! isValidLocation ( x1 , y1 ) ) { continue ; } int distance = Math . abs ( x1 - x0 ) + Math . abs ( y1 - y0 ) ; if ( distance >= minRange && distance <= maxRange ) { positions . add ( new Position ( x1 , y1 ) ) ; } } } return positions ; }
tr	KEY	protected abstract long doOperation ( long leftValue , long rightValue ) ;
tr	KEY	public void destroyConnection ( ) ;
tr	IDF	@ Override protected String getXMLPropertyDefinitionInit ( ) { String xml = "<defLightVector device=\"" + getDriver ( ) . getName ( ) + "\" name=\"" + getName ( ) + "\" label=\"" + getLabel ( ) + "\" group=\"" + getGroup ( ) + "\" state=\"" + Constants . getPropertyStateAsString ( getState ( ) ) + "\" timestamp=\"" + INDIDateFormat . getCurrentTimestamp ( ) + "\">" ; return xml ; }
tr	KEY	public void setDuration ( long duration ) { this . DURATION = duration ; }
tr	IDF	public boolean isNull ( String key ) { return JSONObject . null . equals ( this . opt ( key ) ) ; }
tr	KEY	public Action pressDelete ( ) { if ( selectedAction != null ) { return selectedAction . pressDelete ( this ) ; } return null ; }
tr	IDF	public Wait ( double time ) { setTimeout ( time ) ; }
tr	KEY	public static String dataBaseName ( ) { return lePropriedade ( "Database.Name" ) ; }
tr	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { limpiarButtonActionPerformed ( evt ) ; }
tr	IDF	public void disconnecFromServer ( ) { adapter . disconnect ( playerID ) ; }
tr	IDF	private static void testCase2 ( ) { Node node1 = new Node ( 1 ) ; Node node2 = new Node ( 2 ) ; Node node3 = new Node ( 3 ) ; Node node4 = new Node ( 4 ) ; Node node5 = new Node ( 5 ) ; Node node6 = new Node ( 6 ) ; Node node7 = new Node ( 7 ) ; Node node8 = new Node ( 8 ) ; Node node9 = new Node ( 9 ) ; node5 . left = node3 ; node3 . left = node1 ; node3 . right = node6 ; node1 . right = node2 ; node5 . right = node8 ; node8 . left = node7 ; node8 . right = node9 ; node7 . left = node4 ; System . out . println ( isValid ( node5 ) ) ; }
tr	KEY	boolean isOuterRing ( ) ;
tr	IDF	public void loadLanguageInfo ( ) throws IOException { coarseMap = new HashMap < String , String > ( ) ; try { BufferedReader br = new BufferedReader ( new FileReader ( options . unimapFile ) ) ; String str = null ; while ( ( str = br . readLine ( ) ) != null ) { String [ ] data = str . split ( "\\s+" ) ; coarseMap . put ( data [ 0 ] , data [ 1 ] ) ; } br . close ( ) ; coarseMap . put ( "<root-POS>" , "ROOT" ) ; } catch ( Exception e ) { System . out . println ( "Warning: couldn't find coarse POS map for this language" ) ; } int ccDepType = 0 ; PossibleLang lang = options . lang ; if ( lang == PossibleLang . Arabic || lang == PossibleLang . Slovene || lang == PossibleLang . Chinese || lang == PossibleLang . Czech || lang == PossibleLang . Dutch ) { ccDepType = 0 ; } else if ( lang == PossibleLang . Bulgarian || lang == PossibleLang . German || lang == PossibleLang . Portuguese || lang == PossibleLang . Spanish ) { ccDepType = 1 ; } else if ( lang == PossibleLang . Danish || lang == PossibleLang . English08 ) { ccDepType = 2 ; } else if ( lang == PossibleLang . Japanese ) { ccDepType = 3 ; } else if ( lang == PossibleLang . Swedish ) { ccDepType = 4 ; } else if ( lang == PossibleLang . Turkish ) { ccDepType = 5 ; } else { ccDepType = 0 ; } synFactory . ccDepType = ccDepType ; conjWord = new HashSet < String > ( ) ; switch ( lang ) { case Turkish : conjWord . add ( "ve" ) ; conjWord . add ( "veya" ) ; break ; case Arabic : conjWord . add ( "w" ) ; conjWord . add ( ">w" ) ; conjWord . add ( ">n" ) ; break ; case Bulgarian : conjWord . add ( "\u0438" ) ; conjWord . add ( "\u0438\u043B\u0438" ) ; break ; case Chinese : conjWord . add ( "\u548C" ) ; conjWord . add ( "\u6216" ) ; break ; case Czech : conjWord . add ( "a" ) ; conjWord . add ( "ale" ) ; conjWord . add ( "i" ) ; conjWord . add ( "nebo" ) ; break ; case Danish : conjWord . add ( "og" ) ; conjWord . add ( "eller" ) ; break ; case Dutch : conjWord . add ( "en" ) ; conjWord . add ( "of" ) ; break ; case English08 : conjWord . add ( "and" ) ; conjWord . add ( "or" ) ; break ; case German : conjWord . add ( "und" ) ; conjWord . add ( "oder" ) ; break ; case Japanese : conjWord . add ( "ya" ) ; break ; case Portuguese : conjWord . add ( "e" ) ; conjWord . add ( "ou" ) ; break ; case Slovene : conjWord . add ( "in" ) ; conjWord . add ( "ali" ) ; break ; case Spanish : conjWord . add ( "y" ) ; conjWord . add ( "e" ) ; conjWord . add ( "o" ) ; break ; case Swedish : conjWord . add ( "och" ) ; conjWord . add ( "eller" ) ; break ; default : break ; } }
tr	KEY	public int startIndex ( int i ) { return st [ i ] ; }
tr	IDF	public void setDestination ( List < Destination > destination ) { this . destination = destination ; }
tr	IDF	@ Basic @ Column ( name = "info" ) public String getInfo ( ) { return info ; }
tr	KEY	public int getPot ( ) { return pot ; }
tr	IDF	public int getLength ( ) { if ( intInputVerifier . verify ( len ) ) { int num = 0 ; try { num = Integer . parseInt ( len . getText ( ) ) ; } catch ( NumberFormatException nfe ) { } return num ; } return - 1 ; }
tr	IDF	static void isort ( float [ ] a , int off , int len ) { for ( int i = off + 1 , end = off + len ; i < end ; i ++ ) { float ai = a [ i ] ; int j = i - 1 ; for ( ; j >= off && a [ j ] > ai ; j -- ) { a [ j + 1 ] = a [ j ] ; } a [ j + 1 ] = ai ; } }
tr	KEY	@ Override public int getRuleIndex ( ) { return RULE_bool ; }
tr	KEY	public JFrameScreen ( int width , int height ) { this ( false , width , height ) ; }
tr	IDF	public boolean removeListener ( Translatable listener ) { Iterator < Translatable > it = languageChangedListeners . iterator ( ) ; while ( it . hasNext ( ) ) { Translatable langListener = it . next ( ) ; if ( listener == langListener ) { it . remove ( ) ; return true ; } } return false ; }
tr	KEY	public Action ( ) { this . actionID = - 1 ; }
tr	KEY	public void run ( ) { new InterfazEmpleado ( ) . setVisible ( true ) ; }
tr	KEY	public abstract boolean isDevice ( String deviceIdentifier ) ;
tr	KEY	public int getId ( ) { return id ; }
tr	IDF	@ Override public String toString ( ) { return title + " - " + artist + " [" + credit + "]" ; }
tr	KEY	public void setIdproveedor ( int idproveedor ) { this . idproveedor = idproveedor ; }
tr	IDF	private int compareTo ( Object subtree1 , int base1 , Object subtree2 , int base2 , int lo , int hi ) { if ( lo == hi ) return 0 ; else if ( ! ( subtree1 instanceof Node ) ) { if ( ! ( subtree2 instanceof Node ) ) { Object [ ] ary1 = ( Object [ ] ) subtree1 , ary2 = ( Object [ ] ) subtree2 ; for ( int i = lo ; i < hi ; ++ i ) { int comp_res = compareElements ( ary1 [ i - base1 ] , ary2 [ i - base2 ] ) ; if ( comp_res != 0 ) return comp_res ; } return 0 ; } else return - compareTo ( subtree2 , base2 , subtree1 , base1 , lo , hi ) ; } else { Node node1 = ( Node ) subtree1 ; Object left1 = node1 . left ; int sizl1 = treeSize ( left1 ) ; int new_hi = base1 + sizl1 ; RankTrimResult rtr1 = rankTrim ( left1 , base1 , lo , new_hi ) ; RankTrimResult rtr2 = rankTrim ( subtree2 , base2 , lo , new_hi ) ; int left_comp_res = compareTo ( rtr1 . subtree , rtr1 . base , rtr2 . subtree , rtr2 . base , lo , new_hi ) ; if ( left_comp_res != 0 ) return left_comp_res ; else { int new_lo = new_hi ; RankTrimResult rtr3 = rankTrim ( node1 . right , new_lo , new_lo , hi ) ; RankTrimResult rtr4 = rankTrim ( subtree2 , base2 , new_lo , hi ) ; return compareTo ( rtr3 . subtree , rtr3 . base , rtr4 . subtree , rtr4 . base , new_lo , hi ) ; } } }
tr	IDF	public void handleCollsion ( final Entity entity ) { switch ( direction ) { case NE : direction = SW ; break ; case NW : direction = SE ; break ; case SE : direction = NE ; break ; case SW : direction = NW ; break ; } if ( entity instanceof Paddle ) { while ( intersects ( entity ) ) { update ( .1 ) ; } } if ( speed < MAXIMUM_SPEED ) { speed += SPEED_INCREMENT ; } }
tr	IDF	@ Override public void render ( VGame vg , VObject vo , VPoint cam , VGraphics g ) { if ( vo . gi ( "ow" ) != vg . player && ! vg . vl . get_visible ( vo . gi ( "x" ) , vo . gi ( "y" ) ) && vo . gi ( "hp" ) > 0 ) { return ; } int vs = Math . abs ( vo . gi ( "vs" ) ) ; if ( vs > 200 ) { vs = 200 ; } else if ( vs < 0 ) { vs = 0 ; } Color c = new Color ( 255 - vs , 255 , 255 - vs , 255 - vs ) ; if ( vo . gi ( "hp" ) < 0 ) { c = ( new Color ( 50 , 50 , 50 , Math . max ( 0 , 255 - vo . gi ( "rm_time" ) ) ) ) ; } if ( vo . type . g ( "model" ) . equals ( "sprite" ) ) { g . setColor ( c ) ; if ( vo . gi ( "pt" ) > vo . type . gi ( "ptime" ) / 2 - 50 ) { int pt = vo . gi ( "pt" ) ; if ( pt > vo . type . gi ( "ptime" ) / 2 ) { pt = Math . min ( Math . max ( ( 20 + ( pt - vo . type . gi ( "ptime" ) ) / 5 ) , 10 ) , 19 ) ; } else if ( pt <= vo . type . gi ( "ptime" ) / 2 ) { pt = vo . type . gi ( "ptime" ) / 2 - pt ; pt = Math . min ( Math . max ( ( 50 - pt ) / 5 , 0 ) , 10 ) ; } Sprite . render ( "building_back" , g , pt , new VPoint ( vo . gd ( "x" ) - cam . x , vo . gd ( "y" ) - cam . y , vo . gd ( "z" ) - cam . z ) ) ; } if ( vo . gi ( "pt" ) < vo . type . gi ( "ptime" ) / 3 * 2 ) { Sprite . render ( vo . type . g ( "sprite" ) , g , Math . min ( vo . gi ( "pt" ) / 5 , 9 ) , new VPoint ( vo . gd ( "x" ) - cam . x , vo . gd ( "y" ) - cam . y , vo . gd ( "z" ) - cam . z ) ) ; } if ( vo . gi ( "pt" ) > 0 ) { if ( r . nextInt ( 30 ) == 0 ) { vo . s ( "wlx" , r . nextInt ( 120 ) - 60 ) ; vo . s ( "wly" , r . nextInt ( 120 ) - 60 ) ; vo . s ( "wlz" , r . nextInt ( 70 ) ) ; } Sprite . render ( "welding" , g , r . nextInt ( 4 ) , new VPoint ( vo . gd ( "x" ) + vo . gd ( "wlx" ) - cam . x , vo . gd ( "y" ) + vo . gd ( "wly" ) - cam . y , vo . gd ( "z" ) + vo . gd ( "wlz" ) - cam . z ) ) ; Sprite . render ( "welding" , g , r . nextInt ( 4 ) , new VPoint ( vo . gd ( "x" ) + vo . gd ( "wlx" ) - cam . x , vo . gd ( "y" ) + vo . gd ( "wly" ) - cam . y , vo . gd ( "z" ) + vo . gd ( "wlz" ) - cam . z ) ) ; Sprite . render ( "welding" , g , r . nextInt ( 4 ) , new VPoint ( vo . gd ( "x" ) + ( - vo . gd ( "wlx" ) - 20 ) - cam . x , vo . gd ( "y" ) + vo . gd ( "wly" ) - cam . y , vo . gd ( "z" ) + ( 50 - vo . gd ( "wlz" ) ) - cam . z ) ) ; } if ( vo . gi ( "pt" ) > vo . type . gi ( "ptime" ) / 2 - 50 ) { int pt = vo . gi ( "pt" ) ; if ( pt > vo . type . gi ( "ptime" ) / 2 ) { pt = Math . min ( Math . max ( ( 20 + ( pt - vo . type . gi ( "ptime" ) ) / 5 ) , 10 ) , 19 ) ; } else if ( pt <= vo . type . gi ( "ptime" ) / 2 ) { pt = vo . type . gi ( "ptime" ) / 2 - pt ; pt = Math . min ( Math . max ( ( 50 - pt ) / 5 , 0 ) , 10 ) ; } Sprite . render ( "building" , g , pt , new VPoint ( vo . gd ( "x" ) - cam . x , vo . gd ( "y" ) - cam . y , vo . gd ( "z" ) - cam . z ) ) ; } } if ( vo . type . g ( "model" ) . equals ( "voxel" ) ) { g . setColor ( c ) ; VoxelModel . render ( vo . type . g ( "voxelmodel" ) , g , new VPoint ( vo . gd ( "x" ) - cam . x , vo . gd ( "y" ) - cam . y , vo . gd ( "z" ) - cam . z ) , new VPoint ( 0 , vo . gd ( "ay" ) , vo . gd ( "a" ) ) ) ; VPoint vp ; vp = VConvert . to2DPoint ( ( int ) ( vo . gd ( "x" ) - cam . x ) , ( int ) ( vo . gd ( "y" ) - cam . y ) , ( int ) ( vo . gd ( "z" ) - cam . z ) ) ; VPoint vp2 = VConvert . to2DPoint ( ( int ) ( vo . gd ( "x" ) - cam . x ) , ( int ) ( vo . gd ( "y" ) - cam . y ) , ( int ) ( 0 ) ) ; g . setColor ( new Color ( 255 , 255 , 255 , 0 ) ) ; } int v = vo . type . gi ( "turrets" ) ; for ( int i = 0 ; i < v ; i ++ ) { g . setColor ( c ) ; VoxelModel . render ( vo . type . g ( "turret" + i + "_voxelmodel" ) , g , new VPoint ( vo . gd ( "t" + i + "_x" ) - cam . x , vo . gd ( "t" + i + "_y" ) - cam . y , vo . gd ( "t" + i + "_z" ) - cam . z ) , new VPoint ( 0 , 0 , vo . gd ( "t" + i + "_ra" ) ) , new VPoint ( 0 , vo . gd ( "ay" ) , vo . gd ( "a" ) ) ) ; } VPoint vp = VConvert . to2DPoint ( vo . gd ( "x" ) - cam . x , vo . gd ( "y" ) - cam . y , vo . gd ( "z" ) - cam . z ) ; g . setTexture ( "power_shell.png" ) ; if ( vo . gi ( "ow" ) != vg . player ) { g . setTexture ( "enemy_detected.png" ) ; g . setColor ( new Color ( 255 , 100 , 0 , 255 ) ) ; g . drawRect ( ( int ) vp . x , ( int ) vp . y , 96 , 96 , 0 ) ; } g . setColor ( Color . WHITE ) ; if ( vo . gi ( "hp" ) != vo . type . gi ( "hp" ) ) { int hp = Math . min ( 10 , Math . max ( ( int ) ( vo . gd ( "hp" ) / vo . type . gd ( "hp" ) * 10.0 ) , 0 ) ) ; g . setTexture ( "icon/armor/" + hp + ".png" ) ; g . drawRect ( ( int ) vp . x , ( int ) vp . y - 35 , 22 , 22 , 0 ) ; } }
tr	IDF	public static String [ ] getNames ( JSONObject jo ) { int length = jo . length ( ) ; if ( length == 0 ) { return null ; } Iterator i = jo . keys ( ) ; String [ ] names = new String [ length ] ; int j = 0 ; while ( i . hasNext ( ) ) { names [ j ] = ( String ) i . next ( ) ; j += 1 ; } return names ; }
tr	KEY	public void pauseGame ( ) { sendMessage ( "pauseGame" ) ; }
tr	IDF	public void refreshPanel ( ) { userLijst . clear ( ) ; userInfoPanel . clear ( ) ; }
tr	KEY	private WordSearch ( ) { }
tr	KEY	private int newSequenceNumber ( ) { return ++ sequenceNumber ; }
tr	IDF	@ Override public void runTest ( ) { System . out . println ( pow ( 8.88023 , 3 ) ) ; System . out . println ( ) ; System . out . println ( Math . pow ( 8.88023 , 3 ) ) ; }
tr	KEY	public boolean isFilled ( ) { for ( int i = 0 ; i < grid . length ; ++ i ) { if ( grid [ i ] == 0 ) return false ; } return true ; }
tr	IDF	public boolean isExpired ( ) { return ( System . currentTimeMillis ( ) - createdTimeMillis ) >= lifeSpanMillis ; }
tr	IDF	private static String createMessage ( final class < ? > classTriedToChange , final String fieldTryingToChange , final Object valueOld , final Object valueNew ) { final StringBuilder builder = new StringBuilder ( ) ; if ( classTriedToChange != null ) builder . append ( "[Object => " + classTriedToChange . getName ( ) + "]" ) ; if ( fieldTryingToChange != null ) builder . append ( "[Field => " + fieldTryingToChange + "]" ) ; if ( valueOld != null ) builder . append ( "[Old => " + valueOld . toString ( ) + "]" ) ; if ( valueNew != null ) builder . append ( "[New => " + valueNew + "]" ) ; return builder . toString ( ) ; }
tr	IDF	public int hashCode ( ) { int _hashCode = 0 ; if ( idMsg != null ) { _hashCode = 29 * _hashCode + idMsg . hashCode ( ) ; } if ( mailer != null ) { _hashCode = 29 * _hashCode + mailer . hashCode ( ) ; } if ( recipient != null ) { _hashCode = 29 * _hashCode + recipient . hashCode ( ) ; } if ( headMsg != null ) { _hashCode = 29 * _hashCode + headMsg . hashCode ( ) ; } if ( bodyMsg != null ) { _hashCode = 29 * _hashCode + bodyMsg . hashCode ( ) ; } if ( statusMsg != null ) { _hashCode = 29 * _hashCode + statusMsg . hashCode ( ) ; } if ( typeMsg != null ) { _hashCode = 29 * _hashCode + typeMsg . hashCode ( ) ; } if ( sendOffDate != null ) { _hashCode = 29 * _hashCode + sendOffDate . hashCode ( ) ; } return _hashCode ; }
tr	IDF	@ Override public Object loadData ( ) throws FlickrException { return FlickrAPI . getInstance ( ) . getSets ( userId ) ; }
tr	IDF	Map < String , Integer > nbConnectedUsersBySockets ( ) ;
tr	KEY	public static final double [ ] getBorrowAmountRange ( ) { return borrowAmountRange ; }
tr	IDF	protected ArrayList < ArrayList < Integer >> getList ( ) { return t ; }
tr	IDF	public String toString ( ) { return "<" + x + "  " + y + ">" ; }
tr	IDF	public UserModel getUser ( String email ) throws WebshopAppException ;
tr	IDF	public void update ( InvitePk pk , Invite dto ) throws InviteDaoException { long t1 = System . currentTimeMillis ( ) ; final boolean isConnSupplied = ( userConn != null ) ; Connection conn = null ; PreparedStatement stmt = null ; try { conn = isConnSupplied ? userConn : ResourceManager . getConnection ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Executing " + SQL_UPDATE + " with DTO: " + dto ) ; } stmt = conn . prepareStatement ( SQL_UPDATE ) ; int index = 1 ; if ( dto . getIdInvite ( ) != null ) { stmt . setInt ( index ++ , dto . getIdInvite ( ) . intValue ( ) ) ; } else { stmt . setNull ( index ++ , java . sql . Types . INTEGER ) ; } stmt . setString ( index ++ , dto . getInviter ( ) . getEmail ( ) ) ; stmt . setString ( index ++ , dto . getInvitee ( ) . getEmail ( ) ) ; stmt . setString ( index ++ , dto . getRes ( ) . getInviteRes ( ) ) ; stmt . setTimestamp ( index ++ , dto . getInviteDate ( ) == null ? null : new java . sql . Timestamp ( dto . getInviteDate ( ) . getTime ( ) ) ) ; if ( pk . getIdInvite ( ) != null ) { stmt . setInt ( 6 , pk . getIdInvite ( ) . intValue ( ) ) ; } else { stmt . setNull ( 6 , java . sql . Types . INTEGER ) ; } int rows = stmt . executeUpdate ( ) ; reset ( dto ) ; long t2 = System . currentTimeMillis ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( rows + " rows affected (" + ( t2 - t1 ) + " ms)" ) ; } } catch ( Exception _e ) { logger . error ( "Exception: " + _e . getMessage ( ) , _e ) ; throw new InviteDaoException ( "Exception: " + _e . getMessage ( ) , _e ) ; } finally { ResourceManager . close ( stmt ) ; if ( ! isConnSupplied ) { ResourceManager . close ( conn ) ; } } }
tr	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButton1ActionPerformed ( evt ) ; }
tr	IDF	@ Override public void setPresenter ( TopicCardListPresenter presenter ) { this . presenter = presenter ; }
tr	KEY	public boolean ifDead ( ) { return dead ; }
tr	IDF	public SMTPSession ( Socket clientSocket ) { this . clientSocket = clientSocket ; }
tr	IDF	public void delete ( InvitePk pk ) throws InviteDaoException { long t1 = System . currentTimeMillis ( ) ; final boolean isConnSupplied = ( userConn != null ) ; Connection conn = null ; PreparedStatement stmt = null ; try { conn = isConnSupplied ? userConn : ResourceManager . getConnection ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Executing " + SQL_DELETE + " with PK: " + pk ) ; } stmt = conn . prepareStatement ( SQL_DELETE ) ; if ( pk . getIdInvite ( ) != null ) { stmt . setInt ( 1 , pk . getIdInvite ( ) . intValue ( ) ) ; } else { stmt . setNull ( 1 , java . sql . Types . INTEGER ) ; } int rows = stmt . executeUpdate ( ) ; long t2 = System . currentTimeMillis ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( rows + " rows affected (" + ( t2 - t1 ) + " ms)" ) ; } } catch ( Exception _e ) { logger . error ( "Exception: " + _e . getMessage ( ) , _e ) ; throw new InviteDaoException ( "Exception: " + _e . getMessage ( ) , _e ) ; } finally { ResourceManager . close ( stmt ) ; if ( ! isConnSupplied ) { ResourceManager . close ( conn ) ; } } }
tr	KEY	@ Override public void sendClientScore ( ) { }
tr	KEY	public int getSceneScale ( ) { return _sling . height ; }
tr	IDF	public static int maxSame ( String str ) { System . out . println ( str ) ; str = str . replaceAll ( "\\[" , "" ) . replaceAll ( "\\(" , "" ) . replaceAll ( "\\+" , "" ) . replaceAll ( "\\)" , "" ) . replaceAll ( "\\{" , "" ) . replaceAll ( "\\*" , "" ) . replaceAll ( "\\?" , "" ) . replaceAll ( "\\|" , "" ) . replaceAll ( "\\\\" , "" ) . replaceAll ( "\\^" , "" ) ; int max_length = 0 ; String max_str = "" ; while ( str . length ( ) > 0 ) { int length = str . length ( ) ; String first = str . substring ( 0 , 1 ) ; str = str . replaceAll ( first , "" ) ; if ( max_length < length - str . length ( ) ) { max_length = length - str . length ( ) ; max_str = first ; } } System . out . println ( max_length ) ; System . out . println ( max_str ) ; if ( max_length != 0 ) return max_length - 1 ; return 0 ; }
tr	KEY	public boolean isBlank ( ) { return isBlank ; }
tr	KEY	public void setIndiceAdversaire ( int indice ) { this . indice = indice ; }
tr	IDF	public void setChatRoomUsers ( List < String > chatRoomUsers ) { this . chatRoomUsers = chatRoomUsers ; }
tr	KEY	public boolean canPlaceDeveloperOnBoard ( ) { int index = getNextAvailableDeveloperSpot ( ) ; return index != - 1 ; }
tr	IDF	@ Override public void mouseEntered ( MouseEvent e ) { }
tr	KEY	public void setPlaced ( ) { placed = true ; }
tr	KEY	@ Override public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( obj == this ) { return true ; } if ( ! ( obj instanceof ArrayHashMapOption ) ) { return false ; } ArrayHashMapOption other = ( ArrayHashMapOption ) obj ; return other . store . equals ( this . store ) ; }
tr	KEY	public long getSmtpConnectLostTime ( ) { return connectLostTime ; }
tr	KEY	public void setAttackBonus ( int attackBonus ) { this . attackBonus = attackBonus ; }
tr	IDF	private void readObject ( ObjectInputStream strm ) throws IOException , ClassNotFoundException { hash_code = Integer . MIN_VALUE ; strm . defaultReadObject ( ) ; int size = strm . readInt ( ) ; Object t = null ; for ( int i = 0 ; i < size ; ++ i ) { Object e = strm . readObject ( ) ; t = with ( t , e , hashCode ( e ) ) ; } try { TreeField . set ( this , t ) ; } catch ( IllegalAccessException ia ) { throw new RuntimeException ( "FHashSet deserialization failed" , ia ) ; } }
tr	IDF	public void actionPerformed ( ActionEvent arg0 ) { comboBox . addItem ( textField . getText ( ) ) ; }
tr	KEY	public Keyword ( ) { }
tr	KEY	public static BeanstreamResponse emptyResponse ( ) { return new BeanstreamResponseBuilder ( ) . build ( ) ; }
tr	IDF	public SMTPException ( String errorMsg ) { super ( ) ; this . errorMsg = errorMsg ; }
tr	IDF	@ Override public void enterEscreva ( @ NotNull EnquantoParser . EscrevaContext ctx ) { }
tr	KEY	public boolean ifDead ( ) { return dead ; }
tr	KEY	public float getHeight ( ) { return ( float ) circle . getHeight ( ) ; }
tr	IDF	public void setTile5 ( String tile5 ) { this . tile5 = tile5 ; }
tr	KEY	public boolean handleOpenFile ( File file ) { return true ; }
tr	IDF	@ Override public void exitSeqComando ( @ NotNull EnquantoParser . SeqComandoContext ctx ) { }
tr	KEY	public void setMaxNumberOfSolutions ( final int maxNumberOfSolutions ) { this . maxNumberOfSolutions = maxNumberOfSolutions ; }
tr	IDF	public NotImplementedException ( Throwable arg0 ) { super ( arg0 ) ; }
tr	KEY	public static int fibonacci ( int times ) { if ( times == 0 ) return 0 ; else if ( times == 1 ) return 1 ; else { return fibonacci ( times - 1 ) + fibonacci ( times - 2 ) ; } }
tr	IDF	public static HashMap < String , String > parseInfoResponse ( String response ) throws Exception { if ( response . length ( ) < 5 ) throw new Exception ( "Invalid server response. Must be at least 5 characters length" ) ; if ( response . substring ( 0 , 5 ) . toUpperCase ( ) . equals ( "ERROR" ) ) throw new Exception ( "Error receiving userlist." ) ; String [ ] parts = response . split ( "\\s" ) ; if ( parts . length < 2 ) throw new Exception ( "Invalid server response. Unable to parse." ) ; String command = parts [ 0 ] ; int count = Integer . valueOf ( parts [ 1 ] ) ; HashMap < String , String > userList = new HashMap < String , String > ( ) ; int base = 2 ; for ( int i = 0 ; i < count ; i ++ ) { if ( parts . length < base + 1 ) throw new Exception ( "Invalid server response. Odd amount of paramater." ) ; String host = parts [ base ] ; String username = parts [ base + 1 ] ; userList . put ( host , username ) ; base += 2 ; } return userList ; }
tr	IDF	void close ( ) { try { source . close ( ) ; } catch ( IOException e ) { } }
tr	KEY	public synchronized boolean isS1repetitionEnabled ( ) { return isS1repeatable ; }
tr	KEY	public long getLongValue ( ) { return long . valueOf ( value ) ; }
tr	IDF	public Graphics2D prepareGraphics ( ) { Graphics2D g = ( Graphics2D ) img . getGraphics ( ) ; g . setComposite ( AlphaComposite . SrcOver ) ; g . setColor ( new Color ( 255 , 255 , 255 , 255 ) ) ; g . clearRect ( 0 , 0 , size . width , size . height ) ; Color col ; if ( mouseOver ) { col = mouseOverBorderCol ; } else { col = borderCol ; } g . setStroke ( new BasicStroke ( borderWidth ) ) ; g . setColor ( col ) ; g . drawRect ( 0 , 0 , size . width - borderWidth , size . height - borderWidth ) ; if ( mouseOver ) { col = mouseOverBgCol ; } else { col = bgCol ; } g . setColor ( col ) ; g . fillRect ( 0 , 0 , size . width , size . height ) ; g . setClip ( margin + borderWidth , margin + borderWidth , inner . width , inner . height ) ; AffineTransform T = new AffineTransform ( ) ; T . translate ( margin + borderWidth , margin + borderWidth ) ; g . setTransform ( T ) ; return g ; }
tr	IDF	public Arch ( Location first , Location second ) { this . start = first ; this . end = second ; }
tr	KEY	public boolean isUsed ( ) ;
tr	KEY	public int getLevelGate ( ) { return levelGate ; }
tr	KEY	@ Override public boolean equals ( Object obj ) { if ( obj == null ) return false ; if ( obj == this ) return true ; if ( ! ( obj instanceof SpecialStyle ) ) return false ; return getName ( ) . equals ( ( ( SpecialStyle ) obj ) . getName ( ) ) ; }
tr	KEY	public long getLastCollideTime ( ) { return lastCollideTime ; }
tr	IDF	public ACOClustering ( List < DataPoint > data , GraphFitness fitnessEvaluation ) { super ( data , fitnessEvaluation ) ; aco = new ACO ( data ) ; jungHandler . setDimensions ( aco . getXSpace ( ) , aco . getYSpace ( ) ) ; }
tr	IDF	public int optInt ( String key , int defaultValue ) { try { return getInt ( key ) ; } catch ( Exception e ) { return defaultValue ; } }
tr	KEY	private String getStepRepr ( Step step ) { if ( step == null ) { return "" ; } switch ( step . getType ( ) ) { case REGULAR : return "#" ; case FREEZE_START : return "%" ; case HOLDING : return "|" ; case ROLLING : return "!" ; default : return " " ; } }
tr	IDF	@ Override public double value ( Individual < T > individual ) { double value = 0.0 ; double weight = 0.0 ; double [ ] variables = individual . getVariables ( ) ; double [ ] weights = individual . getWeight ( ) ; double [ ] profits = individual . getProfit ( ) ; for ( int i = 0 ; i < variables . length ; i ++ ) { weight += weights [ i ] * variables [ i ] ; value += profits [ i ] * variables [ i ] ; } if ( weight > maxWeight ) return double . MIN_VALUE ; else return value ; }
tr	IDF	public static INDIOneElementNumberProperty createSaveableOneElementNumberProperty ( INDIDriver driver , String name , String label , PropertyStates state , PropertyPermissions permission , double minimum , double maximum , double step , String format , double value ) throws IllegalArgumentException { INDIOneElementNumberProperty np = loadOneElementNumberProperty ( driver , name ) ; if ( np == null ) { np = new INDIOneElementNumberProperty ( driver , name , label , state , permission , minimum , maximum , step , format , value ) ; np . setSaveable ( true ) ; } return np ; }
tr	KEY	public synchronized boolean isL3repetitionEnabled ( ) { return isL3repeatable ; }
tr	KEY	public static void clear ( ) { lastSavedWorkspace = null ; }
tr	IDF	public CommandLine environment ( Map < String , String > map ) { environment . clear ( ) ; environment . putAll ( map ) ; return this ; }
tr	IDF	public static Set < OrdenPinturaDetalle > getDetalleOrden ( OrdenPintura orden ) throws SQLException { Set < OrdenPinturaDetalle > res = new HashSet < > ( ) ; sql = "SELECT * FROM OPINTURA_DETALLE " + "WHERE IDORDEN = " + Integer . toString ( orden . getNro ( ) ) ; try ( ResultSet rs = ComunDP . getData ( sql ) ) { while ( rs . next ( ) ) { res . add ( DbToObj ( rs ) ) ; } } return res ; }
tr	IDF	@ Override protected BuffDropGraphic newDropBuff ( DropBuff buff ) { return new BuffDropImage ( this , getGame ( ) , buff . getBoardPosition ( ) ) ; }
tr	IDF	@ Test public void testIteration ( ) { ArrayHashMap map = new ArrayHashMap ( 32 ) ; int size = 32 ; Object [ ] toInsert = new Object [ size ] ; for ( int i = 0 ; i < size ; i += 2 ) { toInsert [ i ] = Integer . toBinaryString ( i ) ; toInsert [ i + 1 ] = new long ( i + 1 ) ; assertTrue ( map . putIfAbsent ( ( String ) toInsert [ i ] , ( long ) toInsert [ i + 1 ] ) ) ; assertEquals ( toInsert [ i + 1 ] , map . get ( ( String ) toInsert [ i ] ) ) ; } assertEquals ( size / 2 , map . size ( ) ) ; for ( int i = 0 ; i < size / 2 ; i ++ ) { String key = ( String ) toInsert [ i * 2 ] ; assertEquals ( toInsert [ i * 2 + 1 ] , map . get ( key ) ) ; } Set < String > keys = map . keySet ( ) ; assertEquals ( size / 2 , keys . size ( ) ) ; for ( int i = 0 ; i < size / 2 ; i ++ ) { String key = ( String ) toInsert [ i * 2 ] ; assertTrue ( keys . contains ( key ) ) ; assertEquals ( toInsert [ i * 2 + 1 ] , map . get ( key ) ) ; } }
tr	KEY	public abstract Graphics2D getGraphics2D ( ) ;
tr	IDF	private synchronized void readObject ( ObjectInputStream in ) throws IOException , ClassNotFoundException { in . defaultReadObject ( ) ; }
tr	KEY	void handleCustomerQueries ( ) ;
tr	KEY	public void setLimitedMobility ( boolean limitedMobility ) { this . limitedMobility = limitedMobility ; }
tr	IDF	@ Override public void displayBorder ( ) { System . out . println ( "\t-----------------------------------------------------------------------------" ) ; }
tr	KEY	public static boolean anyKeyPressed ( ) { for ( Key key : Key . values ( ) ) { if ( key . state == STATE_PRESSED ) { return true ; } } return false ; }
tr	KEY	public static double trimTo3Digits ( final double value ) { return ( ( long ) ( 1e3d * value ) ) / 1e3d ; }
tr	KEY	public double getGrossMonthlyHouseholdIncome ( ) { return grossMonthlyHouseholdIncome ; }
tr	KEY	public abstract void actionPerformed ( ActionEvent e ) ;
tr	IDF	public void trainIteration ( DataPoint datapoint ) { List < double > inputs = datapoint . getFeatures ( ) ; List < double > outputs = operations . feedForward ( datapoint ) ; int winnerIndex = operations . getMaxIndex ( outputs ) ; for ( int i = 0 ; i < inputs . size ( ) ; i ++ ) { Neuron currentInputNeuron = inputLayer . getNeurons ( ) . get ( i ) ; Connection c = weights . get ( currentInputNeuron ) . get ( winnerIndex ) ; double updateValue = learningRate * ( inputs . get ( i ) - c . getWeight ( ) ) ; c . setWeightChange ( updateValue ) ; c . setWeight ( c . getWeight ( ) + updateValue ) ; } }
tr	KEY	public boolean open ( ) { System . out . println ( "The door swings open." ) ; return true ; }
tr	IDF	@ Test ( ) public void unreferencedCardReturn ( ) throws BeanstreamApiException { UnreferencedCardReturnRequest unrefCardReturnRequest = new UnreferencedCardReturnRequest ( ) ; unrefCardReturnRequest . getCard ( ) . setName ( "John Doe" ) . setNumber ( "5100000010001004" ) . setExpiryMonth ( "12" ) . setExpiryYear ( "18" ) . setCvd ( "123" ) ; unrefCardReturnRequest . setAmount ( 100.00 ) ; unrefCardReturnRequest . setMerchantId ( "300200578" ) ; unrefCardReturnRequest . setOrderNumber ( getRandomOrderId ( "GAS" ) ) ; }
tr	IDF	public TicTacToePlay ( GameType gameType ) { this . board = new Board ( ) ; this . playerOne = new Person ( ) ; if ( gameType == GameType . WithComputer ) { this . playerTwo = new Computer ( ) ; } else { this . playerTwo = new Person ( ) ; } randomStart ( ) ; nextPlayerTurn = ( playerTurn . equals ( playerOne ) ) ? playerTwo : playerOne ; }
tr	KEY	public boolean checkCommandOrder ( ) { if ( lastCommandName == null || curCommandName == null ) { return false ; } if ( lastCommandName . equals ( "HELO" ) && curCommandName . equals ( "MAIL" ) ) { return true ; } if ( lastCommandName . equals ( "EHLO" ) && curCommandName . equals ( "AUTH" ) ) { return true ; } if ( lastCommandName . equals ( "AUTH" ) && curCommandName . equals ( "MAIL" ) ) { return true ; } if ( lastCommandName . equals ( "MAIL" ) && curCommandName . equals ( "RCPT" ) ) { return true ; } if ( lastCommandName . equals ( "RCPT" ) && curCommandName . equals ( "RCPT" ) ) { return true ; } if ( lastCommandName . equals ( "RCPT" ) && curCommandName . equals ( "DATA" ) ) { return true ; } return false ; }
tr	KEY	public void rotateZ ( double radians ) ;
tr	IDF	private void deleteShoppingCartUser ( UserModel user ) { try ( Connection conn = DevDBConfig . getConnection ( ) ) { try ( Statement stmt = conn . createStatement ( ) ) { String sql = "delete from shopping_cart where user_email = '" + user . getEmail ( ) + "'" ; stmt . executeUpdate ( sql ) ; } } catch ( SQLException e ) { e . printStackTrace ( ) ; } }
tr	KEY	public abstract double getWeight ( ) ;
tr	IDF	private void jBProximoActionPerformed ( java . awt . event . ActionEvent evt ) { if ( corrente == - 1 ) { JOptionPane . showMessageDialog ( this , "N\u00E3o h\u00E1 registro(s)." , this . getTitle ( ) , JOptionPane . ERROR_MESSAGE ) ; } else if ( corrente < totCarregado - 1 ) { corrente += 1 ; } else { JOptionPane . showMessageDialog ( this , "\u00DAltimo registro." , this . getTitle ( ) , JOptionPane . ERROR_MESSAGE ) ; } limpaCampos ( ) ; exibeDados ( ) ; }
tr	IDF	public MatchingInstance ( int T , double [ ] f ) { this . T = T ; this . f = f ; x = new double [ T ] ; y = new double [ T ] ; visx = new boolean [ T ] ; visy = new boolean [ T ] ; find = new int [ T ] ; find2 = new int [ T ] ; for ( int i = 0 ; i < T ; ++ i ) { find [ i ] = - 1 ; find2 [ i ] = - 1 ; x [ i ] = double . NEGATIVE_INFINITY ; y [ i ] = 0.0 ; for ( int j = 0 ; j < T ; ++ j ) { double v = f [ i * T + j ] ; if ( v > x [ i ] ) { x [ i ] = v ; find2 [ i ] = j ; } } } }
tr	IDF	public BasicWeapon ( ShootingScene scene , ShootingCharacter owner , LR equipLR ) { super ( scene , owner , equipLR ) ; setTexture ( WEAPON_TEXTURE ) ; setHeight ( 20 ) ; setWidth ( 10 ) ; setColor ( Color . white ) ; setTeam ( owner . getTeam ( ) ) ; }
tr	IDF	public static void main ( String args [ ] ) { try { for ( javax . swing . UIManager . LookAndFeelInfo info : javax . swing . UIManager . getInstalledLookAndFeels ( ) ) { if ( "Nimbus" . equals ( info . getName ( ) ) ) { javax . swing . UIManager . setLookAndFeel ( info . getClassName ( ) ) ; break ; } } } catch ( ClassNotFoundException ex ) { java . util . logging . Logger . getLogger ( InterfazAdministrador . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( InstantiationException ex ) { java . util . logging . Logger . getLogger ( InterfazAdministrador . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( IllegalAccessException ex ) { java . util . logging . Logger . getLogger ( InterfazAdministrador . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( javax . swing . UnsupportedLookAndFeelException ex ) { java . util . logging . Logger . getLogger ( InterfazAdministrador . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } java . awt . EventQueue . invokeLater ( new Runnable ( ) { public void run ( ) { new InterfazAdministrador ( ) . setVisible ( true ) ; } } ) ; }
tr	KEY	public int getBoxCount ( ) { return boxes . size ( ) ; }
tr	IDF	public PINInputVerifier ( ) { minlen = 4 ; maxlen = 20 ; }
tr	KEY	public int getNumberOfHills ( ) { return this . numHills ; }
tr	IDF	public void addLayer ( VGraphicLayer vgl ) { add_vgl . add ( vgl ) ; }
tr	IDF	public static void init ( final GameDisplayPane displayPane ) { gameManagers = new GameManager [ ] { new HangManGameManager ( displayPane ) , new ScrambleGameManager ( displayPane ) , new BreakOutGameManager ( displayPane ) , new OthelloGameManager ( displayPane ) } ; }
tr	IDF	public static JPanel buildSecondPanel ( ) { JPanel panel = new JPanel ( new GridLayout ( ) ) ; JLabel label = new JLabel ( "4" , SwingConstants . CENTER ) ; panel . add ( label ) ; float size = label . getFont ( ) . getSize2D ( ) ; Font derivedFont = label . getFont ( ) . deriveFont ( size * 3.0f ) ; label . setFont ( derivedFont ) ; label . setBorder ( new LineBorder ( Color . BLACK ) ) ; panel . setPreferredSize ( new Dimension ( 80 , 80 ) ) ; panel . setBackground ( Color . RED ) ; panel . setOpaque ( true ) ; return panel ; }
tr	IDF	public ProfileRequest card ( Card card ) { this . card = card ; return this ; }
tr	KEY	public int getXSpace ( ) { return xSpace ; }
tr	IDF	public void draw ( Graphics g ) { int X = ( int ) this . getFirstVertex ( ) . getX ( ) ; int Y = ( int ) this . getFirstVertex ( ) . getY ( ) ; int size = getSize ( ) ; g . setColor ( this . getColor ( ) ) ; ThreeDSupportor spt3d = ThreeDSupportor . getInstance ( ) ; if ( spt3d . is3d ( ) ) { spt3d . drawCube ( g , X , Y , size , size ) ; } else { g . fillRect ( X , Y , size , size ) ; g . setColor ( Color . BLACK ) ; g . drawRect ( X , Y , size , size ) ; } }
tr	KEY	public double getPrice ( ) { return price ; }
tr	IDF	@ Override public void execute ( double t ) { Matrix y = new ColumnMatrix ( output . getDim ( ) ) ; if ( pi . isConnected ( ) ) { if ( mi . isConnected ( ) ) { y = mi . getInput ( ) . times ( - 1 ) ; y = y . + ( pi . getInput ( ) ) ; } else y = pi . getInput ( ) ; } else { if ( mi . isConnected ( ) ) y = mi . getInput ( ) . times ( - 1 ) ; } try { output . setOutput ( y ) ; } catch ( OrderException e ) { e . printStackTrace ( ) ; } }
tr	IDF	static int onePair ( int [ ] player ) { int [ ] valueCount = new int [ 13 ] ; for ( int i = 0 ; i < 5 ; i ++ ) valueCount [ player [ i ] / 4 ] ++ ; int two = 13 ; for ( int i = 0 ; i < 13 ; i ++ ) { if ( valueCount [ i ] == 2 ) two = i ; } if ( two < 13 ) return two ; else return - 1 ; }
tr	IDF	public static void main ( String [ ] args ) throws IOException { System . setSecurityManager ( new NoExitSecurityManager ( ) ) ; test1_1 ( ) ; test1_2 ( ) ; test1_3 ( ) ; test2_1 ( ) ; test2_2 ( ) ; test2_3 ( ) ; test2_4 ( ) ; test2_5 ( ) ; test4 ( ) ; test5 ( ) ; test6 ( ) ; test7 ( ) ; test8 ( ) ; test9 ( ) ; test10 ( ) ; }
tr	KEY	public void reset ( ) { }
tr	KEY	public Tool clone ( ) { return new EndBuildingTool ( ) ; }
tr	IDF	private boolean checkDeveloperOnCell ( JavaCell [ ] [ ] miniMap , Tile tile ) { TileType [ ] [ ] tileCells = tile . getTileCells ( ) ; for ( int i = 0 ; i < tileCells . length ; i ++ ) { for ( int j = 0 ; j < tileCells [ i ] . length ; j ++ ) { if ( tileCells [ i ] [ j ] != null ) { if ( miniMap [ i ] [ j ] != null && miniMap [ i ] [ j ] . hasDeveloper ( ) ) { return false ; } } } } return true ; }
tr	KEY	public int getRightAnswer ( ) { return rightAnswer ; }
tr	IDF	public MulticastSender ( int port , String group ) { this . port = port ; this . group = group ; try { this . multicastSocket = new MulticastSocket ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }
tr	KEY	@ Override public boolean save ( ) { return false ; }
tr	IDF	@ Override public int compare ( Field l , Field r ) { return l . getName ( ) . compareTo ( r . getName ( ) ) ; }
tr	KEY	private static boolean checkDivisions ( final long start , final long end , final long n ) { boolean result = true ; for ( long i = start ; i <= end ; i ++ ) { if ( ! isDivisible ( n , i ) ) { continue ; } else { result = false ; break ; } } return result ; }
tr	IDF	@ SuppressWarnings ( "unchecked" ) public JSONObject toJson ( ) { JSONObject obj = new JSONObject ( ) ; obj . put ( "holeNumber" , holeNumber ) ; obj . put ( "holeType" , holeType . toString ( ) ) ; obj . put ( "distance" , distance ) ; obj . put ( "par" , par ) ; obj . put ( "timesPlayed" , timesPlayed ) ; obj . put ( "holesInOne" , holesInOne ) ; obj . put ( "bestScore" , bestScore ) ; obj . put ( "averageScore" , averageScore ) ; obj . put ( "worstScore" , worstScore ) ; obj . put ( "description" , description ) ; return obj ; }
tr	IDF	public void setGrossMonthlyIncome ( LabeledTextField grossMonthlyIncome ) { this . grossMonthlyIncome = grossMonthlyIncome ; }
tr	KEY	abstract void perform ( ) ;
tr	IDF	public LayerDataBase ( int x , int y , int w , int h ) { super ( x , y , w , h ) ; }
tr	IDF	@ Override public void call ( RxMessage < String > message ) { assertEquals ( "ping1ping2ping3" , message . body ( ) ) ; testComplete ( ) ; }
tr	IDF	@ Override public boolean contains ( Object o ) { return l . contains ( o ) ; }
tr	IDF	public void closeAlphabets ( ) { smnAlphabet . stopGrowth ( ) ; pathcodeAlphabet . stopGrowth ( ) ; argSeqAlphabet . stopGrowth ( ) ; wordAlphabet . stopGrowth ( ) ; pathAlphabet . stopGrowth ( ) ; contextAlphabet . stopGrowth ( ) ; }
tr	KEY	protected void setListenToAllDevices ( boolean listenToAllDevices ) { this . listenToAllDevices = listenToAllDevices ; }
tr	IDF	private void initComponents ( ) { this . tabs = new JTabbedPane ( ) ; try { createMenuBar ( ) ; } catch ( Exception e ) { JOptionPane . showMessageDialog ( this , "Found Exception: " + e ) ; } }
tr	KEY	public CharTypeTree ( ) { }
tr	KEY	public abstract void create ( T t ) ;
tr	KEY	public double getLongitude ( ) { return longitude ; }
tr	IDF	public TextCharacter ( String text ) { updateText ( text ) ; }
tr	IDF	public LightOnCommand ( Light light ) { this . light = light ; }
tr	KEY	protected int getDesiredAbsPosition ( ) { return desiredAbsPosition ; }
tr	IDF	public void setInfo ( String info ) { this . info = info ; }
tr	KEY	public long getId ( ) { return id ; }
tr	KEY	public BuilderException ( ) { super ( "Par\u00E1metros de creaci\u00F3n err\u00F3neos." ) ; }
tr	IDF	public List < User > getStudenten ( ) { List < User > studenten = new ArrayList < User > ( ) ; try { PreparedStatement preparedStatement = manager . prepareStatement ( "SELECT user_id FROM user_rol WHERE rol_id = 3" ) ; ResultSet resultSet = preparedStatement . executeQuery ( ) ; while ( resultSet . next ( ) ) { studenten . add ( getUser ( resultSet . getLong ( 1 ) ) ) ; } } catch ( SQLException e ) { e . printStackTrace ( ) ; } return studenten ; }
tr	IDF	public static String getEarliestDate ( ) { String date = "" ; try { Connection c = DBFactory . getConnection ( ) ; PreparedStatement ps = c . prepareStatement ( "SELECT date FROM tweets " + "ORDER BY idtweets ASC " + "LIMIT 1;" ) ; ResultSet rs = ps . executeQuery ( ) ; rs . next ( ) ; date = rs . getString ( "date" ) . substring ( 0 , 11 ) . trim ( ) ; } catch ( ClassNotFoundException ex ) { Logger . getLogger ( tweetHandler . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; } catch ( SQLException ex ) { Logger . getLogger ( tweetHandler . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; } return date ; }
tr	KEY	public void stop ( ) ;
tr	KEY	public synchronized int xgetLBAssignedKeyCode ( ) { return lb ; }
tr	IDF	public boolean createClientArticleUpdateQtite ( Client client , List < Stock > stocks ) { return false ; }
tr	IDF	public < T > T findSimpleRefResult ( String sql , List < Object > params , class < T > cls ) throws Exception { T resultObject = null ; pstmt = connection . prepareStatement ( sql ) ; int index = 1 ; if ( params != null && ! params . isEmpty ( ) ) { for ( int i = 0 ; i < params . size ( ) ; i ++ ) { pstmt . setObject ( index ++ , params . get ( i ) ) ; } } resultSet = pstmt . executeQuery ( ) ; ResultSetMetaData metaData = resultSet . getMetaData ( ) ; int col_len = metaData . getColumnCount ( ) ; while ( resultSet . next ( ) ) { resultObject = cls . newInstance ( ) ; for ( int i = 0 ; i < col_len ; i ++ ) { String col_name = metaData . getColumnName ( i + 1 ) ; Object value = resultSet . getObject ( col_name ) ; if ( value == null ) { value = "" ; } Field field = cls . getDeclaredField ( col_name ) ; field . setAccessible ( true ) ; field . set ( resultObject , value ) ; } } return resultObject ; }
tr	IDF	public void onMessageNotSent ( Message < ClientProtocolParameters > message ) { }
tr	KEY	public synchronized int xgetD2RepeatDelay ( ) { return d2RD ; }
tr	IDF	public ArrayHashMapOption wrap ( ArrayHashMap toWrap , String withHash ) throws IOException { File store = new File ( storeDir , withHash ) ; ArrayHashMapOption toReturn = new ArrayHashMapOption ( toWrap , store ) ; return toReturn ; }
tr	KEY	public ABook ( ) { }
tr	IDF	public double getSiderealTime ( ) { long now = ( new Date ( ) ) . getTime ( ) ; double j2000 = 10957.5 * 3600 * 24 * 1e3 ; double D = ( now - j2000 ) / 86400.0e3 ; double GMST = 18.697374558 + 24.06570982441908 * D ; double lon = geographicCoordLongE . getValue ( ) ; lon = lon / 360 * 24 ; double LST = GMST + lon ; LST = LST % 24 ; if ( LST < 0 ) { LST += 24 ; } return LST ; }
tr	IDF	public String toString ( ) { return String . format ( "Id: %s  Name: %s  Straff_responsible: %s" , id , name , staff_responsible ) ; }
tr	KEY	@ Override public double getWeight ( ) { return 15 ; }
tr	IDF	public PackedWorld ( PackedWorld prev ) { super ( prev ) ; cells = 0 ; }
tr	KEY	protected void interrupted ( ) { }
tr	IDF	public void setProductoBodega ( List < ProductoBodega > ProductoBodega ) { this . ProductoBodega = ProductoBodega ; }
tr	KEY	public boolean askIfWouldLikeToSpiltWinnings ( ) { int split = JOptionPane . showConfirmDialog ( null , " There is a tie - would you like to split the winnings?\nIf not  there will be another round" , "Replay Mode" , JOptionPane . YES_NO_OPTION ) ; if ( split == 0 ) return true ; return false ; }
tr	KEY	public int getId_Equipo ( ) { return Id_Equipo ; }
tr	IDF	public T visitASTExpMul ( ASTExpMul form , S state ) throws FractalException ;
tr	KEY	public boolean equals ( Object _other ) { if ( _other == null ) { return false ; } if ( _other == this ) { return true ; } if ( ! ( _other instanceof FriendshStatusPk ) ) { return false ; } final FriendshStatusPk _cast = ( FriendshStatusPk ) _other ; if ( friendshStatus == null ? _cast . friendshStatus != friendshStatus : ! friendshStatus . equals ( _cast . friendshStatus ) ) { return false ; } return true ; }
tr	IDF	public List < UserModel > getAllUsers ( ) throws WebshopAppException ;
tr	KEY	public static PKIAppletManager getInstance ( ) { return INSTANCE ; }
tr	KEY	public synchronized void xsetXrepeatable ( boolean flag ) { isXrepeatable = flag ; }
tr	IDF	public NetworkReader ( Socket s , Connections activeConnections , MessageProtocol msgProto ) { isRunning = true ; this . msgProto = msgProto ; this . activeConnections = activeConnections ; try { ois = new ObjectInputStream ( s . getInputStream ( ) ) ; } catch ( IOException e ) { System . out . println ( "Could not create ObjectInputStream" ) ; } activeConnections . registerOIS ( s , ois ) ; }
tr	IDF	public void setPassword ( String value ) { this . password = value ; }
tr	IDF	protected void processMouseMotionEvent ( MouseEvent e ) { e . consume ( ) ; }
tr	KEY	public void setMax ( int max ) { this . max = max ; }
tr	KEY	protected void finalize ( ) { this . close ( ) ; }
tr	KEY	public synchronized void xsetS2InitialDelay ( int a ) { s2ID = a ; }
tr	KEY	public synchronized int xgetR1InitialDelay ( ) { return r1ID ; }
tr	IDF	private int miniMax ( NodeLVL7 node , int depth , int alpha , int beta , boolean player ) throws AIStoppedException { DraughtsState ds = node . getState ( ) ; if ( stopped ) { stopped = false ; throw new AIStoppedException ( ) ; } if ( depth == 0 || ds . isEndState ( ) ) { if ( white ) { return node . getValue ( ) ; } else { return - node . getValue ( ) ; } } if ( player ) { for ( Move move : ds . getMoves ( ) ) { ds . doMove ( move ) ; alpha = max ( alpha , miniMax ( new NodeLVL7 ( ds . clone ( ) ) , depth - 1 , alpha , beta , false ) ) ; if ( alpha >= beta ) { return beta ; } ds . undoMove ( move ) ; } return alpha ; } else { for ( Move move : ds . getMoves ( ) ) { ds . doMove ( move ) ; beta = min ( beta , miniMax ( new NodeLVL7 ( ds . clone ( ) ) , depth - 1 , alpha , beta , true ) ) ; if ( alpha >= beta ) { return alpha ; } ds . undoMove ( move ) ; } return beta ; } }
tr	KEY	abstract public void translateCamera ( double dx , double dy ) ;
tr	IDF	public void keyReleased ( KeyEvent e ) { if ( currentGame != null ) { userReleasedKey ( e ) ; } }
tr	IDF	@ Override public synchronized void requestNextPlayerEvent ( ) { for ( GameStatusUpdateListener g : listeners ) { try { g . requestNextPlayerEvent ( ) ; } catch ( RuntimeException e ) { logger . warn ( e . getMessage ( ) , e ) ; } } }
tr	KEY	@ Override public double getValue ( ) { return value ; }
tr	KEY	public static String getYear ( ) { return year ; }
tr	IDF	public void reload ( ) { pluginLoader . reloadPlugins ( ) ; constructorMap . clear ( ) ; buildConstructorMap ( ) ; }
tr	IDF	@ Override public String toString ( ) { return String . valueOf ( val ) ; }
tr	IDF	@ SuppressWarnings ( "unchecked" ) private void initComponents ( ) { groupCheckBox = new JCheckBox ( ) ; jScrollPane2 = new JScrollPane ( ) ; playerPanel = new JPanel ( ) ; filler1 = new Box . Filler ( new Dimension ( 5 , 0 ) , new Dimension ( 15 , 0 ) , new Dimension ( 5 , 0 ) ) ; setLayout ( new BorderLayout ( ) ) ; groupCheckBox . setText ( "group name" ) ; groupCheckBox . setEnabled ( false ) ; add ( groupCheckBox , BorderLayout . NORTH ) ; jScrollPane2 . setBorder ( null ) ; playerPanel . setLayout ( new BoxLayout ( playerPanel , BoxLayout . Y_AXIS ) ) ; jScrollPane2 . setViewportView ( playerPanel ) ; add ( jScrollPane2 , BorderLayout . CENTER ) ; add ( filler1 , BorderLayout . WEST ) ; }
tr	KEY	public abstract void prev ( ) ;
tr	KEY	private void setDocument ( StyledDocument document ) { if ( document == null ) { throw new IllegalArgumentException ( "StyledDocument cannot be null!" ) ; } this . document = document ; }
tr	IDF	protected List < Point2D > preparePath ( List < Point > path , Point2D dest ) { List < Point2D > rv = new ArrayList < > ( ) ; rv . add ( new Point2D . double ( x , y ) ) ; for ( int i = 0 ; i < path . size ( ) - 1 ; i ++ ) { rv . add ( new Point ( path . get ( i ) . x * 32 + 16 , path . get ( i ) . y * 32 + 16 ) ) ; } rv . add ( dest ) ; boolean found = true ; while ( found ) { found = false ; for ( int i = 0 ; i < rv . size ( ) - 2 ; i ++ ) { if ( lineOfSight ( rv . get ( i ) , rv . get ( i + 2 ) ) ) { rv . remove ( i + 1 ) ; found = true ; break ; } } } rv . remove ( 0 ) ; return rv ; }
tr	IDF	public void markAsHead ( final CircleLinkPointer < Value > p ) { if ( ! ( p instanceof CircleLinkPointerImpl ) ) { throw new IllegalArgumentException ( ) ; } CircleLinkPointerImpl < Value > pointer = ( CircleLinkPointerImpl < Value > ) p ; throwNoSuchElementExceptionIfNotContained ( pointer . element ) ; head = pointer . element ; }
tr	KEY	public JMenuItem getItemMenuPrincipal ( ) { return this . item_fichier_menuPrincipal ; }
tr	KEY	public void updateModelFromView ( ) ;
tr	KEY	public void burn ( ) throws Throwable { this . finalize ( ) ; }
tr	KEY	public Error createError ( ) { return new Error ( ) ; }
tr	IDF	@ Override public boolean equals ( Object o ) { if ( this == o ) { return true ; } if ( o == null || getClass ( ) != o . getClass ( ) ) { return false ; } BasePersistable that = ( BasePersistable ) o ; if ( id != null ? ! id . equals ( that . id ) : that . id != null ) { return false ; } return true ; }
tr	KEY	public retgertge ( ) { }
tr	KEY	@ Test public final void testSort ( ) { new MapComparatorValueNumberAscTest ( ) . testOrdering ( ) ; }
tr	KEY	public int getPedidosNatural ( ) { return pedidosNatural ; }
tr	KEY	@ Override public void draw ( ) { throw new UnsupportedOperationException ( "Not supported yet." ) ; }
tr	KEY	@ Override public void attack ( boolean state ) { }
tr	IDF	private void refreshIcon ( ) { java . awt . Image imag = ( java . awt . Image ) ( image . getBitmap ( ) . getImage ( ) ) ; button . setIcon ( new ImageIcon ( imag ) ) ; button . setText ( "" ) ; image = null ; }
tr	KEY	public final JPanel getOptionsPanel ( ) { return _optionsPanel ; }
tr	KEY	public double getPriceLevel9 ( ) { return priceLevel9 ; }
tr	KEY	public int getWidth ( ) { return tiles . getNumOfElements ( 0 ) ; }
tr	IDF	public FaultyStationServerImpl startTCPPServer ( String port ) { try { tcpProperties . setProperty ( this . stationType . getStationCode ( ) , InetAddress . getLocalHost ( ) . getHostName ( ) + " " + port ) ; } catch ( UnknownHostException e ) { e . printStackTrace ( ) ; } this . tcpServer = new TCPServer ( Integer . valueOf ( port ) ) ; this . log . debug ( this . stationType . getStationCode ( ) + ":TCPServer started on port[" + port + "]" ) ; return this ; }
tr	KEY	public int [ ] GetPosition ( ) { return Position ; }
tr	IDF	public List < Happening > getHappenings ( Calendar from , Calendar to ) { return total . getHappenings ( from , to ) ; }
tr	IDF	FTMValueIterator ( Object subtree ) { ftmIter = new FTMIterator ( subtree ) ; }
tr	KEY	public boolean saveProfile ( ) ;
tr	IDF	KeyPair getKeyPair ( ) { return keyPair ; }
tr	KEY	public static long max ( final long a , final long b ) { return ( a <= b ) ? b : a ; }
tr	IDF	public void TransFormIO ( ) { TransformIO io = new TransformIO ( ) ; io . reader ( ) ; }
tr	IDF	public void unfollow ( int followerId , int followeeId ) { if ( followeeId == followerId ) return ; TreeSet < Integer > subscribeList = subscribeMap . get ( followerId ) ; if ( subscribeList == null ) subscribeList = new TreeSet < > ( ) ; subscribeList . remove ( followeeId ) ; subscribeMap . put ( followerId , subscribeList ) ; TreeSet < Integer > followerList = followerMap . get ( followeeId ) ; if ( followerList == null ) followerList = new TreeSet < > ( ) ; followerList . remove ( followerId ) ; followerMap . put ( followeeId , followerList ) ; rebuildRecentFeed ( followerId ) ; }
tr	KEY	public synchronized Collection < V > values ( ) { throw new UnsupportedOperationException ( "Not implemented yet." ) ; }
tr	IDF	public EligibilityForm OnSubmit ( Customer customer ) { LivingServicesType livingServicesType = null ; if ( this . eligibilityFormPanel . getEligibilityWestKing ( ) . isSelected ( ) ) { livingServicesType = LivingServicesType . APDWestKing ; } else if ( this . eligibilityFormPanel . getEligibilityEastKing ( ) . isSelected ( ) ) { livingServicesType = LivingServicesType . APDEastKing ; } else if ( this . eligibilityFormPanel . getEligibilityDisabilitiesLaw ( ) . isSelected ( ) ) { livingServicesType = LivingServicesType . DisabilitiesLawProject ; } SSADisabilityCode primaryDisability = null ; switch ( this . eligibilityFormPanel . getPrimaryDisability ( ) . getDropdown ( ) . getSelectedIndex ( ) ) { case 1 : primaryDisability = SSADisabilityCode . BlindOrVisualImpairment ; break ; case 2 : primaryDisability = SSADisabilityCode . HearingSpeechAndOtherSensoryImpairments ; break ; case 3 : primaryDisability = SSADisabilityCode . SpinalCordInjury ; break ; case 4 : primaryDisability = SSADisabilityCode . NonSpinalCordOrthopedicDisablitiesOrAmputation ; break ; case 5 : primaryDisability = SSADisabilityCode . MentalAndEmotionalDisorders ; break ; case 6 : primaryDisability = SSADisabilityCode . CognitiveDisabilitiesLikeMentalRetardation ; break ; case 7 : primaryDisability = SSADisabilityCode . SystemDiseasesLikeNervousEndocrineCardiac ; break ; case 8 : primaryDisability = SSADisabilityCode . TraumaticBrainInjury ; break ; case 9 : primaryDisability = SSADisabilityCode . Other ; break ; } SSADisabilityCode secondaryDisability = null ; switch ( this . eligibilityFormPanel . getSecondaryDisability ( ) . getDropdown ( ) . getSelectedIndex ( ) ) { case 1 : secondaryDisability = SSADisabilityCode . BlindOrVisualImpairment ; break ; case 2 : secondaryDisability = SSADisabilityCode . HearingSpeechAndOtherSensoryImpairments ; break ; case 3 : secondaryDisability = SSADisabilityCode . SpinalCordInjury ; break ; case 4 : secondaryDisability = SSADisabilityCode . NonSpinalCordOrthopedicDisablitiesOrAmputation ; break ; case 5 : secondaryDisability = SSADisabilityCode . MentalAndEmotionalDisorders ; break ; case 6 : secondaryDisability = SSADisabilityCode . CognitiveDisabilitiesLikeMentalRetardation ; break ; case 7 : secondaryDisability = SSADisabilityCode . SystemDiseasesLikeNervousEndocrineCardiac ; break ; case 8 : secondaryDisability = SSADisabilityCode . TraumaticBrainInjury ; break ; case 9 : secondaryDisability = SSADisabilityCode . Other ; break ; } return new EligibilityForm ( livingServicesType , customer , primaryDisability , secondaryDisability , this . eligibilityFormPanel . getAdditionalComments ( ) . getTextField ( ) . getText ( ) , this . eligibilityFormPanel . getLimitedSelfCare ( ) . isSelected ( ) , this . eligibilityFormPanel . getLimitedMobility ( ) . isSelected ( ) , this . eligibilityFormPanel . getLimitedEducation ( ) . isSelected ( ) , this . eligibilityFormPanel . getLimitedCommunication ( ) . isSelected ( ) , this . eligibilityFormPanel . getLimitedResidentialOrHousing ( ) . isSelected ( ) , this . eligibilityFormPanel . getLimitedVocationalOrEmployment ( ) . isSelected ( ) , this . eligibilityFormPanel . getLimitedOther ( ) . getTextField ( ) . getText ( ) , this . eligibilityFormPanel . getCustomerConsentCheckbox ( ) . isSelected ( ) , new Date ( ) , this . eligibilityFormPanel . getStaffConsentCheckbox ( ) . isSelected ( ) , new Date ( ) ) ; }
tr	KEY	public static ChatRemoteManager getInstance ( ) { if ( instance == null ) { instance = new ChatRemoteManager ( ) ; } return instance ; }
tr	IDF	public void endTurn ( boolean isTurn , int numCards ) { setBorder ( BorderFactory . createLineBorder ( Color . WHITE ) ) ; drop . setEnabled ( false ) ; clearSelectedCard ( numCards ) ; }
tr	IDF	@ Override public void stateChanged ( ChangeEvent e ) { IntSpinner sp = ( IntSpinner ) e . getSource ( ) ; int dim = sp . getInt ( ) ; if ( formula == null || dim != formula . length ) { String [ ] newFormula = new String [ dim ] ; int md = Math . min ( formula == null ? 1 : formula . length , newFormula . length ) ; for ( int i = 0 ; i < md ; i ++ ) newFormula [ i ] = formula [ i ] ; for ( int i = md ; i < newFormula . length ; i ++ ) newFormula [ i ] = "0" ; formula = newFormula ; } display ( ) ; }
tr	IDF	private Language ( final String title ) { this . title = title ; }
tr	KEY	public double getPriceLevel2 ( ) { return priceLevel2 ; }
tr	IDF	@ Override public void onMessageNotSent ( Message < ClientProtocolParameters > message ) { if ( message instanceof NodeWarningMessage ) { emitWarning ( ( ( NodeWarningMessage ) message ) . message ) ; } }
tr	KEY	public long getId ( ) { return id ; }
tr	KEY	@ Override public boolean equals ( Object obj ) { if ( this == obj ) return true ; if ( obj == null ) return false ; if ( getClass ( ) != obj . getClass ( ) ) return false ; Lesson other = ( Lesson ) obj ; if ( classRoom == null ) { if ( other . classRoom != null ) return false ; } else if ( ! classRoom . equals ( other . classRoom ) ) return false ; if ( schoolClass == null ) { if ( other . schoolClass != null ) return false ; } else if ( ! schoolClass . equals ( other . schoolClass ) ) return false ; if ( teacher == null ) { if ( other . teacher != null ) return false ; } else if ( ! teacher . equals ( other . teacher ) ) return false ; if ( teachingUnit == null ) { if ( other . teachingUnit != null ) return false ; } else if ( ! teachingUnit . equals ( other . teachingUnit ) ) return false ; return true ; }
tr	IDF	public Label ( String nom , int taille_police ) { super ( nom ) ; setFont ( new Font ( "Impact" , 0 , taille_police ) ) ; }
tr	KEY	public boolean examine ( ) { System . out . println ( this . description ) ; return true ; }
tr	KEY	public int getStaff_responsible ( ) { return staff_responsible ; }
tr	KEY	public void setGeom ( int _geom ) ;
tr	KEY	final public String GetName ( ) { return Name ; }
tr	IDF	public String toCsv ( ) { return Base . PrintStringNull ( this . getStreetAddressLine1 ( ) ) + " " + Base . PrintStringNull ( this . getStreetAddressLine2 ( ) ) + " " + Base . PrintStringNull ( this . getCity ( ) ) + " " + Base . PrintObjectNull ( this . getState ( ) != null ? this . getState ( ) . getCode ( ) : this . getState ( ) ) + " " + Base . PrintObjectNull ( this . getZip ( ) ) + " " + Base . PrintObjectNull ( this . getCounty ( ) != null ? this . getCounty ( ) . getCode ( ) : this . getCounty ( ) ) ; }
tr	IDF	public void run ( ) { try { Thread . sleep ( 2000 ) ; } catch ( InterruptedException ex ) { } System . exit ( 0 ) ; }
tr	IDF	public void hashSetMethod ( ) { Set < String > hashSet = new HashSet < String > ( ) ; hashSet . add ( "aaa" ) ; hashSet . clear ( ) ; boolean b1 = hashSet . contains ( "aaa" ) ; boolean b2 = hashSet . isEmpty ( ) ; hashSet . remove ( "aaa" ) ; int i = hashSet . size ( ) ; System . out . println ( "" + b1 + b2 + i ) ; }
tr	IDF	private static Color DbToObj ( ResultSet rs ) throws SQLException { Color res = new Color ( ) ; res . setId ( rs . getInt ( "ID" ) ) ; res . setColor ( rs . getString ( "COLOR" ) ) ; res . setPrecio ( rs . getDouble ( "PRECIO" ) ) ; res . setIncremento ( rs . getDouble ( "INCREMENTO" ) ) ; res . setComentarios ( rs . getString ( "COMENTARIOS" ) ) ; res . setFua ( rs . getDate ( "FUA" ) ) ; res . setEspintura ( rs . getBoolean ( "ESPINTURA" ) ) ; res . setIdplanta ( rs . getInt ( "IDPLANTA" ) ) ; return res ; }
tr	KEY	public void setPowered ( boolean powered ) { this . powered = powered ; }
tr	IDF	public void resetAllGameActions ( ) { for ( int i = 0 ; i < keyActions . length ; i ++ ) { if ( keyActions [ i ] != null ) { keyActions [ i ] . reset ( ) ; } } for ( int i = 0 ; i < mouseActions . length ; i ++ ) { if ( mouseActions [ i ] != null ) { mouseActions [ i ] . reset ( ) ; } } }
tr	IDF	public void setBilling ( Address billing ) { this . billing = billing ; }
tr	IDF	@ Override public void onTouch ( GameObject other ) { }
tr	IDF	void updateSharedQuery ( Map < String , MainQuery > mainQueries ) throws ParsingException { if ( extQueries == null ) return ; for ( ExtQuery extQuery : extQueries ) { if ( extQuery . text != null ) continue ; MainQuery sharedOne = mainQueries . get ( extQuery . getId ( ) ) ; if ( sharedOne == null ) throw new ParsingException ( "there is no main query  id=" + extQuery . getId ( ) ) ; extQuery . text = sharedOne . text ; extQuery . parameters = sharedOne . parameters ; } }
tr	IDF	public void keyPressed ( java . awt . event . KeyEvent evt ) { }
tr	IDF	public void setProfileId ( String profileId ) { this . profileId = profileId ; }
tr	KEY	public static LiteralFactory getLiteralFactory ( ) { return LITERAL_FACTORY ; }
tr	IDF	@ Override public void open ( TcpConnection conn ) { }
tr	IDF	boolean hasSignature ( Document doc ) { return ( findSignatureElement ( doc ) != null ) ; }
tr	IDF	private DateTime findLastedDateTime ( List < ArticleStatModel > articleStatModels ) { DateTime lastedTime = new DateTime ( 1 ) ; for ( ArticleStatModel each : articleStatModels ) { if ( each . getDate ( ) . getMillis ( ) > lastedTime . getMillis ( ) ) { lastedTime = each . getDate ( ) ; } } return lastedTime ; }
tr	IDF	public void actionPerformed ( ActionEvent e ) { miCreateProfileActionPerformed ( e ) ; }
tr	IDF	public GUIconsultarCalendario ( String nombre ) { nombreUsuario = nombre ; initComponents ( ) ; }
tr	KEY	public GetMessageStatusesByReferenceResponse createGetMessageStatusesByReferenceResponse ( ) { return new GetMessageStatusesByReferenceResponse ( ) ; }
tr	IDF	public static String getProfilesUrl ( String platform , String version ) { return MessageFormat . format ( BeanstreamUrls . BaseProfilesUrl , platform , version ) ; }
tr	IDF	public void setName ( String name ) { this . name = name ; }
tr	KEY	public double getLatitude ( ) { return latitude ; }
tr	IDF	public static String toString ( JSONArray ja ) throws JSONException { JSONObject jo = ja . optJSONObject ( 0 ) ; if ( jo != null ) { JSONArray names = jo . names ( ) ; if ( names != null ) { return rowToString ( names ) + toString ( names , ja ) ; } } return null ; }
tr	KEY	public abstract void mutateParameters ( ) ;
tr	KEY	public double getRadius ( ) { return radius ; }
tr	IDF	private Vector mate ( Vector a , Vector b ) { Vector child = LAFactory . newInstance ( ) . newVector ( a . getNumberOfEntries ( ) , a . getProvider ( ) ) ; int idx = rand . nextInt ( a . getNumberOfEntries ( ) ) ; for ( int i = 0 ; i < idx ; ++ i ) { child . set ( i , a . get ( i ) ) ; } for ( int i = idx ; i < a . getNumberOfEntries ( ) ; ++ i ) { child . set ( i , b . get ( i ) ) ; } return child ; }
tr	KEY	public void setId ( long id ) { this . id = id ; }
tr	KEY	public FlickrPanel ( ) { }
tr	KEY	public class < ? > getObjType ( ) { return objType ; }
tr	IDF	@ Override public String serialize ( ) { return Json . jsonObject ( Json . jsonMembers ( Json . jsonPair ( "x" , Json . jsonValue ( location . xVal + "" ) ) , Json . jsonPair ( "y" , Json . jsonValue ( location . yVal + "" ) ) , Json . jsonPair ( "owner" , Json . jsonValue ( owner . name + "" ) ) ) ) ; }
tr	IDF	public void startClient ( ) { try { socket [ 0 ] = new Socket ( ipAddr , portNum ) ; outData [ 0 ] = new DataOutputStream ( socket [ 0 ] . getOutputStream ( ) ) ; inData [ 0 ] = new DataInputStream ( socket [ 0 ] . getInputStream ( ) ) ; } catch ( IOException ioe ) { out . println ( "ERROR: Unable to connect - " + "is the server running?" ) ; System . exit ( 10 ) ; } }
tr	KEY	public boolean isCorrupted ( ) { return corrupted ; }
tr	KEY	public double getIVA_Fac ( ) { return IVA_Fac ; }
tr	IDF	@ Override public boolean containsKey ( Object key ) { return keys . contains ( key ) ; }
tr	KEY	public boolean isUserError ( ) { return false ; }
tr	IDF	private void bLowerActionPerformed ( java . awt . event . ActionEvent evt ) { _cuniv . p2cUpdateObject ( currentObjName , new Vector3d ( 0 , - Translation_Value , 0 ) , new Vector3d ( 0 , 0 , 0 ) ) ; }
tr	KEY	public boolean isPodeAndar ( ) { return podeAndar ; }
tr	KEY	public ObjectFactory ( ) { }
tr	IDF	public boolean updateStatus ( Map < String , Object > param ) { boolean flg = false ; try { sqlMapClient . update ( SqlMap . USER_UPDATE_STATUS , param ) ; flg = true ; } catch ( Exception e ) { log . error ( "\u66F4\u65B0\u7528\u6237\u767B\u5F55\u72B6\u6001\u5931\u8D25" ) ; e . printStackTrace ( ) ; } return flg ; }
tr	KEY	public void unload ( ) { this . header = null ; this . btnCollection = null ; }
tr	IDF	private ResponseListener < ReportAmpsResponse > createAmpsListener ( final CountDownLatch latch ) { return new ResponseListener < ReportAmpsResponse > ( ) { @ Override public void onResponse ( ReportAmpsResponse response ) { latch . countDown ( ) ; int [ ] amps = response . getAmps ( ) ; for ( int i = 0 ; i < amps . length ; i ++ ) motors [ i ] . setAmps ( amps [ i ] ) ; } } ; }
tr	IDF	public Book findById ( int id ) { return daoBook . find ( id ) ; }
tr	KEY	public Position getPosition ( ) { return this . position ; }
tr	IDF	public javax . xml . stream . XMLStreamReader getPullParser ( javax . xml . namespace . QName qName ) throws org . apache . axis2 . databinding . ADBException { java . util . ArrayList elementList = new java . util . ArrayList ( ) ; java . util . ArrayList attribList = new java . util . ArrayList ( ) ; if ( local_returnTracker ) { elementList . add ( new javax . xml . namespace . QName ( "http://tinyurl.com.src" , "return" ) ) ; elementList . add ( local_return == null ? null : org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( local_return ) ) ; } return new org . apache . axis2 . databinding . utils . reader . ADBXMLStreamReaderImpl ( qName , elementList . toArray ( ) , attribList . toArray ( ) ) ; }
tr	KEY	public SearchRequest createSearchRequest ( ) { return new SearchRequest ( ) ; }
tr	KEY	public Customer ( ) { }
tr	IDF	public ScrambleGameManager ( final GameDisplayPane displayPane ) { this . camera = new ScrambleCamera ( displayPane ) ; this . stopWatch = new StopWatch ( ) ; this . board = new ScrambleBoard ( this ) ; this . gameState = GameState . INITIALIZING ; soundManager . loadAudioSampleAU ( "/scramble/audio/spaceMusic.au" , AMBIENT ) ; soundManager . loadAudioSample ( "/scramble/audio/danger.wav" , DANGER ) ; soundManager . loadAudioSample ( "/scramble/audio/gameOver.wav" , GAME_OVER ) ; soundManager . loadAudioSample ( "/scramble/audio/getReady.wav" , GET_READY ) ; soundManager . loadAudioSample ( "/scramble/audio/levelChange.wav" , LEVEL_CHANGE ) ; soundManager . loadAudioSample ( "/scramble/audio/swapLetters.wav" , SWAP_LETTERS ) ; soundManager . loadAudioSample ( "/scramble/audio/wordFound.wav" , WORD_FOUND ) ; }
tr	IDF	@ Test ( timeout = TIMEOUT ) public void testTo3K ( ) { Integer [ ] testArray = { 1 , 123 , 14 , 9 , 2345 , 20 , 55 } ; sorter . topKSort ( testArray , topKComp , 3 ) ; assertTrue ( "Testing top k sort with k of 2" , firstKAreSorted ( testArray , 3 ) ) ; }
tr	KEY	public synchronized boolean isYrepetitionEnabled ( ) { return isYrepeatable ; }
tr	KEY	protected boolean isActive ( ) { return this . getOwner ( ) . isActive ( ) ; }
tr	KEY	public double getLimitAxisX ( ) ;
tr	IDF	@ Override public boolean isClicked ( int x , int y ) { return ( this . x <= x && this . y <= y && x <= this . x + w && y <= this . y + h ) ; }
tr	KEY	public Replacer ( ) { }
tr	KEY	public static double boundAngleNeg180to180Degrees ( double angle ) { while ( angle >= 180.0 ) { angle -= 360.0 ; } while ( angle < - 180.0 ) { angle += 360.0 ; } return angle ; }
tr	KEY	public synchronized boolean isXrepetitionEnabled ( ) { return isXrepeatable ; }
tr	KEY	@ Override public boolean save ( ) { return false ; }
tr	KEY	public int getId ( ) { return id ; }
tr	KEY	public int getTaille ( ) { return tab_cases . length ; }
tr	IDF	public List < EvaluationBean > getEvaluation ( ) { return evaluation ; }
tr	IDF	public void setVelocityY ( float dy ) { velocity . y = dy ; }
tr	IDF	static boolean equals ( Object tree1 , Object tree2 ) { if ( tree1 == tree2 ) return true ; int size1 = treeSize ( tree1 ) , size2 = treeSize ( tree2 ) ; if ( size1 != size2 ) return false ; else return equals ( tree1 , 0 , tree2 , 0 , 0 , size1 ) ; }
tr	IDF	public void deleteFile ( String path ) { try { File file = new File ( path ) ; if ( file . delete ( ) ) { System . out . println ( file . getName ( ) + " is deleted!" ) ; } else { System . out . println ( "Delete operation is failed." ) ; } } catch ( Exception e ) { e . printStackTrace ( ) ; } }
tr	IDF	private Collection < AngleUnitFlapPattern > createPatterns ( final int divisionSize , final boolean mirrorTestEnabled , final boolean rotationTestEnabled ) { List < AngleUnitFlapPattern > patterns = new LinkedList < > ( ) ; LOGGER . info ( "create mountain only  degree " ) ; Collection < AngleUnitFlapPattern > uniqueMountainOnlys = createAllMountainOnlyPatterns ( new AngleUnitFlapPattern ( divisionSize ) , divisionSize / 2 - 1 ) ; LOGGER . debug ( "#all of mountain only: " + uniqueMountainOnlys . size ( ) ) ; LOGGER . info ( "#uniques of mountain only: " + uniqueMountainOnlys . size ( ) ) ; LOGGER . debug ( uniqueMountainOnlys ) ; Rule < AngleUnitFlapPattern > pruningRule = ruleFactory . createNoPruning ( ) ; LOGGER . info ( "add valleys for each" ) ; for ( AngleUnitFlapPattern mountainOnly : uniqueMountainOnlys ) { int mountainCount = mountainOnly . countLines ( ) ; patterns . addAll ( createValleyAddedPatterns ( mountainOnly , mountainCount + 2 , mountainCount * 2 + 2 , pruningRule ) ) ; } return patterns ; }
tr	KEY	@ Override public void pressMoveLeft ( ) { }
tr	KEY	public void setResolution ( double resolution ) { this . resolution = resolution ; }
tr	IDF	public static void main ( String [ ] args ) throws IOException , InterruptedException { ServerSocket serverSocket = new ServerSocket ( 8080 ) ; while ( true ) { Socket socket = serverSocket . accept ( ) ; InputStream inputStream = socket . getInputStream ( ) ; BufferedReader bufferedReader = new BufferedReader ( new InputStreamReader ( inputStream ) ) ; OutputStream outputStream = socket . getOutputStream ( ) ; BufferedWriter bufferedWriter = new BufferedWriter ( new OutputStreamWriter ( outputStream ) ) ; String line = null ; String method = null ; int spaceCnt = 0 ; while ( ( line = bufferedReader . readLine ( ) ) != null ) { if ( method == null ) method = line . split ( "\\s+" ) [ 0 ] ; System . out . println ( line ) ; if ( line . trim ( ) . isEmpty ( ) ) spaceCnt ++ ; if ( method . equalsIgnoreCase ( "GET" ) && spaceCnt > 0 ) break ; if ( spaceCnt == 1 ) { bufferedWriter . flush ( ) ; } if ( spaceCnt >= 2 ) break ; } System . out . println ( "read end." ) ; try { System . out . println ( "start>>>" ) ; bufferedWriter . write ( "HTTP/1.1 200 OK" ) ; bufferedWriter . newLine ( ) ; System . out . println ( "here" ) ; bufferedWriter . write ( "Content: application/json" ) ; bufferedWriter . newLine ( ) ; bufferedWriter . newLine ( ) ; System . out . println ( "here2" ) ; bufferedWriter . write ( "{\"a\":1}" ) ; bufferedWriter . flush ( ) ; System . out . println ( "here3" ) ; } catch ( Exception e ) { inputStream . close ( ) ; outputStream . close ( ) ; socket . close ( ) ; } finally { } if ( ! socket . isClosed ( ) ) { inputStream . close ( ) ; outputStream . close ( ) ; socket . close ( ) ; } } }
tr	KEY	@ Override public boolean performCancel ( ) { return super . performCancel ( ) ; }
tr	KEY	public int getValor ( ) { return tipoPeca . getValor ( ) ; }
tr	KEY	protected void execute ( ) { }
tr	KEY	public List < double > getBestLocation ( ) { return personalBest ; }
tr	KEY	@ Test public final void testStorageUnitNullParameter ( ) { try { new MockDiskUnit ( null ) ; fail ( ) ; } catch ( final NullPointerException e ) { } }
tr	IDF	@ Override public void setContext ( ActionBeanContext context ) { this . ctx = ( CartAppActionBeanContext ) context ; }
tr	IDF	public void actionPerformed ( ActionEvent e ) { String layer_choice = getCommand ( layer ) ; String object_choice = getCommand ( object ) ; LinkedList < String > results = null ; try { if ( layer_choice . equals ( InfoEnum . Layer . BUSINESS . name ( ) ) ) { results = Inference . checkSecurityPatternContext ( ms . req_bus_model , Integer . valueOf ( object_choice ) , true ) ; } else if ( layer_choice . equals ( InfoEnum . Layer . APPLICATION . name ( ) ) ) { results = Inference . checkSecurityPatternContext ( ms . req_app_model , Integer . valueOf ( object_choice ) , true ) ; } else if ( layer_choice . equals ( InfoEnum . Layer . PHYSICAL . name ( ) ) ) { results = Inference . checkSecurityPatternContext ( ms . req_phy_model , Integer . valueOf ( object_choice ) , true ) ; } else { NewCommandPanel . logger . severe ( "Layer selection error!" ) ; } } catch ( NumberFormatException | IOException e1 ) { e1 . printStackTrace ( ) ; } String hold = "" ; String not_hold = "" ; String undecidable = "" ; String temp = "" ; for ( String s : results ) { if ( s . startsWith ( "hold" ) ) { temp = s . substring ( 5 , s . indexOf ( " " ) ) ; hold += temp + " pattern is applicable in current context.\n" ; } else if ( s . startsWith ( "not_hold" ) ) { temp = s . substring ( 9 , s . indexOf ( " " ) ) ; not_hold += temp + " pattern is not applicable in current context.\n" ; } else if ( s . startsWith ( "undecidable" ) ) { temp = s . substring ( 12 , s . indexOf ( " " ) ) ; undecidable += temp + " pattern is undecidable in current context.\n" ; } } if ( ! hold . equals ( "" ) ) { JOptionPane . showMessageDialog ( frmMuserControlPanel , hold ) ; } if ( ! not_hold . equals ( "" ) ) { JOptionPane . showMessageDialog ( frmMuserControlPanel , not_hold ) ; } if ( ! undecidable . equals ( "" ) ) { JOptionPane . showMessageDialog ( frmMuserControlPanel , undecidable ) ; } String question = "" ; for ( String s : results ) { if ( s . startsWith ( "question" ) ) { temp = s . substring ( 9 , s . indexOf ( "_" ) ) ; int check_result = JOptionPane . showConfirmDialog ( frmMuserControlPanel , InfoEnum . pattern_context_question . get ( s ) , temp + " pattern primary context check" , JOptionPane . YES_NO_OPTION ) ; try { if ( check_result == JOptionPane . YES_OPTION ) { Inference . writeFile ( InfoEnum . current_directory + "/dlv/context/domain_context.dl" , "\n" + InfoEnum . pattern_context_question . get ( s + "y" ) , true ) ; } else { Inference . writeFile ( InfoEnum . current_directory + "/dlv/context/domain_context.dl" , "\n" + InfoEnum . pattern_context_question . get ( s + "n" ) , true ) ; } } catch ( IOException e1 ) { e1 . printStackTrace ( ) ; } } } }
tr	KEY	public ItemList ( ) { }
tr	KEY	public void setArrTiles2 ( int [ ] arrTiles2 ) { this . arrTiles2 = arrTiles2 ; }
tr	KEY	@ Override public void putSpace ( ) throws ParsingException { throw new UnsupportedCharacterException ( this , Characters . SPACE ) ; }
tr	IDF	public void updatePalaceTiles ( int num , int value ) { if ( value == 2 ) { updateTwoPalaceTiles ( num ) ; } else if ( value == 4 ) { updateFourPalaceTiles ( num ) ; } else if ( value == 6 ) { updateSixPalaceTiles ( num ) ; } else if ( value == 8 ) { updateEightPalaceTiles ( num ) ; } else if ( value == 10 ) { updateTenPalaceTiles ( num ) ; } }
tr	KEY	public int getScoredLineCnt ( ) { return scoredLineCnt ; }
tr	KEY	public int getyExit ( ) ;
tr	IDF	@ Override public void run ( ) { try { for ( int i = 1 ; i <= 10 ; i ++ ) { threadMessage ( i + ". \"" + name + "\" Cycle" ) ; Thread . sleep ( patience ) ; } threadMessage ( "\"" + name + "\" Waiting for others to arrive" ) ; barrier . await ( ) ; threadMessage ( "\"" + name + "\" Done!" ) ; } catch ( InterruptedException e ) { threadMessage ( "\"" + name + "\" Received Interrupt!" ) ; } catch ( BrokenBarrierException e ) { threadMessage ( "\"" + name + "\" Barrier was broken!" ) ; } }
tr	KEY	public static final int getNTSC ( int colorIndex , int luminanceIndex ) { if ( colorIndex > 15 || luminanceIndex > 15 ) return 000000 ; return NTSC [ colorIndex * 16 + luminanceIndex ] ; }
tr	IDF	public NotaFiscalBuilder naData ( Calendar data ) { dataAtual = data ; return this ; }
tr	KEY	public short getCalories ( ) { return ( calories ) ; }
tr	IDF	public synchronized void addSprite ( Sprite sprite ) { sprites . add ( sprite ) ; }
tr	IDF	public TBlock rotateClockwiseCounter ( ) { PositionDirection newPd = pd . next ( 3 * 3 ) ; return transformate ( pd , newPd ) ; }
tr	KEY	public void deleteAuthor ( int id ) throws WebshopAppException ;
tr	KEY	public boolean isSelected ( ) { return selected ; }
tr	KEY	public void setCountsSec ( double countsSec ) { this . countsSec = countsSec ; }
tr	IDF	@ Override public void execute ( String character , CommandContext commandContext ) { commandContext . addScript ( Scripts . aScript ( new Fight ( opponent ) ) . lasting ( 3 ) ) ; }
tr	KEY	public double getValPro_Anulacion ( ) { return ValPro_Anulacion ; }
tr	IDF	@ Override protected TaskAction getListenAction ( ) { return TaskAction . CUSER_REQUESTNAMECHANGEFAILED ; }
tr	KEY	@ Override public boolean isHuman ( ) { return false ; }
tr	KEY	public synchronized void xsetR1RepeatDelay ( int a ) { r1RD = a ; }
tr	IDF	public MultiKnapsackEvaluationFunction ( double maxWeight , double [ ] ratios ) { this . maxWeight = maxWeight ; this . knapsacks = ratios . length ; this . ratios = ratios ; this . partitionWeights = new double [ ratios . length ] ; MultiKnapsackEvaluationFunction . P = new double [ ratios . length ] ; for ( int i = 0 ; i < ratios . length ; i ++ ) this . partitionWeights [ i ] = this . maxWeight * ratios [ i ] ; for ( int i = 0 ; i < ratios . length ; i ++ ) MultiKnapsackEvaluationFunction . P [ i ] = this . partitionWeights [ i ] ; }
tr	IDF	private void createScheduleButtonActionPerformed ( ActionEvent evt ) { createSchedule ( ) ; }
tr	IDF	public void setStartTime ( String startTime ) { this . startTime = startTime ; }
tr	KEY	public int [ ] executeBatch ( ) throws SQLException { return this . ps . executeBatch ( ) ; }
tr	KEY	public int getHeight ( ) { return height ; }
tr	KEY	public void onBind ( class < ? extends IListener > listenerClass ) ;
tr	IDF	public void removeReference ( String collection , String key , String value ) { Map < String , String > _reference = new HashMap < String , String > ( ) ; _reference . put ( key , value ) ; this . _collections . get ( collection ) . remove ( _reference ) ; }
tr	IDF	public static ArrayList < PokerCard > getBestHandWithTie ( ArrayList < PokerCard > cards , ArrayList < PokerCard > newCards , int rank ) { PokerHandComparer handComparer = resolveTieHand ( cards , newCards , rank ) ; if ( handComparer == PokerHandComparer . FirstHandIsBetter ) { return cards ; } else if ( handComparer == PokerHandComparer . SecondHandIsBetter ) { return newCards ; } else { return cards ; } }
tr	IDF	public void initComponents ( GameGUI < S , P , M > gameGUI ) { this . gameGUI = gameGUI ; initComponents ( ) ; JPanel boardPanel = gameGUI . getBoardPanel ( ) ; boardContainerPanel . add ( boardPanel , BorderLayout . CENTER ) ; List < ? extends JComponent > tabs = gameGUI . getPanels ( ) ; for ( JComponent tab : tabs ) { tabbedPane . add ( tab ) ; } tabbedPane . remove ( rankingPanel ) ; }
tr	KEY	public void setIdnews ( int idnews ) { this . idnews = idnews ; }
tr	IDF	public static final Hole readHole ( File definitionFile ) { LOGGER . log ( Level . INFO , "Reading hole JSON from file '" + definitionFile + "'" ) ; JSONParser parser = new JSONParser ( ) ; JSONObject jsonObject = null ; try { jsonObject = ( JSONObject ) parser . parse ( new FileReader ( definitionFile ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } catch ( org . json . simple . parser . ParseException e ) { e . printStackTrace ( ) ; } HoleType holeType = HoleType . STRAIGHT ; switch ( ( ( String ) ( jsonObject . get ( "holeType" ) ) ) . toLowerCase ( ) ) { case "hard left" : case "hard-left" : case "hardleft" : holeType = HoleType . HARD_LEFT ; break ; case "slight left" : case "slight-left" : case "slightleft" : holeType = HoleType . SLIGHT_LEFT ; break ; case "straight" : holeType = HoleType . STRAIGHT ; break ; case "slight right" : case "slight-right" : case "slightright" : holeType = HoleType . SLIGHT_RIGHT ; break ; case "hard right" : case "hard-right" : case "hardright" : holeType = HoleType . HARD_RIGHT ; break ; default : System . out . println ( "Unknown hole type" ) ; } Hole hole = new Hole ( ( int ) ( ( long ) jsonObject . get ( "holeNumber" ) ) , holeType , ( int ) ( ( long ) jsonObject . get ( "distance" ) ) , ( int ) ( ( long ) jsonObject . get ( "par" ) ) , ( int ) ( ( long ) jsonObject . get ( "timesPlayed" ) ) , ( int ) ( ( long ) jsonObject . get ( "holesInOne" ) ) , ( int ) ( ( long ) jsonObject . get ( "bestScore" ) ) , ( int ) ( ( long ) jsonObject . get ( "averageScore" ) ) , ( int ) ( ( long ) jsonObject . get ( "worstScore" ) ) , ( String ) jsonObject . get ( "description" ) ) ; LOGGER . log ( Level . INFO , "Created hole '" + hole . getHoleNumber ( ) + "'" ) ; return hole ; }
tr	IDF	String getKeyPath ( int num ) { if ( ! pathInputVerifier . verify ( keyPaths [ num ] ) ) return null ; return keyPaths [ num ] . getText ( ) ; }
tr	IDF	public FeatureVector getFeatureVector ( DependencyInstance now ) { FeatureVector fv = new FeatureVector ( lfd . size ) ; if ( ! lfd . options . useHO ) return fv ; int [ ] heads = now . heads ; int [ ] toks = now . formids ; int len = now . length ; DependencyArcList arcLis = new DependencyArcList ( heads , lfd . options . useHO ) ; int [ ] pos = now . postagids ; int [ ] posA = now . cpostagids ; SpecialPos [ ] specialPos = now . specialPos ; int [ ] spanLeft = arcLis . left ; int [ ] spanRight = arcLis . right ; long code = 0 ; for ( int i = 0 ; i < len ; ++ i ) { if ( SpecialPos . P == specialPos [ i ] ) { int par = heads [ i ] ; int [ ] c = synFactory . findPPArg ( heads , specialPos , arcLis , i ) ; for ( int z = 0 ; z < c . length ; ++ z ) { if ( par != - 1 && c [ z ] != - 1 ) { fv . addEntries ( getPPFeatureVector ( par , i , c [ z ] ) ) ; } } } if ( SpecialPos . C == specialPos [ i ] ) { int [ ] arg = synFactory . findConjArg ( arcLis , heads , i ) ; int head = arg [ 0 ] ; int left = arg [ 1 ] ; int right = arg [ 2 ] ; if ( left != - 1 && right != - 1 && left < right ) { fv . addEntries ( getCC1FeatureVector ( left , i , right ) ) ; if ( head != - 1 ) { fv . addEntries ( getCC2FeatureVector ( i , head , left ) ) ; fv . addEntries ( getCC2FeatureVector ( i , head , right ) ) ; } } } if ( SpecialPos . PNX == specialPos [ i ] ) { int j = synFactory . findPuncCounterpart ( toks , i ) ; if ( j != - 1 && heads [ i ] == heads [ j ] ) fv . addEntries ( getPNXFeatureVector ( heads [ i ] , i , j ) ) ; } } int rb = synFactory . getMSTRightBranch ( specialPos , arcLis , 0 , 0 ) ; code = synFactory . createArcCodeP ( Arc . RB , 0 ) ; synFactory . addArcFeature ( code , ( double ) rb / len , fv ) ; for ( int m = 1 ; m < len ; ++ m ) { int leftNum = 0 ; int rightNum = 0 ; int maxDigit = 64 - Arc . numArcFeatBits - synFactory . flagBits ; int maxChildStrNum = ( maxDigit / synFactory . tagNumBits ) - 1 ; int childStrNum = 0 ; code = pos [ m ] ; int st = arcLis . startIndex ( m ) ; int ed = arcLis . endIndex ( m ) ; for ( int j = st ; j < ed ; ++ j ) { int cid = arcLis . get ( j ) ; if ( SpecialPos . PNX != specialPos [ cid ] ) { if ( cid < m && leftNum < MAX_CHILD_NUM ) leftNum ++ ; else if ( cid > m && rightNum < MAX_CHILD_NUM ) rightNum ++ ; if ( childStrNum < maxChildStrNum ) { code = ( ( code << synFactory . tagNumBits ) | pos [ cid ] ) ; childStrNum ++ ; } } } code = ( ( code << Arc . numArcFeatBits ) | Arc . CN_STR . ordinal ( ) ) << synFactory . flagBits ; synFactory . addArcFeature ( code , fv ) ; fv . addEntries ( getChildNumFeatureVector ( m , leftNum , rightNum ) ) ; int end = spanRight [ m ] == len ? 1 : 0 ; int punc = ( spanRight [ m ] < len && SpecialPos . PNX == specialPos [ spanRight [ m ] ] ) ? 1 : 0 ; int bin = Math . min ( MAX_SPAN_LENGTH , ( spanRight [ m ] - spanLeft [ m ] ) ) ; fv . addEntries ( getSpanFeatureVector ( m , end , punc , bin ) ) ; if ( heads [ m ] != - 1 ) { int leftID = spanLeft [ m ] > 0 ? posA [ spanLeft [ m ] - 1 ] : synFactory . TOKEN_START ; int rightID = spanRight [ m ] < len ? posA [ spanRight [ m ] ] : synFactory . TOKEN_END ; if ( leftID > 0 && rightID > 0 ) { fv . addEntries ( getNeighborFeatureVector ( heads [ m ] , m , leftID , rightID ) ) ; } } } return fv ; }
tr	KEY	public ChamadosRecentesDAO ( ) throws SQLException { super ( ) ; }
tr	KEY	public void setxFood ( int [ ] xFood ) { this . xFood = xFood ; }
tr	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButton5ActionPerformed ( evt ) ; }
tr	IDF	@ Nullable private static String parse ( String stdout ) { String [ ] lines = stdout . split ( "\n" ) ; for ( String line : lines ) { if ( line . contains ( "Repository Root:" ) ) { return line . replace ( "Repository Root:" , "" ) . trim ( ) ; } } return null ; }
tr	IDF	private void configEachPanel ( JPanel x ) { if ( x == panelMenuPrincipal ) { refreshPlayerStatsMenuPrincipal ( ) ; } else if ( x == panelMenuFases ) { loadMenuFases ( ) ; refreshPlayerStatsMenuFases ( ) ; } else if ( x == panelFase ) { imagemGradeFase_Fase . setIcon ( new javax . swing . ImageIcon ( getClass ( ) . getResource ( "/data/storage/level/fase" + Universal . currentFaseId + ".png" ) ) ) ; labelText_Fase . setText ( "Notes: \n" + FasesDados . fase [ Universal . currentFaseId ] . text ) ; } }
tr	IDF	@ Override public Pane getPane ( ) { ScrollPane scrollPane = new ScrollPane ( ) ; scrollPane . setStyle ( "-fx-padding: 25px;" ) ; scrollPane . setContent ( flowPane ) ; scrollPane . viewportBoundsProperty ( ) . addListener ( new ChangeListener < Bounds > ( ) { @ Override public void changed ( ObservableValue < ? extends Bounds > ov , Bounds oldBounds , Bounds bounds ) { flowPane . setPrefWidth ( bounds . getWidth ( ) ) ; flowPane . setPrefHeight ( bounds . getHeight ( ) ) ; } } ) ; borderPane . setCenter ( scrollPane ) ; borderPane . setTop ( searchBar ( ) ) ; Pagination pagination = PaginationBuilder . create ( ) . pageCount ( 1 ) . build ( ) ; borderPane . setBottom ( pagination ) ; pagination . getStyleClass ( ) . add ( "hbox-search-bar" ) ; scrollPane . getStyleClass ( ) . add ( "background-style" ) ; return borderPane ; }
tr	KEY	public int getaProcesar ( ) { return aProcesar ; }
tr	IDF	public List < List < Integer >> threeSum ( int [ ] num ) { Arrays . sort ( num ) ; int n = num . length ; List < List < Integer >> result = new LinkedList < List < Integer >> ( ) ; if ( n < 3 ) { return result ; } for ( int i = 0 ; i <= n - 3 ; i ++ ) { if ( i > 0 && num [ i ] == num [ i - 1 ] ) { continue ; } int a = num [ i ] ; int start = i + 1 ; int end = n - 1 ; while ( start < end ) { int b = num [ start ] ; int c = num [ end ] ; if ( a + b + c == 0 ) { result . add ( Arrays . asList ( a , b , c ) ) ; while ( start < n - 1 && num [ start ] == num [ start + 1 ] ) { start ++ ; } start ++ ; while ( end > 0 && num [ end ] == num [ end - 1 ] ) { end -- ; } end -- ; System . out . println ( a + "  " + b + "  " + c ) ; } else if ( a + b + c > 0 ) { while ( end > 0 && num [ end ] == num [ end - 1 ] ) { end -- ; } end -- ; } else { while ( start < n - 1 && num [ start ] == num [ start + 1 ] ) { start ++ ; } start ++ ; } } } return result ; }
tr	IDF	public static double countsToDegrees ( double counts ) { Robot robot = Configuration . getRobot ( ) ; return counts * ( 360 / robot . getResolution ( ) ) / robot . getGearRatio ( ) ; }
tr	KEY	public double getHitpoints ( ) { return hitpoints ; }
tr	IDF	@ SuppressWarnings ( "unchecked" ) public List < Festplatte > fireQuery ( String querie ) { EntityTransaction tx = getEntityManager ( ) . getTransaction ( ) ; tx . begin ( ) ; Query query = getEntityManager ( ) . createNativeQuery ( querie , Festplatte . class ) ; tx . commit ( ) ; return query . getResultList ( ) ; }
tr	IDF	@ Override Person makePerson ( ) { return new Student ( ) ; }
tr	KEY	public static int round ( final float x ) { return ( int ) floor ( x + 0.5f ) ; }
tr	KEY	public int getHeight ( ) { return height ; }
tr	KEY	public abstract Weapon get_weapon ( ) ;
tr	IDF	public String getMdyShotDate ( ) { return ( mdyfmt . format ( shotdate ) ) ; }
tr	IDF	public TcpGameServer ( ServerOutputPort handle , CommandExecutor game ) { super ( ) ; this . handle = handle ; this . game = game ; }
tr	KEY	@ JsonProperty ( "rating" ) public long getRating ( ) { return rating ; }
tr	IDF	public void setNotesType ( String metaCode ) { this . notesType = NotesType . fromMetaCode ( metaCode ) ; }
tr	KEY	public long getGeneration ( ) { return generation ; }
tr	IDF	public Friendsh findByPrimaryKey ( Integer idFriendsh ) throws FriendshDaoException { Friendsh ret [ ] = findByDynamicSelect ( SQL_SELECT + " WHERE idfriendsh = ?" , new Object [ ] { idFriendsh } ) ; return ret . length == 0 ? null : ret [ 0 ] ; }
tr	KEY	public void setId ( int id ) { this . id = id ; }
tr	KEY	public void setTimeEstimate ( double timeEstimate ) { if ( timeEstimate < 0 ) { throw new IllegalArgumentException ( "Time estimate cannot be less than 0!" ) ; } this . timeEstimate = timeEstimate ; }
tr	KEY	public RoomDAOImpl ( ) { super ( Room . class ) ; }
tr	IDF	private NotebookDay ( Integer calendarDay , String dayName ) { this . calendarDay = calendarDay ; this . dayName = dayName ; }
tr	IDF	private void txtUserNameActionPerformed ( java . awt . event . ActionEvent evt ) { }
tr	IDF	public void insert ( char x ) { hp . add ( x ) ; for ( int i = hp . size ( ) - 1 ; x > hp . get ( ( i - 1 ) / 2 ) ; i = ( i - 1 ) / 2 ) { hp . set ( i , hp . get ( ( i - 1 ) / 2 ) ) ; hp . set ( ( i - 1 ) / 2 , x ) ; } }
tr	KEY	@ Override public double getMinSecLevel ( ) { return minSecLevel ; }
tr	KEY	public double getAmount ( ) { return amount ; }
tr	IDF	public static String largeInt ( int nr ) { int d = nr / 1000 , r = nr % 1000 ; String rv = fill ( Integer . toString ( r ) , "0" , 3 ) ; while ( d > 0 ) { r = d % 1000 ; d /= 1000 ; if ( d > 0 ) rv = fill ( Integer . toString ( r ) , "0" , 3 ) + "." + rv ; else rv = r + "." + rv ; } return rv ; }
tr	KEY	@ Override protected void bindSelf ( ) { }
tr	IDF	private void jButton3ActionPerformed ( java . awt . event . ActionEvent evt ) { textField1 . setEditable ( true ) ; textField1 . setEnabled ( true ) ; textField2 . setEditable ( true ) ; textField2 . setEnabled ( true ) ; textField3 . setEditable ( true ) ; textField3 . setEnabled ( true ) ; textField4 . setEditable ( true ) ; textField4 . setEnabled ( true ) ; jComboBox1 . setEnabled ( true ) ; jComboBox2 . setEnabled ( true ) ; textField1 . setText ( "" ) ; textField2 . setText ( "" ) ; textField3 . setText ( "" ) ; textField4 . setText ( "" ) ; jComboBox1 . setSelectedIndex ( - 1 ) ; jComboBox2 . setSelectedIndex ( - 1 ) ; list1 . setEnabled ( false ) ; jButton1 . setVisible ( false ) ; jButton2 . setVisible ( false ) ; jButton3 . setVisible ( false ) ; Cancel . setVisible ( true ) ; buttonSaveAdd . setVisible ( true ) ; }
tr	KEY	public int getResult ( ) { return _result ; }
tr	IDF	public void actionPerformed ( @ SuppressWarnings ( "unused" ) java . awt . event . ActionEvent e ) { timer . stop ( ) ; showPanel ( panelMenuPrincipal ) ; }
tr	KEY	public boolean getValor ( ) ;
tr	KEY	public boolean checaTipo ( AmbienteCompilacao amb ) { return true ; }
tr	KEY	public void close ( ) ;
tr	KEY	public float getY ( float alpha ) ;
tr	KEY	public Delete createDelete ( ) { return new Delete ( ) ; }
tr	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButton3ActionPerformed ( evt ) ; }
tr	IDF	@ Test public final void testGet ( ) { final FillInTheBlanks original = insertFillInTheBlanks ( "DatabaseFillInTheBlanksTest.testGet" ) ; final DatabaseFillInTheBlanks databaseFillInTheBlanks = new DatabaseFillInTheBlanks ( DatabaseAbstractQuestionTest . TEST_DATABASE_NAME ) ; final FillInTheBlanks after = databaseFillInTheBlanks . get ( original . getQuestionNumber ( ) ) ; assertEquals ( original , after ) ; deleteFillInTheBlanks ( original . getQuestionNumber ( ) ) ; }
tr	IDF	FList < Elt > concat ( List < ? extends Elt > list ) ;
tr	KEY	protected abstract void onFailedNode ( Node node ) ;
tr	KEY	public MessageView ( String message ) { super ( ) ; this . label = new JLabel ( message ) ; this . isGo = false ; this . isPopup = false ; this . controleur = new MessageController ( this ) ; }
tr	IDF	@ Test public void testBucket ( ) { int [ ] num = new int [ ] { 3 , 6 , 9 , 1 } ; int maxGap = maximumGap_bucket ( num ) ; System . out . println ( maxGap ) ; }
tr	IDF	public void setDate ( Date x , Calendar cal ) throws SQLException { this . ps . setDate ( parameterIndex ++ , x , cal ) ; }
tr	IDF	public boolean hasQueenAt ( int row , int col ) { return solutionSet . extractBoard ( ) [ row ] [ col ] ; }
tr	KEY	public int getTileHeight ( ) { return tileset . tileheight ; }
tr	KEY	public int getPriority ( ) { return priority ; }
tr	IDF	public CoinAnim ( int xTile , int yTile ) { sheet = Art . level ; wPic = hPic = 16 ; x = xTile * 16 ; y = yTile * 16 - 16 ; xa = 0 ; ya = - 6f ; xPic = 0 ; yPic = 2 ; }
tr	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { jBtnConeActionPerformed ( evt ) ; }
tr	KEY	public abstract void unload ( ) ;
tr	KEY	public int getDifference ( ) { return difference ; }
tr	KEY	public int [ ] getEditions ( ) { return editions ; }
tr	IDF	public < Company , Dept , SubUnit , Employee , Person , Salary > Person accept ( SybAlg < Company , Dept , SubUnit , Employee , Person , Salary > alg ) { return alg . P ( "_" + name , address ) ; }
tr	KEY	public int getResult ( ) { return _result ; }
tr	KEY	public boolean evaluerTransporteur ( ) { return false ; }
tr	IDF	public ColumnIsNull ( String columnName ) { super ( columnName ) ; }
tr	KEY	int getScoreValue ( ) ;
tr	IDF	public void setCollisionSpriteTimes ( HashMap < Sprite , long > collisionSpriteTimes ) { this . collisionSpriteTimes = collisionSpriteTimes ; }
tr	KEY	public RequirementElement ( ) { super ( ) ; }
tr	IDF	private int generateBox ( int [ ] [ ] result , int startR , int startC , int endR , int endC , int initVal ) { if ( startR == endR ) { for ( int i = startC ; i <= endC ; i ++ ) result [ startR ] [ i ] = initVal ++ ; } else if ( startC == endC ) { for ( int i = startR ; i <= endR ; i ++ ) result [ i ] [ startC ] = initVal ++ ; } else { for ( int i = startC ; i < endC ; i ++ ) result [ startR ] [ i ] = initVal ++ ; for ( int i = startR ; i < endR ; i ++ ) result [ i ] [ endC ] = initVal ++ ; for ( int i = endC ; i > startC ; i -- ) result [ endR ] [ i ] = initVal ++ ; for ( int i = endR ; i > startR ; i -- ) result [ i ] [ startC ] = initVal ++ ; } return initVal ; }
tr	KEY	@ Override public ScenarioTreeStep getNextStep ( ) { if ( this . selectedOption == - 1 ) { throw new RuntimeException ( "ScenarioTreeStepSimpleList: Auswahl-Id muss gesetzt worden sein  um n\u00E4chsten Schritt abzurufen." ) ; } return this . getFollowUpStep ( selectedOption ) ; }
tr	IDF	public World nextGeneration ( int log2StepSize ) { TestPackedWorld world = this ; int n = 1 << log2StepSize ; for ( int i = 0 ; i < n ; i ++ ) { world = world . nextGeneration ( ) ; } return world ; }
tr	IDF	@ Override public boolean equals ( Object o ) { if ( this == o ) return true ; if ( o == null || getClass ( ) != o . getClass ( ) ) return false ; Game oGame = ( Game ) o ; for ( int i = 0 ; i < BOARD_WIDTH ; i ++ ) { for ( int j = 0 ; j < BOARD_HEIGHT ; j ++ ) { if ( oGame . getColourOfStone ( i , j ) != getColourOfStone ( i , j ) ) return false ; } } return true ; }
tr	IDF	public void appendDegree ( String name ) { this . degrees . add ( name ) ; }
tr	IDF	public void setInterface ( String value ) { this . _interface = value ; }
tr	IDF	protected void switchUsable ( ) { if ( isUsable == true ) { isUsable = false ; _confirmAudio . setEnabled ( false ) ; _confirmVideo . setEnabled ( false ) ; _confirmBoth . setEnabled ( false ) ; } else { isUsable = true ; _confirmAudio . setEnabled ( true ) ; _confirmVideo . setEnabled ( true ) ; _confirmBoth . setEnabled ( true ) ; } }
tr	IDF	public Object getElementAt ( int i ) { return strings [ i ] ; }
tr	KEY	public SpriteTemplate getSpriteTemplate ( int x , int y ) { if ( x < 0 ) return null ; if ( y < 0 ) return null ; if ( x >= width ) return null ; if ( y >= height ) return null ; return spriteTemplates [ x ] [ y ] ; }
tr	KEY	public Builder hotel ( int starRating ) { this . starRating = starRating ; return this ; }
tr	KEY	public void act ( ) { control ( ) ; }
tr	IDF	@ SuppressWarnings ( "unused" ) @ Deprecated private static String drawReferredRequirementElement ( String reference_id , String canvas , String layer , String offset , String shape , String size , String corner_radius , String name , String stroke_pattern , String thickness ) throws ScriptException { String script = "" ; script += "set reference_element_id to " + reference_id + "\n" + "set target_canvas_name to \"" + canvas + "\"\n" + "set target_layer_name to \"" + layer + "\"\n" + "set target_size to " + size + "\n" + "set target_name to \"" + shape + "\"\n" + "set target_text to \"" + name + "\"\n" + "set corner_ridius to " + corner_radius + "\n" + "set target_offset to " + offset + "\n" + "set stroke_pattern to " + stroke_pattern + "\n" + "set target_thickness to " + thickness + "\n" + "draw_referred_element(reference_element_id  target_canvas_name  target_layer_name  " + "target_size  target_name  target_text  corner_ridius  target_offset  stroke_pattern  target_thickness))\n" ; String method_file = InfoEnum . drawing_method_file ; try { script = loadMethods ( script , method_file ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } String id = executeAppleScript ( script ) ; return id ; }
tr	IDF	@ Override public void inputProcess ( ) { if ( Key . return . isPressed ( ) ) { GameSceneManager . getInstance ( ) . reset ( ) ; } }
tr	IDF	public void Show ( String uname ) { ASCII_Sound beep = new ASCII_Sound ( false ) ; ASCII_Art welcome = new ASCII_Art ( ) ; Options o = new Options ( ) ; MehMurray mm = new MehMurray ( ) ; MainMenu m = new MainMenu ( ) ; PlayMenu p = new PlayMenu ( ) ; HelpMenu h = new HelpMenu ( ) ; Score s = new Score ( ) ; if ( enabled == true ) { System . out . println ( "" ) ; System . out . println ( "Main Menu" ) ; System . out . println ( "_________" ) ; System . out . println ( " " + welcome . getHphones ( ) ) ; System . out . println ( "\u00AF\u00AF\u00AF\u00AF\u00AF\u00AF\u00AF\u00AF\u00AF" ) ; for ( String [ ] z : mm . getMenuItems ( ) ) { System . out . println ( z [ 0 ] + ". " + z [ 1 ] ) ; } System . out . println ( "" ) ; } User u = new User ( ) ; try { switch ( u . getUserInt ( "What do you want to do  " + uname + "?" + "\n (Enter a #)" ) ) { case 1 : p . Show ( uname ) ; break ; case 2 : o . Show ( enabled , uname ) ; break ; case 3 : h . Show ( enabled ) ; break ; case 4 : s . Show ( ) ; Show ( uname ) ; case 5 : System . out . println ( "Buh-bye!\n" ) ; System . exit ( 0 ) ; case 99 : System . out . println ( "Invalid selection." ) ; Show ( uname ) ; break ; default : p . Show ( uname ) ; break ; } } catch ( Exception x ) { System . out . println ( "That was not an option!" ) ; System . out . println ( "Please choose one of the options listed above." ) ; } finally { System . out . println ( "If in doubt  maybe this isn't the right game for you." ) ; } }
tr	IDF	private JPanel getCtlPanel ( ) { JPanel panel = new JPanel ( ) ; JButton okBtn = new JButton ( "ok" ) ; okBtn . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { ok = true ; setVisible ( false ) ; } } ) ; JButton cancelBtn = new JButton ( "cancel" ) ; cancelBtn . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { ok = false ; setVisible ( false ) ; } } ) ; panel . add ( okBtn ) ; panel . add ( cancelBtn ) ; return panel ; }
tr	KEY	public abstract double [ ] getProfits ( ) ;
tr	IDF	protected void definirDark ( ) { raz ( ) ; panel_case . removeAll ( ) ; definirEtat ( "dark" ) ; InterfaceEditeur . tab [ this . x ] [ this . y ] = this ; }
tr	KEY	void disposeAfter ( float seconds ) ;
tr	IDF	public void setFourth ( int x , int y ) { vertices [ FOURTH ] = new Point ( x , y ) ; }
tr	KEY	public int [ ] getArrTiles ( ) { return arrTiles ; }
tr	IDF	public void closeTable ( ) { try { ps1 . close ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } }
tr	IDF	@ Override public TaskAction getAction ( ) { return TaskAction . FETCHUSER_REQUEST ; }
tr	IDF	static float sRGB_to_RGB ( float c ) { if ( c <= 0f ) { return 0f ; } if ( c >= 1f ) { return 1f ; } if ( c <= 0.04045f ) { return c / 12.92f ; } else { return ( float ) ( Math . pow ( ( c + 0.055f ) / 1.055f , 2.4 ) ) ; } }
tr	KEY	@ Override public void clear ( ) { throw new UnsupportedOperationException ( "Read only data set" ) ; }
tr	IDF	public static void savePlayersNames ( Game game , String player1Name , String player2Name ) { if ( game == null || player1Name == null || player2Name == null ) { throw new IllegalArgumentException ( "savePlayersNames - parameter value is null" ) ; } Player player1 = game . getPlayer1 ( ) ; Player player2 = game . getPlayer2 ( ) ; player1 . setName ( player1Name ) ; player2 . setName ( player2Name ) ; }
tr	KEY	@ Override public double realValue ( ) { return value ; }
tr	KEY	public void clicked ( ) { }
tr	IDF	private static void drawAndRefinement ( LinkedList < RequirementElement > refined_elems ) throws ScriptException { for ( RequirementElement refined_goal : refined_elems ) { if ( refined_goal . and_refine_links . size ( ) == 1 ) { RequirementLink target_link = refined_goal . and_refine_links . getFirst ( ) ; drawRefinement ( refined_goal , target_link ) ; } else { RequirementElement mid = new RequirementElement ( "" , InfoEnum . RequirementElementType . MIDDLE_POINT . name ( ) , refined_goal . getLayer ( ) ) ; String mid_id = AppleScript . drawRequirementElement ( mid , refined_goal , "down" ) ; mid . setId ( mid_id ) ; RequirementLink redundant_link = new RequirementLink ( InfoEnum . RequirementLinkType . AND_REFINE_ARROW . name ( ) , mid , refined_goal ) ; redundant_link . setRemark ( InfoEnum . LinkRemark . REDUNDANT . name ( ) ) ; String redundant_id = AppleScript . drawRequirementLink ( redundant_link , InfoEnum . SINGLE_LAYER ) ; redundant_link . setId ( redundant_id ) ; RequirementLink first_rl = refined_goal . and_refine_links . getFirst ( ) ; RequirementElement first_re = first_rl . getSource ( ) ; String temp_id = AppleScript . drawRequirementElement ( first_re , mid , "down" ) ; first_re . setId ( temp_id ) ; RequirementLink fake_rl = new RequirementLink ( first_rl . getType ( ) , first_rl . getSource ( ) , mid ) ; String link_id = AppleScript . drawRequirementLink ( fake_rl , InfoEnum . SINGLE_LAYER ) ; fake_rl . setId ( link_id ) ; RequirementElement next = null ; RequirementElement reference = first_re ; RequirementLink rl = null ; for ( int i = 1 ; i < refined_goal . and_refine_links . size ( ) ; i ++ ) { rl = refined_goal . and_refine_links . get ( i ) ; fake_rl = new RequirementLink ( rl . getType ( ) , rl . getSource ( ) , mid ) ; next = rl . getSource ( ) ; String next_id = AppleScript . drawRequirementElement ( next , reference , "right" ) ; next . setId ( next_id ) ; reference = next ; link_id = AppleScript . drawRequirementLink ( fake_rl , InfoEnum . SINGLE_LAYER ) ; fake_rl . setId ( link_id ) ; } } } }
tr	IDF	public ArrayList < PalaceCard > getPalaceCards ( ) { return palaceCards ; }
tr	IDF	@ Override public Menu select ( Menu menu , int index ) { for ( Menu m : menu . _children ) { if ( m . _index == index ) return m ; } for ( Selection s : menu . _selectionList ) { if ( s . _index == index ) { Menu childMenu = null ; if ( s . _text . equals ( "Buildings" ) ) { ArrayList < Piece > buildings = new ArrayList < Piece > ( ) ; for ( Piece p : menu . _player . get_pieces ( ) ) { if ( p instanceof Building && p . isActive ( ) ) buildings . add ( p ) ; } childMenu = new Menu ( menu , menu . _player , index , "Buildings" , buildings ) ; } else if ( s . _text . equals ( "Units" ) ) { ArrayList < Piece > units = new ArrayList < Piece > ( ) ; for ( Piece p : menu . _player . get_pieces ( ) ) { if ( p instanceof Unit && p . isActive ( ) ) units . add ( p ) ; } childMenu = new Menu ( menu , menu . _player , index , "Units" , units ) ; } if ( childMenu != null ) menu . _children . add ( childMenu ) ; return childMenu ; } } System . out . println ( "[Menu] The menu option you have selected is not valid!" ) ; return menu ; }
tr	IDF	private static Object buildNode ( Object elt , int ehash , Object left , Object right ) { if ( ( left == null || ! ( left instanceof Node ) ) && ( right == null || ! ( right instanceof Node ) ) ) { Object [ ] lary = ( Object [ ] ) left , rary = ( Object [ ] ) right ; if ( ! ( elt instanceof EquivalentSet ) && ( left == null ? 0 : lary . length ) + ( right == null ? 0 : rary . length ) < MAX_LEAF_ARRAY_LENGTH ) return concat ( elt , lary , rary ) ; else return makeNode ( elt , ehash , left , right ) ; } else { int sizl = treeSize ( left ) ; int sizr = treeSize ( right ) ; if ( right instanceof Node && sizr > sizl * BALANCE_FACTOR ) { Node r = ( Node ) right ; Object rl = r . left ; Object rr = r . right ; if ( ! ( rl instanceof Node ) || treeSize ( rl ) <= treeSize ( rr ) ) return makeNode ( r . element , r . ehash , buildNode ( elt , ehash , left , rl ) , rr ) ; else { Node rln = ( Node ) rl ; return makeNode ( rln . element , rln . ehash , buildNode ( elt , ehash , left , rln . left ) , buildNode ( r . element , r . ehash , rln . right , rr ) ) ; } } else if ( left instanceof Node && sizl > sizr * BALANCE_FACTOR ) { Node l = ( Node ) left ; Object ll = l . left ; Object lr = l . right ; if ( ! ( lr instanceof Node ) || treeSize ( lr ) <= treeSize ( ll ) ) return makeNode ( l . element , l . ehash , ll , buildNode ( elt , ehash , lr , right ) ) ; else { Node lrn = ( Node ) lr ; return makeNode ( lrn . element , lrn . ehash , buildNode ( l . element , l . ehash , ll , lrn . left ) , buildNode ( elt , ehash , lrn . right , right ) ) ; } } else return makeNode ( elt , ehash , left , right ) ; } }
tr	KEY	public void print ( ) { print ( this . begin ) ; }
tr	KEY	public long getCount ( ) { return count ; }
tr	IDF	public FasesDadosNode ( int id , String text , boolean hasPremio ) { this . id = id ; this . text = text ; this . hasPremio = hasPremio ; }
tr	KEY	private ScriptHelper ( ) { }
tr	KEY	public int getValue ( ) { return value ; }
tr	KEY	public int getX ( ) { return location . getX ( ) ; }
tr	KEY	public void postTurn ( ) { }
tr	KEY	public long getNumber ( ) { return number ; }
tr	IDF	public void setTweet ( String tweet ) { this . tweet = tweet ; }
tr	IDF	public void setNickname ( String nickname ) { user . setNickname ( nickname ) ; }
tr	IDF	public void setObject ( Object x , int targetSqlType , int scaleOrLength ) throws SQLException { this . ps . setObject ( parameterIndex ++ , x , targetSqlType , scaleOrLength ) ; }
tr	IDF	public List < Game > createSchedule ( ) { List < Game > games = new ArrayList < > ( ) ; for ( Player white : players ) { for ( Player black : players ) { if ( white != black ) { games . add ( new Game ( white , black ) ) ; } } } Collections . shuffle ( games ) ; return games ; }
tr	KEY	public void setWins ( int wins ) ;
tr	IDF	public void setEncryptionKey ( String encryptionKey ) { this . encryptionKey = encryptionKey ; }
tr	IDF	public NaoLogico ( Bool b ) { this . b = b ; }
tr	IDF	public BulletBill ( LevelScene world , float x , float y , int dir ) { sheet = Art . enemies ; this . x = x ; this . y = y ; this . world = world ; xPicO = 8 ; yPicO = 31 ; height = 12 ; facing = 0 ; wPic = 16 ; yPic = 5 ; xPic = 0 ; ya = - 5 ; this . facing = dir ; }
tr	IDF	private static PokerHandComparer color ( ArrayList < PokerCard > cards , ArrayList < PokerCard > newCards ) { return compareCardByCard ( cards , newCards ) ; }
tr	IDF	private void CountyParser ( ) { try { ArrayList < String > lines = ResourceReader . Read ( this . countyMappingFile ) ; for ( String s : lines ) { String [ ] split = s . split ( " " ) ; State state = this . getStatesByInt ( ) . get ( Integer . parseInt ( split [ 2 ] ) ) ; County newCounty = new County ( Integer . parseInt ( split [ 0 ] ) , split [ 1 ] . replace ( "\"" , "" ) , state ) ; this . getCountiesByStateAndCounty ( ) . put ( state . getShortName ( ) + "|" + newCounty . getName ( ) , newCounty ) ; ArrayList < County > counties = this . getCountiesSetByState ( ) . remove ( state . getShortName ( ) ) ; if ( counties == null ) { counties = new ArrayList < County > ( ) ; } counties . add ( newCounty ) ; this . getCountiesSetByState ( ) . put ( state . getShortName ( ) , counties ) ; } } catch ( Exception e ) { } }
tr	KEY	public Modele getModele ( ) { return this . modele ; }
tr	KEY	public FeederSolenoidClose ( ) { }
tr	IDF	@ Override public ArrayList < UsuarioBean > getPage ( int intRegsPerPag , int intPage , ArrayList < FilterBean > hmFilter , HashMap < String , String > hmOrder ) throws Exception { ArrayList < Integer > arrId ; ArrayList < UsuarioBean > arrUsuario = new ArrayList < > ( ) ; try { oMysql . conexion ( enumTipoConexion ) ; arrId = oMysql . getPage ( "usuario" , intRegsPerPag , intPage , hmFilter , hmOrder ) ; Iterator < Integer > iterador = arrId . listIterator ( ) ; while ( iterador . hasNext ( ) ) { UsuarioBean oUsuarioBean = new UsuarioBean ( iterador . next ( ) ) ; arrUsuario . add ( this . get ( oUsuarioBean ) ) ; } oMysql . desconexion ( ) ; return arrUsuario ; } catch ( Exception e ) { throw new Exception ( "UsuarioDao.getPage: Error: " + e . getMessage ( ) ) ; } }
tr	KEY	public ProtocolSignature ( ) { }
tr	IDF	public ProcedimentoNaoDeclaradoException ( Id id ) { super ( "Procedimento " + id + " n\u00E3o declarado." ) ; }
tr	KEY	public void startIn ( int countdown ) ;
tr	IDF	public InternalServerException ( int code , int category , String message , int httpStatusCode ) { super ( code , category , message , httpStatusCode ) ; }
tr	IDF	public INDISwitchOneOfManyProperty ( INDIDriver driver , String name , String label , PropertyStates state , PropertyPermissions permission , String [ ] elements ) { super ( driver , name , label , null , state , permission , 0 , SwitchRules . ONE_OF_MANY ) ; createElements ( elements , 0 ) ; }
tr	IDF	public void setFuncionmedicamentos ( String funcionmedicamentos ) { String oldFuncionmedicamentos = this . funcionmedicamentos ; this . funcionmedicamentos = funcionmedicamentos ; changeSupport . firePropertyChange ( "funcionmedicamentos" , oldFuncionmedicamentos , funcionmedicamentos ) ; }
tr	IDF	@ Override public Modification executeModification ( ) { return supplier . get ( ) ; }
tr	KEY	public void setId ( long id ) { this . id = id ; }
tr	KEY	public void setPriceNum ( int priceNum ) { this . priceNum = priceNum ; }
tr	IDF	public void loadOrder ( View view ) throws Exception { order . clear ( ) ; DAOFactory factory = DAOFactory . getFactory ( DAOFactory . MYSQL ) ; TableDAO orderDAO = factory . getCategoryDAO ( ) ; ( ( dbDAO ) orderDAO ) . setJob ( Job . SELECT ) ; ( ( dbDAO ) orderDAO ) . setTable ( "zamowienia" ) ; ( ( dbDAO ) orderDAO ) . setItself ( this ) ; ( ( dbDAO ) orderDAO ) . setView ( view ) ; ( ( dbDAO ) orderDAO ) . execute ( ) ; }
tr	IDF	public javax . swing . JFrame getFrameByUserNo ( String userNo , String friendNo ) { String dUserNo = String . valueOf ( dialogMap . get ( Constants . USER_NO ) ) ; String dFriendNo = String . valueOf ( dialogMap . get ( Constants . FRIEND_NO ) ) ; if ( dUserNo . equals ( userNo ) && dFriendNo . equals ( friendNo ) ) { return this ; } return null ; }
tr	IDF	private void printMessage ( String message ) { String name = Thread . currentThread ( ) . getName ( ) ; System . out . printf ( "[%s]: %s%n" , name , message ) ; }
tr	IDF	private void initHashMap ( ) { File imageSourceFile = null ; this . imageSourceHashMap = new HashMap < String , String > ( ) ; try { imageSourceFile = new File ( "bin/files/PlayerImageStrings.txt" ) ; BufferedReader fileReader = new BufferedReader ( new FileReader ( imageSourceFile ) ) ; String line = "" ; while ( ( line = fileReader . readLine ( ) ) != null ) { String [ ] hash = line . split ( " " ) ; imageSourceHashMap . put ( hash [ 0 ] , hash [ 1 ] ) ; } fileReader . close ( ) ; } catch ( Exception e ) { System . out . println ( e . getMessage ( ) ) ; } }
tr	KEY	void AddBalance ( int amount , int balance , int playerId ) ;
tr	IDF	public boolean deleteUser ( String username ) throws SQLException { return Executor . executeUpdate ( db . getConnection ( ) , deleteUserQuery , username ) > 0 ; }
tr	KEY	public void setUse ( boolean isUse ) { this . isUse = isUse ; }
tr	KEY	public void load ( long position , byte [ ] data ) { }
tr	KEY	public void setId5 ( int id5 ) { this . id5 = id5 ; }
tr	IDF	Component passwordEdittext ( ) { passwrdEdittext = new JPasswordField ( 10 ) ; passwrdEdittext . setText ( "1234567" ) ; passwrdEdittext . setBackground ( Color . red ) ; passwrdEdittext . setFont ( new Font ( "Tahoma" , Font . CENTER_BASELINE , 14 ) ) ; passwrdEdittext . setForeground ( Color . white ) ; return passwrdEdittext ; }
tr	KEY	public int size ( ) { return FLinkedHashMap . this . size ( ) ; }
tr	KEY	public static int getSubPixel_Log2_Y ( ) { return getInteger ( "sun.java2d.renderer.subPixel_log2_Y" , 3 , 1 , 8 ) ; }
tr	KEY	public long getAttributeID ( ) { return attributeID ; }
tr	IDF	public void assignLTKeyCode ( XbpadButton button , String text , int keycode ) { container . xgetCurrentPreset ( ) . xassignLTKeyCode ( keycode ) ; button . setText ( text ) ; button . repaint ( ) ; }
tr	IDF	public boolean isNonEmpty ( ) { return ( elements . size ( ) > 0 || params . size ( ) > 0 ) ; }
tr	KEY	public ImageResult createImageResult ( ) { return new ImageResult ( ) ; }
tr	IDF	@ Override public void init ( ) { int num = this . getNumSquare ( ) ; Point p = new Point ( 2 , 0 ) ; sq [ 0 ] . setSqCoordinate ( p ) ; sq [ 0 ] . setColor ( this . getColor ( ) ) ; for ( int i = 0 ; i < num - 1 ; i ++ ) { p = new Point ( i , - 1 ) ; sq [ i + 1 ] . setSqCoordinate ( p ) ; sq [ i + 1 ] . setColor ( this . getColor ( ) ) ; } }
tr	IDF	private boolean isBlocking ( float _x , float _y , float xa , float ya ) { int x = ( int ) ( _x / 16 ) ; int y = ( int ) ( _y / 16 ) ; if ( x == ( int ) ( this . x / 16 ) && y == ( int ) ( this . y / 16 ) ) return false ; boolean blocking = world . level . isBlocking ( x , y , xa , ya ) ; byte block = world . level . getBlock ( x , y ) ; if ( ( ( Level . TILE_BEHAVIORS [ block & ff ] ) & Level . BIT_PICKUPABLE ) > 0 ) { if ( world . recorder != null ) world . recorder . recordCoin ( ) ; Mario . getCoin ( ) ; world . sound . play ( Art . samples [ Art . SAMPLE_GET_COIN ] , new FixedSoundSource ( x * 16 + 8 , y * 16 + 8 ) , 1 , 1 , 1 ) ; world . level . setBlock ( x , y , ( byte ) 0 ) ; for ( int xx = 0 ; xx < 2 ; xx ++ ) for ( int yy = 0 ; yy < 2 ; yy ++ ) world . addSprite ( new Sparkle ( x * 16 + xx * 8 + ( int ) ( Math . random ( ) * 8 ) , y * 16 + yy * 8 + ( int ) ( Math . random ( ) * 8 ) , 0 , 0 , 0 , 2 , 5 ) ) ; } if ( blocking && ya < 0 ) { world . bump ( x , y , large ) ; } return blocking ; }
tr	IDF	@ SuppressWarnings ( "unchecked" ) private void initComponents ( ) { jPanel1 = new javax . swing . JPanel ( ) ; jScrollPane1 = new javax . swing . JScrollPane ( ) ; jTable1 = new javax . swing . JTable ( ) ; jScrollPane2 = new javax . swing . JScrollPane ( ) ; jTextArea1 = new javax . swing . JTextArea ( ) ; jButtonHapus = new JButtonTransparant ( ) ; jPanel2 = new javax . swing . JPanel ( ) ; jLabelPesanDari = new javax . swing . JLabel ( ) ; jLabelKontak = new javax . swing . JLabel ( ) ; setDefaultCloseOperation ( javax . swing . WindowConstants . DISPOSE_ON_CLOSE ) ; setTitle ( "Pesan Terkirim" ) ; jPanel1 . setBackground ( new java . awt . Color ( 0 , 102 , 51 ) ) ; jTable1 . setModel ( new javax . swing . table . DefaultTableModel ( new Object [ ] [ ] { { null , null , null , null } , { null , null , null , null } , { null , null , null , null } , { null , null , null , null } } , new String [ ] { "Title 1" , "Title 2" , "Title 3" , "Title 4" } ) ) ; jScrollPane1 . setViewportView ( jTable1 ) ; jTextArea1 . setColumns ( 20 ) ; jTextArea1 . setRows ( 5 ) ; jScrollPane2 . setViewportView ( jTextArea1 ) ; jButtonHapus . setText ( "Hapus Pesan" ) ; jButtonHapus . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButtonHapusActionPerformed ( evt ) ; } } ) ; jPanel2 . setBackground ( new java . awt . Color ( 0 , 0 , 0 ) ) ; jPanel2 . setBorder ( new javax . swing . border . LineBorder ( new java . awt . Color ( 153 , 153 , 255 ) , 1 , true ) ) ; jLabelPesanDari . setForeground ( new java . awt . Color ( 255 , 255 , 255 ) ) ; jLabelPesanDari . setText ( "Pesan Ke :" ) ; jLabelKontak . setForeground ( new java . awt . Color ( 255 , 255 , 255 ) ) ; jLabelKontak . setText ( null ) ; javax . swing . GroupLayout jPanel2Layout = new javax . swing . GroupLayout ( jPanel2 ) ; jPanel2 . setLayout ( jPanel2Layout ) ; jPanel2Layout . setHorizontalGroup ( jPanel2Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( jPanel2Layout . createSequentialGroup ( ) . addContainerGap ( ) . addComponent ( jLabelPesanDari ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addComponent ( jLabelKontak ) . addContainerGap ( 56 , short . MAX_VALUE ) ) ) ; jPanel2Layout . setVerticalGroup ( jPanel2Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( javax . swing . GroupLayout . Alignment . TRAILING , jPanel2Layout . createSequentialGroup ( ) . addContainerGap ( javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addGroup ( jPanel2Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE ) . addComponent ( jLabelPesanDari ) . addComponent ( jLabelKontak ) ) . addContainerGap ( ) ) ) ; javax . swing . GroupLayout jPanel1Layout = new javax . swing . GroupLayout ( jPanel1 ) ; jPanel1 . setLayout ( jPanel1Layout ) ; jPanel1Layout . setHorizontalGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( jPanel1Layout . createSequentialGroup ( ) . addContainerGap ( ) . addGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( jPanel2 , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) . addComponent ( jButtonHapus ) ) . addContainerGap ( 337 , short . MAX_VALUE ) ) . addGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( jPanel1Layout . createSequentialGroup ( ) . addContainerGap ( ) . addGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( jScrollPane1 , javax . swing . GroupLayout . Alignment . TRAILING ) . addComponent ( jScrollPane2 , javax . swing . GroupLayout . Alignment . TRAILING ) ) . addContainerGap ( ) ) ) ) ; jPanel1Layout . setVerticalGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( javax . swing . GroupLayout . Alignment . TRAILING , jPanel1Layout . createSequentialGroup ( ) . addContainerGap ( 221 , short . MAX_VALUE ) . addComponent ( jButtonHapus ) . addGap ( 18 , 18 , 18 ) . addComponent ( jPanel2 , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) . addGap ( 198 , 198 , 198 ) ) . addGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( jPanel1Layout . createSequentialGroup ( ) . addGap ( 26 , 26 , 26 ) . addComponent ( jScrollPane1 , javax . swing . GroupLayout . PREFERRED_SIZE , 189 , javax . swing . GroupLayout . PREFERRED_SIZE ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED , 91 , short . MAX_VALUE ) . addComponent ( jScrollPane2 , javax . swing . GroupLayout . PREFERRED_SIZE , 166 , javax . swing . GroupLayout . PREFERRED_SIZE ) . addGap ( 26 , 26 , 26 ) ) ) ) ; javax . swing . GroupLayout layout = new javax . swing . GroupLayout ( getContentPane ( ) ) ; getContentPane ( ) . setLayout ( layout ) ; layout . setHorizontalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( javax . swing . GroupLayout . Alignment . TRAILING , layout . createSequentialGroup ( ) . addContainerGap ( ) . addComponent ( jPanel1 , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addContainerGap ( ) ) ) ; layout . setVerticalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( jPanel1 , javax . swing . GroupLayout . Alignment . TRAILING , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) ) ; pack ( ) ; }
tr	IDF	public Bag getDiscsWithGlide ( int glide ) { LOGGER . log ( Level . INFO , "Getting discs with glide " + glide ) ; Bag discBag = new Bag ( ) ; for ( int i = 0 ; i < discs . size ( ) ; i ++ ) { if ( discs . get ( i ) . getGlide ( ) == glide ) { discBag . addDisc ( discs . get ( i ) ) ; } } LOGGER . log ( Level . INFO , "Found " + discBag . size ( ) + " discs with glide " + glide ) ; return discBag ; }
tr	IDF	public String save ( ) { try { lecturerService . saveLecturer ( lecturer ) ; } catch ( ConstraintViolationException e ) { addActionError ( getText ( "msg.error.lecturerConstraint" ) ) ; return INPUT ; } return SUCCESS ; }
tr	IDF	public Atribuicao ( Id id , Expressao expressao ) { this . id = id ; this . expressao = expressao ; }
tr	IDF	private int checkAVL ( AVLNode c ) { if ( c == null ) { return - 1 ; } int left = checkAVL ( ( AVLNode ) c . left ) ; int right = checkAVL ( ( AVLNode ) c . right ) ; int left_height = ( c . left == null ) ? - 1 : ( ( AVLNode ) c . left ) . height ; int right_height = ( c . right == null ) ? - 1 : ( ( AVLNode ) c . right ) . height ; if ( left != left_height || right != right_height ) { throw new IllegalStateException ( "Height not correct: " + left + " " + left_height + " " + right + " " + right_height ) ; } else if ( Math . abs ( left - right ) > 1 ) { throw new IllegalStateException ( "Not balanced: " + left + " " + right ) ; } return 1 + Math . max ( left , right ) ; }
tr	KEY	public void run ( ) { new PlayerNames ( ) . setVisible ( true ) ; }
tr	KEY	public static void setNextUserID ( int staticUserID ) { if ( staticUserID < 1 ) { throw new IllegalArgumentException ( "User ID cannot be less than 1!" ) ; } nextUserID = staticUserID ; }
tr	KEY	public boolean IsStopRequested ( ) { boolean flag = false ; synchronized ( this ) { flag = stopFlag ; } return flag ; }
tr	KEY	public boolean returnSubmission ( ) { return choiceSumbission ; }
tr	IDF	public GArrayStack ( ) { stackArray = ( E [ ] ) new Object [ INITIAL_SIZE ] ; top = 0 ; }
tr	IDF	public void act ( ) { if ( ! dead ) { setPosition ( ) ; imageChange ( ) ; damageDetection ( ) ; } else { deadAnimation ( ) ; getWorld ( ) . addObject ( shadow , x , y ) ; shadow . getPosition ( x , y , moveDirection , - 10 ) ; shadow . getSize ( groundHeight + 30 , 80 , 8 ) ; } }
tr	KEY	public int getNumberOfPlays ( ) ;
tr	KEY	public void setUserRating ( double value ) { this . userRating = value ; }
tr	IDF	public void setEmail ( String email ) { this . email = email ; }
tr	KEY	public VideoRequest createVideoRequest ( ) { return new VideoRequest ( ) ; }
tr	KEY	public int get_y ( ) { return _y ; }
tr	IDF	@ Override public void removeObserver ( Observer oberver ) { }
tr	IDF	public boolean unlock ( Interactable target ) { if ( target instanceof PrisonCellDoor ) { System . out . println ( "You unlock the cell door." ) ; ( ( PrisonCellDoor ) target ) . locked = false ; ( ( PrisonCellDoor ) target ) . getOtherSide ( ) . locked = false ; } else { System . out . println ( "Nothing happened." ) ; } return true ; }
tr	KEY	public int getKey ( ) { return key ; }
tr	KEY	public int getTilePairs ( ) { return tilePairs ; }
tr	KEY	protected void execute ( ) { }
tr	IDF	private static String getValue ( JSONTokener x ) throws JSONException { char c ; char q ; StringBuffer sb ; do { c = x . next ( ) ; } while ( c ==   || c == 	 ) ; switch ( c ) { case 0 : return null ; case " : case ' : q = c ; sb = new StringBuffer ( ) ; for ( ; ; ) { c = x . next ( ) ; if ( c == q ) { break ; } if ( c == 0 || c == '' || c == '' ) { throw x . syntaxError ( "Missing close quote '" + q + "'." ) ; } sb . append ( c ) ; } return sb . toString ( ) ; case   : x . back ( ) ; return "" ; default : x . back ( ) ; return x . nextTo (   ) ; } }
tr	KEY	public void initialize ( ) { }
tr	KEY	public String getString ( ) { return this . aString ; }
tr	IDF	private SourcePanel createSourcePanel ( ) { SourcePanel result = new SourcePanel ( ) { protected boolean setSourceFile ( ) { JFileChooser chooser = new JFileChooser ( ) ; int returnVal = chooser . showOpenDialog ( this ) ; if ( returnVal == JFileChooser . APPROVE_OPTION ) { File f = chooser . getSelectedFile ( ) ; try { List < Pattern > list = PatternLoader . load ( new FileReader ( f ) ) ; patternPanel . setPatterns ( list ) ; resetWorld ( ) ; return true ; } catch ( IOException ioe ) { } } return false ; } protected boolean setSourceNone ( ) { world = null ; patternPanel . setPatterns ( null ) ; resetWorld ( ) ; return true ; } protected boolean setSourceLibrary ( ) { String u = "http://www.cl.cam.ac.uk/teaching/current/ProgJava/nextlife.txt" ; return setSourceWeb ( u ) ; } protected boolean setSourceThreeStar ( ) { String u = "http://www.cl.cam.ac.uk/teaching/current/ProgJava/competition.txt" ; return setSourceWeb ( u ) ; } private boolean setSourceWeb ( String url ) { try { List < Pattern > list = PatternLoader . loadFromURL ( url ) ; patternPanel . setPatterns ( list ) ; resetWorld ( ) ; return true ; } catch ( IOException ioe ) { } return false ; } } ; addBorder ( result , Strings . PANEL_SOURCE ) ; return result ; }
tr	IDF	public void concat ( String location1 , String location2 , String outname ) { _isWorking = true ; _location1 = location1 ; _location2 = location2 ; _outname = outname ; this . execute ( ) ; }
tr	KEY	void editing ( ) ;
tr	KEY	@ Override public void run ( ) { new TelaLogin ( null , true ) . setVisible ( true ) ; }
tr	KEY	@ Override public int getRuleIndex ( ) { return RULE_expressao ; }
tr	IDF	@ Override public void setDelta_trans ( Vector3d _delta_trans ) { this . _delta_trans = _delta_trans ; }
tr	KEY	public boolean getDirection ( ) { return this . direction ; }
tr	KEY	@ Override public void update ( ) { }
tr	IDF	@ Override public V get ( K key ) { int offset = offset ( key ) ; while ( keys [ offset ] != null ) { if ( keys [ offset ] . equals ( key ) ) { return ( V ) values [ offset ] ; } offset = nextHop ( offset ) ; if ( offset == offset ( key ) ) { return null ; } } return null ; }
tr	IDF	List < ? extends Base > findAll ( ) ;
tr	KEY	public int getMatchSeconds ( ) { return matchSeconds ; }
tr	IDF	private static void assertToken ( String expected , String actual ) throws SqlParseException { if ( ! expected . equals ( actual ) ) { throw new SqlParseException ( "Expected '" + expected + "' but found '" + actual + "'" ) ; } }
tr	IDF	public InputStream play ( InputStream is , SoundFilter filter ) { if ( is != null ) { if ( filter != null ) { is = new FilteredSoundStream ( is , filter ) ; } runTask ( new SoundPlayer ( is ) ) ; } return is ; }
tr	KEY	public abstract ArrayList load ( ) throws SQLException ;
tr	KEY	@ Override public boolean equals ( Object obj ) { if ( this == obj ) return true ; if ( obj == null ) return false ; if ( getClass ( ) != obj . getClass ( ) ) return false ; Permissie other = ( Permissie ) obj ; if ( id != other . id ) return false ; return true ; }
tr	IDF	private void makeYStub ( ) { OutputStub yStub = new OutputStub ( ) ; yStub . setName ( "y" ) ; yStub . setXY ( 600 , 10 ) ; addOutputStub ( yStub ) ; }
tr	IDF	@ Override public void enterOpRel ( @ NotNull EnquantoParser . OpRelContext ctx ) { }
tr	IDF	public void ancestorResized ( java . awt . event . HierarchyEvent evt ) { }
tr	KEY	abstract public void accept ( ExceptionVisitor v ) ;
tr	IDF	void enterBooleano ( @ NotNull EnquantoParser . BooleanoContext ctx ) ;
tr	IDF	public Object getElementAt ( int i ) { return publishers [ i ] ; }
tr	IDF	public void reflection ( int index , int [ ] rgb , int level ) { level ++ ; if ( level < 2 ) { if ( ( allSphere [ index ] . getMat ( ) . mirrorColor [ 0 ] != 0 ) && ( allSphere [ index ] . getMat ( ) . mirrorColor [ 1 ] != 0 ) && ( allSphere [ index ] . getMat ( ) . mirrorColor [ 2 ] != 0 ) ) { double dist = 2.0 * vec . . ( normal , w ) ; ReflectedRay [ 0 ] = w [ 0 ] - ( dist * normal [ 0 ] ) ; ReflectedRay [ 1 ] = w [ 1 ] - ( dist * normal [ 1 ] ) ; ReflectedRay [ 2 ] = w [ 2 ] - ( dist * normal [ 2 ] ) ; double [ ] vv = { 0.0 , 0.0 , 0.0 } ; double [ ] ww = { 0.0 , 0.0 , 0.0 } ; vv [ 0 ] = nn [ 0 ] + ( epsilon * w [ 0 ] ) ; vv [ 1 ] = nn [ 1 ] + ( epsilon * w [ 1 ] ) ; vv [ 2 ] = nn [ 2 ] + ( epsilon * w [ 2 ] ) ; ww [ 0 ] = ReflectedRay [ 0 ] ; ww [ 1 ] = ReflectedRay [ 1 ] ; ww [ 2 ] = ReflectedRay [ 2 ] ; int [ ] refColor = { 0 , 0 , 0 } ; if ( TraceMyRay ( vv , ww , refColor , level ) ) { for ( int i = 0 ; i < 3 ; i ++ ) { rgb [ i ] = ( int ) ( rgb [ i ] * ( 1.0 - allSphere [ index ] . getMat ( ) . mirrorColor [ i ] ) + refColor [ i ] * allSphere [ index ] . getMat ( ) . mirrorColor [ i ] ) ; } } } } }
tr	IDF	public static int getType ( String name ) { if ( name . equals ( "java.lang.String" ) ) return STRING ; if ( name . equals ( "java.math.BigDecimal" ) ) return BIGDECIMAL ; if ( name . equals ( "int" ) || name . equals ( "java.lang.Integer" ) ) return INTEGER ; if ( name . equals ( "double" ) || name . equals ( "java.lang.Double" ) ) return double ; if ( name . equals ( "long" ) || name . equals ( "java.lang.Long" ) ) return long ; if ( name . equals ( "float" ) || name . equals ( "java.lang.Float" ) ) return float ; if ( name . equals ( "java.util.Date" ) ) return DATE ; if ( name . equals ( "java.sql.Timestamp" ) ) return TIMESTAMP_SQL ; if ( name . equals ( "java.sql.Date" ) ) return DATE_SQL ; if ( name . equals ( "java.sql.Time" ) ) return TIME_SQL ; if ( name . equals ( "boolean" ) || name . equals ( "java.lang.Boolean" ) ) return boolean ; return - 1 ; }
tr	KEY	@ Override public ClientID getClient ( ) { return null ; }
tr	KEY	protected abstract void createOptionsPanel ( ) ;
tr	KEY	public double getValorBruto ( ) { return valorBruto ; }
tr	KEY	protected void addElement ( INDIElement element ) throws IllegalArgumentException { if ( ( this instanceof INDITextProperty ) && ( ! ( element instanceof INDITextElement ) ) ) { throw new IllegalArgumentException ( "Text Element cannot be added to Text Property" ) ; } if ( ( this instanceof INDISwitchProperty ) && ( ! ( element instanceof INDISwitchElement ) ) ) { throw new IllegalArgumentException ( "Switch Element cannot be added to Switch Property" ) ; } if ( ( this instanceof INDINumberProperty ) && ( ! ( element instanceof INDINumberElement ) ) ) { throw new IllegalArgumentException ( "Number Element cannot be added to Number Property" ) ; } if ( ( this instanceof INDILightProperty ) && ( ! ( element instanceof INDILightElement ) ) ) { throw new IllegalArgumentException ( "Light Element cannot be added to Light Property" ) ; } if ( ( this instanceof INDIBLOBProperty ) && ( ! ( element instanceof INDIBLOBElement ) ) ) { throw new IllegalArgumentException ( "BLOB Element cannot be added to BLOB Property" ) ; } if ( ! isInit ) { if ( ! elements . containsValue ( element ) ) { elements . put ( element . getName ( ) , element ) ; } } }
tr	KEY	public int getPlayerID ( ) { return playerID ; }
tr	KEY	public boolean isCellEditable ( int rowIndex , int columnIndex ) { return canEdit [ columnIndex ] ; }
tr	KEY	public JSONWriter endObject ( ) throws JSONException { return this . end ( k , } ) ; }
tr	IDF	public void write ( ) { for ( String s : storage ) { System . out . println ( s ) ; } }
tr	IDF	public Entity entityBuilder ( ) { Entity entity = new Entity ( ) ; entity . setName ( "This Company" ) ; entity . setOperatingEnvironment ( operatingEnvironmentBuilder ( ) ) ; entity . setBusinessProfile ( businessProfileBuilder ( ) ) ; return entity ; }
tr	IDF	public static String getPreAuthCompletionsUrl ( String platform , String version , String paymentId ) { return MessageFormat . format ( PreAuthCompletionsUrl , platform , version , paymentId ) ; }
tr	IDF	public static Element getXMLRootElementByDom4j ( String fileName ) throws DocumentException { File file = new File ( fileName ) ; Document document = new SAXReader ( ) . read ( file ) ; return document . getRootElement ( ) ; }
tr	KEY	void iderived ( ) ;
tr	IDF	@ Override public void update ( Observable arg0 , Object arg1 ) { int digit = model . getDigitAt ( row , col ) ; SudokuPart constraint = model . getCurrentConstraint ( ) ; if ( constraint != null && constraint . getRow ( ) == row && constraint . getCol ( ) == col ) { setBackground ( Color . GREEN ) ; } else { SudokuPart popped = model . getPopped ( ) ; if ( popped != null && popped . getRow ( ) == row && popped . getCol ( ) == col ) { setBackground ( Color . RED ) ; } else { setBackground ( Color . WHITE ) ; } } setText ( digit > 0 ? Integer . toString ( digit ) : "" ) ; }
tr	IDF	public void sendMessage ( Message m ) throws JMSException { System . out . println ( "---SENDING CHATROOM MESSAGE TO " + members . size ( ) + " CLIENTS---" ) ; for ( Map . Entry < ClientID , Destination > entry : members . entrySet ( ) ) { try { producer . send ( entry . getValue ( ) , m ) ; } catch ( InvalidDestinationException exception ) { members . remove ( entry . getKey ( ) ) ; } } }
tr	KEY	public void sendGameTerminate ( ) ;
tr	KEY	protected boolean examine ( ) { System . out . println ( "A thumb-sized piece of fluff with peculiar sound-absorbtion qualities." ) ; return true ; }
tr	IDF	public XbpadBridge ( XbpadPresetContainer con ) { container = con ; if ( container == null ) { System . out . println ( "Error from bridge" ) ; } }
tr	KEY	public void setResultMapper ( ResultSetMapper resultSetMapper ) { if ( resultSetMapper == null ) throw new NullPointerException ( ) ; this . resultSetMapper = resultSetMapper ; }
tr	IDF	public static void main ( String [ ] args ) { CountDownLatch latch = new CountDownLatch ( SIZE ) ; Random r = new Random ( ) ; ExecutorService exec = Executors . newCachedThreadPool ( ) ; Controller controller = new Controller ( latch ) ; exec . execute ( controller ) ; for ( int i = 0 ; i < SIZE ; i ++ ) { exec . execute ( new Module ( latch , "\u6A21\u5757" + ( i + 1 ) , r . nextInt ( 2000 ) ) ) ; } exec . shutdown ( ) ; }
tr	IDF	public GetDataBySubject ( Document doc ) throws Exception { this ( ) ; this . process ( doc ) ; }
tr	IDF	@ Override public Thread newThread ( Runnable r ) { Thread thread = super . newThread ( r ) ; thread . setDaemon ( true ) ; thread . setPriority ( Thread . MIN_PRIORITY ) ; return thread ; }
tr	IDF	public void setLoser ( Player loser ) { this . loser = loser ; }
tr	IDF	public double getSibScore ( int p , int a1 , int a2 , int r1 , int r2 ) { int id = sib2id [ ( p2id [ p ] * N + a1 ) * N + a2 ] ; Utils . assert ( id >= 0 ) ; int pos = ( id * L + r1 ) * L + r2 ; if ( consSib [ pos ] == null ) getSibFeatureVector ( p , a1 , a2 , r1 , r2 ) ; return consSib [ pos ] . score ; }
tr	KEY	@ Override public boolean equals ( Object obj ) { if ( this == obj ) return true ; if ( obj == null ) return false ; if ( getClass ( ) != obj . getClass ( ) ) return false ; DeclaracaoParametro other = ( DeclaracaoParametro ) obj ; if ( id == null ) { if ( other . id != null ) return false ; } else if ( ! id . equals ( other . id ) ) return false ; return true ; }
tr	KEY	public void setCompletions ( double completions ) { this . completions = completions ; }
tr	KEY	public abstract void visit ( Block block ) ;
tr	KEY	public void set ( Object o ) { throw new UnsupportedOperationException ( ) ; }
tr	KEY	public int getId_Sucursal ( ) { return Id_Sucursal ; }
tr	KEY	public int getRow ( ) { return row ; }
tr	IDF	public String getFormalExpression ( ) { String result = "" ; result += "has_name(" + Func . prepareFormalExpression ( this . id ) + " " + Func . prepareFormalExpression ( this . name ) + ").\n" ; result += getFormalConsequence ( ) ; result += getFormalHierarchy ( ) ; return result ; }
tr	KEY	public void setMirrorColor ( double [ ] mirrorColor ) { this . mirrorColor = mirrorColor ; }
tr	IDF	public org . apache . axiom . om . OMElement getOMElement ( final javax . xml . namespace . QName parentQName , final org . apache . axiom . om . OMFactory factory ) throws org . apache . axis2 . databinding . ADBException { org . apache . axiom . om . OMDataSource dataSource = new org . apache . axis2 . databinding . ADBDataSource ( this , MY_QNAME ) ; return factory . createOMElement ( dataSource , MY_QNAME ) ; }
tr	IDF	void setFlapPatterns ( Collection < AngleUnitFlapPattern > patterns ) ;
tr	IDF	public void dieSprite ( Sprite sprite ) { die ( ) ; if ( world . recorder != null ) { world . recorder . dieRecord ( sprite ) ; } }
tr	KEY	public double getDE ( ) { return ( double ) stepDE + ( double ) uStepDE / 1024. ; }
tr	KEY	public WakeCommand ( ) { }
tr	IDF	public void setOutput ( String output ) { this . output = output ; }
tr	IDF	private static int randInt ( int min , int max ) { Random rand = new Random ( ) ; return rand . nextInt ( ( max - min ) + 1 ) + min ; }
tr	KEY	public CarSearch ( ) { super ( Car . class , SortCriteria . class ) ; }
tr	IDF	public < T extends EventListener > void removeListener ( class < T > clazz , T listener ) { listenerList . remove ( clazz , listener ) ; }
tr	IDF	static Object get ( Object subtree , int index ) { if ( ! ( subtree instanceof Node ) ) return ( ( Object [ ] ) subtree ) [ index ] ; else { Node node = ( Node ) subtree ; int sizl = treeSize ( node . left ) ; if ( index < sizl ) return get ( node . left , index ) ; else return get ( node . right , index - sizl ) ; } }
tr	KEY	public final boolean contains ( double x , double y ) { if ( x * 0.0 + y * 0.0 == 0.0 ) { if ( numTypes < 2 ) { return false ; } int mask = ( windingRule == WIND_NON_ZERO ? - 1 : 1 ) ; return ( ( pointCrossings ( x , y ) & mask ) != 0 ) ; } else { return false ; } }
tr	IDF	public void setLastTransaction ( String lastTransaction ) { this . lastTransaction = lastTransaction ; }
tr	IDF	@ Test public void testGet ( ) throws Exception { Sprite sprite = SpriteStore . getInstance ( ) . get ( "sprites/test.png" ) ; Sprite sprite2 = SpriteStore . getInstance ( ) . get ( "sprites/test.png" ) ; assert . assertSame ( "SpriteStore::get Store is not Storing entities" , sprite , sprite2 ) ; Sprite notFound = SpriteStore . getInstance ( ) . get ( "sprites/notFound.png" ) ; assert . assertNotSame ( "SpriteStore::get Sprite with test.png not found" , notFound , sprite ) ; Sprite notExistent = SpriteStore . getInstance ( ) . get ( "sprites/djshgjhsdfjhavs.jpg" ) ; assert . assertSame ( "SpriteStore::get Fallback not working" , notFound , notExistent ) ; }
tr	KEY	public boolean isNon_deterministic ( ) { return non_deterministic ; }
tr	KEY	protected abstract WorldImpl nextGeneration ( ) ;
tr	IDF	public static int countNeighbours ( boolean [ ] [ ] world , int col , int row ) { int c = 0 ; if ( getCell ( world , col - 1 , row - 1 ) == true ) { c += 1 ; } if ( getCell ( world , col , row - 1 ) == true ) { c += 1 ; } if ( getCell ( world , col + 1 , row - 1 ) == true ) { c += 1 ; } if ( getCell ( world , col - 1 , row ) == true ) { c += 1 ; } if ( getCell ( world , col + 1 , row ) == true ) { c += 1 ; } if ( getCell ( world , col - 1 , row + 1 ) == true ) { c += 1 ; } if ( getCell ( world , col , row + 1 ) == true ) { c += 1 ; } if ( getCell ( world , col + 1 , row + 1 ) == true ) { c += 1 ; } return c ; }
tr	IDF	public Object visitIntTree ( AST t ) { decorate ( t , intTree ) ; return intTree ; }
tr	KEY	boolean isdrawn ( ) { return this . getHeight ( ) > 10 && this . getWidth ( ) > 10 ; }
tr	IDF	public void setEngine1 ( Engine engine1 ) { this . engine1 = engine1 ; }
tr	IDF	public ArrayList < CardImpl > getCards ( ) ;
tr	IDF	protected void dbSetVarCharParam ( PreparedStatement astmt , int anum , String astr ) throws Exception { if ( astr . equals ( "" ) ) { astmt . setNull ( anum , java . sql . Types . VARCHAR ) ; } else { astmt . setString ( anum , astr ) ; } }
tr	KEY	private int getRowCnt ( ) { return m . length ; }
tr	IDF	MineralInputImpl ( long [ ] minerals ) { this . minerals = Arrays . copyOf ( minerals , minerals . length ) ; }
tr	IDF	private void NioServerCreation ( ) { factory = new NioServerSocketChannelFactory ( Executors . newCachedThreadPool ( ) , Executors . newCachedThreadPool ( ) ) ; bootstrap = new ServerBootstrap ( factory ) ; bootstrap . setPipelineFactory ( pipelineFactory ) ; bootstrapSsl = new ServerBootstrap ( factory ) ; bootstrapSsl . setPipelineFactory ( sslPipelineFactory ) ; ServerBootstrap selectedBootstrap ; for ( Listen listen : configService . getConfig ( ) . getListens ( ) . getListen ( ) ) { selectedBootstrap = bootstrap ; if ( listen . isSsl ( ) ) { selectedBootstrap = bootstrapSsl ; } if ( StringUtils . isNotEmpty ( listen . getInterface ( ) ) && ! "*" . equals ( listen . getInterface ( ) ) ) { selectedBootstrap . bind ( new InetSocketAddress ( listen . getInterface ( ) , listen . getPort ( ) ) ) ; logger . info ( ">> Gircos listening on port " + listen . getPort ( ) + " [interface=" + listen . getInterface ( ) + "] [ssl=" + listen . isSsl ( ) + "]" ) ; } else { selectedBootstrap . bind ( new InetSocketAddress ( listen . getPort ( ) ) ) ; logger . info ( ">> Gircos listening on port " + listen . getPort ( ) + " [interface=all] [ssl=" + listen . isSsl ( ) + "]" ) ; } } }
tr	IDF	@ Override public void identity ( ) { for ( int i = 0 ; i < 4 ; i ++ ) for ( int j = 0 ; j < 4 ; j ++ ) if ( i == j ) { matrix [ i ] [ j ] = 1 ; this . set ( j , i , 1 ) ; } else this . set ( j , i , 0 ) ; }
tr	IDF	public AdditionalInformation ( boolean plan504 , boolean planIep , boolean registeredVoter , boolean becomeRegisteredVoter , String howLearnedAboutAlliance , String referredFromAgency , CommFormatCode alternateFormatsRequested , boolean accessAssistiveTechnology , boolean accessHealthCare , boolean accessTransportation ) { this . setPlan504 ( plan504 ) ; this . setPlanIep ( planIep ) ; this . setRegisteredVoter ( registeredVoter ) ; this . setBecomeRegisteredVoter ( becomeRegisteredVoter ) ; this . setHowLearnedAboutAlliance ( howLearnedAboutAlliance ) ; this . setReferredFromAgency ( referredFromAgency ) ; this . setAlternateFormatsRequested ( alternateFormatsRequested ) ; this . setAccessAssistiveTechnology ( accessAssistiveTechnology ) ; this . setAccessHealthCare ( accessHealthCare ) ; this . setAccessTransportation ( accessTransportation ) ; }
tr	IDF	private static boolean isValid ( Node actual , Node expected ) { if ( actual == null && expected == null ) { return true ; } if ( ( actual == null && expected != null ) || ( actual != null && expected == null ) ) { return false ; } if ( actual . value != expected . value ) { return false ; } boolean valid1 = isValid ( actual . left , expected . left ) ; boolean valid2 = isValid ( actual . right , expected . right ) ; return valid1 && valid2 ; }
tr	KEY	public int getOrderID ( ) { return orderID ; }
tr	KEY	public void setWidth ( int width ) { this . width = width ; }
tr	KEY	public int size ( ) { return treeSize ( tree ) ; }
tr	KEY	public Conversation ( ) { this . doc = new HTMLDocument ( ) ; this . kit = new HTMLEditorKit ( ) ; this . handler = new FileHandler ( ) ; this . crypto = new Crypto ( ) ; }
tr	IDF	@ Override public String createTableSql ( ) { return CreateSQL ; }
tr	KEY	public int getRows ( ) { return rows ; }
tr	IDF	public void destroy ( ) { coreCommands . removeCommand ( PingCommand . COMMAND_NAME ) ; }
tr	KEY	public void setStopFlag ( ) { synchronized ( this ) { stopFlag = true ; } }
tr	KEY	@ SuppressWarnings ( "unchecked" ) @ Override public boolean equals ( Object obj ) { if ( this == obj ) return true ; if ( obj == null ) return false ; if ( getClass ( ) != obj . getClass ( ) ) return false ; final ValorConcreto < T > other = ( ValorConcreto < T > ) obj ; if ( valor == null ) { if ( other . valor != null ) return false ; } else if ( ! valor . equals ( other . valor ) ) return false ; return true ; }
tr	IDF	@ Override public Object execute ( List < Object > params ) { System . out . println ( "Executing create Missing Record" ) ; StationServer stationserver = getStation ( params . get ( 0 ) . toString ( ) ) ; if ( stationserver == null ) { return null ; } return stationserver . createMRecord ( params . get ( 0 ) . toString ( ) , params . get ( 1 ) . toString ( ) , params . get ( 2 ) . toString ( ) , params . get ( 3 ) . toString ( ) , params . get ( 4 ) . toString ( ) , params . get ( 5 ) . toString ( ) , params . get ( 6 ) . toString ( ) ) + "" ; }
tr	IDF	public void setCreated ( String created ) { this . created = created ; }
tr	KEY	public void attack ( boolean state ) ;
tr	IDF	public void setMerchantId ( String merchantId ) { this . merchantId = merchantId ; }
tr	IDF	public Print ( String message ) { this . message = message ; }
tr	KEY	public void cancel ( ) ;
tr	IDF	@ Override public List < User > getUserList ( ) { List < User > uList = new ArrayList < > ( ) ; try { IUserDao _dao = getIUserDao ( ) ; User _result [ ] = _dao . findAll ( ) ; for ( int i = 0 ; i < _result . length ; i ++ ) { uList . add ( _result [ i ] ) ; } return uList ; } catch ( UserDaoException e ) { logger . error ( "Error occurred during get all users: " , e ) ; } return null ; }
tr	KEY	public static Date millisToDate ( double millis ) { return new Date ( ( long ) millis ) ; }
tr	KEY	float getY ( ) ;
tr	IDF	public void setEnd_date ( String end_date ) { this . end_date = end_date ; }
tr	IDF	public void makeTable ( String tableName ) { String sql ; try { if ( overwrite ) { if ( tableExists ( tableName ) ) { stmt = conn . createStatement ( ) ; stmt . executeUpdate ( "DROP TABLE " + tableName ) ; stmt . close ( ) ; conn . commit ( ) ; } stmt = conn . createStatement ( ) ; sql = "CREATE TABLE " + tableName + "(" + "SOURCE VARCHAR(25)  " + "RELDEPTH NUMBER  " + "ID NUMBER(19) NOT NULL  " + "TIME_ TIMESTAMP  " + "DURATION NUMBER  " + "DEPTH NUMBER  " + "LON NUMBER  " + "LAT NUMBER  " + "DISTANCE NUMBER  " + "STATUS VARCHAR(3)  " + "DESTINATION VARCHAR(25)  " + "NODATA NUMBER(1)  " + "RELEASE VARCHAR(25))" ; stmt . execute ( sql ) ; sql = "SELECT AddGeometryColumn ('public' " + tableName + " 'geom' 4326 'POINT' 3)" ; stmt . execute ( sql ) ; stmt . close ( ) ; conn . commit ( ) ; System . out . println ( "Trajectory table setup complete." ) ; } sql = "INSERT INTO " + tableName + "(" + "SOURCE  " + "RELDEPTH  " + "ID  " + "TIME_  " + "DURATION  " + "DEPTH  " + "LON  " + "LAT  " + "DISTANCE  " + "STATUS  " + "DESTINATION  " + "NODATA  " + "RELEASE  geom) " + "VALUES(? ? ? ? ? ? ? ? ? ? ? ? ? ST_SetSRID(ST_MakePoint(?  ?  ?)  4326));" ; ps1 = conn . prepareStatement ( sql ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } }
tr	IDF	public void itemStateChanged ( java . awt . event . ItemEvent evt ) { discSelectorItemStateChanged ( evt ) ; }
tr	IDF	public UpdateInventory ( Main main ) { initComponents ( ) ; this . main = main ; this . setVisible ( false ) ; }
tr	KEY	public boolean getRDY ( ) { return mRDY ; }
tr	IDF	public StereoOffCommand ( Stereo stereo ) { this . stereo = stereo ; }
tr	IDF	protected long enemyCanWinInTwoRounds ( char playerColour , char enemyColour , Game game ) { return new EnemyCanWinInTwoRounds ( ) . evaluate ( playerColour , enemyColour , game , null ) ; }
tr	KEY	int getSize ( ) { return size ; }
tr	KEY	public boolean equals ( Object _other ) { if ( _other == null ) { return false ; } if ( _other == this ) { return true ; } if ( ! ( _other instanceof MsgStatusPk ) ) { return false ; } final MsgStatusPk _cast = ( MsgStatusPk ) _other ; if ( msgStatus == null ? _cast . msgStatus != msgStatus : ! msgStatus . equals ( _cast . msgStatus ) ) { return false ; } return true ; }
tr	KEY	public String getX ( ) { return "x" ; }
tr	KEY	@ Override public double realValue ( ) { return value ; }
tr	KEY	public int getZipcode ( ) { return zipcode ; }
tr	IDF	public void reset ( Reader in ) { lexer . yyreset ( in ) ; reset ( ) ; }
tr	IDF	public int getInstrumentProgram ( int i ) { String info = getInstrumentInfo ( i ) ; return info == null ? - 1 : value ( extract ( info , " program " , ")" ) ) ; }
tr	IDF	public void setLiCntrlObject ( ArrayList < CObject > liCntrlObject ) ;
tr	IDF	private void findBadNodes ( TreeNode root , TreeNode [ ] badNodes ) { if ( root == null ) return ; findBadNodes ( root . left , badNodes ) ; if ( badNodes [ 0 ] != null ) { if ( badNodes [ 0 ] . val > root . val ) { if ( badNodes [ 1 ] == null ) { badNodes [ 1 ] = badNodes [ 0 ] ; } badNodes [ 2 ] = root ; } } badNodes [ 0 ] = root ; findBadNodes ( root . right , badNodes ) ; }
tr	IDF	@ Override public void valueChanged ( TreeSelectionEvent e ) { DefaultMutableTreeNode node = ( DefaultMutableTreeNode ) e . getPath ( ) . getLastPathComponent ( ) ; if ( node . getUserObject ( ) instanceof NodeItem ) { File selectedFile = ( ( NodeItem ) node . getUserObject ( ) ) . file ; if ( selectedFile . isFile ( ) ) { main . openSimFile ( selectedFile . getAbsolutePath ( ) ) ; } } }
tr	IDF	public Poly getD ( ) { if ( flag == 1 ) return ed . getVF ( ) . mult ( y ) ; else return ed . getUG ( ) . mult ( y ) ; }
tr	IDF	public void reset ( ) { clearRegisters ( ) ; setPosition ( 0 ) ; setScanline ( 0 ) ; setPictureScanline ( 0 ) ; setPosP0 ( 0 ) ; setPosP1 ( 0 ) ; setPosM0 ( 0 ) ; setPosM1 ( 0 ) ; setPosBL ( 0 ) ; mP0Visible = false ; mP1Visible = false ; mM0Visible = false ; mM1Visible = false ; mPFVisible = false ; mBLVisible = false ; mP0InPixel = false ; mP1InPixel = false ; mM0InPixel = false ; mM1InPixel = false ; mPFInPixel = false ; mBLInPixel = false ; mP0PixelFilled = false ; mP1PixelFilled = false ; mM0PixelFilled = false ; mM1PixelFilled = false ; mPFPixelFilled = false ; mBLPixelFilled = false ; mP0Graphics = getPlayerGraphics ( 0 ) ; mP1Graphics = getPlayerGraphics ( 1 ) ; mM0Graphics = getMissileGraphics ( 0 ) ; mM1Graphics = getMissileGraphics ( 1 ) ; mPFGraphics = getPlayfieldGraphics ( ) ; mBLGraphics = getBallGraphics ( ) ; mPM0Copies = 1 ; mPM1Copies = 1 ; mPM0CopySpacing = 1 ; mPM1CopySpacing = 1 ; mDGRP0 = 0 ; mDGRP1 = 0 ; mDENABL = 0 ; mVerticalDelayP0 = false ; mVerticalDelayP1 = false ; mVerticalDelayBL = false ; mRDY = false ; }
tr	KEY	public CloneResult ( ) { this ( new ArrayList < > ( ) , new ArrayList < > ( ) ) ; }
tr	KEY	public Matrix getInput ( ) { if ( source != null ) return source . getOutput ( ) ; else if ( dic != null ) return dic . getInput ( ) ; return null ; }
tr	KEY	public void extend ( int byHeight ) ;
tr	IDF	public Pessoa getPessoa ( String nome , String sexo ) throws Exception { switch ( sexo ) { case "M" : sexo = "Masculino" ; return new Homem ( nome , sexo ) ; case "F" : sexo = "Feminino" ; return new Mulher ( nome , sexo ) ; default : throw new Exception ( "Sexo indefinido" ) ; } }
tr	KEY	public synchronized void xsetRTInitialDelay ( int a ) { rtID = a ; }
tr	KEY	public Identificar ( ) { }
tr	KEY	public void refresh ( ) ;
tr	IDF	public void setSecondaryDisability ( SSADisabilityCode secondaryDisability ) { this . secondaryDisability = secondaryDisability ; }
tr	KEY	public boolean isStartIdOccupied ( ) { return isFieldOccupied ( getStartId ( ) ) ; }
tr	IDF	private void jButton1ActionPerformed ( java . awt . event . ActionEvent evt ) { }
tr	KEY	static boolean within ( final float x , final float y , final float err ) { final float d = y - x ; return ( d <= err && d >= - err ) ; }
tr	IDF	public String dump ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( String . format ( "[%02X]: " , id ( ) ) ) ; sb . append ( base . dump ( ) ) ; for ( Node node = base . top ; node != base ; node = node . top ) { sb . append ( node . dump ( ) +   ) ; } sb . append ( '' ) ; return sb . toString ( ) ; }
tr	KEY	public int pop ( ) { if ( ! this . isEmpty ( ) ) { int res = this . top . value ; this . top = this . top . previous ; this . top . next = null ; this . size -- ; return res ; } return - 1 ; }
tr	IDF	private Object fromMap ( Map < Key , Val > map ) { if ( map instanceof FTreeMap && eql ( comp , ( ( FTreeMap ) map ) . comp ) ) return ( ( FTreeMap ) map ) . tree ; else { Object t = null ; for ( Map . Entry < Key , Val > ent : map . entrySet ( ) ) t = with ( t , ent . getKey ( ) , ent . getValue ( ) ) ; return t ; } }
tr	IDF	public boolean b ( int x , int y , int x2 , int y2 ) { if ( x2 >= 0 && y2 >= 0 && x2 < 512 && y2 < 512 ) { if ( ! b [ x2 ] [ y2 ] && Math . abs ( vl . get_height ( x , y ) - vl . get_height ( x2 , y2 ) ) <= 20 ) { b [ x2 ] [ y2 ] = true ; return true ; } } return false ; }
tr	KEY	public SampleLabel ( int fontHeight ) { this ( fontHeight , null ) ; }
tr	IDF	@ Test public void srpViolation ( ) { service . setSender ( "Tonata" ) ; assert . assertEquals ( "Tonata" , service . getSender ( ) ) ; }
tr	KEY	public TBlock_T ( ) { super ( ) ; }
tr	KEY	public double getPriceLevel5 ( ) { return priceLevel5 ; }
tr	IDF	public void setProductId ( String productId ) { this . productId = productId ; }
tr	IDF	public boolean goThrough ( ) { System . out . println ( "You walk through the " + this . name ) ; Game . player . currentLocation = this . destination ; this . destination . printDescription ( ) ; return true ; }
tr	KEY	public ICMS ( ) { }
tr	IDF	private Message sendMessage ( String operationName , int timeout , String ... params ) throws DeadNodeException { Message toMessage = newMessage ( operationName , params ) ; Message fromMessage = null ; try { fromMessage = this . udpClient . send ( toMessage , timeout ) ; } catch ( edu . concordia . dpis . commons . TimeoutException e ) { throw new DeadNodeException ( ) ; } return fromMessage ; }
tr	IDF	public List < Dic > getDics ( ) { return dics ; }
tr	KEY	public int getStart ( ) { return start ; }
tr	IDF	public ChildrenConstructor ( ) { System . out . println ( "in children default constructor" ) ; }
tr	KEY	public void setRecargo_Servicio ( double Recargo_Servicio ) { this . Recargo_Servicio = Recargo_Servicio ; }
tr	KEY	public boolean simulate ( ) { return false ; }
tr	IDF	private void writeQNameAttribute ( java . lang . String namespace , java . lang . String attName , javax . xml . namespace . QName qname , javax . xml . stream . XMLStreamWriter xmlWriter ) throws javax . xml . stream . XMLStreamException { java . lang . String attributeNamespace = qname . getNamespaceURI ( ) ; java . lang . String attributePrefix = xmlWriter . getPrefix ( attributeNamespace ) ; if ( attributePrefix == null ) { attributePrefix = registerPrefix ( xmlWriter , attributeNamespace ) ; } java . lang . String attributeValue ; if ( attributePrefix . trim ( ) . length ( ) > 0 ) { attributeValue = attributePrefix + ":" + qname . getLocalPart ( ) ; } else { attributeValue = qname . getLocalPart ( ) ; } if ( namespace . equals ( "" ) ) { xmlWriter . writeAttribute ( attName , attributeValue ) ; } else { registerPrefix ( xmlWriter , namespace ) ; xmlWriter . writeAttribute ( namespace , attName , attributeValue ) ; } }
tr	KEY	public SignupResponse createSignupResponse ( ) { return new SignupResponse ( ) ; }
tr	IDF	public void actionPerformed ( ActionEvent e ) { if ( addedObjects != null && addedObjects . getSelectedIndex ( ) != - 1 ) { addedListModel . get ( addedObjects . getSelectedIndex ( ) ) . setDirection ( true ) ; mapPanel . level . setModified ( true ) ; mapPanel . repaint ( ) ; } }
tr	IDF	@ Override public void translate ( double x , double y , double z ) { for ( int i = 0 ; i < 4 ; i ++ ) for ( int j = 0 ; j < 4 ; j ++ ) temp . set ( j , i , 0 ) ; temp . set ( 0 , 0 , 1 ) ; temp . set ( 1 , 1 , 1 ) ; temp . set ( 2 , 2 , 1 ) ; temp . set ( 3 , 0 , x ) ; temp . set ( 3 , 1 , y ) ; temp . set ( 3 , 2 , z ) ; temp . set ( 3 , 3 , 1 ) ; this . rightMultiply ( temp ) ; }
tr	KEY	@ Override public void isBeingDestroyed ( ) { }
tr	KEY	public boolean isLeapYear ( ) { if ( ( displayYear % 4 == 0 ) && ( displayYear % 100 != 0 ) ) { return true ; } if ( displayYear % 400 == 0 ) { return true ; } return false ; }
tr	IDF	@ Override public void update ( ) { updateText ( getTestText ( ) ) ; super . update ( ) ; }
tr	KEY	public int getIndex ( ) { return index ; }
tr	KEY	@ BeforeClass public static void setUpClass ( ) { }
tr	KEY	public boolean isSel ( ) { return sel ; }
tr	IDF	private int calculateMinWidth ( Graphics g , int lSq ) { Font f = g . getFont ( ) ; Font f4Pause = new Font ( f . getFontName ( ) , Font . BOLD , f . getSize ( ) + TetrisCanvas . getFontsizelarger ( ) ) ; Dimension d = pauseBox . calculateMinSize ( f4Pause , g ) ; int wMB = mainBox . calculateMinWidth ( lSq , d . width ) ; int wRight = calculateMinWidthRight ( g , lSq ) ; int w = wMB + TMargin . getPixelLen ( ) * 2 + TPad . getPixelLen ( ) + wRight ; return w ; }
tr	KEY	public PlayerLVL7 ( ) { super ( PlayerLVL7 . class . getResource ( "resources/squirtle.jpg" ) ) ; }
tr	KEY	public void setLimitedEducation ( boolean limitedEducation ) { this . limitedEducation = limitedEducation ; }
tr	KEY	public int getIdTarea ( ) { return idTarea ; }
tr	IDF	public NotebookDayButton getDayButton ( int i , int j ) { return new NotebookDayButton ( getCalendar ( ) . getTime ( ) ) . setButtonText ( getDayNumber ( i , j ) ) ; }
tr	IDF	private static Instant parseDateTime ( String s ) { return Instant . ofEpochMilli ( long . parseLong ( s ) * 1000 ) ; }
tr	IDF	public void mouseClicked ( java . awt . event . MouseEvent evt ) { registerBtnMouseClicked ( evt ) ; }
tr	KEY	public List ( ) { this . first = null ; this . size = 0 ; }
tr	IDF	public void setKategorie ( String kategorie ) { this . kategorie = kategorie ; }
tr	KEY	public boolean isParam ( ) { return false ; }
tr	KEY	public int getStartCol ( ) { return startCol ; }
tr	IDF	public static void changeAttributeOfElement ( String canvas , String layer , String target_id , String thickness , String color , String layer_value ) throws ScriptException { String script = "" ; script += "set target_canvas_name to \"" + canvas + "\"\n" + "set target_layer_name to \"" + layer + "\"\n" + "set target_id to " + target_id + "\n" + "set thick_value to " + thickness + "\n" + "set color_value to \"" + color + "\"\n" + "set layer_value to \"" + layer_value + "\"\n" + "change_element_attribute(target_canvas_name  target_layer_name  target_id  thick_value  color_value  layer_value)\n" ; String method_file = InfoEnum . drawing_method_file ; try { script = loadMethods ( script , method_file ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } executeAppleScript ( script ) ; }
tr	KEY	public void setLastUpdate ( double lastUpdate ) { this . lastUpdate = lastUpdate ; }
tr	IDF	public void mouseReleased ( java . awt . event . MouseEvent evt ) { grid8BtnMouseReleased ( evt ) ; }
tr	KEY	@ Test public void gameBetweenTwoPlayers ( ) { }
tr	IDF	private void addNewEntities ( ) { synchronized ( addQueue ) { if ( ! addQueue . isEmpty ( ) ) { synchronized ( entitySet ) { entitySet . addAll ( addQueue ) ; } addQueue . clear ( ) ; this . dirtyCache = true ; } } }
tr	IDF	@ Override public void actionPerformed ( ActionEvent e ) { Global . mode = 4 ; System . out . println ( "mode 4" ) ; }
tr	KEY	public void rotateZ ( double radians ) ;
tr	KEY	public void setId_Equipo ( int Id_Equipo ) { this . Id_Equipo = Id_Equipo ; }
tr	KEY	public SharedComponentPanel getSharedComponentPanel ( ) { return this . sharedPanel ; }
tr	IDF	@ Test public final void testCheckExistsWhenNot ( ) { try { final Directory dir = new Directory ( "mock" ) ; dir . delete ( ) ; dir . checkExists ( ) ; fail ( ) ; } catch ( final DirectoryNotOnDiskException e ) { } }
tr	IDF	public void init ( ) { rs = new RobotSolver ( ) ; rs . Solve ( MMap . MapSet . MAP3 ) ; maze = rs . map ; solutions = rs . solutions ; timer = new Timer ( 500 , this ) ; timer . start ( ) ; fm = new frameManager ( ) ; SQUARE_SIZE = 30 ; FONT_SIZE = 18 ; HORIZ_OFFSET = 10 ; VERT_OFFSET = 20 ; if ( maze . currentMap == MMap . MapSet . MAP1 ) { SQUARE_SIZE = 20 ; FONT_SIZE = 12 ; HORIZ_OFFSET = 5 ; VERT_OFFSET = 10 ; } GRID_SIZE = maze . gridSize ; WIN_SIZE = SQUARE_SIZE * GRID_SIZE ; setSize ( WIN_SIZE , WIN_SIZE ) ; repaint ( ) ; }
tr	IDF	private void addCellViewers ( ) { for ( int i = 0 ; i < viewers . length ; i ++ ) for ( int j = 0 ; j < viewers [ 0 ] . length ; j ++ ) this . add ( ( Component ) viewers [ i ] [ j ] ) ; }
tr	KEY	public Projectile ( final double x , final double y , final double width , final double height ) { super ( x , y , width , height ) ; }
tr	KEY	@ Override public void stop ( ) throws IOException { this . running = false ; }
tr	KEY	public boolean colContains ( int col , int value ) { for ( int i = 0 ; i < 9 ; ++ i ) { if ( grid [ i * 9 + col ] == value ) return true ; } return false ; }
tr	KEY	public float getBulletRange ( ) { return 200 ; }
tr	IDF	public void actionPerformed ( ActionEvent e ) { exit ( e ) ; }
tr	KEY	public synchronized void xassignXKeyCode ( int code ) { x = code ; }
tr	KEY	public void setId2 ( int id2 ) { this . id2 = id2 ; }
tr	KEY	public void setOffset ( long value ) { this . offset = value ; }
tr	IDF	private static boolean eql ( Object x , Object y ) { return x == null ? y == null : x . equals ( y ) ; }
tr	KEY	public abstract void remove ( IKey dado ) throws SQLException ;
tr	KEY	public abstract void update ( ) ;
tr	KEY	private void download ( ) { new Thread ( this ) . start ( ) ; }
tr	KEY	public void finalize ( ) { removeMouseListener ( this ) ; removeMouseMotionListener ( this ) ; }
tr	IDF	public boolean join ( Tileset t2 ) { if ( t2 . tilewidth != tilewidth || t2 . tileheight != tileheight ) { return false ; } for ( Integer id : t2 . tiles . keySet ( ) ) { tiles . put ( id , t2 . tiles . get ( id ) ) ; } sources . addAll ( t2 . sources ) ; return true ; }
tr	KEY	public void setNHE_Empleado ( int NHE_Empleado ) { this . NHE_Empleado = NHE_Empleado ; }
tr	IDF	private static int atoi ( String s ) { return Integer . parseInt ( s ) ; }
tr	KEY	protected abstract void decodeEnd ( ) ;
tr	KEY	public double getX ( ) { return x ; }
tr	IDF	public DirectUnit ( Board board , String name , String symbol , Player owner , Position position ) { super ( board , name , symbol , owner , position ) ; }
tr	IDF	public DependencyInstance ( String [ ] forms , String [ ] postags , int [ ] heads , String [ ] deprels ) { this ( forms , postags , heads ) ; this . deprels = deprels ; }
tr	IDF	public void produceUnit ( String name ) { Unit unit = Unit . get_unit ( Unit . get_symbol ( name ) , _board , _owner , _position ) ; int cost = unit . get_cost ( ) ; int money = _owner . get_money ( ) ; if ( cost > money ) { System . out . println ( "You do not have enough money!." ) ; _active = true ; } else { _owner . set_money ( money - cost ) ; _board . set_unit ( unit , _position ) ; _owner . addPiece ( unit ) ; _active = false ; } }
tr	IDF	public TMDrillModel TMcleanByDate ( String start , String end ) { TMDrillModel tmDrillModel = tweetHandler . TMgetAllTweetsByDate ( start , end ) ; return tmDrillModel ; }
tr	IDF	@ Override protected void __doPost ( HttpServletRequest req , HttpServletResponse resp ) throws IOException { resp . setContentType ( "text/plain" ) ; resp . getWriter ( ) . println ( "Ouch... not implemented yet :(" ) ; }
tr	KEY	public int getRatio ( ) { return ratio ; }
tr	KEY	public JMenuItem getItemClassique ( ) { return this . item_jouer_local_classique ; }
tr	KEY	public void getCategory ( ) ;
tr	KEY	public boolean reinseignerHoraires ( ) { return false ; }
tr	IDF	@ Override public void identity ( ) { for ( int i = 0 ; i < 4 ; i ++ ) for ( int j = 0 ; j < 4 ; j ++ ) if ( i == j ) { matrix [ i ] [ j ] = 1 ; this . set ( j , i , 1 ) ; } else this . set ( j , i , 0 ) ; }
tr	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { eliminarButtonActionPerformed ( evt ) ; }
tr	IDF	public void setUrl ( String value ) { this . url = value ; }
tr	KEY	public void setSpareBalls ( final int spareBalls ) { this . spareBalls = spareBalls ; }
tr	IDF	@ SuppressWarnings ( "unchecked" ) private void initComponents ( ) { jLabel1 = new javax . swing . JLabel ( ) ; jLabel2 = new javax . swing . JLabel ( ) ; jScrollPane1 = new javax . swing . JScrollPane ( ) ; jTextArea1 = new javax . swing . JTextArea ( ) ; jScrollPane2 = new javax . swing . JScrollPane ( ) ; jTextArea2 = new javax . swing . JTextArea ( ) ; jLabel3 = new javax . swing . JLabel ( ) ; jScrollPane3 = new javax . swing . JScrollPane ( ) ; jTextArea3 = new javax . swing . JTextArea ( ) ; jLabel4 = new javax . swing . JLabel ( ) ; jScrollPane4 = new javax . swing . JScrollPane ( ) ; jTextArea4 = new javax . swing . JTextArea ( ) ; jButton1 = new javax . swing . JButton ( ) ; setDefaultCloseOperation ( javax . swing . WindowConstants . EXIT_ON_CLOSE ) ; jLabel1 . setText ( "Titulares local" ) ; jLabel2 . setText ( "Titulares visitante" ) ; jTextArea1 . setColumns ( 20 ) ; jTextArea1 . setRows ( 5 ) ; jScrollPane1 . setViewportView ( jTextArea1 ) ; jTextArea2 . setColumns ( 20 ) ; jTextArea2 . setRows ( 5 ) ; jScrollPane2 . setViewportView ( jTextArea2 ) ; jLabel3 . setText ( "Goles" ) ; jTextArea3 . setColumns ( 20 ) ; jTextArea3 . setRows ( 5 ) ; jScrollPane3 . setViewportView ( jTextArea3 ) ; jLabel4 . setText ( "Tarjetas" ) ; jTextArea4 . setColumns ( 20 ) ; jTextArea4 . setRows ( 5 ) ; jScrollPane4 . setViewportView ( jTextArea4 ) ; jButton1 . setText ( "Atr\u00E1s" ) ; jButton1 . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButton1ActionPerformed ( evt ) ; } } ) ; javax . swing . GroupLayout layout = new javax . swing . GroupLayout ( getContentPane ( ) ) ; getContentPane ( ) . setLayout ( layout ) ; layout . setHorizontalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( javax . swing . GroupLayout . Alignment . TRAILING , layout . createSequentialGroup ( ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . TRAILING ) . addGroup ( layout . createSequentialGroup ( ) . addContainerGap ( javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addComponent ( jButton1 ) ) . addGroup ( layout . createSequentialGroup ( ) . addGap ( 19 , 19 , 19 ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addGap ( 40 , 40 , 40 ) . addComponent ( jLabel1 ) . addGap ( 106 , 106 , 106 ) . addComponent ( jLabel2 ) ) . addGroup ( layout . createSequentialGroup ( ) . addComponent ( jScrollPane1 , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . UNRELATED ) . addComponent ( jScrollPane2 , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) ) ) . addGap ( 27 , 27 , 27 ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( jScrollPane3 , javax . swing . GroupLayout . DEFAULT_SIZE , 259 , short . MAX_VALUE ) . addComponent ( jScrollPane4 ) . addGroup ( layout . createSequentialGroup ( ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addGap ( 23 , 23 , 23 ) . addComponent ( jLabel3 ) ) . addGroup ( layout . createSequentialGroup ( ) . addGap ( 19 , 19 , 19 ) . addComponent ( jLabel4 ) ) ) . addGap ( 0 , 0 , short . MAX_VALUE ) ) ) ) ) . addGap ( 18 , 18 , 18 ) ) ) ; layout . setVerticalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addGap ( 54 , 54 , 54 ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE ) . addComponent ( jLabel1 ) . addComponent ( jLabel2 ) ) ) . addGroup ( javax . swing . GroupLayout . Alignment . TRAILING , layout . createSequentialGroup ( ) . addContainerGap ( ) . addComponent ( jLabel3 ) ) ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . UNRELATED ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING , false ) . addComponent ( jScrollPane1 ) . addComponent ( jScrollPane2 ) . addGroup ( javax . swing . GroupLayout . Alignment . TRAILING , layout . createSequentialGroup ( ) . addComponent ( jScrollPane3 , javax . swing . GroupLayout . PREFERRED_SIZE , 108 , javax . swing . GroupLayout . PREFERRED_SIZE ) . addGap ( 11 , 11 , 11 ) . addComponent ( jLabel4 ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addComponent ( jScrollPane4 , javax . swing . GroupLayout . PREFERRED_SIZE , 112 , javax . swing . GroupLayout . PREFERRED_SIZE ) ) ) . addGap ( 38 , 38 , 38 ) . addComponent ( jButton1 ) . addContainerGap ( 24 , short . MAX_VALUE ) ) ) ; pack ( ) ; }
tr	IDF	public String getAccelDateStr ( ) { if ( acceldate . getTime ( ) <= 0 ) return ( "&nbsp;" ) ; return ( dtfmt . format ( acceldate ) ) ; }
tr	IDF	public void open ( ) throws CardServiceException { if ( ! service . isOpen ( ) ) { service . open ( ) ; } sendSelectApplet ( ) ; }
tr	KEY	public TypePartie getTypePartie ( ) { return this . type ; }
tr	KEY	public double nextDouble ( ) { return ( ( ( long ) next ( 26 ) << 27 ) + next ( 27 ) ) / ( double ) ( 1 << 53 ) ; }
tr	KEY	public void run ( ) { new Agregar ( ) . setVisible ( true ) ; }
tr	IDF	public SearchRequestBuilder withVideoRequestFilter ( String filter ) ;
tr	KEY	public void detachConsole ( ) { console = null ; }
tr	IDF	@ Override protected void dealWithPossibleNewDeviceName ( String possibleNewName ) { if ( ! names . contains ( possibleNewName ) ) { names . add ( possibleNewName ) ; } }
tr	KEY	public synchronized void xsetL2InitialDelay ( int a ) { l2ID = a ; }
tr	IDF	@ SuppressWarnings ( "unchecked" ) private void initComponents ( ) { jTextField1 = new javax . swing . JTextField ( ) ; jLabel1 = new javax . swing . JLabel ( ) ; gameBoardPanel = new javax . swing . JPanel ( ) ; boardTitlePanel = new javax . swing . JPanel ( ) ; boardTitle = new javax . swing . JLabel ( ) ; scoreTitle = new javax . swing . JLabel ( ) ; playerScoreLabel = new javax . swing . JLabel ( ) ; boardPanel = new javax . swing . JPanel ( ) ; jTextField1 . setText ( "jTextField1" ) ; jTextField1 . addKeyListener ( new java . awt . event . KeyAdapter ( ) { public void keyPressed ( java . awt . event . KeyEvent evt ) { jTextField1KeyPressed ( evt ) ; } } ) ; jLabel1 . setText ( "jLabel1" ) ; setDefaultCloseOperation ( javax . swing . WindowConstants . EXIT_ON_CLOSE ) ; setTitle ( "Snake" ) ; setMinimumSize ( new java . awt . Dimension ( 540 , 640 ) ) ; setResizable ( false ) ; gameBoardPanel . setBackground ( new java . awt . Color ( 0 , 0 , 0 ) ) ; gameBoardPanel . setBorder ( javax . swing . BorderFactory . createLineBorder ( new java . awt . Color ( 0 , 0 , 0 ) ) ) ; boardTitlePanel . setBackground ( new java . awt . Color ( 0 , 0 , 204 ) ) ; boardTitlePanel . setBorder ( javax . swing . BorderFactory . createLineBorder ( new java . awt . Color ( 0 , 0 , 0 ) ) ) ; boardTitle . setFont ( new java . awt . Font ( "Noteworthy" , 1 , 48 ) ) ; boardTitle . setForeground ( new java . awt . Color ( 51 , 255 , 51 ) ) ; boardTitle . setHorizontalAlignment ( javax . swing . SwingConstants . RIGHT ) ; boardTitle . setText ( "SNAKE!" ) ; scoreTitle . setFont ( new java . awt . Font ( "SansSerif" , 1 , 24 ) ) ; scoreTitle . setForeground ( new java . awt . Color ( 255 , 102 , 102 ) ) ; scoreTitle . setHorizontalAlignment ( javax . swing . SwingConstants . CENTER ) ; scoreTitle . setText ( "Score" ) ; playerScoreLabel . setFont ( new java . awt . Font ( "SansSerif" , 0 , 36 ) ) ; playerScoreLabel . setForeground ( new java . awt . Color ( 255 , 51 , 102 ) ) ; playerScoreLabel . setHorizontalAlignment ( javax . swing . SwingConstants . CENTER ) ; javax . swing . GroupLayout boardTitlePanelLayout = new javax . swing . GroupLayout ( boardTitlePanel ) ; boardTitlePanel . setLayout ( boardTitlePanelLayout ) ; boardTitlePanelLayout . setHorizontalGroup ( boardTitlePanelLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( boardTitlePanelLayout . createSequentialGroup ( ) . addContainerGap ( ) . addComponent ( boardTitle , javax . swing . GroupLayout . PREFERRED_SIZE , 342 , javax . swing . GroupLayout . PREFERRED_SIZE ) . addGap ( 18 , 18 , 18 ) . addGroup ( boardTitlePanelLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( scoreTitle , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addComponent ( playerScoreLabel , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) ) . addContainerGap ( ) ) ) ; boardTitlePanelLayout . setVerticalGroup ( boardTitlePanelLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( boardTitlePanelLayout . createSequentialGroup ( ) . addContainerGap ( ) . addGroup ( boardTitlePanelLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( boardTitlePanelLayout . createSequentialGroup ( ) . addComponent ( scoreTitle ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addComponent ( playerScoreLabel , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) ) . addComponent ( boardTitle , javax . swing . GroupLayout . DEFAULT_SIZE , 88 , short . MAX_VALUE ) ) . addContainerGap ( ) ) ) ; boardPanel . setBackground ( new java . awt . Color ( 0 , 153 , 0 ) ) ; boardPanel . addKeyListener ( new java . awt . event . KeyAdapter ( ) { public void keyPressed ( java . awt . event . KeyEvent evt ) { boardPanelKeyPressed ( evt ) ; } } ) ; javax . swing . GroupLayout boardPanelLayout = new javax . swing . GroupLayout ( boardPanel ) ; boardPanel . setLayout ( boardPanelLayout ) ; boardPanelLayout . setHorizontalGroup ( boardPanelLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGap ( 0 , 500 , short . MAX_VALUE ) ) ; boardPanelLayout . setVerticalGroup ( boardPanelLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGap ( 0 , 500 , short . MAX_VALUE ) ) ; javax . swing . GroupLayout gameBoardPanelLayout = new javax . swing . GroupLayout ( gameBoardPanel ) ; gameBoardPanel . setLayout ( gameBoardPanelLayout ) ; gameBoardPanelLayout . setHorizontalGroup ( gameBoardPanelLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( boardTitlePanel , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addGroup ( gameBoardPanelLayout . createSequentialGroup ( ) . addContainerGap ( ) . addComponent ( boardPanel , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addContainerGap ( ) ) ) ; gameBoardPanelLayout . setVerticalGroup ( gameBoardPanelLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( gameBoardPanelLayout . createSequentialGroup ( ) . addComponent ( boardTitlePanel , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . UNRELATED ) . addComponent ( boardPanel , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addContainerGap ( ) ) ) ; javax . swing . GroupLayout layout = new javax . swing . GroupLayout ( getContentPane ( ) ) ; getContentPane ( ) . setLayout ( layout ) ; layout . setHorizontalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addContainerGap ( ) . addComponent ( gameBoardPanel , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addContainerGap ( ) ) ) ; layout . setVerticalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addContainerGap ( ) . addComponent ( gameBoardPanel , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addContainerGap ( ) ) ) ; pack ( ) ; }
tr	KEY	public String finalizaPizza ( ) { return "Pizza\nTempero: " + this . tempero + "\ncobertura: " + this . cobertura ; }
tr	KEY	public int getProductID ( ) { return productID ; }
tr	KEY	public int getMaxRows ( ) { return maxRows ; }
tr	IDF	public RecompensaDao ( Conexion . Tipo_conexion tipoConexion ) throws Exception { super ( tipoConexion , "recompensa" ) ; }
tr	IDF	public void setVhostFilter ( Filter vhostFilter ) { this . vhostFilter = vhostFilter ; }
tr	IDF	private void grid4BtnMouseReleased ( java . awt . event . MouseEvent evt ) { markPosition ( 4 , grid4Btn , isNetwork ) ; }
tr	IDF	protected boolean sharedEdge ( final int x , final int y , final char c ) { if ( validSpot ( x , y + 1 ) && ( c == map [ x ] [ y + 1 ] ) ) return true ; if ( validSpot ( x , y - 1 ) && ( c == map [ x ] [ y - 1 ] ) ) return true ; if ( validSpot ( x + 1 , y ) && ( c == map [ x + 1 ] [ y ] ) ) return true ; if ( validSpot ( x - 1 , y ) && ( c == map [ x - 1 ] [ y ] ) ) return true ; return false ; }
tr	IDF	private static char [ ] zzUnpackCMap ( String packed ) { char [ ] map = new char [ 10000 ] ; int i = 0 ; int j = 0 ; while ( i < 90 ) { int count = packed . charAt ( i ++ ) ; char value = packed . charAt ( i ++ ) ; do map [ j ++ ] = value ; while ( -- count > 0 ) ; } return map ; }
tr	KEY	public Object getValue ( ) { if ( userObject != null ) { return userObject . toString ( ) ; } return "" ; }
tr	IDF	private JTabbedPane createInputTabs ( ) { JTabbedPane tabManager = new JTabbedPane ( ) ; tabManager . addTab ( "brute force" , createBruteForceInputArea ( ) ) ; tabManager . addTab ( "puzzle" , createPuzzleInputArea ( ) ) ; return tabManager ; }
tr	IDF	public void setObject ( int aidx , Object aobj ) { if ( aidx >= 0 && aidx < getCount ( ) ) myobjects . set ( aidx , aobj ) ; }
tr	KEY	protected void interrupted ( ) { driveTrain . turnBtn = false ; }
tr	KEY	public void clear ( ) { throw new UnsupportedOperationException ( ) ; }
tr	IDF	@ Override public Component getTableCellRendererComponent ( JTable table , Object value , boolean isSelected , boolean hasFocus , int row , int column ) { JLabel label = new JLabel ( "" ) ; Component component = label ; Object pathComponent = ( ( JXTreeTable ) table ) . getPathForRow ( row ) . getLastPathComponent ( ) ; if ( pathComponent instanceof AbstractBeanTreeNode ) { AbstractBeanTreeNode node = ( AbstractBeanTreeNode ) pathComponent ; String className = node . getClassName ( ) ; if ( className != null ) { label . setToolTipText ( className ) ; } switch ( node . getNodeType ( ) ) { case ROOT : case BEAN : if ( node . getObjType ( ) == boolean . class ) { JCheckBox checkBox = new JCheckBox ( value . toString ( ) ) ; boolean selectedCB = ( boolean ) ( node . parseObjectFromString ( node . getUserObject ( ) . toString ( ) ) ) ; checkBox . setSelected ( selectedCB ) ; component = checkBox ; } else if ( node . getObjType ( ) . isEnum ( ) ) { JComboBox comboBox = new JComboBox ( ) ; String selectedItem = node . getUserObject ( ) . toString ( ) ; if ( selectedItem != null ) { comboBox . addItem ( selectedItem ) ; comboBox . setSelectedItem ( selectedItem ) ; } component = comboBox ; } else { if ( AbstractBeanTreeNode . isTypeNumberOrString ( node . getObjType ( ) ) ) { component = new JLabel ( node . getValue ( ) . toString ( ) ) ; } } break ; case PRIMITIVE : label . setIcon ( ImageCenter . getInstance ( ) . getImage ( ImageCenter . ICON_DEVICE ) ) ; break ; default : System . out . println ( "Renderer: Unknown Node Type" ) ; } } return component ; }
tr	KEY	public void setW ( int w ) { this . w = w ; }
tr	KEY	public synchronized int xgetR2RepeatDelay ( ) { return r2RD ; }
tr	KEY	public Key lastKey ( ) { if ( tree == null ) throw new NoSuchElementException ( ) ; else return ( Key ) lastKey ( tree ) ; }
tr	KEY	@ Override protected void doInBackground ( ) throws Exception { clearTempFiles ( ) ; createTempVids ( ) ; return null ; }
tr	KEY	public void startLiveWindowMode ( ) { disable ( ) ; }
tr	IDF	public String showDisplay ( Connection aconn , Date abirth ) { CCodeDesc vaccines = new CCodeDesc ( aconn , "VaccineTbl" , "VaccineCd" , "VaccineNm" , "VaccineCd" ) ; CCodeDesc mfrs = new CCodeDesc ( aconn , "MfrTbl" , "MfrCd" , "MfrCd" , "MfrCd" , "VaccineMfrTbl" , "VaccineCd" ) ; CCodeDesc vacnotes = new CCodeDesc ( aconn , "NoteTbl" , "NoteCd" , "NoteTxt" , "NoteCd" ) ; String retstr = " <table class=\"midtitle\" >" ; retstr = retstr + "<tr>" ; retstr = retstr + "<td colspan='8' class=\"midtitleleft\" >&nbsp;&nbsp;Vaccinations</td> </tr> </table>" ; retstr = retstr + "<dd class='details'>" + "<input type=hidden name='mfrdatadrop' id='mfrdatadrop' value='" + mfrs . makeDataDrop ( ) + "'>\n" ; retstr = retstr + "<table class='factors' summary='vaccinations'>" ; retstr = retstr + "<tr>\n" ; retstr = retstr + "<th class='factors' scope='col'><label>Vaccine</label></th>" ; retstr = retstr + "<th class='factors' scope='col'><label>Mfr</label></th>" ; retstr = retstr + "<th class='factors' scope='col'><label>Yrs</label></th>" ; retstr = retstr + "<th class='factors' scope='col'><label>Mos</label></th>" ; retstr = retstr + "<th class='factors' scope='col'><label>Wks</label></th>" ; retstr = retstr + "<th class='factors' scope='col'><label>Days</label></th>" ; retstr = retstr + "<th class='factors' scope='col'><label>Date</label></th>" ; retstr = retstr + "<th class='factors' scope='col'><label>Note</label></th>" ; retstr = retstr + "<th class='hidden' scope='col'></th>" ; retstr = retstr + "</tr>" ; for ( int idx = 0 ; idx < this . getCount ( ) ; idx ++ ) { CShotItem myitem = ( CShotItem ) this . getItem ( idx ) ; retstr = retstr + "<tr>\n" ; retstr = retstr + "<td class='factors'>" + vaccines . getDescByCode ( myitem . vaccinecd ) + "</td>\n" ; retstr = retstr + "<td class='factors'>" + mfrs . getDescByCode ( myitem . vaccinecd , myitem . mfrcd ) + "</td>\n" ; retstr = retstr + "<td class='factors'>" + Integer . toString ( myitem . vageyears ) + "</td>\n" ; retstr = retstr + "<td class='factors'>" + Integer . toString ( myitem . vagemonths ) + "</td>\n" ; retstr = retstr + "<td class='factors'>" + Integer . toString ( myitem . vageweeks ) + "</td>\n" ; retstr = retstr + "<td class='factors'>" + Integer . toString ( myitem . vagedays ) + "</td>\n" ; retstr = retstr + "<td class='factors'>" + myitem . getShotDateStr ( ) + "</td>\n" ; retstr = retstr + "<td class='factors'>" + ( CAppConsts . TagNoValue . equals ( myitem . vacnote ) ? "" : vacnotes . getDescByCode ( myitem . vacnote ) ) + "</td>\n" ; retstr = retstr + "</tr>\n" ; } retstr = retstr + "</table></dd><br>\n" ; return ( retstr ) ; }
tr	KEY	private HitEvent ( int base , int multi ) { this ( base , multi , false ) ; }
tr	IDF	public static void main ( String [ ] args ) { System . out . println ( "Testing AVL tree\n" ) ; AVL tree = null ; tree = AVL . insert ( 50 , tree ) ; tree = AVL . insert ( 30 , tree ) ; tree = AVL . insert ( 70 , tree ) ; tree = AVL . insert ( 60 , tree ) ; tree = AVL . insert ( 90 , tree ) ; tree = AVL . insert ( 55 , tree ) ; tree = AVL . insert ( 19 , tree ) ; System . out . println ( "Pre order:" ) ; AVL . postOrder ( tree ) ; System . out . println ( ) ; tree = AVL . remove ( tree , 90 ) ; tree = AVL . calculateBalance ( tree ) ; tree = AVL . remove ( tree , 70 ) ; tree = AVL . calculateBalance ( tree ) ; System . out . println ( "Pre order:" ) ; AVL . preOrder ( tree ) ; System . out . println ( ) ; System . out . println ( "Order:" ) ; tree = AVL . insert ( 11 , tree ) ; AVL . inOrder ( tree ) ; System . out . println ( ) ; System . out . println ( "Post order:" ) ; AVL . postOrder ( tree ) ; System . out . println ( ) ; AVL a = AVL . search ( tree , 30 ) ; System . out . println ( "Node key => " + a . key + "  balance => " + a . balance ) ; }
tr	KEY	int getSize ( ) ;
tr	KEY	public boolean markSupported ( ) { return bufferedReader . markSupported ( ) ; }
tr	KEY	private long createMaxShiftWidth ( final int divisionSize ) { return ( divisionSize - 1 ) * ONE_LINE_BIT_LENGTH ; }
tr	KEY	public boolean equals ( Object _other ) { if ( _other == null ) { return false ; } if ( _other == this ) { return true ; } if ( ! ( _other instanceof InvitePk ) ) { return false ; } final InvitePk _cast = ( InvitePk ) _other ; if ( idInvite == null ? _cast . idInvite != idInvite : ! idInvite . equals ( _cast . idInvite ) ) { return false ; } return true ; }
tr	KEY	@ Override public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( ) != obj . getClass ( ) ) { return false ; } final MehMurray other = ( MehMurray ) obj ; if ( ! Objects . equals ( this . name , other . name ) ) { return false ; } if ( this . wins != other . wins ) { return false ; } if ( this . losses != other . losses ) { return false ; } if ( this . ties != other . ties ) { return false ; } if ( ! Objects . equals ( this . letter , other . letter ) ) { return false ; } if ( this . matchSeconds != other . matchSeconds ) { return false ; } if ( this . keepScore != other . keepScore ) { return false ; } if ( this . enableSound != other . enableSound ) { return false ; } if ( this . exitMM != other . exitMM ) { return false ; } return true ; }
tr	IDF	@ Override public boolean add ( Node o ) { hash . put ( o . state , o ) ; return super . add ( o ) ; }
tr	IDF	@ Override public void actionPerformed ( ActionEvent e ) { System . out . println ( "Button (jail) pay bail clicked" ) ; Game . players . get ( Game . currentPlayer ) . ChangeMoney ( - 1000 ) ; Game . players . get ( Game . currentPlayer ) . InPrison = false ; Game . players . get ( Game . currentPlayer ) . PrisonTurns = 0 ; if ( Game . JailDiceTries == 0 ) { showThrowDiceBtn = false ; showJailThrowDiceBtn = false ; showNextPlayerBtn = true ; showJailPayBailBtn = false ; } else { showThrowDiceBtn = false ; showMortgageBtn = false ; showJailThrowDiceBtn = false ; showNextPlayerBtn = true ; showJailPayBailBtn = false ; Game . players . get ( Game . currentPlayer ) . ChangePosition ( Game . dices [ 0 ] . number + Game . dices [ 1 ] . number ) ; } refreshGameControl ( ) ; }
tr	IDF	public KalkylUI ( ) throws IOException , ClassNotFoundException { setTitle ( "Robbans program f\u00F6r \u00F6versyn av pengabingen" ) ; Container c = getContentPane ( ) ; c . setLayout ( null ) ; setSize ( 1024 , 1024 ) ; this . addWindowListener ( fonsterLyssnare ) ; setJMenuBar ( menuBar ) ; menuBar . add ( fileMenu ) ; fileMenu . add ( newWorkspace ) ; fileMenu . add ( openMenuItem ) ; fileMenu . add ( saveAsMenuItem ) ; fileMenu . add ( updateMenuItem ) ; fileMenu . add ( addMilestoneMenuItem ) ; fileMenu . add ( quitMenuItem ) ; newWorkspace . addActionListener ( this ) ; openMenuItem . addActionListener ( this ) ; saveAsMenuItem . addActionListener ( this ) ; updateMenuItem . addActionListener ( this ) ; addMilestoneMenuItem . addActionListener ( this ) ; quitMenuItem . addActionListener ( this ) ; menuBar . add ( posterM ) ; posterM . add ( newGroupMenuItem ) ; posterM . add ( nyAktiePost ) ; posterM . add ( nyKontoPost ) ; posterM . add ( newRawMaterialPost ) ; newGroupMenuItem . addActionListener ( this ) ; nyAktiePost . addActionListener ( this ) ; nyKontoPost . addActionListener ( this ) ; newRawMaterialPost . addActionListener ( this ) ; menuBar . add ( loggM ) ; loggM . add ( logOverview ) ; loggM . add ( skrivUtInsUtag ) ; loggM . add ( printMilestones ) ; logOverview . addActionListener ( this ) ; skrivUtInsUtag . addActionListener ( this ) ; printMilestones . addActionListener ( this ) ; menuBar . add ( viewM ) ; viewM . add ( allMenuItem ) ; viewM . add ( thisYearMenuItem ) ; viewM . add ( period ) ; allMenuItem . addActionListener ( this ) ; thisYearMenuItem . addActionListener ( this ) ; period . addActionListener ( this ) ; popupMenyn . add ( transactionFrom ) ; popupMenyn . add ( transactionTo ) ; popupMenyn . add ( edit ) ; popupMenyn . add ( radera ) ; popupMenyn . add ( raderaT ) ; popupMenyn . add ( registreraInsUt ) ; popupMenyn . add ( visaInsUt ) ; popupMenyn . add ( removeTransaction ) ; popupMenyn . add ( removeMilestone ) ; transactionFrom . addActionListener ( this ) ; transactionTo . addActionListener ( this ) ; edit . addActionListener ( this ) ; radera . addActionListener ( this ) ; raderaT . addActionListener ( this ) ; registreraInsUt . addActionListener ( this ) ; visaInsUt . addActionListener ( this ) ; removeTransaction . addActionListener ( this ) ; removeMilestone . addActionListener ( this ) ; utskriftsPanel . setLayout ( new GridLayout ( antalRader , antalKolumner ) ) ; titleLabel . setBounds ( 12 , 5 , 800 , 20 ) ; c . add ( titleLabel ) ; matrixScrollPane . setBounds ( 12 , 30 , 1000 , 726 ) ; for ( int i = 0 ; i < antalRader ; i ++ ) for ( int j = 0 ; j < antalKolumner ; j ++ ) { utskriftsLabel [ i ] [ j ] = new JLabel ( "" ) ; if ( j == 0 ) { utskriftsLabel [ i ] [ j ] . add ( popupMenyn ) ; utskriftsLabel [ i ] [ j ] . addMouseListener ( mouseListener ) ; } if ( 1 <= j && j <= 5 ) { utskriftsLabel [ i ] [ j ] . setHorizontalAlignment ( SwingConstants . RIGHT ) ; } utskriftsPanel . add ( utskriftsLabel [ i ] [ j ] ) ; } c . add ( matrixScrollPane ) ; matrixScrollPane . setVerticalScrollBarPolicy ( JScrollPane . VERTICAL_SCROLLBAR_ALWAYS ) ; backButton = new JButton ( "Tillbaka" ) ; backButton . setBounds ( 900 , 5 , 100 , 20 ) ; backButton . addActionListener ( this ) ; backButton . setVisible ( false ) ; c . add ( backButton ) ; gruppFont = new Font ( "arial" , Font . BOLD , 12 ) ; vardeFont = new Font ( "arial" , Font . PLAIN , 12 ) ; rubrikFont = new Font ( "arial" , Font . BOLD , 13 ) ; c . add ( textAreaScrollPane ) ; textAreaScrollPane . setVerticalScrollBarPolicy ( JScrollPane . VERTICAL_SCROLLBAR_ALWAYS ) ; textAreaScrollPane . setBounds ( 12 , 756 , 1000 , 225 ) ; c . add ( commandT ) ; commandT . setBounds ( 12 , 981 , 1000 , 20 ) ; commandT . addActionListener ( this ) ; setVisible ( true ) ; }
tr	IDF	public static void main ( String [ ] args ) { @ SuppressWarnings ( "unused" ) GameTester t = new GameTester ( ) ; }
tr	IDF	public void storeop ( Code code ) { program . add ( code ) ; }
tr	IDF	@ Override public List < String > replace ( List < String > fileNames ) { List < String > newFileNames = new ArrayList < String > ( ) ; for ( String fileName : fileNames ) { newFileNames . add ( addSequenceNumber ( fileName , initialNoForStart ++ , initialNoForIndex ++ , initialNoForEnd ++ ) ) ; } return newFileNames ; }
tr	KEY	public void setId ( long id ) { this . id = id ; }
tr	KEY	public void update ( ) ;
tr	IDF	@ SuppressWarnings ( "unchecked" ) private void initComponents ( ) { jLabel1 = new javax . swing . JLabel ( ) ; jScrollPane1 = new javax . swing . JScrollPane ( ) ; jTable1 = new javax . swing . JTable ( ) ; jButton1 = new javax . swing . JButton ( ) ; setDefaultCloseOperation ( javax . swing . WindowConstants . EXIT_ON_CLOSE ) ; addWindowListener ( new java . awt . event . WindowAdapter ( ) { public void windowClosing ( java . awt . event . WindowEvent evt ) { formWindowClosing ( evt ) ; } } ) ; jLabel1 . setText ( "Skriv navnene p\u00E5 spillerne herunder" ) ; jTable1 . setModel ( new javax . swing . table . DefaultTableModel ( new Object [ ] [ ] { { "Mr. Derp" } , { "Kransekage" } } , new String [ ] { "Navn" } ) { class [ ] types = new class [ ] { java . lang . String . class } ; public class getColumnClass ( int columnIndex ) { return types [ columnIndex ] ; } } ) ; jTable1 . setSelectionMode ( javax . swing . ListSelectionModel . SINGLE_SELECTION ) ; jTable1 . addKeyListener ( new java . awt . event . KeyAdapter ( ) { public void keyPressed ( java . awt . event . KeyEvent evt ) { jTable1KeyPressed ( evt ) ; } } ) ; jScrollPane1 . setViewportView ( jTable1 ) ; jButton1 . setText ( "Start spil" ) ; jButton1 . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButton1ActionPerformed ( evt ) ; } } ) ; javax . swing . GroupLayout layout = new javax . swing . GroupLayout ( getContentPane ( ) ) ; getContentPane ( ) . setLayout ( layout ) ; layout . setHorizontalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( javax . swing . GroupLayout . Alignment . TRAILING , layout . createSequentialGroup ( ) . addContainerGap ( ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . TRAILING ) . addComponent ( jButton1 , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addComponent ( jScrollPane1 , javax . swing . GroupLayout . Alignment . LEADING , javax . swing . GroupLayout . DEFAULT_SIZE , 380 , short . MAX_VALUE ) . addGroup ( javax . swing . GroupLayout . Alignment . LEADING , layout . createSequentialGroup ( ) . addComponent ( jLabel1 ) . addGap ( 0 , 0 , short . MAX_VALUE ) ) ) . addContainerGap ( ) ) ) ; layout . setVerticalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addContainerGap ( ) . addComponent ( jLabel1 ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addComponent ( jScrollPane1 , javax . swing . GroupLayout . PREFERRED_SIZE , 259 , javax . swing . GroupLayout . PREFERRED_SIZE ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addComponent ( jButton1 , javax . swing . GroupLayout . DEFAULT_SIZE , 32 , short . MAX_VALUE ) . addContainerGap ( ) ) ) ; pack ( ) ; }
tr	KEY	public Option withIsSelected ( boolean isSelected ) { this . isSelected = isSelected ; return this ; }
tr	IDF	public void start ( ) { mailQueue = MailQueue . getInstance ( ) ; loadEmailPersistence ( ) ; timer = new Timer ( ) ; timer . scheduleAtFixedRate ( new SendQueueTimerTask ( ) , new Date ( ) , 1000 ) ; timer . scheduleAtFixedRate ( new WaitQueueTimerTask ( ) , new Date ( ) , 10000 ) ; }
tr	KEY	public boolean isCriticality ( ) { return criticality ; }
tr	KEY	private void newGame ( ) { this . pnlWinner . setVisible ( false ) ; this . clearControls ( ) ; this . showAllImages ( false ) ; this . hideShowdownControls ( ) ; try { this . initializeGame ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }
tr	KEY	public boolean isNodata ( ) { return nodata ; }
tr	IDF	public void setName ( String name ) { this . name = name ; }
tr	IDF	@ Override public void update ( ) { double dx ; double dy ; double d ; double fx ; double fy ; for ( GameEntity n : u . neighbours ) { if ( n . isEnemy ( u ) ) continue ; dx = u . getX ( ) - n . getX ( ) ; dy = u . getY ( ) - n . getY ( ) ; d = dx * dx + dy * dy ; if ( d < u . softr * u . softr ) { if ( d == 0 ) { double r = Math . random ( ) ; fx = r ; fy = Math . sqrt ( 1 - r * r ) ; } else { fx = c * dx / d ; fy = c * dy / d ; } u . addForce ( fx , fy ) ; } } }
tr	KEY	private int typeToIndex ( int typeID ) { if ( typeID == 11399 ) return 7 ; if ( typeID <= 40 && typeID >= 34 ) { return typeID - 34 ; } return - 1 ; }
tr	IDF	public void draw ( BufferedImage canvas , boolean drawEdge , boolean drawCorners ) { for ( int y = 2 ; y < _height - 2 ; y ++ ) for ( int x = 2 ; x < _width - 2 ; x ++ ) { if ( _image [ y ] [ x ] == FILLED ) { canvas . setRGB ( x + _left , y + _top , ImageSegmenter . _drawColor [ _type ] ) ; } else if ( drawEdge && _image [ y ] [ x ] == EDGE ) { canvas . setRGB ( x + _left , y + _top , 000000 ) ; } } if ( drawCorners ) { findLines ( ) ; if ( _lines != null ) for ( LineSegment line : _lines ) line . draw ( canvas . createGraphics ( ) , _left , _top ) ; } }
tr	KEY	public abstract String toBase ( ) ;
tr	IDF	public int getCount ( E data ) { MoveToFrontList < E > findBucket = buckets [ h . hash ( data ) % buckets . length ] ; return findBucket . getCount ( data ) ; }
tr	IDF	private void runTestProc ( Connection aconn , CTestItem atestcase , int atnum , CallableStatement acstmt ) { try { String shtstr = atestcase . shotlist . buildShotStr ( atnum ) ; String waivstr = atestcase . nonadmlist . buildWaiverStr ( aconn , atnum ) ; String titerstr = atestcase . nonadmlist . buildTiterStr ( aconn , atnum ) ; String protocol_version = "" ; String series_eval = "" ; String series_dose = "" ; String evaluation = "" ; String status_mg = "" ; String status_cd = "" ; String series_cd = "" ; String assessdate = atestcase . getYmdStr ( atestcase . basedate ) ; dbSetDecimalParam ( acstmt , 1 , Integer . toString ( atnum ) ) ; dbSetVarCharParam ( acstmt , 2 , atestcase . getYmdStr ( atestcase . birthdate ) ) ; dbSetVarCharParam ( acstmt , 3 , atestcase . gendercd ) ; dbSetDecimalParam ( acstmt , 4 , "1" ) ; dbSetDecimalParam ( acstmt , 5 , protocol_version ) ; dbSetVarCharParam ( acstmt , 6 , series_cd ) ; dbSetVarCharParam ( acstmt , 7 , assessdate ) ; dbSetVarCharParam ( acstmt , 8 , props . SaveRemoteInfo ) ; dbSetVarCharParam ( acstmt , 9 , shtstr ) ; dbSetVarCharParam ( acstmt , 10 , titerstr ) ; dbSetVarCharParam ( acstmt , 11 , waivstr ) ; acstmt . registerOutParameter ( 12 , java . sql . Types . VARCHAR ) ; acstmt . registerOutParameter ( 13 , java . sql . Types . VARCHAR ) ; acstmt . registerOutParameter ( 14 , java . sql . Types . VARCHAR ) ; acstmt . registerOutParameter ( 15 , java . sql . Types . VARCHAR ) ; acstmt . registerOutParameter ( 16 , java . sql . Types . DECIMAL ) ; acstmt . executeQuery ( ) ; series_eval = acstmt . getString ( 12 ) ; series_dose = acstmt . getString ( 13 ) ; evaluation = acstmt . getString ( 14 ) ; status_mg = acstmt . getString ( 15 ) ; status_cd = acstmt . getString ( 16 ) ; System . out . println ( "Result " + status_cd + " : " + status_mg ) ; System . out . println ( "Evaluation: " + atnum ) ; System . out . println ( evaluation ) ; System . out . println ( "Series Evaluation: " + atnum ) ; System . out . println ( series_eval ) ; System . out . println ( "Dose Evaluation: " + atnum ) ; System . out . println ( series_dose ) ; saveSeriesResult ( aconn , atestcase , series_eval ) ; saveDoseResult ( aconn , atestcase , series_dose ) ; } catch ( Exception ex ) { CLogError . logError ( props . ErrorLogFile , props . ErrMsgEcho , "runTestProc(" + atnum + ") error: " , ex ) ; } }
tr	IDF	public void setClave ( String clave ) { this . clave = clave ; }
tr	IDF	public void clock ( ) { try { executeColorClock ( ) ; } catch ( SystemException e ) { System . err . println ( e . toString ( ) ) ; } }
tr	IDF	public void useIrrigationTiles ( ) { sharedModel . decrementIrrigationTiles ( ) ; updateSharedPanel ( ) ; }
tr	IDF	private static Object equivDiff ( Object elt1 , Object elt2 ) { if ( elt1 == NO_ELEMENT ) return NO_ELEMENT ; else if ( elt2 == NO_ELEMENT ) return elt1 ; else if ( elt1 instanceof EquivalentSet ) { ArrayList < Object > al1 = ( ( EquivalentSet ) elt1 ) . contents ; ArrayList < Object > al2 = null ; if ( elt2 instanceof EquivalentSet ) al2 = ( ( EquivalentSet ) elt2 ) . contents ; ArrayList al = new ArrayList ( ) ; int size1 = al1 . size ( ) ; for ( int i = 0 ; i < size1 ; ++ i ) { Object e1 = al1 . get ( i ) ; if ( al2 == null ? ! eql ( e1 , elt2 ) : ! al2 . contains ( e1 ) ) al . add ( e1 ) ; } if ( al . size ( ) == 0 ) return NO_ELEMENT ; else if ( al . size ( ) == 1 ) return al . get ( 0 ) ; else { al . trimToSize ( ) ; return new EquivalentSet ( al ) ; } } else if ( elt2 instanceof EquivalentSet ) { if ( ! ( ( EquivalentSet ) elt2 ) . contents . contains ( elt1 ) ) return elt1 ; else return NO_ELEMENT ; } else if ( ! eql ( elt1 , elt2 ) ) return elt1 ; else return NO_ELEMENT ; }
tr	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButton1ActionPerformed ( evt ) ; }
tr	KEY	public void setMain ( boolean main ) { this . main = main ; }
tr	IDF	public void close ( ) { ChannelFuture future = channel . close ( ) ; future . awaitUninterruptibly ( ) ; }
tr	KEY	public String toString ( ) { return " at " + this . index + " [character " + this . character + " line " + this . line + "]" ; }
tr	KEY	public synchronized void close ( ) { socket . close ( ) ; }
tr	KEY	public int toNumberValue ( ) { return this . numberValue ; }
tr	KEY	public boolean isWhitePiece ( ) { return ( ! isKing ) && isWhite ; }
tr	KEY	public CreateQuestionPanel ( ) { this . createQuestions ( ) ; }
tr	IDF	public long getLong ( String key ) throws JSONException { Object o = get ( key ) ; return o instanceof Number ? ( ( Number ) o ) . longValue ( ) : ( long ) getDouble ( key ) ; }
tr	IDF	public Estado ( Jogada jogada , TabuleiroXadrez tabuleiro ) { this . jogada = jogada ; this . tabuleiro = tabuleiro ; }
tr	IDF	@ JsonProperty ( "name" ) public String getName ( ) { return name ; }
tr	IDF	String dump ( ) { return dump ( tree ) ; }
tr	IDF	public static JButton decorateButton ( final JButton button ) { button . setBackground ( Color . DARK_GRAY ) ; button . setForeground ( Color . WHITE ) ; button . setBorder ( BorderFactory . createEmptyBorder ( ) ) ; button . setUI ( new MyButtonUI ( ) ) ; button . setCursor ( Cursor . getPredefinedCursor ( Cursor . HAND_CURSOR ) ) ; button . setFont ( FONT ) ; button . addMouseListener ( new MouseListener ( ) { @ Override public void mouseClicked ( MouseEvent e ) { } @ Override public void mousePressed ( MouseEvent e ) { } @ Override public void mouseReleased ( MouseEvent e ) { } @ Override public void mouseEntered ( MouseEvent e ) { button . setBackground ( COLOR_BUTTON_HOVER ) ; } @ Override public void mouseExited ( MouseEvent e ) { button . setBackground ( Color . DARK_GRAY ) ; } } ) ; return button ; }
tr	KEY	public void setWeight ( double weight ) { this . weight = weight ; }
tr	IDF	public boolean isValidSerialization ( String preorder ) { index = 0 ; this . tokens = preorder . split ( " " ) ; if ( ! validate ( ) ) return false ; return index == tokens . length ; }
tr	IDF	public ResultSet consultaId ( Proyecto proyecto ) throws SQLException { if ( proyectoDAO . exists ( proyecto ) == true ) { return proyectoDAO . consultaId ( proyecto ) ; } else { throw new SQLException ( "No se puede imprimir el proyecto por que este no existe en la base de datos" ) ; } }
tr	IDF	static CommandLine gitUpdate ( String pathToGit , String folder ) { return new CommandLine ( pathToGit , "pull" , "origin" ) . workingDir ( folder ) ; }
tr	IDF	@ Override public void setTeam ( TEAM division ) { this . team = division ; }
tr	IDF	@ Override public void mousePressed ( MouseEvent evt ) { displayAbout ( ) ; }
tr	IDF	private void saveProp ( ) { ServerManager manager = ServerManager . getServerManager ( ) ; String text = smtpPortText . getText ( ) ; manager . savePropertyByKey ( "smtpPort" , text ) ; text = pop3PortText . getText ( ) ; manager . savePropertyByKey ( "pop3Port" , text ) ; text = localDomainText . getText ( ) ; manager . savePropertyByKey ( "localDomain" , text ) ; text = localHostNameText . getText ( ) ; manager . savePropertyByKey ( "localHostName" , text ) ; text = connectLostTimeText . getText ( ) ; manager . savePropertyByKey ( "connectLostTime" , text ) ; text = connectResponseTimeText . getText ( ) ; manager . savePropertyByKey ( "connectResponseTime" , text ) ; text = emailSizeText . getText ( ) ; manager . savePropertyByKey ( "emailSize" , text ) ; manager . saveProperty ( ) ; }
tr	IDF	public void write ( String fileName ) { ObjectOutputStream out = null ; try { FileOutputStream fos = new FileOutputStream ( fileName ) ; out = new ObjectOutputStream ( fos ) ; out . writeObject ( this ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }
tr	KEY	public BusinessProfile_InsidePeer withInfluence ( long influence ) { this . influence = influence ; return this ; }
tr	KEY	protected abstract void onSpeedChange ( int value ) ;
tr	KEY	public void alert ( ) { }
tr	IDF	public Dictionary ( Dictionary a ) { numEntries = a . numEntries ; map = new TObjectIntHashMap ( numEntries ) ; for ( TObjectIntIterator iter = a . map . iterator ( ) ; iter . hasNext ( ) ; ) { iter . advance ( ) ; map . put ( iter . key ( ) , iter . value ( ) ) ; } }
tr	IDF	@ Override public V put ( K key , V value ) { V existing = map . put ( key , value ) ; dirty = ! Objects . equals ( existing , value ) ; return existing ; }
tr	KEY	protected void interrupted ( ) { }
tr	IDF	public JSONArray put ( double value ) throws JSONException { double d = new double ( value ) ; JSONObject . testValidity ( d ) ; put ( d ) ; return this ; }
tr	KEY	public void run ( ) { new ResultWindow ( null , ( boolean ) null , null ) . setVisible ( true ) ; }
tr	KEY	public ConditionalNode ( ) { }
tr	IDF	public void update ( int index , Grup grup ) { grups . set ( index , grup ) ; fireTableRowsUpdated ( index , index ) ; }
tr	IDF	@ Override public String toString ( ) { return num + ";" + radical ; }
tr	IDF	public void mouseClicked ( MouseEvent evt ) { JList list = ( JList ) evt . getSource ( ) ; if ( evt . getClickCount ( ) == 1 ) { int index = list . locationToIndex ( evt . getPoint ( ) ) ; if ( index < userLijst . size ( ) && index >= 0 ) { User user = userLijst . get ( index ) ; userInfoPanel . setNaam ( user . getNaam ( ) ) ; userInfoPanel . setRol ( user . getRollen ( ) . toString ( ) ) ; } } }
tr	IDF	public static double log1p ( final double x ) { double xpa = 1.0 + x ; double xpb = - ( xpa - 1.0 - x ) ; if ( x == - 1 ) { return x / 0.0 ; } if ( x > 0 && 1 / x == 0 ) { return x ; } if ( x > 1e-6 || x < - 1e-6 ) { double hiPrec [ ] = new double [ 2 ] ; final double lores = log ( xpa , hiPrec ) ; if ( double . isInfinite ( lores ) ) { return lores ; } double fx1 = xpb / xpa ; double epsilon = 0.5 * fx1 + 1.0 ; epsilon = epsilon * fx1 ; return epsilon + hiPrec [ 1 ] + hiPrec [ 0 ] ; } double y = x * 0.333333333333333 - 0.5 ; y = y * x + 1.0 ; y = y * x ; return y ; }
tr	IDF	public MainMenu ( GameManager p ) { init ( p ) ; }
tr	IDF	Constructor_2 ( ) { a = b = 0 ; }
tr	KEY	public void setProposedTo ( int proposedTo ) { this . proposedTo = proposedTo ; }
tr	IDF	public void set ( final int index , final LineType type ) { lines . set ( asIndex ( index ) , type ) ; }
tr	KEY	public void setId_usuario ( int id_usuario ) { this . id_usuario = id_usuario ; }
tr	KEY	public String [ ] getColumnNames ( ) { return this . columnNames ; }
tr	IDF	public void setLayer ( String layer ) { this . layer = layer ; }
tr	IDF	public void setState ( String state ) { this . state = state ; }
tr	KEY	public PlayerLVL6 ( ) { super ( PlayerLVL6 . class . getResource ( "resources/squirtle.jpg" ) ) ; }
tr	IDF	public BlankAnswerPanel ( final AnswerLocationPanel topPanel ) { this . setTopPanel ( topPanel ) ; this . createOptionsPanel ( ) ; }
tr	KEY	public boolean isFaceUp ( ) { return faceUp ; }
tr	KEY	public void setGeom ( int _geom ) { this . _geom = _geom ; }
tr	KEY	public ViewGroupResponse createViewGroupResponse ( ) { return new ViewGroupResponse ( ) ; }
tr	KEY	public static boolean validRect ( Rectangle r ) { if ( r . x < 0 ) { return false ; } else if ( r . y < 0 ) { return false ; } else if ( r . width < 0 ) { return false ; } else if ( r . height < 0 ) { return false ; } return true ; }
tr	KEY	@ Override public int getLineLength ( ) { return 10 ; }
tr	IDF	@ Override public void remove ( K key ) { Node < K > previous = findPrevious ( key ) ; if ( previous == null ) { return ; } Node < K > actual = previous . next ; previous . next = actual . next ; if ( lru == actual ) { lru = previous ; } }
tr	IDF	Client ( int id , String name , String lastname , String address ) { this . id = id ; this . name = name ; this . lastname = lastname ; this . address = address ; }
tr	KEY	@ Override public long getNativeConsumer ( ) { throw new InternalError ( "Not using a native peer" ) ; }
tr	KEY	public int nbOpenSockets ( ) { throw new RuntimeException ( "Not yet implemented" ) ; }
tr	IDF	public FeatureDataItem ( FeatureVector fv , double score ) { this . fv = fv ; this . score = score ; }
tr	IDF	@ Deprecated boolean removeAll ( Collection < ? > c ) ;
tr	KEY	public double getRightY ( ) { return getRawAxis ( AXIS_RIGHT_Y ) ; }
tr	IDF	public SortedMap < Key , Val > headMap ( Key toKey ) { if ( tree == null || compare ( lastKey ( ) , toKey ) < 0 ) return this ; else if ( compare ( firstKey ( ) , toKey ) >= 0 ) return new FTreeMap < Key , Val > ( null , dflt , comp ) ; else return new FTreeMap < Key , Val > ( split ( tree , NEGATIVE_INFINITY , toKey ) , dflt , comp ) ; }
tr	KEY	public Context getContext ( ) { return this . _ctx ; }
tr	IDF	protected void updateMetaData ( ) throws SQLException { if ( this . columns != null ) return ; this . types = query . getTypes ( ) ; if ( this . types != null ) { this . columns = query . getColumns ( ) ; return ; } synchronized ( query ) { this . types = query . getTypes ( ) ; if ( this . types != null ) { this . columns = query . getColumns ( ) ; } else { ResultSetMetaData meta = rs . getMetaData ( ) ; int columnCount = meta . getColumnCount ( ) ; String [ ] columnNames = new String [ columnCount ] ; int [ ] columnTypes = new int [ columnCount ] ; for ( int i = 0 ; i < columnCount ; i ++ ) { int index = i + 1 ; columnNames [ i ] = convertColumnName ( meta . getColumnName ( index ) ) ; columnTypes [ i ] = meta . getColumnType ( index ) ; } this . columns = MetaInfoMap . getOrPutColumns ( new ReadOnlyArray < String > ( columnNames ) ) ; this . types = MetaInfoMap . getOrPutTypes ( new ReadOnlyInts ( columnTypes ) ) ; query . setMetaData ( columns , types ) ; } } }
tr	KEY	public class getColumnClass ( int columnIndex ) { return types [ columnIndex ] ; }
tr	IDF	@ Override public SwitchStatus getValue ( ) { return status ; }
tr	KEY	public ViewerWindow ( ) { super ( true , 1280 , 1024 ) ; setWidth ( 1280 ) ; setHeight ( 1024 ) ; }
tr	IDF	@ Override public double desconto ( Orcamento orcamento ) { if ( existe ( "LAPIS" , orcamento ) && existe ( "CANETA" , orcamento ) ) { return orcamento . getValor ( ) * 0.05 ; } else { return proximoDesconto . desconto ( orcamento ) ; } }
tr	KEY	public boolean isOk ( ) { return ok ; }
tr	IDF	public void eatPlant ( Plant plant ) { if ( feeding == false ) { time = System . currentTimeMillis ( ) ; feeding = true ; color = Color . red ; } if ( System . currentTimeMillis ( ) < time + wait ) { this . speed = 0 ; if ( new Random ( ) . nextInt ( 100 ) < SEED_GATHERING_RATE ) { seeds += 1 ; plant . isEaten ( ) ; } } else { feeding = false ; color = Color . blue ; feeded = true ; } }
tr	KEY	protected abstract String idColumnName ( ) ;
tr	KEY	public boolean isReleased ( ) { return ( state == STATE_RELEASED ) ; }
tr	IDF	public static int countString ( String src , String find ) { int o = 0 ; int index = - 1 ; while ( ( index = src . indexOf ( find , index ) ) > - 1 ) { ++ index ; ++ o ; } if ( o != 0 ) { System . out . println ( "\u4E2A\u6570" + find + o + "-------" + src ) ; } return o ; }
tr	KEY	@ Override public void showDialog ( ) { this . setVisible ( true ) ; }
tr	KEY	public void start ( ) { this . started = true ; }
tr	IDF	@ Override public boolean deveUsarMaximaTaxacao ( Orcamento orcamento ) { return orcamento . getValor ( ) > 500 && temItemMaiorQue100Reais ( orcamento ) ; }
tr	KEY	public double getDefense ( ) { return defense ; }
tr	KEY	public int getRowCount ( ) { return data . length ; }
tr	IDF	@ Override public String toString ( ) { return "FileContent{value='" + shortened ( value , 100 ) + "'}" ; }
tr	KEY	public byte [ ] [ ] getMap ( ) ;
tr	IDF	public Move findBestMove ( int depth , DraughtsState ds ) throws AIStoppedException { int alpha = Integer . MIN_VALUE ; int beta = Integer . MAX_VALUE ; int tempScore = Integer . MIN_VALUE ; List < Move > moves = ds . getMoves ( ) ; Move tempMove = null ; for ( Move move : moves ) { ds . doMove ( move ) ; alpha = max ( alpha , miniMax ( new NodeLVL7 ( ds . clone ( ) ) , depth - 1 , alpha , beta , false ) ) ; ds . undoMove ( move ) ; if ( alpha > tempScore ) { tempMove = move ; tempScore = alpha ; } } this . lastScore = tempScore ; return tempMove ; }
tr	KEY	public final boolean removeAll ( Collection < ? > c ) { throw new UnsupportedOperationException ( ) ; }
tr	IDF	@ JsonProperty ( "label" ) public void setLabel ( String label ) { this . label = label ; }
tr	KEY	public static final int getPAL ( int colorIndex , int luminanceIndex ) { if ( colorIndex > 15 || luminanceIndex > 15 ) return 000000 ; return PAL [ colorIndex * 16 + luminanceIndex ] ; }
tr	KEY	public boolean useMergeHistory ( ) { return useMergeHistory ; }
tr	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { exitMenuItemActionPerformed ( evt ) ; }
tr	KEY	public abstract String getExtensionName ( ) ;
tr	KEY	public int getNro ( ) { return nro ; }
tr	KEY	public void initTrans ( ) throws Exception ;
tr	IDF	public void setId ( String id ) { this . id = id ; }
tr	IDF	private void generateObjects ( ) { models . Step [ ] steps = line . getSteps ( ) ; children = new Entity [ steps . length ] ; stepSideLength = ( double ) width / steps . length ; double currentX = x ; for ( int i = 0 ; i < steps . length ; i ++ ) { children [ i ] = new Step ( settings , steps [ i ] , currentHolds , i , ( int ) currentX , y , ( int ) stepSideLength , height ) ; currentX += stepSideLength ; } }
tr	KEY	public int getMaxusers ( ) { return maxusers ; }
tr	IDF	public ProductModel getProductById ( int id ) throws WebshopAppException { return productRepository . getProductById ( id ) ; }
tr	IDF	public void setUsername ( String value ) { this . username = value ; }
tr	KEY	public double getCurrentAxisX ( ) { return currentAxisX ; }
tr	KEY	public int getX ( ) { return xVal ; }
tr	KEY	public class getColumnClass ( int columnIndex ) { return types [ columnIndex ] ; }
tr	KEY	public DIPViolationTest ( ) { }
tr	KEY	public boolean isHover ( ) { return this . hover ; }
tr	KEY	public static int monthNumber ( String month ) { int monthnum = 0 ; switch ( month ) { case "Jan" : return 1 ; case "Feb" : return 2 ; case "Mar" : return 3 ; case "Apr" : return 4 ; case "May" : return 5 ; case "Jun" : return 6 ; case "Jul" : return 7 ; case "Aug" : return 8 ; case "Sep" : return 9 ; case "Oct" : return 10 ; case "Nov" : return 11 ; case "Dec" : return 12 ; default : return monthnum ; } }
tr	KEY	public synchronized int xgetD1RepeatDelay ( ) { return d1RD ; }
tr	KEY	public static int getExponent ( final float f ) { return ( ( float . floatToIntBits ( f ) >>> 23 ) & ff ) - 127 ; }
tr	KEY	public void windowClosing ( final WindowEvent e ) { }
tr	IDF	public void setNumberOfAppointments ( Integer numberOfAppointments ) { this . numberOfAppointments = numberOfAppointments ; }
tr	KEY	@ Override public boolean equals ( Object obj ) { if ( this == obj ) return true ; if ( obj == null ) return false ; if ( getClass ( ) != obj . getClass ( ) ) return false ; Location other = ( Location ) obj ; if ( place == null ) { if ( other . place != null ) return false ; } else if ( ! place . equals ( other . place ) ) return false ; if ( region == null ) { if ( other . region != null ) return false ; } else if ( ! region . equals ( other . region ) ) return false ; return true ; }
tr	IDF	AppletFrame ( String title , Applet applet , int width , int height ) { super ( title ) ; this . addWindowListener ( new WindowAdapter ( ) { @ Override public void windowClosing ( WindowEvent e ) { System . exit ( 0 ) ; } } ) ; applet . init ( ) ; applet . setSize ( width , height ) ; applet . start ( ) ; this . add ( applet ) ; this . pack ( ) ; this . setVisible ( true ) ; }
tr	KEY	public int GetVItesseMouvement ( ) { return vitesseMouvement ; }
tr	KEY	public void setEnabled ( boolean enabled ) { this . enabled = enabled ; }
tr	KEY	protected abstract void checkPD ( ) ;
tr	IDF	public void act ( ) { imageFrames ++ ; setImage ( roundImage ) ; if ( imageFrames == 100 ) { roundImage = new GreenfootImage ( "BattleItem//fight.png" ) ; } else if ( imageFrames == 150 ) { getWorld ( ) . removeObject ( this ) ; } }
tr	IDF	public int getPieceIdAt ( int row , int col ) { buildBoard ( ) ; return board [ row ] [ col ] ; }
tr	KEY	abstract void addCondiments ( ) ;
tr	KEY	public abstract double fire ( double input ) ;
tr	KEY	public int getGamesPlayed ( ) { return gamesPlayed ; }
tr	IDF	@ Override public Component getTreeCellRendererComponent ( JTree tree , Object value , boolean selected , boolean expanded , boolean leaf , int row , boolean hasFocus ) { return null ; }
tr	IDF	public void diffuseUpdateObject ( String objectId , Vector3d delatTrans , Vector3d delatRot ) ;
tr	KEY	public void setSpecularPower ( double specularPower ) { this . specularPower = specularPower ; }
tr	IDF	public double lengthSq ( ) { return x * x + y * y ; }
tr	KEY	public List getItems ( ) { return this . items ; }
tr	KEY	public String [ ] getColumnNames ( ) { return this . columnNames ; }
tr	KEY	public void keyPressed ( final KeyEvent event ) { }
tr	KEY	public void reload ( int weapon ) ;
tr	KEY	public int getId ( ) { return id ; }
tr	KEY	public final Object clone ( ) { return new Path2D . double ( this ) ; }
tr	KEY	public VillageTileAction ( ) { }
tr	IDF	public static void findAnyComboMatchSum ( List < Integer > arr , int sum , int start ) { if ( sum < 2 ) return ; for ( int i = start ; i < arr . size ( ) ; i ++ ) { int diff = sum - arr . get ( i ) ; log ( "look at " + arr . get ( i ) + " with sum " + sum ) ; if ( diff > 0 && arr . contains ( diff ) ) { log ( "found diff: " + diff + " with " + arr . get ( i ) ) ; } findAnyComboMatchSum ( arr , diff , i + i ) ; } }
tr	IDF	@ Override public void render ( VGraphics g ) { g . setTexture ( icon ) ; g . setColor ( new Color ( 255 , 255 , 255 , 255 ) ) ; g . drawRect ( x , y , w , h ) ; }
tr	IDF	public ParsingException ( Exception e ) { super ( e ) ; }
tr	KEY	public synchronized void xsetBrepeatable ( boolean flag ) { isBrepeatable = flag ; }
tr	IDF	public static int addDef ( int piece , boolean isPieceWhite ) { if ( isPieceWhite && piece == DraughtsState . WHITEPIECE || piece == DraughtsState . WHITEKING ) { return 5 ; } if ( ! isPieceWhite && piece == DraughtsState . BLACKPIECE || piece == DraughtsState . BLACKKING ) { return 5 ; } return 0 ; }
tr	KEY	public GameDisplayPane ( ) { super ( true ) ; super . setPreferredSize ( new Dimension ( BOARD_WIDTH , BOARD_HEIGHT ) ) ; }
tr	IDF	public static int getShiChenByHour ( int hour ) { if ( hour == 23 || hour == 24 || hour == 0 ) return 0 ; for ( int i = 1 ; i < startHour . length ; i ++ ) { if ( hour >= startHour [ i ] && hour < endHour [ i ] ) { return i ; } } return - 1 ; }
tr	IDF	private void generatePDFjButtonActionPerformed ( java . awt . event . ActionEvent evt ) { try { String FILE = "D:\\" + titrePDFjTextField . getText ( ) + ".pdf" ; Document document = new Document ( ) ; PdfWriter . getInstance ( document , new FileOutputStream ( FILE ) ) ; System . out . println ( "Ouverture du document." ) ; document . open ( ) ; System . out . println ( "Ajout des m\u00E9ta donn\u00E8es du document." ) ; addMetaData ( document ) ; System . out . println ( "Ajout du titre du document." ) ; addTitlePage ( document ) ; System . out . println ( "Ajout du contenu du document." ) ; addContent ( document ) ; System . out . println ( "Fermeture du document." ) ; document . close ( ) ; JOptionPane . showMessageDialog ( this , "G\u00E9n\u00E9ration du PDF effectu\u00E9 avec succ\u00E8s : " + FILE ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }
tr	IDF	public void keyTyped ( KeyEvent e ) { if ( key_pret ) { animation_en_cours = false ; tirerSurEnnemi ( posX , posY , fenetre . getModele ( ) . getJoueurCourant ( ) . getAdversairesEnVie ( ) [ view . getIndiceAdversaire ( ) ] , true ) ; view . getGrilleEnnemi ( ) . addController ( this ) ; key_pret = false ; } }
tr	IDF	private int miniMax ( NodeLVL5 node , int depth , int alpha , int beta , boolean player ) throws AIStoppedException { DraughtsState ds = node . getState ( ) ; if ( stopped ) { stopped = false ; throw new AIStoppedException ( ) ; } if ( depth == 0 || ds . isEndState ( ) ) { if ( white ) { return node . getValue ( ) ; } else { return - node . getValue ( ) ; } } if ( player ) { for ( Move move : ds . getMoves ( ) ) { ds . doMove ( move ) ; alpha = max ( alpha , miniMax ( new NodeLVL5 ( ds . clone ( ) ) , depth - 1 , alpha , beta , false ) ) ; if ( alpha >= beta ) { return beta ; } ds . undoMove ( move ) ; } return alpha ; } else { for ( Move move : ds . getMoves ( ) ) { ds . doMove ( move ) ; beta = min ( beta , miniMax ( new NodeLVL5 ( ds . clone ( ) ) , depth - 1 , alpha , beta , true ) ) ; if ( alpha >= beta ) { return alpha ; } ds . undoMove ( move ) ; } return beta ; } }
tr	KEY	default boolean isQuery ( ) { return false ; }
tr	IDF	public static void main ( String aa [ ] ) { Thread_3 ob = new Thread_3 ( ) ; Thread_3 ob1 = new Thread_3 ( ) ; Thread_3 ob2 = new Thread_3 ( ) ; ob . setDaemon ( true ) ; ob . setName ( "number one" ) ; ob1 . setName ( "number two" ) ; ob2 . setName ( "number three" ) ; ob . start ( ) ; ob1 . start ( ) ; ob2 . start ( ) ; }
tr	IDF	@ Test public void testMove ( ) throws Exception { Entity entity = new Entity ( "sprites/test.png" , 42 , 23 , 100 , 200 ) ; float x = entity . getX ( ) ; float y = entity . getY ( ) ; float dx = - 1.0f ; float dy = 2.0f ; entity . move ( - 1.0f , 2.0f ) ; assert . assertEquals ( "Entity::move X not correct" , x + dx , entity . getX ( ) ) ; assert . assertEquals ( "Entity::move Y not correct" , y + dy , entity . getY ( ) ) ; }
tr	KEY	@ Override public boolean clearAllComponents ( ) { return false ; }
tr	IDF	public Database ( String pfile ) { }
tr	IDF	public static ArrayList < tweetModel > getAllTweets ( String tablename ) { ArrayList < tweetModel > results = new ArrayList < tweetModel > ( ) ; tweetModel t ; try { Connection c = DBFactory . getConnection ( ) ; PreparedStatement ps = c . prepareStatement ( "SELECT * FROM `" + tablename + "`" ) ; ResultSet rs = ps . executeQuery ( ) ; while ( rs . next ( ) ) { t = new tweetModel ( ) ; t . setUsername ( rs . getString ( "username" ) ) ; t . setMessage ( rs . getString ( "message" ) ) ; t . setDate ( rs . getString ( "date" ) ) ; results . add ( t ) ; } rs . close ( ) ; ps . close ( ) ; c . close ( ) ; } catch ( ClassNotFoundException ex ) { Logger . getLogger ( tweetHandler . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; } catch ( SQLException ex ) { Logger . getLogger ( tweetHandler . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; } return results ; }
tr	KEY	public abstract void copyParamaters ( int [ ] paramaters ) ;
tr	KEY	@ Override public double det ( ) { throw new RuntimeException ( "Not implemented yet!" ) ; }
tr	IDF	public static void writeFile ( String data , String targetFilePath , String encoding ) { OutputStreamWriter osw = null ; BufferedWriter output = null ; FileOutputStream fos = null ; try { File file = new File ( targetFilePath ) ; if ( file . exists ( ) ) { System . out . println ( "Utils.writeFile--\u6587\u4EF6\u5B58\u5728\uFF0C\u8FFD\u52A0\u5185\u5BB9" ) ; fos = new FileOutputStream ( file , true ) ; osw = new OutputStreamWriter ( fos , encoding ) ; output = new BufferedWriter ( osw ) ; output . write ( data + "\r\n" ) ; } else { System . out . println ( "Utils.writeFile--\u6587\u4EF6\u4E0D\u5B58\u5728--\u5DF2\u521B\u5EFA" ) ; File parentOfFile = file . getParentFile ( ) ; if ( ! parentOfFile . exists ( ) ) { parentOfFile . mkdirs ( ) ; System . out . println ( "Utils--writeFile--\u5B58\u50A8\u6587\u4EF6\u7236\u8DEF\u5F84-->" + parentOfFile . getPath ( ) ) ; } file . createNewFile ( ) ; fos = new FileOutputStream ( file , true ) ; osw = new OutputStreamWriter ( fos , encoding ) ; output = new BufferedWriter ( osw ) ; output . write ( data + "\r\n" ) ; } } catch ( Exception e ) { e . printStackTrace ( ) ; } finally { try { if ( output != null ) { output . close ( ) ; output = null ; } if ( osw != null ) { osw . close ( ) ; osw = null ; } if ( fos != null ) { fos . close ( ) ; fos = null ; } } catch ( Exception e ) { e . printStackTrace ( ) ; } } }
tr	KEY	public void setRowCount ( int rowCount ) { this . rowCount = rowCount ; }
tr	IDF	@ Test public final void testCountry_GetByAlpha2 ( ) { assertEquals ( ISO . Country . GB , ISO . Country . getByAlpha2 ( "GB" ) ) ; assertEquals ( null , ISO . Country . getByAlpha2 ( "ABC" ) ) ; assertEquals ( null , ISO . Country . getByAlpha2 ( "DF" ) ) ; assertEquals ( null , ISO . Country . getByAlpha2 ( null ) ) ; }
tr	IDF	public LightOffCommand ( Light light ) { this . light = light ; }
tr	IDF	public int set ( final FillInTheBlanks fillInTheBlanks ) { final DatabaseAbstractQuestion aq = new DatabaseAbstractQuestion ( _databaseName ) ; final int questionNumber = aq . set ( fillInTheBlanks ) ; final Database connect = new Database ( _databaseName ) ; final String question = fillInTheBlanks . getAnswer ( ) . replaceAll ( "\\'" , "\\\\'" ) ; String blanks = "" ; for ( final String blank : fillInTheBlanks . getBlanks ( ) ) { blanks += blank . replaceAll ( "\\'" , "\\\\'" ) + ";" ; } final Hashtable < enum < ? > , Object > vals = new Hashtable < enum < ? > , Object > ( ) ; vals . put ( DatabaseAbstractQuestion . Column . QUESTION_NUMBER , "" + questionNumber ) ; vals . put ( Column . QUESTION , question ) ; vals . put ( Column . BLANKS , blanks ) ; connect . insert ( TABLE_NAME , vals ) ; connect . disconnect ( ) ; return questionNumber ; }
tr	KEY	@ Override public int getY ( int y , int height ) { return y ; }
tr	KEY	public void loadImagesIfNotLoaded ( ) ;
tr	IDF	public TestValidate ( String arg0 ) { super ( arg0 ) ; System . out . println ( "\nStarting test Validate" ) ; }
tr	KEY	public long getId ( ) ;
tr	IDF	@ Override public LinkedList < RequirementLink > getInLinks ( ) { return inLinks ; }
tr	KEY	@ Override public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( ) != obj . getClass ( ) ) { return false ; } final BedAndBreakfast other = ( BedAndBreakfast ) obj ; if ( this . selfServing != other . selfServing ) { return false ; } return true ; }
tr	KEY	public void setT1_slider_position ( int t1_slider_position ) { this . t1_slider_position = t1_slider_position ; }
tr	KEY	@ Override public int hashCode ( ) { return abonentId ; }
tr	IDF	public void init ( ) { TileMapLoader loader = new TMXLoader ( ) ; tm = loader . load ( "Pangea.tmx" ) ; w = new World ( tm ) ; entities = new HashMap < > ( ) ; gameSem = new Semaphore ( 1 ) ; inputMan = new InputController ( this ) ; players = new ArrayList < > ( ) ; physics = new Physics ( this ) ; soundMan = new SoundManager ( this ) ; players . add ( new Player ( "Hannes" , 3 ) ) ; players . add ( new Player ( "Horst" , 1 ) ) ; nextId = 1 ; }
tr	KEY	public Settings ( ) { }
tr	KEY	public void setMaxRows ( int maxRows ) { this . maxRows = maxRows ; }
tr	KEY	protected SerialCom getSerialCom ( ) { return this . serialCom ; }
tr	KEY	public void setNeuronError ( double neuronError ) { this . neuronError = neuronError ; }
tr	IDF	public void process ( String name ) throws SQLException { DBProcessOrigin dbo = new DBProcessOrigin ( ) ; dbo . setOverwrite ( overwrite ) ; dbo . process ( name ) ; long start = System . currentTimeMillis ( ) ; System . out . println ( ">> Working on " + name ) ; stmt . execute ( "SET work_mem='4GB'" ) ; System . out . println ( "\tFinding origin points\t\t" + df . format ( new Date ( System . currentTimeMillis ( ) ) ) ) ; stmt . execute ( "CREATE VIEW " + name + "_o AS SELECT * FROM " + name + " WHERE duration=0;" ) ; System . out . println ( "\tFiltering origin points\t\t" + df . format ( new Date ( System . currentTimeMillis ( ) ) ) ) ; String sql = "CREATE VIEW " + name + "_" + tag + "_start AS SELECT t1.* t2.Network t2.MPA_NAME t2.ZONE t2.IUCN t2.Label t2.Area_km2 t2.Legend FROM " + name + " t1 INNER JOIN " + shapefile + " t2 ON ST_Intersects(t1.geom  t2.geom) WHERE t1.duration=0" ; stmt . execute ( sql ) ; stmt . execute ( "CREATE VIEW " + name + "_" + tag + "_dst AS SELECT t1.* t2.Network t2.MPA_NAME t2.ZONE t2.IUCN t2.Label t2.cmr_status t2.Area_km2 t2.Legend FROM " + name + " t1 INNER JOIN " + dest_layer + " t2 ON ST_Intersects(t1.geom t2.geom)" ) ; stmt . execute ( "CREATE VIEW " + name + "_" + tag + "_path AS SELECT t1.* t2.Network t2.MPA_NAME t2.ZONE t2.IUCN t2.Label t2.Area_km2 t2.Legend FROM " + name + " t1 INNER JOIN " + name + "_" + tag + "_start t2 ON (t1.relid=t2.relid)" ) ; stmt . execute ( "CREATE VIEW " + name + "_" + tag + "_rev AS SELECT t1.* t2.Network t2.MPA_NAME t2.ZONE t2.IUCN t2.Label t2.cmr_status t2.Area_km2 t2.Legend FROM " + name + " t1 INNER JOIN (SELECT relid MAX(duration) duration MAX(network) network  MAX(mpa_name) mpa_name  MAX(\"zone\") \"zone\"  MAX(iucn) iucn  MAX(\"label\") \"label\"  MAX(cmr_status) cmr_status  MAX(area_km2) area_km2  MAX(legend) legend FROM " + name + "_" + tag + "_dst GROUP BY relid) t2 ON t1.relid=t2.relid WHERE t1.duration<t2.duration" ) ; long stop = System . currentTimeMillis ( ) ; System . out . println ( ">> " + name + " complete.  Elapsed time: " + TimeConvert . millisToString ( stop - start ) ) ; }
tr	KEY	public UpdateResult ( ) { this ( new ArrayList < > ( ) , new ArrayList < > ( ) ) ; }
tr	KEY	public static void main ( String [ ] argv ) { new AppletFrame ( "svm_toy" , new svm_toy ( ) , 500 , 500 + 50 ) ; }
tr	IDF	@ Override public void render ( Graphics2D g ) { int o = 192 ; int h = 18 ; g . setColor ( Color . white ) ; g . drawString ( "Toggle debug mode: d" , 16 , o ) ; g . drawString ( "Add player A units (1/10): Q/W" , 16 , o + h ) ; g . drawString ( "Add player B units (1/10): A/S" , 16 , o + 2 * h ) ; g . drawString ( "Add Chuck Norris: X" , 16 , o + 3 * h ) ; g . drawString ( "Zoom: +  -" , 16 , o + 4 * h ) ; g . drawString ( "Units: " + gm . getGameEntityCount ( ) , 16 , o + 5 * h ) ; g . drawString ( String . format ( "FPS (logic/render): %.2f/%.2f" , gm . getLogicFPS ( ) , gm . getRenderFPS ( ) ) , 16 , o + 6 * h ) ; }
tr	IDF	private void txtClaveActionPerformed ( java . awt . event . ActionEvent evt ) { }
tr	KEY	public void setT1_array_num ( int t1_array_num ) { this . t1_array_num = t1_array_num ; }
tr	KEY	private Resources ( ) { danceResourceProvider = new DanceResourceProvider ( this ) ; pumpResourceProvider = new PumpResourceProvider ( this ) ; }
tr	IDF	public NotExistsException ( final String message , final Throwable caughtException ) { super ( message , caughtException ) ; }
tr	KEY	@ Override public int getNumberOfEntries ( ) { return n ; }
tr	KEY	public void decrementThreeSpaceTiles ( ) { threeSpaceTiles -- ; }
tr	KEY	public static ScriptHelper getInstance ( ) { if ( instance == null ) { instance = new ScriptHelper ( ) ; } return instance ; }
tr	KEY	public boolean getLimitedVocationOrEmployment ( ) { return limitedVocationOrEmployment ; }
tr	KEY	public static ControlUpdater getInstance ( ) { if ( instance == null ) { instance = new ControlUpdater ( ) ; } return instance ; }
tr	IDF	public void setLastRunFC2 ( ) { fc2result = CAppConsts . StatusDone ; fc2rundt = new Date ( ) ; }
tr	KEY	public boolean isUseSectionNumbers ( ) { return useSectionNumbers ; }
tr	IDF	@ Override public void exitSe ( @ NotNull EnquantoParser . SeContext ctx ) { Bool condicao = ( Bool ) getValue ( ctx . bool ( ) ) ; Comando entao = ( Comando ) getValue ( ctx . comando ( 0 ) ) ; Comando senao = ( Comando ) getValue ( ctx . comando ( 1 ) ) ; setValue ( ctx , new Se ( condicao , entao , senao ) ) ; }
tr	IDF	private IDiscoveryManager createDiscoveryManager ( ) { long nodeId = - 1 ; String password = null ; File credentialsFile = new File ( "resources/credentials.properties" ) ; if ( credentialsFile . exists ( ) ) { Properties credentials = new Properties ( ) ; try { credentials . load ( new FileInputStream ( credentialsFile ) ) ; nodeId = long . parseLong ( credentials . getProperty ( "credentials.nodeId" ) ) ; password = credentials . getProperty ( "credentials.password" ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return new DiscoveryManager ( nodeId , password , this . bluetoothInterface ) ; }
tr	KEY	public static double normalize ( double v , double min , double max ) { double out = ( v - min ) / ( max - min ) ; if ( out > 1 ) return 1 ; else if ( out < 0 ) return 0 ; else return out ; }
tr	KEY	public boolean ehPromocao ( ) { return ehPromocao ; }
tr	KEY	public static void main ( String [ ] args ) { final int n = 4 ; final int [ ] v = new int [ n ] ; visit ( v , n , 0 ) ; }
tr	KEY	public void setAmount ( double amount ) { this . amount = amount ; }
tr	IDF	public int getWidth ( ) { Graphics context = this . getContext ( ) ; return context . getFontMetrics ( this . getFont ( ) ) . stringWidth ( this . text ) ; }
tr	KEY	public boolean userMustBeRegister ( ) { return true ; }
tr	IDF	@ Override public String toString ( ) { String retorno = " " ; if ( parametros . getHead ( ) == null ) { retorno += "() " ; } else { retorno += "(" + parametros . toString ( ) + ") " ; } return retorno + comando . toString ( ) ; }
tr	IDF	@ Override public < R > IReducingFunction < R , B > apply ( final IReducingFunction < R , ? super A > rf ) { return new AReducingFunctionOn < R , A , B > ( rf ) { @ Override public R apply ( R result , B input , AtomicBoolean reduced ) { return rf . apply ( result , f . apply ( input ) , reduced ) ; } } ; }
tr	KEY	public double getSpecularPower ( ) { return specularPower ; }
tr	IDF	public abstract Object visitCallTree ( AST t ) ;
tr	IDF	public void setThumbnail ( Thumbnail value ) { this . thumbnail = value ; }
tr	KEY	public boolean get ( ) { return ! ( super . get ( ) && reverse ) ; }
tr	KEY	public int length ( ) { return mnstructions . size ( ) ; }
tr	IDF	@ Override public void actionPerformed ( ActionEvent e ) { UISupport . showMessage ( "Copy" ) ; }
tr	KEY	@ Override public void notifyCurrentDifficultyChanged ( ) { }
tr	IDF	public static String encrypt ( Key akey , String astr ) { try { Cipher cipher = Cipher . getInstance ( "AES" ) ; cipher . init ( Cipher . ENCRYPT_MODE , akey ) ; byte [ ] cleartext = astr . getBytes ( ) ; byte [ ] ciphertext = cipher . doFinal ( cleartext ) ; return CHexString . toHexString ( ciphertext ) ; } catch ( Exception e ) { System . err . println ( "CAesEncrypt.encrypt: " + e ) ; return null ; } }
tr	KEY	public long getCount ( ) { return count ; }
tr	IDF	@ Override protected TaskAction getListenAction ( ) { return TaskAction . QUIT ; }
tr	KEY	@ Override public void mutateParameters ( ) { }
tr	KEY	public int top ( ) { return stack . peek ( ) ; }
tr	KEY	public int size ( ) { return size ; }
tr	KEY	public double getX ( ) { return x ; }
tr	IDF	@ NotNull public String localPath ( ) { return localPath ; }
tr	IDF	private void drawBottomLineForElmement ( int elm ) { int x = elm % puzzleSize ; int y = elm / puzzleSize ; int boxX = cellSize + x * cellSize ; int startX = boxX - cellSize ; int boxY = cellSize + y * cellSize ; output . drawLine ( startX , boxY , boxX , boxY ) ; }
tr	KEY	public void setHaySesion ( boolean haySesion ) { this . haySesion = haySesion ; }
tr	KEY	protected void onPatternChange ( ) { resetWorld ( ) ; }
tr	IDF	private void unlink ( E e ) { e . setNext ( null ) ; e . setPrevios ( null ) ; }
tr	KEY	@ transient public int getNumberOfAppointments ( ) { return getAppointments ( ) . size ( ) ; }
tr	KEY	public void setY ( int y ) { this . y = y ; }
tr	IDF	@ Override public Matrix getMatrix ( ) { return local ; }
tr	IDF	@ After public void tearDown ( ) throws Exception { uDAO . closeConnection ( ) ; }
tr	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButton9ActionPerformed ( evt ) ; }
tr	IDF	@ Override public void handle ( ActionEvent e ) { screenController . setScreen ( "BORROW_SCREEN" ) ; }
tr	KEY	public void box ( ) { }
tr	KEY	public List < long > getIds ( ) { if ( ids == null ) { ids = new ArrayList < long > ( ) ; } return this . ids ; }
tr	IDF	public Date formart2Date ( String dateStr ) throws ParseException { SimpleDateFormat sdf = new SimpleDateFormat ( "yyyy-MM-dd hh:mm:ss" ) ; Date date = sdf . parse ( dateStr ) ; return date ; }
tr	IDF	public boolean ajouterPersonnage ( String nom , String race , final int pointForce , final int vitesse , final String inclinaison , final String arme , final String armure ) { return personnages . add ( new Personnage ( nom , race , pointForce , vitesse , inclinaison , arme , armure ) { @ Override public String toBase ( ) { return nom + "\t" + race + "\t" + pointForce + "\t" + vitesse + "\t" + vie + "\t" + inclinaison + "\t" + arme + "\t" + armure ; } @ Override public Component setImage ( ) { return null ; } @ Override public void definirAttaque ( ) { } @ Override public void definirDefense ( ) { } @ Override public JLabel getLabel ( ) { return null ; } } ) ; }
tr	KEY	public String getTableName ( ) { return "socialnetwork.invite" ; }
tr	IDF	private void savedVrmlLoadedActionPerformed ( ) { JFileChooser jfc ; jfc = new JFileChooser ( ) ; File f = new File ( System . getProperty ( "user.dir" ) ) ; jfc . setCurrentDirectory ( f ) ; jfc . setFileSelectionMode ( JFileChooser . FILES_ONLY ) ; javax . swing . filechooser . FileFilter filterVrml = new FileTypeFilter ( ".wrl" , "vrml files" ) ; jfc . setFileFilter ( filterVrml ) ; jfc . showOpenDialog ( this ) ; File selFile = jfc . getSelectedFile ( ) ; VrmlLoader loader = new VrmlLoader ( ) ; try { Scene scenevrml = loader . load ( selFile . getAbsolutePath ( ) ) ; Transform3D translation = new Transform3D ( ) ; translation . setTranslation ( new Vector3d ( - 1 , 1 , - 3 ) ) ; TransformGroup objTrans = new TransformGroup ( translation ) ; objTrans . setCapability ( TransformGroup . ALLOW_TRANSFORM_WRITE ) ; objTrans . setCapability ( TransformGroup . ALLOW_TRANSFORM_READ ) ; objTrans . setCapability ( TransformGroup . ENABLE_PICK_REPORTING ) ; objTrans . addChild ( scenevrml . getSceneGroup ( ) ) ; BranchGroup newbranch = new BranchGroup ( ) ; newbranch . addChild ( objTrans ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }
tr	KEY	public int getSpeed ( ) { return speed ; }
tr	IDF	public String toString ( ) { return "<" + first + " " + second + ">" ; }
tr	IDF	@ Before public void setUp ( ) throws Exception { out = new PrintStream ( "testing.txt" ) ; System . setOut ( out ) ; }
tr	KEY	public void setIdtransporte ( int idtransporte ) { this . idtransporte = idtransporte ; }
tr	IDF	public Proposal ( MapLocation toMapLoc , Direction fromDirection , int fromDistance ) { loc = toMapLoc ; dir = fromDirection ; dist = fromDistance ; }
tr	IDF	private void startBtnMouseReleased ( java . awt . event . MouseEvent evt ) { String player2NameString = player2Name . getText ( ) ; if ( ! ( player2NameString . isEmpty ( ) ) ) { MainApplication . ticTacToePlay . setPlayerTwo ( player2NameString ) ; MainBoard mainBoard = new MainBoard ( ) ; JFrame mainFrame = TicTacToeUIApp . getApplication ( ) . getMainFrame ( ) ; mainBoard . setLocationRelativeTo ( mainFrame ) ; this . dispose ( ) ; TicTacToeUIApp . getApplication ( ) . show ( mainBoard ) ; mainBoard . setResizable ( false ) ; mainBoard . setSize ( 815 , 482 ) ; } }
tr	KEY	public void setShippingCost ( double shippingCost ) { this . shippingCost = shippingCost ; }
tr	KEY	private ImagePriority ( ) { }
tr	IDF	public FuncOneEditor ( String title , String prefix , String [ ] formula , FuncOne fOne ) { this . setTitle ( title ) ; this . title = title ; this . setModal ( true ) ; addHelpMenu ( ) ; this . formula = formula ; tools = new FormulaTools ( title + " equations" , prefix , formula , false , params , fOne . getPanel ( ) . getParams ( ) ) ; add ( tools ) ; add ( getCtlPanel ( ) , BorderLayout . NORTH ) ; this . setDefaultCloseOperation ( JDialog . HIDE_ON_CLOSE ) ; pack ( ) ; this . setLocationRelativeTo ( null ) ; }
tr	KEY	public void updateFrame ( ) { this . generate ( ) ; }
tr	IDF	@ Override boolean offerStop ( ) { if ( getPoints ( ) >= 17 ) { setStop ( true ) ; System . out . println ( "AI stopped" ) ; } else System . out . println ( "AI refused to stop" ) ; return isStop ( ) ; }
tr	KEY	@ Override public boolean removeMe ( ) { return readyToRemove ; }
tr	IDF	public abstract Object visitScientificNTree ( AST t ) ;
tr	IDF	public void setDocuments ( List < Document > documents ) { this . documents = documents ; }
tr	KEY	public void shutdown ( ) { super . shutdown ( ) ; }
tr	IDF	@ Override public boolean verify ( String hostname , SSLSession session ) { logger . debug ( "Verifying hosts: " + hostname ) ; logger . debug ( "Session hosts:   " + session . getPeerHost ( ) ) ; String host = session . getPeerHost ( ) ; return hostname . equals ( host ) ; }
tr	KEY	public double tR ( ) { return ( double ) getTotalRightTime ( ) / ( double ) getTotalTime ( ) ; }
tr	IDF	public FHashMap < Key , Val > with ( Key key , Val value ) { Object t = with ( tree , key , hashCode ( key ) , value ) ; if ( t == tree ) return this ; else return new FHashMap < Key , Val > ( t , dflt ) ; }
tr	KEY	private QueryFactory ( ) { }
tr	IDF	public ActorModel addActor ( ActorModel actor ) throws WebshopAppException ;
tr	IDF	public void shouldSelectWhereTwoColumnEqualsAnd ( ) { Relation all = parser . parse ( "select * from table_1 where (baz = 'testing' and bar = 17);" ) . executeQuery ( ) ; Object [ ] [ ] expectedTable = new Object [ ] [ ] { { 15.46 , 17 , "testing" } , } ; assertRelationsEqual ( all , toRelation ( colDefs , expectedTable ) ) ; }
tr	KEY	public boolean isCellEditable ( int rowIndex , int columnIndex ) { return canEdit [ columnIndex ] ; }
tr	KEY	@ Override public void run ( ) { while ( true ) { try { t . sleep ( 30 ) ; } catch ( InterruptedException e ) { if ( ventana != null ) { ventana . dispose ( ) ; } break ; } } }
tr	IDF	public Rectangle getBounds ( Point p ) ;
tr	IDF	@ Override public String print ( List < Leaf > children ) { String rhs = children . get ( 1 ) . toString ( ) ; return "(" + rhs + " != 0 ? " + children . get ( 0 ) . toString ( ) + " / " + rhs + " : 1)" ; }
tr	KEY	public double getSalPen_Proveedor ( ) { return SalPen_Proveedor ; }
tr	KEY	private void initAnimations ( ) throws SlickException { Image [ ] arrayAnimation = { new Image ( "assets/game/items/objective/1.png" ) , new Image ( "assets/game/items/objective/2.png" ) , new Image ( "assets/game/items/objective/3.png" ) , new Image ( "assets/game/items/objective/4.png" ) , new Image ( "assets/game/items/objective/5.png" ) , new Image ( "assets/game/items/objective/6.png" ) , new Image ( "assets/game/items/objective/7.png" ) , new Image ( "assets/game/items/objective/8.png" ) } ; animation = new Animation ( arrayAnimation , new int [ ] { 100 , 100 , 100 , 100 , 100 , 100 , 100 , 100 } , false ) ; }
tr	KEY	@ Override public GameCharacterObject hide ( ) { visible = false ; return this ; }
tr	KEY	int getColNum ( ) ;
tr	IDF	@ Override public void run ( ) { positionTournamentGroups ( start , end ) ; }
tr	IDF	private void initPannels ( ) { GroupLayout layout = new GroupLayout ( getContentPane ( ) ) ; getContentPane ( ) . setLayout ( layout ) ; ParallelGroup horizontalParallelGroup = layout . createParallelGroup ( Alignment . LEADING ) ; SequentialGroup horizontalSequentialGroup = layout . createSequentialGroup ( ) . addGap ( gapMinimumSize , gapPreferedSize , gapMaximumSize ) ; ParallelGroup horizontalParallelGroup2 = layout . createParallelGroup ( Alignment . LEADING ) ; SequentialGroup horizontalSequentialGroup2 = layout . createSequentialGroup ( ) ; horizontalSequentialGroup2 . addComponent ( controller . getCurrentMonthPanelController ( ) . getView ( ) , DEFAULT_SIZE , DEFAULT_SIZE , short . MAX_VALUE ) ; horizontalSequentialGroup2 . addGap ( gapMinimumSize , gapPreferedSize , gapMaximumSize ) ; horizontalSequentialGroup2 . addComponent ( controller . getCurrentMonthPanelController ( ) . getDayNamePanelController ( ) . getView ( ) , DEFAULT_SIZE , DEFAULT_SIZE , short . MAX_VALUE ) ; horizontalParallelGroup2 . addGroup ( horizontalSequentialGroup2 ) ; horizontalSequentialGroup2 = layout . createSequentialGroup ( ) ; horizontalSequentialGroup2 . addComponent ( controller . getCurrentMonthPanelController ( ) . getNotebookWeeksNumberPanelController ( ) . getView ( ) , DEFAULT_SIZE , DEFAULT_SIZE , short . MAX_VALUE ) ; horizontalSequentialGroup2 . addGap ( gapMinimumSize , gapPreferedSize , gapMaximumSize ) ; horizontalSequentialGroup2 . addComponent ( controller . getCurrentMonthPanelController ( ) . getDaysPanelController ( ) . getView ( ) , DEFAULT_SIZE , DEFAULT_SIZE , short . MAX_VALUE ) ; horizontalParallelGroup2 . addGroup ( horizontalSequentialGroup2 ) ; horizontalSequentialGroup . addGroup ( horizontalParallelGroup2 ) ; horizontalSequentialGroup . addGap ( gapMinimumSize , gapPreferedSize , gapMaximumSize ) ; horizontalParallelGroup . addGroup ( horizontalSequentialGroup ) ; layout . setHorizontalGroup ( horizontalParallelGroup ) ; ParallelGroup verticalParallelGroup = layout . createParallelGroup ( Alignment . LEADING ) ; SequentialGroup verticalSequentialGroup = layout . createSequentialGroup ( ) . addGap ( gapMinimumSize , gapPreferedSize , gapMaximumSize ) ; ParallelGroup verticalParallelGroup2 = layout . createParallelGroup ( Alignment . LEADING ) ; verticalParallelGroup2 . addComponent ( controller . getCurrentMonthPanelController ( ) . getDayNamePanelController ( ) . getView ( ) ) ; verticalParallelGroup2 . addComponent ( controller . getCurrentMonthPanelController ( ) . getView ( ) ) ; verticalSequentialGroup . addGroup ( verticalParallelGroup2 ) ; verticalSequentialGroup . addGap ( gapMinimumSize , gapPreferedSize , gapMaximumSize ) ; verticalParallelGroup2 = layout . createParallelGroup ( Alignment . LEADING ) ; verticalParallelGroup2 . addComponent ( controller . getCurrentMonthPanelController ( ) . getNotebookWeeksNumberPanelController ( ) . getView ( ) ) ; verticalParallelGroup2 . addComponent ( controller . getCurrentMonthPanelController ( ) . getDaysPanelController ( ) . getView ( ) ) ; verticalSequentialGroup . addGroup ( verticalParallelGroup2 ) ; verticalSequentialGroup . addGap ( gapMinimumSize , gapPreferedSize , gapMaximumSize ) ; verticalParallelGroup . addGroup ( verticalSequentialGroup ) ; layout . setVerticalGroup ( verticalParallelGroup ) ; }
tr	IDF	public EnterGame ( CharacterHandle handle ) { this . handle = handle ; }
tr	KEY	public int getStatisticCountWrong ( ) ;
tr	KEY	abstract void needRoom ( boolean needMove , int newCoords ) ;
tr	IDF	public String [ ] getMiscTexts ( ) { String [ ] miscText = new String [ misc . size ( ) ] ; int itemCount = 0 ; if ( misc . size ( ) > 0 ) { Iterator < Entry < Character , Holdable >> iter = misc . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < Character , Holdable > entry = ( Map . Entry < Character , Holdable > ) iter . next ( ) ; miscText [ itemCount ] = entry . getKey ( ) + " - " + entry . getValue ( ) . properName ( ) ; itemCount ++ ; } } return miscText ; }
tr	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { jMenuItem7ActionPerformed ( evt ) ; }
tr	IDF	public void execute ( ) { symtab . beginScope ( ) ; t . accept ( this ) ; }
tr	KEY	public double optDouble ( int index , double defaultValue ) { try { return this . getDouble ( index ) ; } catch ( Exception e ) { return defaultValue ; } }
tr	IDF	public ProfilePk insert ( Profile dto ) throws ProfileDaoException ;
tr	KEY	public void setTurn ( int turn ) { this . turn = turn ; }
tr	KEY	protected abstract void setTextFieldValues ( ) ;
tr	IDF	public void setJsonFileLocation ( String jsonFileLocation ) { this . jsonFileLocation = jsonFileLocation ; }
tr	KEY	public int getYear ( ) { return year ; }
tr	KEY	@ Override public void stop ( ) { stopped = true ; }
tr	KEY	public IntegerDocument ( ) { }
tr	IDF	public void addDifficulty ( SimFileDifficulty difficulty ) { difficulties . add ( difficulty ) ; }
tr	KEY	public int getHeight ( ) { return height ; }
tr	IDF	private void makeEditItem ( ) { JMenuItem editItem = new JMenuItem ( "edit..." ) ; editItem . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { Point p = null ; if ( e instanceof MenuEvent ) p = ( ( MenuEvent ) e ) . getPoint ( ) ; ( ( Editable ) ElementMenu . this . element ) . showDialog ( p ) ; } } ) ; add ( editItem ) ; if ( dflt == null ) dflt = editItem ; }
tr	KEY	@ Override protected void checkPD ( ) { }
tr	IDF	public XmlManager ( File file ) throws IOException { setXmlFile ( file ) ; read ( ) ; }
tr	IDF	public AddressBuilder addressLine1 ( String addressLine1 ) { _address . setAddressLine1 ( addressLine1 ) ; return this ; }
tr	KEY	public Cell ( final int col , final int row , final char data ) { this . col = col ; this . row = row ; this . data = data ; }
tr	IDF	public void setAddress ( String address ) { this . address = address ; }
tr	IDF	public Character nextChar ( String bigram ) { Random rand = new Random ( ) ; double dart = 0 ; while ( dart < .5 ) dart = rand . nextDouble ( ) ; double accum = 0 ; for ( Character s : dict ) { accum = accum + bigramCondProb ( s , bigram ) ; if ( accum >= dart ) { return s ; } } return null ; }
tr	IDF	public static ShortCut createShortCut ( final int questionNumber , final String unique ) { final boolean showQuestion = false ; final Statistics statistics = new Statistics ( 10 , 20 , 30 ) ; final Location locationOfAnswer = new Location ( "test short cut stuff" , "b" , unique , "d" , "e" , unique ) ; final String quetion = unique ; final String shortcut = "shift + ctrl + b" ; return new ShortCut ( showQuestion , questionNumber , statistics , quetion , shortcut , locationOfAnswer ) ; }
tr	IDF	public static < E > void otherSort ( E [ ] array , Comparator < E > comparator ) { if ( array . length >= 2 ) { quickSort ( array , 0 , array . length - 1 , comparator ) ; } }
tr	KEY	public int getSize ( ) { return strings . length ; }
tr	KEY	public double getHeight ( ) { return height ; }
tr	KEY	public AIStoppedException ( ) { }
tr	IDF	@ Override public void actionPerformed ( ActionEvent e ) { adapter . startNow ( ) ; }
tr	IDF	@ Override public String createTableSql ( ) { return CreateSQL ; }
tr	KEY	private int getTotalMarginLeft ( ) { return s_iMarginLeft + s_iRowNumberWidth ; }
tr	KEY	@ Override public void run ( ) { }
tr	KEY	public int getSize ( ) { return registry . size ( ) ; }
tr	IDF	public T visitASTFracSequence ( ASTFracSequence form , S state ) throws FractalException ;
tr	IDF	public static void main ( String [ ] args ) { String pathinput = "C:/Users/lin/Desktop/train_weibo_balanced.arff" ; String pathoutput = "C:/Users/lin/Desktop/train_weibo_balanced.remap" ; File file = new File ( pathinput ) ; BufferedReader reader = null ; try { reader = new BufferedReader ( new FileReader ( file ) ) ; String tempString = null ; OutputStreamWriter writer = new OutputStreamWriter ( new FileOutputStream ( pathoutput ) , "UTF-8" ) ; int num = 4001 ; boolean tag = false ; int num1 = 13161 ; while ( ( tempString = reader . readLine ( ) ) != null ) { if ( tempString . contains ( "  7 800001  " ) ) { tag = true ; } if ( tag ) { writer . write ( ( num1 ++ ) + " cet_" + ( num ++ ) + "_P1_S1\r\n" ) ; } } reader . close ( ) ; writer . flush ( ) ; writer . close ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } finally { if ( reader != null ) { try { reader . close ( ) ; } catch ( IOException e1 ) { } } } }
tr	IDF	private void updateUI ( ) { if ( ( _infoWidget == null ) || _infoWidget . isDisposed ( ) ) { return ; } Date curDate = new Date ( System . currentTimeMillis ( ) ) ; _infoWidget . setText ( Messages . StatusLine_TimeInfo_Title + " \uFF1A " + formatter . format ( curDate ) ) ; }
tr	IDF	public List < Player > getPlayers ( ) { return players ; }
tr	IDF	public static void main ( String [ ] args ) { final int max = 1000000 ; final SieveOfAtkin sieve = new SieveOfAtkin ( max ) ; final ArrayList < Integer > list = sieve . run ( ) ; int result = 0 ; int nmax = 0 ; final int imax = list . size ( ) - 1 ; for ( int i = imax ; i > 0 ; i -- ) { final int prime = list . get ( i ) ; final int n = findLongestConsecutive ( i , prime , list ) ; if ( n > nmax ) { nmax = n ; result = prime ; } } System . out . println ( "# result = " + result + "; nmax = " + nmax ) ; }
tr	KEY	public static boolean isValidPropertyPermission ( String permission ) { try { parsePropertyPermission ( permission ) ; } catch ( IllegalArgumentException e ) { return false ; } return true ; }
tr	KEY	public static int max ( int a , int b ) { if ( a < b ) return b ; return a ; }
tr	KEY	public synchronized int xgetD2InitialDelay ( ) { return d2ID ; }
tr	KEY	void deleteLecture ( long id ) ;
tr	IDF	public T description ( String description ) { this . description = description ; return self ( ) ; }
tr	KEY	public void close ( ) { try { if ( this . in != null ) { this . in . close ( ) ; this . in = null ; } if ( this . out != null ) { this . out . close ( ) ; this . out = null ; } } catch ( IOException e ) { throw new RuntimeException ( e . toString ( ) ) ; } }
tr	IDF	@ Test public void color_OneWinner_Test ( ) { PokerPlayer firstPlayer = new PokerPlayer ( "firstPlayer" ) ; firstPlayer . setBalance ( 2000 ) ; PokerPlayer secondPlayer = new PokerPlayer ( "secondPlayer" ) ; secondPlayer . setBalance ( 3000 ) ; PokerPlayer thirdPlayer = new PokerPlayer ( "thirdPlayer" ) ; thirdPlayer . setBalance ( 5000 ) ; PokerPlayer fourthPlayer = new PokerPlayer ( "fourthPlayer" ) ; fourthPlayer . setBalance ( 9000 ) ; firstPlayer . addCard ( new PokerCard ( Card . As , Suit . Diamantes ) ) ; firstPlayer . addCard ( new PokerCard ( Card . As , Suit . Picas ) ) ; secondPlayer . addCard ( new PokerCard ( Card . Diez , Suit . Trebol ) ) ; secondPlayer . addCard ( new PokerCard ( Card . Diez , Suit . Corazones ) ) ; thirdPlayer . addCard ( new PokerCard ( Card . Siete , Suit . Trebol ) ) ; thirdPlayer . addCard ( new PokerCard ( Card . Cinco , Suit . Picas ) ) ; ArrayList < PokerCard > communitaryCards = new ArrayList < PokerCard > ( ) ; communitaryCards . add ( new PokerCard ( Card . Seis , Suit . Picas ) ) ; communitaryCards . add ( new PokerCard ( Card . Tres , Suit . Diamantes ) ) ; communitaryCards . add ( new PokerCard ( Card . Cuatro , Suit . Picas ) ) ; communitaryCards . add ( new PokerCard ( Card . Reina , Suit . Picas ) ) ; communitaryCards . add ( new PokerCard ( Card . Nueve , Suit . Picas ) ) ; PokerHandEvaluation firstPlayerEvaluation = HandEvaluator . getBestHand ( firstPlayer , communitaryCards ) ; PokerHandEvaluation secondPlayerEvaluation = HandEvaluator . getBestHand ( secondPlayer , communitaryCards ) ; PokerHandEvaluation thirdPlayerEvaluation = HandEvaluator . getBestHand ( thirdPlayer , communitaryCards ) ; ArrayList < PokerHandEvaluation > potentialWinners = new ArrayList < PokerHandEvaluation > ( ) ; potentialWinners . add ( firstPlayerEvaluation ) ; potentialWinners . add ( thirdPlayerEvaluation ) ; ArrayList < PokerHandEvaluation > winners = this . getWinners ( potentialWinners ) ; assertEquals ( winners . size ( ) , 1 ) ; }
tr	KEY	public final String getCategory ( ) { return _category ; }
tr	KEY	public void updateModelFromView ( ) ;
tr	KEY	public PolymorphismTest ( ) { }
tr	IDF	public void removeListeners ( ) { b_classique . removeActionListener ( controleur ) ; b_radar . removeActionListener ( controleur ) ; b_artillerie . removeActionListener ( controleur ) ; b_alerte . removeActionListener ( controleur ) ; b_retour . removeActionListener ( controleur ) ; }
tr	KEY	public HumanPlayer ( ) { }
tr	IDF	public Object visitFunctionDeclTree ( AST t ) { AST name = t . getKid ( 2 ) , formals = t . getKid ( 3 ) , block = t . getKid ( 4 ) ; String funcName = ( ( IdTree ) name ) . getSymbol ( ) . toString ( ) ; String funcLabel = newLabel ( funcName ) ; t . setLabel ( funcLabel ) ; String continueLabel = newLabel ( "continue" ) ; storeop ( new LabelOpcode ( Codes . ByteCodes . goto , continueLabel ) ) ; openFrame ( ) ; storeop ( new LabelOpcode ( Codes . ByteCodes . LABEL , funcLabel ) ) ; for ( AST decl : formals . getKids ( ) ) { IdTree id = ( IdTree ) ( decl . getKid ( 2 ) ) ; id . setFrameOffset ( frameSize ( ) ) ; decl . setLabel ( id . getSymbol ( ) . toString ( ) ) ; changeFrame ( 1 ) ; } block . accept ( this ) ; storeop ( new VarOpcode ( Codes . ByteCodes . LIT , 0 , "   GRATIS-RETURN-VALUE" ) ) ; storeop ( new LabelOpcode ( Codes . ByteCodes . return , funcLabel ) ) ; closeFrame ( ) ; storeop ( new LabelOpcode ( Codes . ByteCodes . LABEL , continueLabel ) ) ; return null ; }
tr	KEY	public InviteDaoImpl ( ) { }
tr	IDF	@ Override public void exitInteiro ( @ NotNull EnquantoParser . InteiroContext ctx ) { }
tr	IDF	private TreeNode flattenNode ( TreeNode root , TreeNode listHead ) { if ( root == null ) return listHead ; listHead = flattenNode ( root . right , listHead ) ; listHead = flattenNode ( root . left , listHead ) ; root . right = listHead ; root . left = null ; if ( listHead != null ) listHead . left = root ; printList ( listHead ) ; return root ; }
tr	IDF	public static void main ( String [ ] args ) { Connection c = null ; Statement stmt = null ; try { class . forName ( "org.sqlite.JDBC" ) ; c = DriverManager . getConnection ( "jdbc:sqlite:test.db" ) ; c . setAutoCommit ( false ) ; System . out . println ( "Opened database successfully" ) ; stmt = c . createStatement ( ) ; String sql = "UPDATE COMPANY set SALARY = 999922.00 where ID=1;" ; stmt . executeUpdate ( sql ) ; c . commit ( ) ; ResultSet rs = stmt . executeQuery ( "SELECT * FROM COMPANY;" ) ; while ( rs . next ( ) ) { int id = rs . getInt ( "id" ) ; String name = rs . getString ( "name" ) ; int age = rs . getInt ( "age" ) ; String address = rs . getString ( "address" ) ; float salary = rs . getFloat ( "salary" ) ; System . out . println ( "ID = " + id ) ; System . out . println ( "NAME = " + name ) ; System . out . println ( "AGE = " + age ) ; System . out . println ( "ADDRESS = " + address ) ; System . out . println ( "SALARY = " + salary ) ; System . out . println ( ) ; } rs . close ( ) ; stmt . close ( ) ; c . close ( ) ; } catch ( Exception e ) { System . err . println ( e . getClass ( ) . getName ( ) + ": " + e . getMessage ( ) ) ; System . exit ( 0 ) ; } System . out . println ( "Operation done successfully" ) ; }
tr	IDF	@ SkipValidation public String delete ( ) { if ( electiveId != null ) { electiveService . deleteElective ( electiveId ) ; return SUCCESS ; } return ERROR ; }
tr	KEY	public void setNumber ( long number ) { this . number = number ; }
tr	IDF	@ SuppressWarnings ( "static-access" ) public void chargerLabyrinthe ( String file_name ) throws Exception { InterfaceEditeur ie = new InterfaceEditeur ( ) ; FileReader file = new FileReader ( file_name ) ; BufferedReader bf = new BufferedReader ( file ) ; for ( Salle [ ] tabCase : ie . getTabSalle ( ) ) { for ( Salle cases : tabCase ) { System . out . println ( "Case : " + cases . etat ) ; ie . EtablirLabyrinthe ( cases . x , cases . y ) ; } } bf . close ( ) ; }
tr	IDF	public void setSite ( SiteModel site ) { this . site = site ; }
tr	KEY	public double [ ] getCenter ( ) { return center ; }
tr	KEY	public void add ( MenuComponent menuComponent ) { throw new UnsupportedOperationException ( ) ; }
tr	KEY	public int getStart ( ) { return start ; }
tr	IDF	public static JSONArray toJSONArray ( String string ) throws JSONException { return toJSONArray ( new XMLTokener ( string ) ) ; }
tr	IDF	public Object visitFunctionDeclTree ( AST t ) { print ( "FunctionDecl" , t ) ; return null ; }
tr	IDF	public void replaceAll ( String oldString , String newString ) { find ( oldString ) ; while ( next ( oldString ) ) replaceSelected ( newString ) ; }
tr	KEY	public boolean interact ( String action , Interactable target ) { if ( action . equals ( "true" ) ) { return true ; } return false ; }
tr	IDF	@ Override public boolean create ( Customer customer ) { Transaction readTransaction = session . beginTransaction ( ) ; session . persist ( customer ) ; readTransaction . commit ( ) ; return true ; }
tr	KEY	public int getElementWithNumber ( int elementNumber ) { return elements [ elementNumber ] ; }
tr	KEY	public long getRunTime ( ) { return runTime ; }
tr	KEY	public boolean isNull ( ) { return value == null ; }
tr	IDF	public RestartLevelSchema ( Proxy proxy ) { this . proxy = proxy ; }
tr	KEY	public OCPViolationTest ( ) { }
tr	IDF	@ Override public void messageReceived ( ChannelHandlerContext ctx , MessageEvent e ) { try { Connection userConnection = userConnectionFromChannel ( e . getChannel ( ) ) ; Request request = Request . instanceof ( e ) ; logger . debug ( " >> handling request : " + request + " from " + e . getChannel ( ) . getRemoteAddress ( ) ) ; requestHandler . handle ( userConnection , request ) ; } catch ( BadRequestException badRequestException ) { logger . error ( badRequestException ) ; e . getChannel ( ) . write ( "Bad request : " + e . getMessage ( ) + '' ) ; } catch ( UnkownRequestException unkownRequestException ) { logger . error ( unkownRequestException ) ; e . getChannel ( ) . write ( unkownRequestException . getMessage ( ) + '' ) ; } catch ( TechnicalException technicalException ) { logger . error ( technicalException ) ; e . getChannel ( ) . write ( technicalException . getMessage ( ) + '' ) ; } }
tr	KEY	public ShapefileReader ( ) { }
tr	KEY	public TwoTileAction ( ) { }
tr	IDF	public static void convert ( File in , File out ) throws IOException { Pattern mapPat = Pattern . compile ( "^([^#;]++);([0-9a-f]++)" , Pattern . CASE_INSENSITIVE ) ; Pattern commentPat = Pattern . compile ( "^\\s*+(#++)(.*+)$" ) ; BufferedReader r = new BufferedReader ( new FileReader ( in ) ) ; PrintWriter w = new PrintWriter ( out ) ; for ( String k = r . readLine ( ) ; k != null ; k = r . readLine ( ) ) { Matcher m = mapPat . matcher ( k ) ; if ( m . find ( ) ) { w . println ( m . group ( 1 ) + " " + m . group ( 2 ) ) ; continue ; } m = commentPat . matcher ( k ) ; if ( m . find ( ) ) { w . println ( m . group ( 1 ) . replace ( "#" , "%" ) + m . group ( 2 ) ) ; continue ; } } r . close ( ) ; w . close ( ) ; }
tr	KEY	public double get ( ) ;
tr	IDF	@ Override public Map < String , Object > getPacketFields ( ) { return null ; }
tr	KEY	public DeleteAll createDeleteAll ( ) { return new DeleteAll ( ) ; }
tr	KEY	public boolean isVegetarian ( ) { return vegetarian ; }
tr	IDF	public FLinkedHashMap < Key , Val > union ( FMap < ? extends Key , ? extends Val > with_map , BinaryOp < Val > valCombiner ) { FLinkedHashMap < Key , Val > m = this ; for ( Map . Entry < ? extends Key , ? extends Val > ent : with_map ) { Key k = ent . getKey ( ) ; m = m . with ( k , ent . getValue ( ) , valCombiner ) ; } return m ; }
tr	IDF	public static void main ( String [ ] args ) { double [ ] [ ] sixProbs = new double [ 5 ] [ ] ; sixProbs [ 0 ] = new double [ 0 ] ; sixProbs [ 1 ] = new double [ 6 ] ; for ( int i = 0 ; i < 6 ; i ++ ) sixProbs [ 1 ] [ i ] = 1.0 / 6 ; for ( int i = 2 ; i < 5 ; i ++ ) { sixProbs [ i ] = new double [ i * 6 - i + 1 ] ; double n = 0 ; int j = 0 ; while ( j < i * 6 - i + 1 ) { if ( j < ( i - 1 ) * 6 - i + 2 ) n += sixProbs [ i - 1 ] [ j ] / 6 ; if ( j >= 6 ) n -= sixProbs [ i - 1 ] [ j - 6 ] / 6 ; sixProbs [ i ] [ j ] = n ; j ++ ; } } double [ ] [ ] eightProbs = new double [ 25 ] [ ] ; eightProbs [ 0 ] = new double [ 0 ] ; eightProbs [ 1 ] = new double [ 8 ] ; for ( int i = 0 ; i < 8 ; i ++ ) eightProbs [ 1 ] [ i ] = 1.0 / 8 ; for ( int i = 2 ; i < 25 ; i ++ ) { eightProbs [ i ] = new double [ i * 8 - i + 1 ] ; double n = 0 ; int j = 0 ; while ( j < i * 8 - i + 1 ) { if ( j < ( i - 1 ) * 8 - i + 2 ) n += eightProbs [ i - 1 ] [ j ] / 8 ; if ( j >= 8 ) n -= eightProbs [ i - 1 ] [ j - 8 ] / 8 ; eightProbs [ i ] [ j ] = n ; j ++ ; } } double [ ] [ ] twelveProbs = new double [ 193 ] [ ] ; twelveProbs [ 0 ] = new double [ 0 ] ; twelveProbs [ 1 ] = new double [ 12 ] ; for ( int i = 0 ; i < 12 ; i ++ ) twelveProbs [ 1 ] [ i ] = 1.0 / 12 ; for ( int i = 2 ; i < 193 ; i ++ ) { twelveProbs [ i ] = new double [ i * 12 - i + 1 ] ; double n = 0 ; int j = 0 ; while ( j < i * 12 - i + 1 ) { if ( j < ( i - 1 ) * 12 - i + 2 ) n += twelveProbs [ i - 1 ] [ j ] / 12 ; if ( j >= 12 ) n -= twelveProbs [ i - 1 ] [ j - 12 ] / 12 ; twelveProbs [ i ] [ j ] = n ; j ++ ; } } double [ ] [ ] twentyProbs = new double [ 2305 ] [ ] ; twentyProbs [ 0 ] = new double [ 0 ] ; twentyProbs [ 1 ] = new double [ 20 ] ; for ( int i = 0 ; i < 20 ; i ++ ) twentyProbs [ 1 ] [ i ] = 1.0 / 20 ; for ( int i = 2 ; i < 2305 ; i ++ ) { twentyProbs [ i ] = new double [ i * 20 - i + 1 ] ; double n = 0 ; int j = 0 ; while ( j < i * 20 - i + 1 ) { if ( j < ( i - 1 ) * 20 - i + 2 ) n += twentyProbs [ i - 1 ] [ j ] / 20 ; if ( j >= 20 ) n -= twentyProbs [ i - 1 ] [ j - 20 ] / 20 ; twentyProbs [ i ] [ j ] = n ; j ++ ; } } double [ ] four = { 0 , 0.25 , 0.25 , 0.25 , 0.25 } ; double [ ] six = new double [ 25 ] ; double [ ] eight = new double [ 193 ] ; double [ ] twelve = new double [ 2305 ] ; double [ ] twenty = new double [ 46081 ] ; for ( int i = 0 ; i < four . length ; i ++ ) { for ( int j = 0 ; j < sixProbs [ i ] . length ; j ++ ) six [ i + j ] += sixProbs [ i ] [ j ] * four [ i ] ; } for ( int i = 0 ; i < six . length ; i ++ ) { for ( int j = 0 ; j < eightProbs [ i ] . length ; j ++ ) eight [ i + j ] += eightProbs [ i ] [ j ] * six [ i ] ; } for ( int i = 0 ; i < eight . length ; i ++ ) { for ( int j = 0 ; j < twelveProbs [ i ] . length ; j ++ ) twelve [ i + j ] += twelveProbs [ i ] [ j ] * eight [ i ] ; } for ( int i = 0 ; i < twelve . length ; i ++ ) { for ( int j = 0 ; j < twentyProbs [ i ] . length ; j ++ ) twenty [ i + j ] += twentyProbs [ i ] [ j ] * twelve [ i ] ; } double sum1 = 0 ; for ( int i = 0 ; i < twenty . length ; i ++ ) sum1 += i * i * twenty [ i ] ; double sum2 = 0 ; for ( int i = 0 ; i < twenty . length ; i ++ ) sum2 += i * twenty [ i ] ; sum2 *= sum2 ; System . out . print ( sum1 - sum2 ) ; }
tr	KEY	private int getColCnt ( ) { return m [ 0 ] . length ; }
tr	KEY	protected boolean listensToDevice ( String deviceName ) { if ( listenToAllDevices ) { return true ; } if ( listensToParticularDevice ( deviceName ) ) { return true ; } return false ; }
tr	IDF	@ Override public int compareTo ( Customer object ) { return object . getId ( ) == this . id ? 0 : object . getId ( ) < this . id ? 1 : - 1 ; }
tr	IDF	private void drawBezApproxForArc ( final float cx , final float cy , final float omx , final float omy , final float mx , final float my , boolean rev ) { float cosext2 = ( omx * mx + omy * my ) / ( 2f * lineWidth2 * lineWidth2 ) ; float cv = ( float ) ( ( 4.0 / 3.0 ) * sqrt ( 0.5 - cosext2 ) / ( 1.0 + sqrt ( cosext2 + 0.5 ) ) ) ; if ( rev ) { cv = - cv ; } final float x1 = cx + omx ; final float y1 = cy + omy ; final float x2 = x1 - cv * omy ; final float y2 = y1 + cv * omx ; final float x4 = cx + mx ; final float y4 = cy + my ; final float x3 = x4 + cv * my ; final float y3 = y4 - cv * mx ; emitCurveTo ( x1 , y1 , x2 , y2 , x3 , y3 , x4 , y4 , rev ) ; }
tr	KEY	@ Override public boolean preShutdown ( ) { return true ; }
tr	KEY	public SystemItem ( ) { }
tr	KEY	public void setMin ( int min ) { this . min = min ; }
tr	KEY	public synchronized void xsetLTInitialDelay ( int a ) { ltID = a ; }
tr	KEY	public int getGeneration ( ) { return generation ; }
tr	IDF	public void setAddress ( String value ) { this . address = value ; }
tr	IDF	public void run ( ) { jfProgressBar dialog = new jfProgressBar ( new javax . swing . JFrame ( ) , true ) ; dialog . addWindowListener ( new java . awt . event . WindowAdapter ( ) { @ Override public void windowClosing ( java . awt . event . WindowEvent e ) { System . exit ( 0 ) ; } } ) ; dialog . setVisible ( true ) ; }
tr	IDF	public void act ( ) { setImage ( flashScreen ) ; if ( style ) { if ( transparency > 10 ) { getImage ( ) . setTransparency ( transparency -= 10 ) ; } else { getWorld ( ) . removeObject ( this ) ; } } else { transparency += 10 ; if ( transparency < 245 ) { getImage ( ) . setTransparency ( transparency ) ; } else if ( transparency == 300 ) { getWorld ( ) . removeObject ( this ) ; } } }
tr	IDF	public void updatePieceHelper ( ) { System . out . println ( "Location: " + xVal + " " + yVal + "   State: " + piece . getState ( ) ) ; image = lightImage ; repaint ( ) ; }
tr	KEY	public int getMaxRows ( ) ;
tr	IDF	public void print ( String s ) { this . out . print ( s ) ; }
tr	KEY	int getPosition ( ) { return yychar ; }
tr	IDF	private void jbColoresQuitarActionPerformed ( java . awt . event . ActionEvent evt ) { quitarColorSeleccionado ( ) ; }
tr	IDF	GameCharacterObject setMoveModeX ( GameCharacterMoveMode moveMode ) ;
tr	IDF	public void setFaces ( ) { for ( int i = 0 ; i < m ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) { faces [ i + ( m * j ) ] [ 0 ] = i + ( m + 1 ) * j ; faces [ i + ( m * j ) ] [ 1 ] = ( i + 1 ) + ( m + 1 ) * j ; faces [ i + ( m * j ) ] [ 2 ] = ( i + 1 ) + ( m + 1 ) * ( j + 1 ) ; faces [ i + ( m * j ) ] [ 3 ] = i + ( m + 1 ) * ( j + 1 ) ; } }
tr	KEY	public FixedLengthDocument ( int maxlen ) { super ( ) ; if ( maxlen <= 0 ) throw new IllegalArgumentException ( "You must specify a maximum length!" ) ; maxLength = maxlen ; }
tr	KEY	public Point2D . double getLocation ( ) { return location ; }
tr	IDF	public static void assertTwoValuesOnly ( final CircleLinkElement < Integer > head , final CircleLinkElement < Integer > tail ) { assertEquals ( tail , head . getNext ( ) ) ; assertEquals ( tail , head . getPrevious ( ) ) ; assertEquals ( head , tail . getNext ( ) ) ; assertEquals ( head , tail . getPrevious ( ) ) ; }
tr	IDF	public void setDes_Equipo ( String Des_Equipo ) { this . Des_Equipo = Des_Equipo ; }
tr	KEY	public void run ( ) { createAndShowGUI ( ) ; }
tr	KEY	public boolean hasNext ( ) { return ( current != null ) ; }
tr	KEY	public double getGoal ( ) { return this . goal ; }
tr	KEY	public void setId ( long value ) { this . id = value ; }
tr	IDF	public void setContactIds ( String value ) { this . contactIds = value ; }
tr	KEY	public int size ( ) { return size ; }
tr	KEY	public long getId ( ) { return id ; }
tr	IDF	public java . util . Set < Symbol > keys ( ) { return symbols . keySet ( ) ; }
tr	KEY	public boolean isSound ( ) { return sound ; }
tr	KEY	private MytxtbuddySoapApi_MytxtbuddySoapApiPort_Client ( ) { }
tr	KEY	public double getReldepth ( ) { return reldepth ; }
tr	IDF	@ Subscribe public void handle ( Event ev ) { }
tr	KEY	@ BeforeMethod public void setUpMethod ( ) throws Exception { }
tr	KEY	public synchronized boolean isEmpty ( ) { return m_hashTableKtoV . isEmpty ( ) ; }
tr	KEY	void getInput ( ) ;
tr	KEY	public abstract void visit ( Comment comment ) ;
tr	IDF	@ Override protected String getXMLPropertyDefinitionInit ( ) { String xml = "<defTextVector device=\"" + getDriver ( ) . getName ( ) + "\" name=\"" + getName ( ) + "\" label=\"" + getLabel ( ) + "\" group=\"" + getGroup ( ) + "\" state=\"" + Constants . getPropertyStateAsString ( getState ( ) ) + "\" perm=\"" + Constants . getPropertyPermissionAsString ( getPermission ( ) ) + "\" timeout=\"" + getTimeout ( ) + "\" timestamp=\"" + INDIDateFormat . getCurrentTimestamp ( ) + "\">" ; return xml ; }
tr	KEY	private static void editInfo ( ) { MainMenuUI mainMenu = new MainMenuUI ( ) ; int option = mainMenu . editInformation ( ) ; switch ( option ) { case 1 : editProduct ( ) ; break ; case 2 : editCategory ( ) ; break ; case 3 : editUser ( ) ; break ; case 0 : break ; default : mainMenu . showOptionNotValid ( ) ; } }
tr	KEY	public void setBreakingNews ( long value ) { this . breakingNews = value ; }
tr	KEY	public void run ( ) { new NewProfile ( ) . setVisible ( true ) ; }
tr	IDF	private void populateDto ( UStatus dto , ResultSet rs ) throws SQLException { dto . setUStatus ( rs . getString ( COLUMN_U_STATUS ) ) ; }
tr	IDF	@ Nullable public String repositoryUrl ( ) { return repositoryUrl ; }
tr	KEY	public int getDim ( ) { return dim ; }
tr	IDF	public void load ( ) { Font titleFont = FontManager . getFont ( FontManager . FONT_COMIC_NEUE_BOLD , 30 ) ; Font menuFont = FontManager . getFont ( FontManager . FONT_COMIC_NEUE , 30 ) ; this . background = new Entity ( "sprites/menu.png" , 0 , 0 ) ; this . title = new TELabel ( "Game Over" , 0 , 50 , titleFont ) ; this . title . verticalAlignCenter ( 0 , GameWindow . getInstance ( ) . getWidth ( ) ) ; playerLabels = new TECollectionVertical ( 0 , 0 , 15 ) ; ArrayList < Player > players = Board . getInstance ( ) . getPlayers ( ) ; Collections . sort ( players , new Comparator < Player > ( ) { @ Override public int compare ( Player player , Player player2 ) { int pos1 = player . getPosition ( ) ; int pos2 = player2 . getPosition ( ) ; if ( pos1 == 0 ) pos1 = 4 ; if ( pos2 == 0 ) pos2 = 4 ; return pos1 - pos2 ; } } ) ; for ( Player player : Board . getInstance ( ) . getPlayers ( ) ) { playerLabels . addView ( new TELabel ( player . scoreLabelStr ( ) , 0 , 0 , menuFont ) ) ; } playerLabels . verticalAlignCenter ( 0 , GameWindow . getInstance ( ) . getWidth ( ) ) ; playerLabels . horizontalAlignCenter ( 0 , GameWindow . getInstance ( ) . getHeight ( ) ) ; }
tr	KEY	public boolean getImmigrantRefugeeNewArrival ( ) { return immigrantRefugeeNewArrival ; }
tr	IDF	public void initFeatureAlphabets ( DependencyInstance inst ) { getFeatureVector ( inst ) ; int n = inst . length ; for ( SemanticFrame frame : inst . frames ) { int p = frame . predid ; createWordFeatureVector ( inst , p ) ; int [ ] args = frame . arglbids ; for ( int a = 0 ; a < n ; ++ a ) { boolean isValid = isValidPredAugPair ( inst , p , a ) ; if ( args [ a ] >= 0 && isValid ) { int r = args [ a ] ; createContextFeatureVector ( inst , p , a , r ) ; createPathFeatureVector ( inst , p , a , r ) ; createWordFeatureVector ( inst , a ) ; } } } }
tr	KEY	public void setID ( long id ) { this . ID = id ; }
tr	KEY	private boolean hasBoldOrItalics ( String p ) { if ( p == null ) return false ; int idx = p . indexOf ( "''" ) ; return idx >= 0 ; }
tr	KEY	protected abstract void write ( ObjectOutputStream out ) throws IOException ;
tr	KEY	@ Override public final boolean equals ( Object obj ) { if ( ! ( obj instanceof SpeedBuff ) ) return false ; return super . equals ( obj ) ; }
tr	KEY	public long getOffset ( ) { return offset ; }
tr	IDF	public static String encrypt ( String astr ) { Key key = getKey ( KEY_STRING ) ; return ( encrypt ( key , astr ) ) ; }
tr	KEY	public Vector2D ( ) { this . x = 0 ; this . y = 0 ; }
tr	KEY	public Connect4Exception ( ) { }
tr	IDF	public FerramentaChamado ( String codigo , String chamado , String ferramenta ) { this . codigo = codigo ; this . chamado = chamado ; this . ferramenta = ferramenta ; }
tr	IDF	public void play ( Sequence sequence , boolean loop ) { if ( sequencer != null && sequence != null && sequencer . isOpen ( ) ) { try { sequencer . setSequence ( sequence ) ; sequencer . start ( ) ; this . loop = loop ; } catch ( InvalidMidiDataException ex ) { ex . printStackTrace ( ) ; } } }
tr	IDF	public HashMap < String , Path > getFileModel ( ) { return fileModel ; }
tr	IDF	private void readObject ( java . io . ObjectInputStream s ) throws java . lang . ClassNotFoundException , java . io . IOException { super . readObject ( s , true ) ; }
tr	KEY	public abstract int getSelection ( ) ;
tr	KEY	public void setTotal ( long value ) { this . total = value ; }
tr	KEY	public void print ( ) ;
tr	IDF	private Object union ( Object subtree1 , Object subtree2 , Object lo , Object hi ) { if ( subtree1 == subtree2 || subtree2 == null ) return split ( subtree1 , lo , hi ) ; else if ( subtree1 == null ) return split ( subtree2 , lo , hi ) ; else if ( ! ( subtree1 instanceof Node ) ) { if ( ! ( subtree2 instanceof Node ) ) return union ( ( Object [ ] ) subtree1 , ( Object [ ] ) subtree2 , lo , hi ) ; else return union ( subtree2 , subtree1 , lo , hi ) ; } else { Node n1 = ( Node ) subtree1 ; Object elt1 = n1 . element ; Object elt2 = findEquiv ( subtree2 , elt1 ) ; return concat ( equivUnion ( elt1 , elt2 ) , union ( trim ( n1 . left , lo , elt1 ) , trim ( subtree2 , lo , elt1 ) , lo , elt1 ) , union ( trim ( n1 . right , elt1 , hi ) , trim ( subtree2 , elt1 , hi ) , elt1 , hi ) ) ; } }
tr	KEY	@ Override public double det ( ) { return 0 ; }
tr	KEY	private WoffToOtf ( ) { }
tr	KEY	public Ferramenta ( ) { }
tr	KEY	public int getNHE_Empleado ( ) { return NHE_Empleado ; }
tr	KEY	public String eatMsg ( ) { return "You can't eat that." ; }
tr	IDF	@ Override public INDIBLOBElement getElement ( ) { return element ; }
tr	KEY	public int getStockDisponible ( ) { return stockDisponible ; }
tr	IDF	private void initSubsystems ( ) throws InitializationException { try { this . managers = new Managers ( ) ; String fanInterface = configurationProperties . getProperty ( "fan.interface" ) ; if ( fanInterface == null || fanInterface . equals ( "mock" ) ) { this . gpioUtility = new MockFanInterface ( ) ; } else if ( fanInterface . equals ( "gpio" ) ) { this . gpioUtility = new FanGpioInterface ( ) ; } this . bluetoothInterface = new BluetoothInterfaceImpl ( ) ; gpioUtility . setSpeedOff ( ) ; managers . packetManager = createPacketManager ( ) ; managers . connectionManager = createConnectionManager ( ) ; managers . messageManager = createMessageManager ( ) ; managers . discoveryManager = createDiscoveryManager ( ) ; managers . authenticationManager = createAuthenticationManager ( ) ; managers . statusManager = createStatusManager ( ) ; managers . warningManager = createWarningManager ( ) ; managers . commandManager = createCommandManager ( ) ; managers . packetManager . start ( ) ; managers . connectionManager . start ( ) ; managers . messageManager . start ( ) ; managers . discoveryManager . start ( ) ; managers . authenticationManager . start ( ) ; managers . commandManager . start ( ) ; managers . statusManager . start ( ) ; managers . warningManager . start ( ) ; } catch ( RuntimeException e ) { throw new InitializationException ( e ) ; } }
tr	IDF	@ Override public void error ( MediaPlayer arg0 ) { }
tr	KEY	public int getButtonW ( ) { return buttonW ; }
tr	KEY	@ Override public boolean isReal ( ) { return true ; }
tr	IDF	public Response execute ( ) throws Exception { FileInputStream ksfis = null ; FileInputStream tsfis = null ; Response response = null ; try { Document doc = this . getDocument ( ) ; if ( doc == null ) { throw new IllegalArgumentException ( "Undefined request." ) ; } String debug = Settings . getInstance ( ) . getSetting ( "Connection" , "DebugNetwork" , "false" ) ; if ( boolean . parseBoolean ( debug ) ) { System . setProperty ( "javax.net.debug" , "all" ) ; } logger . debug ( "Setting up the security." ) ; Environment env = this . getEnvironment ( ) ; String type = this . getType ( ) ; Node methodNode = Utilities . selectSingleNode ( this . node . getOwnerDocument ( ) , "/c:settings/c:environments/c:environment[@c:name='" + env . getName ( ) + "']/c:methods/c:method[@c:class='" + type + "']" , XMLLabels . STANDARD_NAMESPACES ) ; if ( methodNode == null ) { class < ? > clazz = class . forName ( type ) ; OperationPanel oper = Utilities . getAnnotation ( clazz , OperationPanel . class ) ; if ( oper != null ) { methodNode = Utilities . selectSingleNode ( this . node . getOwnerDocument ( ) , "/c:settings/c:environments/c:environment[@c:name='" + env . getName ( ) + "']/c:methods/c:method[@c:class='" + oper . operation ( ) . getName ( ) + "']" , XMLLabels . STANDARD_NAMESPACES ) ; type = Utilities . getAttributeValue ( methodNode , "class" ) ; } else { logger . error ( "Unable to find execution method for: " + type ) ; } } ServiceMethod method = env . getMethod ( type ) ; String keyStore = env . getProperty ( "KeyStore" ) ; String keyPassword = env . getProperty ( "KeyStorePassword" ) ; String trustStore = env . getProperty ( "TrustStore" ) ; String trustPassword = env . getProperty ( "TrustStorePassword" ) ; KeyManager [ ] keyManagers = null ; if ( ! Utilities . isNullOrWhitespace ( keyPassword ) && ! Utilities . isNullOrWhitespace ( keyStore ) ) { ksfis = new FileInputStream ( keyStore ) ; KeyStore store = KeyStore . getInstance ( KeyStore . getDefaultType ( ) ) ; char [ ] password = keyPassword . toCharArray ( ) ; store . load ( ksfis , password ) ; KeyManagerFactory keyFactory = KeyManagerFactory . getInstance ( KeyManagerFactory . getDefaultAlgorithm ( ) ) ; keyFactory . init ( store , password ) ; keyManagers = keyFactory . getKeyManagers ( ) ; } else { logger . warn ( "Keystore path and/or password is null  the default keystore will be used." ) ; } TrustManager [ ] trustManagers = null ; if ( ! Utilities . isNullOrWhitespace ( trustPassword ) && ! Utilities . isNullOrWhitespace ( trustStore ) ) { tsfis = new FileInputStream ( trustStore ) ; KeyStore store = KeyStore . getInstance ( KeyStore . getDefaultType ( ) ) ; char [ ] password = trustPassword . toCharArray ( ) ; store . load ( tsfis , password ) ; TrustManagerFactory trustFactory = TrustManagerFactory . getInstance ( TrustManagerFactory . getDefaultAlgorithm ( ) ) ; trustFactory . init ( store ) ; trustManagers = trustFactory . getTrustManagers ( ) ; } else { logger . warn ( "Trust path and/or password is null  the default truststore will be used." ) ; } if ( keyManagers != null && trustManagers != null ) { SSLContext sslContext = SSLContext . getInstance ( "SSL" ) ; sslContext . init ( keyManagers , trustManagers , null ) ; SSLContext . setDefault ( sslContext ) ; } logger . debug ( "Getting service endpoint and generating the request." ) ; URL url = env . getEndpoint ( method . getUrlAppend ( ) ) ; if ( this . willValidate ( ) ) { QueryDefinition . validateRequest ( doc ) ; } String docStr = Utilities . stringify ( doc ) ; int docLen = docStr . getBytes ( ) . length ; logger . debug ( "Creating service to: " + url . toString ( ) ) ; HttpsURLConnection connection = ( HttpsURLConnection ) url . openConnection ( ) ; connection . setHostnameVerifier ( new HostnameVerifier ( ) { @ Override public boolean verify ( String hostname , SSLSession session ) { logger . debug ( "Verifying hosts: " + hostname ) ; logger . debug ( "Session hosts:   " + session . getPeerHost ( ) ) ; String host = session . getPeerHost ( ) ; return hostname . equals ( host ) ; } } ) ; connection . setRequestMethod ( "POST" ) ; connection . setRequestProperty ( "Content-Type" , this . getContentType ( ) ) ; connection . setRequestProperty ( "Query-Id" , this . getId ( ) ) ; connection . setFixedLengthStreamingMode ( docLen ) ; connection . setConnectTimeout ( this . getTimeout ( ) ) ; connection . setDoOutput ( true ) ; logger . debug ( "Decoding request headers." ) ; Map < String , List < String >> headerValues = connection . getRequestProperties ( ) ; for ( Map . Entry < String , List < String >> entry : headerValues . entrySet ( ) ) { StringBuilder values = new StringBuilder ( ) ; String prefix = "" ; for ( String value : entry . getValue ( ) ) { values . append ( prefix + value ) ; prefix = "  " ; } logger . debug ( "  Header: " + entry . getKey ( ) + " [" + values + "]" ) ; } logger . debug ( "Calling service." ) ; DataOutputStream wr = new DataOutputStream ( connection . getOutputStream ( ) ) ; wr . writeBytes ( docStr ) ; logger . debug ( "Flushing." ) ; wr . flush ( ) ; logger . debug ( "Getting service response." ) ; int code = connection . getResponseCode ( ) ; logger . debug ( "Response code: " + code ) ; logger . debug ( "Response message: " + connection . getResponseMessage ( ) ) ; logger . debug ( "Decoding response headers." ) ; headerValues = connection . getHeaderFields ( ) ; for ( Map . Entry < String , List < String >> entry : headerValues . entrySet ( ) ) { StringBuilder values = new StringBuilder ( ) ; String prefix = "" ; for ( String value : entry . getValue ( ) ) { values . append ( prefix + value ) ; prefix = "  " ; } logger . debug ( "  Header: " + entry . getKey ( ) + " [" + values + "]" ) ; } logger . debug ( "End of headers." ) ; InputStream stream = null ; if ( ( 200 <= code ) && ( code < 300 ) ) { logger . debug ( "Getting normal stream." ) ; stream = connection . getInputStream ( ) ; } else { logger . debug ( "Getting error stream." ) ; stream = connection . getErrorStream ( ) ; } InputStreamReader reader = new InputStreamReader ( stream ) ; logger . debug ( "Encoding: " + reader . getEncoding ( ) ) ; logger . debug ( "Buffering." ) ; BufferedReader br = new BufferedReader ( reader ) ; logger . debug ( "Reading." ) ; StringBuilder builder = new StringBuilder ( ) ; for ( String line ; ( line = br . readLine ( ) ) != null ; builder . append ( line ) ) ; logger . debug ( "Closing stream." ) ; connection . disconnect ( ) ; String data = builder . toString ( ) ; logger . info ( data ) ; logger . debug ( "Service call succeeded." ) ; if ( ! Utilities . isNullOrWhitespace ( data ) ) { Constructor < ? > constr = method . getResponseClass ( ) . getConstructor ( new class < ? > [ ] { Request . class , String . class } ) ; response = ( Response ) constr . newInstance ( new Object [ ] { request , data } ) ; } else { throw new NullPointerException ( "No data returned from server." ) ; } } finally { if ( ksfis != null ) { try { ksfis . close ( ) ; } catch ( Exception e ) { logger . warn ( "Error closing keystore stream." , e ) ; } } if ( tsfis != null ) { try { tsfis . close ( ) ; } catch ( Exception e ) { logger . warn ( "Error closing truststore stream." , e ) ; } } System . setProperty ( "javax.net.debug" , "false" ) ; } logger . debug ( "Creating the appropriate service response." ) ; return response ; }
tr	IDF	@ SuppressWarnings ( "unchecked" ) public List < Map < String , Object >> getFriend ( Map < String , Object > param ) { List < Map < String , Object >> friendList = null ; try { friendList = sqlMapClient . queryForList ( SqlMap . USER_GETFRIEND , param ) ; } catch ( Exception e ) { log . error ( "\u83B7\u5F97\u5206\u7EC4\u597D\u53CB\u5931\u8D25" ) ; e . printStackTrace ( ) ; } return friendList ; }
tr	KEY	public Depot ( ) { }
tr	IDF	public Block ( Node first , Node second ) { this . first = first ; this . second = second ; }
tr	IDF	@ Override public String getRemark ( ) { return remark ; }
tr	IDF	private String isMatchHost ( String host ) { String newHost = null ; Gircosconfig config = configService . getConfig ( ) ; for ( Vhost vhost : config . getVhosts ( ) . getVhost ( ) ) { newHost = vhost . getName ( ) ; break ; } return newHost ; }
tr	KEY	public void rotateZ ( double radians ) ;
tr	IDF	private static void showExhaustiveGraphInGraphviz ( RequirementGraph req_model , int visualization ) throws IOException { String graph = "digraph G {\n" + "rankdir = BT;\n" ; for ( SecurityGoal sg : req_model . getSg_elem ( ) ) { String temp_graph = "" ; if ( sg . isCriticality ( ) ) { temp_graph += "sg_" + sg . getNameForShow ( ) + "[shape=ellipse  width=2  height=1.5  fixedsize = true  fontname=\"Helvetica-Bold\"  style = filled  color = red];\n" ; } else if ( sg . isNon_deterministic ( ) ) { temp_graph += "sg_" + sg . getNameForShow ( ) + "[shape=ellipse  fontname=\"Helvetica-Bold\"  style = filled  color = green];\n" ; } else { temp_graph += "sg_" + sg . getNameForShow ( ) + "[shape=ellipse  width=2  height=1.5  fixedsize = true  fontname=\"Helvetica-Bold\"" ; if ( sg . getRemark ( ) . equals ( InfoEnum . ElementRemark . BESTPATH . name ( ) ) ) { temp_graph += "  style = filled  color=blue" ; } temp_graph += "];\n" ; } if ( visualization != 2 ) { graph += temp_graph ; } else if ( sg . isCriticality ( ) || sg . getRemark ( ) . equals ( InfoEnum . ElementRemark . TOPSG . name ( ) ) || sg . getRemark ( ) . equals ( InfoEnum . ElementRemark . BESTPATH . name ( ) ) ) { graph += temp_graph ; } } for ( RequirementLink rl : req_model . getSg_links ( ) ) { String temp_graph = "" ; SecurityGoal sg_source = ( SecurityGoal ) rl . getSource ( ) ; SecurityGoal sg_target = ( SecurityGoal ) rl . getTarget ( ) ; temp_graph += "sg_" + sg_source . getNameForShow ( ) + " -> " + "sg_" + sg_target . getNameForShow ( ) ; if ( rl . refine_type . equals ( InfoEnum . RefineType . ATTRIBUTE . name ( ) ) ) { temp_graph += "[label=\"S\"" ; } else if ( rl . refine_type . equals ( InfoEnum . RefineType . ASSET . name ( ) ) ) { temp_graph += "[label=\"A\"" ; } else if ( rl . refine_type . equals ( InfoEnum . RefineType . INTERVAL . name ( ) ) ) { temp_graph += "[label=\"I\"" ; } else { CommandPanel . logger . severe ( "Refinement type of the graph has problems." ) ; } if ( rl . getRemark ( ) . equals ( InfoEnum . LinkRemark . BESTPATH . name ( ) ) ) { temp_graph += "  penwidth = 2.5  color=blue" ; } temp_graph += "];\n" ; if ( visualization != 2 ) { graph += temp_graph ; } else if ( rl . getRemark ( ) . equals ( InfoEnum . LinkRemark . BESTPATH . name ( ) ) ) { graph += temp_graph ; } else if ( ( ( SecurityGoal ) rl . getSource ( ) ) . isCriticality ( ) && ( ( SecurityGoal ) rl . getTarget ( ) ) . isCriticality ( ) ) { graph += temp_graph ; } } graph += "}" ; Func . writeFile ( InfoEnum . current_directory + "/graphviz/sec_goal_" + visualization + ".gv" , graph , false ) ; }
tr	KEY	@ AfterClass public static void tearDownClass ( ) { }
tr	KEY	public void decrementIrrigationTiles ( ) { irrigationTiles -- ; }
tr	KEY	public boolean isComplete ( ) { return complete ; }
tr	IDF	public static double angleBetween ( Vector2D v0 , Vector2D v1 ) { double denom = FastMath . sqrt ( v0 . x * v0 . x + v0 . y * v0 . y ) * FastMath . sqrt ( v1 . x * v1 . x + v1 . y * v1 . y ) ; if ( denom > double . MIN_VALUE ) { double a = FastMath . acos ( ( v0 . x * v1 . x + v0 . y * v1 . y ) / denom ) ; if ( a != a ) return 0 ; else return a ; } return 0 ; }
tr	KEY	public void setNumSquareCell_Width ( int numsquarecellmainw ) { this . numSquareCell_Width = numsquarecellmainw ; }
tr	KEY	@ Override public float getPower ( ) { return BULLET_POWER ; }
tr	IDF	public List < Map < String , Object >> getcomplexresult ( String sql , List < Object > params ) throws SQLException { List < Map < String , Object >> list = new ArrayList < Map < String , Object >> ( ) ; pstmt = connection . prepareStatement ( sql ) ; int index = 1 ; if ( params != null && ! params . isEmpty ( ) ) { for ( int i = 0 ; i < params . size ( ) ; i ++ ) { pstmt . setObject ( index ++ , params . get ( i ) ) ; } } resultSet = pstmt . executeQuery ( ) ; ResultSetMetaData metaData = resultSet . getMetaData ( ) ; int col_len = metaData . getColumnCount ( ) ; while ( resultSet . next ( ) ) { Map < String , Object > map = new HashMap < String , Object > ( ) ; for ( int i = 0 ; i < col_len ; i ++ ) { String col_name = metaData . getColumnName ( i + 1 ) ; Object value = resultSet . getObject ( col_name ) ; if ( value == null ) { value = "" ; } map . put ( col_name , value ) ; } list . add ( map ) ; } return list ; }
tr	KEY	public long getId ( ) { return id ; }
tr	IDF	public static AddTwoNumbers . ListNode addTwoNumbers ( AddTwoNumbers . ListNode l1 , AddTwoNumbers . ListNode l2 ) { AddTwoNumbers . ListNode res = null ; AddTwoNumbers . ListNode tail = null ; int carrayNum = 0 ; while ( l1 != null && l2 != null ) { AddTwoNumbers . ListNode curNode ; int curVal = l1 . val + l2 . val + carrayNum ; if ( curVal >= 10 ) { curNode = new AddTwoNumbers . ListNode ( curVal - 10 ) ; carrayNum = 1 ; } else { curNode = new AddTwoNumbers . ListNode ( curVal ) ; carrayNum = 0 ; } if ( res == null ) { res = curNode ; tail = curNode ; } else { tail . next = curNode ; tail = tail . next ; } l1 = l1 . next ; l2 = l2 . next ; } AddTwoNumbers . ListNode longL = null ; if ( l1 == null ) { if ( l2 != null ) { longL = l2 ; } } else { longL = l1 ; } while ( carrayNum == 1 && longL != null ) { AddTwoNumbers . ListNode curNode ; int curVal = longL . val + carrayNum ; if ( curVal >= 10 ) { curNode = new AddTwoNumbers . ListNode ( curVal - 10 ) ; carrayNum = 1 ; } else { curNode = new AddTwoNumbers . ListNode ( curVal ) ; carrayNum = 0 ; } tail . next = curNode ; tail = tail . next ; longL = longL . next ; } if ( longL != null ) { tail . next = longL ; } else if ( carrayNum == 1 ) { tail . next = new AddTwoNumbers . ListNode ( 1 ) ; } return res ; }
tr	IDF	@ Override public CircleLinkPointer < Value > getPrevious ( ) { return new CircleLinkPointerImpl < > ( parent , element . getPrevious ( ) ) ; }
tr	IDF	@ Override protected void delete ( Message request , Message response ) { if ( response == null ) { response = new Message ( request . getContext ( ) ) ; } response . put ( System . RESULT_CODE , "-1" ) ; response . put ( System . RESULT_MSG , "Not implemented" ) ; }
tr	IDF	public String getSo ( ) { System . out . println ( OS ) ; return OS ; }
tr	IDF	@ Override public void service ( ) throws IOException { while ( true ) { Socket socket = null ; try { socket = serverSocket . accept ( ) ; BufferedReader br = getBufferedReader ( socket ) ; String msg = br . readLine ( ) ; log . info ( "Accept a new connection  address = " + socket . getInetAddress ( ) + "  port = " + socket . getPort ( ) + "  number = " + msg ) ; Map < String , Object > param = new HashMap < String , Object > ( ) ; param . put ( Constants . IN_USERNO , msg ) ; param . put ( Constants . IN_IP , socket . getInetAddress ( ) . toString ( ) ) ; param . put ( Constants . IN_PORT , socket . getPort ( ) ) ; userDao . setUserIp ( param ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; log . error ( e . getMessage ( ) ) ; } finally { if ( null != socket ) { socket . close ( ) ; } } } }
tr	IDF	protected int [ ] parseResponse ( String responseString ) { int [ ] result ; try { String [ ] values = responseString . split ( " " ) [ 1 ] . split ( "\r" ) ; result = new int [ values . length ] ; for ( int i = 0 ; i < values . length ; i ++ ) result [ values . length - 1 - i ] = Integer . parseInt ( values [ i ] ) ; return result ; } catch ( Exception e ) { setCorrupted ( true ) ; return null ; } }
tr	KEY	public static double exp ( double x ) { return exp ( x , 0.0 , null ) ; }
tr	KEY	public int getNrows ( ) { return r ; }
tr	KEY	public synchronized void xassignD2KeyCode ( int code ) { d2 = code ; }
tr	IDF	@ Override public void onMessageSent ( Message < ClientProtocolParameters > message ) { if ( message instanceof NodeWarningMessage ) { onWarningEmitted ( ( ( NodeWarningMessage ) message ) . message ) ; } }
tr	KEY	@ Override public float getBulletRange ( ) { return BULLET_RANGE ; }
tr	KEY	public boolean isNavigating ( ) { return state == NAVIGATING ; }
tr	KEY	public long getBadgeNumber ( ) { return badgeNumber ; }
tr	KEY	public void setIdUsuario ( int idUsuario ) { this . idUsuario = idUsuario ; }
tr	IDF	public ToolbarPanel ( ) { this . setLayout ( new GridLayout ( 7 , 2 ) ) ; this . radioLayers . add ( drawOnBackground ) ; this . radioLayers . add ( drawOnMiddleground ) ; this . radioLayers . add ( drawOnForeground ) ; this . defaultSettings ( ) ; this . add ( paintLabel ) ; this . add ( showLabel ) ; this . add ( drawOnBackground ) ; this . add ( showBackground ) ; this . add ( drawOnMiddleground ) ; this . add ( showMiddleground ) ; this . add ( drawOnForeground ) ; this . add ( showForeground ) ; this . add ( new JLabel ( "" ) ) ; this . add ( showGrid ) ; this . add ( new JLabel ( "" ) ) ; this . add ( showCollision ) ; this . add ( new JLabel ( "" ) ) ; this . add ( showObjects ) ; drawOnBackground . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { mapPanel . paintOnLayer = 2 ; } } ) ; drawOnMiddleground . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { mapPanel . paintOnLayer = 1 ; } } ) ; drawOnForeground . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { mapPanel . paintOnLayer = 0 ; } } ) ; showBackground . addItemListener ( new ItemListener ( ) { public void itemStateChanged ( ItemEvent e ) { switch ( e . getStateChange ( ) ) { case ItemEvent . SELECTED : drawOnBackground . setEnabled ( true ) ; mapPanel . showLayer [ 2 ] = true ; mapPanel . repaint ( ) ; break ; case ItemEvent . DESELECTED : drawOnBackground . setEnabled ( false ) ; if ( drawOnBackground . isSelected ( ) ) radioLayers . clearSelection ( ) ; mapPanel . showLayer [ 2 ] = false ; mapPanel . repaint ( ) ; break ; default : break ; } } } ) ; showMiddleground . addItemListener ( new ItemListener ( ) { public void itemStateChanged ( ItemEvent e ) { switch ( e . getStateChange ( ) ) { case ItemEvent . SELECTED : drawOnMiddleground . setEnabled ( true ) ; mapPanel . showLayer [ 1 ] = true ; mapPanel . repaint ( ) ; break ; case ItemEvent . DESELECTED : drawOnMiddleground . setEnabled ( false ) ; if ( drawOnMiddleground . isSelected ( ) ) radioLayers . clearSelection ( ) ; mapPanel . showLayer [ 1 ] = false ; mapPanel . repaint ( ) ; break ; default : break ; } } } ) ; showForeground . addItemListener ( new ItemListener ( ) { public void itemStateChanged ( ItemEvent e ) { switch ( e . getStateChange ( ) ) { case ItemEvent . SELECTED : drawOnForeground . setEnabled ( true ) ; mapPanel . showLayer [ 0 ] = true ; mapPanel . repaint ( ) ; break ; case ItemEvent . DESELECTED : drawOnForeground . setEnabled ( false ) ; if ( drawOnForeground . isSelected ( ) ) radioLayers . clearSelection ( ) ; mapPanel . showLayer [ 0 ] = false ; mapPanel . repaint ( ) ; break ; default : break ; } } } ) ; showGrid . addItemListener ( new ItemListener ( ) { public void itemStateChanged ( ItemEvent e ) { switch ( e . getStateChange ( ) ) { case ItemEvent . SELECTED : mapPanel . showGrid = true ; mapPanel . repaint ( ) ; break ; case ItemEvent . DESELECTED : mapPanel . showGrid = false ; mapPanel . repaint ( ) ; break ; default : break ; } } } ) ; showCollision . addItemListener ( new ItemListener ( ) { public void itemStateChanged ( ItemEvent e ) { int levelWidth ; int levelHeight ; int tile ; switch ( e . getStateChange ( ) ) { case ItemEvent . SELECTED : mapPanel . showCollision = true ; break ; case ItemEvent . DESELECTED : mapPanel . showCollision = false ; break ; default : break ; } for ( int n = 0 ; n < mapPanel . drawAreaLayers . size ( ) ; n ++ ) { levelWidth = mapPanel . level . getLayer ( n ) . getWidth ( ) * 16 ; levelHeight = mapPanel . level . getLayer ( n ) . getHeight ( ) * 16 ; for ( int i = 0 , x = 0 ; i < levelWidth ; i += 16 , x ++ ) { for ( int j = 0 , y = 0 ; j < levelHeight ; j += 16 , y ++ ) { tile = mapPanel . level . getLayer ( n ) . getTile ( x , y ) ; mapPanel . paintTile ( n , tile , i , j , true ) ; } } } } } ) ; showObjects . addItemListener ( new ItemListener ( ) { public void itemStateChanged ( ItemEvent e ) { switch ( e . getStateChange ( ) ) { case ItemEvent . SELECTED : mapPanel . showObjects = true ; mapPanel . repaint ( ) ; break ; case ItemEvent . DESELECTED : mapPanel . showObjects = false ; mapPanel . repaint ( ) ; break ; default : break ; } } } ) ; }
tr	KEY	@ Override protected void unbindSelf ( ) { this . messageManager . unbind ( this ) ; this . connectionManager . unbind ( this ) ; }
tr	IDF	public void setLanguage ( String language ) { this . language = language ; }
tr	IDF	public Date getStart ( ) { return ( Date ) start . clone ( ) ; }
tr	KEY	public abstract void redoEvent ( ) ;
tr	IDF	public static String toString ( int [ ] data ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i : data ) { sb . append ( i ) . append ( " " ) ; } return sb . toString ( ) . substring ( 0 , sb . length ( ) - 1 ) ; }
tr	KEY	public void setEnableSound ( boolean enableSound ) { this . enableSound = enableSound ; }
tr	KEY	public void setColumnCount ( int columnCount ) { this . columnCount = columnCount ; }
tr	IDF	public void connexionServeur ( ) { int ip1 = ( int ) view . getSpinner1 ( ) . getValue ( ) ; int ip2 = ( int ) view . getSpinner2 ( ) . getValue ( ) ; int ip3 = ( int ) view . getSpinner3 ( ) . getValue ( ) ; int ip4 = ( int ) view . getSpinner4 ( ) . getValue ( ) ; serverName = ip1 + "." + ip2 + "." + ip3 + "." + ip4 ; fenetre . changerVue ( new MessageView ( "Recherche de la partie..." ) ) ; Thread connexion = new Thread ( ) { public void run ( ) { try { socket = new Socket ( serverName , serverPort ) ; out = new ObjectOutputStream ( socket . getOutputStream ( ) ) ; out . flush ( ) ; in = new ObjectInputStream ( socket . getInputStream ( ) ) ; fenetre . changerVue ( new MessageView ( "Connexion r\u00E9ussie !" , new MessageView ( "<html>Attente du choix de partie <br/>et du placement des bateaux de l'adversaire...</html>" ) , true ) ) ; recevoirModele ( ) ; fenetre . changerVue ( new PlacementView ( ) ) ; } catch ( Exception e ) { } } } ; connexion . start ( ) ; }
tr	KEY	public int getMainUsageId ( ) { return mainUsageId ; }
tr	IDF	public static BLOBEnables parseBLOBEnable ( String BLOBEnable ) throws IllegalArgumentException { if ( BLOBEnable . compareTo ( "Never" ) == 0 ) { return BLOBEnables . NEVER ; } else if ( BLOBEnable . compareTo ( "Also" ) == 0 ) { return BLOBEnables . ALSO ; } else if ( BLOBEnable . compareTo ( "Only" ) == 0 ) { return BLOBEnables . ONLY ; } throw new IllegalArgumentException ( "Invalid BLOBEnable String: '" + BLOBEnable + "'" ) ; }
tr	KEY	public static BinaryOperatorFactory getBinaryOperatorFactory ( ) { return BINARY_OPERATOR_FACTORY ; }
tr	IDF	private void handleGameStarting ( ) { if ( System . currentTimeMillis ( ) - gameStateChangeTime >= 1000 ) { changeGameState ( GameState . PLAYING ) ; } }
tr	KEY	private void setComponentes ( ) { setTitle ( "Gest\u00E3o de Ferramentas" ) ; setLocationRelativeTo ( null ) ; setResizable ( false ) ; }
tr	KEY	public void remove ( ) { game . remove ( this ) ; }
tr	IDF	public boolean isSuperset ( Collection < ? > coll ) { if ( coll == this ) return true ; else if ( size ( ) < coll . size ( ) ) return false ; else if ( coll instanceof FLinkedHashSet ) { FLinkedHashSet < Object > flhs = ( FLinkedHashSet < Object > ) coll ; return FHashSet . isSubset ( flhs . set_tree , set_tree ) ; } else if ( coll instanceof FHashSet ) { FHashSet fhs = ( FHashSet ) coll ; return FHashSet . isSubset ( fhs . tree , set_tree ) ; } else if ( ! ( coll instanceof Set ) ) return false ; else { for ( Object elt : coll ) if ( ! FHashSet . contains ( set_tree , elt , hashCode ( elt ) ) ) return false ; return true ; } }
tr	KEY	public Lawnchair ( ) { }
tr	KEY	public Table ( ) { }
tr	IDF	@ Override public void stop ( ) { running . interrupt ( ) ; running = null ; }
tr	KEY	public String getServletInfo ( ) { return "Short description" ; }
tr	KEY	public void testApp ( ) { assertTrue ( true ) ; }
tr	KEY	public double getReldepth ( ) { return reldepth ; }
tr	IDF	public void loadData ( ) { tablemodel . setRowCount ( 0 ) ; people = model . getPeople ( ) ; int lp = 1 ; for ( Category person : people ) { tablemodel . addRow ( new Object [ ] { lp , person . getId ( ) , person . getName ( ) } ) ; lp ++ ; } people . clear ( ) ; }
tr	KEY	public int compare ( int firstInt , int secondInt ) { return 0 ; }
tr	KEY	public static BundleContext getBundleContext ( ) { return _bundleContext ; }
tr	IDF	@ Override public void actionPerformed ( ActionEvent e ) { UIManager . put ( "control" , new ColorUIResource ( 214 , 217 , 223 ) ) ; UIManager . put ( "ProgressBar.background" , new ColorUIResource ( 214 , 217 , 223 ) ) ; UIManager . put ( "nimbusBase" , new ColorUIResource ( 51 , 98 , 140 ) ) ; UIManager . put ( "nimbusBlueGrey" , new ColorUIResource ( 169 , 176 , 190 ) ) ; UIManager . put ( "nimbusFocus" , new ColorUIResource ( 115 , 164 , 209 ) ) ; SwingUtilities . updateComponentTreeUI ( frame ) ; SwingUtilities . updateComponentTreeUI ( ThemeSelector . this ) ; }
tr	IDF	public void run ( ) { | . setValue ( % ) ; }
tr	IDF	public boolean applyTechnniqueNakedPairCol ( ) { boolean removedSomething = false ; try { int emptyNumber = getNextMostConstrainedEmptyElementNumber ( ) ; int puzzleSize = this . getSize ( ) ; int tmpNumber ; int tmpRowNumber ; boolean foundNakedPair = false ; Integer [ ] firstCandidateStorageArray = new Integer [ 2 ] ; Integer [ ] secondCandidateStorageArray = new Integer [ 2 ] ; while ( emptyNumber < puzzleSize * puzzleSize ) { if ( elementWithNumberIsEmpty ( emptyNumber ) && getValidValuesForElementWithNumber ( emptyNumber ) . size ( ) == 2 ) { firstCandidateStorageArray = this . validElementsCache . get ( emptyNumber ) . toArray ( firstCandidateStorageArray ) ; tmpRowNumber = emptyNumber ; tmpNumber = emptyNumber - ( ( emptyNumber / puzzleSize ) * puzzleSize ) ; for ( int i = 0 ; i < puzzleSize && ! foundNakedPair && tmpNumber < puzzleSize * puzzleSize ; i ++ ) { if ( elementWithNumberIsEmpty ( tmpNumber ) && getValidValuesForElementWithNumber ( tmpNumber ) . size ( ) == 2 && tmpNumber != emptyNumber ) { secondCandidateStorageArray = this . validElementsCache . get ( tmpNumber ) . toArray ( secondCandidateStorageArray ) ; if ( firstCandidateStorageArray [ 0 ] == secondCandidateStorageArray [ 0 ] && firstCandidateStorageArray [ 1 ] == secondCandidateStorageArray [ 1 ] ) { foundNakedPair = true ; int checkCellNumber = emptyNumber - ( ( emptyNumber / puzzleSize ) * puzzleSize ) ; for ( int j = 0 ; j < puzzleSize && checkCellNumber < puzzleSize * puzzleSize ; j ++ ) { if ( elementWithNumberIsEmpty ( checkCellNumber ) && checkCellNumber != tmpNumber && checkCellNumber != emptyNumber ) { Set < Integer > beforeRemove = new HashSet < Integer > ( this . validElementsCache . get ( checkCellNumber ) ) ; this . removeValueForElementWithNumber ( checkCellNumber , firstCandidateStorageArray [ 0 ] ) ; this . removeValueForElementWithNumber ( checkCellNumber , firstCandidateStorageArray [ 1 ] ) ; if ( ! beforeRemove . equals ( this . validElementsCache . get ( checkCellNumber ) ) ) { removedSomething = true ; } } checkCellNumber = checkCellNumber + puzzleSize ; } if ( removedSomething ) { return true ; } else { foundNakedPair = false ; } } } tmpNumber = tmpNumber + puzzleSize ; } while ( tmpRowNumber % puzzleSize != 0 ) { tmpRowNumber -- ; } for ( int i = 0 ; i < puzzleSize && ! foundNakedPair && tmpRowNumber < puzzleSize * puzzleSize ; i ++ ) { if ( elementWithNumberIsEmpty ( tmpRowNumber ) && getValidValuesForElementWithNumber ( tmpRowNumber ) . size ( ) == 2 && tmpRowNumber != emptyNumber ) { secondCandidateStorageArray = this . validElementsCache . get ( tmpRowNumber ) . toArray ( secondCandidateStorageArray ) ; if ( firstCandidateStorageArray [ 0 ] == secondCandidateStorageArray [ 0 ] && firstCandidateStorageArray [ 1 ] == secondCandidateStorageArray [ 1 ] ) { foundNakedPair = true ; int checkRowCellNumber = tmpRowNumber ; while ( checkRowCellNumber % puzzleSize != 0 ) { checkRowCellNumber -- ; } for ( int j = 0 ; j < puzzleSize && checkRowCellNumber < puzzleSize * puzzleSize ; j ++ ) { if ( elementWithNumberIsEmpty ( checkRowCellNumber ) && checkRowCellNumber != tmpRowNumber && checkRowCellNumber != emptyNumber ) { Set < Integer > beforeRemove = new HashSet < Integer > ( this . validElementsCache . get ( checkRowCellNumber ) ) ; this . removeValueForElementWithNumber ( checkRowCellNumber , firstCandidateStorageArray [ 0 ] ) ; this . removeValueForElementWithNumber ( checkRowCellNumber , firstCandidateStorageArray [ 1 ] ) ; if ( ! beforeRemove . equals ( this . validElementsCache . get ( checkRowCellNumber ) ) ) { removedSomething = true ; } } checkRowCellNumber ++ ; } if ( removedSomething ) { return true ; } else { foundNakedPair = false ; } } } tmpRowNumber ++ ; } } emptyNumber ++ ; } return false ; } catch ( NoElementsEmptyException e ) { return false ; } }
tr	KEY	public CreateResponse createCreateResponse ( ) { return new CreateResponse ( ) ; }
tr	KEY	public synchronized void xsetXInitialDelay ( int a ) { xID = a ; }
tr	KEY	@ Override public int hashCode ( ) { return 31 * id ; }
tr	IDF	@ XmlElementDecl ( namespace = "http://api.soap.mytxtbuddy.com/" , name = "resendVerificationMail" ) public JAXBElement < ResendVerificationMail > createResendVerificationMail ( ResendVerificationMail value ) { return new JAXBElement < ResendVerificationMail > ( _ResendVerificationMail_QNAME , ResendVerificationMail . class , null , value ) ; }
tr	KEY	public void rotateX ( double radians ) ;
tr	IDF	public void actionPerformed ( ActionEvent e ) { int selRow = Integer . parseInt ( itemTable . getValueAt ( itemTable . getSelectedRow ( ) , 1 ) . toString ( ) ) ; fireDeleteEvent ( new CompanyEvent ( null , "produkty" , null , selRow , "" ) , "produkty" ) ; }
tr	IDF	@ Override public void addParameter ( Token token ) throws ParsingException { String value = token . getStringAndReset ( ) ; value = Characters . convertColumnName ( value ) ; log . debug ( value ) ; this . tempMainQuery . parameters . add ( value ) ; }
tr	KEY	public void setDebug ( boolean debug ) { this . debug = debug ; }
tr	IDF	public FTreeMap < Key , Val > union ( FMap < ? extends Key , ? extends Val > with_map , BinaryOp < Val > valCombiner ) { FTreeMap < Key , Val > with_ftm = new FTreeMap < Key , Val > ( with_map , comp ) ; Object t = union ( tree , with_ftm . tree , valCombiner ) ; return new FTreeMap < Key , Val > ( t , dflt , comp ) ; }
tr	KEY	public PalaceCard getFestivalCard ( ) { return this . festivalCard ; }
tr	IDF	public User addRemoteUser ( String username ) { User newUser = new User ( username ) ; remoteUsers . add ( newUser ) ; return newUser ; }
tr	KEY	public boolean isStarted ( ) { return started ; }
tr	KEY	public synchronized int xgetL1RepeatDelay ( ) { return l1RD ; }
tr	KEY	public abstract double getWidth ( ) ;
tr	KEY	public Builder buying ( double price ) { this . price = price ; return this ; }
tr	KEY	public static SvnSettings defaults ( ) { return new SvnSettings ( "svn" , CharsetUtil . UTF8 , true , true ) ; }
tr	KEY	public void setAttributeID ( long attributeID ) { this . attributeID = attributeID ; }
tr	KEY	public void setValPenPag_Entrega ( double ValPenPag_Entrega ) { this . ValPenPag_Entrega = ValPenPag_Entrega ; }
tr	KEY	public GetMessageStatusesByBatchResponse createGetMessageStatusesByBatchResponse ( ) { return new GetMessageStatusesByBatchResponse ( ) ; }
tr	IDF	public void removeArrayElement ( AbstractBeanTreeNode parentNode , int nodeIndex ) throws NoSuchMethodException , IllegalAccessException , InvocationTargetException { Object arrayObj = parentNode . getUserObject ( ) ; int arrayLength = Array . getLength ( arrayObj ) ; class componentType = parentNode . userObject . getClass ( ) . getComponentType ( ) ; Object newArrayObj = Array . newInstance ( componentType , arrayLength - 1 ) ; int i = 0 ; for ( ; i < nodeIndex ; i ++ ) { Object arrayElement = Array . get ( arrayObj , i ) ; Array . set ( newArrayObj , i , arrayElement ) ; } i = nodeIndex + 1 ; for ( ; i < arrayLength ; i ++ ) { Object arrayElement = Array . get ( arrayObj , i ) ; Array . set ( newArrayObj , ( i - 1 ) , arrayElement ) ; } setArrayObjectToAncestryArrayNodes ( parentNode , newArrayObj ) ; }
tr	IDF	public static Map < MileStone , long > getMap ( Vector < MileStone > vector ) { Map < MileStone , long > map = new HashMap < MileStone , long > ( ) ; for ( int i = 0 ; i < vector . size ( ) ; i ++ ) { map . put ( vector . get ( i ) , vector . get ( i ) . getTimeInMillis ( ) ) ; } return map ; }
tr	KEY	public Token setComplete ( boolean complete ) { this . complete = complete ; return this ; }
tr	KEY	public int getHighestBet ( ) { return highestBet ; }
tr	IDF	public void registerPlayer ( int playerID , String playerName ) { Game g = games . get ( 0 ) ; Player p = new Player ( playerName , playerID ) ; int snakeCnt = g . getSnakeCount ( ) ; Snake s = new Snake ( p , 10 , 2 * ( snakeCnt + 1 ) , Snake . SNAKE_DIR_SOUTH ) ; g . add ( s ) ; g . printPlayers ( ) ; commIF . ucastPlayer ( playerID , playerName , s . getHexColor ( ) ) ; g . updatePlayerInfos ( ) ; }
tr	IDF	private void addHelpMenu ( ) { JMenuBar jb = this . getJMenuBar ( ) ; if ( jb == null ) jb = new JMenuBar ( ) ; JMenu menu = new JMenu ( "help" ) ; menu . add ( ElementLists . dynamic_system . getHelpItem ( ) ) ; jb . add ( menu ) ; this . setJMenuBar ( jb ) ; }
tr	KEY	public RequestTIPPBuilder ( ) { super ( true ) ; }
tr	KEY	@ Override public void anotherCall ( ) { }
tr	IDF	public void setName ( String name ) { this . name = name ; }
tr	IDF	public void mousePressed ( MouseEvent arg0 ) { if ( includeField . getText ( ) . equals ( INCLUDE_RECOMMAND_STRING ) ) { includeField . setText ( "" ) ; } }
tr	IDF	public FriendshStatus [ ] findByDynamicSelect ( String sql , Object [ ] sqlParams ) throws FriendshStatusDaoException ;
tr	IDF	public Tir tirAleatoire ( ) { Tir t = null ; switch ( niveau ) { case FACILE : t = tirFacile ( ) ; break ; case MOYEN : t = tirMoyen ( ) ; break ; case DIFFICILE : t = tirDifficile ( ) ; } return t ; }
tr	IDF	public List < Integer > inorderTraversal ( TreeNode root ) { Stack < TreeNode > first = new Stack < TreeNode > ( ) ; Stack < TreeNode > second = new Stack < TreeNode > ( ) ; List < Integer > result = new ArrayList < Integer > ( ) ; if ( root == null ) return result ; first . add ( root ) ; while ( ! first . isEmpty ( ) || ! second . isEmpty ( ) ) { System . out . print ( first . isEmpty ( ) ) ; System . out . println ( second . isEmpty ( ) ) ; if ( ! first . isEmpty ( ) ) { root = first . pop ( ) ; if ( root . left != null ) { first . add ( root . left ) ; } second . add ( root ) ; } else if ( ! second . isEmpty ( ) ) { root = second . pop ( ) ; result . add ( root . val ) ; dbg ( root . val ) ; if ( root . right != null ) first . add ( root . right ) ; } } return result ; }
tr	IDF	public CLoginProps ( ) { try { InputStream finp = this . getClass ( ) . getResourceAsStream ( CLoginProps . PropFile ) ; Properties props = new Properties ( ) ; props . load ( finp ) ; LoginPageAboveFile = props . getProperty ( "LoginPageAboveFile" ) ; LoginPageBelowFile = props . getProperty ( "LoginPageBelowFile" ) ; ErrorLogFile = props . getProperty ( "ErrorLogFile" ) ; UsageLogFile = props . getProperty ( "UsageLogFile" ) ; PwLifeDays = Integer . parseInt ( props . getProperty ( "PwLifeDays" ) ) ; MinPassDiff = Integer . parseInt ( props . getProperty ( "MinPassDiff" ) ) ; MinPassLower = Integer . parseInt ( props . getProperty ( "MinPassLower" ) ) ; MinPassUpper = Integer . parseInt ( props . getProperty ( "MinPassUpper" ) ) ; MinPassDigit = Integer . parseInt ( props . getProperty ( "MinPassDigit" ) ) ; MinPassSpecial = Integer . parseInt ( props . getProperty ( "MinPassSpecial" ) ) ; MinPassLeng = java . lang . Math . max ( ( MinPassLower + MinPassUpper + MinPassDigit + MinPassSpecial ) , Integer . parseInt ( props . getProperty ( "MinPassLength" ) ) ) ; MaxPassLeng = Integer . parseInt ( props . getProperty ( "MaxPassLeng" ) ) ; MaxUserLeng = Integer . parseInt ( props . getProperty ( "MaxUserLeng" ) ) ; MaxLoginTries = Integer . parseInt ( props . getProperty ( "MaxLoginTries" ) ) ; MaxLoginFails = Integer . parseInt ( props . getProperty ( "MaxLoginFails" ) ) ; FailLockPeriod = Integer . parseInt ( props . getProperty ( "FailLockPeriod" ) ) * 60 * 1000 ; HashMethod = props . getProperty ( "HashMethod" ) ; } catch ( Exception ex ) { System . err . println ( "Error fetching properties: " + ex . getMessage ( ) ) ; } }
tr	KEY	public void setLettersLeft ( int lettersLeft ) { this . lettersLeft = lettersLeft ; }
tr	IDF	public Particle ( int x , int y , float xa , float ya ) { this ( x , y , xa , ya , ( int ) ( Math . random ( ) * 2 ) , 0 ) ; }
tr	KEY	@ Override public int getStatisticCountRight ( ) { return statisticCountRight ; }
tr	KEY	public boolean setSelectedAction ( MAction selectedAction ) { this . selectedAction = selectedAction ; return true ; }
tr	IDF	private void runApplication ( ) { this . imageViewerControl . viewImage ( "waitIcon.jpg" ) ; try { builder . buildBoard ( optionDialog . getRowsAmount ( ) , optionDialog . getColumnAmount ( ) , optionDialog . getMinesAmount ( ) ) ; board . setBoard ( builder . getBoard ( ) , builder . getMinesNumber ( ) ) ; applicationFrame . getBoardViewer ( ) . load ( board ) ; applicationFrame . execute ( ) ; } catch ( BuilderException ex ) { Dialog errorDialog = createErrorDialog ( ex . getMessage ( ) ) ; errorDialog . showDialog ( ) ; optionDialog . showDialog ( ) ; } }
tr	IDF	public void setCheckIn ( Collection < String > checkIn ) ;
tr	KEY	public void close ( ) { state . close ( this ) ; }
tr	IDF	public void setThird ( int x , int y ) { vertices [ THIRD ] = new Point ( x , y ) ; }
tr	KEY	public void incrementIrrigationTile ( ) { irrigationTiles ++ ; }
tr	IDF	public static void setCadena ( String Cadena ) { Conexion . Cadena = Cadena ; }
tr	KEY	public void orderShow ( ) ;
tr	IDF	public ArrayList < VoyageBean > getAllActives ( ) { session = sf . openSession ( ) ; Query query = session . createQuery ( "from VoyageBean" ) ; ArrayList < VoyageBean > e = ( ArrayList < VoyageBean > ) query . list ( ) ; session . close ( ) ; return e ; }
tr	KEY	public void setError ( double error ) { this . error = error ; }
tr	KEY	public static void cancelAction ( ) { GameRobot . pressEscape ( ) ; }
tr	IDF	public void setValue ( String value ) { this . value = value ; }
tr	KEY	public void setaProcesar ( int aProcesar ) { this . aProcesar = aProcesar ; }
tr	IDF	public Sleep ( String character ) { this . character = character ; }
tr	IDF	@ Override public int compareTo ( Node o ) { return ( int ) Math . floor ( distance ( ) - o . distance ( ) ) ; }
tr	IDF	public Node ( DataPoint dataPoint ) { this . dataPoint = dataPoint ; location = new Point2D . double ( 0 , 0 ) ; }
tr	KEY	@ JsonProperty ( "influence" ) public long getInfluence ( ) { return influence ; }
tr	IDF	public static < T > Subscription assertCount ( Observable < T > in , final int max ) { return assertCountThen ( in , new Action0 ( ) { @ Override public void call ( ) { } } , max ) ; }
tr	KEY	@ Override public void onBind ( class < ? extends IListener > listenerClass ) { }
tr	IDF	public FileRead ( File file ) throws FileNotFoundException { this . open ( file ) ; }
tr	IDF	public StoreActivity ( Main main ) { initComponents ( ) ; this . main = main ; this . setVisible ( false ) ; }
tr	IDF	public void setBillingAddress2 ( String billingAddress2 ) { this . billingAddress2 = billingAddress2 ; }
tr	KEY	public void onBroadcastSent ( ) ;
tr	IDF	public static void main ( String [ ] args ) { launch ( args ) ; }
tr	IDF	@ Test public void add ( ) throws SQLException { Date inicio = new Date ( 2013 , 1 , 1 ) ; Proyecto proyecto = new Proyecto ( "Prueba" , 2 , inicio , inicio ) ; mySQLDB = new MYSQLDB ( ) ; String sql = "insert into proyecto (descripcionproy  estadoproy  fechainicio  fechafinal)" + "values ('" + proyecto . getDescripcionProyecto ( ) + "'  " + proyecto . getEstadoProyecto ( ) + "  " + "'" + proyecto . getFechainicio ( ) + "' '" + proyecto . getFechafinal ( ) + "')" ; mySQLDB . execute ( sql ) ; mySQLDB . closeExecute ( ) ; }
tr	IDF	public void setFec_Venta ( Date Fec_Venta ) { this . Fec_Venta = Fec_Venta ; }
tr	IDF	public void setInput ( InputStream input ) { this . input = input ; }
tr	IDF	static void display ( ) { Iterator < String > itr = list . iterator ( ) ; while ( itr . hasNext ( ) ) { System . out . println ( itr . next ( ) ) ; } }
tr	KEY	public void setPlayerIDs ( int [ ] playerIDs ) { this . playerIDs = playerIDs ; }
tr	IDF	public Bomb plantBomb ( Player player ) { return board . plantBomb ( player ) ; }
tr	KEY	public int getId ( ) { return id ; }
tr	KEY	public abstract void moveTo ( double x , double y ) ;
tr	KEY	public JSONStringer ( ) { super ( new StringWriter ( ) ) ; }
tr	KEY	void close ( ) throws IOException ;
tr	IDF	@ Override protected void setPanel ( ) { setBorder ( BorderFactory . createLineBorder ( Color . BLACK ) ) ; setMinimumSize ( new Dimension ( dayNamePannelMinimumWidth , dayNamePannelMinimumHeight ) ) ; setPreferredSize ( new Dimension ( dayNamePannelMinimumWidth , dayNamePannelMinimumHeight ) ) ; }
tr	IDF	public PancakeHouseMenu ( String name , String description ) { super ( name , description ) ; }
tr	KEY	public static int abs ( int x ) { if ( x < 0 ) return - x ; return x ; }
tr	IDF	public void messageTres ( ) { System . out . println ( "Cria uma nova mensagem com o par\u00E2metro: " + this . message ) ; }
tr	KEY	public int getIntErr ( ) { return intErr ; }
tr	KEY	public Contributor getProvider ( ) { return this . provider ; }
tr	IDF	private static void test8 ( ) throws FileNotFoundException { String input = "new\n" + "pick up cell key\n" + "unlock cell door with cell key\n" + "quit\n" + "y\n" ; HashMap < Integer , String > output = new HashMap < Integer , String > ( ) ; boolean passed = true ; try { in = new ByteArrayInputStream ( input . getBytes ( ) ) ; System . setIn ( in ) ; out = new PrintStream ( "testing.txt" ) ; System . setOut ( out ) ; Game . main ( null ) ; } catch ( ExitException se ) { } catch ( Exception e ) { System . setOut ( stdout ) ; System . out . println ( "Error: " ) ; e . printStackTrace ( ) ; passed = false ; } finally { System . setOut ( stdout ) ; @ SuppressWarnings ( "resource" ) Scanner sc = new Scanner ( new File ( "testing.txt" ) ) ; ArrayList < String > testOutput = new ArrayList < String > ( ) ; while ( sc . hasNextLine ( ) ) { testOutput . add ( sc . nextLine ( ) ) ; } output . put ( 13 , "The guard walks toward your cell." ) ; output . put ( 14 , ">> You unlock the cell door." ) ; output . put ( 15 , "The guard peers into the cell  checking that the door is secured." ) ; output . put ( 16 , "The door swings open." ) ; output . put ( 17 , "You have been caught." ) ; output . put ( 18 , "YOU LOSE!" ) ; output . put ( testOutput . size ( ) - 1 , ">>" ) ; if ( passed ) { for ( Map . Entry < Integer , String > entry : output . entrySet ( ) ) { if ( ! testOutput . get ( entry . getKey ( ) ) . equals ( entry . getValue ( ) ) ) { passed = false ; System . out . println ( "test8 failed: Line " + entry . getKey ( ) ) ; System . out . println ( "\tExpected: " + entry . getValue ( ) ) ; System . out . println ( "\tReceived: " + testOutput . get ( entry . getKey ( ) ) ) ; } } if ( passed ) { System . out . println ( "test8 passed" ) ; } } else { System . out . println ( "test8 failed: error" ) ; } } }
tr	KEY	@ Override public Object getParent ( ) { return null ; }
tr	IDF	@ Override public void set ( int col , int row , double value ) { this . matrix [ row ] [ col ] = value ; }
tr	IDF	public DemoAgent ( ) { randomGenerator = new Random ( ) ; tp = new TrajectoryPlanner ( ) ; }
tr	IDF	public int getPixelDifference ( BufferedImage letter , BufferedImage template ) { int height = letter . getHeight ( ) ; int width = ( int ) ( ( double ) height / template . getHeight ( ) * template . getWidth ( ) ) ; if ( height == 0 || width == 0 ) return 0 ; template = VisionUtils . resizeImage ( template , height , width ) ; if ( width < letter . getWidth ( ) ) { int minX = ( letter . getWidth ( ) - width ) / 2 ; width = letter . getWidth ( ) ; BufferedImage temp = new BufferedImage ( width , height , BufferedImage . TYPE_INT_RGB ) ; Graphics2D g = temp . createGraphics ( ) ; g . drawImage ( template , null , minX , 0 ) ; template = temp ; } else { int minX = ( width - letter . getWidth ( ) ) / 2 ; BufferedImage temp = new BufferedImage ( width , height , BufferedImage . TYPE_INT_RGB ) ; Graphics2D g = temp . createGraphics ( ) ; g . drawImage ( letter , null , minX , 0 ) ; letter = temp ; } return VisionUtils . imageDifference ( letter , template ) ; }
tr	IDF	public boolean isRoleUser ( ) { return ( role . equals ( manapp . CAppConsts . RoleAdmin ) || role . equals ( manapp . CAppConsts . RoleUser ) ) ; }
tr	IDF	public SecurityGoal findExhausiveSecurityGoalByAttributes ( String importance , String attribute , String asset , String interval ) { for ( SecurityGoal sg : sg_elems ) { if ( sg . getImportance ( ) . equals ( importance ) && sg . getSecurityAttribute ( ) . equals ( attribute ) && sg . getAsset ( ) . equals ( asset ) && sg . getInterval ( ) . getId ( ) . equals ( interval ) ) { return sg ; } } return null ; }
tr	KEY	public int getSize ( ) { return strings . length ; }
tr	IDF	public static void main ( String [ ] args ) { int count = 0 ; for ( int i = 0 ; i < 1000000000 ; i ++ ) { if ( i % 1000000 == 0 ) System . out . println ( "i = " + i ) ; if ( i % 10 != 0 && reversible ( i ) ) count ++ ; } System . out . println ( count ) ; }
tr	KEY	public Set < long > getPopulations ( ) { return populations ; }
tr	KEY	public void setFinished ( boolean finished ) { this . finished = finished ; }
tr	IDF	private void jBCadastrarMaquinaActionPerformed ( java . awt . event . ActionEvent evt ) { new TelaGestaoMaquina ( this , true ) . setVisible ( true ) ; }
tr	IDF	public void rotate ( double rx , double ry , double rz ) { Transform3D oldT3D = new Transform3D ( ) ; this . get3DPresentation ( ) . getTransform ( oldT3D ) ; Vector3d rotate = new Vector3d ( ) ; rotate . set ( rx , ry , rz ) ; Transform3D localT3D = new Transform3D ( ) ; localT3D . setEuler ( rotate ) ; Transform3D newT3D = new Transform3D ( ) ; newT3D . mul ( oldT3D , localT3D ) ; this . get3DPresentation ( ) . setTransform ( newT3D ) ; }
tr	IDF	@ ManyToMany ( fetch = FetchType . EAGER ) @ JoinTable ( name = "gallery_image_has_message" , joinColumns = @ JoinColumn ( name = "gallery_image_idgallery_image" ) , inverseJoinColumns = @ JoinColumn ( name = "message_idmessage" ) ) public List < Message > getMessages ( ) { return messages ; }
tr	IDF	public CachedMap ( Map < K , V > map , int cacheSize ) { this . map = map ; if ( cacheSize < 10 ) this . cacheSize = 20 ; else this . cacheSize = cacheSize ; }
tr	KEY	private String getHpText ( ) { return "\u2661" + ( int ) getHP ( ) + " " ; }
tr	KEY	public synchronized int xgetS2AssignedKeyCode ( ) { return s2 ; }
tr	IDF	@ Override public void mouseEntered ( MouseEvent arg0 ) { }
tr	IDF	@ Override public void onCommandReceived ( String commandName , List < CommandArgument < ? >> commandArgs , long commandId ) { synchronized ( mListeners ) { for ( CommandListener listener : mListeners ) { try { listener . onCommandReceived ( commandName , commandArgs , commandId ) ; } catch ( RuntimeException e ) { System . err . println ( "Error notifying listeners! " + e . getMessage ( ) ) ; e . printStackTrace ( ) ; } } } }
tr	IDF	void addSection ( TIPPSection section ) { sections . put ( section . getType ( ) , section ) ; }
tr	IDF	private void JBtnDeleteActionPerformed ( java . awt . event . ActionEvent evt ) { System . out . println ( " ****   Delete  button clicked ! " ) ; if ( ! currentObjName . contains ( "object" ) ) { JOptionPane . showMessageDialog ( this , "Please choose the object to delete." , "Error " , JOptionPane . ERROR_MESSAGE ) ; } else { System . out . println ( " Request to delete the object: " + currentObjName ) ; _cuniv . p2cDeleteObject ( currentObjName ) ; } }
tr	KEY	private boolean formatCheck ( boolean isAudio ) { if ( isAudio == true ) { if ( _outFileT . getText ( ) . endsWith ( ".mp3" ) ) { return true ; } else { return false ; } } else { if ( _outFileT . getText ( ) . endsWith ( ".mp4" ) ) { return true ; } else { return false ; } } }
tr	IDF	@ Override public void modelPropertyChange ( PropertyChangeEvent evt ) { for ( int i = 0 ; i < daysName . length ; i ++ ) { daysName [ i ] . setText ( controller . getModel ( ) . getDayName ( i ) ) ; } }
tr	KEY	public void setUnidades ( double unidades ) { this . unidades = unidades ; }
tr	KEY	public int getLastPlanningModeActionID ( ) { return lastPlanningModeActionID ; }
tr	IDF	static int cubicRootsInAB ( float d , float a , float b , float c , float [ ] pts , final int off , final float A , final float B ) { if ( d == 0f ) { int num = quadraticRoots ( a , b , c , pts , off ) ; return filterOutNotInAB ( pts , off , num , A , B ) - off ; } a /= d ; b /= d ; c /= d ; double sq_A = a * a ; double p = ( 1.0 / 3.0 ) * ( ( - 1.0 / 3.0 ) * sq_A + b ) ; double q = ( 1.0 / 2.0 ) * ( ( 2.0 / 27.0 ) * a * sq_A - ( 1.0 / 3.0 ) * a * b + c ) ; double cb_p = p * p * p ; double D = q * q + cb_p ; int num ; if ( D < 0.0 ) { final double phi = ( 1.0 / 3.0 ) * acos ( - q / sqrt ( - cb_p ) ) ; final double t = 2.0 * sqrt ( - p ) ; pts [ off + 0 ] = ( float ) ( t * cos ( phi ) ) ; pts [ off + 1 ] = ( float ) ( - t * cos ( phi + ( PI / 3.0 ) ) ) ; pts [ off + 2 ] = ( float ) ( - t * cos ( phi - ( PI / 3.0 ) ) ) ; num = 3 ; } else { final double sqrt_D = sqrt ( D ) ; final double u = cbrt ( sqrt_D - q ) ; final double v = - cbrt ( sqrt_D + q ) ; pts [ off ] = ( float ) ( u + v ) ; num = 1 ; if ( within ( D , 0.0 , 1e-8 ) ) { pts [ off + 1 ] = - ( pts [ off ] / 2f ) ; num = 2 ; } } final float - = ( 1f / 3f ) * a ; for ( int i = 0 ; i < num ; ++ i ) { pts [ off + i ] -= - ; } return filterOutNotInAB ( pts , off , num , A , B ) - off ; }
tr	IDF	@ Override protected void onAction ( HashMap < String , String > params ) { if ( ! IntervalManager . this . triggerList . contains ( fetchListTrigger ) ) { Manager . getInstance ( ) . publishTask ( fetchListTask ) ; IntervalManager . this . triggerList . add ( fetchListTrigger ) ; fetchListTrigger . start ( ) ; } }
tr	IDF	public void actionPerformed ( ActionEvent e ) { currentConstructor = factory . getConstructorMap ( ) . get ( ( ( JMenuItem ) e . getSource ( ) ) . getActionCommand ( ) ) ; if ( currentConstructor . getName ( ) == "creatures.Plant" || currentConstructor . getName ( ) == "creatures.Herbivore" ) { add ( gui , BorderLayout . EAST ) ; plantHerbiStartSimulationButtonListener ( ) ; } else { remove ( gui ) ; defaultStartSimulationButtonListener ( ) ; } repaint ( ) ; revalidate ( ) ; pack ( ) ; }
tr	IDF	public FColor ( int r , int g , int b , int a ) { super ( r , g , b , a ) ; value = ( ( a & FF ) << 24 ) | ( ( r & FF ) << 16 ) | ( ( g & FF ) << 8 ) | ( ( b & FF ) << 0 ) ; }
tr	KEY	public Clams createClam ( ) { return new FreshClams ( ) ; }
tr	KEY	public void read ( ) throws EOFException ;
tr	KEY	public int getId_Lab ( ) { return Id_Lab ; }
tr	IDF	public LMainPanel ( ActionListener logoutAction ) { JLabel label = new JLabel ( "Main Panel" ) ; this . add ( label ) ; logoutButton = new JButton ( "LOGOUT" ) ; logoutButton . addActionListener ( logoutAction ) ; this . add ( logoutButton ) ; }
tr	KEY	public Event ( ) { }
tr	IDF	protected void forceConstraints ( ) { if ( x < min_x ) { x = min_x ; } else if ( x > max_x ) { x = max_x ; } if ( y < min_y ) { y = min_y ; } else if ( y > max_y ) { y = max_y ; } }
tr	KEY	public int getId_Entrega ( ) { return Id_Entrega ; }
tr	IDF	public void askFriendsh ( User inviter , User invitee ) ;
tr	KEY	public int getRowCount ( ) throws IllegalStateException { if ( ! connectedToDatabase ) throw new IllegalStateException ( "Not Connected to Database" ) ; return numberOfRows ; }
tr	KEY	public int getMaxRows ( ) { return maxRows ; }
tr	KEY	protected void setNbBomb ( int nbBombMax ) { this . nbBombMax = nbBombMax ; }
tr	IDF	@ Override protected void setEstadoEdicao ( ) { jTFChamado . setEditable ( true ) ; jTFFerramenta . setEditable ( true ) ; jTFChamado . requestFocusInWindow ( ) ; }
tr	KEY	private void setTxtComponent ( JTextComponent txtComponent2 ) { if ( txtComponent2 == null ) throw new IllegalArgumentException ( "Text component cannot be null!" ) ; this . txtComponent = txtComponent2 ; }
tr	KEY	public int getId ( ) { return id ; }
tr	KEY	public CreerEnvoi ( ) { super ( ) ; }
tr	KEY	@ Override public void putCharWhileLineComment ( char c ) throws ParsingException { }
tr	IDF	public static Vector2D vec2DRotateAroundOrigin ( Vector2D v , double ang ) { Matrix2D mat = new Matrix2D ( ) ; ; mat . rotate ( ang ) ; return mat . transformVector2D ( v ) ; }
tr	IDF	private void closetabBtn3ActionPerformed ( java . awt . event . ActionEvent evt ) { this . getParent ( ) . remove ( this ) ; }
tr	KEY	public Elt last ( ) { if ( tree == null ) throw new NoSuchElementException ( ) ; else return ( Elt ) last ( tree ) ; }
tr	KEY	public int getNumPalaceCards ( ) { return this . palaceCards . size ( ) ; }
tr	IDF	@ Override public void actionPerformed ( ActionEvent e ) { String s = ( String ) speed . getSelectedItem ( ) ; if ( s . equals ( SPEED_FAST ) ) { adapter . newGameSpeedIs ( 2 ) ; } else if ( s . equals ( SPEED_MEDIUM ) ) { adapter . newGameSpeedIs ( 1 ) ; } else if ( s . equals ( SPEED_SLOW ) ) { adapter . newGameSpeedIs ( 0 ) ; } }
va	KEY	public void setCoefficient ( double coefficient ) { this . coefficient = coefficient ; }
va	KEY	public void remove ( ) { throw new UnsupportedOperationException ( ) ; }
va	IDF	public static INDIOneElementTextProperty createSaveableOneElementTextProperty ( INDIDriver driver , String name , String label , String group , PropertyStates state , PropertyPermissions permission , String value ) throws IllegalArgumentException { INDIOneElementTextProperty tp = loadOneElementTextProperty ( driver , name ) ; if ( tp == null ) { tp = new INDIOneElementTextProperty ( driver , name , label , group , state , permission , value ) ; tp . setSaveable ( true ) ; } return tp ; }
va	IDF	public Invite [ ] findWhereInviteDateEquals ( Date inviteDate ) throws InviteDaoException { return findByDynamicSelect ( SQL_SELECT + " WHERE inviteDate = ? ORDER BY inviteDate" , new Object [ ] { inviteDate == null ? null : new java . sql . Timestamp ( inviteDate . getTime ( ) ) } ) ; }
va	KEY	public boolean isCellEditable ( int rowIndex , int columnIndex ) { return canEdit [ columnIndex ] ; }
va	IDF	private static INDILightProperty loadLightProperty ( INDIDriver driver , String name ) { INDIProperty prop ; try { prop = INDIProperty . loadFromFile ( driver , name ) ; } catch ( INDIException e ) { return null ; } if ( ! ( prop instanceof INDILightProperty ) ) { return null ; } INDILightProperty lp = ( INDILightProperty ) prop ; lp . setSaveable ( true ) ; return lp ; }
va	IDF	private GenericX01Game createGame ( ) { Three01Game game = new Three01Game ( Arrays . asList ( new Player [ ] { one , two } ) ) ; return game ; }
va	IDF	protected INDIElement ( INDIProperty property , String name , String label ) throws IllegalArgumentException { this . property = property ; if ( name == null ) { throw new IllegalArgumentException ( "No name for Element" ) ; } name = name . trim ( ) ; if ( name . length ( ) == 0 ) { throw new IllegalArgumentException ( "No name for Element" ) ; } this . name = name ; if ( label == null ) { this . label = name ; } else { label = label . trim ( ) ; if ( label . length ( ) == 0 ) { this . label = name ; } else { this . label = label ; } } property . addElement ( this ) ; }
va	KEY	public Author ( ) { }
va	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { CheckNombreActionPerformed ( evt ) ; }
va	IDF	public void initKeywordList ( ) { keywordList = new ArrayList < Keyword > ( ) ; BufferedReader br = null ; try { File userListFile = new File ( "src/keywords.txt" ) ; String str = null ; if ( userListFile . exists ( ) ) { br = new BufferedReader ( new FileReader ( userListFile ) ) ; while ( ( str = br . readLine ( ) ) != null ) { keywordList . add ( new Keyword ( str ) ) ; } } else { userListFile . createNewFile ( ) ; } } catch ( FileNotFoundException e ) { e . printStackTrace ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } finally { if ( br != null ) { try { br . close ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } } }
va	KEY	public void setMaxRows ( int maxRows ) { this . maxRows = maxRows ; }
va	KEY	public long getWins ( ) { return wins ; }
va	KEY	public HookSysTray ( ) { }
va	KEY	protected void interrupted ( ) { }
va	KEY	public int getFullWidth ( ) { return width ; }
va	IDF	private void deleteCategoryById ( int id ) { try ( Connection conn = DevDBConfig . getConnection ( ) ) { try ( Statement stmt = conn . createStatement ( ) ) { String sql = "DELETE FROM categories WHERE id = " + id ; stmt . executeUpdate ( sql ) ; } } catch ( SQLException e ) { e . printStackTrace ( ) ; } }
va	IDF	private void loadFiles ( Properties pro ) { Enumeration < Object > enu = pro . keys ( ) ; while ( enu . hasMoreElements ( ) ) { String key = ( String ) enu . nextElement ( ) ; if ( key . contains ( "." ) == false ) { String filePath = pro . getProperty ( key ) . trim ( ) ; String cachId = key + ".size" ; int cacheSize = 0 ; if ( pro . contains ( cachId ) ) { cacheSize = Integer . parseInt ( ( String ) pro . get ( cachId ) ) ; } try { QueryMap qm = QueryFactory . createQueryMap ( filePath , cacheSize ) ; maps . put ( key , qm ) ; } catch ( ParsingException e ) { e . printStackTrace ( ) ; return ; } } } }
va	KEY	public float getWidth ( ) { return ( float ) width ; }
va	KEY	public char getType ( ) { return type ; }
va	KEY	public void close ( ) throws IOException { super . close ( ) ; closed = true ; }
va	KEY	public boolean isNodata ( ) ;
va	KEY	public int getNbReject ( ) { return nbReject ; }
va	KEY	public boolean optBoolean ( int index ) { return optBoolean ( index , false ) ; }
va	IDF	public static void main ( String [ ] args ) { CalculadorDeDesconto descontos = new CalculadorDeDesconto ( ) ; Orcamento orcamento = new Orcamento ( 450 ) ; orcamento . adicionaItem ( new Item ( "CANETA" , 25.0 ) ) ; orcamento . adicionaItem ( new Item ( "LAPIS" , 25.0 ) ) ; double descontoFinal = descontos . calcula ( orcamento ) ; System . out . println ( descontoFinal ) ; }
va	KEY	public EndTurnAction ( ) { }
va	IDF	private static ProductModel parseModel ( Connection conn , ResultSet rs ) throws SQLException { int id = rs . getInt ( "id" ) ; String name = rs . getString ( "name" ) ; String description = rs . getString ( "description" ) ; double price = rs . getDouble ( "cost" ) ; double rrp = rs . getDouble ( "rrp" ) ; int productType = rs . getInt ( "product_type" ) ; List < Integer > categories = getCategories ( conn , id ) ; return ProductModel . builder ( name , productType ) . id ( id ) . description ( description ) . cost ( price ) . rrp ( rrp ) . categories ( categories ) . build ( ) ; }
va	IDF	@ Override public boolean isEnemyForces ( ShootingObject target ) { switch ( getTeam ( ) ) { case FRIEND_TEAM : return target . getTeam ( ) == TEAM . ENEMY_TEAM ; case ENEMY_TEAM : return target . getTeam ( ) == TEAM . FRIEND_TEAM ; default : return false ; } }
va	KEY	public abstract int build ( int start , int length , int floor , MyLevel level ) ;
va	KEY	public int getId ( ) { return id ; }
va	KEY	public int getNumSquare ( ) { return sq . length ; }
va	KEY	@ Override public int getSize ( ) { return size ; }
va	IDF	@ Override public Vector multiply ( Vector x ) { if ( x . getNumberOfEntries ( ) != m ) { throw new IllegalArgumentException ( "Number of Entries in Vector must match number of columns in matrix!" ) ; } ArrayVector av = new ArrayVector ( ) ; av . initialize ( n ) ; for ( int i = 0 ; i < n ; ++ i ) { int I = i * m ; double sum = 0. ; for ( int j = 0 ; j < m ; ++ j ) { sum += v [ I + j ] * x . get ( j ) ; } av . set ( i , sum ) ; } return av ; }
va	IDF	public Elt next ( ) { Object elt ; if ( inode == null ) throw new NoSuchElementException ( ) ; else if ( ! ( inode . subtree instanceof Node ) ) elt = ( ( Object [ ] ) inode . subtree ) [ inode . index ] ; else { Node node = ( Node ) inode . subtree ; if ( node . element instanceof EquivalentSet ) { ArrayList < Object > al = ( ( EquivalentSet ) node . element ) . contents ; elt = al . get ( inode . index - 1 ) ; } else elt = node . element ; } inode . index ++ ; canonicalize ( ) ; return ( Elt ) elt ; }
va	IDF	GameCharacterObject toggleVisible ( ) ;
va	IDF	private void initFirstOrderTable ( ) { numPAs = F * N ; numPARs = F * N * L ; p2id = new int [ N ] ; wordFvs = new FeatureVector [ N ] ; wpU = new double [ N ] [ rank2 ] ; wpV = new double [ N ] [ rank2 ] ; ppW = new double [ numPARs ] [ ] ; cpX = new double [ numPARs ] [ ] ; contextFvs = new FeatureVector [ numPARs ] ; pathFvs = new FeatureVector [ numPARs ] ; parFvs = new FeatureVector [ numPARs ] ; parScores = new double [ numPARs ] ; for ( int i = 0 ; i < N ; ++ i ) p2id [ i ] = - 1 ; for ( int i = 0 ; i < F ; ++ i ) { int p = inst . frames [ i ] . predid ; Utils . assert ( p2id [ p ] == - 1 ) ; p2id [ p ] = i ; Utils . assert ( p2id [ p ] == inst . predIndex [ p ] ) ; if ( wordFvs [ p ] == null ) { wordFvs [ p ] = pipe . smnFactory . createWordFeatureVector ( inst , p ) ; parameters . projectU2 ( wordFvs [ p ] , wpU [ p ] ) ; parameters . projectV2 ( wordFvs [ p ] , wpV [ p ] ) ; } for ( int a = 0 ; a < N ; ++ a ) if ( ! isPruned ( p , a ) ) { if ( wordFvs [ a ] == null ) { wordFvs [ a ] = pipe . smnFactory . createWordFeatureVector ( inst , a ) ; parameters . projectU2 ( wordFvs [ a ] , wpU [ a ] ) ; parameters . projectV2 ( wordFvs [ a ] , wpV [ a ] ) ; } for ( int r = 0 ; r < L ; ++ r ) { int id = i * N * L + a * L + r ; contextFvs [ id ] = pipe . smnFactory . createContextFeatureVector ( inst , p , a , r ) ; cpX [ id ] = new double [ rank2 ] ; parameters . projectX2 ( contextFvs [ id ] , cpX [ id ] ) ; pathFvs [ id ] = pipe . smnFactory . createPathFeatureVector ( inst , p , a , r ) ; parFvs [ id ] = pipe . smnFactory . createPredArgLinkFeatures ( inst , p , a , r ) ; ppW [ id ] = new double [ rank2 ] ; parameters . projectW2 ( pathFvs [ id ] , ppW [ id ] ) ; parScores [ id ] = gamma2 * parameters . dotProduct2 ( parFvs [ id ] ) + ( 1 - gamma2 ) * parameters . dotProduct2 ( wpU [ p ] , wpV [ a ] , ppW [ id ] , cpX [ id ] ) ; } } } }
va	KEY	public boolean optBoolean ( int index , boolean defaultValue ) { try { return getBoolean ( index ) ; } catch ( Exception e ) { return defaultValue ; } }
va	KEY	public int getPorcentajeBlanco ( ) { return porcentajeBlanco ; }
va	IDF	public void setDni ( String dni ) { this . dni = dni ; }
va	IDF	public Update ( Box box ) { double [ ] update = box . getUpdate ( ) ; fields . put ( "id" , new Integer ( box . getId ( ) ) ) ; fields . put ( "x" , new double ( update [ 0 ] ) ) ; fields . put ( "y" , new double ( update [ 1 ] ) ) ; fields . put ( "s" , new double ( update [ 2 ] ) ) ; fields . put ( "a" , new double ( update [ 3 ] * 180 / Math . PI ) ) ; fields . put ( "f" , new Integer ( ( int ) update [ 4 ] ) ) ; }
va	KEY	public MsgDaoImpl ( ) { }
va	IDF	public IdHandler ( TokenContext context ) { super ( context ) ; this . token = new Token ( ) ; }
va	KEY	public abstract int getNumberOfFilters ( ) ;
va	IDF	@ Override public String getStatement ( ) { if ( plusSign ) return "x + " + getX ( ) + " = " + getY ( ) ; else return "x - " + getX ( ) + " = " + getY ( ) ; }
va	KEY	@ Override public void restart ( ) { this . button . setIcon ( null ) ; this . image = null ; this . setBorder ( null ) ; this . setBackground ( null ) ; this . remove ( label ) ; this . addComponents ( ) ; }
va	IDF	@ Override public int hashCode ( ) { int hash = 0 ; hash += ( idlaboratorios != null ? idlaboratorios . hashCode ( ) : 0 ) ; return hash ; }
va	KEY	public TipoJogador getTipoJogador ( ) { return this . tipoJogador ; }
va	IDF	public void jump ( boolean forceJump ) { if ( onGround || forceJump ) { onGround = false ; setVelocityY ( JUMP_SPEED ) ; } }
va	IDF	public ConstraintPuzzleCollectionPanel getSelectedCollectionPanel ( ) { if ( jTabbedPane2 . getSelectedIndex ( ) > 0 ) { ConstraintPuzzleCollectionPanel selectedPanel = ( ConstraintPuzzleCollectionPanel ) jTabbedPane2 . getSelectedComponent ( ) ; return selectedPanel ; } else { return null ; } }
va	IDF	@ Test public void testSeverity ( ) { CollectingErrorHandler status = new CollectingErrorHandler ( ) ; status . reportError ( INVALID_PAYLOAD_ZIP , "" , null ) ; status . reportError ( MISSING_MANIFEST , "" , null ) ; status . reportError ( MISSING_PAYLOAD_RESOURCE , "" , null ) ; assertEquals ( 3 , status . getErrors ( ) . size ( ) ) ; assertEquals ( FATAL , status . getMaxSeverity ( ) ) ; Set < TIPPError > errors = new HashSet < TIPPError > ( status . getErrors ( ) ) ; assertTrue ( errors . contains ( new TIPPError ( INVALID_PAYLOAD_ZIP , "" , null ) ) ) ; assertTrue ( errors . contains ( new TIPPError ( MISSING_MANIFEST , "" , null ) ) ) ; assertTrue ( errors . contains ( new TIPPError ( MISSING_PAYLOAD_RESOURCE , "" , null ) ) ) ; }
va	KEY	public static int getHigh ( long L ) { long l = L . longValue ( ) ; return ( int ) ( ( hmask & l ) >> 32 ) ; }
va	KEY	public SpriteTemplate [ ] [ ] getSprites ( ) { return this . sprites ; }
va	KEY	public void mousePressed ( final MouseEvent event ) { }
va	IDF	abstract public Point2D world2screen ( Point2D world ) ;
va	KEY	public void deleteElective ( long electiveId ) ;
va	IDF	public void act ( ) { frames ++ ; if ( frames >= 60 ) { frames = 0 ; } setImage ( buttonImage ) ; }
va	KEY	public h ( ) { }
va	KEY	@ Override public int getSelection ( ) { return 0 ; }
va	KEY	public int getWidth ( ) { return this . image . getWidth ( null ) ; }
va	IDF	public Game ( short speed , List < Snake > snakes , List < Eatable > food , ServerCommIF commIF , int panelSize , int gameID ) { this . speed = speed ; this . gameID = gameID ; this . food = new Vector < Eatable > ( ) ; this . snakes = new Vector < Snake > ( ) ; this . losers = new Vector < Snake > ( ) ; if ( snakes != null ) { for ( Iterator < Snake > it = snakes . iterator ( ) ; it . hasNext ( ) ; ) { add ( it . next ( ) ) ; } } if ( food != null ) this . food . addAll ( food ) ; this . commIF = commIF ; this . panelSize = panelSize ; int foodCount = ( int ) panelSize / 2 ; for ( int i = 0 ; i < foodCount ; i ++ ) { int randX = ( int ) ( Math . random ( ) * panelSize ) ; int randY = ( int ) ( Math . random ( ) * panelSize ) ; Eatable e = new * ( randX , randY ) ; this . food . add ( e ) ; } }
va	IDF	public void setMember ( String key , Object value ) { throw new UnsupportedOperationException ( "Not supported yet." ) ; }
va	KEY	public Sauce createSauce ( ) { return new MarinaraSause ( ) ; }
va	IDF	static void print ( String text ) { System . out . println ( text ) ; }
va	KEY	public void add ( long value ) { this . value += value ; }
va	KEY	public void incrementNumberOfWins ( ) { wins ++ ; }
va	IDF	private Point chooseRandomLocation ( ) { Point randomLocation ; ArrayList < Point > listOfEmptyLocations = new ArrayList < > ( ) ; Player [ ] [ ] locations = this . board . getBoardLocations ( ) ; for ( int row = 0 ; row < locations . length ; row ++ ) { Player [ ] rowLocations = locations [ row ] ; for ( int col = 0 ; col < rowLocations . length ; col ++ ) { Player location = rowLocations [ col ] ; if ( location == null ) { listOfEmptyLocations . add ( new Point ( row , col ) ) ; } } } int noOfEmptyLocations = listOfEmptyLocations . size ( ) ; if ( noOfEmptyLocations == 0 ) { return null ; } else if ( listOfEmptyLocations . size ( ) == 1 ) { randomLocation = listOfEmptyLocations . get ( 0 ) ; return randomLocation ; } else { int randomNumber = new Random ( ) . nextInt ( noOfEmptyLocations ) ; randomLocation = listOfEmptyLocations . get ( randomNumber ) ; return randomLocation ; } }
va	IDF	@ Override public void actionPerformed ( ActionEvent arg0 ) { }
va	KEY	@ Override public void init ( ) { }
va	KEY	public void updateModelFromView ( ) ;
va	IDF	@ Override public void mouseClicked ( MouseEvent e ) { deletebutton . setEnabled ( true ) ; }
va	IDF	public static AVL remove ( AVL root , int value ) { if ( root == null ) { System . out . println ( "No element found!" ) ; } else { if ( root . key == value ) { if ( root . rightChild == null && root . leftChild == null ) { root = null ; } else if ( root . leftChild != null && root . rightChild == null ) { root = root . leftChild ; } else if ( root . leftChild == null && root . rightChild != null ) { root = root . rightChild ; } else { if ( root . rightChild . leftChild == null ) { root . rightChild . leftChild = root . leftChild ; root = root . rightChild ; } else { AVL previous = root ; AVL next = root . rightChild ; while ( next . leftChild != null ) { previous = next ; next = next . leftChild ; } previous . leftChild = next . rightChild ; next . leftChild = root . leftChild ; next . rightChild = root . rightChild ; root = next ; } } } else if ( root . key < value ) { root . rightChild = remove ( root . rightChild , value ) ; } else if ( root . key > value ) { root . leftChild = remove ( root . leftChild , value ) ; } } return root ; }
va	IDF	public Menu ( String [ ] [ ] menuItems ) { this ( ) ; this . menuItems = menuItems ; }
va	IDF	@ Override public String describe ( ) { return commandLine . describe ( ) ; }
va	KEY	public MainMenu ( ) { }
va	KEY	public JSONObject put ( String key , boolean value ) throws JSONException { put ( key , value ? boolean . true : boolean . false ) ; return this ; }
va	IDF	public void setUser ( User user ) { this . user = user ; }
va	IDF	@ Override public FractalValue visitASTTCmdHome ( ASTTCmdHome form , FractalState state ) throws FractalException { System . out . print ( "->CmdHome" ) ; state . getTurtleState ( ) . home ( ) ; return FractalValue . NO_VALUE ; }
va	KEY	public int getPoints ( ) { return points ; }
va	IDF	public void sendClientWin ( ) { sendMessage ( "clientWin" ) ; uiBridge . clientWin ( ) ; checkTurn ( ) ; }
va	IDF	@ Override public void parseFile ( ) { data = new ArrayList < > ( ) ; try { Scanner in = new Scanner ( new File ( filePath ) ) ; findClasses ( ) ; while ( in . hasNext ( ) ) { String [ ] split = in . nextLine ( ) . split ( " " ) ; List < double > featureList = new ArrayList < > ( ) ; for ( int featureIterator = 1 ; featureIterator < inputs + 1 ; featureIterator ++ ) { featureList . add ( double . valueOf ( split [ featureIterator ] ) ) ; } List < double > output = getOutputVector ( split [ inputs + 1 ] ) ; data . add ( new DataPoint ( featureList , output ) ) ; } in . close ( ) ; } catch ( FileNotFoundException e ) { System . out . println ( "File not found for yeast dataset." ) ; e . printStackTrace ( ) ; } finally { findClasses ( ) ; } }
va	IDF	public void setFourthVertex ( int x , int y ) { vertices . setFourth ( x , y ) ; }
va	KEY	public long getID ( ) { return ID ; }
va	KEY	public String getFC1ResultStr ( ) { if ( fc1result == null ) { return ( "" ) ; } return ( fc1result + " (" + getFC1RunDtStr ( ) + ")" ) ; }
va	IDF	@ Override public void render ( ) { glLoadIdentity ( ) ; setTranslate ( this ) ; setGlColor4f ( getColor ( ) , 1f ) ; glRotatef ( ( float ) jitenAngle , 0 , 0 , 1 ) ; drawTexture ( getTexture ( ) , getWidth ( ) , getHeight ( ) ) ; }
va	KEY	public Chamado ( ) { }
va	IDF	static void init ( ) { SimpleDateFormat sdf = new SimpleDateFormat ( "yyyy-MM-dd HH:mm:ss.SSS" ) ; sdf . setTimeZone ( TimeZone . getTimeZone ( "GMT" ) ) ; try { startDay = sdf . parse ( "1900-01-01 00:00:00.000" ) ; endDay = sdf . parse ( "2001-12-04 00:00:00.000" ) ; } catch ( ParseException e ) { e . printStackTrace ( ) ; } }
va	KEY	public void setWordLocations ( int [ ] [ ] [ ] wordLocations ) { this . wordLocations = wordLocations ; }
va	IDF	public void setMinBreak ( Integer minBreak ) { this . minBreak = minBreak ; }
va	KEY	@ BeforeMethod public void setUpMethod ( ) throws Exception { }
va	IDF	public static void main ( String [ ] args ) { ValidatePreorderTree validatePreorderTree = new ValidatePreorderTree ( ) ; String s = "1 # #" ; System . out . println ( validatePreorderTree . isValidSerialization ( s ) ) ; }
va	IDF	public static Symbol symbol ( String newTokenString , Tokens kind ) { Symbol s = symbols . get ( newTokenString ) ; if ( s == null ) { if ( kind == Tokens . BogusToken ) { return null ; } s = new Symbol ( newTokenString , kind ) ; symbols . put ( newTokenString , s ) ; } return s ; }
va	KEY	@ BeforeMethod public void before ( ) { initMocks ( this ) ; }
va	KEY	abstract protected float getLifeTime ( ) ;
va	IDF	@ Override public int hashCode ( ) { int hash = 7 ; hash = 37 * hash + Objects . hashCode ( this . name1 ) ; hash = 37 * hash + Objects . hashCode ( this . getStart ) ; return hash ; }
va	KEY	public int getX ( ) { return x ; }
va	IDF	public abstract Object visitCharTypeTree ( AST t ) ;
va	IDF	public void updateClientRemoved ( Snake [ ] removedSnake ) { updatePlayerInfos ( ) ; }
va	IDF	public void setZone_navigo ( Integer zone_navigo ) { this . zone_navigo = zone_navigo ; }
va	KEY	public int getPC ( ) { return mPC ; }
va	IDF	public String deleteDocument ( Document document ) { ExternalContext externalContext = FacesContext . getCurrentInstance ( ) . getExternalContext ( ) ; String absoluteWebPath = externalContext . getRealPath ( "/" ) ; materialsService . deleteFile ( "E:/Projects/forum/max/web/resources/documents/" + document . getAdress ( ) ) ; absoluteWebPath = absoluteWebPath + "/resources/documents/" + document . getAdress ( ) ; materialsService . deleteFile ( absoluteWebPath ) ; getMaterialsService ( ) . getDocumentsDAO ( ) . delete ( document ) ; return "documents.xhtml?faces-redirect=true" ; }
va	KEY	protected void execute ( ) { }
va	IDF	@ Override public void addFollowUpStep ( ScenarioTreeStep stepToAdd ) { if ( this . getFollowUpSteps ( ) . length >= 1 ) { throw new RuntimeException ( "ScenarioTreeStepBeginning: Nur ein Folgeschritt m\u00F6glich" ) ; } super . addFollowUpStep ( stepToAdd ) ; }
va	KEY	public void Eliminar ( ) throws SQLException ;
va	KEY	public JoueurView ( ) { super ( ) ; controleur = new JoueurController ( this ) ; }
va	IDF	@ Test ( timeout = TIMEOUT ) public void testGetCount ( ) { assertEquals ( dc . getCount ( 0 ) , 0 ) ; }
va	KEY	public void setExamId ( long examId ) { this . examId = examId ; }
va	IDF	@ Override protected void decodeEnd ( ) { try { listener . call ( "onMessage" , arguments . toArray ( ) ) ; } catch ( Exception e ) { } arguments . clear ( ) ; }
va	IDF	@ Override public Matrix transpose ( ) { ArrayMatrix a = new ArrayMatrix ( ) ; a . initialize ( n , m ) ; for ( int i = 0 ; i < n ; ++ i ) { for ( int j = 0 ; j < m ; ++ j ) { a . set ( j , i , this . get ( i , j ) ) ; } } return a ; }
va	KEY	public WebResult createWebResult ( ) { return new WebResult ( ) ; }
va	KEY	@ BeforeClass public static void setUpClass ( ) throws Exception { }
va	IDF	public void actionPerformed ( ActionEvent e ) { saveProp ( ) ; JOptionPane . showMessageDialog ( null , "\u4FDD\u5B58\u6210\u529F" ) ; }
va	IDF	public void printDescription ( ) { System . out . println ( "You are in a forest. A dark cave is there." ) ; this . north . examine ( ) ; this . east . examine ( ) ; this . west . examine ( ) ; this . south . examine ( ) ; this . printItemsOnGround ( ) ; }
va	KEY	public static int getlPad ( ) { return lPad ; }
va	KEY	protected boolean isFinished ( ) { return false ; }
va	KEY	boolean updated ( ) ;
va	IDF	public Mvc ( ) { controller = new Controller ( this ) ; model = new Model ( this ) ; view = new View ( this ) ; getContentPane ( ) . add ( view ) ; }
va	IDF	public void addHint ( final int row , final int col , final int val ) { final HintAtom atom = new HintAtom ( this , row , col , val ) ; boardConstraints [ row ] [ col ] [ val ] . addAtom ( atom ) ; }
va	IDF	private void saveButtonActionPerformed ( java . awt . event . ActionEvent evt ) { }
va	IDF	public VPoint ( int x , int y , int z ) { this . x = x ; this . y = y ; this . z = z ; }
va	KEY	public boolean retirerPointDeVie ( ) { if ( point_de_vie > 0 ) { point_de_vie -- ; this . etat = EtatBateau . TOUCHE ; if ( point_de_vie == 0 ) this . etat = EtatBateau . COULE ; return true ; } return false ; }
va	KEY	public int getColumnAmount ( ) ;
va	IDF	public static Object stringToValue ( String string ) { if ( "" . equals ( string ) ) { return string ; } if ( "true" . equalsIgnoreCase ( string ) ) { return boolean . true ; } if ( "false" . equalsIgnoreCase ( string ) ) { return boolean . false ; } if ( "null" . equalsIgnoreCase ( string ) ) { return JSONObject . null ; } if ( "0" . equals ( string ) ) { return new Integer ( 0 ) ; } try { char initial = string . charAt ( 0 ) ; boolean negative = false ; if ( initial == - ) { initial = string . charAt ( 1 ) ; negative = true ; } if ( initial == 0 && string . charAt ( negative ? 2 : 1 ) == 0 ) { return string ; } if ( ( initial >= 0 && initial <= 9 ) ) { if ( string . indexOf ( . ) >= 0 ) { return double . valueOf ( string ) ; } else if ( string . indexOf ( e ) < 0 && string . indexOf ( E ) < 0 ) { long myLong = new long ( string ) ; if ( myLong . longValue ( ) == myLong . intValue ( ) ) { return new Integer ( myLong . intValue ( ) ) ; } else { return myLong ; } } } } catch ( Exception ignore ) { } return string ; }
va	KEY	@ After public void tearDown ( ) { }
va	IDF	@ Override public void execute ( Context ctx , Integer newCash ) { calculate ( newCash ) ; ctx . changeContextState ( storedCash > 56 ? this : new ThirdState ( ) ) ; }
va	IDF	public void run ( ) { try { Thread . sleep ( 5000 ) ; } catch ( InterruptedException e ) { System . out . println ( "sleeping in" ) ; } System . out . println ( "sleeping out" ) ; }
va	IDF	public void showError ( String string ) { System . out . println ( string ) ; }
va	KEY	@ Override protected boolean hasName ( String name ) { if ( names . contains ( name ) ) { return true ; } return false ; }
va	KEY	public int getDim ( ) { return dim ; }
va	IDF	@ Override public void Modificar ( ) throws SQLException { try { Conexion . GetInstancia ( ) . Conectar ( ) ; Conexion . GetInstancia ( ) . Ejecutar ( "UPDATE Proveedor SET Nom_Proveedor = '" + ObProveedor . getNom_Persona ( ) + "' Dir_Proveedor = '" + ObProveedor . getDir_Persona ( ) + "' Tel_Proveedor = '" + ObProveedor . getTel_Persona ( ) + "' Ape_Proveedor = '" + ObProveedor . getApe_Persona ( ) + "' Email_Proveedor = '" + ObProveedor . getEmail_Persona ( ) + "' Emp_Proveedor = '" + ObProveedor . getEmp_Proveedor ( ) + "' RucEmp_Proveedor = '" + ObProveedor . getRucEmp_Proveedor ( ) + "'  DirEmp_Proveedor = '" + ObProveedor . getDirEmp_Proveedor ( ) + "' TelEmp_Proveedor = '" + ObProveedor . getTelEmp_Proveedor ( ) + "' Tip_Proveedor = '" + ObProveedor . getTip_Proveedor ( ) + "' SalPen_Proveedor = '" + ObProveedor . getSalPen_Proveedor ( ) + "' WHERE CedRuc_Proveedor =" + ObProveedor . getCedRuc_Persona ( ) ) ; } catch ( SQLException ex ) { throw ex ; } finally { Conexion . GetInstancia ( ) . Desconectar ( ) ; } }
va	IDF	public List < AngleUnitFlapPattern > createPatternsByAddingLineRecursively ( final AngleUnitFlapPattern seed , final LineType typeToBeAdded , final int aimedAdditionCount ) { patterns = new LinkedList < > ( ) ; createPatternsImpl ( seed . cloneInstance ( ) , typeToBeAdded , 0 , 0 , aimedAdditionCount ) ; logDebug ( patterns ) ; return patterns ; }
va	IDF	@ Column ( name = "GROUP_IDENTYFIER" , length = 1 , nullable = false ) @ NaturalId public String getGroupIdentifier ( ) { return groupIdentifier ; }
va	KEY	public void setFaceUp ( ) { faceUp = true ; }
va	IDF	@ Override public void actionPerformed ( ActionEvent e ) { opacity += 0.15f ; dialog . setOpacity ( Math . min ( opacity , 1 ) ) ; if ( opacity >= 1 ) timer . stop ( ) ; }
va	KEY	FloatArrayCache ( final int arraySize ) { this . arraySize = arraySize ; this . floatArrays = new ArrayDeque < float [ ] > ( 6 ) ; }
va	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButton2ActionPerformed ( evt ) ; }
va	IDF	public void addMessageAtChat ( Message message ) { ChatMessage chatMessage = new ChatMessage ( ) ; chatMessage . setCMessage ( message ) ; getMessageDAO ( ) . save ( message ) ; getChatMessageDAO ( ) . save ( chatMessage ) ; }
va	IDF	private static void initApplication ( ) { try { DBBuilder . getInstance ( ) . createDatabase ( ) ; } catch ( Exception e ) { DBBuilder . getInstance ( ) . cleanDatabase ( ) ; DBBuilder . getInstance ( ) . createDatabase ( ) ; } Dao dao = Dao . getInstance ( ) ; dao . addUser ( "superuser" , "superuser" ) ; dao . addUser ( "docent" , "docent" ) ; dao . addUser ( "leerling" , "leerling" ) ; dao . addRol ( "beheerder" ) ; dao . addRol ( "docent" ) ; dao . addRol ( "student" ) ; dao . setRolBijUser ( 1 , 1 ) ; dao . setRolBijUser ( 2 , 2 ) ; dao . setRolBijUser ( 3 , 3 ) ; dao . addKlas ( "Klas1" ) ; dao . addLeerlingAanKlas ( 3 , 1 ) ; dao . addVak ( "Minor Sec" , 2 ) ; dao . addKlasAanVak ( 1 , 1 ) ; dao . addToets ( 1 , "testToets" ) ; dao . addPermissie ( "INZIENEIGENSTUDENTEN" ) ; dao . addPermissie ( "INZIENALLESTUDENTEN" ) ; dao . addPermissie ( "BEHEEREIGENKLASSEN" ) ; dao . addPermissie ( "BEHEERALLEKLASSEN" ) ; dao . addPermissie ( "BEHEEREIGENVAKKEN" ) ; dao . addPermissie ( "BEHEERALLEVAKKEN" ) ; dao . setPermissieBijRol ( 1 , 2 ) ; dao . setPermissieBijRol ( 1 , 4 ) ; dao . setPermissieBijRol ( 1 , 6 ) ; dao . setPermissieBijRol ( 2 , 1 ) ; dao . setPermissieBijRol ( 2 , 3 ) ; dao . setPermissieBijRol ( 2 , 5 ) ; dao . setPermissieMap ( ) ; }
va	KEY	public int calculateXAfterRightMove ( int moveStep ) { return ( this . getLeftX ( ) + moveStep ) ; }
va	KEY	public int getWidth ( ) { return width ; }
va	KEY	public int getHide ( ) { return hide ; }
va	KEY	protected abstract String getWorkerURL ( ) ;
va	IDF	public void registerController ( Controller controller ) { console . getInputMap ( JComponent . WHEN_IN_FOCUSED_WINDOW ) . put ( KeyStroke . getKeyStroke ( KeyEvent . VK_Q , 0 ) , "quit" ) ; console . getActionMap ( ) . put ( "quit" , controller . getMessenger ( ) . getQuitAction ( ) ) ; console . getInputMap ( JComponent . WHEN_IN_FOCUSED_WINDOW ) . put ( KeyStroke . getKeyStroke ( KeyEvent . VK_COMMA , 0 ) , "pickup" ) ; console . getActionMap ( ) . put ( "pickup" , controller . getMessenger ( ) . getPAction ( ) ) ; console . getInputMap ( JComponent . WHEN_IN_FOCUSED_WINDOW ) . put ( KeyStroke . getKeyStroke ( KeyEvent . VK_I , 0 ) , "inventory" ) ; console . getActionMap ( ) . put ( "inventory" , controller . getMessenger ( ) . getIAction ( ) ) ; console . getInputMap ( JComponent . WHEN_IN_FOCUSED_WINDOW ) . put ( KeyStroke . getKeyStroke ( KeyEvent . VK_E , 0 ) , "eat" ) ; console . getActionMap ( ) . put ( "eat" , controller . getMessenger ( ) . getEAction ( ) ) ; console . getInputMap ( JComponent . WHEN_IN_FOCUSED_WINDOW ) . put ( KeyStroke . getKeyStroke ( KeyEvent . VK_D , 0 ) , "drop" ) ; console . getActionMap ( ) . put ( "drop" , controller . getMessenger ( ) . getDAction ( ) ) ; console . getInputMap ( JComponent . WHEN_IN_FOCUSED_WINDOW ) . put ( KeyStroke . getKeyStroke ( KeyEvent . VK_SLASH , KeyEvent . SHIFT_DOWN_MASK ) , "question" ) ; console . getActionMap ( ) . put ( "question" , controller . getMessenger ( ) . getQuestionAction ( ) ) ; console . getInputMap ( JComponent . WHEN_IN_FOCUSED_WINDOW ) . put ( KeyStroke . getKeyStroke ( KeyEvent . VK_ENTER , 0 ) , "enter" ) ; console . getActionMap ( ) . put ( "enter" , controller . getMessenger ( ) . getEnterAction ( ) ) ; console . getInputMap ( JComponent . WHEN_IN_FOCUSED_WINDOW ) . put ( KeyStroke . getKeyStroke ( KeyEvent . VK_L , 0 ) , "look" ) ; console . getActionMap ( ) . put ( "look" , controller . getMessenger ( ) . getLAction ( ) ) ; console . getInputMap ( JComponent . WHEN_IN_FOCUSED_WINDOW ) . put ( KeyStroke . getKeyStroke ( KeyEvent . VK_W , 0 ) , "wield" ) ; console . getActionMap ( ) . put ( "wield" , controller . getMessenger ( ) . getEquipAction ( ) ) ; console . getInputMap ( JComponent . WHEN_IN_FOCUSED_WINDOW ) . put ( KeyStroke . getKeyStroke ( KeyEvent . VK_P , 0 ) , "put-on" ) ; console . getActionMap ( ) . put ( "put-on" , controller . getMessenger ( ) . getPutOnAction ( ) ) ; console . getInputMap ( JComponent . WHEN_IN_FOCUSED_WINDOW ) . put ( KeyStroke . getKeyStroke ( KeyEvent . VK_W , KeyEvent . SHIFT_DOWN_MASK ) , "wizard" ) ; console . getActionMap ( ) . put ( "wizard" , controller . getMessenger ( ) . getWizardAction ( ) ) ; console . getInputMap ( JComponent . WHEN_FOCUSED ) . put ( KeyStroke . getKeyStroke ( KeyEvent . VK_UP , 0 ) , "up" ) ; console . getActionMap ( ) . put ( "up" , controller . getMessenger ( ) . getUpAction ( ) ) ; console . getInputMap ( JComponent . WHEN_FOCUSED ) . put ( KeyStroke . getKeyStroke ( KeyEvent . VK_DOWN , 0 ) , "down" ) ; console . getActionMap ( ) . put ( "down" , controller . getMessenger ( ) . getDownAction ( ) ) ; console . getInputMap ( JComponent . WHEN_FOCUSED ) . put ( KeyStroke . getKeyStroke ( KeyEvent . VK_LEFT , 0 ) , "left" ) ; console . getActionMap ( ) . put ( "left" , controller . getMessenger ( ) . getLeftAction ( ) ) ; console . getInputMap ( JComponent . WHEN_FOCUSED ) . put ( KeyStroke . getKeyStroke ( KeyEvent . VK_RIGHT , 0 ) , "right" ) ; console . getActionMap ( ) . put ( "right" , controller . getMessenger ( ) . getRightAction ( ) ) ; console . getInputMap ( JComponent . WHEN_IN_FOCUSED_WINDOW ) . put ( KeyStroke . getKeyStroke ( KeyEvent . VK_SPACE , 0 ) , "wait" ) ; console . getActionMap ( ) . put ( "wait" , controller . getMessenger ( ) . getWaitAction ( ) ) ; console . getInputMap ( JComponent . WHEN_IN_FOCUSED_WINDOW ) . put ( KeyStroke . getKeyStroke ( KeyEvent . VK_PERIOD , KeyEvent . SHIFT_DOWN_MASK ) , "stair_down" ) ; console . getActionMap ( ) . put ( "stair_down" , controller . getMessenger ( ) . getStairsDown ( ) ) ; console . getInputMap ( JComponent . WHEN_IN_FOCUSED_WINDOW ) . put ( KeyStroke . getKeyStroke ( KeyEvent . VK_COMMA , KeyEvent . SHIFT_DOWN_MASK ) , "stair_up" ) ; console . getActionMap ( ) . put ( "stair_up" , controller . getMessenger ( ) . getStairsUp ( ) ) ; console . getInputMap ( JComponent . WHEN_IN_FOCUSED_WINDOW ) . put ( KeyStroke . getKeyStroke ( KeyEvent . VK_C , 0 ) , "center_map" ) ; console . getActionMap ( ) . put ( "center_map" , controller . getMessenger ( ) . getCenterMap ( ) ) ; console . getInputMap ( JComponent . WHEN_IN_FOCUSED_WINDOW ) . put ( KeyStroke . getKeyStroke ( KeyEvent . VK_O , 0 ) , "open_door" ) ; console . getActionMap ( ) . put ( "open_door" , controller . getMessenger ( ) . getOpenDoor ( ) ) ; console . getInputMap ( JComponent . WHEN_IN_FOCUSED_WINDOW ) . put ( KeyStroke . getKeyStroke ( KeyEvent . VK_S , 0 ) , "close_door" ) ; console . getActionMap ( ) . put ( "close_door" , controller . getMessenger ( ) . getCloseDoor ( ) ) ; }
va	IDF	public int getMovesUsed ( String moveName ) { Integer theInteger = movesUsed . get ( moveName ) ; if ( theInteger == null ) { return 0 ; } else { return theInteger . intValue ( ) ; } }
va	KEY	public void desenharLinha ( int x , int y ) ;
va	IDF	public FeatureVector ( int _nRows ) { nRows = _nRows ; initCapacity ( 10 ) ; }
va	IDF	public void print ( String msg ) { threadPrint ( "objID=" + objID + " - " + msg ) ; }
va	IDF	public long getIntervalDays ( Date startDay , Date endDay ) { long startTime = startDay . getTime ( ) ; long endTime = endDay . getTime ( ) ; long result = endTime - startTime ; return result / ( 1000 * 60 * 60 * 24 ) ; }
va	KEY	public void setErrorHandler ( TIPPErrorHandler errorHandler ) { if ( errorHandler == null ) { throw new IllegalArgumentException ( "errorHandler can't be null" ) ; } this . errorHandler = errorHandler ; }
va	KEY	public double getPrecio_blanco ( ) { return precio_blanco ; }
va	KEY	public static int getPixelLen ( ) { return pixelLen ; }
va	IDF	private static void receive ( final InputStream input , final OutputStream output ) throws IOException { for ( int b ; ( b = input . read ( ) ) > 0 ; ) { output . write ( b == FF ? input . read ( ) : b ) ; } }
va	KEY	private boolean expressao_sempred ( ExpressaoContext _localctx , int predIndex ) { switch ( predIndex ) { case 0 : return 4 >= _localctx . _p ; case 1 : return 3 >= _localctx . _p ; case 2 : return 2 >= _localctx . _p ; } return true ; }
va	KEY	public int getStepHA ( ) { return stepHA ; }
va	IDF	@ Override protected TIPP buildTIPP ( Payload payload , Manifest manifest ) { return new ResponsePackageBase ( payload , manifest ) ; }
va	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { nActionPerformed ( evt ) ; }
va	KEY	@ Override public float getPower ( ) { return power ; }
va	KEY	public static double getDifferenceInAngleRadians ( double from , double to ) { return boundAngleNegPiToPiRadians ( to - from ) ; }
va	KEY	public Jabberwocky ( ) { this . name = "jabberwocky" ; this . alive = true ; this . preparingToBreatheFire = false ; this . playerJustEnteredLair = false ; this . playerRaisedShield = false ; this . playerDazed = false ; }
va	KEY	public void shutDown ( ) { }
va	KEY	protected ContentValidator getRequestValidator ( ) { return null ; }
va	IDF	public void setDt ( double dt ) { for ( Component e : subPanel . getElements ( ) ) { e . reset ( ) ; if ( e instanceof DynaSys ) ( ( DynaSys ) e ) . setDt ( dt ) ; else if ( e instanceof ApproxDif ) ( ( ApproxDif ) e ) . setDt ( dt ) ; else if ( e instanceof Integration ) ( ( Integration ) e ) . setDt ( dt ) ; } }
va	KEY	public void setSlant ( double amount ) { }
va	IDF	public void removePropertyChangeListener ( PropertyChangeListener listener ) { changeSupport . removePropertyChangeListener ( listener ) ; }
va	IDF	public void updateArray ( Object [ ] results ) throws SQLException { int i = 0 ; while ( i < this . columns . size ( ) ) { int columnType = this . types . get ( i ) ; results [ i ] = resultSetMapper . getObject ( rs , ++ i , columnType ) ; } }
va	KEY	public boolean askUserIfWouldLikeToSaveChangesFromPlanningMode ( ) { return currentGamePanel . askUserIfWouldLikeToSaveChangesFromPlanningMode ( ) ; }
va	KEY	public double getLimitAxisY ( ) { return limitAxisY ; }
va	IDF	public boolean equals ( Object other ) { if ( other == null ) { return false ; } if ( other == this ) { return true ; } if ( other instanceof PKIAppletEvent ) { return false ; } PKIAppletEvent otherCardEvent = ( PKIAppletEvent ) other ; return type == otherCardEvent . type && service . equals ( otherCardEvent . service ) ; }
va	IDF	public AmbienteExecucao executar ( AmbienteExecucao ambiente ) throws VariavelJaDeclaradaException , VariavelNaoDeclaradaException { ambiente . changeValor ( id , expressao . avaliar ( ambiente ) ) ; return ambiente ; }
va	IDF	public void setSurveyBySurveyIdsurvey ( Survey surveyBySurveyIdsurvey ) { this . surveyBySurveyIdsurvey = surveyBySurveyIdsurvey ; }
va	KEY	public void desenharLinha ( ) ;
va	IDF	@ Test public void callsServicePassedAsParameter ( ) { ServiceAddress remoteServiceAddress = new ServiceAddress ( "localhost" , port , serviceName ) ; RemoteService remoteService = proxyMaker . make ( remoteServiceAddress , RemoteService . class ) . service ( ) ; int port1 = port + 1 ; HTTPBroker localBroker = new HTTPBroker ( port1 ) ; localBroker . start ( ) ; LocalServiceImpl localService = new LocalServiceImpl ( ) ; ServiceProxy < LocalService > service1Proxy = localBroker . registerService ( "serviceName1" , localService , LocalService . class ) ; Result result = remoteService . callWithProxy ( service1Proxy , 10 ) ; assertThat ( result . param1 , is ( localService . result . param1 ) ) ; assertThat ( result . param2 , is ( localService . result . param2 ) ) ; localBroker . stop ( ) ; localBroker . join ( ) ; }
va	IDF	@ Override public SearchRequestBuilder withMobileWebRequestSearchOption ( MobileWebSearchOption mobileWebSearchOption ) { getMobileWebRequestOptions ( ) . add ( mobileWebSearchOption ) ; return this ; }
va	KEY	public void setMaxRows ( int maxRows ) ;
va	IDF	public BeanTreeTableModel ( DefaultMutableTreeNode root ) { super ( root ) ; }
va	IDF	public void projectX2 ( FeatureVector fv , double [ ] proj ) { for ( int r = 0 ; r < rank2 ; ++ r ) proj [ r ] = fv . dotProduct ( X2 [ r ] ) ; }
va	KEY	public void setBestMove ( int move ) { throw new UnsupportedOperationException ( "Not supported yet." ) ; }
va	IDF	CircleLinkElement < Value > leaveFromCircle ( final CircleLinkElement < Value > target , final boolean returnPrevious ) { throwNoSuchElementExceptionIfNotContained ( target ) ; CircleLinkElement < Value > element = target . leaveFromCircle ( returnPrevious ) ; if ( target == head ) { if ( size ( ) == 1 ) { element = null ; } head = element ; } elements . remove ( target ) ; return element ; }
va	KEY	public void setVerbose ( boolean verbose ) { this . verbose = verbose ; }
va	IDF	@ Override public Value aggregate ( String columnName , Stream < ? extends Tuple > tuples ) { return Value . of ( toValue ( tuples . mapToDouble ( tuple -> toDouble ( tuple , columnName ) ) ) ) ; }
va	IDF	public void acquirePowerUp ( PowerUp powerUp ) { map . removeSprite ( powerUp ) ; if ( powerUp instanceof PowerUp . * ) { soundManager . play ( prizeSound ) ; } else if ( powerUp instanceof PowerUp . Music ) { soundManager . play ( prizeSound ) ; toggleDrumPlayback ( ) ; } else if ( powerUp instanceof PowerUp . Goal ) { soundManager . play ( prizeSound , new EchoFilter ( 2000 , .7f ) , false ) ; map = resourceManager . loadNextMap ( ) ; } }
va	IDF	public FeatureVector createTripsFeatureVector ( DependencyInstance inst , int par , int ch1 , int ch2 ) { FeatureVector fv = new FeatureVector ( numArcFeats ) ; int [ ] pos = inst . postagids ; int [ ] posA = inst . cpostagids ; int dirFlag = ( ( ( ( par < ch1 ? 0 : 1 ) << 1 ) | ( par < ch2 ? 0 : 1 ) ) << 1 ) | 1 ; int HP = pos [ par ] ; int SP = ch1 == par ? TOKEN_START : pos [ ch1 ] ; int MP = pos [ ch2 ] ; int HC = posA [ par ] ; int SC = ch1 == par ? TOKEN_START : posA [ ch1 ] ; int MC = posA [ ch2 ] ; long code = 0 ; code = createArcCodePPP ( HP_SP_MP , HP , SP , MP ) ; addArcFeature ( code , fv ) ; addArcFeature ( code | dirFlag , fv ) ; code = createArcCodePPP ( HC_SC_MC , HC , SC , MC ) ; addArcFeature ( code , fv ) ; addArcFeature ( code | dirFlag , fv ) ; addTurboSib ( inst , par , ch1 , ch2 , dirFlag , fv ) ; return fv ; }
va	IDF	private int root ( int i ) { while ( i != this . id [ i ] ) i = id [ i ] ; return i ; }
va	KEY	@ Override public int getLineLength ( ) { return 4 ; }
va	KEY	public static int maskRows ( final boolean [ ] [ ] mask ) { return mask . length ; }
va	KEY	public synchronized void xassignD1KeyCode ( int code ) { d1 = code ; }
va	IDF	public void setDicID ( String dicID ) { this . dicID = dicID ; }
va	IDF	private void initialize ( ) { this . setBounds ( 100 , 100 , 461 , 315 ) ; this . setTitle ( "Detalle del historial de cargas" ) ; this . setResizable ( false ) ; this . setDefaultCloseOperation ( JFrame . DISPOSE_ON_CLOSE ) ; JPanel panel = new JPanel ( ) ; SpringLayout sl_panel = new SpringLayout ( ) ; panel . setLayout ( sl_panel ) ; JLabel lblHistorial = new JLabel ( "Historial de cargas de :" ) ; sl_panel . putConstraint ( SpringLayout . NORTH , lblHistorial , 10 , SpringLayout . NORTH , panel ) ; sl_panel . putConstraint ( SpringLayout . WEST , lblHistorial , 10 , SpringLayout . WEST , panel ) ; panel . add ( lblHistorial ) ; JButton btnNewButton = new JButton ( "Salir" ) ; sl_panel . putConstraint ( SpringLayout . SOUTH , btnNewButton , - 10 , SpringLayout . SOUTH , panel ) ; sl_panel . putConstraint ( SpringLayout . EAST , btnNewButton , - 10 , SpringLayout . EAST , panel ) ; btnNewButton . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { dispose ( ) ; } } ) ; panel . add ( btnNewButton ) ; JScrollPane scrollPane = new JScrollPane ( ) ; sl_panel . putConstraint ( SpringLayout . NORTH , scrollPane , 31 , SpringLayout . SOUTH , lblHistorial ) ; sl_panel . putConstraint ( SpringLayout . WEST , scrollPane , 0 , SpringLayout . WEST , lblHistorial ) ; sl_panel . putConstraint ( SpringLayout . SOUTH , scrollPane , - 6 , SpringLayout . NORTH , btnNewButton ) ; sl_panel . putConstraint ( SpringLayout . EAST , scrollPane , - 10 , SpringLayout . EAST , panel ) ; panel . add ( scrollPane ) ; tblSalaryHistory = new JTable ( ) ; tblSalaryHistory . setModel ( new DefaultTableModel ( new Object [ ] [ ] { } , new String [ ] { "Monto" , "Fecha" , "Saldo" } ) ) ; scrollPane . setViewportView ( tblSalaryHistory ) ; GroupLayout groupLayout = new GroupLayout ( getContentPane ( ) ) ; groupLayout . setHorizontalGroup ( groupLayout . createParallelGroup ( Alignment . LEADING ) . addComponent ( panel , GroupLayout . DEFAULT_SIZE , 434 , short . MAX_VALUE ) ) ; groupLayout . setVerticalGroup ( groupLayout . createParallelGroup ( Alignment . LEADING ) . addComponent ( panel , GroupLayout . DEFAULT_SIZE , 262 , short . MAX_VALUE ) ) ; lblPlayerName = new JLabel ( "" ) ; this . InitializeFormValues ( this . player ) ; sl_panel . putConstraint ( SpringLayout . NORTH , lblPlayerName , 0 , SpringLayout . NORTH , lblHistorial ) ; sl_panel . putConstraint ( SpringLayout . WEST , lblPlayerName , 33 , SpringLayout . EAST , lblHistorial ) ; panel . add ( lblPlayerName ) ; this . getContentPane ( ) . setLayout ( groupLayout ) ; }
va	KEY	public Vector2D ( ) { super ( ) ; }
va	KEY	public static GameSettings getInstance ( ) { return instance ; }
va	KEY	public int getIsbn ( ) { return isbn ; }
va	IDF	public static void main ( String [ ] args ) { String pathinput = "C:/Users/lin/Desktop/myemotion/trainData4000-weight.xml" ; String pathinput2 = "C:/Users/lin/Desktop/myemotion/testData10000-weight.xml" ; String pathoutput = "C:/Users/lin/Desktop/tj.csv" ; File file = new File ( pathinput ) ; File file2 = new File ( pathinput2 ) ; BufferedReader reader = null ; BufferedReader reader2 = null ; try { Map < String , Integer > weibomap = new HashMap < String , Integer > ( ) ; weibomap . put ( "happiness" , 0 ) ; weibomap . put ( "like" , 1 ) ; weibomap . put ( "anger" , 2 ) ; weibomap . put ( "sadness" , 3 ) ; weibomap . put ( "fear" , 4 ) ; weibomap . put ( "disgust" , 5 ) ; weibomap . put ( "surprise" , 6 ) ; weibomap . put ( "none" , 7 ) ; Map < String , Integer > sentencemap = new HashMap < String , Integer > ( ) ; sentencemap . put ( "happiness" , 0 ) ; sentencemap . put ( "like" , 1 ) ; sentencemap . put ( "anger" , 2 ) ; sentencemap . put ( "sadness" , 3 ) ; sentencemap . put ( "fear" , 4 ) ; sentencemap . put ( "disgust" , 5 ) ; sentencemap . put ( "surprise" , 6 ) ; sentencemap . put ( "none" , 7 ) ; int [ ] [ ] weiboi = new int [ 8 ] [ 8 ] ; int [ ] [ ] sentencei = new int [ 8 ] [ 8 ] ; Pattern patweibo = Pattern . compile ( "(<weibo id=\")([0-9]*)(\" emotion-type1=\")(.*)(\" emotion-type2=\")(.*)(\">)" ) ; Pattern patn = Pattern . compile ( "(<sentence id=\"[0-9]*\" opinionated=\"N\">)(.*)(</sentence>)" ) ; Pattern paty = Pattern . compile ( "(<sentence id=\"[0-9]*\" opinionated=\"Y\" emotion-1-type=\")(.*)(\" emotion-1-weight=\"[1-3]\" emotion-2-type=\")(none|happiness|like|sadness|anger|fear|disgust|surprise)(\".*>)(.*)(</sentence>)" ) ; reader = new BufferedReader ( new FileReader ( file ) ) ; reader2 = new BufferedReader ( new FileReader ( file2 ) ) ; String tempString = null ; OutputStreamWriter writer = new OutputStreamWriter ( new FileOutputStream ( pathoutput ) , "UTF-8" ) ; writer . write ( " happiness like anger sadness fear disgust surprise none\r\n" ) ; int num = 0 , num2 = 0 ; String emotiontype1 = "none" ; String emotiontype2 = "none" ; while ( ( tempString = reader . readLine ( ) ) != null ) { Matcher matcherweibo = patweibo . matcher ( tempString ) ; if ( matcherweibo . find ( ) ) { emotiontype1 = matcherweibo . group ( 4 ) ; emotiontype2 = matcherweibo . group ( 6 ) ; weiboi [ weibomap . get ( emotiontype1 ) ] [ weibomap . get ( emotiontype2 ) ] ++ ; num ++ ; } Matcher matchern = patn . matcher ( tempString ) ; if ( matchern . find ( ) ) { emotiontype1 = "none" ; emotiontype2 = "none" ; sentencei [ sentencemap . get ( emotiontype1 ) ] [ sentencemap . get ( emotiontype2 ) ] ++ ; num2 ++ ; } Matcher matchery = paty . matcher ( tempString ) ; if ( matchery . find ( ) ) { emotiontype1 = matchery . group ( 2 ) ; emotiontype2 = matchery . group ( 4 ) ; sentencei [ sentencemap . get ( emotiontype1 ) ] [ sentencemap . get ( emotiontype2 ) ] ++ ; num2 ++ ; } } while ( ( tempString = reader2 . readLine ( ) ) != null ) { Matcher matcherweibo = patweibo . matcher ( tempString ) ; if ( matcherweibo . find ( ) ) { emotiontype1 = matcherweibo . group ( 4 ) ; emotiontype2 = matcherweibo . group ( 6 ) ; weiboi [ weibomap . get ( emotiontype1 ) ] [ weibomap . get ( emotiontype2 ) ] ++ ; num ++ ; } Matcher matchern = patn . matcher ( tempString ) ; if ( matchern . find ( ) ) { emotiontype1 = "none" ; emotiontype2 = "none" ; sentencei [ sentencemap . get ( emotiontype1 ) ] [ sentencemap . get ( emotiontype2 ) ] ++ ; num2 ++ ; } Matcher matchery = paty . matcher ( tempString ) ; if ( matchery . find ( ) ) { emotiontype1 = matchery . group ( 2 ) ; emotiontype2 = matchery . group ( 4 ) ; sentencei [ sentencemap . get ( emotiontype1 ) ] [ sentencemap . get ( emotiontype2 ) ] ++ ; num2 ++ ; } } for ( int i = 0 ; i < 8 ; i ++ ) { for ( int j = 0 ; j < 8 ; j ++ ) { System . out . print ( weiboi [ i ] [ j ] + " " ) ; writer . write ( " " + weiboi [ i ] [ j ] ) ; } System . out . println ( ) ; writer . write ( "\r\n" ) ; } writer . write ( " happiness like anger sadness fear disgust surprise none\r\n" ) ; for ( int i = 0 ; i < 8 ; i ++ ) { for ( int j = 0 ; j < 8 ; j ++ ) { System . out . print ( weiboi [ i ] [ j ] + " " ) ; writer . write ( " " + sentencei [ i ] [ j ] ) ; } System . out . println ( ) ; writer . write ( "\r\n" ) ; } System . out . println ( num ) ; System . out . println ( num2 ) ; reader . close ( ) ; writer . flush ( ) ; writer . close ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } finally { if ( reader != null ) { try { reader . close ( ) ; } catch ( IOException e1 ) { } } } }
va	KEY	public static Board getInstance ( ) { if ( instance == null ) { instance = new Board ( 0 , 0 ) ; } return instance ; }
va	KEY	private FileUtils ( ) { }
va	KEY	@ Override public void clear ( ) { throw new UnsupportedOperationException ( "Cannot modify OrderedSubsetUnmodifiableMap" ) ; }
va	KEY	public boolean isCellEditable ( int row , int column ) { if ( column == 0 || column == 1 ) { return false ; } else { return true ; } }
va	IDF	String format ( String msg ) ;
va	IDF	@ Override public boolean isAnswerCorrect ( ) { int optionCurrentlySelected = - 1 ; for ( int x = 0 ; x < _radioButtonOptions . size ( ) ; x ++ ) { if ( _radioButtonOptions . get ( x ) . isSelected ( ) ) { optionCurrentlySelected = x ; break ; } } if ( optionCurrentlySelected == - 1 ) { setAnswerLabel ( "No option selected  please select option" ) ; return false ; } else { this . updatePanel ( ) ; String button = _radioButtonOptions . get ( optionCurrentlySelected ) . getText ( ) . toString ( ) ; String answer = _radioButtonQuestionData . getAnswer ( ) ; if ( button . equals ( answer ) ) { setAnswerLabel ( "Correct" ) ; _radioButtonQuestionData . setCorrectlyAnswered ( ) ; _session . setCorrectlyAnswered ( ) ; _radioButtonOptions . get ( optionCurrentlySelected ) . setBackground ( Color . green ) ; for ( int x = 0 ; x < _radioButtonOptions . size ( ) ; x ++ ) { _radioButtonOptions . get ( x ) . setEnabled ( false ) ; } return true ; } else { setAnswerLabel ( "Incorrect" ) ; _radioButtonQuestionData . setIncorrectlyAnswered ( ) ; _session . setIncorrectlyAnswered ( ) ; return false ; } } }
va	IDF	public SemanticFeatureFactory ( Options options , DependencyPipe pipe ) { this . options = options ; smnAlphabet = new Alphabet ( ) ; pathcodeAlphabet = new Alphabet ( ) ; argSeqAlphabet = new Alphabet ( ) ; numLinkFeats = 0 ; numSemanticLabels = 0 ; args = pipe . args ; wordAlphabet = new Alphabet ( ) ; pathAlphabet = new Alphabet ( ) ; contextAlphabet = new Alphabet ( ) ; numWordFeats = 0 ; numPathFeats = 0 ; numContextFeats = 0 ; }
va	KEY	public NewsResponse createNewsResponse ( ) { return new NewsResponse ( ) ; }
va	IDF	public List < ProductModel > getProductsByCategory ( int categoryId ) throws WebshopAppException { return productRepository . getProductsByCategory ( categoryId ) ; }
va	IDF	@ Override public void windowClosing ( WindowEvent e ) { if ( menuBar . closeLevel ( ) ) { frame . setVisible ( false ) ; frame . dispose ( ) ; System . exit ( 0 ) ; } }
va	IDF	private ItemGraphic newItem ( Item item ) { ItemGraphic itemG = new ItemGraphic ( ) { @ Override public void paint ( Graphics graph ) { } @ Override public Object getParent ( ) { return null ; } @ Override public Point getBoardPosition ( ) { return null ; } } ; if ( item instanceof Bomb ) { itemG = newBomb ( ( Bomb ) item ) ; } else if ( item instanceof Wall ) { itemG = newWall ( ( Wall ) item ) ; } else if ( item instanceof SpeedBuff ) { itemG = newSpeedBuff ( ( SpeedBuff ) item ) ; } else if ( item instanceof RangeBuff ) { itemG = newRangeBuff ( ( RangeBuff ) item ) ; } else if ( item instanceof LifeBuff ) { itemG = newLifeBuff ( ( LifeBuff ) item ) ; } else if ( item instanceof DropBuff ) { itemG = newDropBuff ( ( DropBuff ) item ) ; } else if ( ! ( item instanceof Ground ) ) { System . out . println ( "Objet inconnu." ) ; } return itemG ; }
va	IDF	@ Override public String toString ( ) { return guess + ":" + correct ; }
va	IDF	@ Override public void channelConnected ( ChannelHandlerContext ctx , ChannelStateEvent e ) throws Exception { logger . debug ( "channel connected event : " + e . getChannel ( ) ) ; final String serverName = ":" + configService . getConfig ( ) . getName ( ) ; final SslHandler sslHandler = ctx . getPipeline ( ) . get ( SslHandler . class ) ; if ( sslHandler != null ) { ChannelFuture handshakeFuture = sslHandler . handshake ( ) ; handshakeFuture . addListener ( new ServerSslGreeter ( configService . getConfig ( ) . getName ( ) , sslHandler ) ) ; } else { e . getChannel ( ) . write ( serverName + " 100 WELCOME_MSG " + "Welcome to " + configService . getConfig ( ) . getName ( ) + " irc service!\n" ) ; e . getChannel ( ) . write ( serverName + " 100 WELCOME_MSG " + "Your session is not protected.\n" ) ; } connections . add ( new Connection ( this , e . getChannel ( ) ) ) ; }
va	IDF	@ Override public FractalValue visitASTTCmdPenUp ( ASTTCmdPenUp form , FractalState state ) throws FractalException { System . out . print ( "->CmdPenDown" ) ; state . getTurtleState ( ) . setPenDown ( false ) ; return FractalValue . NO_VALUE ; }
va	IDF	@ Override public String toString ( ) { return "farmacia.Medicamentos[ idmedicamentos=" + idmedicamentos + " ]" ; }
va	KEY	public boolean getAutoShift ( ) { return mainJoystick . getRawButton ( 8 ) ; }
va	IDF	public List < ProductModel > getAllProducts ( ) throws WebshopAppException ;
va	KEY	public boolean madeAllIn ( ) { return this . getBalance ( ) == 0 ; }
va	IDF	public LogFileContentResult ( @ NotNull String stderr , int exitCode ) { this ( "" , stderr , exitCode , null ) ; }
va	IDF	public boolean equals ( MLoc r ) { boolean t = true ; if ( locs . size ( ) != r . locs . size ( ) ) { t = false ; } else { for ( int i = 0 ; i < locs . size ( ) ; i ++ ) { t = t && r . locs . get ( i ) . equals ( locs . get ( i ) ) ; } } return t ; }
va	IDF	public static void main ( String [ ] args ) throws AWTException , InterruptedException { test ( ) ; }
va	KEY	public Controlador ( ) { this ( new MenuAmbiente ( ) . insistirPorEntradaValida ( new EntradaSaida ( ) ) ) ; }
va	KEY	public abstract boolean getCell ( int col , int row ) ;
va	IDF	@ Override public void run ( ) { String responseStr = null ; String strInputMesg = null ; POP3CommandHandler ch = null ; initSession ( ) ; sendResponse ( "+OK pop3 server is ready" ) ; getLogger ( ) . info ( "pop3:\u5EFA\u7ACB\u4E00\u4E2A\u8FDE\u63A5" + "(" + pop3ID + "/" + remoteHost + "/" + remoteIP + ")" ) ; while ( ! sessionEnded ) { strInputMesg = getCommand ( in , connectLostTime ) ; if ( strInputMesg == null ) { getLogger ( ) . info ( "pop3:\u8D85\u65F6\u8BFB\u53D6\u5BA2\u6237\u7AEF\u547D\u4EE4" ) ; sessionEnded = true ; if ( null != user && userListManager . isUserLocked ( user . getUserName ( ) , LockType . POP3 ) ) { userListManager . unlockUser ( user . getUserName ( ) , LockType . POP3 ) ; } break ; } if ( checkCommandValid ( strInputMesg ) ) { ch = POP3DealCommand . getCommandHandler ( commandList [ 0 ] ) ; if ( ch == null ) { responseStr = "-ERR unknown command" ; sendResponse ( responseStr ) ; getLogger ( ) . info ( responseStr ) ; } else { try { ch . onCommand ( this , commandList [ 1 ] , commandList [ 2 ] ) ; } catch ( POP3Exception e ) { System . out . println ( "\u901A\u8FC7exception\u53D1\u9001\u4E00\u6761\u9519\u8BEF\u4FE1\u606F" ) ; sendResponse ( e . getErrorMsg ( ) ) ; } } } else { sendResponse ( "-ERR unknown command" ) ; } } if ( user != null ) { getLogger ( ) . info ( "pop3: ID:" + pop3ID + "  user:" + user . getUserName ( ) + "\u65AD\u5F00\u8FDE\u63A5" ) ; } clearSession ( ) ; }
va	IDF	public Teacher ( long id , String firstname , String lastname , Date birthdate , String email , String md5Hash ) { this . setId ( id ) ; this . firstname = firstname ; this . lastname = lastname ; this . birthdate = birthdate ; this . email = email ; this . setMd5Hash ( md5Hash ) ; }
va	KEY	public ConjunctionableRule ( ) { }
va	IDF	public void updateDisAssembly ( ) { try { misassembler . parse ( m_emuConsole ) ; } catch ( SystemException e ) { return ; } mDisAssembly = misassembler . getDisAssembly ( ) ; mInstructionPointers = misassembler . getInstructionPointers ( ) ; m_uiAsmList . removeAll ( ) ; m_uiAsmList . setListData ( mDisAssembly ) ; }
va	KEY	public boolean userMustBeRegister ( ) { return true ; }
va	IDF	public void verwijderVak ( long vakId ) { try { PreparedStatement preparedStatement = manager . prepareStatement ( "DELETE FROM vak_klas WHERE vak_id = ?" ) ; preparedStatement . setLong ( 1 , vakId ) ; preparedStatement . execute ( ) ; preparedStatement = manager . prepareStatement ( "DELETE FROM vakken WHERE id = ?" ) ; preparedStatement . setLong ( 1 , vakId ) ; preparedStatement . execute ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } }
va	KEY	public void totalPower ( double totalPower ) { this . totalPower = totalPower ; }
va	IDF	public Object clone ( ) { try { MersenneTwister f = ( MersenneTwister ) ( super . clone ( ) ) ; f . mt = ( int [ ] ) ( mt . clone ( ) ) ; f . mag01 = ( int [ ] ) ( mag01 . clone ( ) ) ; return f ; } catch ( CloneNotSupportedException e ) { throw new InternalError ( ) ; } }
va	IDF	private void buttonsMouseExited ( ) { for ( JButton b : buttons ) { for ( MouseListener m : b . getMouseListeners ( ) ) { m . mouseExited ( new MouseEvent ( b , 0 , 0 , 0 , 0 , 0 , 1 , false ) ) ; } } }
va	KEY	@ Override public int getNumberOfColumns ( ) { return 0 ; }
va	KEY	public synchronized void xassignR4KeyCode ( int code ) { r4 = code ; }
va	IDF	public TimeInfoControl ( final Composite parent , final int style ) { super ( parent , style ) ; setToolTipText ( Messages . StatusLine_TimeInfo_Title ) ; }
va	KEY	public float getY ( float alpha ) { return y ; }
va	KEY	public static long set ( long packed , int position , boolean value ) { if ( value ) { packed |= ( ( long ) 1 << position ) ; } else { packed &= ~ ( ( long ) 1 << position ) ; } return packed ; }
va	IDF	public FractalLexer ( java . io . InputStream in ) { this ( new java . io . InputStreamReader ( in ) ) ; }
va	IDF	public void initPanel ( ) { this . removeAll ( ) ; controleur . control ( ) ; joueur_courant = fenetre . getModele ( ) . getJoueurCourant ( ) ; adversaires = joueur_courant . getAdversairesEnVie ( ) ; selection_adversaire = new JComboBox < Joueur > ( adversaires ) ; selection_adversaire . setSelectedIndex ( indice ) ; selection_adversaire . setBounds ( 700 , 155 , 119 , 24 ) ; ennemi = adversaires [ selection_adversaire . getSelectedIndex ( ) ] ; tirs = joueur_courant . getTirsSurJoueur ( ) ; grille_joueur = new Grille ( fenetre . getModele ( ) . getOptions ( ) . getTailleGrille ( ) , joueur_courant , ( joueur_courant instanceof Humain ) ) ; grille_joueur . setBounds ( 67 , 187 , 320 , 320 ) ; grille_ennemi = new Grille ( fenetre . getModele ( ) . getOptions ( ) . getTailleGrille ( ) , ennemi , false ) ; grille_ennemi . setBounds ( 504 , 187 , 320 , 320 ) ; lblMaFlotte = new JLabel ( joueur_courant . getNom ( ) + " " + ( ( joueur_courant instanceof Ordinateur ) ? "[Ordinateur]" : "" ) ) ; lblMaFlotte . setBounds ( 67 , 160 , 200 , 15 ) ; lblFlotteEnnemi = new JLabel ( ennemi . getNom ( ) + " " + ( ( ennemi instanceof Ordinateur ) ? "[Ordinateur]" : "" ) ) ; lblFlotteEnnemi . setBounds ( 504 , 160 , 200 , 15 ) ; lblAction = new JLabel ( "Partie : " + type_partie ) ; lblAction . setFont ( new Font ( "Droid Serif" , Font . ITALIC | Font . BOLD , 32 ) ) ; lblAction . setBounds ( 67 , 87 , 614 , 24 ) ; this . add ( lblAction ) ; this . add ( lblMaFlotte ) ; this . add ( lblFlotteEnnemi ) ; if ( adversaires . length > 1 ) this . add ( selection_adversaire ) ; this . add ( grille_joueur ) ; this . add ( grille_ennemi ) ; }
va	IDF	public void createDB ( ) { try { stmt = connect . createStatement ( ) ; String sql = "CREATE TABLE " + nameTable + "(ID INTEGER PRIMARY KEY AUTOINCREMENT NULL " + " TOWN           TEXT    NOT NULL " + " PRICE          TEXT    NOT NULL " + " KM          TEXT    NOT NULL " + " CLOCK           TEXT    NOT NULL " + " ONEKM           TEXT    NOT NULL)" ; stmt . executeUpdate ( sql ) ; closeDB ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } }
va	IDF	public void allowPositionSet ( ) { for ( int i = 0 ; i < buttons . length ; i ++ ) { buttons [ i ] . setEnabled ( mainBoard . selectable [ i ] ) ; mainBoard . networkSelectable [ i ] = true ; } }
va	KEY	public final int getDifficulty ( ) { assert _statistics != null : "Question statistics is null" ; return _statistics . getDifficulty ( ) ; }
va	KEY	public void setPrecesado ( boolean precesado ) { this . precesado = precesado ; }
va	IDF	public static void main ( String [ ] args ) { System . out . println ( "Starting..." ) ; PGUtils pg = new PGUtils ( ) ; pg . connect ( ) ; List < String > names = pg . getTableNames ( ) ; int idx = names . indexOf ( "t2d2" ) ; names = names . subList ( idx , names . size ( ) ) ; Iterator < String > it = names . iterator ( ) ; while ( it . hasNext ( ) ) { String nm = it . next ( ) ; System . out . print ( "Working on " + nm + "." ) ; pg . makePoints ( nm , "geom" ) ; System . out . println ( "\t" + "Complete." ) ; } System . out . println ( "Complete." ) ; }
va	KEY	public long getSourceTypeErrorCode ( ) { return sourceTypeErrorCode ; }
va	IDF	public static List < String > split ( String s , String separator ) { List < String > result = new ArrayList < > ( ) ; int lastIndex = 0 ; int index = s . indexOf ( separator ) ; while ( index != - 1 ) { String substring = s . substring ( lastIndex , index ) ; if ( ! substring . equals ( separator ) && index > 0 ) result . add ( substring ) ; lastIndex = index + separator . length ( ) ; index = s . indexOf ( separator , lastIndex ) ; } if ( lastIndex < s . length ( ) ) result . add ( s . substring ( lastIndex , s . length ( ) ) ) ; return result ; }
va	IDF	private static PokerHandComparer doublePair ( ArrayList < PokerCard > cards , ArrayList < PokerCard > newCards ) { int pairCardValue = getCardValueRepetitionDoublePair ( cards , 2 ) ; int pairNewCardValue = getCardValueRepetitionDoublePair ( newCards , 2 ) ; if ( pairCardValue > pairNewCardValue ) { return PokerHandComparer . FirstHandIsBetter ; } else if ( pairCardValue == pairNewCardValue ) { return compareCardByCard ( cards , newCards ) ; } else { return PokerHandComparer . SecondHandIsBetter ; } }
va	KEY	public int size ( ) { return FTreeMap . this . size ( ) ; }
va	KEY	public void setLineTypeID ( int lineTypeID ) { this . lineTypeID = lineTypeID ; }
va	KEY	public int getPixelWidth ( ) { return ( getSquareSize ( ) * numSquareCell_Width ) ; }
va	KEY	public ReturnTree ( ) { }
va	IDF	public Builder ( String name , String id ) { this . name = name ; this . id = id ; }
va	IDF	public void keyReleased ( java . awt . event . KeyEvent evt ) { jTFPesquisaPesqKeyReleased ( evt ) ; }
va	IDF	public void setParameters ( HashMap < String , String > parameters ) { this . parameters = parameters ; }
va	KEY	public long getDuration ( ) { return duration ; }
va	IDF	public GameStateExtractor ( ) { try { _mainmenu = ImageIO . read ( getClass ( ) . getResource ( "resources/mainmenu.png" ) ) ; _episodemenu = ImageIO . read ( getClass ( ) . getResource ( "resources/episodemenu.png" ) ) ; _levelselection = ImageIO . read ( getClass ( ) . getResource ( "resources/levelselection.png" ) ) ; _loading = ImageIO . read ( getClass ( ) . getResource ( "resources/loading.png" ) ) ; _loading2 = ImageIO . read ( getClass ( ) . getResource ( "resources/loading2.png" ) ) ; _gamewon1 = ImageIO . read ( getClass ( ) . getResource ( "resources/gamewon1.png" ) ) ; _gamewon2 = ImageIO . read ( getClass ( ) . getResource ( "resources/gamewon2.png" ) ) ; _gamelost = ImageIO . read ( getClass ( ) . getResource ( "resources/gamelost.png" ) ) ; _endGame0 = ImageIO . read ( getClass ( ) . getResource ( "resources/0endScreen.png" ) ) ; _endGame1 = ImageIO . read ( getClass ( ) . getResource ( "resources/1endScreen.png" ) ) ; _endGame2 = ImageIO . read ( getClass ( ) . getResource ( "resources/2endScreen.png" ) ) ; _endGame3 = ImageIO . read ( getClass ( ) . getResource ( "resources/3endScreen.png" ) ) ; _endGame4 = ImageIO . read ( getClass ( ) . getResource ( "resources/4endScreen.png" ) ) ; _endGame5 = ImageIO . read ( getClass ( ) . getResource ( "resources/5endScreen.png" ) ) ; _endGame6 = ImageIO . read ( getClass ( ) . getResource ( "resources/6endScreen.png" ) ) ; _endGame7 = ImageIO . read ( getClass ( ) . getResource ( "resources/7endScreen.png" ) ) ; _endGame8 = ImageIO . read ( getClass ( ) . getResource ( "resources/8endScreen.png" ) ) ; _endGame9 = ImageIO . read ( getClass ( ) . getResource ( "resources/9endScreen.png" ) ) ; } catch ( IOException e ) { System . err . println ( "failed to load resources" ) ; e . printStackTrace ( ) ; } }
va	IDF	public Graphics2D getGraphicsContext ( ) { return ( Graphics2D ) this . strategy . getDrawGraphics ( ) ; }
va	KEY	public boolean isAccepted ( ) { return accepted ; }
va	KEY	public void memoryLow ( ) ;
va	IDF	public void setDouble ( double x ) throws SQLException { this . ps . setDouble ( parameterIndex ++ , x ) ; }
va	KEY	public ChampDeBataille ( ) { this ( 10 , 10 ) ; }
va	IDF	public void pop ( int v ) { Node helper = this . begin ; while ( helper != null ) { if ( helper . value == v ) { if ( helper . prev != null ) { helper . prev . next = helper . next ; } else { System . out . println ( "caiu no else. nao eh nulo!" ) ; System . out . println ( "helper eh " + helper . value + " e seu prev eh " + helper . prev + " e seu next eh " + helper . next . value ) ; helper . prev = helper . next ; } helper = null ; break ; } helper = helper . next ; } }
va	KEY	public int [ ] [ ] [ ] getWordLocations ( ) { return wordLocations ; }
va	KEY	public boolean isFamily ( ) { return family ; }
va	KEY	public abstract void addListeners ( ) ;
va	IDF	public void makeTable ( String tableName ) { String sql ; try { if ( overwrite ) { if ( tableExists ( tableName ) ) { stmt = conn . createStatement ( ) ; stmt . executeUpdate ( "DROP TABLE " + tableName ) ; stmt . close ( ) ; conn . commit ( ) ; } stmt = conn . createStatement ( ) ; sql = "CREATE TABLE " + tableName + "(" + "SOURCE VARCHAR(25)  " + "RELDEPTH NUMBER  " + "ID NUMBER(19) NOT NULL  " + "TIME_ TIMESTAMP  " + "DURATION NUMBER  " + "DISTANCE NUMBER  " + "STATUS VARCHAR(3)  " + "DESTINATION VARCHAR(25)  " + "NODATA NUMBER(1))" ; stmt . execute ( sql ) ; sql = "SELECT AddGeometryColumn ('public' " + tableName + " 'geom' 4326 'POINT' 3)" ; stmt . execute ( sql ) ; stmt . close ( ) ; conn . commit ( ) ; System . out . println ( "Trajectory table setup complete." ) ; } sql = "INSERT INTO " + tableName + "(" + "SOURCE  " + "RELDEPTH  " + "ID  " + "TIME_  " + "DURATION  " + "DISTANCE  " + "STATUS  " + "DESTINATION  " + "NODATA  " + "geom) " + "VALUES(? ? ? ? ? ? ? ? ? ST_SetSRID(ST_MakePoint(?  ?  ?)  4326));" ; ps1 = conn . prepareStatement ( sql ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } }
va	IDF	public static int count123 ( String str ) { int szCount = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { char c = str . charAt ( i ) ; if ( c >= 0 && c <= 9 ) { szCount ++ ; } } return szCount ; }
va	IDF	@ Override public IKey consulta ( String chave ) throws SQLException { Maquina maquina = null ; String sql = "SELECT * FROM maquina WHERE codigo = '" + chave + "'" ; Statement stmt = connection . createStatement ( ) ; ResultSet rs = stmt . executeQuery ( sql ) ; while ( rs . next ( ) ) { maquina = new Maquina ( ) ; maquina . setCodigo ( rs . getString ( "codigo" ) ) ; maquina . setDescricao ( rs . getString ( "descricao" ) ) ; } return maquina ; }
va	IDF	public void setSenderNumber ( String senderNumber ) { this . senderNumber = senderNumber ; }
va	IDF	protected void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { processRequest ( request , response ) ; }
va	KEY	void requestNextPlayerEvent ( ) ;
va	IDF	public static GetLongUrl parse ( javax . xml . stream . XMLStreamReader reader ) throws java . lang . Exception { GetLongUrl object = new GetLongUrl ( ) ; int event ; java . lang . String nillableValue = null ; java . lang . String prefix = "" ; java . lang . String namespaceuri = "" ; try { while ( ! reader . isStartElement ( ) && ! reader . isEndElement ( ) ) reader . next ( ) ; if ( reader . getAttributeValue ( "http://www.w3.org/2001/XMLSchema-instance" , "type" ) != null ) { java . lang . String fullTypeName = reader . getAttributeValue ( "http://www.w3.org/2001/XMLSchema-instance" , "type" ) ; if ( fullTypeName != null ) { java . lang . String nsPrefix = null ; if ( fullTypeName . indexOf ( ":" ) > - 1 ) { nsPrefix = fullTypeName . substring ( 0 , fullTypeName . indexOf ( ":" ) ) ; } nsPrefix = nsPrefix == null ? "" : nsPrefix ; java . lang . String type = fullTypeName . substring ( fullTypeName . indexOf ( ":" ) + 1 ) ; if ( ! "getLongUrl" . equals ( type ) ) { java . lang . String nsUri = reader . getNamespaceContext ( ) . getNamespaceURI ( nsPrefix ) ; return ( GetLongUrl ) ExtensionMapper . getTypeObject ( nsUri , type , reader ) ; } } } java . util . Vector handledAttributes = new java . util . Vector ( ) ; reader . next ( ) ; while ( ! reader . isStartElement ( ) && ! reader . isEndElement ( ) ) reader . next ( ) ; if ( reader . isStartElement ( ) && new javax . xml . namespace . QName ( "http://tinyurl.com.src" , "shortUrl" ) . equals ( reader . getName ( ) ) ) { nillableValue = reader . getAttributeValue ( "http://www.w3.org/2001/XMLSchema-instance" , "nil" ) ; if ( ! "true" . equals ( nillableValue ) && ! "1" . equals ( nillableValue ) ) { java . lang . String content = reader . getElementText ( ) ; object . setShortUrl ( org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( content ) ) ; } else { reader . getElementText ( ) ; } reader . next ( ) ; } else { } while ( ! reader . isStartElement ( ) && ! reader . isEndElement ( ) ) reader . next ( ) ; if ( reader . isStartElement ( ) ) throw new org . apache . axis2 . databinding . ADBException ( "Unexpected subelement " + reader . getName ( ) ) ; } catch ( javax . xml . stream . XMLStreamException e ) { throw new java . lang . Exception ( e ) ; } return object ; }
va	IDF	SendProxy ( TanksProtocol protocol , ClientHandler client , PrintStream log ) { this . protocol = protocol ; this . client = client ; this . log = log ; }
va	IDF	public void mouseExited ( MouseEvent event ) { this . setLocation ( getX ( ) - 10 , getY ( ) ) ; setFont ( new Font ( "DejaVu Sans Condensed" , Font . BOLD | Font . ITALIC , 14 ) ) ; }
va	IDF	public SimFile ( ) { difficulties = new ArrayList < SimFileDifficulty > ( ) ; }
va	IDF	public void updateBoardPanel ( Action action , GameModel game ) { if ( action instanceof RotatableComponentAction ) { boardPanel . placeTile ( ( ( RotatableComponentAction ) action ) . getY ( ) * 50 , ( ( RotatableComponentAction ) action ) . getX ( ) * 50 , ( ( RotatableComponentAction ) action ) . getRotationState ( ) , boardModel . getElevationAtCellXY ( ( ( RotatableComponentAction ) action ) . getX ( ) , ( ( RotatableComponentAction ) action ) . getY ( ) ) , action . imageKey ) ; } else if ( action instanceof OneSpaceTileAction ) { boardPanel . placeTile ( ( ( OneSpaceTileAction ) action ) . getY ( ) * 50 , ( ( OneSpaceTileAction ) action ) . getX ( ) * 50 , 0 , boardModel . getElevationAtCellXY ( ( ( OneSpaceTileAction ) action ) . getX ( ) , ( ( OneSpaceTileAction ) action ) . getY ( ) ) , action . imageKey ) ; } else if ( action instanceof PlaceDeveloperOnBoardAction || action instanceof TakeDeveloperOffBoardAction || action instanceof MoveDeveloperAction ) { Stack < Integer > xs = new Stack < Integer > ( ) ; Stack < Integer > ys = new Stack < Integer > ( ) ; Stack < String > images = new Stack < String > ( ) ; for ( Developer developer : game . getAllPlayerDevelopers ( ) ) { if ( developer != null ) { xs . push ( developer . getX ( ) * 50 ) ; ys . push ( developer . getY ( ) * 50 ) ; images . push ( "player_" + developer . getOwner ( ) . getColor ( ) ) ; } } System . out . println ( xs + " " + ys + " " + images ) ; boardPanel . placeDeveloper ( ys , xs , images ) ; } else if ( action instanceof HoldFestivalAction ) { boardPanel . haveFestivalOnPalace ( ( ( HoldFestivalAction ) action ) . palaceXY [ 0 ] , ( ( HoldFestivalAction ) action ) . palaceXY [ 1 ] ) ; } }
va	IDF	@ Test public void straightWeakness_Test ( ) { ArrayList < PokerCard > cards = new ArrayList < PokerCard > ( ) ; cards . add ( new PokerCard ( Card . As , Suit . Corazones ) ) ; cards . add ( new PokerCard ( Card . Dos , Suit . Diamantes ) ) ; cards . add ( new PokerCard ( Card . Tres , Suit . Picas ) ) ; cards . add ( new PokerCard ( Card . Cuatro , Suit . Corazones ) ) ; cards . add ( new PokerCard ( Card . Cinco , Suit . Corazones ) ) ; ArrayList < PokerCard > newCards = new ArrayList < PokerCard > ( ) ; newCards . add ( new PokerCard ( Card . Diez , Suit . Corazones ) ) ; newCards . add ( new PokerCard ( Card . Jota , Suit . Diamantes ) ) ; newCards . add ( new PokerCard ( Card . Reina , Suit . Picas ) ) ; newCards . add ( new PokerCard ( Card . Rey , Suit . Corazones ) ) ; newCards . add ( new PokerCard ( Card . As , Suit . Picas ) ) ; Map < String , Integer > rankDescriptionMap = PokerHelper . getPokerRankDescriptionByIndex ( ) ; int rankIndex = rankDescriptionMap . get ( PokerRankingCatalog . ESCALERA ) ; ArrayList < PokerCard > bestHand = PokerHandTieEvaluator . getBestHandWithTie ( cards , newCards , rankIndex ) ; assertEquals ( bestHand , newCards ) ; }
va	KEY	public IKCV ( ) { }
va	IDF	public static byte [ ] hexStringToBytes ( String hexString ) { if ( hexString == null || hexString . equals ( "" ) ) { return null ; } hexString = hexString . toUpperCase ( ) ; int length = hexString . length ( ) / 2 ; char [ ] hexChars = hexString . toCharArray ( ) ; byte [ ] d = new byte [ length ] ; for ( int i = 0 ; i < length ; i ++ ) { int pos = i * 2 ; d [ i ] = ( byte ) ( charToByte ( hexChars [ pos ] ) << 4 | charToByte ( hexChars [ pos + 1 ] ) ) ; } return d ; }
va	KEY	public boolean getCFlag ( ) { return mC ; }
va	KEY	public int getConnectionNumber ( ) { return activeConnections . size ( ) ; }
va	KEY	public boolean isNegLon ( ) { return negLon ; }
va	KEY	@ Override public ScenarioTreeStep getNextStep ( ) { if ( this . getFollowUpSteps ( ) . length == 0 ) { throw new RuntimeException ( "ScenarioTreeStepDBOWLSoftwareAndOS: Kein Folgeschritt gesetzt!" ) ; } return this . getFollowUpStep ( 0 ) ; }
va	IDF	public void setY ( float y ) { if ( Math . round ( y ) > Math . round ( getY ( ) ) ) { onGround = false ; } super . setY ( y ) ; }
va	KEY	@ Override public float getX ( ) { return this . x ; }
va	IDF	public HashMap < String , Course > getCourses ( ) { return courses ; }
va	KEY	public boolean isEndOfFile ( ) { return ( this . nextTokenLin < 0 ) ; }
va	KEY	public double distance ( ) { return G + H ; }
va	KEY	public void run ( ) { new InterfazPrincipal ( ) . setVisible ( true ) ; }
va	KEY	public static int getLow ( long l ) { return ( int ) ( l & lmask ) ; }
va	KEY	public void setWins ( long wins ) { this . wins = wins ; }
va	IDF	@ Override public Point2D world2screen ( Point2D world ) { return wr . getWorldTransform ( ) . transform ( world , null ) ; }
va	KEY	public Heap ( ) { }
va	IDF	public SearchRequestBuilder withImageRequestFilter ( String filter ) ;
va	KEY	public double getPrice ( ) { return price ; }
va	IDF	public static Date HYCOMToJavaDate ( long days ) { return new Date ( daysToMillis ( days ) + HYCOM_OFFSET ) ; }
va	IDF	public void printFile ( ) { boolean EOF = false ; while ( ! EOF ) { try { System . out . println ( read ( ) ) ; } catch ( EOFException e ) { EOF = true ; } } }
va	KEY	public void windowDeiconified ( final WindowEvent e ) { }
va	IDF	public String getModName ( ) { return nameField . getText ( ) ; }
va	IDF	public PaymentResponse makePayment ( CashPaymentRequest paymentRequest ) throws BeanstreamApiException { String url = BeanstreamUrls . getPaymentUrl ( config . getPlatform ( ) , config . getVersion ( ) ) ; String response = connector . ProcessTransaction ( HttpMethod . post , url , paymentRequest ) ; return gson . fromJson ( response , PaymentResponse . class ) ; }
va	KEY	public int getPageSize ( ) { return pageSize ; }
va	IDF	public void setDirectory ( String directory ) { this . directory = directory ; }
va	IDF	@ Override public void actionPerformed ( ActionEvent e ) { UIManager . put ( "nimbusBlueGrey" , new ColorUIResource ( red . getValue ( ) , green . getValue ( ) , blue . getValue ( ) ) ) ; UIManager . put ( "nimbusFocus" , new ColorUIResource ( red . getValue ( ) , green . getValue ( ) , blue . getValue ( ) ) ) ; SwingUtilities . updateComponentTreeUI ( ThemeSelector . this ) ; SwingUtilities . updateComponentTreeUI ( frame ) ; }
va	KEY	public int getHead ( int id ) { return edges [ id ] ; }
va	IDF	public void actionPerformed ( ActionEvent e ) { if ( mapPanel . level != null ) { fileChooser . addChoosableFileFilter ( levelFilter ) ; fileChooser . setFileFilter ( levelFilter ) ; int choice = fileChooser . showSaveDialog ( fileChooser ) ; fileChooser . removeChoosableFileFilter ( levelFilter ) ; if ( choice == JFileChooser . APPROVE_OPTION ) { File file = fileChooser . getSelectedFile ( ) ; mapPanel . level . setFilePath ( file ) ; mapPanel . level . write ( mapPanel . level . getFilePath ( ) ) ; } } }
va	KEY	public int getNote ( ) { return note ; }
va	KEY	@ Override public JLabel getLabel ( ) { return null ; }
va	KEY	public int getStartY ( ) { return startY ; }
va	KEY	public NoElementsEmptyException ( ) { super ( ) ; }
va	IDF	public void setId_Sucursal ( Sucursal Id_Sucursal ) { this . Id_Sucursal = Id_Sucursal ; }
va	KEY	@ Override protected Builder2 self ( ) { return this ; }
va	IDF	private void informaDadosPartida ( ) { Menu menuDados = new MenuDadosPartida ( ) ; boolean retornarMenu = false ; do { List < DadosPartida > listaPartidasConcluidas = manipuladorPartidas . criarListaPartidasConcluidas ( ) ; ItemMenu itemEscolhido = menuDados . insistirPorEntradaValida ( cli . getIo ( ) ) ; switch ( itemEscolhido . getNome ( ) ) { case "PARTIDAS" : Collections . sort ( listaPartidasConcluidas ) ; exibirPartidasConcluidas ( listaPartidasConcluidas ) ; break ; case "JOGADORES" : DadosPessoa dp = new DadosPessoa ( ) ; List < DadosPessoa > dadosPessoas = dp . geraListaDadosPessoa ( listaPartidasConcluidas ) ; Collections . sort ( dadosPessoas ) ; exibirJogadores ( dadosPessoas ) ; break ; case "APAGAR" : manipuladorPartidas . apagarTodasPartidas ( ) ; break ; case "RETORNAR" : retornarMenu = true ; break ; } } while ( ! retornarMenu ) ; }
va	IDF	void generateBoard ( List < Point > positions ) { int i , j ; Random random = new Random ( ) ; boolean playerArea ; System . out . println ( positions ) ; for ( i = 0 ; i < getWidth ( ) ; i ++ ) { for ( j = 0 ; j < getHeight ( ) ; j ++ ) { playerArea = false ; if ( ( ( j == 0 && ( i <= 1 || i >= getWidth ( ) - 2 ) ) || ( j == 1 && ( i == 0 || i == getWidth ( ) - 1 ) ) || ( j == getHeight ( ) - 2 && ( i == 0 || i == getWidth ( ) - 1 ) ) || ( j == getHeight ( ) - 1 && ( i <= 1 || i >= getWidth ( ) - 2 ) ) ) ) { setItem ( new Ground ( game , new Point ( i , j ) ) ) ; playerArea = true ; } if ( ! playerArea ) { if ( i % 2 == 1 && j % 2 == 1 ) { setItem ( new Block ( game , new Point ( i , j ) ) ) ; } else { switch ( random . nextInt ( 10 ) ) { case 0 : case 1 : case 2 : setItem ( new Wall ( game , new Point ( i , j ) ) ) ; break ; case 3 : case 4 : case 5 : setItem ( new Wall ( game , new Point ( i , j ) ) ) ; break ; case 6 : setItem ( new NotAWall ( game , new Point ( i , j ) ) ) ; break ; default : setItem ( new Ground ( game , new Point ( i , j ) ) ) ; break ; } } } } } }
va	KEY	public boolean interact ( String action , Interactable target ) { if ( super . interact ( action , target ) ) { return true ; } return false ; }
va	KEY	@ Override public int getRowCount ( ) { return numberOfHighScores ; }
va	KEY	public BoolContext ( ) { }
va	IDF	private void createPreview ( String frameSize ) { try { File input = new File ( "resources/input.jpg" ) ; _builder = new ProcessBuilder ( "/bin/bash" , "-c" , "avconv -loop 1 -i '" + input . getAbsolutePath ( ) + "' -r 1 -t 1 -s " + frameSize + " preview.mp4" ) ; _builder . directory ( new File ( System . getProperty ( "user.home" ) + "/VAMIX" ) ) ; _builder = _builder . redirectErrorStream ( true ) ; _process = _builder . start ( ) ; _result = _process . waitFor ( ) ; _process . destroy ( ) ; } catch ( IOException | InterruptedException e ) { } }
va	KEY	public double get ( int col , int row ) ;
va	IDF	@ Override public < S , T > T visit ( Visitor < S , T > v , S state ) throws FractalException { return v . visitASTFracVar ( this , state ) ; }
va	KEY	public int get_minRange ( ) { return _minRange ; }
va	IDF	public void delItem ( int aidx ) { if ( aidx >= 0 && aidx < getCount ( ) ) { mystrings . remove ( aidx ) ; myobjects . remove ( aidx ) ; } }
va	KEY	public MsgTypeDaoImpl ( ) { }
va	IDF	@ Override public void paintComponent ( Graphics graphical ) { super . paintComponent ( graphical ) ; Graphics2D graphical2D = ( Graphics2D ) graphical ; if ( this . caneta ) { graphical2D . setColor ( new Color ( r , g , b , 255 ) ) ; } else { graphical2D . setColor ( new Color ( r , g , b , 0 ) ) ; } graphical2D . drawLine ( this . currentX , this . currentY , this . newX , this . newY ) ; }
va	KEY	public synchronized void xsetL1repeatable ( boolean flag ) { isL1repeatable = flag ; }
va	IDF	@ Override public void run ( ) { FPSManager fpsManager = FPSManager . getInstance ( ) ; while ( ! Display . isCloseRequested ( ) ) { initBuffer ( ) ; Key . update ( ) ; sceneManager . update ( ) ; sceneManager . render ( ) ; fpsManager . update ( ) ; } }
va	IDF	@ Override public void setOldStyleNumerals ( boolean enable ) { mOldStyle = enable ; }
va	KEY	public long getFlightHistoryId ( ) { return flightHistoryId ; }
va	IDF	public void actionPerformed ( ActionEvent ae2 ) { list1 . add ( String . valueOf ( itemsArray [ buttonIndex ] [ 1 ] ) ) ; subTotal += double . parseDouble ( itemsArray [ buttonIndex ] [ 3 ] ) ; if ( itemsArray [ 4 ] . equals ( "1" ) ) { taxSubtotal += double . parseDouble ( itemsArray [ buttonIndex ] [ 3 ] ) ; } taxTotalCalculated = taxSubtotal * ( taxRate / 100 ) ; amountDueCalculated = ( taxTotalCalculated + subTotal ) - ( amountPaidEntry + discountEntry ) ; amountDue . setText ( decim . format ( amountDueCalculated ) . toString ( ) ) ; subTotals . setText ( decim . format ( subTotal ) . toString ( ) ) ; taxTotal . setText ( decim . format ( taxSubtotal * taxRate / 100 ) . toString ( ) ) ; total . setText ( decim . format ( subTotal + taxTotalCalculated ) . toString ( ) ) ; action . add ( itemsArray ) ; jPanel2 . setVisible ( true ) ; jPanel3 . setVisible ( false ) ; jPanel3 . removeAll ( ) ; JPanel itemPane = new JPanel ( ) ; itemPane . setLayout ( new GridLayout ( 5 , 5 , 5 , 5 ) ) ; itemPane . setVisible ( true ) ; }
va	IDF	public void pintar ( int newX , int newY , int angulo , boolean caneta , int r , int g , int b ) { newY = getHeight ( ) - newY ; if ( newY < 0 ) { newY *= - 1 ; } try { Thread . sleep ( DELAY_TIME ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } this . add ( new Movimento ( sizeX , sizeY , currentX , currentY , newX , newY , caneta , r , g , b ) ) ; this . tartaruga . setBounds ( newX - Koopa . WIDTH / 2 , newY - Koopa . HEIGHT , Koopa . WIDTH , Koopa . HEIGHT ) ; this . tartaruga . setAngulo ( - angulo ) ; this . tartaruga . repaint ( ) ; this . repaint ( ) ; this . currentX = newX ; this . currentY = newY ; }
va	KEY	public void setUnitPrice ( double unitPrice ) { this . unitPrice = unitPrice ; }
va	IDF	public UStatus [ ] findByDynamicWhere ( String sql , Object [ ] sqlParams ) throws UStatusDaoException ;
va	IDF	private void doLogin ( ) { final String user = username . getText ( ) ; String pass = new String ( passwordField . getPassword ( ) ) ; try { client . sendLoginMessage ( user , pass ) ; } catch ( JMSException e1 ) { e1 . printStackTrace ( ) ; } ChatClientApplicationGUI . addServerMessageListener ( new ServerMessageListener ( ) { public void onMessageReceived ( ChatMessage m ) { if ( ! ( m instanceof LoginMessage ) ) return ; LoginMessage lm = ( LoginMessage ) m ; if ( lm . getLoginStatus ( ) ) { System . out . println ( "Login Successful! Joining main lobby..." ) ; clientName = user ; GUI gui = new GUI ( client ) ; gui . setClientName ( clientName ) ; gui . setVisible ( true ) ; dispose ( ) ; } else { JOptionPane . showMessageDialog ( null , "Login failed! Wrong username/password or user already logged in." ) ; username . setText ( "" ) ; passwordField . setText ( "" ) ; username . requestFocus ( ) ; } } } ) ; }
va	KEY	public DraughtsGUI ( ) { this . listeners = new ArrayList < > ( ) ; }
va	IDF	@ Override public void setImage ( Image image ) { this . image = image ; if ( marked ) { refreshIcon ( ) ; marked = false ; } else { this . repaint ( ) ; } }
va	KEY	public double getMaxy ( ) { return maxy ; }
va	IDF	public void testManifestSignature ( ) throws Exception { CollectingErrorHandler status = new CollectingErrorHandler ( ) ; Manifest manifest = loadManifestFromResource ( "data/peanut_butter.xml" , status ) ; assertEquals ( 0 , status . getErrors ( ) . size ( ) ) ; status = new CollectingErrorHandler ( ) ; File temp = File . createTempFile ( "tipp" , ".xml" ) ; System . out . println ( "Using: " + temp ) ; FileOutputStream fos = new FileOutputStream ( temp ) ; ManifestWriter mw = new ManifestWriter ( ) ; KeyPairGenerator kpg = KeyPairGenerator . getInstance ( "DSA" ) ; kpg . initialize ( 512 ) ; KeyPair kp = kpg . generateKeyPair ( ) ; mw . setKeyPair ( kp ) ; mw . saveToStream ( manifest , fos ) ; fos . flush ( ) ; fos . close ( ) ; CollectingErrorHandler roundtripStatus = new CollectingErrorHandler ( ) ; FileInputStream fis = new FileInputStream ( temp ) ; new ManifestLoader ( ) . loadFromStream ( fis , roundtripStatus ) ; TestUtils . expectLoadStatus ( roundtripStatus , 1 , TIPPErrorSeverity . WARN ) ; assertEquals ( UNABLE_TO_VERIFY_SIGNATURE , roundtripStatus . getErrors ( ) . get ( 0 ) . getErrorType ( ) ) ; roundtripStatus = new CollectingErrorHandler ( ) ; fis = new FileInputStream ( temp ) ; new ManifestLoader ( ) . loadFromStream ( fis , roundtripStatus , KeySelector . singletonKeySelector ( kp . getPublic ( ) ) , null ) ; TestUtils . expectLoadStatus ( roundtripStatus , 0 , TIPPErrorSeverity . NONE ) ; }
va	KEY	public synchronized int xgetD3RepeatDelay ( ) { return d3RD ; }
va	KEY	public void setId ( int id ) { this . id = id ; }
va	KEY	public double [ ] getVector ( ) { return vector ; }
va	IDF	public Entity select ( ) { return cursor . getTopEntity ( ) ; }
va	KEY	public abstract int getLineLength ( ) ;
va	IDF	Move rootAlphaBeta ( NodeLVL1 node , int alpha , int beta , int player , int depth ) throws Exception { Move bestMove = null ; this . value = - 10000 ; DraughtsState state = node . getState ( ) ; List < Move > moves = state . getMoves ( ) ; if ( moves . size ( ) == 0 ) { return moves . get ( 0 ) ; } for ( Move move : moves ) { state . doMove ( move ) ; alpha = max ( alpha , - alphaBeta ( new NodeLVL1 ( state . clone ( ) ) , - beta , - alpha , - ( player ) , depth - 1 ) ) ; state . undoMove ( move ) ; if ( alpha > this . value ) { this . value = alpha ; bestMove = move ; } } System . out . println ( "PlayerLVL1 count:" + count ) ; count = 0 ; if ( bestMove == null ) { Collections . shuffle ( moves ) ; return moves . get ( 0 ) ; } return bestMove ; }
va	IDF	public void recordOtherStats ( int x , int y ) { switch ( map [ x ] [ y ] ) { case Level . BLOCK_COIN : numCoinBlocks ++ ; break ; case Level . BLOCK_EMPTY : numEmptyBlocks ++ ; break ; case Level . BLOCK_POWERUP : numPowerups ++ ; break ; case Level . COIN : numCoins ++ ; break ; default : break ; } }
va	KEY	@ Override public long getSpentTime ( ) { return this . spentTime ; }
va	IDF	public int gi ( String p ) { try { if ( params . contains ( p ) ) { return ( int ) double . parseDouble ( values . get ( params . indexOf ( p ) ) ) ; } else { return 0 ; } } catch ( Exception e ) { return 0 ; } }
va	IDF	public FriendshStatus [ ] findByDynamicSelect ( String sql , Object [ ] sqlParams ) throws FriendshStatusDaoException { final boolean isConnSupplied = ( userConn != null ) ; Connection conn = null ; PreparedStatement stmt = null ; ResultSet rs = null ; try { conn = isConnSupplied ? userConn : ResourceManager . getConnection ( ) ; final String SQL = sql ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Executing " + SQL ) ; } stmt = conn . prepareStatement ( SQL ) ; stmt . setMaxRows ( maxRows ) ; for ( int i = 0 ; sqlParams != null && i < sqlParams . length ; i ++ ) { stmt . setObject ( i + 1 , sqlParams [ i ] ) ; } rs = stmt . executeQuery ( ) ; return fetchMultiResults ( rs ) ; } catch ( Exception _e ) { logger . error ( "Exception: " + _e . getMessage ( ) , _e ) ; throw new FriendshStatusDaoException ( "Exception: " + _e . getMessage ( ) , _e ) ; } finally { ResourceManager . close ( rs ) ; ResourceManager . close ( stmt ) ; if ( ! isConnSupplied ) { ResourceManager . close ( conn ) ; } } }
va	IDF	@ Override public void runTest ( ) { int [ ] a = { 4 , 2 , 3 , 1 , 5 } ; quickSort ( a , 0 , a . length - 1 ) ; for ( int n : a ) System . out . printf ( "%d  " , n ) ; }
va	KEY	@ Override public boolean isUserError ( ) { if ( getCategory ( ) == 1 ) return true ; else if ( getCategory ( ) == 3 && getCode ( ) == 52 ) return true ; else return false ; }
va	KEY	public Laboratorios ( ) { }
va	KEY	public abstract void curveTo ( double x1 , double y1 , double x2 , double y2 , double x3 , double y3 ) ;
va	IDF	public int executeUpdateParameters ( Object ... objs ) throws Exception { setParameters ( objs ) ; return executeUpdate ( ) ; }
va	KEY	public AddGroupResponse createAddGroupResponse ( ) { return new AddGroupResponse ( ) ; }
va	KEY	@ Override public int getPixcelY ( ) { return ( int ) y ; }
va	IDF	public void windowClosing ( WindowEvent e ) { System . exit ( 0 ) ; }
va	IDF	@ Test public void canUpdateCategoryWithNegativeStaff ( ) { CategoryDAO cd = new CategoryDAO ( ) ; CategoryModel addedCategory = new CategoryModel ( "toAddCategory" , generatedStaffId ) ; CategoryModel updatedCategory = new CategoryModel ( "toAddCategory" , - 100 ) ; boolean wasException = false ; try { addedCategory = insertCategory ( addedCategory ) ; updatedCategory = new CategoryModel ( addedCategory . getId ( ) , updatedCategory ) ; cd . updateCategory ( updatedCategory ) ; } catch ( WebshopAppException e ) { wasException = true ; } deleteCategoryById ( addedCategory . getId ( ) ) ; assertTrue ( wasException ) ; }
va	KEY	@ Override public ScenarioTreeStep getNextStep ( ) { if ( this . getFollowUpSteps ( ) . length == 0 ) { throw new RuntimeException ( "ScenarioTreeStepDBOWLComputerComponents: Kein Folgeschritt gesetzt!" ) ; } return this . getFollowUpStep ( 0 ) ; }
va	KEY	public int getI ( ) { return i ; }
va	IDF	protected void assertNotNull ( String name , Object value ) { if ( value == null ) { throw new IllegalArgumentException ( name + " cannot be null." ) ; } }
va	IDF	public int maxPoints ( Point [ ] points ) { if ( points == null || points . length == 0 ) return 0 ; int global_max = 0 ; for ( Point p1 : points ) { int local_max = 0 ; Map < double , Integer > map = new HashMap < > ( ) ; int no_slope_cnt = 0 ; int overlap_cnt = 0 ; for ( Point p2 : points ) { if ( p1 == p2 ) continue ; if ( p1 . x == p2 . x && p1 . y == p2 . y ) overlap_cnt ++ ; else if ( p1 . x == p2 . x ) no_slope_cnt ++ ; else { double slope = ( p2 . y - p1 . y ) / ( double ) ( p2 . x - p1 . x ) ; if ( map . containsKey ( slope ) ) map . put ( slope , map . get ( slope ) + 1 ) ; else map . put ( slope , 1 ) ; } } for ( int count : map . values ( ) ) { if ( count + overlap_cnt > local_max ) local_max = count + overlap_cnt ; } if ( no_slope_cnt + overlap_cnt > local_max ) local_max = no_slope_cnt + overlap_cnt ; if ( local_max > global_max ) global_max = local_max ; } return global_max + 1 ; }
va	KEY	public void setIdRight ( int idRight ) { this . idRight = idRight ; }
va	IDF	public void push ( int v ) { Node node = new Node ( v ) ; if ( this . isEmpty ( ) ) { this . first = node ; } else { Node helper = this . first ; while ( helper . next != null ) { if ( helper . next != null ) helper = helper . next ; } helper . next = node ; } this . size ++ ; }
va	KEY	public void setToServer ( int toServer ) { this . toServer = toServer ; }
va	IDF	public CAPECXMLProcessing ( ) { super ( ) ; all . add ( social_attacks ) ; all . add ( supply_attacks ) ; all . add ( commu_attacks ) ; all . add ( software_attacks ) ; all . add ( physical_attacks ) ; all . add ( hardware_attacks ) ; try { session = new BaseXClient ( "localhost" , 1984 , "admin" , "admin" ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }
va	KEY	public int getCountUpdate ( ) { if ( sql_update != null ) return sql_update . getCount ( ) ; else return 0 ; }
va	KEY	public int getHigh ( ) { return high ; }
va	IDF	protected void removeProperty ( INDIProperty property ) { removeProperty ( property , null ) ; }
va	KEY	public static float nextUp ( final float a ) { return nextAfter ( a , float . POSITIVE_INFINITY ) ; }
va	KEY	public final String getFull ( ) { return this . type + "/" + this . subtype ; }
va	KEY	public int getNcols ( ) { return c ; }
va	KEY	public ParameterMapper getParameterMapper ( ) { return this . parameterMapper ; }
va	IDF	public final PathIterator getPathIterator ( AffineTransform at , double flatness ) { return new FlatteningPathIterator ( getPathIterator ( at ) , flatness ) ; }
va	KEY	public abstract void update ( T t ) ;
va	KEY	public int getDelay ( ) { return timer . getDelay ( ) ; }
va	KEY	public void setHeight ( int height ) { this . height = height ; }
va	IDF	public JSONObject putOnce ( String key , Object value ) throws JSONException { if ( key != null && value != null ) { if ( this . opt ( key ) != null ) { throw new JSONException ( "Duplicate key \"" + key + "\"" ) ; } this . put ( key , value ) ; } return this ; }
va	IDF	public static void printConnectionInfo ( Connection connection ) throws SQLException { DatabaseMetaData databaseMetaData = connection . getMetaData ( ) ; StringBuilder sb = new StringBuilder ( 100 ) ; sb . append ( "Connected as : " ) . append ( databaseMetaData . getUserName ( ) ) . append ( "\n" ) . append ( "          to : " ) . append ( databaseMetaData . getDatabaseProductName ( ) ) . append ( " " ) . append ( databaseMetaData . getDatabaseProductVersion ( ) ) . append ( "\n" ) . append ( "       using : " ) . append ( databaseMetaData . getDriverName ( ) ) . append ( " " ) . append ( databaseMetaData . getDriverMajorVersion ( ) ) . append ( "." ) . append ( databaseMetaData . getDriverMinorVersion ( ) ) . append ( " type " ) . append ( databaseMetaData . getJDBCMajorVersion ( ) ) . append ( "." ) . append ( databaseMetaData . getJDBCMinorVersion ( ) ) . append ( "\n" ) ; System . out . println ( sb . toString ( ) ) ; }
va	IDF	public BufferedServletInputStream ( ServletInputStream in ) { this . in = in ; }
va	IDF	private boolean move ( float xa , float ya ) { while ( xa > 8 ) { if ( ! move ( 8 , 0 ) ) return false ; xa -= 8 ; } while ( xa < - 8 ) { if ( ! move ( - 8 , 0 ) ) return false ; xa += 8 ; } while ( ya > 8 ) { if ( ! move ( 0 , 8 ) ) return false ; ya -= 8 ; } while ( ya < - 8 ) { if ( ! move ( 0 , - 8 ) ) return false ; ya += 8 ; } boolean collide = false ; if ( ya > 0 ) { if ( isBlocking ( x + xa - width , y + ya , xa , 0 ) ) collide = true ; else if ( isBlocking ( x + xa + width , y + ya , xa , 0 ) ) collide = true ; else if ( isBlocking ( x + xa - width , y + ya + 1 , xa , ya ) ) collide = true ; else if ( isBlocking ( x + xa + width , y + ya + 1 , xa , ya ) ) collide = true ; } if ( ya < 0 ) { if ( isBlocking ( x + xa , y + ya - height , xa , ya ) ) collide = true ; else if ( collide || isBlocking ( x + xa - width , y + ya - height , xa , ya ) ) collide = true ; else if ( collide || isBlocking ( x + xa + width , y + ya - height , xa , ya ) ) collide = true ; } if ( xa > 0 ) { if ( isBlocking ( x + xa + width , y + ya - height , xa , ya ) ) collide = true ; if ( isBlocking ( x + xa + width , y + ya - height / 2 , xa , ya ) ) collide = true ; if ( isBlocking ( x + xa + width , y + ya , xa , ya ) ) collide = true ; if ( avoidCliffs && onGround && ! world . level . isBlocking ( ( int ) ( ( x + xa + width ) / 16 ) , ( int ) ( ( y ) / 16 + 1 ) , xa , 1 ) ) collide = true ; } if ( xa < 0 ) { if ( isBlocking ( x + xa - width , y + ya - height , xa , ya ) ) collide = true ; if ( isBlocking ( x + xa - width , y + ya - height / 2 , xa , ya ) ) collide = true ; if ( isBlocking ( x + xa - width , y + ya , xa , ya ) ) collide = true ; if ( avoidCliffs && onGround && ! world . level . isBlocking ( ( int ) ( ( x + xa - width ) / 16 ) , ( int ) ( ( y ) / 16 + 1 ) , xa , 1 ) ) collide = true ; } if ( collide ) { if ( xa < 0 ) { x = ( int ) ( ( x - width ) / 16 ) * 16 + width ; this . xa = 0 ; } if ( xa > 0 ) { x = ( int ) ( ( x + width ) / 16 + 1 ) * 16 - width - 1 ; this . xa = 0 ; } if ( ya < 0 ) { y = ( int ) ( ( y - height ) / 16 ) * 16 + height ; this . ya = 0 ; } if ( ya > 0 ) { y = ( int ) ( y / 16 + 1 ) * 16 - 1 ; onGround = true ; } return false ; } else { x += xa ; y += ya ; return true ; } }
va	KEY	public boolean isOutOfContainer ( ) { return this . getContainer ( ) . isInBox ( ( Point ) this . getBlkCoordinate ( ) ) ; }
va	KEY	public int getWidth ( ) { return width ; }
va	KEY	public Land land ( ) { return new Land ( this ) ; }
va	KEY	public void identity ( ) ;
va	KEY	public void editCards ( ) ;
va	KEY	public void wakeUp ( ) { }
va	KEY	public static int getWuXingNumByWuXing ( String wuxing ) { if ( wuxing . endsWith ( "\u91D1" ) ) return 4 ; else if ( wuxing . endsWith ( "\u6728" ) ) return 3 ; else if ( wuxing . endsWith ( "\u6C34" ) ) return 2 ; else if ( wuxing . endsWith ( "\u706B" ) ) return 6 ; else if ( wuxing . endsWith ( "\u571F" ) ) return 5 ; return - 1 ; }
va	IDF	@ Override public void run ( ) { String name = Thread . currentThread ( ) . getName ( ) ; while ( isRunning ) { System . out . println ( name + ":\u6709\u5176\u4ED6\u7EBF\u7A0B\u6B63\u5728\u8FD0\u884C" ) ; try { TimeUnit . SECONDS . sleep ( 2 ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } } if ( ! isRunning ) { isRunning = true ; } System . out . println ( name + ":\u6B63\u5728\u8FD0\u884C" ) ; try { TimeUnit . SECONDS . sleep ( 5 ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } isRunning = false ; }
va	IDF	public static INDILightProperty createSaveableLightProperty ( INDIDriver driver , String name , PropertyStates state ) throws IllegalArgumentException { INDILightProperty lp = loadLightProperty ( driver , name ) ; if ( lp == null ) { lp = new INDILightProperty ( driver , name , state ) ; lp . setSaveable ( true ) ; } return lp ; }
va	KEY	public FerramentaDAO ( ) throws SQLException { super ( ) ; }
va	IDF	public FractalParser ( java_cup . runtime . Scanner s ) { super ( s ) ; }
va	IDF	@ Override public void setModel ( Profile model ) { this . model = model ; }
va	IDF	@ Override public void print ( int indent ) { printIndent ( indent , "print '" + message + "'" ) ; }
va	IDF	private void buttonOkMousePressed ( java . awt . event . MouseEvent evt ) { buttonOk . setIcon ( new javax . swing . ImageIcon ( getClass ( ) . getResource ( "/app/images/buttonOkPressed_Popup.png" ) ) ) ; }
va	KEY	public static String getDataBaseServerIP ( ) { return lePropriedade ( "Database.Server.IP" ) ; }
va	IDF	public Iterator < Elt > iterator ( ) { return new FTreeList . FTLIterator ( list_tree ) ; }
va	KEY	public FractalRestoreException ( ) { super ( "RESTORE Error: No state to restore!" ) ; }
va	KEY	public double getDouble ( ) { return value ; }
va	IDF	protected void readRequest ( ) throws IOException { String type = null ; String type1 = fRequest . getContentType ( ) ; String type2 = fRequest . getHeader ( "Content-Type" ) ; if ( type1 == null && type2 != null ) type = type2 ; else if ( type2 == null && type1 != null ) type = type1 ; else if ( type1 != null && type2 != null ) type = ( type1 . length ( ) > type2 . length ( ) ? type1 : type2 ) ; if ( type == null ) throw new IOException ( "Content type is null" ) ; else if ( ! type . toLowerCase ( ) . startsWith ( "multipart/form-data" ) ) throw new IOException ( "Content not multipart/form-data: " + type ) ; int length = fRequest . getContentLength ( ) ; if ( length > fMaxSize ) throw new IOException ( "Content length " + length + " exceeds limit " + fMaxSize ) ; String boundary = extractBoundary ( type ) ; if ( boundary == null ) throw new IOException ( "Separation boundary not found" ) ; MultipartStreamHandler in = new MultipartStreamHandler ( fRequest . getInputStream ( ) , boundary , length ) ; String line = in . readLine ( ) ; if ( line == null ) throw new IOException ( "Corrupt form data:  premature end" ) ; if ( ! line . startsWith ( boundary ) ) throw new IOException ( "Corrupt form data:  missing leading boundary" ) ; boolean done = false ; while ( ! done ) { done = readNextPart ( in , boundary ) ; } }
va	KEY	public int getSelection ( ) { return this . selectedOption ; }
va	KEY	public void setStop ( boolean stop ) { this . stop = stop ; }
va	IDF	@ Override public void onConnecting ( ) { if ( connectedState == ConnectedState . CONNECTING ) return ; this . connectedState = ConnectedState . CONNECTING ; synchronized ( mListeners ) { for ( ConnectionListener listener : mListeners ) { try { listener . onConnecting ( ) ; } catch ( RuntimeException e ) { System . out . println ( "Error notifying listener" ) ; e . printStackTrace ( ) ; } } } System . out . println ( "--> Connecting to server..." ) ; }
va	KEY	public int getHolesInOne ( ) { return holesInOne ; }
va	IDF	public void showUpdatedSuccess ( ) { System . out . println ( "You have updated your User." ) ; }
va	IDF	public User [ ] findWhereTypeUEquals ( String typeU ) throws UserDaoException { return findByDynamicSelect ( SQL_SELECT + " WHERE typeU = ? ORDER BY typeU" , new Object [ ] { typeU } ) ; }
va	KEY	public MongoEntity setPrice ( double price ) { this . put ( "price" , price ) ; return this ; }
va	IDF	public void run ( ) { JFrame frame = new Mvc ( ) ; frame . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ) ; frame . setTitle ( "MVC" ) ; frame . setSize ( 200 , 400 ) ; frame . setLocationByPlatform ( true ) ; frame . setVisible ( true ) ; }
va	IDF	void close ( ) throws IOException { if ( root != null ) { FileUtil . recursiveDelete ( root ) ; } }
va	KEY	protected void interrupted ( ) { }
va	KEY	@ Action public void close ( ) { setVisible ( false ) ; }
va	KEY	public void setLon ( double lon ) { this . lon = lon ; }
va	IDF	@ Override public Tipo getTipo ( AmbienteCompilacao amb ) throws VariavelNaoDeclaradaException , VariavelJaDeclaradaException { return TipoExpressaoComando . boolean ; }
va	KEY	@ Override public long getTimestamp ( ) { return this . time ; }
va	KEY	@ Override public boolean equals ( Object o ) { if ( o == null ) return false ; if ( o == this ) return true ; if ( getClass ( ) != o . getClass ( ) ) return false ; ReadOnlyArray < E > mo = ( ReadOnlyArray < E > ) o ; if ( this . compareTo ( mo ) == 0 ) return true ; return false ; }
va	KEY	public void confirm ( ) ;
va	IDF	public int maxPathSum ( TreeNode root ) { if ( root == null ) return 0 ; int max [ ] = new int [ 1 ] ; max [ 0 ] = root . val ; findMax ( root , max ) ; return max [ 0 ] ; }
va	IDF	public static Object readData ( byte [ ] data , class < ? > clazz , String charset ) throws UnsupportedEncodingException { Gson gson = new GsonBuilder ( ) . setPrettyPrinting ( ) . create ( ) ; String content = new String ( data , charset ) ; return gson . fromJson ( content , clazz ) ; }
va	IDF	public synchronized void checkOther ( DeadlockDemo other ) { print ( "entering checkOther()" ) ; try { Thread . sleep ( 2000 ) ; } catch ( InterruptedException x ) { } print ( "in checkOther() - about to " + "invoke 'other.action()'" ) ; other . action ( ) ; print ( "leaving checkOther()" ) ; }
va	KEY	public abstract Object clone ( ) ;
va	KEY	public boolean getWorking ( ) { return _isWorking ; }
va	KEY	public void stopHasBeenRequested ( ) { }
va	KEY	public static String getLastSavedWorkspace ( ) { return lastSavedWorkspace ; }
va	IDF	NewsSortOption ( String v ) { value = v ; }
va	IDF	public void setHeadOfHouseGender ( LabeledDropdown headOfHouseGender ) { this . headOfHouseGender = headOfHouseGender ; }
va	KEY	public int getMouseButton ( ) { if ( e instanceof MouseEvent ) { return ( ( MouseEvent ) e ) . getButton ( ) ; } else { return 0 ; } }
va	IDF	public GameEntity getEntityAt ( double x , double y ) { return physics . getEntityAt ( x , y ) ; }
va	IDF	@ Override public int compareTo ( Object o ) { Album other = ( Album ) o ; int compName = _name . compareTo ( other . _name ) ; int compArtist = _artist . compareTo ( other . _artist ) ; if ( compName < 0 ) return - 1 ; else if ( compName > 0 ) return 1 ; else if ( _year < other . _year ) return - 1 ; else if ( _year > other . _year ) return 1 ; else if ( compArtist < 0 ) return - 1 ; else if ( compArtist > 0 ) return 1 ; else return 0 ; }
va	IDF	private static byte [ ] pssPad ( byte [ ] salt , byte [ ] text , boolean doHash , int emLen ) { try { MessageDigest md = MessageDigest . getInstance ( "SHA1" ) ; byte [ ] h1 = null ; if ( doHash ) { h1 = md . digest ( text ) ; } else { h1 = text ; } int hLen = h1 . length ; int sLen = 20 ; int psLen = emLen - sLen - hLen - 2 ; byte [ ] output = new byte [ emLen ] ; md . update ( output , 0 , ( short ) 8 ) ; md . update ( h1 , 0 , hLen ) ; byte [ ] tmpHash = md . digest ( salt ) ; output [ psLen ] = ( byte ) 01 ; int hOffset = emLen - hLen - 1 ; System . arraycopy ( tmpHash , 0 , output , hOffset , hLen ) ; System . arraycopy ( salt , 0 , output , psLen + 1 , salt . length ) ; output [ emLen - 1 ] = ( byte ) bc ; int counter = 0 ; int outOffset = 0 ; byte [ ] c = new byte [ 4 ] ; while ( outOffset < hOffset ) { c [ c . length - 1 ] = ( byte ) counter ; md . update ( output , hOffset , hLen ) ; tmpHash = md . digest ( c ) ; if ( outOffset + hLen > hOffset ) { hLen = hOffset - outOffset ; } for ( int i = 0 ; i < hLen ; i ++ ) { output [ outOffset ++ ] ^= tmpHash [ i ] ; } counter ++ ; } return output ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }
va	IDF	public Collection < Lesson > getLessons ( ) { return Collections . unmodifiableCollection ( lessons ) ; }
va	IDF	public void addEntry ( int _x , double _value ) { if ( _value == 0 ) return ; if ( size == capacity ) grow ( ) ; x [ size ] = _x ; va [ size ] = _value ; ++ size ; }
va	KEY	private static boolean isSubstring ( String s1 , String s2 ) { return false ; }
va	KEY	public int getTimesJumped ( ) { return timesJumped ; }
va	IDF	public List < BoolContext > bool ( ) { return getRuleContexts ( BoolContext . class ) ; }
va	IDF	private void testNotifyAndWait ( ) { ThreadCalc t = new ThreadCalc ( ) ; t . start ( ) ; synchronized ( t ) { System . out . println ( "Wait thread calculate the result...." ) ; try { t . wait ( ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } System . out . println ( "the result is " + t . total ) ; } }
va	KEY	public boolean userMustBeRegister ( ) { return false ; }
va	KEY	public void setT_shot ( int t_shot ) { this . t_shot = t_shot ; }
va	IDF	public static < R , T > R reduce ( Collection < T > c , Function2 < R , T > f , R z ) { for ( T e : c ) { z = f . apply ( z , e ) ; } return z ; }
va	KEY	public int getBestScore ( ) { return bestScore ; }
va	KEY	public NameDetails getName ( ) { return this . name ; }
va	KEY	public void setRechenleistung ( double rechenleistung ) { this . rechenleistung = rechenleistung ; }
va	IDF	private void setScreenLocation ( ) { Toolkit tk = Toolkit . getDefaultToolkit ( ) ; this . setLocation ( ( int ) ( ( tk . getScreenSize ( ) . getWidth ( ) - this . getWidth ( ) ) / 2 ) , ( int ) ( ( tk . getScreenSize ( ) . getHeight ( ) - this . getHeight ( ) ) / 2 ) ) ; }
va	KEY	public Parameter createParameter ( ) { return new Parameter ( ) ; }
va	IDF	public synchronized boolean containsKey ( Object arg0 ) { return m_hashTableKtoV . containsKey ( arg0 ) ; }
va	KEY	@ Override public Component setImage ( ) { return null ; }
va	KEY	public int getGridy ( ) { return gy ; }
va	IDF	public void setCliente ( Cliente cliente ) { this . cliente = cliente ; }
va	KEY	protected void setStarted ( boolean started ) { this . started = started ; }
va	IDF	public long addUser ( String naam , String wachtwoord ) { long id = - 1 ; try { PreparedStatement prepareStatement = manager . prepareStatement ( "INSERT INTO users (naam  wachtwoord) VALUES (? ?)" , Statement . RETURN_GENERATED_KEYS ) ; prepareStatement . setString ( 1 , naam ) ; prepareStatement . setString ( 2 , encryptPassword ( wachtwoord ) ) ; prepareStatement . executeUpdate ( ) ; ResultSet result = prepareStatement . getGeneratedKeys ( ) ; if ( result . next ( ) ) { id = result . getLong ( 1 ) ; } } catch ( SQLException e ) { e . printStackTrace ( ) ; } return id ; }
va	IDF	public synchronized SecretKey getKey ( String algorithm ) { return keyGenerators . get ( algorithm ) . generateKey ( ) ; }
va	IDF	public void setReturn ( String value ) { this . _return = value ; }
va	KEY	private FontUnpacker ( ) { }
va	KEY	public void run ( ) { new Home ( ) . setVisible ( true ) ; }
va	KEY	public int getStart ( ) { return start ; }
va	KEY	public int rows ( ) { return maskRows ( mask ) ; }
va	IDF	@ Test public void preAuth ( ) throws BeanstreamApiException { CardPaymentRequest paymentRequest = getCreditCardPaymentRequest ( getRandomOrderId ( "GAS" ) , "120.00" ) ; PaymentResponse response = beanstream . payments ( ) . preAuth ( paymentRequest ) ; if ( response . isApproved ( ) ) { PaymentResponse authResp = beanstream . payments ( ) . preAuthCompletion ( response . id , 43.50 ) ; if ( ! authResp . isApproved ( ) ) { assert . fail ( "This auth completion should be approved because a greater amount has been pre authorized" ) ; } } }
va	KEY	@ SuppressWarnings ( "unchecked" ) public class getCls ( ) { return cls ; }
va	KEY	public boolean hasNext ( ) { return fhmIter . hasNext ( ) ; }
va	IDF	private LinkedList < Sprite > getValidTargets ( LinkedList < Sprite > sprites ) { LinkedList < Sprite > possibleTargets = new LinkedList < Sprite > ( ) ; for ( int i = 0 ; i < sprites . size ( ) ; i ++ ) { Sprite s = sprites . get ( i ) ; if ( validTarget ( s ) ) possibleTargets . add ( s ) ; } if ( possibleTargets . size ( ) == 0 ) possibleTargets = null ; return possibleTargets ; }
va	KEY	public void execute ( ) ;
va	IDF	public void changePassword ( Usuario usuario , String clave ) throws SQLException { if ( usuarioDAO . getUsuarioActual ( ) . getClave ( ) . matches ( clave ) ) { usuarioDAO . changePass ( usuario ) ; } else { throw new SQLException ( "La clave es incorrecta." ) ; } }
va	IDF	private void createPersonalizeButton ( ) { personalizeButton = new JRadioButton ( "Personalize" ) ; personalizeButton . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { setParameters ( - 1 , 9 , 9 , 10 , true ) ; } } ) ; }
va	IDF	@ Test public void test_getUserByUserID ( ) throws Exception { User testUser = uDAO . getUserByUserID ( 1 ) ; assertTrue ( "ID did not match" , testUser . getUserID ( ) == 1 ) ; assertTrue ( "NAME did not match" , testUser . getName ( ) . equalsIgnoreCase ( "John" ) ) ; assertTrue ( "ADDRESS did not match" , testUser . getAddress ( ) . equalsIgnoreCase ( "123 Home Road" ) ) ; assertTrue ( "CITY did not match" , testUser . getCity ( ) . equalsIgnoreCase ( "Delaware" ) ) ; assertTrue ( "STATE did not match" , testUser . getState ( ) . equalsIgnoreCase ( "OH" ) ) ; assertTrue ( "ZIP did not match" , testUser . getZip ( ) . equalsIgnoreCase ( "43015" ) ) ; assertTrue ( "PHONE did not match" , testUser . getPhone ( ) . equalsIgnoreCase ( "7401234567" ) ) ; }
va	KEY	public boolean isStarted ( ) { return start != null && start . getTime ( ) > 0 ; }
va	IDF	public static void save ( ) throws IOException { FileUtil . writeStringToFile ( lastSavedWorkspace , SESSION_DATA_FILE_NAME ) ; }
va	IDF	public Nose ( Ship parent ) { this . parent = parent ; xorigin = parent . getX ( ) ; yorigin = parent . getY ( ) ; engine1X = parent . engine1 . engine . get ( 0 ) . x ; engine2X = parent . engine2 . engine . get ( 0 ) . x ; engineTopY = parent . engine1 . engine . get ( 0 ) . y ; double lengthPoints = parent . speed ; double radiusPoints = ( parent . speed / 4 ) + parent . power ; if ( lengthPoints <= 1 ) { noseLength = 1 ; } else { noseLength = parent . map ( lengthPoints , 1 , 1000 , 2 , 6 ) ; } if ( radiusPoints <= 2 ) { noseRadius = 1 ; } else { noseRadius = parent . map ( radiusPoints , 1 , 1000 , 2 , 12 ) ; } noseLength *= Ship . PIXEL_PER_UNIT ; noseRadius *= Ship . PIXEL_PER_UNIT ; noseX = xorigin ; noseY = engineTopY - noseLength ; noseLine1 = new Line2D . double ( engine1X , engineTopY , noseX , noseY ) ; noseLine2 = new Line2D . double ( engine2X , engineTopY , noseX , noseY ) ; saucer = new Ellipse2D . double ( noseX - ( noseRadius / 2 ) , noseY - ( noseRadius / 2 ) , noseRadius , noseRadius ) ; }
va	KEY	public int getLineNumber ( ) { return lineNumber ; }
va	KEY	public void setBoard ( char [ ] [ ] board ) { this . board = board ; }
va	IDF	private Solver createAnySudoku ( int numberOfClues ) { Grid g = new Grid ( ) ; Random r = new Random ( ) ; while ( true ) { int cnt = 0 ; while ( true ) { if ( cnt >= numberOfClues ) break ; int row = r . nextInt ( 9 ) ; int col = r . nextInt ( 9 ) ; int val = r . nextInt ( 9 ) + 1 ; if ( g . isSet ( row , col ) ) continue ; int row3 = row / 3 ; int block = row3 * 3 + col / 3 ; boolean contained = g . colContains ( col , val ) | g . blockContains ( block , val ) | g . rowContains ( row , val ) ; if ( ! contained ) { g . set ( row , col , val ) ; cnt ++ ; } } Solver s = new Solver ( g ) ; s . setFirstSolutionOnly ( false ) ; s . setQuiet ( true ) ; s . run ( ) ; if ( s . getSolutions ( ) > 0 ) { return s ; } } }
va	IDF	@ Override protected void onAction ( final HashMap < String , String > params ) { if ( params != null ) { Platform . runLater ( new Runnable ( ) { @ Override public void run ( ) { guiController . userList . getItems ( ) . clear ( ) ; Collection < String > values = params . values ( ) ; for ( String username : values ) { guiController . userList . getItems ( ) . add ( username ) ; } } } ) ; } }
va	IDF	public void addString ( String str ) { if ( started == false ) started = true ; sb . append ( str ) ; }
va	IDF	Base find ( long id ) ;
va	IDF	public void actionPerformed ( ActionEvent e ) { m_uiControls_actionPerformed ( e ) ; }
va	KEY	public String getTableName ( ) { return "socialnetwork.utype" ; }
va	IDF	public void update ( Model entity , String sqlId ) throws DBException ;
va	IDF	@ Override public Comando redefinirParametro ( Map < DeclaracaoParametro , DeclaracaoParametro > map ) { return new DeclaracaoProcedimento ( id , definicaoProcedimento ) ; }
va	KEY	public int getSize ( ) { return queens . getSize ( ) ; }
va	IDF	private void initInput ( ) { moveUp = new GameAction ( "moveUp" ) ; moveDown = new GameAction ( "moveDown" ) ; moveLeft = new GameAction ( "moveLeft" ) ; moveRight = new GameAction ( "moveRight" ) ; rotateLeft = new GameAction ( "rotateLeft" ) ; rotateRight = new GameAction ( "rotateRight" ) ; moveUp2 = new GameAction ( "moveUp2" ) ; moveDown2 = new GameAction ( "moveDown2" ) ; moveLeft2 = new GameAction ( "moveLeft2" ) ; moveRight2 = new GameAction ( "moveRight2" ) ; speedBoost = new GameAction ( "speedBoost" ) ; fire = new GameAction ( "fire" ) ; laser = new GameAction ( "laser" ) ; jump = new GameAction ( "jump" , GameAction . DETECT_INITAL_PRESS_ONLY ) ; menuAction = new GameAction ( "menuAction" , GameAction . DETECT_INITAL_PRESS_ONLY ) ; shipMenuAction = new GameAction ( "shipMenuAction" , GameAction . DETECT_INITAL_PRESS_ONLY ) ; configAction = new GameAction ( "configAction" , GameAction . DETECT_INITAL_PRESS_ONLY ) ; exit = new GameAction ( "exit" , GameAction . DETECT_INITAL_PRESS_ONLY ) ; sndPlayerTurret = new GameAction ( "sndPlayerTurret" , GameAction . DETECT_INITAL_PRESS_ONLY ) ; inputManager = new InputManager ( screen . getFullScreenWindow ( ) ) ; inputManager . mapToKey ( moveUp2 , KeyEvent . VK_UP ) ; inputManager . mapToKey ( moveDown2 , KeyEvent . VK_DOWN ) ; inputManager . mapToKey ( moveLeft2 , KeyEvent . VK_LEFT ) ; inputManager . mapToKey ( moveRight2 , KeyEvent . VK_RIGHT ) ; inputManager . mapToKey ( moveUp , KeyEvent . VK_W ) ; inputManager . mapToKey ( moveDown , KeyEvent . VK_S ) ; inputManager . mapToKey ( moveLeft , KeyEvent . VK_A ) ; inputManager . mapToKey ( moveRight , KeyEvent . VK_D ) ; inputManager . mapToKey ( rotateLeft , KeyEvent . VK_Q ) ; inputManager . mapToKey ( rotateRight , KeyEvent . VK_E ) ; inputManager . mapToKey ( speedBoost , KeyEvent . VK_SHIFT ) ; inputManager . mapToKey ( fire , KeyEvent . VK_F ) ; inputManager . mapToKey ( menuAction , KeyEvent . VK_F1 ) ; inputManager . mapToMouse ( shipMenuAction , InputManager . MOUSE_BUTTON_3 ) ; inputManager . mapToKey ( exit , KeyEvent . VK_ESCAPE ) ; inputManager . mapToKey ( sndPlayerTurret , KeyEvent . VK_SPACE ) ; inputManager . mapToMouse ( laser , InputManager . MOUSE_BUTTON_1 ) ; }
va	KEY	public void terminateLastTurn ( ) ;
va	KEY	public boolean hasNext ( ) { return list_it . hasNext ( ) ; }
va	KEY	public static int getExponent ( final double d ) { return ( int ) ( ( double . doubleToLongBits ( d ) >>> 52 ) & 7ff ) - 1023 ; }
va	IDF	public INDIOneElementNumberProperty ( INDIDriver driver , String name , String label , String group , PropertyStates state , PropertyPermissions permission , int timeout , String minimum , String maximum , String step , String format , String value ) throws IllegalArgumentException { super ( driver , name , label , group , state , permission , timeout ) ; element = new INDINumberElement ( this , name , label , value , minimum , maximum , step , format ) ; }
va	KEY	public int getResult ( ) { return _result ; }
va	KEY	private void pop ( char c ) throws JSONException { if ( this . top <= 0 ) { throw new JSONException ( "Nesting error." ) ; } char m = this . stack [ this . top - 1 ] == null ? a : k ; if ( m != c ) { throw new JSONException ( "Nesting error." ) ; } this . top -= 1 ; this . mode = this . top == 0 ? d : this . stack [ this . top - 1 ] == null ? a : k ; }
va	KEY	public int getWidth ( ) ;
va	KEY	public String [ ] getColumnNames ( ) { return this . columnNames ; }
va	KEY	public static String monthName ( int month ) { String name = " " ; switch ( month ) { case 1 : return "Jan" ; case 2 : return "Feb" ; case 3 : return "Mar" ; case 4 : return "Apr" ; case 5 : return "May" ; case 6 : return "Jun" ; case 7 : return "Jul" ; case 8 : return "Aug" ; case 9 : return "Sep" ; case 10 : return "Oct" ; case 11 : return "Nov" ; case 12 : return "Dec" ; default : return name ; } }
va	IDF	@ Override public ArrayList load ( EstruturaPesquisa pesquisa ) throws SQLException { ArrayList < Maquina > maquinas = new ArrayList < > ( ) ; String sql = "SELECT * FROM maquina ORDER by " + pesquisa . getCampo ( ) + pesquisa . getOrdem ( ) ; if ( pesquisa . getLimite ( ) > 0 ) { sql += " LIMIT " + pesquisa . getLimite ( ) ; } PreparedStatement pst = connection . prepareStatement ( sql ) ; ResultSet rs = pst . executeQuery ( ) ; while ( rs . next ( ) ) { Maquina funcao = new Maquina ( ) ; funcao . setCodigo ( rs . getString ( "codigo" ) ) ; funcao . setDescricao ( rs . getString ( "descricao" ) ) ; maquinas . add ( funcao ) ; } rs . close ( ) ; pst . close ( ) ; return maquinas ; }
va	KEY	public void setReturns ( double returns ) { this . returns = returns ; }
va	IDF	@ Id @ Column ( name = "id_right" ) public int getIdRight ( ) { return idRight ; }
va	IDF	private void initialize ( ) { for ( int i = 0 ; i < keywords . length ; i ++ ) { keywordCount . put ( keywords [ i ] , 0 ) ; } }
va	IDF	@ Override public String getFileName ( String abspath ) { return new File ( abspath ) . getName ( ) ; }
va	IDF	@ Override public void setCategory ( String category ) { this . category = category ; }
va	IDF	public AReducingFunctionOn ( IReducingFunction < R , ? super A > rf ) { this . rf = rf ; }
va	KEY	public boolean isActive ( ) { return active ; }
va	IDF	@ Override public void kill ( ) { deathTime = new Date ( ) . getTime ( ) + 3000 ; TanksWorld . spawn ( "Explode" , vector ) ; vector [ 0 ] = - 100000 ; vector [ 1 ] = - 100000 ; speed = 0 ; immediateUpdate = true ; solid = false ; enabled = false ; attackState = false ; getScore ( ) . smierc ++ ; }
va	IDF	@ Override public boolean isDirectory ( String path ) { return new File ( path ) . isDirectory ( ) ; }
va	IDF	public void call ( Buffer b ) { System . out . println ( "WebSocketServer:received[" + b + "]" ) ; if ( "EOF" . equals ( b . toString ( ) ) ) { s . close ( ) ; } else { s . writeTextFrame ( b . toString ( ) ) ; } }
va	IDF	private int no_Between ( ABObject o1 , ABObject o2 ) { double minX = o1 . getMaxX ( ) ; double maxX = o2 . getMinX ( ) ; int no = 0 ; for ( int i = 0 ; i < shelters . size ( ) ; i ++ ) { ABObject o = shelters . get ( i ) ; double _minX = o . getMinX ( ) ; double _maxX = o . getMaxX ( ) ; if ( _minX <= maxX && _minX >= minX && _maxX <= maxX && _maxX >= minX ) no ++ ; } return no ; }
va	IDF	@ Override public BufferedImage renderUpdate ( ) { if ( ! dirty ) { return img ; } Graphics2D g = super . prepareGraphics ( ) ; g . drawImage ( tr . getImage ( ) , 0 , 0 , inner . width , inner . height , 0 , 0 , ( int ) w . getWidth ( ) , ( int ) w . getHeight ( ) , null ) ; dirty = false ; return img ; }
va	IDF	@ BeforeClass public static void setUpClass ( ) throws Exception { try { System . setProperty ( Context . INITIAL_CONTEXT_FACTORY , javaURLContextFactory . class . getName ( ) ) ; ic = new InitialContext ( ) ; ic . createSubcontext ( "java:" ) ; ic . createSubcontext ( "java:/comp" ) ; ic . createSubcontext ( "java:/comp/env" ) ; ic . createSubcontext ( "java:/comp/env/jdbc" ) ; MysqlConnectionPoolDataSource ds = new MysqlConnectionPoolDataSource ( ) ; ds . setURL ( "jdbc:mysql://localhost:3306/cart_comp461_db" ) ; ds . setUser ( "comp461" ) ; ds . setPassword ( "comp461" ) ; ic . bind ( "java:/comp/env/jdbc/CartDB" , ds ) ; } catch ( NamingException ex ) { ex . printStackTrace ( ) ; } }
va	KEY	public NeedValueException ( ) { super ( "It needs a value" ) ; }
va	KEY	public double getPreis ( ) { return preis ; }
va	IDF	public static Point location ( ) { return Mouse . getInstance ( ) . getLocation ( ) ; }
va	IDF	public T visitASTTCmdPenUp ( ASTTCmdPenUp form , S state ) throws FractalException ;
va	IDF	public boolean retirerJoueur ( Joueur joueur ) { Iterator iterateur = joueurs . iterator ( ) ; while ( iterateur . hasNext ( ) ) { Joueur j = ( Joueur ) iterateur . next ( ) ; j . retirerAdversaire ( joueur ) ; } joueur . reinitialiserListeAdversaires ( ) ; return this . joueurs . remove ( joueur ) ; }
va	KEY	public int getNumberLives ( ) { return nbLives ; }
va	IDF	@ Override public void Consultar ( ) throws SQLException { try { Conexion . GetInstancia ( ) . Conectar ( ) ; ResultSet rs = Conexion . GetInstancia ( ) . EjecutarConsulta ( "SELECT Id_Bodega Id_Sucursal Nom_Bodega Des_Bodega Ext_Bodega FROM Bodega WHERE Cod_Bodega ='" + ObBodega . getCod_Bodega ( ) + "'" ) ; while ( rs . next ( ) ) { ObBodega . setId_Bodega ( rs . getInt ( "" ) ) ; ObBodega . setCod_Bodega ( rs . getString ( "" ) ) ; ObBodega . setNom_Bodega ( rs . getString ( "" ) ) ; ObBodega . setDes_Bodega ( rs . getString ( "" ) ) ; ObBodega . setExt_Bodega ( rs . getInt ( "" ) ) ; } } catch ( SQLException ex ) { throw ex ; } finally { Conexion . GetInstancia ( ) . Desconectar ( ) ; } }
va	IDF	public static void main ( String [ ] args ) { System . out . println ( DemoCasting . class . getPackage ( ) . getName ( ) ) ; Node prog = DemoAST . prog ; System . out . println ( "--------------" ) ; Visitor . print ( 0 , prog ) ; System . out . println ( "--------------" ) ; Visitor . exec ( prog ) ; System . out . println ( "--------------" ) ; System . out . println ( Visitor . size ( prog ) ) ; System . out . println ( "--------------" ) ; Visitor . dump ( prog ) ; System . out . println ( ) ; Visitor . dump ( Visitor . compile ( prog ) ) ; System . out . println ( ) ; }
va	IDF	public ScenarioTreeStepDBOWLComputerComponents ( String name , String help , ScenarioHardwareBerater scenario ) { super ( name , help ) ; if ( scenario == null ) { throw new IllegalArgumentException ( "ScenarioTreeStepDBOWLComputerComponents ben\u00F6tigt ein Szenarioobjekt  darf nicht null sein!" ) ; } this . scenario = scenario ; }
va	KEY	public int getOHeight ( ) { return outer . height ; }
va	KEY	public void run ( ) { try { while ( true ) { repaint ( ) ; t . sleep ( 30 ) ; } } catch ( Exception e ) { } ; }
va	KEY	public static void useExtraActionToken ( ) { GameRobot . type ( "T" ) ; }
va	IDF	public static void main ( String [ ] args ) { CandidateFactory < AbstractMutableFormula > candidateFactory = FormulaCandidateFactory . getInstance ( ) ; EvolutionaryOperator < AbstractMutableFormula > mutation = new SimpleMutationOperator ( 0.02 ) ; FormulaCrossoverOperator crossover = new FormulaCrossoverOperator ( 2 ) ; List < EvolutionaryOperator < AbstractMutableFormula >> operators = new ArrayList < EvolutionaryOperator < AbstractMutableFormula >> ( ) ; operators . add ( crossover ) ; operators . add ( mutation ) ; EvolutionaryOperator < AbstractMutableFormula > evolutionScheme = new EvolutionPipeline < AbstractMutableFormula > ( operators ) ; FitnessEvaluator < ? super AbstractMutableFormula > fitnessEvaluator = new RootFitness ( ) ; SelectionStrategy < ? super AbstractMutableFormula > selectionStrategy = new RouletteWheelSelection ( ) ; Random rnd = new MersenneTwisterRNG ( ) ; EvolutionEngine < AbstractMutableFormula > engine = new GenerationalEvolutionEngine < AbstractMutableFormula > ( candidateFactory , evolutionScheme , fitnessEvaluator , selectionStrategy , rnd ) ; engine . addEvolutionObserver ( new EvolutionObserver < Formula > ( ) { @ Override public void populationUpdate ( PopulationData < ? extends Formula > data ) { System . out . println ( data . getGenerationNumber ( ) ) ; System . out . println ( data . getBestCandidate ( ) ) ; System . out . println ( data . getBestCandidateFitness ( ) ) ; System . out . println ( data . getMeanFitness ( ) + "\n" ) ; } } ) ; Formula res = engine . evolve ( 1000 , 2 , new TargetFitness ( 0.1 , false ) ) ; System . out . println ( res ) ; }
va	KEY	public DefaultINDIServer ( ) { super ( ) ; }
va	KEY	public boolean isExit ( ) { return exit ; }
va	IDF	public void dropCurrentPlayer ( int index ) { players . get ( index ) . dropPlayer ( ) ; }
va	KEY	public JSONWriter endObject ( ) throws JSONException { return this . end ( k , } ) ; }
va	KEY	@ Override public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( ) != obj . getClass ( ) ) { return false ; } final Commune other = ( Commune ) obj ; if ( this . maximumCommuners != other . maximumCommuners ) { return false ; } return true ; }
va	IDF	@ Override public void enterRule ( ParseTreeListener listener ) { if ( listener instanceof EnquantoListener ) ( ( EnquantoListener ) listener ) . enterSeqComando ( this ) ; }
va	KEY	public boolean getIsFastBootSSDRequested ( ) { return fastBootSSDRequested ; }
va	KEY	public int getColumnCount ( ) { return columnNames . length ; }
va	IDF	private static ERA CheckERA ( double object1_start , double object2_start , double object1_centre , double object2_centre , double object1_end , double object2_end ) { ERA rel = ERA . null ; if ( object1_start < object2_start && object1_end < object2_start ) { rel = ERA . TAKES_PLACE_BEFORE ; } else if ( object2_start < object1_start && object2_end < object1_start ) { rel = ERA . INVERSE_TAKES_PLACE_BEFORE ; } else if ( object1_end == object2_start && object1_start < object2_start ) { rel = ERA . MEETS ; } else if ( object2_end == object1_start && object2_start < object1_start ) { rel = ERA . INVERSE_MEETS ; } else if ( object1_start < object2_start && object1_centre >= object2_start && object1_end >= object2_centre && object1_end < object2_end ) { rel = ERA . MOST_OVELAP_MOST ; } else if ( object2_start < object1_start && object2_centre >= object1_start && object2_end >= object1_centre && object2_end < object1_end ) { rel = ERA . INVERSE_MOST_OVERLAP_MOST ; } else if ( object1_start < object2_start && object1_centre >= object2_start && object1_end < object2_end ) { rel = ERA . MOST_OVERLAP_LESS ; } else if ( object2_start < object1_start && object2_centre >= object1_start && object2_end < object1_end ) { rel = ERA . INVERSE_MOST_OVERLAP_LESS ; } else if ( object1_centre < object2_start && object1_end >= object2_start && object1_end < object2_end ) { rel = ERA . LESS_OVERLAP_MOST ; } else if ( object2_centre < object1_start && object2_end >= object1_start && object2_end < object1_end ) { rel = ERA . INVERSE_LESS_OVERLAP_MOST ; } else if ( object1_centre < object2_start && object1_end > object2_start && object1_end < object2_centre ) { rel = ERA . LESS_OVERLAP_LESS ; } else if ( object2_centre < object1_start && object2_end > object1_start && object2_end < object1_centre ) { rel = ERA . INVERSE_LESS_OVERLAP_LESS ; } else if ( object1_start == object2_start && object1_end >= object2_centre ) { rel = ERA . START_COVER_MOST ; } else if ( object2_start == object1_start && object2_end >= object1_centre ) { rel = ERA . INVERSE_START_COVER_MOST ; } else if ( object1_start == object2_start && object1_end > object2_start && object1_end < object2_centre ) { rel = ERA . START_COVER_LESS ; } else if ( object2_start == object1_start && object2_end > object1_start && object2_end < object1_centre ) { rel = ERA . INVERSE_START_COVER_LESS ; } else if ( object1_start > object2_start && object1_end <= object2_centre ) { rel = ERA . DURING_LEFT ; } else if ( object2_start > object1_start && object2_end <= object1_centre ) { rel = ERA . INVERSE_DURING_LEFT ; } else if ( object1_start > object2_start && object1_start < object2_centre && object1_end > object2_centre && object1_end < object2_end ) { rel = ERA . DURING_MIDPERPENDICULAR ; } else if ( object2_start > object1_start && object2_start < object1_centre && object2_end > object1_centre && object2_end < object1_end ) { rel = ERA . INVERSE_DURING_MIDPERPENDICULAR ; } else if ( object1_start >= object2_centre && object1_end < object2_end ) { rel = ERA . DURING_RIGHT ; } else if ( object2_start >= object1_centre && object2_end < object1_end ) { rel = ERA . INVERSE_DURING_RIGHT ; } else if ( object1_start > object2_start && object1_start <= object2_centre && object1_end == object2_end ) { rel = ERA . FINISH_COVER_MOST ; } else if ( object2_start > object1_start && object2_start <= object1_centre && object2_end == object1_end ) { rel = ERA . INVERSE_FINISH_COVER_MOST ; } else if ( object1_start > object2_centre && object1_start < object2_end && object1_end == object2_end ) { rel = ERA . FINISH_COVER_LESS ; } else if ( object2_start > object1_centre && object2_start < object1_end && object2_end == object1_end ) { rel = ERA . INVERSE_FINISH_COVER_LESS ; } else if ( object1_start == object2_start && object1_end == object2_end ) { rel = ERA . EQUAL ; } return rel ; }
va	IDF	@ Override public ColumnDefinition getColumnDefinition ( ) { return COLUMN_DEFINITION ; }
va	IDF	public JSONException ( String message ) { super ( message ) ; }
va	KEY	private DBBuilder ( ) { }
va	KEY	public int getMaxx ( ) { return maxx ; }
va	IDF	@ Override public void mux ( String s ) { String message = "Port" + port + ":" + s ; System . out . println ( message ) ; if ( next instanceof Filter ) { next . mux ( message ) ; } }
va	KEY	public GarageDoor ( ) { }
va	KEY	public int getGeneticCount ( ) { return geneticCount ; }
va	KEY	public long getCount ( ) { return count ; }
va	KEY	public void setDistance ( double distance ) ;
va	KEY	public TBlock getBlock ( ) { if ( blks . size ( ) > 0 ) { return blks . get ( 0 ) ; } else { return null ; } }
va	KEY	abstract public void done ( M m ) ;
va	KEY	public RemoveContactsFromGroup createRemoveContactsFromGroup ( ) { return new RemoveContactsFromGroup ( ) ; }
va	IDF	public static String getVersion ( ) { if ( version == null ) { version = "undefined" ; try { InputStream in = Version . class . getResourceAsStream ( "Version.properties" ) ; Properties prop = new Properties ( ) ; prop . load ( in ) ; version = prop . getProperty ( "version" , version ) ; in . close ( ) ; } catch ( Exception e ) { } } return version ; }
va	KEY	public Option withValue ( long value ) { this . value = value ; return this ; }
va	KEY	public boolean isEmpty ( ) { return tree == null ; }
va	KEY	public Sword ( ) { this . name = "sword" ; }
va	IDF	@ Override public void actionPerformed ( ActionEvent e ) { JFileChooser fileChooser = new JFileChooser ( ) ; int returnValue = fileChooser . showOpenDialog ( null ) ; if ( returnValue == JFileChooser . APPROVE_OPTION ) { File selectedFile = fileChooser . getSelectedFile ( ) ; String absolutePath = selectedFile . getAbsolutePath ( ) ; _selectField1 . setText ( absolutePath ) ; } }
va	IDF	public YouAre ( int id ) { fields . put ( "id" , new Integer ( id ) ) ; }
va	KEY	public Color getColor ( ) { return this . color ; }
va	KEY	public String getRawEndpoint ( ) { return this . endpoint ; }
va	KEY	public int getId2 ( ) { return id2 ; }
va	IDF	public T visitASTTCmdPenDown ( ASTTCmdPenDown form , S state ) throws FractalException ;
va	KEY	public abstract String getAccountType ( ) ;
va	IDF	@ SuppressWarnings ( "unchecked" ) public List < Notebook > findAll ( ) { EntityTransaction tx = getEntityManager ( ) . getTransaction ( ) ; tx . begin ( ) ; Query query = getEntityManager ( ) . createQuery ( "SELECT N FROM Notebook N" ) ; tx . commit ( ) ; return query . getResultList ( ) ; }
va	KEY	public int getStartX ( ) { return startX ; }
va	IDF	static void println ( boolean b ) { System . out . println ( b ) ; }
va	IDF	public void multVV ( double v1 [ ] , double v2 [ ] , double dst [ ] ) { for ( int i = 0 ; i < v1 . length ; i ++ ) dst [ i ] = v1 [ i ] * v2 [ i ] ; }
va	IDF	@ Override public FileVisitResult visitFile ( Path file , BasicFileAttributes attrs ) throws IOException { Files . delete ( file ) ; return FileVisitResult . continue ; }
va	IDF	@ Override public int hashCode ( ) { int result = commits . hashCode ( ) ; result = 31 * result + vcsErrors . hashCode ( ) ; result = 31 * result + exceptions . hashCode ( ) ; return result ; }
va	IDF	public Set < OrdenPinturaDetalle > getDetalles ( ) { return detalles ; }
va	IDF	public void setConsole ( Console console ) { m_emuConsole = console ; m_emuConsole . getTIA ( ) . getVideo ( ) . registerAdapter ( this ) ; updateDisplayResolution ( ) ; updateDisplayGraphics ( ) ; }
va	KEY	@ Override public boolean holds ( Object var ) { return true ; }
va	KEY	public void setY ( int y ) { this . y = y ; }
va	KEY	public void setMaxusers ( int value ) { this . maxusers = value ; }
va	IDF	@ Override public ImageIcon getImg ( ) { return ImageManager . getInstance ( ) . getTileSet ( "items" ) . getTile ( this . getName ( ) ) ; }
va	IDF	public String toString ( ) { return "{" + key + "  " + val + "}" ; }
va	KEY	@ JsonProperty ( "id" ) public long getId ( ) { return id ; }
va	IDF	@ Override protected String getName ( ) { return Event . RESOURCE_NAME ; }
va	IDF	private void ValidateUrlString ( String value ) throws InvalidShortUrlException { if ( null == value ) throw new InvalidShortUrlException ( "Null values are not allowed" ) ; if ( value . length ( ) != MAX_NUMBER_OF_DIGITS ) throw new InvalidShortUrlException ( "Value length is not exactly 7." ) ; StringBuilder patternString = new StringBuilder ( ) ; patternString . append ( "^[0-9A-Z]{" ) ; patternString . append ( MAX_NUMBER_OF_DIGITS ) ; patternString . append ( "}$" ) ; Pattern pattern = Pattern . compile ( patternString . toString ( ) ) ; Matcher m = pattern . matcher ( value ) ; if ( ! m . matches ( ) ) throw new InvalidShortUrlException ( "The url did not match the expected regular exception." ) ; }
va	IDF	public boolean sendMove ( String move ) throws IOException { return sendString ( move , 0 ) ; }
va	KEY	public BufferedImage getImg ( ) { return this . img ; }
va	IDF	public Map < File , File > preview ( Replacer replacer , List < File > files ) { List < File > fromFiles = new ArrayList < File > ( ) ; for ( File file : files ) { fromFiles . addAll ( FileUtils . getFileListing ( file ) ) ; } List < File > toFiles = FileUtils . toFiles ( replacer . replace ( FileNameUtils . toFileNames ( fromFiles ) ) ) ; Map < File , File > map = new LinkedHashMap < File , File > ( ) ; for ( int i = 0 ; i < fromFiles . size ( ) ; i ++ ) { map . put ( fromFiles . get ( i ) , toFiles . get ( i ) ) ; } return map ; }
va	IDF	public ProfesorBean load ( ProfesorBean oProfesor ) throws NumberFormatException { try { if ( ( request . getParameter ( "id_usuario" ) != null ) ) { oProfesor . setId_usuario ( Integer . parseInt ( request . getParameter ( "id_usuario" ) ) ) ; } if ( ( request . getParameter ( "dni" ) != null ) ) { oProfesor . setDni ( request . getParameter ( "dni" ) ) ; } if ( ( request . getParameter ( "nombre" ) != null ) ) { oProfesor . setNombre ( request . getParameter ( "nombre" ) ) ; } if ( ( request . getParameter ( "ape1" ) != null ) ) { oProfesor . setApe1 ( request . getParameter ( "ape1" ) ) ; } if ( ( request . getParameter ( "ape2" ) != null ) ) { oProfesor . setApe2 ( request . getParameter ( "ape2" ) ) ; } if ( ( request . getParameter ( "sexo" ) != null ) ) { oProfesor . setSexo ( request . getParameter ( "sexo" ) ) ; } if ( ( request . getParameter ( "telefono" ) != null ) ) { oProfesor . setTelefono ( request . getParameter ( "telefono" ) ) ; } if ( ( request . getParameter ( "email" ) != null ) ) { oProfesor . setEmail ( request . getParameter ( "email" ) ) ; } } catch ( NumberFormatException e ) { throw new NumberFormatException ( "Controller: Error: Load: Formato de datos en par\u00E1metros incorrecto " + e . getMessage ( ) ) ; } return oProfesor ; }
va	KEY	public void set ( int col , int row , double value ) ;
va	IDF	public void playPalaceCardAtIndex ( int indexOfPlayer , String hashKey , int newNumCards ) { players . get ( indexOfPlayer ) . clearSelectedCard ( newNumCards ) ; addCardToCenterPanelWithImage ( hashKey , indexOfPlayer ) ; }
va	IDF	private void okButtonClicked ( ) { String flickrUsername = userName . getText ( ) ; FileUtils . writeString ( FlickrViewer . getDataDirectory ( ) + "/username" , flickrUsername ) ; FlickrPanel newPanel = new SetsPanel ( flickrUsername ) ; flickrFrame . changePanel ( newPanel ) ; }
va	KEY	@ Override public BookSeries find ( int index ) { return null ; }
va	KEY	public SendMessageGroups createSendMessageGroups ( ) { return new SendMessageGroups ( ) ; }
va	KEY	public void setAccessAssistiveTechnology ( boolean accessAssistiveTechnology ) { this . accessAssistiveTechnology = accessAssistiveTechnology ; }
va	KEY	protected void end ( ) { }
va	IDF	public static void main ( String [ ] args ) { boolean [ ] primes = new boolean [ 2000000 ] ; for ( int i = 2 ; i < primes . length ; i ++ ) primes [ i ] = true ; for ( int i = 2 ; i < primes . length ; i ++ ) if ( primes [ i ] ) for ( int j = 2 ; i * j < primes . length ; j ++ ) primes [ i * j ] = false ; ArrayList < Integer > primeList = new ArrayList < Integer > ( ) ; for ( int i = 5 ; i <= 1000000 ; i ++ ) if ( primes [ i ] ) primeList . add ( i ) ; int a = 1000000 ; while ( true ) { a ++ ; if ( primes [ a ] ) { primeList . add ( a ) ; break ; } } long sum = 0 ; for ( int i = 0 ; i < primeList . size ( ) - 1 ; i ++ ) sum += lowestMultiple ( primeList . get ( i ) , primeList . get ( i + 1 ) ) ; System . out . println ( sum ) ; }
va	KEY	public synchronized void xsetYInitialDelay ( int a ) { yID = a ; }
va	KEY	public boolean perform ( MyEvent event ) { switch ( event ) { case READY : player . ready ( ) ; return true ; default : return false ; } }
va	IDF	@ Override Predicate < Tuple > makePredicate ( String colName , String val ) { return new ColumnLessThan ( colName , double . parseDouble ( val ) ) ; }
va	KEY	public int getPorcentajeTratado ( ) { return porcentajeTratado ; }
va	KEY	public void setLevel ( int level ) { this . level = level ; }
va	IDF	public void changePanel ( FlickrPanel newPanel ) { getContentPane ( ) . remove ( currentPanel ) ; newPanel . initPanel ( ) ; newPanel . setFlickrFrame ( this ) ; newPanel . addMouseListener ( this ) ; getContentPane ( ) . setPreferredSize ( getContentPane ( ) . getSize ( ) ) ; getContentPane ( ) . add ( newPanel ) ; newPanel . requestFocusInWindow ( ) ; currentPanel . disposePanel ( ) ; currentPanel = newPanel ; pack ( ) ; repaint ( ) ; }
va	IDF	float [ ] getDirtyFloatArray ( final int length ) { if ( length <= MAX_ARRAY_SIZE ) { return getDirtyFloatArrayCache ( length ) . getArray ( ) ; } if ( DO_STATS ) { incOversize ( ) ; } if ( DO_LOG_OVER_SIZE ) { logInfo ( "getDirtyFloatArray[oversize]: length=\t" + length + "\tfrom=\t" + getCallerInfo ( className ) ) ; } return new float [ length ] ; }
va	IDF	@ SuppressWarnings ( "SimplifiableIfStatement" ) @ Override public boolean equals ( Object o ) { if ( this == o ) return true ; if ( o == null || getClass ( ) != o . getClass ( ) ) return false ; HgVcsRoot hgVcsRoot = ( HgVcsRoot ) o ; if ( ! localPath . equals ( hgVcsRoot . localPath ) ) return false ; if ( repositoryUrl != null ? ! repositoryUrl . equals ( hgVcsRoot . repositoryUrl ) : hgVcsRoot . repositoryUrl != null ) return false ; return settings . equals ( hgVcsRoot . settings ) ; }
va	KEY	void initialize ( int n , int m ) ;
va	IDF	public List < Interval > merge ( List < Interval > intervals ) { if ( intervals == null || intervals . size ( ) < 2 ) return intervals ; Interval curr = new Interval ( intervals . get ( 0 ) . start , intervals . get ( 0 ) . end ) ; List < Interval > result = new ArrayList < Interval > ( ) ; for ( int i = 1 ; i < intervals . size ( ) ; i ++ ) { Interval next = intervals . get ( i ) ; if ( curr . end >= next . end ) { } else if ( curr . end >= next . start && curr . end < next . end ) { curr . end = next . end ; } else if ( curr . end < next . start ) { result . add ( curr ) ; curr = new Interval ( next . start , next . end ) ; } } result . add ( curr ) ; return result ; }
va	KEY	public boolean reopen ( ) throws FileNotFoundException { if ( reader == null ) { this . reader = new BufferedReader ( new FileReader ( file ) ) ; return true ; } else { return false ; } }
va	KEY	public void setVrmlObj ( boolean _vrmlObj ) ;
va	IDF	@ Test public void canAddCategory ( ) { CategoryDAO cd = new CategoryDAO ( ) ; CategoryModel addCategory = new CategoryModel ( "toAddCategory" , generatedStaffId ) ; CategoryModel retrieved = null ; try { addCategory = cd . addCategory ( addCategory ) ; retrieved = getCategoryById ( addCategory . getId ( ) ) ; deleteCategoryById ( addCategory . getId ( ) ) ; } catch ( WebshopAppException e ) { e . printStackTrace ( ) ; fail ( "Exception" ) ; } assertEquals ( addCategory , retrieved ) ; }
va	IDF	public void equalizeVelocity ( ) { double d = diffPos ( ) ; if ( d < 0.0 ) { leftV += INC ; } else if ( d > 0.0 ) { rightV += INC ; } if ( leftV > GOAL_V ) { rightV -= ( leftV - GOAL_V ) ; leftV = GOAL_V ; } if ( rightV > GOAL_V ) { leftV -= ( rightV - GOAL_V ) ; rightV = GOAL_V ; } }
va	KEY	public double getFontSize ( ) { return fontSize ; }
va	IDF	public VPoint ( float x , float y , float z ) { this . x = x ; this . y = y ; this . z = z ; }
va	IDF	public void addObjectToSelect ( String idobject ) { objectSelector . addItem ( idobject ) ; if ( selectedObject . getText ( ) . equals ( "" ) ) { selectedObject . setText ( idobject ) ; currentObjName = idobject ; } }
va	KEY	public DuplicatedPatternHash ( final int headIndex ) { this . headIndex = headIndex ; }
va	KEY	public synchronized void xsetL5RepeatDelay ( int a ) { l5RD = a ; }
va	KEY	public double tp ( ) { return 1 - ( ( double ) getTotalLittleTime ( ) / ( double ) getTotalTime ( ) ) ; }
va	IDF	public static void main ( String [ ] args ) { for ( int a = 2 ; a < limit ; a ++ ) { isPrime ( a ) ; } }
va	KEY	public boolean equalZero ( ) { for ( double tt : p ) { if ( Math . abs ( tt ) > epsilon ) { return false ; } } return true ; }
va	KEY	protected boolean examine ( ) { System . out . println ( "This old man thinks he's a wizard." ) ; return true ; }
va	KEY	public static long compose ( int high , int low ) { return new long ( ( hmask & ( ( long ) high ) << 32 ) | ( ( ( long ) low ) & lmask ) ) ; }
va	KEY	public boolean damage ( Item weapon ) { return true ; }
va	IDF	public int getScore ( ) { return StateUtil . getScore ( ActionRobot . proxy ) ; }
va	KEY	public int getAmps ( ) { return amps ; }
va	KEY	public final int getNumOfAllOptions ( ) { return getAllOptions ( ) . size ( ) ; }
va	IDF	public RemoteControlWithUndo ( ) { onCommands = new Command [ 7 ] ; offCommands = new Command [ 7 ] ; stack = new Stack < Command > ( ) ; Command noCommand = new NoCommand ( ) ; for ( int i = 0 ; i < 7 ; i ++ ) { onCommands [ i ] = noCommand ; offCommands [ i ] = noCommand ; } undoCommand = noCommand ; }
va	IDF	@ SuppressWarnings ( "unchecked" ) private void initComponents ( ) { jPanel1 = new javax . swing . JPanel ( ) ; deliveryLabel = new javax . swing . JLabel ( ) ; itemIDLabel = new javax . swing . JLabel ( ) ; itemIDText = new javax . swing . JTextField ( ) ; itemNameLabel = new javax . swing . JLabel ( ) ; itemNameText = new javax . swing . JTextField ( ) ; itemPriceText = new javax . swing . JTextField ( ) ; itemStockText = new javax . swing . JTextField ( ) ; itemPriceLabel = new javax . swing . JLabel ( ) ; itemStockLabel = new javax . swing . JLabel ( ) ; artistIDText = new javax . swing . JTextField ( ) ; artistIDLabel = new javax . swing . JLabel ( ) ; submitButton = new javax . swing . JButton ( ) ; mainMenuButton = new javax . swing . JButton ( ) ; exitButton = new javax . swing . JButton ( ) ; jPanel2 = new javax . swing . JPanel ( ) ; setDefaultCloseOperation ( javax . swing . WindowConstants . EXIT_ON_CLOSE ) ; deliveryLabel . setFont ( new java . awt . Font ( "Tahoma" , 0 , 14 ) ) ; deliveryLabel . setText ( "Delivery" ) ; itemIDLabel . setText ( "Item ID" ) ; itemIDText . setText ( "Item ID" ) ; itemNameLabel . setText ( "Item Name" ) ; itemNameText . setText ( "Item Name" ) ; itemPriceText . setText ( "Item Price" ) ; itemStockText . setText ( "Item Stock" ) ; itemPriceLabel . setText ( "Item Price" ) ; itemStockLabel . setText ( "Item Stock" ) ; artistIDText . setText ( "Artist ID" ) ; artistIDLabel . setText ( "Artist ID" ) ; submitButton . setText ( "Submit" ) ; submitButton . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { submitButtonActionPerformed ( evt ) ; } } ) ; mainMenuButton . setText ( "Store Activity" ) ; mainMenuButton . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { mainMenuButtonActionPerformed ( evt ) ; } } ) ; exitButton . setText ( "Exit" ) ; exitButton . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { exitButtonActionPerformed ( evt ) ; } } ) ; javax . swing . GroupLayout jPanel1Layout = new javax . swing . GroupLayout ( jPanel1 ) ; jPanel1 . setLayout ( jPanel1Layout ) ; jPanel1Layout . setHorizontalGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( jPanel1Layout . createSequentialGroup ( ) . addContainerGap ( ) . addGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( jPanel1Layout . createSequentialGroup ( ) . addComponent ( itemIDLabel ) . addContainerGap ( javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) ) . addGroup ( jPanel1Layout . createSequentialGroup ( ) . addGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( itemNameLabel ) . addComponent ( itemPriceLabel ) . addComponent ( itemStockLabel ) . addComponent ( artistIDLabel ) ) . addGap ( 85 , 85 , 85 ) . addGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( javax . swing . GroupLayout . Alignment . TRAILING , jPanel1Layout . createSequentialGroup ( ) . addComponent ( itemIDText ) . addContainerGap ( ) ) . addGroup ( jPanel1Layout . createSequentialGroup ( ) . addComponent ( itemNameText ) . addContainerGap ( ) ) . addGroup ( jPanel1Layout . createSequentialGroup ( ) . addComponent ( itemPriceText ) . addContainerGap ( ) ) . addGroup ( jPanel1Layout . createSequentialGroup ( ) . addComponent ( itemStockText ) . addContainerGap ( ) ) . addGroup ( jPanel1Layout . createSequentialGroup ( ) . addComponent ( artistIDText ) . addContainerGap ( ) ) ) ) ) ) . addGroup ( jPanel1Layout . createSequentialGroup ( ) . addComponent ( submitButton , javax . swing . GroupLayout . PREFERRED_SIZE , 104 , javax . swing . GroupLayout . PREFERRED_SIZE ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addComponent ( mainMenuButton ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addComponent ( exitButton ) . addGap ( 0 , 76 , short . MAX_VALUE ) ) . addGroup ( javax . swing . GroupLayout . Alignment . TRAILING , jPanel1Layout . createSequentialGroup ( ) . addContainerGap ( javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addComponent ( deliveryLabel , javax . swing . GroupLayout . PREFERRED_SIZE , 63 , javax . swing . GroupLayout . PREFERRED_SIZE ) . addGap ( 157 , 157 , 157 ) ) ) ; jPanel1Layout . setVerticalGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( jPanel1Layout . createSequentialGroup ( ) . addContainerGap ( ) . addComponent ( deliveryLabel ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . UNRELATED ) . addGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE ) . addComponent ( itemIDLabel ) . addComponent ( itemIDText , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . UNRELATED ) . addGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE ) . addComponent ( itemNameText , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) . addComponent ( itemNameLabel , javax . swing . GroupLayout . PREFERRED_SIZE , 16 , javax . swing . GroupLayout . PREFERRED_SIZE ) ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . UNRELATED ) . addGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE ) . addComponent ( itemPriceText , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) . addComponent ( itemPriceLabel ) ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . UNRELATED ) . addGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE ) . addComponent ( itemStockText , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) . addComponent ( itemStockLabel ) ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . UNRELATED ) . addGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE ) . addComponent ( artistIDText , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) . addComponent ( artistIDLabel ) ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE ) . addComponent ( submitButton , javax . swing . GroupLayout . PREFERRED_SIZE , 44 , javax . swing . GroupLayout . PREFERRED_SIZE ) . addComponent ( mainMenuButton ) . addComponent ( exitButton ) ) . addContainerGap ( javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) ) ) ; javax . swing . GroupLayout jPanel2Layout = new javax . swing . GroupLayout ( jPanel2 ) ; jPanel2 . setLayout ( jPanel2Layout ) ; jPanel2Layout . setHorizontalGroup ( jPanel2Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGap ( 0 , 0 , short . MAX_VALUE ) ) ; jPanel2Layout . setVerticalGroup ( jPanel2Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGap ( 0 , 0 , short . MAX_VALUE ) ) ; javax . swing . GroupLayout layout = new javax . swing . GroupLayout ( getContentPane ( ) ) ; getContentPane ( ) . setLayout ( layout ) ; layout . setHorizontalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addContainerGap ( ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( jPanel2 , javax . swing . GroupLayout . Alignment . TRAILING , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addComponent ( jPanel1 , javax . swing . GroupLayout . Alignment . TRAILING , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) ) . addContainerGap ( ) ) ) ; layout . setVerticalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addContainerGap ( ) . addComponent ( jPanel1 , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addComponent ( jPanel2 , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addContainerGap ( ) ) ) ; pack ( ) ; }
va	KEY	@ Override public void cancel ( ) { throw new UnsupportedOperationException ( "Not implemented" ) ; }
va	IDF	public void setDaysModelProperty ( String propertyName , Object newValue ) { this . daysPanelController . propertyChange ( new PropertyChangeEvent ( this , propertyName , null , newValue ) ) ; }
va	IDF	public void initArrayElementChildren ( ) { Object userObj = this . userObject ; if ( userObj != null ) { if ( null == this . children ) { this . children = new Vector < AbstractBeanTreeNode > ( ) ; } int length = Array . getLength ( userObj ) ; for ( int i = 0 ; i < length ; i ++ ) { Object arrayElement = Array . get ( userObj , i ) ; class < ? > componentType = this . getObjType ( ) . getComponentType ( ) ; Object arrayElementDefaultValue = this . getObjectDefaultValueInstance ( componentType ) ; AbstractBeanTreeNode arrayChildNode = new BeanObjectTreeNode ( this , componentType . getSimpleName ( ) , componentType , arrayElement , arrayElementDefaultValue , null ) ; if ( componentType . isArray ( ) ) { arrayChildNode . initArrayElementChildren ( ) ; } else { arrayChildNode . initChildren ( ) ; } this . children . add ( arrayChildNode ) ; } } }
va	IDF	public void setTile4 ( String tile4 ) { this . tile4 = tile4 ; }
va	IDF	private ImageRegistry [ ] registrySubset ( int [ ] indices ) { ImageRegistry [ ] subset = new ImageRegistry [ indices . length ] ; for ( int i = 0 ; i < indices . length ; i ++ ) { subset [ i ] = ImageManager . getInstance ( ) . getTileSet ( "map" + indices [ i ] ) ; } return subset ; }
va	KEY	public void updateTable ( ) { }
va	IDF	public void setMessage ( String message ) { this . message = message ; }
va	KEY	public InvalidFileTypeException ( ) { }
va	IDF	public MainFrame ( ) { try { UIManager . setLookAndFeel ( UIManager . getSystemLookAndFeelClassName ( ) ) ; } catch ( Exception e ) { } settings = new Settings ( ) ; renderPanel = new RenderPanel ( this ) ; selectionInfoPanel = new SelectionInfoPanel ( this ) ; String directory = getDirectoryToOpen ( ) ; if ( directory != null ) { fileSelectorPanel = new FileSelectorPanel ( this , new File ( directory ) ) ; } else { fileSelectorPanel = new FileSelectorPanel ( this , null ) ; } JSplitPane westSplitPane = new JSplitPane ( JSplitPane . VERTICAL_SPLIT , fileSelectorPanel , selectionInfoPanel ) ; westSplitPane . setOneTouchExpandable ( true ) ; westSplitPane . setDividerLocation ( 450 ) ; JSplitPane centreSplitPane = new JSplitPane ( JSplitPane . HORIZONTAL_SPLIT , westSplitPane , new JScrollPane ( renderPanel ) ) ; centreSplitPane . setOneTouchExpandable ( true ) ; centreSplitPane . setDividerLocation ( 200 ) ; add ( centreSplitPane ) ; setJMenuBar ( new MainMenu ( this ) ) ; Image img = Toolkit . getDefaultToolkit ( ) . createImage ( "icon.png" ) ; setIconImage ( img ) ; setTitle ( "Simfile Printer" ) ; setSize ( 1000 , 800 ) ; setLocationRelativeTo ( null ) ; setDefaultCloseOperation ( EXIT_ON_CLOSE ) ; setVisible ( true ) ; }
va	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButtonHapusActionPerformed ( evt ) ; }
va	IDF	@ Override public final String toString ( ) { String r = super . toString ( ) ; for ( final String answer : _answers ) { r += "Answer = " + answer + "\n" ; } return r ; }
va	KEY	public Object [ ] executeQueryPopulateArray ( ) throws SQLException { executeQuery ( ) ; if ( rs . next ( ) == false ) return null ; return populateArray ( ) ; }
va	KEY	public abstract String getStatement ( ) ;
va	KEY	public int length ( ) { return mRawImage . length ; }
va	KEY	public ReprocessingPlantImpl ( ) { }
va	KEY	public void setRunTime ( long value ) { this . runTime = value ; }
va	IDF	@ Override public void actionPerformed ( ActionEvent e ) { if ( e . getSource ( ) == nameField ) changeTitle ( nameField . getText ( ) ) ; else if ( e . getSource ( ) == okBtn ) { ok = true ; setVisible ( false ) ; } else if ( e . getSource ( ) == cancelBtn ) { ok = false ; setVisible ( false ) ; } }
va	IDF	private void calculateAdditionalCycles ( int addr1 , int addr2 , boolean branch ) { if ( ! mAdditionalCyclesCalculated ) { if ( branch ) { mInstructionCycles += 1 ; if ( ! mAdditionalCyclesCalculated && ! isSamePage ( addr1 , addr2 ) && OPPAGECROSSING [ readMemory ( getLPC ( ) ) ] == PageCrossingMode . BranchPageCrossing ) mInstructionCycles += 1 ; } else { if ( ! mAdditionalCyclesCalculated && ! isSamePage ( addr1 , addr2 ) && OPPAGECROSSING [ readMemory ( getLPC ( ) ) ] == PageCrossingMode . NormalPageCrossing ) mInstructionCycles += 1 ; } mAdditionalCyclesCalculated = true ; } }
va	IDF	public static void updateBook ( ABook book ) throws SQLException , IOException { Connection conn = getConnection ( ) ; Statement stat = conn . createStatement ( ) ; stat . execute ( "UPDATE Books SET Subject = '" + book . getSubject ( ) + "' where IDCode = " + book . getIDCode ( ) ) ; stat . close ( ) ; conn . close ( ) ; }
va	KEY	public boolean pressArrow ( int xChange , int yChange ) { return false ; }
va	KEY	@ Override public void attack ( boolean state ) { if ( false == enabled ) return ; attackState = state ; }
va	IDF	@ Test public void testWithWrappedString ( ) { ReplacementStrategy < WrappedString > topK = new TopK < WrappedString > ( ) ; topK . hit ( new WrappedString ( "1" ) ) ; assertEquals ( new WrappedString ( "1" ) , topK . suggest ( ) ) ; topK . hit ( new WrappedString ( "2" ) ) ; assertEquals ( new WrappedString ( "1" ) , topK . suggest ( ) ) ; topK . hit ( new WrappedString ( "3" ) ) ; assertEquals ( new WrappedString ( "1" ) , topK . suggest ( ) ) ; topK . hit ( new WrappedString ( "1" ) ) ; assertEquals ( new WrappedString ( "2" ) , topK . suggest ( ) ) ; topK . hit ( new WrappedString ( "2" ) ) ; assertEquals ( new WrappedString ( "3" ) , topK . suggest ( ) ) ; topK . hit ( new WrappedString ( "1" ) ) ; assertEquals ( new WrappedString ( "3" ) , topK . suggest ( ) ) ; topK . evict ( new WrappedString ( "1" ) ) ; assertEquals ( new WrappedString ( "3" ) , topK . suggest ( ) ) ; topK . hit ( new WrappedString ( "2" ) ) ; assertEquals ( new WrappedString ( "3" ) , topK . suggest ( ) ) ; topK . evict ( new WrappedString ( "2" ) ) ; assertEquals ( new WrappedString ( "3" ) , topK . suggest ( ) ) ; topK . evict ( new WrappedString ( "2" ) ) ; assertEquals ( new WrappedString ( "3" ) , topK . suggest ( ) ) ; topK . hit ( new WrappedString ( "1" ) ) ; assertEquals ( new WrappedString ( "3" ) , topK . suggest ( ) ) ; topK . hit ( new WrappedString ( "1" ) ) ; assertEquals ( new WrappedString ( "3" ) , topK . suggest ( ) ) ; topK . hit ( new WrappedString ( "2" ) ) ; assertEquals ( new WrappedString ( "3" ) , topK . suggest ( ) ) ; topK . hit ( new WrappedString ( "3" ) ) ; topK . hit ( new WrappedString ( "3" ) ) ; topK . hit ( new WrappedString ( "3" ) ) ; assertEquals ( new WrappedString ( "3" ) , topK . suggest ( ) ) ; topK . hit ( new WrappedString ( "3" ) ) ; assertEquals ( new WrappedString ( "2" ) , topK . suggest ( ) ) ; }
va	KEY	public boolean areValuesEqual ( ) { return ( firstVal == secondVal ) ; }
va	KEY	public double getLon ( ) { return lon ; }
va	KEY	@ Override public void handleCustomerQueries ( ) { }
va	KEY	public int getRow ( ) { return row ; }
va	IDF	public void sendAllProperties ( ) { ArrayList < INDIProperty > props = getPropertiesAsList ( ) ; for ( int i = 0 ; i < props . size ( ) ; i ++ ) { sendDefXXXVectorMessage ( props . get ( i ) , null ) ; } propertiesRequested ( ) ; }
va	KEY	public int getType ( ) { return type ; }
va	IDF	public static WorldMap readFromString ( String map ) { WorldMapBuilder builder = new WorldMapBuilder ( ) ; String [ ] tokens = map . split ( "\n" ) ; for ( String token : tokens ) { if ( token . startsWith ( "\t" ) ) { if ( token . contains ( " - " ) ) { String placeAndSize = token . substring ( 1 ) ; builder . addPlace ( placeAndSize . split ( " - " ) [ 0 ] ) ; builder . size ( placeAndSize . split ( " - " ) [ 1 ] ) ; } else { builder . addPlace ( token . substring ( 1 ) ) ; } } else { builder . addRegion ( token ) ; } } return builder . createMap ( ) ; }
va	IDF	public Dumper ( Node root ) { super ( root ) ; }
va	IDF	public void run ( ) { obj1 . checkOther ( obj2 ) ; }
va	IDF	public IARandomica ( TipoCorJogador cor ) { super ( "" , cor , TipoJogador . IARANDOMICA ) ; }
va	KEY	public PlayerList ( ) { }
va	IDF	public void setY ( int y ) { super . setY ( y ) ; int counter = 0 ; int height = 0 ; for ( TEView view : this . collection ) { if ( counter == 0 ) { view . setY ( this . getY ( ) + height ) ; counter ++ ; } else { view . setY ( this . getY ( ) + height ) ; } height += view . getHeight ( ) + this . margin ; } }
va	KEY	public boolean returnResult ( ) { if ( end == true ) { setImage ( new GreenfootImage ( "ballsI.png" ) ) ; } return end ; }
va	IDF	public void undo ( ) { switch ( prevSpeed ) { case CeilingFan . HIGH : ceilingFan . high ( ) ; break ; case CeilingFan . MEDIUM : ceilingFan . medium ( ) ; break ; case CeilingFan . LOW : ceilingFan . low ( ) ; break ; default : ceilingFan . off ( ) ; break ; } }
va	KEY	public void setSalPen_Cliente ( double SalPen_Cliente ) { this . SalPen_Cliente = SalPen_Cliente ; }
va	IDF	public PatternHashElement createBitMirrored ( final int axis ) { PatternHashElement mirrored = new PatternHashElement ( pattern ) ; mirrored . bitString = compile ( pattern . createMirroredPattern ( axis ) ) ; return mirrored ; }
va	KEY	public double [ ] getDiffuse ( ) { return diffuse ; }
va	KEY	public void tick ( ) { }
va	KEY	public int getX ( ) { return x ; }
va	IDF	public void addRole ( Role role ) { Session session = null ; try { session = HibernateUtil . getSessionFactory ( ) . openSession ( ) ; session . beginTransaction ( ) ; session . save ( role ) ; session . getTransaction ( ) . commit ( ) ; } catch ( Exception exception ) { throw new RuntimeException ( exception ) ; } finally { if ( session != null && session . isOpen ( ) ) { session . close ( ) ; } } }
va	IDF	public static void main ( String [ ] args ) { int [ ] array = new int [ ] { 1 , 3 , 5 , 7 , 9 , 11 } ; SegmentTree tree = new SegmentTree ( array ) ; System . out . println ( tree . sumRange ( 1 , 4 ) ) ; System . out . println ( tree . sumRange ( 1 , 1 ) ) ; System . out . println ( tree . sumRange ( 0 , 5 ) ) ; System . out . println ( tree . sumRange ( 0 , 0 ) ) ; }
va	IDF	public AppTest ( String testName ) { super ( testName ) ; }
va	IDF	public Start ( ) { initComponents ( ) ; setDisabled ( ) ; this . setVisible ( true ) ; this . setDefaultCloseOperation ( JFrame . HIDE_ON_CLOSE ) ; }
va	IDF	public boolean isFinished ( ) { boolean finished = true ; for ( GameFigure gameFigure : getGameFigures ( ) ) { finished = finished && gameFigure . getId ( ) >= gameFigure . getHomeStartId ( ) ; } if ( finished && position == 0 ) { winner ++ ; position = winner ; } return finished ; }
va	IDF	private void loadFXML ( ) { URL fxml = getClass ( ) . getResource ( "MessageNode.fxml" ) ; FXMLLoader fxmlLoader = new FXMLLoader ( ) ; fxmlLoader . setController ( this ) ; fxmlLoader . setLocation ( fxml ) ; try { Object tmp = fxmlLoader . load ( ) ; if ( ! ( tmp instanceof BorderPane ) ) { throw new RuntimeException ( "Invalid MessageNode base class." ) ; } root = ( BorderPane ) tmp ; } catch ( IOException exception ) { throw new RuntimeException ( exception ) ; } }
va	KEY	public long getCohortId ( ) { return cohortId ; }
va	KEY	public void setStart_row ( int start_row ) { this . start_row = start_row ; }
va	KEY	public long getTicks ( ) { return ticks ; }
va	IDF	public UType [ ] findWhereUTypeEquals ( String uType ) throws UTypeDaoException { return findByDynamicSelect ( SQL_SELECT + " WHERE uType = ? ORDER BY uType" , new Object [ ] { uType } ) ; }
va	KEY	public void setQuantity ( int quantity ) { this . quantity = quantity ; }
va	IDF	@ Override protected void delete ( Message request , Message response ) { if ( response == null ) { response = new Message ( request . getContext ( ) ) ; } response . put ( System . RESULT_CODE , "-1" ) ; response . put ( System . RESULT_MSG , "Not implemented" ) ; }
va	KEY	@ Override public Integer getValue ( ) { return null ; }
va	KEY	public synchronized int xgetR1RepeatDelay ( ) { return r1RD ; }
va	IDF	public static void main ( String [ ] args ) { List < Pattern > results = null ; try { if ( args [ 0 ] . startsWith ( "http://" ) ) { results = PatternLoader . loadFromURL ( args [ 0 ] ) ; } else { results = PatternLoader . loadFromDisk ( args [ 0 ] ) ; } if ( args . length == 2 ) { Pattern p = results . get ( Integer . parseInt ( args [ 1 ] ) ) ; boolean [ ] [ ] world = new boolean [ p . getHeight ( ) ] [ p . getWidth ( ) ] ; p . initialise ( world ) ; play ( world ) ; } else { int i = 0 ; for ( Pattern p : results ) { System . out . println ( i + ")" + p . getOriginal ( ) ) ; i ++ ; } } } catch ( PatternFormatException e ) { System . out . println ( e . getMsg ( ) ) ; } catch ( IOException e ) { System . out . println ( "Wrong type of file" ) ; } catch ( IndexOutOfBoundsException | NumberFormatException e ) { System . out . println ( "Bad index" ) ; } }
va	IDF	@ Override public void enterExiba ( @ NotNull EnquantoParser . ExibaContext ctx ) { }
va	KEY	public void clientsShow ( ) ;
va	IDF	public static JSONArray rowToJSONArray ( JSONTokener x ) throws JSONException { JSONArray ja = new JSONArray ( ) ; for ( ; ; ) { String value = getValue ( x ) ; char c = x . next ( ) ; if ( value == null || ( ja . length ( ) == 0 && value . length ( ) == 0 && c !=   ) ) { return null ; } ja . put ( value ) ; for ( ; ; ) { if ( c ==   ) { break ; } if ( c !=   ) { if ( c == '' || c == '' || c == 0 ) { return ja ; } throw x . syntaxError ( "Bad character '" + c + "' (" + ( int ) c + ")." ) ; } c = x . next ( ) ; } } }
va	IDF	public void setHeader ( String header ) { this . header = header ; }
va	KEY	public int getRotationState ( ) { return rotationState ; }
va	IDF	public Alert ( java . awt . Frame parent , boolean modal , Map < String , Object > map ) { super ( parent , modal ) ; initComponents ( ) ; this . user = map ; }
va	KEY	public boolean getIsHighAmountOfStorageRequested ( ) { return highAmountOfStorageRequested ; }
va	KEY	public int getLevel ( ) { return level ; }
va	KEY	public Notebook ( ) { }
va	KEY	public int getLevel ( ) { return level ; }
va	IDF	public void setInputs ( List < double > features ) { Layer inputLayer = neuralNetwork . getLayers ( ) . get ( 0 ) ; if ( features . size ( ) != inputLayer . getNeurons ( ) . size ( ) ) { throw new IllegalArgumentException ( "Number of features does not match input layer size" ) ; } for ( int neuronNum = 0 ; neuronNum < inputLayer . getNeurons ( ) . size ( ) ; neuronNum ++ ) { inputLayer . getNeurons ( ) . get ( neuronNum ) . setNeuronInput ( features . get ( neuronNum ) ) ; } }
va	IDF	public void setTimeZone ( ) { timezone = Calendar . getInstance ( ) . getTimeZone ( ) ; updateCalendarPane ( ) ; }
va	KEY	public int getTailleGrille ( ) { return this . taille_grille ; }
va	IDF	public PiecePanel ( tutFrame frame , int x ) { this . setLayout ( new BorderLayout ( ) ) ; this . setPreferredSize ( new Dimension ( PLAYERWIDTH , GRIDSIZE ) ) ; this . setBackground ( Color . DARK_GRAY . darker ( ) ) ; boardPanel = frame . boardPanel ; this . board = frame . board ; this . player = frame . players [ x ] ; this . frame = frame ; currentPiece = null ; Border bord1 , bord2 , finalborder ; bord1 = new CompoundBorder ( BorderFactory . createMatteBorder ( 0 , 5 , 0 , 0 , Color . BLUE ) , BorderFactory . createMatteBorder ( 5 , 0 , 0 , 0 , Color . RED ) ) ; bord2 = new CompoundBorder ( BorderFactory . createMatteBorder ( 0 , 0 , 0 , 5 , Color . YELLOW ) , BorderFactory . createMatteBorder ( 0 , 0 , 5 , 0 , Color . GREEN ) ) ; finalborder = new CompoundBorder ( bord1 , bord2 ) ; this . setBorder ( finalborder ) ; switch ( player . getColor ( ) ) { case b : color = "Blue" ; break ; case r : color = "Red" ; break ; case y : color = "Yellow" ; break ; case g : color = "Green" ; break ; } im = new Image [ 21 ] ; ImageIcon temp ; for ( int i = 0 ; i < 21 ; ++ i ) { try { temp = new ImageIcon ( getClass ( ) . getResource ( "/images/" + color + "/" + String . valueOf ( i ) + "S.png" ) ) ; im [ i ] = temp . getImage ( ) ; } catch ( Exception e ) { System . out . println ( "Stuff" ) ; System . exit ( 10 ) ; } } piecesPanel = new JPanel ( new FlowLayout ( ) ) ; piecesPanel . setBackground ( Color . DARK_GRAY . darker ( ) ) ; pieces = new Piece [ 21 ] ; clickables = new JRadioButton [ 21 ] ; int w , h ; ImageIcon icon = null ; ButtonListener clicked = new ButtonListener ( ) ; for ( int i = 0 ; i < 21 ; ++ i ) { pieces [ i ] = player . getPiece ( i ) ; w = ( int ) ( 0.7 * ( pieces [ i ] . getWidth ( ) * SPACESIZE ) ) ; h = ( int ) ( 0.7 * ( pieces [ i ] . getHeight ( ) * SPACESIZE + 1 ) ) ; im [ i ] = im [ i ] . getScaledInstance ( w , h , BufferedImage . SCALE_DEFAULT ) ; icon = new ImageIcon ( im [ i ] ) ; clickables [ i ] = new JRadioButton ( icon ) ; clickables [ i ] . setOpaque ( false ) ; clickables [ i ] . addActionListener ( clicked ) ; piecesPanel . add ( clickables [ i ] ) ; } this . add ( piecesPanel ) ; rcButton = new JButton ( "<html><center>Rotate<p>Right(&gt)</center></html>" ) ; rccButton = new JButton ( "<html><center>Rotate<p>Left(&lt)</center></html>" ) ; flipButton = new JButton ( "Flip(^)" ) ; buttonPanel = new JPanel ( new GridLayout ( 1 , 3 ) ) ; buttonPanel . setBackground ( Color . DARK_GRAY . darker ( ) ) ; buttonPanel . add ( rccButton , BorderLayout . SOUTH ) ; buttonPanel . add ( flipButton , BorderLayout . SOUTH ) ; buttonPanel . add ( rcButton , BorderLayout . SOUTH ) ; rcButton . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent arg0 ) { if ( currentPiece != null ) { currentPiece . ImageDragRC ( ) ; } } } ) ; rccButton . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent arg0 ) { if ( currentPiece != null ) { currentPiece . ImageDragRCC ( ) ; } } } ) ; flipButton . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent arg0 ) { if ( currentPiece != null ) { currentPiece . ImageDragFlip ( ) ; } } } ) ; submitButton = new JButton ( "Submit Move!(ENTER)" ) ; submitButton . addActionListener ( new SubmitListener ( ) ) ; submitButton . setEnabled ( false ) ; JPanel two = new JPanel ( new GridLayout ( 2 , 1 ) ) ; two . setBackground ( Color . DARK_GRAY . darker ( ) ) ; two . add ( buttonPanel ) ; two . add ( submitButton ) ; this . add ( two , BorderLayout . SOUTH ) ; }
va	KEY	public static Activator getDefault ( ) { return _instance ; }
va	KEY	protected void setupPanel ( ) { }
va	IDF	@ Test public void readFromStringSingleLocation ( ) { WorldMap top = WorldMapReader . readFromString ( "region 1" + "\n\tplace 1" ) ; assertEquals ( new HashSet < > ( Arrays . asList ( "region 1" ) ) , top . regions ( ) ) ; assertEquals ( new HashSet < > ( Arrays . asList ( new Location ( "region 1" , "place 1" ) ) ) , top . locations ( ) ) ; }
va	KEY	public void showDialog ( ) ;
va	IDF	public MultOpTree ( Token tok ) { this . symbol = tok . getSymbol ( ) ; }
va	KEY	public void fieldsNotSet ( ) ;
va	KEY	public static final void closeStream ( final Closeable stream ) throws DiskReadException { try { stream . close ( ) ; } catch ( final IOException e ) { throw new DiskReadException ( "Failed to close stream" , null , e ) ; } }
va	KEY	public Entity ( final double x , final double y , final double width , final double height ) { this . x = x ; this . y = y ; this . width = width ; this . height = height ; this . alive = true ; }
va	IDF	private void notifyNearbyCharacters ( String character , CommandContext context ) { for ( String otherCharacter : context . nearbyCharacters ( character ) ) { context . character ( otherCharacter ) . sees ( character , context . characterLocations ( ) . localPosition ( character ) , context . characterLocations ( ) . localMap ( character ) ) ; context . character ( character ) . sees ( otherCharacter , context . characterLocations ( ) . localPosition ( otherCharacter ) , context . characterLocations ( ) . localMap ( otherCharacter ) ) ; } }
va	IDF	@ Override public double fire ( double input ) { return ( stretch / ( stretch + Math . exp ( - input ) ) ) ; }
va	IDF	InsuranceCode ( int id ) { this . id = id ; }
va	IDF	public void drawShip ( Graphics2D g , int offsetX , int offsetY ) { AffineTransform saveTransform = g . getTransform ( ) ; AffineTransform identity = new AffineTransform ( ) ; g . setTransform ( identity ) ; if ( velocity . length ( ) > 0.0001 ) { Vector2D t_heading = heading ; Vector2D t_oldheading = oldheading ; Vector2D t_velocity = velocity ; double relativeHeading = velocity . minus ( t_oldheading ) . perp ( ) . getTheta ( ) ; g . rotate ( relativeHeading , position . x + offsetX , position . y + offsetY - engine1 . engineHeight / 2 - nose . noseLength ) ; } drawBody ( g , offsetX , offsetY ) ; drawEngines ( g , offsetX , offsetY ) ; drawNose ( g , offsetX , offsetY ) ; int sx = Math . round ( getX ( ) ) + offsetX ; int sy = Math . round ( getY ( ) ) + offsetY ; g . setTransform ( saveTransform ) ; Color saveColor = g . getColor ( ) ; g . setColor ( Color . red ) ; DecimalFormat df = new DecimalFormat ( "#" ) ; String hp = df . format ( this . hitpoints ) ; g . drawString ( hp , sx , ( float ) ( sy - this . getHeight ( ) / 2 ) ) ; g . setColor ( saveColor ) ; }
va	KEY	protected void interrupted ( ) { }
va	KEY	public int getY ( ) { return y ; }
va	KEY	public int getLettersLeft ( ) { return lettersLeft ; }
va	KEY	public boolean isProc ( ) { return proc ; }
va	KEY	public int getYear ( ) { return year ; }
va	IDF	@ Test public void test ( ) { assert . assertEquals ( test . partition ( null ) . toString ( ) , "[]" ) ; assert . assertEquals ( test . partition ( "" ) . toString ( ) , "[]" ) ; assert . assertEquals ( test . partition ( "a" ) . toString ( ) , "[[a]]" ) ; assert . assertEquals ( test . partition ( "aab" ) . toString ( ) , "[[a  a  b]  [aa  b]]" ) ; assert . assertEquals ( test . partition ( "abbab" ) . toString ( ) , "[[a  b  b  a  b]  [a  b  bab]  [a  bb  a  b]  [abba  b]]" ) ; assert . assertEquals ( test . partition ( "gggasdf" ) . toString ( ) , "[[g  g  g  a  s  d  f]  [g  gg  a  s  d  f]  [gg  g  a  s  d  f]  [ggg  a  s  d  f]]" ) ; }
va	IDF	public void setFloat ( float x ) throws SQLException { this . ps . setFloat ( parameterIndex ++ , x ) ; }
va	IDF	public String verifyFields ( ) { String result = "" ; final String statement = _statementTextField . getText ( ) ; boolean valid = true ; if ( statement . isEmpty ( ) ) { result += " No statement was entered." ; valid = false ; } if ( getBlanks ( _blankTextFields ) . size ( ) == 0 ) { result += " Blank field needs to be filled in." ; valid = false ; } if ( valid ) { final ArrayList < String > splits = new ArrayList < String > ( ) ; for ( String split : statement . split ( " " ) ) { splits . add ( split ) ; } final ArrayList < String > cleanedWords = StringUtilities . checkFields ( splits ) ; for ( final String blank : getBlanks ( _blankTextFields ) ) { int found = 0 ; for ( final String cleanedWord : cleanedWords ) { if ( cleanedWord . equalsIgnoreCase ( blank ) ) { ++ found ; } } if ( found == 0 ) { result += " " + blank + " not found." ; break ; } } } return result ; }
va	IDF	protected boolean examine ( ) { if ( this . destination == World . seForest ) { System . out . println ( "The bright light from the outside is a welcome sight." ) ; } else if ( this . destination == World . cave ) { System . out . println ( "The maw of the cave is black and foetid." ) ; } return true ; }
va	KEY	public Cart ( ) { }
va	KEY	@ Override public String toString ( ) { switch ( mode ) { case TORQUE : return "MT" ; case POSITION : return "MP" ; case VELOCITY : return "MV" ; default : return "" ; } }
va	KEY	public AbstractView getVueSuivante ( ) { return this . vueSuivante ; }
va	KEY	@ Override public int getSelection ( ) { return 0 ; }
va	KEY	public String getDescription ( ) { return this . description ; }
va	IDF	@ Override public void bcastWinner ( int playerID , String playerName , int score ) { Message msg = new Message ( ) ; msg . setStage ( 2 ) ; msg . setToServer ( 0 ) ; msg . setToMethode ( "theWinnerIs" ) ; msg . setPlayerID ( playerID ) ; msg . setPlayerName ( playerName ) ; msg . setSnakeScore ( score ) ; send ( msg ) ; }
va	IDF	@ Override public void putCharWhileBlockComment ( char c ) throws ParsingException { token . addChar ( c ) ; }
va	IDF	Object [ ] getKeys ( ) { return keys ; }
va	KEY	public double getVal_Servicio ( ) { return Val_Servicio ; }
va	KEY	public boolean isPrecesado ( ) { return precesado ; }
va	IDF	public void run ( ) { JFrame . setDefaultLookAndFeelDecorated ( true ) ; TestFrame frame = new TestFrame ( ) ; frame . pack ( ) ; frame . setLocationRelativeTo ( null ) ; frame . setVisible ( true ) ; }
va	IDF	@ Override public boolean contains ( Object o ) { return get ( ( K ) o ) != null ; }
va	KEY	public void setI ( int i ) { this . i = i ; }
va	KEY	protected boolean isFinished ( ) { return isTimedOut ( ) ; }
va	IDF	public boolean exitChatRoom ( ) throws JMSException , InterruptedException { client . sendExitChatRoomMessage ( relay . getChatRoomName ( ) ) ; while ( true ) { System . out . print ( "" ) ; if ( relay . isReceived ( ) ) break ; } relay . setReceived ( false ) ; Thread . sleep ( 100 ) ; System . out . println ( "\nExit Chat Room OK\n" ) ; return true ; }
va	IDF	private void buttonColoredAction1ActionPerformed ( java . awt . event . ActionEvent evt ) { try { Issue issue = new Issue ( ) ; issue . setDescripcionIssue ( txtDescripcion . getText ( ) ) ; issue . setEstadoIssue ( comboEstado10 . getSelectedIndex ( ) + 1 ) ; issue . setIdTarea ( Integer . parseInt ( txtIdTarea . getText ( ) ) ) ; QATracker . issueBus . crear ( issue ) ; JOptionPane . showMessageDialog ( rootPane , "El issue se ha creado." , "Exito" , JOptionPane . PLAIN_MESSAGE ) ; } catch ( SQLException ex ) { System . out . println ( ex . getMessage ( ) ) ; } this . setVisible ( false ) ; }
va	IDF	public INDILightElement ( INDILightProperty property , String name , String label , LightStates state ) { super ( property , name , label ) ; this . state = state ; }
va	IDF	public void run ( ) { try { CommandPanel . setup ( ) ; NewCommandPanel window = new NewCommandPanel ( ) ; window . frmMuserControlPanel . setVisible ( true ) ; window . frmMuserControlPanel . setResizable ( false ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }
va	KEY	public void forward ( ) ;
va	IDF	public void setDimensions ( int width , int height ) { this . width = width + padding * 2 ; this . height = height + padding * 2 ; }
va	IDF	@ XmlElementDecl ( namespace = "http://api.soap.mytxtbuddy.com/" , name = "viewContactResponse" ) public JAXBElement < ViewContactResponse > createViewContactResponse ( ViewContactResponse value ) { return new JAXBElement < ViewContactResponse > ( _ViewContactResponse_QNAME , ViewContactResponse . class , null , value ) ; }
va	IDF	private void saveDesign ( File fileTmp ) { try { if ( fileTmp != null ) { panel . saveTo ( fileTmp ) ; file = fileTmp ; } } catch ( IOException e1 ) { JOptionPane . showMessageDialog ( null , "Exception: " + e1 + "\nmessage:\n" + e1 . getMessage ( ) ) ; e1 . printStackTrace ( ) ; } }
va	KEY	public int getHeight ( ) { return height ; }
va	IDF	public void setDeviceInformation ( String deviceInformation ) { this . deviceInformation = deviceInformation ; }
va	IDF	public Obj ( String string , double n , boolean b ) { this . aString = string ; this . aNumber = n ; this . aBoolean = b ; }
va	KEY	public synchronized void xassignRTKeyCode ( int code ) { rt = code ; }
va	KEY	public static CreaturePluginFactory getInstance ( ) { return _singleton ; }
va	KEY	public static void main ( String args [ ] ) { new GameControl ( ) ; }
va	IDF	@ Override public void enterRule ( ParseTreeListener listener ) { if ( listener instanceof EnquantoListener ) ( ( EnquantoListener ) listener ) . enterId ( this ) ; }
va	IDF	private void writeQNames ( javax . xml . namespace . QName [ ] qnames , javax . xml . stream . XMLStreamWriter xmlWriter ) throws javax . xml . stream . XMLStreamException { if ( qnames != null ) { java . lang . StringBuffer stringToWrite = new java . lang . StringBuffer ( ) ; java . lang . String namespaceURI = null ; java . lang . String prefix = null ; for ( int i = 0 ; i < qnames . length ; i ++ ) { if ( i > 0 ) { stringToWrite . append ( " " ) ; } namespaceURI = qnames [ i ] . getNamespaceURI ( ) ; if ( namespaceURI != null ) { prefix = xmlWriter . getPrefix ( namespaceURI ) ; if ( ( prefix == null ) || ( prefix . length ( ) == 0 ) ) { prefix = generatePrefix ( namespaceURI ) ; xmlWriter . writeNamespace ( prefix , namespaceURI ) ; xmlWriter . setPrefix ( prefix , namespaceURI ) ; } if ( prefix . trim ( ) . length ( ) > 0 ) { stringToWrite . append ( prefix ) . append ( ":" ) . append ( org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qnames [ i ] ) ) ; } else { stringToWrite . append ( org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qnames [ i ] ) ) ; } } else { stringToWrite . append ( org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qnames [ i ] ) ) ; } } xmlWriter . writeCharacters ( stringToWrite . toString ( ) ) ; } }
va	KEY	int getX ( ) { return ( int ) this . getBounds2D ( ) . getX ( ) ; }
va	IDF	public void set ( int key , int value ) { map . put ( key , value ) ; }
va	IDF	@ Override public void actionPerformed ( ActionEvent e ) { setFile ( null ) ; panel . clear ( ) ; saveItem . setEnabled ( false ) ; }
va	KEY	public void setOffset ( long value ) { this . offset = value ; }
va	IDF	private void initGameForm ( ) { this . getContentPane ( ) . removeAll ( ) ; topPanel = new JPanel ( ) ; middlePanel = new JPanel ( ) ; bottomPanel = new JPanel ( ) ; this . add ( topPanel ) ; this . add ( middlePanel ) ; this . add ( bottomPanel ) ; scorePanel = new JPanel ( ) ; topPanel . add ( scorePanel ) ; scoreLabel = new JLabel ( "Score: 0" ) ; scorePanel . add ( scoreLabel ) ; cardsLeftPanel = new JPanel ( ) ; topPanel . add ( cardsLeftPanel ) ; cardsLeftLabel = new JLabel ( "Cards Left: " + game . getCardDeck ( ) . getCardsLeftCount ( ) ) ; cardsLeftPanel . add ( cardsLeftLabel ) ; timerPanel = new JPanel ( ) ; topPanel . add ( timerPanel ) ; timerLabel = new JLabel ( "Time: 0" ) ; timerPanel . add ( timerLabel ) ; cardsPanel = new JPanel ( ) ; middlePanel . add ( cardsPanel ) ; answerField = new JTextField ( 2 ) ; bottomPanel . add ( answerField ) ; answerField . requestFocusInWindow ( ) ; answerBtn = new JButton ( ) ; bottomPanel . add ( answerBtn ) ; answerBtn . setVisible ( false ) ; answerBtn . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { int answer ; try { answer = Integer . parseInt ( answerField . getText ( ) ) ; } catch ( NumberFormatException ex ) { scoreLabel . setText ( "Enter number" ) ; return ; } finally { answerField . setText ( "" ) ; } if ( game . answer ( answer ) ) repaintInfo ( ) ; else setGameOver ( ) ; } } ) ; getRootPane ( ) . setDefaultButton ( answerBtn ) ; repaintInfo ( ) ; this . setSize ( 700 , 250 ) ; setInTheMiddle ( ) ; }
va	IDF	public Builder ( String style , String id ) { this . style = style ; }
va	KEY	public ResetPassword createResetPassword ( ) { return new ResetPassword ( ) ; }
va	IDF	void actionUseDTBS ( ) { String t = chalPane . getChallenge ( ) ; if ( t == null || t . equals ( "" ) ) return ; sigPane . setHex ( true ) ; sigPane . setDTBSText ( t ) ; }
va	IDF	@ Override public void drink ( String something ) { System . out . println ( "drink " + something ) ; }
va	KEY	public long getTagID ( ) { return tagID ; }
va	KEY	public int getMinDamage ( ) { return minDamage ; }
va	KEY	public int getNumberOfElements ( ) { return elements . length ; }
va	IDF	public void setName ( String name ) { this . name = name ; }
va	KEY	public boolean isEmpty ( ) { return map_tree == null ; }
va	IDF	public void setId ( String id ) { this . id = id ; }
va	KEY	public boolean isDead ( ) { return nbLives <= 0 ; }
va	IDF	public static void main ( String [ ] args ) { Game g = new Game ( ) ; g . runForm ( ) ; }
va	IDF	private String nomeValido ( TipoCorJogador cor , String nomeAdversario ) { boolean nomeValido = false ; String nome = null ; do { nome = nomeValido ( cor ) ; String nomeCase = nome . toUpperCase ( ) ; if ( nomeCase . equals ( nomeAdversario . toUpperCase ( ) ) ) cli . exibirAlerta ( "Nome inv\u00E1lido  pertence ao advers\u00E1rio" ) ; else nomeValido = true ; } while ( ! nomeValido ) ; return nome ; }
va	IDF	public ImageIcon getTopItemImage ( ) { if ( items . getSize ( ) > 0 ) { return items . getItem ( items . getUsedIDs ( ) . iterator ( ) . next ( ) ) . getImg ( ) ; } return null ; }
va	KEY	public boolean isClear ( ) { return clear ; }
va	KEY	public void setMass ( double mass ) { this . mass = mass ; }
va	KEY	public void println ( ) { this . out . println ( ) ; }
va	IDF	@ Test public void hashNotEquivalentAfterChanges ( ) { base0 . setId ( 10 ) ; base0 . updateMd5Hash ( ) ; assertFalse ( base0 . getMd5Hash ( ) . equals ( base1 . getMd5Hash ( ) ) ) ; }
va	IDF	public void setAnchor ( Point anchor ) { this . anchor = anchor ; }
va	IDF	public void mouseReleased ( java . awt . event . MouseEvent evt ) { grid3BtnMouseReleased ( evt ) ; }
va	KEY	public void stop ( ) throws IOException ;
va	IDF	public static Date getDate ( int y , int mon , int d , int h , int min , int s ) { Calendar c = GregorianCalendar . getInstance ( ) ; c . setTimeInMillis ( 0 ) ; c . set ( y , mon , d , h , min , s ) ; return c . getTime ( ) ; }
va	KEY	public ASCII_Art ( ) { }
va	IDF	public Pattern ( String format ) { String [ ] formatSplit = format . split ( ":" ) ; name = formatSplit [ 0 ] ; author = formatSplit [ 1 ] ; width = Integer . parseInt ( formatSplit [ 2 ] ) ; height = Integer . parseInt ( formatSplit [ 3 ] ) ; startCol = Integer . parseInt ( formatSplit [ 4 ] ) ; startRow = Integer . parseInt ( formatSplit [ 5 ] ) ; cells = formatSplit [ 6 ] ; }
va	IDF	HelloSwingWorld ( ) { super ( "Hello Swing" ) ; setDefaultCloseOperation ( EXIT_ON_CLOSE ) ; JLabel text = new JLabel ( "Hello Swing" ) ; add ( text ) ; setSize ( 320 , 240 ) ; }
va	IDF	protected void appendItem ( String astr , Object aobj ) { mystrings . add ( astr ) ; myobjects . add ( aobj ) ; }
va	IDF	public void actionPerformed ( ActionEvent e ) { String layer_choice = getCommand ( layer ) ; String object_choice = getCommand ( object ) ; LinkedList < String > results = null ; try { if ( layer_choice . equals ( InfoEnum . Layer . ALL . name ( ) ) ) { } else if ( layer_choice . equals ( InfoEnum . Layer . BUSINESS . name ( ) ) ) { results = Inference . checkSecurityPatternContext ( ms . req_bus_model , Integer . valueOf ( object_choice ) , false ) ; } else if ( layer_choice . equals ( InfoEnum . Layer . APPLICATION . name ( ) ) ) { results = Inference . checkSecurityPatternContext ( ms . req_app_model , Integer . valueOf ( object_choice ) , false ) ; } else if ( layer_choice . equals ( InfoEnum . Layer . PHYSICAL . name ( ) ) ) { results = Inference . checkSecurityPatternContext ( ms . req_phy_model , Integer . valueOf ( object_choice ) , false ) ; } else { CommandPanel . logger . severe ( "Layer selection error!" ) ; } } catch ( NumberFormatException | IOException e1 ) { e1 . printStackTrace ( ) ; } String hold = "" ; String not_hold = "" ; String undecidable = "" ; String temp = "" ; String temp_context = "" ; for ( String s : results ) { if ( s . startsWith ( "hold" ) ) { temp = s . substring ( 5 , s . indexOf ( " " ) ) ; temp_context = s . substring ( s . indexOf ( " " ) + 1 , s . indexOf ( ")" ) ) ; hold += temp + " pattern: context " + temp_context + " holds in current context.\n" ; } else if ( s . startsWith ( "not_hold" ) ) { temp = s . substring ( 9 , s . indexOf ( " " ) ) ; temp_context = s . substring ( s . indexOf ( " " ) + 1 , s . indexOf ( ")" ) ) ; not_hold += temp + " pattern: context " + temp_context + " does not hold in current context.\n" ; } else if ( s . startsWith ( "undecidable" ) ) { temp = s . substring ( 12 , s . indexOf ( " " ) ) ; temp_context = s . substring ( s . indexOf ( " " ) + 1 , s . indexOf ( ")" ) ) ; undecidable += temp + " pattern: context " + temp_context + " cannot be decided in current context.\n" ; } } if ( ! hold . equals ( "" ) ) { JOptionPane . showMessageDialog ( frmMuserControlPanel , hold ) ; } if ( ! not_hold . equals ( "" ) ) { JOptionPane . showMessageDialog ( frmMuserControlPanel , not_hold ) ; } if ( ! undecidable . equals ( "" ) ) { JOptionPane . showMessageDialog ( frmMuserControlPanel , undecidable ) ; } for ( String s : results ) { if ( s . startsWith ( "question" ) ) { temp = s . substring ( 9 , s . indexOf ( "_" ) ) ; int check_result = JOptionPane . showConfirmDialog ( frmMuserControlPanel , InfoEnum . pattern_context_question . get ( s ) , temp + " pattern secondary context check" , JOptionPane . YES_NO_OPTION ) ; try { if ( check_result == JOptionPane . YES_OPTION ) { Inference . writeFile ( InfoEnum . current_directory + "/dlv/context/domain_context.dl" , "\n" + InfoEnum . pattern_context_question . get ( s + "y" ) , true ) ; } else { Inference . writeFile ( InfoEnum . current_directory + "/dlv/context/domain_context.dl" , "\n" + InfoEnum . pattern_context_question . get ( s + "n" ) , true ) ; } } catch ( IOException e1 ) { e1 . printStackTrace ( ) ; } } } }
va	KEY	public Hello ( ) { }
va	KEY	public int hashCode ( ) { return token . hashCode ( ) ; }
va	IDF	public static void main ( String [ ] args ) { int size = 1000 ; LAProvider provider = LAProvider . SPARSE ; Matrix m = LAFactory . newInstance ( ) . newMatrix ( size , size , provider ) ; Vector b = LAFactory . newInstance ( ) . newVector ( size , provider ) ; for ( int i = 0 ; i < size ; ++ i ) { m . set ( i , i , - 4. ) ; if ( i > 0 ) { m . set ( i - 1 , i , 1. ) ; m . set ( i , i - 1 , 1. ) ; } } b . set ( 0 , 10. ) ; SteepestDescentSolver solver = new SteepestDescentSolver ( ) ; long start = System . currentTimeMillis ( ) ; Vector x = solver . solve ( m , b ) ; long end = System . currentTimeMillis ( ) ; System . out . printf ( "%-15s needed %5d ms.\n" , provider . name ( ) , ( end - start ) ) ; Vector b2 = m . multiply ( x ) ; for ( int i = 0 ; i < 10 ; ++ i ) { System . out . println ( "  " + x . get ( i ) + " -> " + b . get ( i ) + " = " + b2 . get ( i ) ) ; } }
va	KEY	public boolean isStop ( ) { return stop ; }
va	IDF	public Vector2D transformVector2D ( final Vector2D vPoint ) { double x = ( matrix . _11 * vPoint . x ) + ( matrix . _21 * vPoint . y ) + ( matrix . _31 ) ; double y = ( matrix . _12 * vPoint . x ) + ( matrix . _22 * vPoint . y ) + ( matrix . _32 ) ; return new Vector2D ( x , y ) ; }
va	KEY	@ Override public void setDim ( int dim ) { }
va	IDF	public SemanticLowRankParam ( Parameters parameters ) { N = parameters . N2 ; M = parameters . M2 ; D = parameters . D2 ; L = parameters . L2 ; list = new ArrayList < MatrixEntry > ( ) ; }
va	KEY	protected void switchUsable ( ) { if ( isUsable == true ) { isUsable = false ; _saveVideo . setEnabled ( false ) ; } else { isUsable = true ; _saveVideo . setEnabled ( true ) ; } }
va	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { actualizarButtonActionPerformed ( evt ) ; }
va	KEY	public UsuarioBean ( ) { }
va	KEY	@ Override public int count ( ) { return 0 ; }
va	IDF	@ HandlesEvent ( "CheckOut" ) public Resolution checkOut ( ) { TransactionPolicy policyGraph = ( TransactionPolicy ) this . ctx . getServletContext ( ) . getAttribute ( CartAppActionBeanContext . policyAttribute ) ; UnitOfWork checkout = UnitOfWork . create ( business . CheckOut . class , policyGraph ) . with ( ctx . getUser ( ) ) ; try { checkout . Go ( ) ; } catch ( UserNotRegisteredException e ) { this . error = "Must be registered to check out" ; return new ForwardResolution ( "/login.jsp" ) ; } catch ( InsufficientInventoryException e ) { this . error = "Unable to reserve cart item quantities [" + e . getMessage ( ) + "]" ; return new ForwardResolution ( "/cart.jsp" ) ; } catch ( PolicyException e ) { e . printStackTrace ( ) ; } return new ForwardResolution ( "/confirmpurchase.jsp" ) ; }
va	KEY	public float getPriceValue ( ) { return priceValue ; }
va	IDF	public void setPlayerNames ( String [ ] playerNames ) { this . playerNames = playerNames ; }
va	KEY	public boolean move ( int delta ) { return move ( delta , false ) ; }
va	IDF	private void setupComponents ( ) { int [ ] iArray = new int [ 128 ] ; for ( int i = 0 ; i < iArray . length ; i ++ ) iArray [ i ] = 0 ; m_hexView . setData ( iArray ) ; setSize ( ( int ) m_hexView . getMinimumSize ( ) . getWidth ( ) , ( int ) m_hexView . getMinimumSize ( ) . getHeight ( ) ) ; add ( m_hexView , BorderLayout . CENTER ) ; }
va	IDF	static public String normalize ( String name ) { return name . toLowerCase ( ) ; }
va	KEY	void execute ( ) ;
va	IDF	@ Test public final void testCountry ( ) { assertEquals ( "GB" , ISO . Country . GB . name ( ) ) ; assertEquals ( "GB" , ISO . Country . GB . getAlpha2 ( ) ) ; assertEquals ( "GBR" , ISO . Country . GB . getAlpha3 ( ) ) ; assertEquals ( "United Kingdom" , ISO . Country . GB . getTitle ( ) ) ; assertEquals ( 826 , ISO . Country . GB . getNumeric ( ) ) ; }
va	IDF	@ Override public boolean create ( Editor editor ) { Transaction readTransaction = session . beginTransaction ( ) ; session . persist ( editor ) ; readTransaction . commit ( ) ; return true ; }
va	IDF	public BusinessException ( String message ) { super ( message ) ; }
va	KEY	public void setLeistung ( int leistung ) { this . leistung = leistung ; }
va	IDF	public XbpadButton ( ) { super ( "" , Theme . STANDARD_BLACK_THEME , ButtonType . BUTTON_RECTANGULAR ) ; this . setRolloverButtonTheme ( Theme . STANDARD_GREEN_THEME ) ; }
va	KEY	public Builder townHouse ( int garage ) { this . garage = garage ; return this ; }
va	KEY	@ Override public void onUnbind ( class < ? extends IListener > listenerClass ) { }
va	IDF	public Worker ( Type type , SharedObject drop ) { this . type = type ; this . drop = drop ; }
va	KEY	public boolean getLowerLimit ( ) ;
va	IDF	@ Override public void putChar ( char c ) throws ParsingException { if ( c == Characters . SUB_END ) { close ( ) ; return ; } token . addChar ( c ) ; }
va	IDF	ParamPart ( String name , ServletInputStream in , String boundary ) throws IOException { super ( name ) ; PartInputStream pis = new PartInputStream ( in , boundary ) ; ByteArrayOutputStream baos = new ByteArrayOutputStream ( 512 ) ; byte [ ] buf = new byte [ 128 ] ; int read ; while ( ( read = pis . read ( buf ) ) != - 1 ) { baos . write ( buf , 0 , read ) ; } pis . close ( ) ; baos . close ( ) ; value = baos . toByteArray ( ) ; }
va	KEY	public int getCount ( ) { return this . count ; }
va	KEY	public int getY ( ) { return y ; }
va	IDF	static boolean validLocationString ( TIPPSectionType sectionType , String location ) { if ( ( sectionType . getDefaultName ( ) + "/" + location ) . length ( ) >= 240 ) { return false ; } if ( location . startsWith ( "/" ) ) { return false ; } String [ ] parts = location . split ( "/" ) ; for ( String p : parts ) { if ( ! VALID_LOCATION_PATH . matcher ( p ) . matches ( ) ) { return false ; } if ( "." . equals ( p ) || ".." . equals ( p ) ) { return false ; } } return true ; }
va	KEY	@ Override public boolean escapeAction ( ) { if ( previousPanel != null ) { flickrFrame . changePanel ( previousPanel ) ; return true ; } else return false ; }
va	KEY	public boolean pressSpace ( ) { return false ; }
va	IDF	private Observer createObserver ( ) { return new Observer ( ) { @ Override public void update ( String playedTime ) { time = playedTime ; refresh ( ) ; } } ; }
va	KEY	public boolean isCellEditable ( int row , int column ) { if ( column == 0 || column == 1 ) { return false ; } else { return true ; } }
va	KEY	public void setImmigrantRefugeeNewArrival ( boolean immigrantRefugeeNewArrival ) { this . immigrantRefugeeNewArrival = immigrantRefugeeNewArrival ; }
va	KEY	public abstract boolean setSpeedFast ( ) ;
va	KEY	@ Override public boolean delete ( Borrowing object ) { return false ; }
va	KEY	@ Override public void remove ( ) { throw new UnsupportedOperationException ( "Read only iterator" ) ; }
va	KEY	public int length ( ) { return this . myArrayList . size ( ) ; }
va	KEY	public boolean hasEnded ( ) { if ( hasWinner ( ) ) { return true ; } for ( int i = 0 ; i < BOARD_WIDTH ; i ++ ) { if ( getColourOfStone ( i , 0 ) == EMPTY_STONE_COLOUR ) { return false ; } } return true ; }
va	KEY	public NotebookCalendar ( ) { }
va	IDF	@ Override public String format ( LogRecord record ) { StringBuffer buf = new StringBuffer ( 1000 ) ; buf . append ( "<tr>" ) ; buf . append ( "<td>" ) ; if ( record . getLevel ( ) . intValue ( ) >= Level . WARNING . intValue ( ) ) { buf . append ( "<b>" ) ; buf . append ( record . getLevel ( ) ) ; buf . append ( "</b>" ) ; } else { buf . append ( record . getLevel ( ) ) ; } buf . append ( "</td>" ) ; buf . append ( "<td>" ) ; buf . append ( calcDate ( record . getMillis ( ) ) ) ; buf . append ( "</td>" ) ; buf . append ( "<td>" ) ; buf . append ( formatMessage ( record ) ) ; buf . append ( '' ) ; buf . append ( "</td>" ) ; buf . append ( "</tr>\n" ) ; return buf . toString ( ) ; }
va	KEY	public float getvElevation ( ) { return vElevation ; }
va	IDF	@ Override public ArrayList load ( EstruturaPesquisa pesquisa ) throws SQLException { ArrayList < ChamadosRecentes > chamados = new ArrayList < > ( ) ; String sql = "SELECT * FROM chamados_recentes ORDER by " + pesquisa . getCampo ( ) + pesquisa . getOrdem ( ) ; if ( pesquisa . getLimite ( ) > 0 ) { sql += " LIMIT " + pesquisa . getLimite ( ) ; } PreparedStatement pst = connection . prepareStatement ( sql ) ; ResultSet rs = pst . executeQuery ( ) ; while ( rs . next ( ) ) { ChamadosRecentes chamado = new ChamadosRecentes ( ) ; chamado . setChamadoCodigo ( rs . getString ( "chamado_codigo" ) ) ; chamado . setTecnico ( rs . getString ( "tecnico" ) ) ; chamado . setMaquina ( rs . getString ( "maquina" ) ) ; chamado . setData ( rs . getTimestamp ( "data" ) ) ; chamados . add ( chamado ) ; } rs . close ( ) ; pst . close ( ) ; return chamados ; }
va	KEY	public void move ( int where ) ;
va	KEY	private boolean isINDIDriver ( class c ) { if ( INDINotLoadableDriver . class . isAssignableFrom ( c ) ) { return false ; } class s = c . getSuperclass ( ) ; while ( s != null ) { if ( s == INDIDriver . class ) { return true ; } s = s . getSuperclass ( ) ; } return false ; }
va	KEY	public int size ( ) { return lines . size ( ) ; }
va	IDF	public void initGame ( vgame . VGame vg ) { i . initGame ( vg ) ; }
va	IDF	private boolean [ ] [ ] findEdges ( ) { int G [ ] [ ] [ ] = new int [ _height ] [ _width ] [ 4 ] ; int G1 [ ] [ ] [ ] = new int [ _height ] [ _width ] [ 4 ] ; int G2 [ ] [ ] [ ] = new int [ _height ] [ _width ] [ 4 ] ; boolean isEdge [ ] [ ] [ ] = new boolean [ _height ] [ _width ] [ 4 ] ; for ( int y = _height - 2 ; y > 0 ; y -- ) for ( int x = 1 ; x < _width - 1 ; x ++ ) { for ( int o = 0 ; o < 4 ; o ++ ) { int x2 = x + NEIGHBOURS [ o ] [ 0 ] ; int y2 = y + NEIGHBOURS [ o ] [ 1 ] ; int x3 = x + NEIGHBOURS [ o ] [ 2 ] ; int y3 = y + NEIGHBOURS [ o ] [ 3 ] ; G [ y ] [ x ] [ o ] = distance ( x , y , x2 , y2 ) + distance ( x , y , x3 , y3 ) ; } G [ y ] [ x ] [ 0 ] *= 1.5 ; G [ y ] [ x ] [ 2 ] *= 1.5 ; } for ( int y = _height - 3 ; y > 1 ; y -- ) for ( int x = 2 ; x < _width - 2 ; x ++ ) { for ( int o = 0 ; o < 4 ; o ++ ) { int o2 = ( o + 2 ) % 4 ; int x2 = x + NEIGHBOURS [ o2 ] [ 0 ] ; int y2 = y + NEIGHBOURS [ o2 ] [ 1 ] ; int x3 = x + NEIGHBOURS [ o2 ] [ 2 ] ; int y3 = y + NEIGHBOURS [ o2 ] [ 3 ] ; G1 [ y ] [ x ] [ o ] = ( G [ y ] [ x ] [ o ] + G [ y2 ] [ x2 ] [ o ] + G [ y3 ] [ x3 ] [ o ] ) / 3 ; } } for ( int y = _height - 3 ; y > 1 ; y -- ) for ( int x = 2 ; x < _width - 2 ; x ++ ) { for ( int o = 0 ; o < 4 ; o ++ ) { G2 [ y ] [ x ] [ o ] = G1 [ y ] [ x ] [ o ] ; int x1 = x + NEIGHBOURS [ o ] [ 0 ] ; int y1 = y + NEIGHBOURS [ o ] [ 1 ] ; int x2 = x + NEIGHBOURS [ o ] [ 2 ] ; int y2 = y + NEIGHBOURS [ o ] [ 3 ] ; if ( G1 [ y ] [ x ] [ o ] <= G1 [ y1 ] [ x1 ] [ o ] || G1 [ y ] [ x ] [ o ] < G1 [ y2 ] [ x2 ] [ o ] ) G2 [ y ] [ x ] [ o ] = 0 ; } } for ( int y = _height - 3 ; y > 1 ; y -- ) for ( int x = 2 ; x < _width - 2 ; x ++ ) { for ( int o = 0 ; o < 4 ; o ++ ) if ( G2 [ y ] [ x ] [ o ] > EDGE_THRESHOLD1 && ! isEdge [ y ] [ x ] [ o ] ) { isEdge [ y ] [ x ] [ o ] = true ; Queue < Point > q = new LinkedList < Point > ( ) ; q . add ( new Point ( x , y ) ) ; while ( ! q . isEmpty ( ) ) { Point p = q . poll ( ) ; for ( int i = - 1 ; i < 2 ; i ++ ) for ( int j = - 1 ; j < 2 ; j ++ ) { if ( i == 0 && j == 0 ) continue ; int ny = p . y + i ; int nx = p . x + j ; if ( G2 [ ny ] [ nx ] [ o ] > EDGE_THRESHOLD2 && ! isEdge [ ny ] [ nx ] [ o ] ) { isEdge [ ny ] [ nx ] [ o ] = true ; q . add ( new Point ( nx , ny ) ) ; } } } } } boolean ret [ ] [ ] = new boolean [ _height ] [ _width ] ; for ( int y = _height - 3 ; y > 1 ; y -- ) for ( int x = 2 ; x < _width - 2 ; x ++ ) { if ( isEdge [ y ] [ x ] [ 0 ] || isEdge [ y ] [ x ] [ 1 ] || isEdge [ y ] [ x ] [ 2 ] || isEdge [ y ] [ x ] [ 3 ] ) ret [ y ] [ x ] = true ; } return ret ; }
va	IDF	@ Override public String getReciever ( ) { return recieve ; }
va	IDF	public SetModeCommand ( Mode mode ) { this . mode = mode ; }
va	KEY	public abstract void disconnect ( ) ;
va	IDF	private static Object restrictedTo ( Object map_subtree , Object set_subtree ) { return restrictedTo ( map_subtree , set_subtree , NEGATIVE_INFINITY , POSITIVE_INFINITY ) ; }
va	KEY	public JSONArray put ( int index , boolean value ) throws JSONException { put ( index , value ? boolean . true : boolean . false ) ; return this ; }
va	IDF	@ Override public void onSendNoServerPort ( int packetId ) { Message < ClientProtocolParameters > message = messageHistory . remove ( packetId ) ; if ( message != null ) { onMessageNotSent ( message ) ; } }
va	KEY	private double mod24 ( double x ) { double res = x % 24 ; if ( res >= 0 ) { return res ; } else { return res + 24 ; } }
va	KEY	public long getId ( ) { return id ; }
va	KEY	public abstract String tableName ( ) ;
va	KEY	public void removeModel ( ) { registeredModel = null ; }
va	KEY	public ISS ( ) { }
va	KEY	public int getVal ( ) { return val ; }
va	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { CancelActionPerformed ( evt ) ; }
va	KEY	public boolean ready ( ) throws IOException { return bufferedReader . ready ( ) ; }
va	IDF	public MarioComponent ( int width , int height , boolean isCustomized ) { addFocusListener ( this ) ; addMouseListener ( this ) ; addKeyListener ( this ) ; this . setFocusable ( true ) ; this . setEnabled ( true ) ; this . width = width ; this . height = height ; this . isCustom = isCustomized ; Dimension size = new Dimension ( width , height ) ; setPreferredSize ( size ) ; setMinimumSize ( size ) ; setMaximumSize ( size ) ; try { sound = new SonarSoundEngine ( 64 ) ; } catch ( LineUnavailableException e ) { e . printStackTrace ( ) ; sound = new FakeSoundEngine ( ) ; } this . setFocusable ( true ) ; LevelScene . bothPlayed = false ; openTime = System . nanoTime ( ) ; }
va	IDF	Component btnMethod ( ) { Button btn1 = new Button ( "Exit" ) ; btn1 . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { edittext . setText ( "Hello World" ) ; edittext . setEditable ( false ) ; Frame frameClass = new Frame ( ) ; } } ) ; return btn1 ; }
va	IDF	public boolean sendUpdate ( String move , int client , JTextArea terminal ) { for ( int i = 0 ; i < numPlayers ; ++ i ) { if ( i != client ) { try { sendString ( "3 " + move , i ) ; } catch ( Exception e ) { System . out . println ( "Player " + i + " left" ) ; terminal . append ( "Player " + i + " left\n" ) ; } } } return true ; }
va	IDF	public void setNombre ( String nombre ) { this . nombre = nombre ; }
va	KEY	public void setSsl ( boolean ssl ) { this . ssl = ssl ; }
va	KEY	public final boolean addAll ( Collection < ? extends Elt > c ) { throw new UnsupportedOperationException ( ) ; }
va	KEY	public abstract void displayMessage ( String message ) ;
va	KEY	public void setValDes_Fact ( double ValDes_Fact ) { this . ValDes_Fact = ValDes_Fact ; }
va	KEY	@ Override public int getPriority ( ) { return 10 ; }
va	KEY	public long getId ( ) { return id ; }
va	KEY	public void rotateX ( double radians ) ;
va	IDF	public void setDamageMsg ( String damageMsg ) { this . damageMsg = damageMsg ; }
va	IDF	@ Test public void lspCorrection ( ) { designer . setWorkerID ( "A133N" ) ; assert . assertEquals ( "A133N" , designer . getWorkedId ( ) ) ; }
va	IDF	public Rect ( int w , int h ) { width = w ; height = h ; }
va	IDF	public static boolean isXingzuo ( String str ) { if ( str . contains ( "\u661F\u5EA7" ) || str . contains ( "\u53CC\u9C7C" ) || str . contains ( "\u767D\u7F8A" ) || str . contains ( "\u91D1\u725B" ) || str . contains ( "\u53CC\u5B50" ) || str . contains ( "\u5DE8\u87F9" ) || str . contains ( "\u72EE\u5B50" ) || str . contains ( "\u5904\u5973" ) || str . contains ( "\u5929\u79E4" ) || str . contains ( "\u5929\u874E" ) || str . contains ( "\u5C04\u624B" ) || str . contains ( "\u6469\u7FAF" ) || str . contains ( "\u6C34\u74F6" ) ) return true ; return false ; }
va	KEY	public abstract void definirDefense ( ) ;
va	KEY	public void displayHelpMenu ( ) { throw new UnsupportedOperationException ( "Not supported yet." ) ; }
va	IDF	public int getCount ( ArrayList < FilterBean > hmFilter ) throws Exception { int pages ; try { oMysql . conexion ( enumTipoConexion ) ; pages = oMysql . getCount ( "hilo" , hmFilter ) ; oMysql . desconexion ( ) ; return pages ; } catch ( Exception e ) { throw new Exception ( "HiloDao.getCount: Error: " + e . getMessage ( ) ) ; } }
va	IDF	static CommandLine svnLogFileContent ( String pathToSvn , String repositoryRoot , String filePath , String revision , Charset charset ) { String fileRevisionUrl = repositoryRoot + "/" + filePath + "@" + revision ; return newExternalCommand ( pathToSvn , "cat" , fileRevisionUrl ) . outputCharset ( charset ) . charsetAutoDetect ( true ) ; }
va	IDF	public void add ( final String path , final InputStream input ) throws IOException { send ( 9 , path , input ) ; }
va	IDF	public void selectDB ( ) { System . out . println ( "Opene" ) ; try { class . forName ( "org.sqlite.JDBC" ) ; connect = DriverManager . getConnection ( "jdbc:sqlite:" + nameDateBase ) ; stmt = connect . createStatement ( ) ; connect . setAutoCommit ( false ) ; System . out . println ( "Opened database successfully" ) ; stmt = connect . createStatement ( ) ; ResultSet rs = stmt . executeQuery ( "SELECT * FROM " + nameTable + ";" ) ; while ( rs . next ( ) ) { int id = rs . getInt ( "ID" ) ; String town = rs . getString ( "TOWN" ) ; System . out . println ( "ID = " + id ) ; System . out . println ( "TOWN = " + town ) ; System . out . println ( ) ; } rs . close ( ) ; stmt . close ( ) ; connect . close ( ) ; } catch ( Exception e ) { System . err . println ( e . getClass ( ) . getName ( ) + ": " + e . getMessage ( ) ) ; System . exit ( 0 ) ; } System . out . println ( "Operation done successfully" ) ; }
va	KEY	public double getNeuronInput ( ) { return neuronInput ; }
va	IDF	public static void e ( Exception e , String msg , Object ... args ) { System . err . println ( String . format ( "[EXCEPTION] " + msg , args ) ) ; e . printStackTrace ( ) ; }
va	KEY	public int getReference ( ) { return reference ; }
va	IDF	public boolean canUpgradePalace ( int x , int y , JavaCell palace , JavaCell [ ] [ ] map ) { System . out . println ( "MAP SIZE: " + getPalaceSize ( map [ x ] [ y ] ) ) ; System . out . println ( "PALACE SIZE: " + getPalaceSize ( map [ x ] [ y ] ) ) ; if ( getPalaceSize ( map [ x ] [ y ] ) < getPalaceSize ( palace ) ) { return true ; } return false ; }
va	KEY	public double getAlpha ( ) { return alpha ; }
va	KEY	public void refresh ( ) ;
va	IDF	public void initRandomLaby ( ) { String [ ] etatTab = { "locked" , "submerged" , "dark" } ; int ranX = ( int ) ( Math . random ( ) * ( 29 - 1 ) + 1 ) ; int ranY = ( int ) ( Math . random ( ) * ( 29 - 1 ) + 1 ) ; taille_x . setSelectedItem ( ranX ) ; taille_y . setSelectedIndex ( ranY ) ; String [ ] objetTab = { "key" , "empty" , "light" , "potion" , "spyglass" , "jacket" } ; for ( int i = 0 ; i < ( Math . random ( ) * ( ranX * ranY - 1 ) + 1 ) ; i ++ ) { revalidate ( ) ; repaint ( ) ; int ran_caseX = ( int ) ( Math . random ( ) * ( ranX ) ) ; int ran_caseY = ( int ) ( Math . random ( ) * ( ranY ) ) ; int ranEtat = ( int ) ( Math . random ( ) * etatTab . length ) ; int ranObjet = ( int ) ( Math . random ( ) * objetTab . length ) ; String etat = etatTab [ ranEtat ] ; String objet = objetTab [ ranObjet ] ; int random = ( int ) ( Math . random ( ) * ( 2 - 0 ) ) ; if ( random == 1 ) { tab [ ran_caseX ] [ ran_caseY ] . setEtat ( etat ) ; } else { tab [ ran_caseX ] [ ran_caseY ] . setObjet ( objet ) ; } } int ran_caseX = ( int ) ( Math . random ( ) * ( ranX ) ) ; int ran_caseY = ( int ) ( Math . random ( ) * ( ranY ) ) ; tab [ ran_caseX ] [ ran_caseY ] . definirEtat ( "exit" ) ; laby = new Labyrinthe ( tab ) ; EtablirLabyrinthe ( laby , content_pane ) ; panel_labyrinthe . revalidate ( ) ; panel_labyrinthe . repaint ( ) ; }
va	KEY	public void scheduleDisconnect ( long milis ) ;
va	IDF	@ Override public void moveTo ( float x0 , float y0 ) { out . moveTo ( x0 * sx + tx , y0 * sy + ty ) ; }
va	KEY	@ Override public Component setImage ( ) { return null ; }
va	IDF	public long createLinkCodePATH ( FeatureTemplate . Link temp , long x ) { return ( ( x << numLinkFeatBits ) | temp . ordinal ( ) ) << ( auglbNumBits * 2 ) ; }
va	IDF	public AntiGoal ( String threat , String asset , String target , String protection , String type , String layer ) { super ( ( "[" + threat + "  " + asset + "  " + target + "  " + protection + "]" ) . replaceAll ( "\\_" , " " ) , type , layer ) ; this . setThreat ( threat ) ; this . setAsset ( asset ) ; this . setTarget ( target ) ; this . setProtection ( protection ) ; }
va	IDF	public void changePass ( Usuario usuario ) throws SQLException { mySQLDB = new MYSQLDB ( ) ; String sql = "update usuario set Clave='" + usuario . getClave ( ) + "' where NombreUsuario='" + this . usuarioActual . getDescripcionUsuario ( ) + "'" ; mySQLDB . execute ( sql ) ; mySQLDB . closeExecute ( ) ; }
va	IDF	public String createSQL ( ) throws SQLException { String returnValue = "select " ; String where = "" ; boolean first = true ; for ( Field field : getXmlline ( ) . getFields ( ) ) { if ( ! field . isUse ( ) ) continue ; if ( first ) { first = false ; returnValue += field . getName ( ) ; } else { returnValue += ( "  " + field . getName ( ) ) ; } } returnValue += ( " from " + getSQLSchemaName ( ) + getXmlline ( ) . getTableName ( ) ) ; if ( first ) { LOGGER . severe ( "Error no field" ) ; return null ; } first = true ; for ( Field field : getXmlline ( ) . getFields ( ) ) { if ( ! field . isUse ( ) ) continue ; if ( getPrimaries ( ) . contains ( field . getName ( ) ) ) { if ( first ) { first = false ; where += ( field . getName ( ) + "=?" ) ; } else { where += ( " and " + field . getName ( ) + "=?" ) ; } } } if ( ! where . equals ( "" ) ) { returnValue += ( " where " + where ) ; } return returnValue ; }
va	KEY	protected void teardown ( ) { }
va	IDF	@ Override public String getMessage ( ) { return USR . getWAIT_AUTH ( ) ; }
va	KEY	public abstract int getSize ( ) ;
va	KEY	public InviteResDaoImpl ( ) { }
va	KEY	@ Override public int count ( ) { return 0 ; }
va	KEY	public RemoveGroupsResponse createRemoveGroupsResponse ( ) { return new RemoveGroupsResponse ( ) ; }
va	KEY	public abstract void attack ( Unit defender ) ;
va	KEY	public long getFileSize ( ) { return fileSize ; }
va	KEY	@ AfterClass public static void tearDownClass ( ) throws Exception { }
va	IDF	public boolean addToHighScores ( Player player ) { try { int i , j , temp = 0 ; String tempName ; String [ ] [ ] newHighScores = new String [ 11 ] [ 2 ] ; boolean isHighScore = false ; String [ ] [ ] highScores ; highScores = new String [ 10 ] [ 2 ] ; if ( isValidScore ( player . getScore ( ) ) ) { switch ( player . getDifficulty ( ) ) { case EASY : for ( int k = 0 ; k < easyHighScores . length ; k ++ ) { highScores [ k ] [ 0 ] = easyHighScores [ k ] [ 0 ] ; highScores [ k ] [ 1 ] = easyHighScores [ k ] [ 1 ] ; } break ; case MEDIUM : for ( int k = 0 ; k < mediumHighScores . length ; k ++ ) { highScores [ k ] [ 0 ] = mediumHighScores [ k ] [ 0 ] ; highScores [ k ] [ 1 ] = mediumHighScores [ k ] [ 1 ] ; } break ; case HARD : for ( int k = 0 ; k < hardHighScores . length ; k ++ ) { highScores [ k ] [ 0 ] = hardHighScores [ k ] [ 0 ] ; highScores [ k ] [ 1 ] = hardHighScores [ k ] [ 1 ] ; } break ; default : System . out . println ( "No difficulty" ) ; return false ; } isHighScore = isHighScore ( highScores , player . getScore ( ) ) ; if ( ! isHighScore ) { System . out . println ( "Not a high score." ) ; return false ; } for ( int k = 0 ; k < highScores . length ; k ++ ) { newHighScores [ k ] [ 0 ] = highScores [ k ] [ 0 ] ; newHighScores [ k ] [ 1 ] = highScores [ k ] [ 1 ] ; } newHighScores [ 10 ] [ 0 ] = player . getName ( ) ; newHighScores [ 10 ] [ 1 ] = Integer . toString ( player . getScore ( ) ) ; for ( j = 1 ; j < newHighScores . length ; j ++ ) { temp = parseInt ( newHighScores [ j ] [ 1 ] ) ; tempName = newHighScores [ j ] [ 0 ] ; for ( i = j - 1 ; ( i >= 0 ) && ( parseInt ( newHighScores [ i ] [ 1 ] ) < temp ) ; i -- ) { newHighScores [ i + 1 ] [ 1 ] = newHighScores [ i ] [ 1 ] ; newHighScores [ i + 1 ] [ 0 ] = newHighScores [ i ] [ 0 ] ; } newHighScores [ i + 1 ] [ 1 ] = Integer . toString ( temp ) ; newHighScores [ i + 1 ] [ 0 ] = tempName ; } switch ( player . getDifficulty ( ) ) { case EASY : for ( int k = 0 ; k < ( newHighScores . length - 1 ) ; k ++ ) { this . easyHighScores [ k ] [ 0 ] = newHighScores [ k ] [ 0 ] ; this . easyHighScores [ k ] [ 1 ] = newHighScores [ k ] [ 1 ] ; } return true ; case MEDIUM : for ( int k = 0 ; k < ( newHighScores . length - 1 ) ; k ++ ) { this . mediumHighScores [ k ] [ 0 ] = newHighScores [ k ] [ 0 ] ; this . mediumHighScores [ k ] [ 1 ] = newHighScores [ k ] [ 1 ] ; } return true ; case HARD : for ( int k = 0 ; k < ( newHighScores . length - 1 ) ; k ++ ) { this . hardHighScores [ k ] [ 0 ] = newHighScores [ k ] [ 0 ] ; this . hardHighScores [ k ] [ 1 ] = newHighScores [ k ] [ 1 ] ; } return true ; default : System . out . println ( "Invalid difficulty" ) ; return false ; } } else { System . out . println ( "Not a valid score." ) ; return false ; } } catch ( NumberFormatException numEx ) { System . out . println ( "Error adding score to High Scores.\n" + numEx . getMessage ( ) ) ; } return false ; }
va	IDF	private EstruturaPesquisa defineCamposPesquisa ( ) { EstruturaPesquisa estruturaPesquisa = new EstruturaPesquisa ( ) ; estruturaPesquisa . setCampo ( jCBOrdemPesq . getSelectedItem ( ) . toString ( ) ) ; estruturaPesquisa . setAscendente ( jRBAscendente . isSelected ( ) ) ; if ( jTFPesquisaPesq . getText ( ) . trim ( ) . length ( ) > 0 ) { estruturaPesquisa . setCondicao ( " WHERE " + jCBOrdemPesq . getSelectedItem ( ) . toString ( ) + " LIKE '%" + jTFPesquisaPesq . getText ( ) + "%'" ) ; } int qtdeRegCarregar = ( ( Integer ) qtdeACarregarPesq . getValue ( ) ) . intValue ( ) ; if ( qtdeRegCarregar > 0 ) { estruturaPesquisa . setLimite ( qtdeRegCarregar ) ; } return estruturaPesquisa ; }
va	IDF	public void delete ( MsgPk pk ) throws MsgDaoException { long t1 = System . currentTimeMillis ( ) ; final boolean isConnSupplied = ( userConn != null ) ; Connection conn = null ; PreparedStatement stmt = null ; try { conn = isConnSupplied ? userConn : ResourceManager . getConnection ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Executing " + SQL_DELETE + " with PK: " + pk ) ; } stmt = conn . prepareStatement ( SQL_DELETE ) ; if ( pk . getIdMsg ( ) != null ) { stmt . setInt ( 1 , pk . getIdMsg ( ) . intValue ( ) ) ; } else { stmt . setNull ( 1 , java . sql . Types . INTEGER ) ; } int rows = stmt . executeUpdate ( ) ; long t2 = System . currentTimeMillis ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( rows + " rows affected (" + ( t2 - t1 ) + " ms)" ) ; } } catch ( Exception _e ) { logger . error ( "Exception: " + _e . getMessage ( ) , _e ) ; throw new MsgDaoException ( "Exception: " + _e . getMessage ( ) , _e ) ; } finally { ResourceManager . close ( stmt ) ; if ( ! isConnSupplied ) { ResourceManager . close ( conn ) ; } } }
va	KEY	public int getIntY ( ) { return ( int ) this . getY ( ) ; }
va	IDF	public DebugValue ( String name , int value ) { this . name = name ; SmartDashboard . putNumber ( name , value ) ; }
va	IDF	public static Color getLifeColor ( double l ) { if ( l > 0.75f ) return GOOD_COL ; if ( l > 0.25f ) return OK_COL ; return BAD_COL ; }
va	KEY	public int getSize ( ) { return strings . size ( ) ; }
va	KEY	public int getId ( ) { return id ; }
va	KEY	public synchronized int xgetL5AssignedKeyCode ( ) { return l5 ; }
va	KEY	float getVAngle ( ) ;
va	KEY	private Point getLocation ( ) { return this . mouseLocation ; }
va	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButtonUbahActionPerformed ( evt ) ; }
va	KEY	public void setIsVrmlFile ( boolean isVrmlFile ) ;
va	KEY	public boolean accepterTransport ( ) { return false ; }
va	IDF	public Friendsh [ ] findByDynamicWhere ( String sql , Object [ ] sqlParams ) throws FriendshDaoException { final boolean isConnSupplied = ( userConn != null ) ; Connection conn = null ; PreparedStatement stmt = null ; ResultSet rs = null ; try { conn = isConnSupplied ? userConn : ResourceManager . getConnection ( ) ; final String SQL = SQL_SELECT + " WHERE " + sql ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Executing " + SQL ) ; } stmt = conn . prepareStatement ( SQL ) ; stmt . setMaxRows ( maxRows ) ; for ( int i = 0 ; sqlParams != null && i < sqlParams . length ; i ++ ) { stmt . setObject ( i + 1 , sqlParams [ i ] ) ; } rs = stmt . executeQuery ( ) ; return fetchMultiResults ( rs ) ; } catch ( Exception _e ) { logger . error ( "Exception: " + _e . getMessage ( ) , _e ) ; throw new FriendshDaoException ( "Exception: " + _e . getMessage ( ) , _e ) ; } finally { ResourceManager . close ( rs ) ; ResourceManager . close ( stmt ) ; if ( ! isConnSupplied ) { ResourceManager . close ( conn ) ; } } }
va	KEY	public synchronized int xgetR2InitialDelay ( ) { return r2ID ; }
va	IDF	private static ByteArrayInputStream getAudioStream ( final AudioInputStream stream ) throws IOException { final ByteArrayOutputStream baos = new ByteArrayOutputStream ( 290 * 1024 ) ; final byte [ ] buf = new byte [ 16384 ] ; int count ; while ( ( count = stream . read ( buf ) ) != - 1 ) { baos . write ( buf , 0 , count ) ; } ; return new ByteArrayInputStream ( baos . toByteArray ( ) ) ; }
va	KEY	public static Test suite ( ) { return new TestSuite ( AppTest . class ) ; }
va	IDF	public void setTitle ( String value ) { this . title = value ; }
va	IDF	private void initMenu ( ) { JPanel titlePanel = new JPanel ( ) ; this . add ( titlePanel ) ; JLabel title = new JLabel ( "Card Counting Training" ) ; titlePanel . add ( title ) ; JPanel inputPanel = new JPanel ( ) ; this . add ( inputPanel ) ; input = new JTextField ( 2 ) ; input . setText ( "6" ) ; inputPanel . add ( input ) ; JPanel startPanel = new JPanel ( ) ; this . add ( startPanel ) ; JButton startBtn = new JButton ( "START" ) ; getRootPane ( ) . setDefaultButton ( startBtn ) ; startPanel . add ( startBtn ) ; startBtn . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { try { game . runGame ( byte . parseByte ( input . getText ( ) ) ) ; } catch ( Exception ex ) { game . runGame ( ( byte ) 6 ) ; } finally { initGameForm ( ) ; } } } ) ; this . pack ( ) ; setInTheMiddle ( ) ; }
va	IDF	public BufferedImage getHoldBackgroundImage ( Type type , Orientation orientation , Timing timing ) ;
va	IDF	public void endTabbing ( ) { players . get ( indexOfCurrentPlayer ) . cancelTabbing ( ) ; }
va	IDF	@ Override public Node poll ( ) { Node o = super . poll ( ) ; hash . remove ( o . state ) ; return o ; }
va	IDF	@ Override public boolean saveProfile ( ) { return ProfileManager . getInstance ( ) . saveProfile ( ) ; }
va	IDF	@ Override public Move getMove ( DraughtsState ds ) { try { List < Move > moves = ds . getMoves ( ) ; NodeLVL1 node = new NodeLVL1 ( ds . clone ( ) ) ; return rootAlphaBeta ( node , - 10000 , 10000 , 1 , this . maxDepth ) ; } catch ( Exception ex ) { Logger . getLogger ( PlayerLVL1 . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; } return null ; }
va	IDF	public SearchRequestBuilder withMarket ( String market ) ;
va	KEY	void pressMoveRight ( ) ;
va	KEY	private static String newString ( char ch , int size ) { return new String ( new char [ size ] ) . replace (  , ch ) ; }
va	KEY	public long getSeminarId ( ) { return seminarId ; }
va	KEY	@ Override public void setSelectionIntoScenarioStep ( ) { }
va	IDF	public int getStartOfRoundActionID ( ) { int index = this . indexOfCurrentPlayer ; Action [ ] actions = actionHistory . toArray ( new Action [ 0 ] ) ; for ( int x = actions . length - 1 ; x >= 0 ; -- x ) { if ( actions [ x ] instanceof EndTurnAction ) { -- index ; if ( index < 0 ) return x ; } } return 0 ; }
va	KEY	public void close ( ) throws SQLException , IOException { }
va	IDF	private void addMissingReferencesToRegistry ( ) { class originalObjectClass = originalObject . getClass ( ) ; Method [ ] methods = originalObjectClass . getDeclaredMethods ( ) ; int hashValue = 0 ; for ( Method method : methods ) { if ( method . getParameterTypes ( ) . length == 0 ) { if ( method . isAnnotationPresent ( EFReference . class ) ) { try { Registry . getInstance ( ) . add ( ( EFPersistable ) ( method . invoke ( originalObject , null ) ) ) ; } catch ( EntityAlreadyAddedException ex ) { } catch ( Exception ex ) { throw new RuntimeException ( ex ) ; } } } } }
va	IDF	public AcaoParaTras ( Expressao expressao ) { super ( expressao , operador ) ; }
va	IDF	protected abstract PlayerGraphic newPlayer ( Player player ) ;
va	KEY	public int getSize ( ) { return size ; }
va	IDF	public DanceSolo ( GameMode playType ) { super ( playType ) ; }
va	IDF	public CEvalItem ( ) { evalid = "" ; seriescd = CAppConsts . TagNoValue ; resultcd = "" ; doseord = 0 ; acceldate = new Date ( 0 ) ; recomdate = new Date ( 0 ) ; overduedate = new Date ( 0 ) ; dtfmt = new SimpleDateFormat ( CAppConsts . DateFmtStr ) ; ymdfmt = new SimpleDateFormat ( CAppConsts . DateFmtYmd ) ; }
va	KEY	public ConstantNode ( ) { }
va	KEY	public double [ ] getDiffuse ( ) { return diffuse ; }
va	KEY	public void setNoData ( boolean nodata ) { this . NODATA = nodata ; }
va	KEY	public int getId_category ( ) { return id_category ; }
va	KEY	public void prev ( ) { }
va	IDF	public PaymentCheck ( Main main ) { initComponents ( ) ; this . main = main ; this . setVisible ( false ) ; }
va	IDF	public HashCachingMap ( Map < K , V > map ) { this . map = map ; }
va	IDF	@ Override public void reset ( ) { try { output . setOutput ( new ColumnMatrix ( output . getDim ( ) ) ) ; } catch ( OrderException e ) { e . printStackTrace ( ) ; } }
va	KEY	protected void markDirty ( ) { dirtyFlag = true ; }
va	KEY	public ResponseParser ( ) { }
va	KEY	@ Test public void testBasis ( ) { }
va	KEY	public int getSize ( ) { return strings . length ; }
va	IDF	public void animation ( ) { if ( hurt ) { normalFrames = 1 ; attack = false ; movement = false ; attackDuration = false ; abilityH = false ; abilityHDuration = false ; abilityR = false ; abilityRDuration = false ; abilityT = false ; abilityTDuration = false ; } if ( ! movementDirection ) { if ( attack ) { if ( attackFrames > maxAttackFrames ) { attackFrames = 4 ; Fireball ball = new Fireball ( movementDirection , character , x , y - 14 ) ; getWorld ( ) . addObject ( ball , x , y - 14 ) ; attack = false ; } else { mage = new GreenfootImage ( "Mage//mageAttack//mageAttack" + attackFrames / 4 + ".png" ) ; mage . mirrorHorizontally ( ) ; } attackFrames ++ ; } else if ( abilityH ) { if ( abilityHFrames > maxAbilityHFrames ) { abilityHFrames = 5 ; NuclearCharge charge = new NuclearCharge ( movementDirection , character , x , y - 50 ) ; getWorld ( ) . addObject ( charge , x , y - 50 ) ; abilityH = false ; moveUp = true ; } else { if ( abilityHFrames == 35 ) { Greenfoot . playSound ( "Sound//Mage//mageAbilityH.mp3" ) ; } mage = new GreenfootImage ( "Mage//MageAbilityH//mageAbilityH" + abilityHFrames / 5 + ".png" ) ; mage . mirrorHorizontally ( ) ; y = y - 3 ; } abilityHFrames ++ ; } else if ( abilityR ) { if ( abilityRFrames == 70 ) { FinalSpark spark = new FinalSpark ( movementDirection , character , x , y - 50 ) ; getWorld ( ) . addObject ( spark , x - 600 , y ) ; } if ( abilityRFrames > maxAbilityRFrames ) { abilityRFrames = 5 ; abilityR = false ; abilityRDuration = false ; } else { mage = new GreenfootImage ( "Mage//MageAbilityR//MageAbilityR" + abilityRFrames / 5 + ".png" ) ; mage . mirrorHorizontally ( ) ; } abilityRFrames ++ ; } else if ( abilityT ) { if ( abilityTFrames == 57 ) { getWorld ( ) . addObject ( new Meteor ( character , movementDirection ) , x - 50 + ranGen . nextInt ( 100 ) , y - 1000 ) ; } if ( abilityTFrames > maxAbilityTFrames ) { abilityTFrames = 1 ; abilityT = false ; abilityTDuration = false ; } else { mage = new GreenfootImage ( "Mage//MageAbilityUlt//mageAbilityUlt00" + abilityTFrames + ".png" ) ; mage . mirrorHorizontally ( ) ; } abilityTFrames ++ ; } else if ( movement ) { if ( moveFrames > maxMoveFrames ) { moveFrames = 1 ; } else { mage = new GreenfootImage ( "Mage//mageMove//mageMove" + ( ( moveFrames / 4 ) + 1 ) + ".png" ) ; mage . mirrorHorizontally ( ) ; } moveFrames ++ ; movement = false ; } else if ( ! movement ) { if ( normalFrames > maxNormalFrames ) { normalFrames = 1 ; } else if ( frameCount > 10 ) { frameCount = 0 ; } else if ( frameCount == 10 ) { normalFrames ++ ; } else { mage = new GreenfootImage ( "Mage//mageNormal//mageNormal" + normalFrames + ".png" ) ; mage . mirrorHorizontally ( ) ; } movement = false ; } frameCount ++ ; } else if ( movementDirection ) { if ( attack ) { if ( attackFrames > maxAttackFrames ) { attackFrames = 4 ; Fireball ball = new Fireball ( movementDirection , character , x , y - 14 ) ; getWorld ( ) . addObject ( ball , x , y - 14 ) ; attack = false ; } else { mage = new GreenfootImage ( "Mage//mageAttack//mageAttack" + attackFrames / 4 + ".png" ) ; } attackFrames ++ ; } else if ( abilityH ) { if ( abilityHFrames > maxAbilityHFrames ) { abilityHFrames = 5 ; NuclearCharge charge = new NuclearCharge ( movementDirection , character , x , y ) ; getWorld ( ) . addObject ( charge , x , y - 50 ) ; abilityH = false ; moveUp = true ; } else { mage = new GreenfootImage ( "Mage//MageAbilityH//mageAbilityH" + abilityHFrames / 5 + ".png" ) ; y = y - 3 ; } abilityHFrames ++ ; } else if ( abilityR ) { if ( abilityRFrames == 70 ) { FinalSpark spark = new FinalSpark ( movementDirection , character , x , y - 50 ) ; getWorld ( ) . addObject ( spark , x + 600 , y ) ; } else if ( abilityRFrames > maxAbilityRFrames ) { abilityRFrames = 5 ; abilityR = false ; abilityRDuration = false ; } else { mage = new GreenfootImage ( "Mage//MageAbilityR//MageAbilityR" + abilityRFrames / 5 + ".png" ) ; } abilityRFrames ++ ; } else if ( abilityT ) { if ( abilityTFrames < 57 && abilityTFrames > 30 ) { getWorld ( ) . addObject ( new Meteor ( character , movementDirection ) , ( x - 50 ) + ranGen . nextInt ( 100 ) , y - 1000 ) ; } if ( abilityTFrames > maxAbilityTFrames ) { abilityTFrames = 1 ; abilityT = false ; abilityTDuration = false ; } else { mage = new GreenfootImage ( "Mage//MageAbilityUlt//mageAbilityUlt00" + abilityTFrames + ".png" ) ; } abilityTFrames ++ ; } else if ( movement ) { if ( moveFrames > maxMoveFrames ) { moveFrames = 1 ; } else { mage = new GreenfootImage ( "Mage//mageMove//mageMove" + ( ( moveFrames / 4 ) + 1 ) + ".png" ) ; } moveFrames ++ ; movement = false ; } else if ( ! movement ) { if ( normalFrames > maxNormalFrames ) { normalFrames = 1 ; } else if ( frameCount > 10 ) { frameCount = 0 ; } else if ( frameCount == 10 ) { normalFrames ++ ; } else { mage = new GreenfootImage ( "Mage//mageNormal//mageNormal" + normalFrames + ".png" ) ; } movement = false ; } frameCount ++ ; } }
va	IDF	public void setFlashFormat ( Integer flashFormat ) { this . flashFormat = flashFormat ; }
va	IDF	@ Override public void onReceive ( Entity host ) { host . move ( where ) ; }
va	KEY	public int getState ( ) { return state ; }
va	KEY	public double characterEnergy ( ) { if ( energy > 0.0 ) { return energy / energyMax ; } else { return 0.01 ; } }
va	KEY	public PlacementView ( ) { super ( ) ; this . controleur = new PlacementController ( this ) ; }
va	KEY	public Dough createDough ( ) { return new ThinCrustDough ( ) ; }
va	KEY	public void setPintado ( boolean pintado ) { this . pintado = pintado ; }
va	KEY	public double getCost ( ) { return this . cost ; }
va	KEY	public boolean isOk ( ) { return ok ; }
va	IDF	private String stripTag ( String part ) { return part . substring ( part . indexOf ( : ) + 1 , part . length ( ) - 1 ) . trim ( ) ; }
va	IDF	protected AffineTransform getTransform ( ) { return AffineTransform . getTranslateInstance ( getWidth ( ) / 2.0 , getHeight ( ) / 2.0 ) ; }
va	IDF	private void loadPowerUpSprites ( ) { Animation anim = new Animation ( ) ; anim . addFrame ( getSmallerImage ( loadImage ( "heart1.png" ) , .5f ) , 150 ) ; anim . addFrame ( getSmallerImage ( loadImage ( "heart2.png" ) , .5f ) , 150 ) ; anim . addFrame ( getSmallerImage ( loadImage ( "heart3.png" ) , .5f ) , 150 ) ; anim . addFrame ( getSmallerImage ( loadImage ( "heart2.png" ) , .5f ) , 150 ) ; goalSprite = new PowerUp . Goal ( anim ) ; anim = new Animation ( ) ; anim . addFrame ( getSmallerImage ( loadImage ( "star1.png" ) , .5f ) , 100 ) ; anim . addFrame ( getSmallerImage ( loadImage ( "star2.png" ) , .5f ) , 100 ) ; anim . addFrame ( getSmallerImage ( loadImage ( "star3.png" ) , .5f ) , 100 ) ; anim . addFrame ( getSmallerImage ( loadImage ( "star4.png" ) , .5f ) , 100 ) ; coinSprite = new PowerUp . * ( anim ) ; anim = new Animation ( ) ; anim . addFrame ( getSmallerImage ( loadImage ( "music1.png" ) , .5f ) , 150 ) ; anim . addFrame ( getSmallerImage ( loadImage ( "music2.png" ) , .5f ) , 150 ) ; anim . addFrame ( getSmallerImage ( loadImage ( "music3.png" ) , .5f ) , 150 ) ; anim . addFrame ( getSmallerImage ( loadImage ( "music2.png" ) , .5f ) , 150 ) ; musicSprite = new PowerUp . Music ( anim ) ; }
va	IDF	protected void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { processRequest ( request , response ) ; }
va	IDF	@ Override public void stopped ( MediaPlayer arg0 ) { }
va	KEY	int nextAtomId ( ) { return nextAtomId ++ ; }
va	KEY	public static final Color getPlayerColor ( int player ) { switch ( player ) { case 1 : return RED ; case 2 : return BLUE ; case 3 : return TEAL ; case 4 : return PURPLE ; case 5 : return YELLOW ; case 6 : return ORANGE ; case 7 : return GREEN ; case 8 : return PINK ; case 9 : return GRAY ; case 10 : return LIGHT_BLUE ; case 11 : return DARK_GREEN ; case 12 : return BROWN ; } return null ; }
va	KEY	public String toString ( ) { if ( this . equals ( LivingServicesType . APDWestKing ) ) { return "Alliance of People with disAbilities - West King County" ; } else if ( this . equals ( LivingServicesType . APDEastKing ) ) { return "Alliance of People with disAbilities - East King County" ; } else { return "Disabilities Law Project" ; } }
va	KEY	private int getCardSpacing ( int numCards ) { if ( numCards == 0 ) return 0 ; if ( isEvenLayout ) { if ( numCards < 8 ) { return 100 ; } return getPreferredWidth ( ) / numCards ; } else { if ( numCards < 6 ) { return 105 ; } return getPreferredHeight ( ) / numCards ; } }
va	IDF	public void init ( ) { super . init ( ) ; displayPane . setCursor ( getPredefinedCursor ( CROSSHAIR_CURSOR ) ) ; }
va	IDF	private boolean isMinHeap ( int k ) { if ( k > heapSize ) return true ; int left = 2 * k , right = 2 * k + 1 ; if ( left <= heapSize && greater ( k , left ) ) return false ; if ( right <= heapSize && greater ( k , right ) ) return false ; return isMinHeap ( left ) && isMinHeap ( right ) ; }
va	IDF	public void setBook0 ( Book book0 ) { this . book0 = book0 ; }
va	IDF	public AbstractView ( Logger logger ) { this . logger = logger ; }
va	KEY	@ Override public boolean equals ( Object other ) { if ( other == null ) return false ; if ( _name == null ) { if ( ! ( ( ( Playlist ) other ) . _name == null ) ) return false ; } else if ( ! _name . equals ( ( ( Playlist ) other ) . _name ) ) return false ; return true ; }
va	IDF	public static void main ( String [ ] args ) { List < AcaoAposGerarNota > listaAcoes = new ArrayList < AcaoAposGerarNota > ( ) ; listaAcoes . add ( new EnviadorDeEmail ( ) ) ; listaAcoes . add ( new NotaFiscalDao ( ) ) ; listaAcoes . add ( new EnviadorDeSMS ( ) ) ; listaAcoes . add ( new Impressora ( ) ) ; listaAcoes . add ( new Multiplicador ( 3 ) ) ; NotaFiscalBuilder builder = new NotaFiscalBuilder ( listaAcoes ) ; NotaFiscal nf = builder . paraEmpresa ( "razao" ) . comCnpj ( "12" ) . comItem ( new ItemDaNota ( "item1" , 200 ) ) . comObservacoes ( "obs" ) . naData ( Calendar . getInstance ( ) ) . constroi ( ) ; System . out . println ( nf . getValorBruto ( ) ) ; }
va	IDF	protected boolean setSourceThreeStar ( ) { String u = "http://www.cl.cam.ac.uk/teaching/current/ProgJava/competition.txt" ; return setSourceWeb ( u ) ; }
va	KEY	@ Override public void call ( int i ) { }
va	IDF	public static Profile findWhereIdProfileEquals ( Integer idProfile ) { try { IProfileDao _dao = getProfileDao ( ) ; Profile _result [ ] = _dao . findWhereIdProfileEquals ( idProfile ) ; for ( int i = 0 ; i < _result . length ; i ++ ) { return _result [ i ] ; } } catch ( Exception _e ) { _e . printStackTrace ( ) ; } return null ; }
va	IDF	private void createTemp2 ( ) { try { _builder = new ProcessBuilder ( "/bin/bash" , "-c" , "avconv -i '" + _location + "' temp2.mpg" ) ; _builder . directory ( new File ( System . getProperty ( "user.home" ) + "/VAMIX" ) ) ; _builder = _builder . redirectErrorStream ( true ) ; _process = _builder . start ( ) ; _result = _process . waitFor ( ) ; _process . destroy ( ) ; } catch ( IOException | InterruptedException e ) { e . printStackTrace ( ) ; } }
va	IDF	public static void main ( String [ ] args ) { boolean [ ] primes = new boolean [ 1000000 ] ; for ( int i = 2 ; i < primes . length ; i ++ ) primes [ i ] = true ; for ( int i = 2 ; i < primes . length ; i ++ ) if ( primes [ i ] ) for ( int j = 2 ; i * j < primes . length ; j ++ ) primes [ i * j ] = false ; ArrayList < long > primeList = new ArrayList < long > ( ) ; for ( int i = 0 ; i < primes . length ; i ++ ) if ( primes [ i ] ) primeList . add ( ( long ) i ) ; ArrayList < Integer > remainingPositions = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < PRIME_LENGTH ; i ++ ) remainingPositions . add ( i ) ; long total = 0 ; for ( int i = 0 ; i < 10 ; i ++ ) { long sum = 0 ; int numOtherDigits = 0 ; while ( sum == 0 ) { ArrayList < long > possiblePrimes = new ArrayList < long > ( ) ; HashSet < HashSet < Integer >> positionsList = positionsList ( numOtherDigits , remainingPositions ) ; ArrayList < ArrayList < Integer >> digitsList = randomDigits ( numOtherDigits , i ) ; Iterator < HashSet < Integer >> iter = positionsList . iterator ( ) ; while ( iter . hasNext ( ) ) { HashSet < Integer > currentPositions = iter . next ( ) ; for ( int j = 0 ; j < digitsList . size ( ) ; j ++ ) { ArrayList < Integer > currentDigits = digitsList . get ( j ) ; String current = "" ; int a = 0 ; for ( int k = 0 ; k < PRIME_LENGTH ; k ++ ) { if ( ! currentPositions . contains ( k ) ) current += i + "" ; else { current += currentDigits . get ( a ) ; a ++ ; } } possiblePrimes . add ( long . parseLong ( current ) ) ; } } for ( int j = 0 ; j < possiblePrimes . size ( ) ; j ++ ) if ( isPrime ( possiblePrimes . get ( j ) , primeList ) && ( possiblePrimes . get ( j ) + "" ) . length ( ) == PRIME_LENGTH ) sum += possiblePrimes . get ( j ) ; numOtherDigits ++ ; } total += sum ; } System . out . println ( total ) ; }
va	IDF	public void setMessage ( String message ) { this . message = message ; }
va	IDF	@ Override public String toString ( ) { return "VAR " + id + " = " + expressao ; }
va	KEY	abstract public void mux ( String s ) ;
va	KEY	public Bouton getBoutonAuto ( ) { return this . bouton_auto ; }
va	KEY	public abstract int size ( ) ;
va	KEY	private boolean isInMapArea ( int x , int y ) { if ( super . drawAreaLayers . size ( ) < 1 ) return false ; if ( super . drawAreaLayers . get ( 0 ) == null ) return false ; if ( x < 0 ) return false ; else if ( x >= super . drawAreaLayers . get ( 0 ) . getWidth ( ) ) return false ; else if ( y < 0 ) return false ; else if ( y >= super . drawAreaLayers . get ( 0 ) . getHeight ( ) ) return false ; else { return true ; } }
va	IDF	@ SuppressWarnings ( "unchecked" ) private void initComponents ( ) { jScrollPane1 = new javax . swing . JScrollPane ( ) ; jList1 = new javax . swing . JList ( ) ; jButton1 = new javax . swing . JButton ( ) ; jButton2 = new javax . swing . JButton ( ) ; jButton3 = new javax . swing . JButton ( ) ; jButton4 = new javax . swing . JButton ( ) ; setDefaultCloseOperation ( javax . swing . WindowConstants . DO_NOTHING_ON_CLOSE ) ; jScrollPane1 . setViewportView ( jList1 ) ; jButton1 . setText ( "A\u00F1adir" ) ; jButton2 . setText ( "Quitar" ) ; jButton3 . setText ( "Atr\u00E1s" ) ; jButton3 . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButton3ActionPerformed ( evt ) ; } } ) ; jButton4 . setText ( "Modificar" ) ; javax . swing . GroupLayout layout = new javax . swing . GroupLayout ( getContentPane ( ) ) ; getContentPane ( ) . setLayout ( layout ) ; layout . setHorizontalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addContainerGap ( ) . addComponent ( jScrollPane1 , javax . swing . GroupLayout . PREFERRED_SIZE , 290 , javax . swing . GroupLayout . PREFERRED_SIZE ) . addGap ( 18 , 18 , 18 ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING , false ) . addComponent ( jButton4 , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addComponent ( jButton3 , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addComponent ( jButton2 , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addComponent ( jButton1 , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) ) . addContainerGap ( javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) ) ) ; layout . setVerticalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( javax . swing . GroupLayout . Alignment . TRAILING , layout . createSequentialGroup ( ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . TRAILING ) . addGroup ( layout . createSequentialGroup ( ) . addGap ( 60 , 60 , 60 ) . addComponent ( jButton1 ) . addGap ( 26 , 26 , 26 ) . addComponent ( jButton2 ) . addGap ( 32 , 32 , 32 ) . addComponent ( jButton4 ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED , 79 , short . MAX_VALUE ) . addComponent ( jButton3 ) ) . addGroup ( layout . createSequentialGroup ( ) . addContainerGap ( ) . addComponent ( jScrollPane1 ) ) ) . addContainerGap ( ) ) ) ; pack ( ) ; }
va	IDF	public void setEnd ( Point end ) { this . end = end ; }
va	IDF	@ Override public Component getTableCellEditorComponent ( JTable table , Object value , boolean isSelected , int rowIndex , int vColIndex ) { this . component . setSelectedItem ( value ) ; return this . component ; }
va	KEY	public synchronized void putAll ( Map < ? extends K , ? extends V > arg0 ) { throw new UnsupportedOperationException ( "Not implemented yet." ) ; }
va	IDF	public LongestForwardDistance ( Iterable < K > data ) { this . distances = new HashMap < K , List < long >> ( ) ; evicted = new HashSet < K > ( ) ; train ( data ) ; }
va	IDF	protected String readParameter ( MultipartStreamHandler aStream , String aBoundary ) throws IOException { StringBuilder sbuf = new StringBuilder ( 32768 ) ; String line ; while ( ( line = aStream . readLine ( ) ) != null ) { if ( line . startsWith ( aBoundary ) ) break ; sbuf . append ( line + "\r\n" ) ; } if ( sbuf . length ( ) == 0 ) return null ; sbuf . setLength ( sbuf . length ( ) - 2 ) ; return sbuf . toString ( ) ; }
va	KEY	public LoseScene ( ) { }
va	KEY	public double getPower ( ) { return power ; }
va	IDF	@ Override public int build ( MyLevel level ) { return buildingTool . build ( start , lenght , floor , level ) ; }
va	KEY	public double getTriggerAxis ( ) { return getRawAxis ( AXIS_SHOULDER ) ; }
va	IDF	public LessonPlanDataAccessException ( String message ) { super ( message ) ; }
va	KEY	public void setLatinoOrHispanic ( boolean latinoOrHispanic ) { this . latinoOrHispanic = latinoOrHispanic ; }
va	KEY	abstract void brew ( ) ;
va	KEY	protected boolean examine ( ) { System . out . println ( "A large man with a mustache  and " + "wearing a uniform. You should make him angry." ) ; return true ; }
va	IDF	@ Override public void exitRule ( ParseTreeListener listener ) { if ( listener instanceof EnquantoListener ) ( ( EnquantoListener ) listener ) . exitBooleano ( this ) ; }
va	IDF	public Builder ( int id , String firstname , String lastname ) { this . id = id ; this . firstname = firstname ; this . lastname = lastname ; }
va	IDF	public boolean equals ( Object o ) { Personnage p = ( Personnage ) o ; return ( ( this . nom . equals ( p . getNom ( ) ) ) ) ; }
va	IDF	public static void sort ( int [ ] a ) { for ( int i = 0 ; i < a . length - 1 ; i ++ ) { for ( int j = a . length - 1 ; j > i ; j -- ) { if ( a [ j ] < a [ j - 1 ] ) exchange ( a , j , j - 1 ) ; } } }
va	KEY	public int getHeight ( ) { return height ; }
va	KEY	public void setSeminarId ( long seminarId ) { this . seminarId = seminarId ; }
va	IDF	@ Override public void render ( GameContainer gc , StateBasedGame sbg , Graphics g ) { if ( ! activated ) animation . draw ( body . getX ( ) , body . getY ( ) + body . getHeight ( ) - animation . getHeight ( ) ) ; }
va	KEY	@ Override public float getMinimumAAPenSize ( ) { return MIN_PEN_SIZE ; }
va	IDF	public APDTabContainer ( ) { this . intakePanel = new IntakePanel ( ) ; this . eligibilityPanel = new EligibilityPanel ( ) ; this . addTab ( this . intakePanel . getName ( ) , intakePanel ) ; this . addTab ( this . eligibilityPanel . getName ( ) , eligibilityPanel ) ; }
va	IDF	public void setAuthor ( String author ) { this . author = author ; }
va	IDF	@ Override public void initialize ( int n , int m ) { this . n = n ; this . m = m ; }
va	KEY	public void setAscendente ( boolean ascendente ) { this . ascendente = ascendente ; }
va	KEY	public void setOrderID ( int orderID ) { this . orderID = orderID ; }
va	IDF	public Holdable removeItem ( Character itemID , int count ) throws InvalidKeyException { Holdable item = getInventory ( ) . removeStackedItem ( itemID , count ) ; return item ; }
va	IDF	protected void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { HttpSession session = request . getSession ( true ) ; TrasporteurBean pojo = ( TrasporteurBean ) session . getAttribute ( "user" ) ; if ( pojo == null ) { request . setAttribute ( "error" , MappedErrors . NOT_AUTORIZED ) ; this . getServletContext ( ) . getRequestDispatcher ( MappedJsp . ERROR ) . forward ( request , response ) ; } else { VoyageBean bean = ( VoyageBean ) session . getAttribute ( "voyagecache" ) ; String numtrain = request . getParameter ( "option" ) . toString ( ) ; bean . setNumeroTrain ( numtrain ) ; ArrayList < Train > trains = ( ArrayList < Train > ) session . getAttribute ( "listeTrains" ) ; Train t = new Train ( ) ; for ( int i = 0 ; i < trains . size ( ) ; i ++ ) { if ( trains . get ( i ) . getNumero ( ) . equals ( numtrain ) ) { t = trains . get ( i ) ; } } bean . setDate ( t . getDateDepart ( ) ) ; VoyageDAO dao = new VoyageDAO ( ) ; bean . setHeureDepart ( t . getDateDepart ( ) . substring ( 11 , 16 ) ) ; bean . setHeureArrivee ( "0" ) ; dao . insert ( bean ) ; } response . sendRedirect ( MappedJsp . LISTE_VOYAGES ) ; }
va	KEY	public int minimum ( int a , int b ) ;
va	KEY	public OperatingEnvironment_ withId ( long id ) { this . id = id ; return this ; }
va	IDF	public static void quitGame ( ) { GameRobot . wait ( GAME_EXIT_WAIT_TIME ) ; System . exit ( 0 ) ; }
va	KEY	public static void attackOver ( ) { attackDuration = false ; }
va	KEY	private static boolean isDivisible ( final int number , final int divisor ) { final int result = number / divisor ; return ( number == ( result * divisor ) ) ; }
va	IDF	public static double dist ( double x , double y , double x2 , double y2 ) { return Math . sqrt ( Math . pow ( x - x2 , 2 ) + Math . pow ( y - y2 , 2 ) ) ; }
va	KEY	public void setLimitedEnglish ( boolean limitedEnglish ) { this . limitedEnglish = limitedEnglish ; }
va	IDF	public void reset ( ) { this . threeSpaceTiles = 56 ; this . irrigationTiles = 10 ; this . palaceTiles = new int [ ] { 6 , 7 , 8 , 9 , 10 } ; palaceCardDeck = new LinkedList < PalaceCard > ( ) ; for ( int i = 0 ; i < 5 ; i ++ ) { palaceCardDeck . push ( new PalaceCard ( 1 , true ) ) ; palaceCardDeck . push ( new PalaceCard ( 2 , true ) ) ; palaceCardDeck . push ( new PalaceCard ( 3 , true ) ) ; palaceCardDeck . push ( new PalaceCard ( 4 , true ) ) ; palaceCardDeck . push ( new PalaceCard ( 5 , true ) ) ; palaceCardDeck . push ( new PalaceCard ( 6 , true ) ) ; } Collections . shuffle ( palaceCardDeck ) ; this . festivalCard = palaceCardDeck . pop ( ) ; this . discardedCardDeck = new LinkedList < PalaceCard > ( ) ; }
va	KEY	@ Override public JLabel getLabel ( ) { return null ; }
va	KEY	public static DAOFactory getFactory ( int type ) { switch ( type ) { case MYSQL : return new MySQLDAOFactory ( ) ; case ORACLE : default : return null ; } }
va	IDF	@ Override public void sendMessage ( Message < ClientProtocolParameters > message ) { if ( sessionKey == null && ! ( message instanceof ClientAuthenticationMessage ) ) { onMessageNotSent ( message ) ; return ; } StringBuilder xmlBuilder = new StringBuilder ( ) ; try { message . toXml ( xmlBuilder , 0 ) ; messageHistory . put ( packetManager . sendPacket ( xmlBuilder . toString ( ) ) , message ) ; } catch ( Exception e ) { onMessageNotSent ( message ) ; } }
va	IDF	public Broker ( Mediator mediator , String name , String message ) { super ( mediator , name , message ) ; }
va	IDF	public Msg [ ] findByMsgStatus ( String statusMsg ) throws MsgDaoException ;
va	KEY	public void setY ( int y ) { this . y = y ; }
va	KEY	public boolean isExitMM ( ) { return exitMM ; }
va	IDF	private static Node createTree3 ( ) { Node root = new Node ( 3 ) ; root . left = new Node ( 4 ) ; root . right = new Node ( 5 ) ; root . left . left = new Node ( 1 ) ; root . left . right = new Node ( 2 ) ; root . left . right . left = new Node ( 0 ) ; return root ; }
va	IDF	@ SuppressWarnings ( "unchecked" ) public List < Model > query ( Map < String , Object > params , String sqlId ) throws DBException { try { return this . getSqlMapClientTemplate ( ) . queryForList ( sqlId , params ) ; } catch ( DataAccessException e ) { throw new DBException ( e . getMessage ( ) ) ; } }
va	IDF	public void remove ( VcsCommand . Listener listener ) { listeners . remove ( listener ) ; }
va	KEY	public static SharedGameData getInstance ( ) { return instance ; }
va	KEY	int rowId ( ) ;
va	IDF	public static void drawDiamond ( int height , char c ) { for ( int h = 0 ; h < height ; h ++ ) { for ( int w = 0 ; w < height ; w ++ ) { if ( h == height / 2 ) System . out . print ( A ) ; else { int distantFromHalf = Math . abs ( height / 2 - h ) ; if ( w > distantFromHalf - 1 && w < height - distantFromHalf ) System . out . print ( A ) ; else System . out . print (   ) ; } } System . out . println ( ) ; } }
va	IDF	public Employee ( String name , int id ) { super ( name ) ; this . id = id ; }
va	IDF	public StairTile ( Map mapA , Map mapB , Point pA , Point pB , boolean imgUp ) { super ( true ) ; this . mapA = mapA ; this . mapB = mapB ; this . pA = pA ; this . pB = pB ; this . imgUp = imgUp ; }
va	KEY	void move ( int x , int y ) { }
va	KEY	public void rollbackTrans ( ) throws Exception ;
va	IDF	public boolean isUsed ( ) { if ( reportTrigger != null ) { used |= reportTrigger . isUsed ( ) ; } used |= reportLine . isUsed ( ) ; return used ; }
va	IDF	public void keyTyped ( java . awt . event . KeyEvent evt ) { txtEmailKeyTyped ( evt ) ; }
va	KEY	public double getDPadX ( ) { return getRawAxis ( AXIS_DPAD ) ; }
va	KEY	private static boolean checkKnownPrimeDivisions ( long n , long start ) { for ( int i = 0 ; i < np ; i ++ ) { final long p = primes [ i ] ; if ( ! isDivisible ( n , p ) ) { continue ; } else { return false ; } } return true ; }
va	KEY	public void setIdevent ( int idevent ) { this . idevent = idevent ; }
va	IDF	public List < Model > query ( Model entity , String sqlId ) throws DBException ;
va	KEY	public int getIdplanta ( ) { return idplanta ; }
va	KEY	public void setFileSize ( int fileSize ) { this . fileSize = fileSize ; }
va	KEY	public void setId_Entrega ( int Id_Entrega ) { this . Id_Entrega = Id_Entrega ; }
va	KEY	public int size ( ) { return this . itens . size ( ) ; }
va	KEY	public int getID ( ) { return id ; }
va	IDF	public Node ( Point p ) { this . p = p ; }
va	KEY	public Routine ( ) { }
va	KEY	@ Override public int getTileHeight ( ) { return TILE_SIZE ; }
va	KEY	@ Override public long getPingTime ( ) { return ping ; }
va	IDF	protected WorldImpl ( WorldImpl prev ) { this . width = prev . width ; this . height = prev . height ; this . generation = prev . generation + 1 ; }
va	KEY	public void act ( ) { }
va	IDF	public Armour createArmour ( int index ) { Armour newArmour = Armour . createArmourFromReader ( armours . get ( index ) ) ; if ( newArmour != null ) { return newArmour ; } else { System . out . println ( "Created Armour is null" ) ; return null ; } }
va	KEY	public long getFlightHistoryId ( ) { return flightHistoryId ; }
va	KEY	public int getHeight ( ) { return height ; }
va	IDF	public GuiLife ( ) { super ( "GuiLife" ) ; setSize ( 640 , 480 ) ; setDefaultCloseOperation ( EXIT_ON_CLOSE ) ; setLayout ( new BorderLayout ( ) ) ; JComponent optionsPanel = createOptionsPanel ( ) ; add ( optionsPanel , BorderLayout . WEST ) ; JComponent gamePanel = createGamePanel ( ) ; add ( gamePanel , BorderLayout . CENTER ) ; }
va	KEY	public abstract Orientation getStepOrientation ( int stepIndex ) ;
va	KEY	@ Override public int size ( ) { return size ; }
va	KEY	public double getCurrentMonthlyPaymentAmount ( ) { return currentMonthlyPaymentAmount ; }
va	KEY	public synchronized void xsetLBInitialDelay ( int a ) { lbID = a ; }
va	IDF	public void addChild ( Leaf child ) { this . children . add ( child ) ; }
va	KEY	public boolean isError ( ) { return this . isError ; }
va	IDF	public static int lcm ( int a , int b ) { return ( a * b ) / BigInteger . valueOf ( a ) . gcd ( BigInteger . valueOf ( b ) ) . intValue ( ) ; }
va	IDF	BuffRangeImage ( ContentPane parent , Game game , Point position ) { super ( parent , game , position ) ; }
va	KEY	@ Override public int hashCode ( ) { int hash = 5 ; return hash ; }
va	IDF	private void exibirPartidasConcluidas ( List < DadosPartida > listaPartidasConcluidas ) { cli . imprimirLinha ( "Lista de jogos:\n" ) ; String [ ] s = { "\u00CDndice" , "Data In\u00EDcio" , "Data Fim" , "Vencedor" } ; cli . imprimirLinhaFormatada ( s ) ; for ( Integer indice = 0 ; indice < listaPartidasConcluidas . size ( ) ; indice ++ ) cli . exibirDadosPartidasConcluidas ( Integer . toString ( indice ) , listaPartidasConcluidas . get ( indice ) ) ; cli . imprimirLinha ( "" ) ; }
va	IDF	public void setPid ( String pid ) { this . pid = pid ; }
va	KEY	public boolean pressUp ( ) { if ( selectedAction != null ) { return selectedAction . pressArrow ( - 1 , 0 ) ; } return false ; }
va	KEY	public boolean isCellEditable ( int rowIndex , int columnIndex ) { return canEdit [ columnIndex ] ; }
va	KEY	void firePlayerFinishedEvent ( ) ;
va	KEY	public long getTimestamp ( ) { return timestamp ; }
va	KEY	public void setChatList ( boolean chatList ) { this . chatList = chatList ; }
va	IDF	public void setName ( String name ) { this . name = name ; }
va	IDF	public String getOverdueDateStr ( ) { if ( overduedate . getTime ( ) <= 0 ) return ( "" ) ; return ( dtfmt . format ( overduedate ) ) ; }
va	KEY	public int getColumn ( ) { return column ; }
va	KEY	public void setSpeed ( double speed ) { this . speed = speed ; }
va	KEY	void deleteElective ( long id ) ;
va	KEY	public void mouseExited ( final MouseEvent event ) { }
va	IDF	@ Test public void inputTest ( ) { try { LocaleParser parser = new LocaleParser ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }
va	IDF	protected void updateWhoIsToMove ( S ds ) { boolean w2m = ds . isWhiteToMove ( ) ; whiteLabel . setEnabled ( w2m ) ; blackLabel . setEnabled ( ! w2m ) ; }
va	KEY	public void increaseGeneticCount ( ) { geneticCount ++ ; }
va	IDF	@ SuppressWarnings ( "static-access" ) public void setScore ( int [ ] playerIDs , String [ ] playerNames , String [ ] playerColors , int [ ] [ ] xPos , int [ ] [ ] yPos , int [ ] score , int [ ] xFood , int [ ] yFood ) { this . playerNames = playerNames ; this . score = score ; this . playerColor = playerColors ; this . playerID = playerIDs ; createScorePanel ( ) ; }
va	KEY	public void setUserID ( int userID ) { if ( userID < 1 ) { throw new IllegalArgumentException ( "User ID cannot be less than 1!" ) ; } this . userID = userID ; }
va	IDF	@ Override public void actionPerformed ( ActionEvent e ) { JFileChooser fileChooser = new JFileChooser ( ) ; int returnValue = fileChooser . showOpenDialog ( null ) ; if ( returnValue == JFileChooser . APPROVE_OPTION ) { File selectedFile = fileChooser . getSelectedFile ( ) ; _generalPanel . setInputField ( selectedFile . getAbsolutePath ( ) ) ; _mediaPlayer . playMedia ( selectedFile . getAbsolutePath ( ) ) ; _generalPanel . addToList ( selectedFile . getAbsolutePath ( ) ) ; } }
va	KEY	private void Espaco_action ( RuleContext _localctx , int actionIndex ) { switch ( actionIndex ) { case 0 : skip ( ) ; break ; } }
va	KEY	public void setEmbalado ( boolean embalado ) { this . embalado = embalado ; }
va	KEY	@ Override public TBlock rotateClockwiseCounter ( ) { return this ; }
va	KEY	public void setTotal ( long value ) { this . total = value ; }
va	KEY	public FriendshPk ( ) { }
va	KEY	public void setReference ( int reference ) { this . reference = reference ; }
va	KEY	public Festplatte ( ) { }
va	IDF	protected GeneralPath createNEShape ( ) { GeneralPath componentShape = new GeneralPath ( ) ; componentShape . moveTo ( 0 , 0 ) ; componentShape . lineTo ( w - barThin , 0 ) ; componentShape . curveTo ( w - barThin , 0 , w , 0 , w , barThin ) ; componentShape . lineTo ( w , h ) ; componentShape . lineTo ( w - barV , h ) ; componentShape . lineTo ( w - barV , barH + barThin / 2 ) ; componentShape . curveTo ( w - barV , barH + barThin / 2 , w - barV , barH , w - barV - barThin / 2 , barH ) ; componentShape . lineTo ( 0 , barH ) ; componentShape . lineTo ( 0 , 0 ) ; componentShape . closePath ( ) ; area = new Area ( componentShape ) ; return componentShape ; }
va	IDF	@ SuppressWarnings ( { "RedundantIfStatement" } ) @ Override public boolean equals ( Object o ) { if ( this == o ) return true ; if ( o == null || getClass ( ) != o . getClass ( ) ) return false ; Change change = ( Change ) o ; if ( type != change . type ) return false ; if ( ! filePath . equals ( change . filePath ) ) return false ; if ( ! filePathBefore . equals ( change . filePathBefore ) ) return false ; if ( ! revision . equals ( change . revision ) ) return false ; if ( ! revisionBefore . equals ( change . revisionBefore ) ) return false ; return true ; }
va	KEY	public synchronized void xsetRTRepeatDelay ( int a ) { rtRD = a ; }
va	IDF	public void vertexColor ( double xyz [ ] , double [ ] [ ] [ ] lights ) { Argb = material . getAmbient ( ) ; Drgb = material . getDiffuse ( ) ; Srgb = material . getSpecular ( ) ; p = material . getSpecularPower ( ) ; nVector [ 0 ] = xyz [ 3 ] ; nVector [ 1 ] = xyz [ 4 ] ; nVector [ 2 ] = xyz [ 5 ] ; normalize ( nVector ) ; for ( int i = 0 ; i < lights . length ; i ++ ) { uselessrgb [ 0 ] = 0 ; uselessrgb [ 1 ] = 0 ; uselessrgb [ 2 ] = 0 ; normalize ( lights [ i ] [ 0 ] ) ; normalize ( lights [ i ] [ 1 ] ) ; projection = Math . max ( 0 , dotProduct ( lights [ i ] [ 0 ] , nVector ) ) ; multVS ( Drgb , projection , diffused ) ; multVS ( nVector , 2 * projection , tempreflection ) ; subtractV ( tempreflection , lights [ i ] [ 0 ] , reflection ) ; normalize ( reflection ) ; ref2Eye = Math . max ( 0 , dotProduct ( reflection , eye ) ) ; multVS ( Srgb , Math . pow ( ref2Eye , p ) , specular ) ; addV ( diffused , specular , CoeffLcolor ) ; multVV ( CoeffLcolor , lights [ i ] [ 1 ] , BigRHS ) ; addV ( uselessrgb , BigRHS , uselessrgb ) ; } addV ( Argb , uselessrgb , RGB ) ; }
va	KEY	public int getValue ( ) { return value ; }
va	KEY	private Version ( ) { }
va	IDF	private void loadPanel ( ) { try { helpImage = ImageIO . read ( this . getClass ( ) . getResource ( "/images/helpControls.png" ) ) ; setSize ( helpImage . getWidth ( ) , helpImage . getHeight ( ) ) ; setResizable ( false ) ; displayBufferedImage ( helpImage ) ; } catch ( IOException e ) { System . out . println ( e ) ; } }
va	IDF	private static boolean equivEquals ( Object key1 , Object key2 ) { if ( key1 instanceof EquivalentMap ) { ArrayList < Entry > al1 = ( ( EquivalentMap ) key1 ) . contents ; if ( key2 instanceof EquivalentMap ) { ArrayList < Entry > al2 = ( ( EquivalentMap ) key2 ) . contents ; int siz1 = al1 . size ( ) , siz2 = al2 . size ( ) ; if ( siz1 != siz2 ) return false ; else { for ( int i1 = 0 ; i1 < siz1 ; ++ i1 ) { boolean found = false ; Entry ent1 = al1 . get ( i1 ) ; for ( int i2 = 0 ; i2 < siz2 && ! found ; ++ i2 ) { Entry ent2 = al2 . get ( i2 ) ; if ( eql ( ent1 . key , ent2 . key ) && eql ( ent1 . value , ent2 . value ) ) found = true ; } if ( ! found ) return false ; } return true ; } } else return false ; } else if ( key2 instanceof EquivalentMap ) return false ; else return eql ( key1 , key2 ) ; }
va	IDF	@ Override public UserState register ( String username , String password ) { try { if ( ! checkLoginPassword ( username , password ) ) return UserState . EMPTY_DATA ; if ( dao . getUser ( username ) != null ) return UserState . USER_ALREADY_EXISTS ; if ( ! dao . saveUser ( new UserDataSet ( username , password ) ) ) return UserState . SQL_ERROR ; } catch ( SQLException e ) { e . printStackTrace ( ) ; return UserState . SQL_ERROR ; } return UserState . USER_ADDED ; }
va	IDF	@ Override public void removeOne ( int intId , String strTabla ) throws Exception { Statement oStatement ; try { oStatement = ( Statement ) oConexionMySQL . createStatement ( ) ; String strSQL = "DELETE FROM " + strTabla + " WHERE id = " + intId ; oStatement . executeUpdate ( strSQL ) ; } catch ( SQLException e ) { throw new Exception ( "mysql.deleteOne: Error al eliminar el registro: " + e . getMessage ( ) ) ; } }
va	IDF	@ Override public boolean getValor ( ) { return esq . getValor ( ) == dir . getValor ( ) ; }
va	KEY	public boolean hasFullscreen ( ) { return fullscreen ; }
va	KEY	public int size ( ) { return es . length ; }
va	IDF	public void doPost ( HttpServletRequest req , HttpServletResponse resp ) throws IOException { resp . setContentType ( "text/plain" ) ; String string = req . getParameter ( "string" ) ; String [ ] answers = string . split ( "\\{\\{RECRD_SEPARATOR\\}\\}" ) ; AnswerService service = new AnswerService ( ) ; int i = 0 ; for ( String answer : answers ) { answer = answer . trim ( ) ; try { Message request = new Message ( new Context ( ) ) ; request . fromJson ( answer ) ; service . doPost ( request , new Message ( new Context ( ) ) ) ; resp . getWriter ( ) . println ( "Wrote record " + i ) ; } catch ( Exception e ) { resp . getWriter ( ) . println ( "Error writing record " + i ) ; } i ++ ; } }
va	KEY	public double getMaxSpeed ( ) { return maxSpeed ; }
va	IDF	public void onError ( java . lang . Exception error ) { if ( error instanceof org . apache . axis2 . AxisFault ) { org . apache . axis2 . AxisFault f = ( org . apache . axis2 . AxisFault ) error ; org . apache . axiom . om . OMElement faultElt = f . getDetail ( ) ; if ( faultElt != null ) { if ( faultExceptionNameMap . containsKey ( new org . apache . axis2 . client . FaultMapKey ( faultElt . getQName ( ) , "getLongUrl" ) ) ) { try { java . lang . String exceptionClassName = ( java . lang . String ) faultExceptionClassNameMap . get ( new org . apache . axis2 . client . FaultMapKey ( faultElt . getQName ( ) , "getLongUrl" ) ) ; java . lang . class exceptionClass = java . lang . class . forName ( exceptionClassName ) ; java . lang . reflect . Constructor constructor = exceptionClass . getConstructor ( String . class ) ; java . lang . Exception ex = ( java . lang . Exception ) constructor . newInstance ( f . getMessage ( ) ) ; java . lang . String messageClassName = ( java . lang . String ) faultMessageMap . get ( new org . apache . axis2 . client . FaultMapKey ( faultElt . getQName ( ) , "getLongUrl" ) ) ; java . lang . class messageClass = java . lang . class . forName ( messageClassName ) ; java . lang . Object messageObject = fromOM ( faultElt , messageClass , null ) ; java . lang . reflect . Method m = exceptionClass . getMethod ( "setFaultMessage" , new java . lang . class [ ] { messageClass } ) ; m . invoke ( ex , new java . lang . Object [ ] { messageObject } ) ; callback . receiveErrorgetLongUrl ( new java . rmi . RemoteException ( ex . getMessage ( ) , ex ) ) ; } catch ( java . lang . ClassCastException e ) { callback . receiveErrorgetLongUrl ( f ) ; } catch ( java . lang . ClassNotFoundException e ) { callback . receiveErrorgetLongUrl ( f ) ; } catch ( java . lang . NoSuchMethodException e ) { callback . receiveErrorgetLongUrl ( f ) ; } catch ( java . lang . reflect . InvocationTargetException e ) { callback . receiveErrorgetLongUrl ( f ) ; } catch ( java . lang . IllegalAccessException e ) { callback . receiveErrorgetLongUrl ( f ) ; } catch ( java . lang . InstantiationException e ) { callback . receiveErrorgetLongUrl ( f ) ; } catch ( org . apache . axis2 . AxisFault e ) { callback . receiveErrorgetLongUrl ( f ) ; } } else { callback . receiveErrorgetLongUrl ( f ) ; } } else { callback . receiveErrorgetLongUrl ( f ) ; } } else { callback . receiveErrorgetLongUrl ( error ) ; } }
va	KEY	@ Override public boolean setSpeedFast ( ) { setFanSpeed ( 3 ) ; return true ; }
va	IDF	public void setSeminarService ( SeminarService seminarService ) { this . seminarService = seminarService ; }
va	KEY	private String asBitString ( final long n ) { return long . toBinaryString ( n ) ; }
va	KEY	public void setTimerOn ( boolean timerOn ) { this . timerOn = timerOn ; }
va	KEY	public TransactionMode getTransactionIDMode ( ) { return this . mode ; }
va	IDF	protected abstract void delete ( Message request , Message response ) ;
va	KEY	private static String getTemplatePath ( ) { if ( templatePath != null ) { return templatePath ; } else { return getPath ( "../programebrincando/src/plp/programebrincando/arduino/template.ino" ) ; } }
va	KEY	public void setTime ( int s ) { }
va	KEY	public int getNumLines ( ) { return lines . length ; }
va	KEY	public DefaultINDIServer ( int port ) { super ( port ) ; }
va	KEY	public void setMoneyValue ( float moneyValue ) { this . moneyValue = moneyValue ; }
va	IDF	public void log ( String in ) { if ( console == null ) { buffer . add ( in ) ; } else { writeToConsole ( in ) ; } }
va	IDF	private List < Object > factorsBuilder ( ) { List < Object > factors = new ArrayList < Object > ( ) { { FactorWithRatings f1 = new FactorWithRatings ( ) ; f1 . setId ( 837456784356 ) ; f1 . setLabel ( "Rating range High" ) ; f1 . setRating ( 15 ) ; FactorWithRatings f2 = new FactorWithRatings ( ) ; f2 . setId ( 837456784356 ) ; f2 . setLabel ( "Rating Range Low " ) ; f2 . setRating ( 6 ) ; FactorWithInfluence f3 = new FactorWithInfluence ( ) ; f3 . setId ( 837456784356 ) ; f3 . setInfluence ( 1 ) ; f3 . setLabel ( "Influence" ) ; add ( f1 ) ; add ( f2 ) ; add ( f3 ) ; } } ; return factors ; }
va	KEY	public boolean login ( ) { return false ; }
va	KEY	public Node toNode ( ) { return new Node ( null , location ) ; }
va	KEY	public void receiveData ( byte [ ] dataBuffer , int byteCount ) ;
va	KEY	public abstract void load ( ) ;
va	IDF	@ Override public boolean isBusy ( long lecturerId , Date start , Date end ) { Lecturer lecturer = lecturerDAO . load ( lecturerId ) ; Integer minBreak = lecturer . getMinBreak ( ) ; Calendar cal = Calendar . getInstance ( ) ; Date startDateWithBreakTime ; cal . setTime ( start ) ; cal . add ( Calendar . MINUTE , - minBreak ) ; startDateWithBreakTime = cal . getTime ( ) ; Date endDateWithBreakTime ; cal . setTime ( end ) ; cal . add ( Calendar . MINUTE , minBreak ) ; endDateWithBreakTime = cal . getTime ( ) ; List < Appointment > appointments = appointmentDAO . loadAppointmentsForLecturer ( lecturer ) ; return ! filterAppointmentsForTimeperiod ( appointments , startDateWithBreakTime , endDateWithBreakTime ) . isEmpty ( ) ; }
va	KEY	public boolean equals ( Object object ) { return object == null || object == this ; }
va	KEY	public void identity ( ) ;
va	IDF	private void jList1MouseExited ( java . awt . event . MouseEvent evt ) { }
va	IDF	BeanstreamResponse ( int code , int category , String message , String reference , String details , int httpStatusCode , String responseBody , MediaType mediaType ) { this . code = code ; this . category = category ; this . message = message ; this . reference = reference ; this . details = details ; this . httpStatusCode = httpStatusCode ; this . responseBody = responseBody ; this . mediaType = mediaType ; }
va	IDF	public CloneResult ( List < String > vcsErrors , List < Exception > exceptions ) { this . vcsErrors = vcsErrors ; this . exceptions = exceptions ; }
va	IDF	public ButtonListener ( MainAbsoluteLayout parent ) { }
va	IDF	public static void main ( String [ ] args ) { if ( args . length < 1 ) { showUsage ( ) ; } Properties configurationProperties = new Properties ( ) ; try { configurationProperties . load ( new FileReader ( args [ 0 ] ) ) ; node = new AutoMateNode ( configurationProperties ) ; node . start ( ) ; } catch ( FileNotFoundException e ) { System . err . print ( "Failed to initialize node - properties file not found" ) ; } catch ( IOException e ) { System . err . print ( "Failed to initialize node - properties file could not be read" ) ; } catch ( InitializationException e ) { System . err . print ( "Failed to initialize node." ) ; e . printStackTrace ( ) ; } BufferedReader commandLineReader = new BufferedReader ( new InputStreamReader ( System . in ) ) ; while ( true ) { String line ; try { line = commandLineReader . readLine ( ) ; if ( line . equals ( "exit" ) ) { node . stop ( ) ; return ; } } catch ( IOException e ) { } } }
va	IDF	@ Override public boolean updateCategory ( CategoryModel category ) throws WebshopAppException { if ( isValidCategory ( category , "UPDATE_CATEGORY" ) ) { try ( Connection conn = getConnection ( ) ) { String sql = "UPDATE categories SET name = ?  " + "staff_responsible= ? WHERE id = ?" ; try ( PreparedStatement pstmt = conn . prepareStatement ( sql ) ) { prepareStatementFromModel ( pstmt , category ) ; setInteger ( pstmt , 3 , category . getId ( ) ) ; pstmt . executeUpdate ( ) ; Log . logOut ( LOGGER , this , "UPDATED_CATEGORY" , "Category updated: " , category . toString ( ) ) ; return true ; } } catch ( SQLException e ) { WebshopAppException excep = new WebshopAppException ( e , this . getClass ( ) . getSimpleName ( ) , "UPDATED_CATEGORY" ) ; Log . logOutWAException ( LOGGER , excep ) ; throw excep ; } } return false ; }
va	KEY	private final static byte [ ] getAlphabet ( int options ) { if ( ( options & URL_SAFE ) == URL_SAFE ) { return _URL_SAFE_ALPHABET ; } else if ( ( options & ORDERED ) == ORDERED ) { return _ORDERED_ALPHABET ; } else { return _STANDARD_ALPHABET ; } }
va	KEY	public void setResizable ( boolean resizable ) { this . resizable = resizable ; }
va	KEY	public int getCantidadmedicamentos ( ) { return cantidadmedicamentos ; }
va	KEY	public abstract void setOrderBy ( String orderBy ) ;
va	IDF	public INDISwitchOneOfManyProperty ( INDIDriver driver , String name , String label , String group , PropertyStates state , PropertyPermissions permission , String [ ] elements , int selectedElement ) { super ( driver , name , label , group , state , permission , 0 , SwitchRules . ONE_OF_MANY ) ; createElements ( elements , selectedElement ) ; }
va	IDF	public void setCMessage ( Message chatMessage ) { this . CMessage = chatMessage ; }
va	KEY	@ Override public void putEnd ( ) throws ParsingException { throw new ParsingException ( "need closing" ) ; }
va	IDF	public void setScreenSize ( Dimension screenSize ) { for ( RenderComponent c : components ) { c . setScreenSize ( screenSize ) ; } }
va	KEY	@ Override public void mutateParameters ( ) { }
va	KEY	@ Override public void hidDialog ( ) { this . setVisible ( false ) ; }
va	IDF	public String toString ( ) { return author + "  " + title + "  " + subject ; }
va	KEY	TestMerchant ( ) { this . name = "testMerchant" ; this . given = false ; }
va	IDF	public boolean damage ( Item weapon ) { System . out . println ( "You tried to attack the merchant.\n" + "He responds with a storm of lightning bolts  killing you." ) ; Game . hasLost = true ; return true ; }
va	KEY	public void setEps2 ( double eps2 ) { this . eps2 = eps2 ; }
va	IDF	public static void GA_ThrowDice ( ) { Player player = players . get ( currentPlayer ) ; dices [ 0 ] . throw ( ) ; dices [ 1 ] . throw ( ) ; if ( ! player . InPrison ) { if ( dices [ 0 ] . number == dices [ 1 ] . number ) { if ( ! trackDices ) { trackDices = true ; dicesEqual = 0 ; } dicesEqual ++ ; if ( dicesEqual == 3 ) { new GoToPrison ( ) . Lands ( player ) ; trackDices = false ; dicesEqual = 0 ; gameboard . showJailFreeCardBtn = false ; gameboard . showJailPayBailBtn = false ; gameboard . showJailThrowDiceBtn = false ; gameboard . showMortgageBtn = false ; gameboard . showNextPlayerBtn = true ; gameboard . showThrowDiceBtn = false ; gameboard . refreshGameControl ( ) ; } else { gameboard . showThrowDiceBtn = true ; gameboard . showNextPlayerBtn = false ; gameboard . refreshGameControl ( ) ; } } else { trackDices = false ; dicesEqual = 0 ; } if ( player . InPrison != true ) { int diceValue = dices [ 0 ] . number + dices [ 1 ] . number ; for ( int tmpPos = 0 ; tmpPos < diceValue - 1 ; tmpPos ++ ) { fields . get ( player . ChangePosition ( 1 ) ) . Passed ( player ) ; } fields . get ( player . ChangePosition ( 1 ) ) . Lands ( player ) ; if ( trackDices ) { } gameboard . refreshGameControl ( ) ; } if ( player . InPrison ) { gameboard . showJailFreeCardBtn = false ; gameboard . showJailPayBailBtn = false ; gameboard . showJailThrowDiceBtn = false ; gameboard . showMortgageBtn = false ; gameboard . showNextPlayerBtn = true ; gameboard . showThrowDiceBtn = false ; gameboard . refreshGameControl ( ) ; } else if ( trackDices != true ) { gameboard . showJailFreeCardBtn = false ; gameboard . showJailPayBailBtn = false ; gameboard . showJailThrowDiceBtn = false ; gameboard . showMortgageBtn = false ; gameboard . showNextPlayerBtn = true ; gameboard . showThrowDiceBtn = false ; for ( Field field : Game . fields ) { if ( field . getClass ( ) == Brewery . class ) { Brewery brew = ( ( Brewery ) field ) ; if ( brew . Owner == currentPlayer ) { gameboard . showMortgageBtn = true ; } } else if ( field . getClass ( ) == Street . class ) { Street street = ( ( Street ) field ) ; if ( street . Owner == currentPlayer ) { gameboard . showMortgageBtn = true ; } } else if ( field . getClass ( ) == ShippingLines . class ) { ShippingLines sl = ( ( ShippingLines ) field ) ; if ( sl . Owner == currentPlayer ) { gameboard . showMortgageBtn = true ; } } } gameboard . refreshGameControl ( ) ; } } else { } }
va	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButton3ActionPerformed ( evt ) ; }
va	IDF	public ElementaryFileDIR ( byte [ ] aid , String label , byte [ ] dfCiaPath , String providerId ) { this . aid = aid ; this . label = label ; this . dfCiaPath = dfCiaPath ; this . providerId = providerId ; }
va	KEY	public ListResponse createListResponse ( ) { return new ListResponse ( ) ; }
va	KEY	public boolean onTarget ( ) { return followerLeft . isFinishedTrajectory ( ) ; }
va	KEY	boolean isRequest ( ) { return isRequest ; }
va	IDF	@ Override public void run ( ) { try { strLine = in . readLine ( ) ; } catch ( IOException e ) { } isReading = false ; }
va	KEY	public boolean handleOpenApplication ( ) { return true ; }
va	IDF	public static void startMusic ( int song ) { if ( ! mute ) { stopMusic ( ) ; if ( sequencer != null ) { try { sequencer . open ( ) ; sequencer . setSequence ( ( Sequence ) null ) ; sequencer . setSequence ( songs [ song ] ) ; int i = Sequencer . LOOP_CONTINUOUSLY ; sequencer . setLoopCount ( Sequencer . LOOP_CONTINUOUSLY ) ; sequencer . start ( ) ; } catch ( Exception e ) { } } } }
va	KEY	@ Override public void onBind ( class < ? extends IListener > listenerClass ) { }
va	KEY	public class getColumnClass ( int columnIndex ) { return types [ columnIndex ] ; }
va	IDF	public ExportedDataNotFoundException ( String msg ) { super ( msg ) ; }
va	KEY	public AddContact createAddContact ( ) { return new AddContact ( ) ; }
va	KEY	public boolean isSelected ( int i , int j ) { if ( playersPositions [ i ] [ j ] == null ) { return false ; } return true ; }
va	IDF	public static void checkErrors ( CollectingErrorHandler status , int expectedErrorCount ) { if ( expectedErrorCount != status . getErrors ( ) . size ( ) ) { System . out . println ( "Expected " + expectedErrorCount + " errors but found " + status . getErrors ( ) . size ( ) ) ; for ( TIPPError error : status . getErrors ( ) ) { System . out . println ( "> " + error ) ; } } assertEquals ( expectedErrorCount , status . getErrors ( ) . size ( ) ) ; }
va	KEY	public Spawn ( ) { }
va	IDF	@ Test public void dipCorrection ( ) { assert . assertEquals ( service . hours ( ) , "Standard 10 hours per staff member" ) ; }
va	KEY	@ Override public long getTimestamp ( ) { return this . time ; }
va	IDF	private void drawStringDropShadow ( Graphics g , String text , int x , int y , int c ) { drawString ( g , text , x * 8 + 5 , y * 8 + 5 , 0 ) ; drawString ( g , text , x * 8 + 4 , y * 8 + 4 , c ) ; }
va	IDF	private void alert ( String msg , String userFor ) { Alert error = new Alert ( this , true , null ) ; error . getLabel ( ) . setText ( msg ) ; error . setUseFor ( userFor ) ; error . setVisible ( true ) ; }
va	IDF	static String decode ( String ciphertext , String mustOccur ) throws Exception { if ( ciphertext . contains ( mustOccur ) ) { return ciphertext ; } for ( int i = 1 ; i < 26 ; i ++ ) { String decode = encode ( ciphertext , i ) ; if ( decode . contains ( mustOccur ) ) { return decode ; } } throw new Exception ( "Decoded string not found" ) ; }
va	IDF	private void anSiHuaXing ( int tianGan ) { Yao huaLuYao = xingMap . get ( SiHuaXingBiao . huaLuBiao [ tianGan ] ) ; huaLuYao . siHua = 0 ; huaLuYao . miaoXian = MiaoXianBiao . huaLuBiao [ huaLuYao . gongZhi ] ; Yao huaQuanYao = xingMap . get ( SiHuaXingBiao . huaQuanBiao [ tianGan ] ) ; huaQuanYao . siHua = 1 ; huaQuanYao . miaoXian = MiaoXianBiao . huaQuanBiao [ huaQuanYao . gongZhi ] ; Yao huaKeYao = xingMap . get ( SiHuaXingBiao . huaKeBiao [ tianGan ] ) ; huaKeYao . siHua = 2 ; huaKeYao . miaoXian = MiaoXianBiao . huaQuanBiao [ huaKeYao . gongZhi ] ; Yao huaJiYao = xingMap . get ( SiHuaXingBiao . huaJiBiao [ tianGan ] ) ; huaJiYao . siHua = 3 ; huaJiYao . miaoXian = MiaoXianBiao . huaJiBiao [ huaJiYao . gongZhi ] ; }
va	IDF	public static String [ ] [ ] getUsers ( ) throws SQLException { ResultSet rsUsers ; try ( Connection conn = DbConnect . Connect ( ) ) { String sql = "Select * from users" ; rsUsers = conn . createStatement ( ) . executeQuery ( sql ) ; rsUsers . last ( ) ; String users [ ] [ ] = new String [ rsUsers . getRow ( ) ] [ 2 ] ; rsUsers . beforeFirst ( ) ; while ( rsUsers . next ( ) ) { users [ rsUsers . getRow ( ) - 1 ] [ 0 ] = rsUsers . getString ( "username" ) ; users [ rsUsers . getRow ( ) - 1 ] [ 1 ] = rsUsers . getString ( "level" ) ; } return users ; } }
va	KEY	public int getyCordinate ( ) { return yCordinate ; }
va	KEY	public static void main ( String [ ] args ) { }
va	IDF	public PlayerModelModule ( FFNeuralNetwork network ) { this . network = network ; return ; }
va	KEY	public PocketLint ( ) { this . name = "pocket lint" ; }
va	IDF	public void setPixels ( int x , int y , int width , int height , ColorModel model , int pixels [ ] , int offset , int scansize ) { if ( srcPixels == null ) { srcPixels = new int [ srcWidth * srcHeight ] ; } for ( int row = 0 , destRow = y * srcWidth ; row < height ; row ++ , destRow += srcWidth ) { int rowOff = offset + row * scansize ; for ( int col = 0 ; col < width ; col ++ ) { srcPixels [ destRow + x + col ] = model == null ? pixels [ rowOff + col ] : model . getRGB ( pixels [ rowOff + col ] ) ; } } }
va	KEY	@ Override public boolean isCancelled ( ) { return false ; }
va	KEY	public static synchronized int getX ( ) { return m_x ; }
va	IDF	public void update ( Integer idInvite , Invite invite ) ;
va	KEY	public OperatingEnvironment_ withRating ( long rating ) { this . rating = rating ; return this ; }
va	IDF	public void clear ( ) { used = false ; internalBuffer . delete ( 0 , internalBuffer . length ( ) ) ; for ( ReportField reportField : reportFields . values ( ) ) { reportField . clear ( ) ; } }
va	IDF	public static boolean isInsideTriangle ( double aX , double aY , double bX , double bY , double cX , double cY , double pX , double pY ) { double ax , ay , bx , by , cx , cy , apx , apy , bpx , bpy , cpx , cpy ; double cCROSSap , bCROSScp , aCROSSbp ; ax = cX - bX ; ay = cY - bY ; bx = aX - cX ; by = aY - cY ; cx = bX - aX ; cy = bY - aY ; apx = pX - aX ; apy = pY - aY ; bpx = pX - bX ; bpy = pY - bY ; cpx = pX - cX ; cpy = pY - cY ; aCROSSbp = ax * bpy - ay * bpx ; cCROSSap = cx * apy - cy * apx ; bCROSScp = bx * cpy - by * cpx ; return ( ( aCROSSbp >= 0.0f ) && ( bCROSScp >= 0.0f ) && ( cCROSSap >= 0.0f ) ) ; }
va	IDF	public void setBuild ( String build ) { this . build = build ; }
va	IDF	private void jButtonServisGammuActionPerformed ( java . awt . event . ActionEvent evt ) { if ( jButtonServisGammu . getText ( ) . equals ( "Jalankan servis Gammu" ) ) { try { Process process = Runtime . getRuntime ( ) . exec ( "sc start GammuSMSD" ) ; } catch ( IOException ex ) { ex . printStackTrace ( ) ; } } else if ( jButtonServisGammu . getText ( ) . equals ( "Hentikan servis Gammu" ) ) { try { Process process = Runtime . getRuntime ( ) . exec ( "sc stop GammuSMSD" ) ; } catch ( IOException ex ) { ex . printStackTrace ( ) ; } } }
va	IDF	@ Override public VcsProject . LogFileContentResult execute ( ) { commandLine . execute ( ) ; if ( isSuccessful ( commandLine ) ) { return new VcsProject . LogFileContentResult ( trimLastNewLine ( commandLine . stdout ( ) ) ) ; } else { return new VcsProject . LogFileContentResult ( commandLine . stderr ( ) , commandLine . exitCode ( ) ) ; } }
va	IDF	public Syncer ( ) { SpringLayout layout = new SpringLayout ( ) ; setLayout ( layout ) ; _myList = new JList < > ( new DefaultListModel < > ( ) ) ; _myList . setCellRenderer ( new SyncerCellRenderer ( ) ) ; _myList . getSelectionModel ( ) . setSelectionMode ( ListSelectionModel . MULTIPLE_INTERVAL_SELECTION ) ; _myList . setDragEnabled ( true ) ; _myList . setDropMode ( DropMode . INSERT ) ; _myList . setTransferHandler ( new ListTransferHandler ( ) ) ; _myList . setBackground ( Color . WHITE ) ; _myList . setBorder ( null ) ; JScrollPane scrollPane = new JScrollPane ( _myList ) ; scrollPane . setBorder ( new LineBorder ( Color . BLACK , 3 ) ) ; scrollPane . setBackground ( Color . WHITE ) ; try { _syncEnabled = new BeethovenIcon ( getClass ( ) . getResource ( "Icons/sync.png" ) . toURI ( ) . toURL ( ) ) ; _syncDisabled = new BeethovenIcon ( getClass ( ) . getResource ( "Icons/no_sync.png" ) . toURI ( ) . toURL ( ) ) ; _sync = new JButton ( _syncEnabled ) ; _sync . setDisabledIcon ( _syncDisabled ) ; _sync . setBackground ( Color . WHITE ) ; _sync . setToolTipText ( "Sync" ) ; _sync . setBorder ( null ) ; _sync . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { sync ( ) ; } } ) ; _remove = new JButton ( new BeethovenIcon ( getClass ( ) . getResource ( "Icons/minus.png" ) . toURI ( ) . toURL ( ) ) ) ; _remove . setBackground ( Color . WHITE ) ; _remove . setToolTipText ( "Remove" ) ; _remove . setBorder ( null ) ; _remove . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { remove ( ) ; } } ) ; } catch ( URISyntaxException e ) { e . printStackTrace ( ) ; } catch ( MalformedURLException e ) { e . printStackTrace ( ) ; } Timer t = new Timer ( 100 , new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { if ( checkForDevice ( ) ) { _sync . setEnabled ( true ) ; } else _sync . setEnabled ( false ) ; } } ) ; t . start ( ) ; JToolBar toolBar = new JToolBar ( ) ; toolBar . setBackground ( Color . WHITE ) ; toolBar . setBorder ( new LineBorder ( Color . BLACK , 3 ) ) ; toolBar . setFloatable ( false ) ; toolBar . setRollover ( true ) ; toolBar . addSeparator ( ) ; toolBar . add ( _sync ) ; toolBar . addSeparator ( ) ; toolBar . add ( _remove ) ; toolBar . add ( Box . createHorizontalGlue ( ) ) ; JLabel syncer = new JLabel ( "SYNCER" ) ; syncer . setFont ( new Font ( Font . SERIF , Font . BOLD + Font . ITALIC , syncer . getFont ( ) . getSize ( ) ) ) ; toolBar . add ( syncer ) ; toolBar . addSeparator ( ) ; layout . putConstraint ( SpringLayout . NORTH , toolBar , 1 , SpringLayout . NORTH , this ) ; layout . putConstraint ( SpringLayout . EAST , toolBar , - 1 , SpringLayout . EAST , this ) ; layout . putConstraint ( SpringLayout . WEST , toolBar , 1 , SpringLayout . WEST , this ) ; layout . putConstraint ( SpringLayout . NORTH , scrollPane , 1 , SpringLayout . SOUTH , toolBar ) ; layout . putConstraint ( SpringLayout . EAST , scrollPane , - 1 , SpringLayout . EAST , this ) ; layout . putConstraint ( SpringLayout . SOUTH , scrollPane , - 1 , SpringLayout . SOUTH , this ) ; layout . putConstraint ( SpringLayout . WEST , scrollPane , 1 , SpringLayout . WEST , this ) ; add ( toolBar ) ; add ( scrollPane ) ; }
va	KEY	boolean zeroHP ( ) ;
va	KEY	public int getVal ( ) { return val ; }
va	IDF	@ Override protected String getXMLPropertyDefinitionInit ( String message ) { String xml = "<defNumberVector device=\"" + getDriver ( ) . getName ( ) + "\" name=\"" + getName ( ) + "\" label=\"" + getLabel ( ) + "\" group=\"" + getGroup ( ) + "\" state=\"" + Constants . getPropertyStateAsString ( getState ( ) ) + "\" perm=\"" + Constants . getPropertyPermissionAsString ( getPermission ( ) ) + "\" timeout=\"" + getTimeout ( ) + "\" timestamp=\"" + INDIDateFormat . getCurrentTimestamp ( ) + "\" message=\"" + message + "\">" ; return xml ; }
va	KEY	abstract boolean offerStop ( ) ;
va	KEY	public double getHeight ( ) { return height ; }
va	IDF	public static int followPointers ( int [ ] locations ) { if ( null == locations || locations . length < 1 ) return 0 ; if ( locations . length == 1 && locations [ 0 ] == 0 ) return 1 ; int countCycle = 0 ; ArrayList < Integer > visitedLocations = new ArrayList < Integer > ( locations . length ) ; for ( int pos = 0 ; pos < locations . length ; pos ++ ) { int loc = locations [ pos ] ; if ( visitedLocations . contains ( pos ) ) continue ; visitedLocations . add ( pos ) ; if ( loc != - 1 && findRoute ( pos , locations , loc , visitedLocations ) ) { countCycle ++ ; } } return countCycle ; }
va	IDF	public boolean displayModesMatch ( DisplayMode mode1 , DisplayMode mode2 ) { if ( mode1 . getWidth ( ) != mode2 . getWidth ( ) || mode1 . getHeight ( ) != mode2 . getHeight ( ) ) { return false ; } if ( mode1 . getBitDepth ( ) != DisplayMode . BIT_DEPTH_MULTI && mode2 . getBitDepth ( ) != DisplayMode . BIT_DEPTH_MULTI && mode1 . getBitDepth ( ) != mode2 . getBitDepth ( ) ) { return false ; } if ( mode1 . getRefreshRate ( ) != DisplayMode . REFRESH_RATE_UNKNOWN && mode2 . getRefreshRate ( ) != DisplayMode . REFRESH_RATE_UNKNOWN && mode1 . getRefreshRate ( ) != mode2 . getRefreshRate ( ) ) { return false ; } return true ; }
va	KEY	public void init ( ) { }
va	KEY	public synchronized void start ( ) { m_enabled = true ; }
va	KEY	public int getOrderItemID ( ) { return orderItemID ; }
va	KEY	public int unpack ( int packedRGB , int component ) { return packedRGB >> 8 * ( 2 - component ) & 255 ; }
va	KEY	public long getRating ( ) { return rating ; }
va	IDF	public Bateau getBateau ( ) { return this . joueur . getChampDeBataille ( ) . getBloc ( position ) . getBateau ( ) ; }
va	KEY	public static long HYCOMToJavaLong ( long days ) { return days + ( long ) millisToDays ( - HYCOM_OFFSET ) ; }
va	KEY	public JButtonTransparant ( ) { }
va	KEY	public static float ulp ( float x ) { if ( float . isInfinite ( x ) ) { return float . POSITIVE_INFINITY ; } return abs ( x - float . intBitsToFloat ( float . floatToIntBits ( x ) ^ 1 ) ) ; }
va	KEY	public int dequeue ( ) { if ( this . isEmpty ( ) ) { return - 1 ; } else { int res = this . front . value ; if ( this . front . previous != null ) this . front . previous . next = null ; this . front = this . front . previous ; return res ; } }
va	IDF	public void dumpArgStats ( ) { System . out . println ( ) ; for ( int i = 0 ; i < numArgs ; ++ i ) { System . out . printf ( "\t%s  %.2f (%d/%d)%n" , argLabels [ i ] , argAppearCnts [ i ] / ( argFreqCnts [ i ] + 1e-20 ) , argAppearCnts [ i ] , argFreqCnts [ i ] ) ; } System . out . println ( ) ; }
va	IDF	private void emitReverse ( ) { reverse . popAll ( out ) ; }
va	IDF	static CommandLine hgUpdate ( String pathToHg , String folder ) { return new CommandLine ( pathToHg , "pull" ) . workingDir ( folder ) ; }
va	IDF	public ArtistSearchResult ( Main main ) { initComponents ( ) ; this . main = main ; this . setVisible ( false ) ; }
va	KEY	public long getId ( ) { return id ; }
va	IDF	public static void main ( String [ ] args ) { evBus = new EventBus ( ) ; Logger log1 = new Logger ( ) ; evBus . register ( log1 ) ; Game game = new Game ( evBus ) ; game . run ( ) ; }
va	IDF	public void meta ( MetaMessage event ) { if ( event . getType ( ) == END_OF_TRACK_MESSAGE ) { if ( sequencer != null && sequencer . isOpen ( ) && loop ) { sequencer . setTickPosition ( 0 ) ; sequencer . start ( ) ; } } }
va	KEY	public void incrementRice ( ) { numOneRiceTile ++ ; }
va	KEY	@ BeforeMethod public void setUpMethod ( ) throws Exception { }
va	KEY	public int getBeginValue ( ) { return this . begin . value ; }
va	KEY	private boolean isInLeftRange ( final int x ) { if ( x < clickableRange ) { return true ; } return false ; }
va	IDF	public void doSomething ( ) { final String x = "localexample" ; class Local { public void doSomething ( ) { System . out . println ( x ) ; } } Local l = new Local ( ) ; l . doSomething ( ) ; }
va	KEY	public int getId ( ) { return id ; }
va	IDF	public boolean beforeUpdate ( Connection connection , int nbLigne , ReportTrigger report , Line line ) { LOGGER . log ( Level . INFO , "beforeUpdate : " + nbLigne ) ; return true ; }
va	KEY	public Remito ( ) { }
va	IDF	@ XmlElementDecl ( namespace = "http://api.soap.mytxtbuddy.com/" , name = "getSenderNames" ) public JAXBElement < GetSenderNames > createGetSenderNames ( GetSenderNames value ) { return new JAXBElement < GetSenderNames > ( _GetSenderNames_QNAME , GetSenderNames . class , null , value ) ; }
va	IDF	public boolean getBoolean ( int index ) throws JSONException { Object object = this . get ( index ) ; if ( object . equals ( boolean . false ) || ( object instanceof String && ( ( String ) object ) . equalsIgnoreCase ( "false" ) ) ) { return false ; } else if ( object . equals ( boolean . true ) || ( object instanceof String && ( ( String ) object ) . equalsIgnoreCase ( "true" ) ) ) { return true ; } throw new JSONException ( "JSONArray[" + index + "] is not a boolean." ) ; }
va	IDF	private static void copyFileUsingStream ( File source , File dest ) throws IOException { InputStream is = null ; OutputStream os = null ; try { is = new FileInputStream ( source ) ; os = new FileOutputStream ( dest ) ; byte [ ] buffer = new byte [ 1024 ] ; int length ; while ( ( length = is . read ( buffer ) ) > 0 ) { os . write ( buffer , 0 , length ) ; } } finally { is . close ( ) ; os . close ( ) ; } }
va	IDF	@ Override public void actionPerformed ( ActionEvent e ) { enableEndSeqNumberComponents ( endCheckBox . isSelected ( ) ) ; }
va	IDF	private boolean verticalLineTo ( Graphics2D g , Connector c , Point ep ) { Point p = c . getDirectP ( ) ; Point tp ; if ( c . isVertical ( ) ) tp = new Point ( ep . x , p . y ) ; else tp = new Point ( p . x , ep . y ) ; if ( eFrom . intersects ( tp , p ) || eTo . intersects ( tp , p ) || eFrom . intersects ( tp , ep ) || eTo . intersects ( tp , ep ) ) return false ; drawLine ( g , p , tp ) ; drawLine ( g , tp , ep ) ; return true ; }
va	KEY	public FiltroSaldoMenorQue100Reais ( ) { }
va	IDF	@ Override public ComplexValue subtract ( ComplexValue a ) { return new ComplexValue ( cv . re - a . re , cv . im - a . im ) ; }
va	IDF	public static void main ( String [ ] args ) { TreeNode root1 = createTree1 ( ) ; TreeNode root2 = createTree1 ( ) ; TreeNode oneNode = new TreeNode ( 1 ) ; Solution s = new Solution ( ) ; System . out . println ( s . isSameTree ( oneNode , null ) ) ; }
va	IDF	private void quitjButton1ActionPerformed ( java . awt . event . ActionEvent evt ) { this . dispose ( ) ; }
va	IDF	private String getSupportLinkFormalExpression ( LinkedList < Link > support_link_set ) { String result = "" ; for ( Link link : support_link_set ) { result += link . getFormalExpressions ( ) + "\n" ; } return result ; }
va	KEY	public void setSpeedFactor ( double speedFactor ) { this . speedFactor = speedFactor ; }
va	KEY	public float getY ( float alpha ) { return 0 ; }
va	KEY	public void setQtiteStock ( int quantite ) { this . qtiteStock = quantite ; }
va	KEY	public abstract boolean getCell ( int col , int row ) ;
va	IDF	public String toString ( ) { return symbol . toString ( ) ; }
va	IDF	@ Override protected Value doSelect ( String colName ) { return tuple . select ( allAliases . get ( colName ) ) ; }
va	IDF	public QueryDefinition ( Node node ) throws Exception { this . validate = true ; this . node = node ; }
va	IDF	@ Override public int hashCode ( ) { final int prime = 31 ; int result = 1 ; result = prime * result + ( ( building == null ) ? 0 : building . hashCode ( ) ) ; result = prime * result + ( ( roomNumber == null ) ? 0 : roomNumber . hashCode ( ) ) ; return result ; }
va	KEY	public void childStarted ( ) { runningChildren ++ ; }
va	IDF	public Response ( JSONObject jsonObject ) { jsonResponse = jsonObject ; }
va	KEY	public static DateResultSetMapper getInstance ( ) { return instance ; }
va	IDF	private void drawLasers ( Graphics2D g , TileMap map , int offsetX , int offsetY ) { Iterator l = map . getLasers ( ) ; while ( l . hasNext ( ) ) { Laser laser = ( Laser ) l . next ( ) ; Line2D line = laser . getLine ( ) ; int x1 = ( int ) Math . round ( line . getX1 ( ) ) + offsetX ; int y1 = ( int ) Math . round ( line . getY1 ( ) ) + offsetY ; int x2 = ( int ) Math . round ( line . getX2 ( ) ) + offsetX ; int y2 = ( int ) Math . round ( line . getY2 ( ) ) + offsetY ; if ( laser . parent instanceof Turret ) { Turret turret = ( Turret ) laser . parent ; Sprite target = ( Sprite ) turret . getTarget ( ) ; if ( target instanceof Ship ) { Ship s = ( Ship ) target ; x2 = ( int ) Math . round ( s . getX ( ) - s . getWidth ( ) / 2 ) + offsetX ; y2 = ( int ) Math . round ( s . getY ( ) - s . getHeight ( ) / 2 ) + offsetY ; } } Color origColor = g . getColor ( ) ; g . setColor ( laser . color ) ; Stroke stroke = g . getStroke ( ) ; g . setStroke ( new BasicStroke ( ( float ) laser . width ) ) ; g . drawLine ( x1 , y1 , x2 , y2 ) ; g . setStroke ( stroke ) ; g . setColor ( origColor ) ; } }
va	KEY	public int getNumSymbols ( ) { return this . numSymbols ; }
va	KEY	public boolean isFlying ( ) { return false ; }
va	KEY	public void reset ( ) { this . difficulty = 0 ; this . numCannons = 0 ; this . numEnemies = 0 ; this . numHills = 0 ; this . numJumps = 0 ; this . numTubes = 0 ; this . numCoins = 0 ; this . numPowerups = 0 ; this . numCoinBlocks = 0 ; this . numEmptyBlocks = 0 ; }
va	IDF	@ Override public void keyTyped ( KeyEvent e ) { }
va	IDF	ClientRequest ( String command ) { this . command = command ; }
va	IDF	public static void allTests ( ) { testDatabase = Services . getDataAccess ( ) ; runAllTests ( ) ; }
va	IDF	public String toString ( ) { StringBuffer ret = new StringBuffer ( ) ; ret . append ( "ua.bionichill.socialnetwork.dto.Profile: " ) ; ret . append ( "idProfile=" + idProfile ) ; ret . append ( "  fName=" + fName ) ; ret . append ( "  surName=" + surName ) ; ret . append ( "  sex=" + sex ) ; ret . append ( "  pict=" + pict ) ; ret . append ( "  introd=" + introd ) ; ret . append ( "  hobby=" + hobby ) ; return ret . toString ( ) ; }
va	IDF	private static < E > void medianOf3Pivot ( E [ ] contents , int left , int right , Comparator < E > comparator ) { int middle = ( left + right ) / 2 ; int l , r , pivot ; if ( comparator . compare ( contents [ right ] , contents [ middle ] ) >= 0 && comparator . compare ( contents [ right ] , contents [ left ] ) >= 0 ) { r = right ; if ( comparator . compare ( contents [ middle ] , contents [ left ] ) >= 0 ) { pivot = middle ; l = left ; } else { pivot = left ; l = middle ; } } else if ( comparator . compare ( contents [ left ] , contents [ middle ] ) >= 0 && comparator . compare ( contents [ left ] , contents [ right ] ) >= 0 ) { r = left ; if ( comparator . compare ( contents [ middle ] , contents [ right ] ) >= 0 ) { pivot = middle ; l = right ; } else { pivot = right ; l = middle ; } } else { r = middle ; if ( comparator . compare ( contents [ left ] , contents [ right ] ) >= 0 ) { pivot = left ; l = right ; } else { pivot = right ; l = left ; } } E temp_l = contents [ l ] ; E temp_r = contents [ r ] ; E temp_pivot = contents [ pivot ] ; contents [ middle ] = contents [ right - 1 ] ; contents [ right - 1 ] = temp_pivot ; contents [ left ] = temp_l ; contents [ right ] = temp_r ; }
va	IDF	@ Override public void locationChanging ( WebBrowserNavigationEvent e ) { super . locationChanging ( e ) ; System . out . println ( e . getNewResourceLocation ( ) ) ; if ( ! e . getNewResourceLocation ( ) . equals ( "http://www.facebook.com/" ) ) { Timer timer = new Timer ( 2000 , new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent arg0 ) { } } ) ; timer . start ( ) ; } }
va	KEY	public int getProposedTo ( ) { return proposedTo ; }
va	IDF	@ SkipValidation public String cancelShowAvailableRooms ( ) { showOnlyFreeRooms = false ; return SUCCESS ; }
va	IDF	@ JsonProperty ( "name" ) public String getName ( ) { return name ; }
va	IDF	@ Override public void endElement ( String uri , String localName , String qName ) { element = null ; }
va	KEY	public boolean saveProfile ( ) { return this . saveProfile ( this . profilePath ) ; }
va	KEY	public BoardBuilder ( ) { }
va	IDF	public void addAll ( final Entity [ ] entities ) { synchronized ( addQueue ) { addQueue . addAll ( Arrays . asList ( entities ) ) ; this . dirtyCache = true ; } }
va	KEY	public FiltroComAberturaMesCorrente ( ) { }
va	IDF	DraughtsState ( BoardState bs ) { this . bs = ( BoardState ) bs . clone ( ) ; }
va	IDF	public int maxSubArray1 ( int [ ] A ) { if ( A == null || A . length == 0 ) return 0 ; int max , sum , left , right ; max = Integer . MIN_VALUE ; sum = 0 ; left = 0 ; right = 0 ; while ( right < A . length ) { sum += A [ right ] ; if ( sum <= 0 ) { sum = 0 ; right ++ ; left = right ; } else { if ( sum > max ) max = sum ; right ++ ; } } return max ; }
va	IDF	public void decreaseLife ( int value ) { life_delay -= value ; if ( life_delay <= 0 ) { life -= 1 ; life_delay += 100 ; } }
va	KEY	public double getLife ( ) { return life ; }
va	IDF	public void actionPerformed ( ActionEvent e ) { if ( e . getActionCommand ( ) . equals ( "ok" ) ) { text = ta . getText ( ) ; dispose ( ) ; } if ( e . getActionCommand ( ) . equals ( "cancel" ) ) { text = null ; dispose ( ) ; } }
va	IDF	@ Override public void Consultar ( ) throws SQLException { try { Conexion . GetInstancia ( ) . Conectar ( ) ; ResultSet rs = Conexion . GetInstancia ( ) . EjecutarConsulta ( "SELECT Nom_Empleado Dir_Empleado Tel_Empleado Ape_Empleado Email_Empleado Tip_Empleado NHT_Empleado NHE_Empleado VPH_Empleado FROM Empleado WHERE CedRuc_Empleado ='" + ObEmpleado . getCedRuc_Persona ( ) + "'" ) ; while ( rs . next ( ) ) { ObEmpleado . setNom_Persona ( rs . getString ( "Nom_Empleado" ) ) ; ObEmpleado . setDir_Persona ( rs . getString ( "Dir_Empleado" ) ) ; ObEmpleado . setTel_Persona ( rs . getString ( "Tel_Empleado" ) ) ; ObEmpleado . setApe_Persona ( rs . getString ( "Ape_Empleado" ) ) ; ObEmpleado . setEmail_Persona ( rs . getString ( "Email_Empleado" ) ) ; ObEmpleado . setTip_Empleado ( rs . getString ( "Tip_Empleado" ) ) ; ObEmpleado . setNHT_Empledo ( rs . getInt ( "NHT_Empleado" ) ) ; ObEmpleado . setNHE_Empleado ( rs . getInt ( "NHE_Empleado" ) ) ; ObEmpleado . setVPH_Empleado ( rs . getDouble ( "VPH_Empleado" ) ) ; } } catch ( SQLException ex ) { throw ex ; } finally { Conexion . GetInstancia ( ) . Desconectar ( ) ; } }
va	KEY	public void setNumSquareCell_Height ( int numsquarecellmainh ) { this . numSquareCell_Height = numsquarecellmainh ; }
va	KEY	public PlaceDeveloperOnBoardAction ( ) { }
va	KEY	public boolean is_returnSpecified ( ) { return local_returnTracker ; }
va	IDF	@ SuppressWarnings ( "unchecked" ) @ Override public JSONObject getJSON ( ) { JSONObject o = new JSONObject ( ) ; o . put ( "x" , x ) ; o . put ( "y" , y ) ; return o ; }
va	KEY	public PortWatcher ( int port ) { super ( false ) ; this . port = port ; }
va	KEY	public ViewContactResponse createViewContactResponse ( ) { return new ViewContactResponse ( ) ; }
va	KEY	public void setOffset ( long value ) { this . offset = value ; }
va	KEY	protected abstract void connectionWithClientEstablished ( INDIClient client ) ;
va	KEY	public long getOffset ( ) { return offset ; }
va	IDF	@ Override protected String getQueueName ( ) { return EVENT_QUEUE ; }
va	IDF	public void setTown ( String town ) { this . town = town ; }
va	KEY	public int getPanelSize ( ) { return panelSize ; }
va	KEY	public void clean ( EFPersistable entity ) { if ( entity != null ) { Entity entityToClean = getEntityObject ( entity ) ; if ( entityToClean != null ) { entityToClean . markClean ( ) ; } else { throw new EntityNotFoundException ( ( long ) - 1 , EFPersistable . class ) ; } } else { throw new EntityNotFoundException ( ( long ) - 1 , EFPersistable . class ) ; } }
va	KEY	public int get_hitpoints ( ) { return _hitpoints ; }
va	IDF	protected void setCurrentDate ( ) { currentDay = getCurrentDay ( ) ; currentMonth = getCurrentMonth ( ) ; currentYear = getCurrentYear ( ) ; }
va	KEY	@ Override public void definirAttaque ( ) { }
va	KEY	public static AsyncLoader getInstance ( ) { if ( asyncLoader == null ) asyncLoader = new AsyncLoader ( ) ; return asyncLoader ; }
va	KEY	public JMenuItem getItemOptions ( ) { return this . item_fichier_options ; }
va	IDF	@ Override public void parseXML ( Document doc ) { Element el = doc . getDocumentElement ( ) ; if ( el . getNodeName ( ) . compareTo ( "INDI" ) != 0 ) { return ; } NodeList nodes = el . getChildNodes ( ) ; for ( int i = 0 ; i < nodes . getLength ( ) ; i ++ ) { Node n = nodes . item ( i ) ; if ( n instanceof Element ) { Element child = ( Element ) n ; parseXMLElement ( child ) ; } } }
va	IDF	public boolean existeBloc ( Position p ) { Iterator iterateur = emplacements_bateau . iterator ( ) ; while ( iterateur . hasNext ( ) ) { Bloc b = ( Bloc ) iterateur . next ( ) ; if ( b . getPosition ( ) . equals ( p ) ) return true ; } return false ; }
va	IDF	@ Basic @ Column ( name = "name" ) public String getName ( ) { return name ; }
va	IDF	@ Override public void Consultar ( ) throws SQLException { try { Conexion . GetInstancia ( ) . Conectar ( ) ; ResultSet rs = Conexion . GetInstancia ( ) . EjecutarConsulta ( "SELECT Nom_Proveedor Dir_Proveedor Tel_Proveedor Ape_Proveedor Email_Proveedor Emp_Proveedor RucEmp_Proveedor DirEmp_Proveedor TelEmp_Proveedor Tip_Proveedor SalPen_Proveedor FROM Proveedor WHERE CedRucProveedor ='" + ObProveedor . getCedRuc_Persona ( ) + "'" ) ; while ( rs . next ( ) ) { ObProveedor . setNom_Persona ( rs . getString ( "Nom_Proveedor" ) ) ; ObProveedor . setDir_Persona ( rs . getString ( "Dir_Proveedor" ) ) ; ObProveedor . setTel_Persona ( rs . getString ( "Tel_Proveedor" ) ) ; ObProveedor . setApe_Persona ( rs . getString ( "Ape_Proveedor" ) ) ; ObProveedor . setEmail_Persona ( rs . getString ( "Email_Proveedor" ) ) ; ObProveedor . setEmp_Proveedor ( rs . getString ( "Emp_Proveedor" ) ) ; ObProveedor . setRucEmp_Proveedor ( rs . getInt ( "RucEmp_Proveedor" ) ) ; ObProveedor . setDirEmp_Proveedor ( rs . getString ( "DirEmp_Proveedor" ) ) ; ObProveedor . setTelEmp_Proveedor ( "TelEmp_Proveedor" ) ; ObProveedor . setTip_Proveedor ( rs . getString ( "Tip_Proveedor" ) ) ; ObProveedor . setSalPen_Proveedor ( rs . getShort ( "SalPen_Proveedor" ) ) ; } } catch ( SQLException ex ) { throw ex ; } finally { Conexion . GetInstancia ( ) . Desconectar ( ) ; } }
va	KEY	boolean isProcedimento ( ) ;
va	IDF	@ Test public void testGetBaseNameWithExtension ( ) { assertEquals ( "test.123" , FileNameUtils . getBaseName ( FileNameUtils . normalize ( "/home/test.123.txt" ) ) ) ; }
va	KEY	private void preferences ( ) { }
va	KEY	public void setDt ( double dt ) { this . dt = dt ; }
va	KEY	public ChezyMath ( ) { }
va	KEY	public void setHeight ( int height ) { this . height = height ; }
va	KEY	public static void clearAspectQueue ( ) { aspects = new ArrayDeque < Aspect > ( ) ; }
va	IDF	public void testShortUrl ( ) { try { ShortUrl a = new ShortUrl ( "0000000" ) ; System . out . println ( "Success" ) ; int x = 0 ; while ( true ) { a = a . getNext ( ) ; System . out . println ( a . getUrlString ( ) ) ; x ++ ; if ( x > 10000 ) break ; } } catch ( InvalidShortUrlException e ) { System . out . println ( e . getMessage ( ) ) ; } catch ( ShortUrlOverflow e ) { System . out . println ( e . getMessage ( ) ) ; } }
va	KEY	public double getLogicFPS ( ) { return logicFPS . getCurrentFPS ( ) ; }
va	KEY	public double getI ( ) { return kI . getDouble ( ) ; }
va	KEY	public boolean canUseVillage ( ) { return numOneVillageTile > 0 && getAvailableActionPoints ( true ) > 0 ; }
va	KEY	protected void interrupted ( ) { }
va	KEY	public void windowLostFocus ( final WindowEvent e ) { }
va	IDF	public void setInputFile ( File input ) { inf = input ; try { in = new DataInputStream ( new BufferedInputStream ( new GZIPInputStream ( new FileInputStream ( input ) ) ) ) ; } catch ( FileNotFoundException e ) { e . printStackTrace ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }
va	IDF	public static void main ( String [ ] args ) { int [ ] data = DataUtils . randomIntArray ( 1000 , 10 ) ; System . out . println ( StringUtils . toString ( data ) ) ; System . out . println ( "-------TO SORT--------" ) ; BubbleSort . bubbleSortMin ( data ) ; }
va	KEY	public double getMinx ( ) { return minx ; }
va	KEY	public void photography ( ) { }
va	KEY	public int getNcols ( ) { return c ; }
va	IDF	public MenuItem ( String name , String description , boolean vegetarian , double price ) { this . name = name ; this . description = description ; this . vegetarian = vegetarian ; this . price = price ; }
va	IDF	@ Override public void actionPerformed ( ActionEvent e ) { JFileChooser fileChooser = new JFileChooser ( ) ; int returnValue = fileChooser . showOpenDialog ( null ) ; if ( returnValue == JFileChooser . APPROVE_OPTION ) { File selectedFile = fileChooser . getSelectedFile ( ) ; String absolutePath = selectedFile . getAbsolutePath ( ) ; _selectField1 . setText ( absolutePath ) ; } }
va	KEY	public int getHours ( ) { return hours ; }
va	KEY	public void run ( ) { new MainFrameApp ( ) . setVisible ( true ) ; }
va	KEY	public DrawPalaceCardAction ( ) { }
va	IDF	public List < String > vcsErrors ( ) { return vcsErrors ; }
va	KEY	protected void end ( ) { }
va	IDF	public void setHelpMenuControl ( HelpMenuControl helpMenuControl ) { this . helpMenuControl = helpMenuControl ; }
va	IDF	public void setWorld ( World w ) { world = w ; tilemap = w . getTileMap ( ) ; tileset = tilemap . getTileset ( ) ; cameraX = w . getWidth ( ) / 2 ; cameraY = w . getHeight ( ) / 2 ; tr = new TileRenderer ( tilemap ) ; gm . getEventBus ( ) . register ( tr ) ; ww = ( int ) world . getWidth ( ) ; wh = ( int ) world . getHeight ( ) ; tw = tilemap . getTileWidth ( ) ; th = tilemap . getTileHeight ( ) ; tmw = tilemap . getWidth ( ) ; tmh = tilemap . getHeight ( ) ; entities = gm . getGameEntities ( ) ; refreshTransforms ( ) ; }
va	IDF	public final boolean intersects ( Rectangle2D r ) { return intersects ( r . getX ( ) , r . getY ( ) , r . getWidth ( ) , r . getHeight ( ) ) ; }
va	IDF	@ Override public void enterBoolPar ( @ NotNull EnquantoParser . BoolParContext ctx ) { }
va	IDF	public static double revs2ToMs2 ( double revs2 ) { Robot robot = Configuration . getRobot ( ) ; double wheelDiameter = robot . getWheelDiameter ( ) ; double w = revs2 / robot . getGearRatio ( ) * wheelDiameter * Math . PI ; double ms2 = w * wheelDiameter / 2 ; return ms2 ; }
va	KEY	public static boolean isDoMonitors ( ) { return getBoolean ( "sun.java2d.renderer.doMonitors" , "false" ) ; }
va	IDF	public boolean patternCanBeFlat ( final AngleUnitFlapPattern pattern ) { LayerFlattenability flattenability = new LayerFlattenability ( ) ; LineGapCircle lineGaps = converter . toLineGapCircle ( pattern ) ; return flattenability . holds ( lineGaps ) ; }
va	IDF	public static void setIngelogdeGebruiker ( User user ) { ingelogdeGebruiker = user ; }
va	KEY	public synchronized void xsetLTrepeatable ( boolean flag ) { isLTrepeatable = flag ; }
va	IDF	public String getLastRelease ( ) { StringTokenizer stk = new StringTokenizer ( getLastLine ( ) ) ; return stk . nextToken ( ) ; }
va	IDF	Object [ ] getValues ( ) { return values ; }
va	IDF	static FHashSet < MyInteger > testFHashSet ( Random rand , int i ) { FHashSet < MyInteger > fhs0 = new FHashSet < MyInteger > ( ) ; HashSet < MyInteger > hs0 = new HashSet < MyInteger > ( ) ; for ( int j = 0 ; j < 100 ; ++ j ) { int r = rand . nextInt ( 200 ) ; MyInteger R = r == 57 ? null : new MyInteger ( r ) ; FHashSet < MyInteger > tmp = fhs0 . with ( R ) ; hs0 . add ( R ) ; if ( ! tmp . verify ( ) ) { println ( "FHashSet Verification failure on iteration " + i ) ; println ( fhs0 . dump ( ) ) ; println ( "Adding " + ( R == null ? "null" : "" + R ) ) ; println ( tmp . dump ( ) ) ; exit ( ) ; } if ( tmp . hashCode ( ) != hs0 . hashCode ( ) ) { println ( "FHashSet hashCode failed on fhs0 on iteration " + i ) ; println ( tmp ) ; println ( hs0 ) ; println ( "Adding " + R + "; " + tmp . hashCode ( ) + "  " + hs0 . hashCode ( ) ) ; exit ( ) ; } if ( ! fhs0 . isSubset ( tmp ) || ! tmp . isSuperset ( fhs0 ) || ( ! fhs0 . contains ( R ) && ( tmp . isSubset ( fhs0 ) || fhs0 . isSuperset ( tmp ) ) ) ) { println ( "FHashSet is{Sub Super}set failed (fhs0) on iteration " + i ) ; println ( fhs0 . isSubset ( tmp ) + "  " + tmp . isSuperset ( fhs0 ) + "  " + fhs0 . contains ( R ) + "  " + tmp . isSubset ( fhs0 ) + "  " + fhs0 . isSuperset ( tmp ) + "; " + R ) ; println ( fhs0 ) ; println ( tmp ) ; exit ( ) ; } fhs0 = tmp ; } FHashSet < MyInteger > fhs1 = new FHashSet < MyInteger > ( ) ; HashSet < MyInteger > hs1 = new HashSet < MyInteger > ( ) ; for ( int j = 0 ; j < 100 ; ++ j ) { int r = rand . nextInt ( 200 ) ; MyInteger R = r == 57 ? null : new MyInteger ( r ) ; FHashSet < MyInteger > tmp = fhs1 . with ( R ) ; hs1 . add ( R ) ; if ( ! tmp . verify ( ) ) { println ( "FHashSet Verification failure on iteration " + i ) ; println ( fhs1 . dump ( ) ) ; println ( "Adding " + R ) ; println ( tmp . dump ( ) ) ; exit ( ) ; } if ( tmp . hashCode ( ) != hs1 . hashCode ( ) ) { println ( "FHashSet hashCode failed on fhs1 on iteration " + i ) ; println ( tmp ) ; println ( hs1 ) ; println ( "Adding " + R + "; " + tmp . hashCode ( ) + "  " + hs1 . hashCode ( ) ) ; exit ( ) ; } if ( ! fhs1 . isSubset ( tmp ) || ! tmp . isSuperset ( fhs1 ) || ( ! fhs1 . contains ( R ) && ( tmp . isSubset ( fhs1 ) || fhs1 . isSuperset ( tmp ) ) ) ) { println ( "FHashSet is{Sub Super}set failed (fhs1) on iteration " + i ) ; println ( fhs1 . isSubset ( tmp ) + "  " + tmp . isSuperset ( fhs1 ) + "  " + fhs1 . contains ( R ) + "  " + tmp . isSubset ( fhs1 ) + "  " + fhs1 . isSuperset ( tmp ) + "; " + R ) ; println ( fhs1 ) ; println ( tmp ) ; exit ( ) ; } fhs1 = tmp ; } for ( int j = 0 ; j < 20 ; ++ j ) { int r = rand . nextInt ( 200 ) ; MyInteger R = r == 57 ? null : new MyInteger ( r ) ; FHashSet < MyInteger > tmp = fhs0 . less ( R ) ; hs0 . remove ( R ) ; if ( ! tmp . verify ( ) ) { println ( "FHashSet Verification failure on iteration " + i ) ; println ( fhs0 . dump ( ) ) ; println ( "Removing " + ( R == null ? "null" : "" + R ) ) ; println ( tmp . dump ( ) ) ; exit ( ) ; } fhs0 = tmp ; } for ( int j = 0 ; j < 20 ; ++ j ) { int r = rand . nextInt ( 200 ) ; MyInteger R = r == 57 ? null : new MyInteger ( r ) ; FHashSet < MyInteger > tmp = fhs1 . less ( R ) ; hs1 . remove ( R ) ; if ( ! tmp . verify ( ) ) { println ( "FHashSet Verification failure on iteration " + i ) ; println ( fhs1 . dump ( ) ) ; println ( "Removing " + ( R == null ? "null" : "" + R ) ) ; println ( tmp . dump ( ) ) ; exit ( ) ; } if ( tmp . hashCode ( ) != hs1 . hashCode ( ) ) { println ( "FHashSet hashCode failed on fhs1 on iteration " + i ) ; println ( tmp ) ; println ( hs1 ) ; println ( "Removing " + R + "; " + tmp . hashCode ( ) + "  " + hs1 . hashCode ( ) ) ; exit ( ) ; } if ( ! tmp . equals ( hs1 ) ) { println ( "FHashSet equality failed on fhs1 on iteration " + i ) ; println ( tmp ) ; println ( hs1 ) ; println ( new FHashSet < MyInteger > ( hs1 ) ) ; println ( "Removing " + R + "; " + tmp . hashCode ( ) + "  " + hs1 . hashCode ( ) ) ; exit ( ) ; } fhs1 = tmp ; } if ( fhs0 . hashCode ( ) != hs0 . hashCode ( ) ) { println ( "FHashSet hashCode failed on fhs0 on iteration " + i ) ; println ( fhs0 ) ; println ( hs0 ) ; exit ( ) ; } if ( fhs1 . hashCode ( ) != hs1 . hashCode ( ) ) { println ( "FHashSet hashCode failed on fhs1 on iteration " + i ) ; exit ( ) ; } if ( ! fhs0 . equals ( hs0 ) ) { println ( "FHashSet Equality failed (fhs0  A) on iteration " + i ) ; println ( fhs0 ) ; println ( fhs0 . dump ( ) ) ; println ( new TreeSet < MyInteger > ( hs0 ) ) ; exit ( ) ; } if ( ! fhs0 . equals ( new FHashSet < MyInteger > ( hs0 ) ) ) { println ( "FHashSet Equality failed (fhs0  B) on iteration " + i ) ; println ( fhs0 ) ; println ( fhs0 . dump ( ) ) ; FHashSet < MyInteger > nfhs0 = new FHashSet < MyInteger > ( hs0 ) ; println ( nfhs0 ) ; println ( nfhs0 . dump ( ) ) ; exit ( ) ; } if ( ! fhs0 . equals ( new FHashSet < MyInteger > ( new ArrayList < MyInteger > ( hs0 ) ) ) ) { println ( "FHashSet construction from ArrayList failed (fhs0) on iteration " + i ) ; exit ( ) ; } if ( ! fhs0 . equals ( new FHashSet < MyInteger > ( hs0 . toArray ( new MyInteger [ 0 ] ) ) ) ) { println ( "FHashSet construction from array failed (fhs0) on iteration " + i ) ; exit ( ) ; } if ( ! fhs1 . equals ( hs1 ) ) { println ( "FHashSet Equality failed (fhs1  A) on iteration " + i ) ; println ( fhs1 ) ; println ( hs1 ) ; println ( new FHashSet < MyInteger > ( hs1 ) ) ; exit ( ) ; } if ( ! fhs1 . equals ( new FHashSet < MyInteger > ( hs1 . toArray ( new MyInteger [ 0 ] ) ) ) ) { println ( "FHashSet Equality failed (fhs1  B) on iteration " + i ) ; exit ( ) ; } FHashSet < MyInteger > fhsu = fhs0 . union ( fhs1 ) ; HashSet < MyInteger > hsu = ( HashSet < MyInteger > ) hs0 . clone ( ) ; hsu . addAll ( hs1 ) ; if ( ! fhsu . verify ( ) || ! fhsu . equals ( hsu ) ) { println ( "FHashSet Union failed on iteration " + i ) ; println ( fhs0 ) ; println ( fhs1 ) ; if ( ! fhsu . verify ( ) ) println ( fhsu . dump ( ) ) ; println ( fhsu . size ( ) + "  " + hsu . size ( ) ) ; println ( fhsu ) ; println ( hsu ) ; exit ( ) ; } if ( ! fhsu . equals ( new FHashSet < MyInteger > ( hsu ) ) ) { println ( "FHashSet Equality failed (fhsu) on iteration " + i ) ; } FHashSet < MyInteger > fhsi = fhs0 . intersection ( fhs1 ) ; HashSet < MyInteger > hsi = ( HashSet < MyInteger > ) hs0 . clone ( ) ; hsi . retainAll ( hs1 ) ; if ( ! fhsi . verify ( ) || ! fhsi . equals ( hsi ) ) { println ( "FHashSet Intersection failed on iteration " + i ) ; println ( fhs0 ) ; println ( fhs0 . dump ( ) ) ; println ( fhs1 ) ; println ( fhs1 . dump ( ) ) ; if ( ! fhsi . verify ( ) ) println ( fhsi . dump ( ) ) ; println ( fhsi . size ( ) + "  " + hsi . size ( ) ) ; println ( fhsi ) ; println ( new TreeSet < MyInteger > ( hsi ) ) ; exit ( ) ; } if ( ! fhsi . isSubset ( fhs0 ) || ! fhsi . isSubset ( fhs1 ) ) { println ( "FHashSet isSubset failed on iteration " + i ) ; exit ( ) ; } if ( ! fhsi . equals ( new FHashSet < MyInteger > ( hsi ) ) ) { println ( "FHashSet Equality failed (fhsi) on iteration " + i ) ; } FHashSet < MyInteger > fhsd = fhs0 . difference ( fhs1 ) ; HashSet < MyInteger > hsd = ( HashSet < MyInteger > ) hs0 . clone ( ) ; hsd . removeAll ( hs1 ) ; if ( ! fhsd . verify ( ) || ! fhsd . equals ( hsd ) ) { println ( "FHashSet Difference failed on iteration " + i ) ; println ( fhs0 ) ; println ( ( fhs0 ) . dump ( ) ) ; println ( fhs1 ) ; println ( fhs1 . dump ( ) ) ; println ( fhsd . size ( ) + "  " + hsd . size ( ) ) ; println ( fhsd ) ; println ( fhsd . dump ( ) ) ; println ( hsd ) ; exit ( ) ; } if ( ! fhsd . equals ( new FHashSet < MyInteger > ( hsd ) ) ) { println ( "FHashSet Equality failed (fhsd) on iteration " + i ) ; } FHashSet < MyInteger > nfhs0 = new FHashSet < MyInteger > ( fhs0 ) ; nfhs0 = nfhs0 . less ( pick ( rand , nfhs0 ) ) ; FHashSet < MyInteger > fhs0a = fhs0 . less ( pick ( rand , fhs0 ) ) ; if ( sgn ( fhs0a . compareTo ( nfhs0 ) ) != compare ( fhs0a , nfhs0 ) ) { println ( "FHashSet Compare failed (fhs0) on iteration " + i ) ; println ( fhs0a . compareTo ( nfhs0 ) + "  " + compare ( fhs0a , nfhs0 ) ) ; println ( fhs0a ) ; println ( fhs0a . dump ( ) ) ; println ( nfhs0 ) ; println ( nfhs0 . dump ( ) ) ; exit ( ) ; } if ( fhs0a . equals ( nfhs0 ) != equals ( fhs0a , nfhs0 ) ) { println ( "FHashSet equality failed (fhs0a) on iteration " + i ) ; exit ( ) ; } FHashSet < MyInteger > nfhs1 = new FHashSet < MyInteger > ( fhs1 ) ; nfhs1 = nfhs1 . less ( pick ( rand , nfhs1 ) ) ; FHashSet < MyInteger > fhs1a = fhs1 . less ( pick ( rand , fhs1 ) ) ; if ( sgn ( fhs1a . compareTo ( nfhs1 ) ) != compare ( fhs1a , nfhs1 ) ) { println ( "FHashSet Compare failed (fhs1) on iteration " + i ) ; exit ( ) ; } if ( fhs1a . equals ( nfhs1 ) != equals ( fhs1a , nfhs1 ) ) { println ( "FHashSet equality failed (fhs1a) on iteration " + i ) ; exit ( ) ; } while ( ! fhs0 . isEmpty ( ) ) { MyInteger x = fhs0 . arb ( ) ; if ( ! fhs0 . contains ( x ) || ! hs0 . contains ( x ) ) { println ( "FHashSet arb/contains failed on iteration " + i ) ; exit ( ) ; } fhs0 = fhs0 . less ( x ) ; hs0 . remove ( x ) ; if ( hs0 . isEmpty ( ) != fhs0 . isEmpty ( ) ) { println ( "FHashSet less/isEmpty failed on iteration " + i ) ; exit ( ) ; } } if ( i % 50 == 0 ) { try { FSet < MyInteger > fhsser = ( i == 0 ? fhs0 : fhs1 ) ; FileOutputStream fos = new FileOutputStream ( "fhs.tmp" ) ; ObjectOutputStream oos = new ObjectOutputStream ( fos ) ; oos . writeObject ( fhsser ) ; oos . close ( ) ; FileInputStream fis = new FileInputStream ( "fhs.tmp" ) ; ObjectInputStream ois = new ObjectInputStream ( fis ) ; FSet < MyInteger > nfhsser = ( FSet < MyInteger > ) ois . readObject ( ) ; ois . close ( ) ; if ( ! fhsser . equals ( nfhsser ) || fhsser . hashCode ( ) != nfhsser . hashCode ( ) ) { println ( "FHashSet read/write failed on iteration " + i ) ; exit ( ) ; } } catch ( IOException e ) { println ( "FHashSet read/write: exception " + e ) ; exit ( ) ; } catch ( ClassNotFoundException e ) { println ( "FHashSet read/write: exception " + e ) ; } } return fhs1 ; }
va	KEY	public synchronized void xassignR5KeyCode ( int code ) { r5 = code ; }
va	IDF	private static double sendRequest ( String urlString ) throws MalformedURLException , IOException { BufferedReader buffer = null ; InputStream inputStream = null ; InputStreamReader inputStreamReader = null ; try { buffer = null ; URL url = new URL ( urlString ) ; inputStream = url . openStream ( ) ; inputStreamReader = new InputStreamReader ( inputStream ) ; buffer = new BufferedReader ( inputStreamReader ) ; return parseBuffer ( buffer ) ; } finally { if ( buffer != null ) buffer . close ( ) ; if ( inputStream != null ) inputStream . close ( ) ; if ( inputStreamReader != null ) inputStreamReader . close ( ) ; } }
va	KEY	public double getPriceLevel3 ( ) { return priceLevel3 ; }
va	KEY	public static String getActionName ( int action ) { switch ( action ) { case 0 : return "Scissor" ; case 1 : return "Rock" ; case 2 : return "Paper" ; default : return "Error" ; } }
va	KEY	public int getTransporte ( ) { return transporte ; }
va	IDF	public String login ( User user , Map < String , Object > session ) throws ServiceException { String email = user . getEmail ( ) + SysConfig . getConfig ( SysConfig . EMAIL_SUFFIX ) ; String password = user . getUserPWD ( ) ; String relPwd = MD5 . getMD5 ( email + password ) ; User u = new User ( ) ; u . setEmail ( email ) ; u . setUserPWD ( password ) ; u . setUserState ( OtherConstants . STATE_YES ) ; User fu = this . findUserByEmail ( u ) ; if ( fu == null ) { logger . info ( "Email is not exist !" ) ; return OtherConstants . EMAIL_NOT_EXIST ; } if ( ! fu . getUserPWD ( ) . equals ( relPwd ) ) { logger . info ( "Password is error !" ) ; return OtherConstants . PASSWORD_ERROR ; } String userID = fu . getId ( ) ; try { @ SuppressWarnings ( "rawtypes" ) List list = groupDaoImpl . query ( fu , SqlConstants . GROUP_QUERY_BY_UID ) ; List < Group > groups = new ArrayList < Group > ( ) ; int temp = 0 ; for ( Object object : list ) { Group group = ( Group ) object ; int groupID = Integer . parseInt ( group . getId ( ) ) ; if ( groupID > 0 ) { temp = groupID ; } groups . add ( group ) ; } fu . setGroups ( groups ) ; fu . setAuth ( String . valueOf ( temp ) ) ; } catch ( DBException e ) { logger . error ( OtherConstants . DB_ERROR , e ) ; return OtherConstants . DB_ERROR ; } Money money = new Money ( ) ; money . setUserID ( userID ) ; try { @ SuppressWarnings ( "rawtypes" ) List list = moneyDaoImpl . query ( money , SqlConstants . MONEY_FIND_BY_UID ) ; if ( list != null && list . size ( ) > 0 ) { money = ( Money ) list . get ( 0 ) ; fu . setMoneyValue ( money . getMoneyValue ( ) ) ; } else { fu . setMoneyValue ( 0 ) ; } } catch ( DBException e ) { logger . error ( OtherConstants . DB_ERROR , e ) ; return OtherConstants . DB_ERROR ; } session . put ( OtherConstants . CURRENT_USER , fu ) ; return null ; }
va	IDF	protected void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { boolean canUpdate = true ; try { HttpSession session = request . getSession ( true ) ; TrasporteurBean bean = ( TrasporteurBean ) session . getAttribute ( "user" ) ; } catch ( NullPointerException e ) { request . setAttribute ( "error" , MappedErrors . AUTHENTIFICATION_REQUIRED ) ; canUpdate = false ; } if ( canUpdate ) { Pattern pattern = Pattern . compile ( SecurityPattern . STANDARD_PATTERN ) ; Matcher matcher = pattern . matcher ( request . getParameter ( MappedNames . NOM ) . toString ( ) ) ; if ( ! matcher . matches ( ) ) { request . setAttribute ( "error" , MappedErrors . NOM_INVALIDE ) ; canUpdate = false ; } matcher = pattern . matcher ( request . getParameter ( MappedNames . PRENOM ) . toString ( ) ) ; if ( ! matcher . matches ( ) ) { request . setAttribute ( "error" , MappedErrors . PRENOM_INVALIDE ) ; canUpdate = false ; } pattern = Pattern . compile ( SecurityPattern . PASSWORD_PATTERN ) ; matcher = pattern . matcher ( request . getParameter ( MappedNames . PASSWORD ) . toString ( ) ) ; if ( ! matcher . matches ( ) ) { request . setAttribute ( "error" , MappedErrors . PASSWORD_INVALIDE ) ; canUpdate = false ; } pattern = Pattern . compile ( SecurityPattern . PASSWORD_PATTERN ) ; matcher = pattern . matcher ( request . getParameter ( MappedNames . PASSWORDCONFIRMATION ) . toString ( ) ) ; if ( ! matcher . matches ( ) ) { request . setAttribute ( "error" , MappedErrors . PASSWORD_INVALIDE ) ; canUpdate = false ; } if ( ! request . getParameter ( MappedNames . PASSWORDCONFIRMATION ) . toString ( ) . equals ( request . getParameter ( MappedNames . PASSWORD ) . toString ( ) ) ) { request . setAttribute ( "error" , MappedErrors . PASSWORD_NOT_MATCH ) ; canUpdate = false ; } pattern = Pattern . compile ( SecurityPattern . EMAIL_PATTERN ) ; matcher = pattern . matcher ( request . getParameter ( MappedNames . MAIL ) . toString ( ) ) ; if ( ! matcher . matches ( ) ) { request . setAttribute ( "error" , MappedErrors . MAIL_INVALIDE ) ; canUpdate = false ; } if ( canUpdate ) { Trasporteur metier = new Trasporteur ( ) ; try { TransporteurDAO dao = new TransporteurDAO ( ) ; TrasporteurBean bean = dao . getByMail ( ( ( TrasporteurBean ) ( request . getSession ( true ) . getAttribute ( "user" ) ) ) . getMail ( ) ) ; bean . setNom ( ( request . getParameter ( MappedNames . NOM ) . toString ( ) ) ) ; bean . setPrenom ( request . getParameter ( MappedNames . PRENOM ) . toString ( ) ) ; bean . setPassword ( request . getParameter ( MappedNames . PASSWORD ) . toString ( ) ) ; bean . setMail ( request . getParameter ( MappedNames . MAIL ) . toString ( ) ) ; dao . update ( bean ) ; request . setAttribute ( "message" , MappedMessages . ACCOUNT_UPDATED ) ; this . getServletContext ( ) . getRequestDispatcher ( MappedJsp . ACCOUNT_JSP ) . forward ( request , response ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; request . setAttribute ( "error" , MappedErrors . GENERAL_ERROR ) ; this . getServletContext ( ) . getRequestDispatcher ( MappedJsp . UPDATE_ACCOUNT_JSP ) . forward ( request , response ) ; } } else { this . getServletContext ( ) . getRequestDispatcher ( MappedJsp . UPDATE_ACCOUNT_JSP ) . forward ( request , response ) ; } } else { request . setAttribute ( "error" , MappedErrors . AUTHENTIFICATION_REQUIRED ) ; this . getServletContext ( ) . getRequestDispatcher ( MappedJsp . LOGIN_JSP ) . forward ( request , response ) ; } }
va	IDF	public Recon ( Board board , Player owner , Position position ) { super ( board , "Recon" , "RC" , owner , position ) ; _cost = 4000 ; _unitType = UnitType . LAND ; _movementType = MovementType . TIRES ; _moveRange = 8 ; _maxFuel = 80 ; _visionDefault = 5 ; _weaponSecondary = new Weapon ( 25 , 0 , 1 ) ; _pieceTypeProperty = new SimpleStringProperty ( _unitType . toString ( ) ) ; }
va	IDF	@ Override public void mousePressed ( MouseEvent e ) { handleMousePressed ( e ) ; }
va	KEY	public int getPlayerIndex ( ) { return this . indexOfCurrentPlayer ; }
va	IDF	public String toCsv ( ) { return Base . PrintStringNull ( this . getLastName ( ) ) + " " + Base . PrintStringNull ( this . getFirstName ( ) ) + " " + " " + this . getHousingInformation ( ) . toCsv ( ) + " " + this . HomePhone ( ) + " " + this . WorkPhone ( ) + " " + this . MobilePhone ( ) + " " + this . TTY ( ) + " " + this . Fax ( ) + " " + Base . PrintStringNull ( this . emergencyContactName ) + " " + Base . PrintStringNull ( this . emergencyContactPhone ) + " " + super . dateFormat . format ( this . getDate ( ) ) ; }
va	IDF	@ Override public void setPresenter ( TopicPresenter presenter ) { this . presenter = presenter ; }
va	IDF	public static double Distance2Points ( Point2D p1 , Point2D p2 ) { double x = p1 . getX ( ) ; double y = p1 . getY ( ) ; double _x = p2 . getX ( ) ; double _y = p2 . getY ( ) ; double dx = _x - x ; double dy = _y - y ; double distance = Math . sqrt ( Math . pow ( dx , 2 ) + Math . pow ( dy , 2 ) ) ; return distance ; }
va	IDF	@ Test public void ehPromocao ( ) throws CasaOcupadaException { tabuleiro . colocarPeca ( new Posicao ( 1 , 7 ) , peaoBranco ) ; assert . assertTrue ( tabuleiro . ehPromocao ( new Posicao ( 1 , 7 ) ) ) ; tabuleiro . colocarPeca ( new Posicao ( 1 , 2 ) , peaoBranco ) ; assert . assertFalse ( tabuleiro . ehPromocao ( new Posicao ( 1 , 2 ) ) ) ; tabuleiro . colocarPeca ( new Posicao ( 8 , 2 ) , peaoPreto ) ; assert . assertTrue ( tabuleiro . ehPromocao ( new Posicao ( 8 , 2 ) ) ) ; tabuleiro . colocarPeca ( new Posicao ( 8 , 7 ) , peaoPreto ) ; assert . assertFalse ( tabuleiro . ehPromocao ( new Posicao ( 8 , 7 ) ) ) ; tabuleiro . colocarPeca ( new Posicao ( 1 , 8 ) , cavaloPreto ) ; assert . assertFalse ( tabuleiro . ehPromocao ( new Posicao ( 1 , 7 ) ) ) ; tabuleiro . colocarPeca ( new Posicao ( 2 , 8 ) , cavaloPreto ) ; assert . assertTrue ( tabuleiro . ehPromocao ( new Posicao ( 1 , 7 ) ) ) ; tabuleiro . colocarPeca ( new Posicao ( 8 , 1 ) , cavaloBranco ) ; assert . assertFalse ( tabuleiro . ehPromocao ( new Posicao ( 8 , 2 ) ) ) ; tabuleiro . colocarPeca ( new Posicao ( 7 , 1 ) , cavaloBranco ) ; assert . assertTrue ( tabuleiro . ehPromocao ( new Posicao ( 8 , 2 ) ) ) ; }
va	IDF	public Maquina ( String nome , TipoCorJogador cor , TipoJogador tipoJogador ) { super ( nome , cor , tipoJogador ) ; }
va	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButton5ActionPerformed ( evt ) ; }
va	KEY	public final void yybegin ( int newState ) { zzLexicalState = newState ; }
va	IDF	public static void play ( boolean [ ] [ ] world ) throws Exception { int userResponse = 0 ; while ( userResponse != q ) { print ( world ) ; userResponse = System . in . read ( ) ; world = nextGeneration ( world ) ; } }
va	KEY	public IntakeForm ( ) { }
va	KEY	@ JsonProperty ( "rating" ) public long getRating ( ) { return rating ; }
va	KEY	public int getNPatches ( ) { return nPatches ; }
va	IDF	private void exit ( WindowEvent evt ) { System . exit ( 0 ) ; }
va	IDF	public List < ContactInfo > getReturn ( ) { if ( _return == null ) { _return = new ArrayList < ContactInfo > ( ) ; } return this . _return ; }
va	IDF	public SeekWaypoint ( Movable subject , double coefficient , int priority ) { super ( subject , coefficient ) ; this . priority = priority ; }
va	KEY	public ConfigParseException ( ) { }
va	IDF	@ Override public void drawMidground ( Graphics g ) { if ( hold != null ) { hold . drawMidground ( g ) ; } }
va	KEY	public void die ( ) { alive = false ; super . interrupt ( ) ; }
va	KEY	public void setIdCategory ( int id_category ) { this . id_category = id_category ; }
va	IDF	@ JsonProperty ( "rating" ) public void setRating ( String rating ) { this . rating = rating ; }
va	IDF	@ Override Predicate < Tuple > makePredicate ( String colName , String val ) { return new ColumnGreaterThan ( colName , double . parseDouble ( val ) ) ; }
va	KEY	public short nextShort ( ) { return ( short ) ( next ( 16 ) ) ; }
va	KEY	public int getProtectionSombre ( ) { return protectionSombre ; }
va	IDF	public DataCount < E > next ( ) { if ( ! hasNext ( ) ) { throw new java . util . NoSuchElementException ( ) ; } BSTNode nextNode = stack . pop ( ) ; if ( nextNode . left != null ) { stack . push ( nextNode . left ) ; } if ( nextNode . right != null ) { stack . push ( nextNode . right ) ; } return new DataCount < E > ( nextNode . data , nextNode . count ) ; }
va	KEY	private static float tosubpixy ( final float pix_y ) { return f_SUBPIXEL_POSITIONS_Y * pix_y - 0.5f ; }
va	KEY	public int getWordsLeft ( ) { return wordsLeft ; }
va	IDF	public String toString2 ( ) { String s = "" ; for ( int i = 0 ; i < irrigationMap . length ; i ++ ) { for ( int j = 0 ; j < irrigationMap [ i ] . length ; j ++ ) { if ( irrigationMap [ i ] [ j ] == null ) { s += "N " ; } s += irrigationMap [ i ] [ j ] . getElevation ( ) + " " ; } s += "\n" ; } return s ; }
va	KEY	public boolean isSecondRequestDone ( ) { return secondRequestDone ; }
va	KEY	public boolean nextBoolean ( ) { return next ( 1 ) != 0 ; }
va	KEY	public QuestionsDatabase ( ) { this ( NAME ) ; }
va	KEY	public boolean isApproved ( ) { return "1" . equals ( approved ) ; }
va	KEY	public SpellResponse createSpellResponse ( ) { return new SpellResponse ( ) ; }
va	KEY	public double characterHitpoint ( ) { if ( hitpoint > 0.0 ) { return hitpoint / hitpointMax ; } else { dead = true ; hurt = false ; return 0.01 ; } }
va	KEY	public void setItemId ( int productId ) { this . itemId = productId ; }
va	IDF	private void executeInterrupt ( int highByte , int lowByte ) { writeMemory ( 0100 + getSP ( ) , int8 ( getPC ( ) >> 8 ) , true ) ; stackDown ( ) ; writeMemory ( 0100 + getSP ( ) , int8 ( getPC ( ) ) , true ) ; stackDown ( ) ; writeMemory ( 0100 + getSP ( ) , getProcessorStatusRegister ( ) , true ) ; stackDown ( ) ; int iLowByte = readMemory ( int16 ( lowByte ) ) ; int iHighByte = readMemory ( int16 ( highByte ) ) ; setPC ( joinBytes ( iHighByte , iLowByte ) ) ; }
va	KEY	public boolean getHeaderWrite ( ) { return headerWrite ; }
va	KEY	public int getTextInsetY ( ) { return textInsetY ; }
va	KEY	public void sendGameTerminate ( ) { sendMessage ( "bye" ) ; }
va	KEY	public void createCard ( ) ;
va	KEY	@ Override public void isConnected ( boolean connected ) { if ( connected == true ) { enabled = true ; } else { enabled = false ; } }
va	KEY	public int getWidth ( ) { return width ; }
va	IDF	public void dbDeleteList ( Connection aconn , String agroup , String atest ) { try { String qstr = "Delete From TShotHistTbl Where TestGroupId='" + agroup + "' and TestId='" + atest + "'" ; Statement qstmt = aconn . createStatement ( ) ; qstmt . executeUpdate ( qstr ) ; qstmt . close ( ) ; } catch ( Exception ex ) { CLogError . logError ( CAppConsts . ErrorFile , false , "CShotList.dbDeleteList cannot delete list. " , ex ) ; } }
va	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButton4ActionPerformed ( evt ) ; }
va	IDF	public StockInfoInputUI ( KalkylUI listener , String groupName ) throws IOException , ClassNotFoundException { resultListener = listener ; this . type = Type . NEW_STOCK ; setUpUI ( "" , 0 , 0 , "" , groupName ) ; }
va	KEY	@ Override public boolean isPassable ( Point p ) { return true ; }
va	IDF	static int compare ( FMap < MyInteger , MyInteger > a , FMap < MyInteger , MyInteger > b ) { if ( a . size ( ) < b . size ( ) ) return - 1 ; else if ( a . size ( ) > b . size ( ) ) return 1 ; else { Iterator < Map . Entry < MyInteger , MyInteger >> ai = a . iterator ( ) ; Iterator < Map . Entry < MyInteger , MyInteger >> bi = b . iterator ( ) ; Map . Entry < MyInteger , MyInteger > a_prev = null , b_prev = null ; while ( ai . hasNext ( ) || a_prev != null ) { Map . Entry < MyInteger , MyInteger > a_ent = a_prev != null ? a_prev : ( Map . Entry < MyInteger , MyInteger > ) ai . next ( ) ; Map . Entry < MyInteger , MyInteger > b_ent = b_prev != null ? b_prev : ( Map . Entry < MyInteger , MyInteger > ) bi . next ( ) ; a_prev = b_prev = null ; int aki = a_ent . getKey ( ) . intValue ( ) ; int bki = b_ent . getKey ( ) . intValue ( ) ; Map . Entry < MyInteger , MyInteger > a_next = null , b_next = null ; if ( ( aki >> 1 ) < ( bki >> 1 ) ) return - 1 ; else if ( ( aki >> 1 ) > ( bki >> 1 ) ) return 1 ; else { if ( ai . hasNext ( ) ) a_next = ( Map . Entry ) ai . next ( ) ; if ( bi . hasNext ( ) ) b_next = ( Map . Entry ) bi . next ( ) ; if ( a_next != null && ( ( ( MyInteger ) a_next . getKey ( ) ) . intValue ( ) >> 1 ) > ( aki >> 1 ) ) { a_prev = a_next ; a_next = null ; } if ( b_next != null && ( ( ( MyInteger ) b_next . getKey ( ) ) . intValue ( ) >> 1 ) > ( bki >> 1 ) ) { b_prev = b_next ; b_next = null ; } if ( a_next != null && b_next == null ) return - 1 ; else if ( a_next == null && b_next != null ) return 1 ; else if ( a_next == null && b_next == null ) { int av = a_ent . getValue ( ) . intValue ( ) ; int bv = b_ent . getValue ( ) . intValue ( ) ; if ( av < bv ) return - 1 ; else if ( av > bv ) return 1 ; } else if ( a instanceof FTreeMap ) { FTreeSet < MyInteger > avs = FTreeSet . < MyInteger > emptySet ( ) ; avs = avs . with ( a_ent . getValue ( ) ) . with ( a_next . getValue ( ) ) ; FTreeSet < MyInteger > bvs = FTreeSet . < MyInteger > emptySet ( ) ; bvs = bvs . with ( b_ent . getValue ( ) ) . with ( b_next . getValue ( ) ) ; int comp_res = avs . compareTo ( bvs ) ; if ( comp_res != 0 ) return comp_res ; } else { FHashSet < MyInteger > avs = FHashSet . < MyInteger > emptySet ( ) ; avs = avs . with ( a_ent . getValue ( ) ) . with ( a_next . getValue ( ) ) ; FHashSet < MyInteger > bvs = FHashSet . < MyInteger > emptySet ( ) ; bvs = bvs . with ( b_ent . getValue ( ) ) . with ( b_next . getValue ( ) ) ; int comp_res = avs . compareTo ( bvs ) ; if ( comp_res != 0 ) return comp_res ; } } } return 0 ; } }
va	IDF	private String replaceWithPattern ( String fileName ) { String fullPath = FileNameUtils . getFullPath ( fileName ) ; String srcFileName = FileNameUtils . getBaseName ( fileName ) ; String extension = "" ; if ( extensionIgnored ) { extension = FileNameUtils . getExtension ( fileName ) ; } String newFileName = srcFileName . replaceAll ( fromPattern , toPattern ) ; String destFileName = fullPath + newFileName + extension ; return destFileName ; }
va	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { genererGrapheBarChartjButtonActionPerformed ( evt ) ; }
va	KEY	public static ImageRegistry getGlobalRegistry ( ) { return globalReg ; }
va	IDF	public void processNode ( Node node ) { try { String name = Utilities . selectSingleText ( node , "./@c:name" , XMLLabels . STANDARD_NAMESPACES ) ; String domain = Utilities . selectSingleText ( node , "./@c:domain" , XMLLabels . STANDARD_NAMESPACES ) ; if ( ! Utilities . isNullOrWhitespace ( name ) && ! Utilities . isNullOrWhitespace ( domain ) ) { logger . info ( "Adding the contributor: " + name ) ; Contributor contributor = new Contributor ( name , domain ) ; this . contributors . put ( domain , contributor ) ; try { String defaultValue = Utilities . selectSingleText ( node , "./@c:default" , XMLLabels . STANDARD_NAMESPACES ) ; if ( ! Utilities . isNullOrWhitespace ( defaultValue ) ) { boolean isDefault = boolean . parseBoolean ( defaultValue ) ; if ( isDefault ) { this . defaultContributor = contributor ; } } } catch ( XPathExpressionException e ) { logger . warn ( "Unable to process the default contributor value." , e ) ; } } } catch ( XPathExpressionException e ) { logger . warn ( "Unable to process the contributor node." , e ) ; } }
va	IDF	public ToetsPanel ( ) { setLayout ( new BorderLayout ( 0 , 0 ) ) ; list = new JList < Vak > ( vakLijst ) ; list . addMouseListener ( new MouseAdapter ( ) { public void mouseClicked ( MouseEvent evt ) { JList < Vak > list = ( JList < Vak > ) evt . getSource ( ) ; if ( evt . getClickCount ( ) == 1 ) { vulToetslijst ( ) ; } } } ) ; add ( list , BorderLayout . WEST ) ; list . setPreferredSize ( new Dimension ( 250 , 500 ) ) ; toetsInfoPanel = new ToetsInfoPanel ( ) ; add ( toetsInfoPanel , BorderLayout . CENTER ) ; JPanel panel = new JPanel ( ) ; add ( panel , BorderLayout . SOUTH ) ; JButton toetsToevoegen = new JButton ( "Nieuwe toets toevoegen" ) ; JButton resultaat = new JButton ( "Toetsresultaat toevoegen" ) ; panel . add ( toetsToevoegen ) ; panel . add ( resultaat ) ; toetsToevoegen . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent arg0 ) { Vak selected = vakLijst . get ( list . getSelectedIndex ( ) ) ; JTextField naam = new JTextField ( ) ; JLabel vulNaam = new JLabel ( "Vul de toetsnaam in" ) ; final JComponent [ ] inputs = new JComponent [ ] { vulNaam , naam } ; int result = JOptionPane . showConfirmDialog ( null , inputs , "Toets toevoegen" , JOptionPane . OK_CANCEL_OPTION ) ; if ( result == JOptionPane . YES_OPTION ) { Dao . getInstance ( ) . addToets ( selected . getId ( ) , naam . getText ( ) ) ; vulToetslijst ( ) ; } } } ) ; resultaat . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent arg0 ) { Toets selectedToets = toetsInfoPanel . getSelectedToets ( ) ; Vak selectedVak = vakLijst . get ( list . getSelectedIndex ( ) ) ; JComboBox leerlingen = new JComboBox ( ) ; for ( Klas klas : Dao . getInstance ( ) . getKlassenVanVak ( selectedVak . getId ( ) ) ) { for ( User student : klas . getLeerlingen ( ) ) { leerlingen . addItem ( student ) ; } } JLabel selecteer = new JLabel ( "Selecteer een leerling  vul een cijfer in en klik op Ok" ) ; JLabel cijfer = new JLabel ( "Cijfer" ) ; JComboBox cijferVeld = new JComboBox ( ) ; for ( int i = 1 ; i < 11 ; i ++ ) { cijferVeld . addItem ( i ) ; } final JComponent [ ] inputs = new JComponent [ ] { selecteer , leerlingen , cijfer , cijferVeld } ; int result = JOptionPane . showConfirmDialog ( null , inputs , "Cijfer toevoegen" , JOptionPane . OK_CANCEL_OPTION ) ; if ( result == JOptionPane . YES_OPTION ) { User student = ( User ) leerlingen . getSelectedItem ( ) ; int gegevenCijfer = ( int ) cijferVeld . getSelectedItem ( ) ; if ( selectedToets . heeftCijfer ( student ) ) { Dao . getInstance ( ) . updateCijferBijStudent ( selectedToets . getId ( ) , student . getId ( ) , gegevenCijfer ) ; } else { Dao . getInstance ( ) . addCijferBijStudent ( selectedToets . getId ( ) , student . getId ( ) , gegevenCijfer ) ; } selectedToets . addUitslag ( student , gegevenCijfer ) ; } } } ) ; }
va	IDF	@ Override public void modelPropertyChange ( PropertyChangeEvent evt ) { currentMonthName . setText ( controller . getModel ( ) . getCurrentMonthName ( ) + " " + controller . getModel ( ) . getCurrentYear ( ) ) ; }
va	IDF	public static void main ( String args [ ] ) { try { for ( javax . swing . UIManager . LookAndFeelInfo info : javax . swing . UIManager . getInstalledLookAndFeels ( ) ) { if ( "Nimbus" . equals ( info . getName ( ) ) ) { javax . swing . UIManager . setLookAndFeel ( info . getClassName ( ) ) ; break ; } } } catch ( ClassNotFoundException ex ) { java . util . logging . Logger . getLogger ( QATracker . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( InstantiationException ex ) { java . util . logging . Logger . getLogger ( QATracker . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( IllegalAccessException ex ) { java . util . logging . Logger . getLogger ( QATracker . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( javax . swing . UnsupportedLookAndFeelException ex ) { java . util . logging . Logger . getLogger ( QATracker . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } java . awt . EventQueue . invokeLater ( new Runnable ( ) { public void run ( ) { try { new QATracker ( ) . setVisible ( true ) ; } catch ( SQLException ex ) { Logger . getLogger ( QATracker . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; } } } ) ; }
va	KEY	@ Override public void reset ( ) { }
va	IDF	private void storeDuplications ( final PatternHashElement element ) { storeMirrors ( element ) ; storeRotations ( element , element . getPattern ( ) . getDivisionSize ( ) ) ; }
va	IDF	public void actualizar ( Tarea tarea ) throws SQLException { if ( tareaDAO . exists ( tarea ) == true ) { tareaDAO . update ( tarea ) ; } else { throw new SQLException ( "No se puede actualizar la tarea por que no se encuentra en la base de datos" ) ; } }
va	KEY	public boolean getIsAdditionalScreenRequirementRequested ( ) { return additionalScreenRequirements ; }
va	KEY	public int getVal ( ) { return val ; }
va	IDF	private int randomNumber ( int low , int high ) { return new Random ( new Random ( ) . nextLong ( ) ) . nextInt ( high - low ) + low ; }
va	IDF	public List < Item > getItem ( ) throws SQLException ;
va	KEY	public void setUserID ( int userID ) { this . userID = userID ; }
va	KEY	public boolean isVerbose ( ) { return verbose ; }
va	IDF	@ XmlElement ( name = "row" ) public void setRows ( List < StatRow > rows ) { this . rows = rows ; }
va	IDF	@ Override public boolean deleteTask ( Task toDelete ) { boolean deleted = false ; if ( toDelete != null ) { deleted = tasks . remove ( toDelete ) ; } return deleted ; }
va	IDF	public String registration ( ) { User newUser ; key = new String ( Base64 . encodeBase64 ( DigestUtils . sha ( email + "." + password ) ) ) ; loger . info ( key ) ; roles = new ArrayList < Role > ( ) ; newUser = new User ( firstName , lastName , email , password , key ) ; Role role = new Role ( RoleName . ADMIN ) ; Role role1 = new Role ( RoleName . USER ) ; roles . add ( role ) ; roles . add ( role1 ) ; newUser . setRoles ( roles ) ; MailUtil . sendMail ( email , "registration" , "Your registration  was successful. To activate your account click next link\n <a href=\"http://localhost:8080/security/successActivation.xhtml?key=" + key + "\">Activation Link</a>" ) ; getAAService ( ) . addUser ( newUser ) ; getAAService ( ) . addRoles ( roles ) ; return "/security/successRegistration.xhtml" ; }
va	IDF	public List < Connection > getUsersConnection ( ) { return connections ; }
va	IDF	public void setMeetingService ( MeetingService meetingService ) { this . meetingService = meetingService ; }
va	IDF	public int getSelectedIndex ( INDISwitchElementAndValue [ ] ev ) { for ( int i = 0 ; i < ev . length ; i ++ ) { if ( ev [ i ] . getValue ( ) == SwitchStatus . ON ) { ArrayList < INDIElement > list = getElementsAsList ( ) ; for ( int h = 0 ; h < list . size ( ) ; h ++ ) { if ( list . get ( h ) == ev [ i ] . getElement ( ) ) { return h ; } } } } return - 1 ; }
va	IDF	public static void main ( String [ ] args ) { DBMakeSource src = new DBMakeSource ( ) ; src . connect ( ) ; src . batchProcess ( "n_.*d\\d{1 2}$" ) ; src . close ( ) ; System . out . println ( "Complete" ) ; }
va	KEY	public void setMaxRows ( int maxRows ) ;
va	KEY	public void onBind ( class < ? extends IListener > listenerClass ) { }
va	IDF	@ Override protected DataCounter < Integer > getDataCounter ( ) { return new HashTable < Integer > ( new Comparator < Integer > ( ) { public int compare ( Integer e1 , Integer e2 ) { return e1 - e2 ; } } , new Hasher < Integer > ( ) { public int hash ( Integer data ) { return Math . abs ( data * 17 ) ; } } ) ; }
va	KEY	public void endTurn ( ) { tabCount = - 1 ; }
va	IDF	public void dropPlayer ( ) { setBorder ( BorderFactory . createLineBorder ( Color . WHITE ) ) ; ImageIcon icon = new ImageIcon ( ) ; cards . setIcon ( icon ) ; currentBid . setText ( "" ) ; extraPanel . setBorder ( BorderFactory . createEmptyBorder ( ) ) ; playerLabel . setText ( "" ) ; drop . setVisible ( false ) ; updateUI ( ) ; }
va	KEY	public void setCount ( long value ) { this . count = value ; }
va	IDF	public void mapToKey ( GameAction gameAction , int keyCode ) { keyActions [ keyCode ] = gameAction ; }
va	KEY	protected abstract void exibirDados ( ) ;
va	IDF	public static void idfchecker ( ArrayList < tweetModel > newList ) { int count = 0 ; ngramlist = ngram . NGramDriver . getNgramlist ( ) ; System . out . println ( "*****>>> " + ngramlist + "\n\t " + newList . size ( ) ) ; toplist = new ArrayList < > ( ) ; String tweet = "" ; for ( int i = 0 ; i < ngramlist . size ( ) ; i ++ ) { for ( int j = 0 ; j < newList . size ( ) ; j ++ ) { tweet = newList . get ( j ) . getMessage ( ) . replaceAll ( "[^a-zA-Z0-9]" , " " ) ; tweet = tweet . replaceAll ( "\\s+" , " " ) ; if ( tweet . contains ( ngramlist . get ( i ) . getTweet ( ) ) ) { System . out . println ( "%%%%%%%%%%%%% " + tweet ) ; count ++ ; System . out . println ( "_______>>> " + count + "\n\t[" + ngramlist . get ( i ) . getTweet ( ) + "]" + "\n\t " + newList . get ( j ) . getMessage ( ) ) ; } } tfidfscore ( i , count , newList . size ( ) ) ; count = 0 ; } printTopList ( ) ; }
va	KEY	public double getValPag_Fac ( ) { return ValPag_Fac ; }
va	KEY	public void seteBookAvailable ( boolean eBookAvailable ) { this . eBookAvailable = eBookAvailable ; }
va	KEY	public void setMaxIterations ( int maxIterations ) { this . maxIterations = maxIterations ; }
va	KEY	public void rotateZ ( double radians ) ;
va	IDF	@ Override public boolean equals ( Object o ) { if ( ! ( o instanceof CollisionContact ) ) return false ; CollisionContact c = ( CollisionContact ) o ; return c . a . equals ( a ) && c . b . equals ( b ) ; }
va	KEY	public boolean search ( int [ ] A , int target ) { for ( int i = 0 ; i < A . length ; i ++ ) { if ( A [ i ] == target ) return true ; } return false ; }
va	KEY	public final int getTextureHeight ( ) { return texHeight ; }
va	KEY	public class < ? extends Response > getResponseClass ( ) { return this . respClass ; }
va	IDF	public SeekEnemy ( Movable subject , double coefficient , int priority ) { super ( subject , coefficient ) ; assert subject instanceof Unit ; u = ( Unit ) subject ; enabled = true ; this . priority = priority ; }
va	KEY	public double ncb ( ) { if ( level . BLOCKS_COINS != 0 ) return getBlocksCoinDestroyed ( ) / level . BLOCKS_COINS ; else return 0 ; }
va	KEY	public synchronized void setExecutionDelay ( int executionDelay ) { if ( executionDelay < 0 ) { throw new IllegalArgumentException ( "Execution delay must be greater than zero." ) ; } this . executionDelay = executionDelay ; }
va	IDF	private Properties makeProps ( ) { Properties myinfo = new Properties ( ) ; String keystr = "" ; String valstr = "" ; String mybuf = dbProps ; while ( mybuf != null ) { int jdx = mybuf . indexOf ( "=" ) ; if ( jdx < 0 ) break ; keystr = mybuf . substring ( 0 , jdx ) ; mybuf = mybuf . substring ( jdx + 1 ) ; jdx = mybuf . indexOf ( ";" ) ; if ( jdx < 0 ) jdx = mybuf . length ( ) ; valstr = mybuf . substring ( 0 , jdx ) ; myinfo . setProperty ( keystr , valstr ) ; if ( jdx == mybuf . length ( ) ) break ; mybuf = mybuf . substring ( jdx + 1 ) ; } return ( myinfo ) ; }
va	IDF	public void run ( ) { System . out . println ( "IS THIS EVER USED!?!?!?!?" ) ; new GameControl ( new GameBoard ( ) ) . setVisible ( true ) ; }
va	IDF	public void execute ( ) { prevSpeed = ceilingFan . getSpeed ( ) ; ceilingFan . high ( ) ; }
va	KEY	public abstract void render ( Graphics2D g ) ;
va	KEY	public int getQuantity ( ) { return quantity ; }
va	IDF	private void writeQNames ( javax . xml . namespace . QName [ ] qnames , javax . xml . stream . XMLStreamWriter xmlWriter ) throws javax . xml . stream . XMLStreamException { if ( qnames != null ) { java . lang . StringBuffer stringToWrite = new java . lang . StringBuffer ( ) ; java . lang . String namespaceURI = null ; java . lang . String prefix = null ; for ( int i = 0 ; i < qnames . length ; i ++ ) { if ( i > 0 ) { stringToWrite . append ( " " ) ; } namespaceURI = qnames [ i ] . getNamespaceURI ( ) ; if ( namespaceURI != null ) { prefix = xmlWriter . getPrefix ( namespaceURI ) ; if ( ( prefix == null ) || ( prefix . length ( ) == 0 ) ) { prefix = generatePrefix ( namespaceURI ) ; xmlWriter . writeNamespace ( prefix , namespaceURI ) ; xmlWriter . setPrefix ( prefix , namespaceURI ) ; } if ( prefix . trim ( ) . length ( ) > 0 ) { stringToWrite . append ( prefix ) . append ( ":" ) . append ( org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qnames [ i ] ) ) ; } else { stringToWrite . append ( org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qnames [ i ] ) ) ; } } else { stringToWrite . append ( org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qnames [ i ] ) ) ; } } xmlWriter . writeCharacters ( stringToWrite . toString ( ) ) ; } }
va	KEY	public int getPopulation ( ) { return 0 ; }
va	KEY	public Threat ( ) { super ( ) ; }
va	KEY	public MyThread ( ) { super ( ) ; }
va	KEY	public double getAverageTime ( ) { return av_t ; }
va	IDF	public void up ( ) { System . out . println ( location + " garage Door is Up" ) ; }
va	IDF	public abstract Object visitFloatTypeTree ( AST t ) ;
va	IDF	public void writeVector2xml ( Vector < String > vector , String saveXMLPath ) throws IOException { int vectorSize = vector . size ( ) ; String oneIniWeibo ; OutputFormat format = OutputFormat . createPrettyPrint ( ) ; format . setEncoding ( "UTF-8" ) ; File f = new File ( saveXMLPath ) ; f . createNewFile ( ) ; FileWriter fw = new FileWriter ( f ) ; org . dom4j . Document document = DocumentHelper . createDocument ( ) ; org . dom4j . Element rootElement = document . addElement ( "weibos" ) ; rootElement . addAttribute ( "totalNumber" , String . valueOf ( vectorSize ) ) ; for ( int j = 0 ; j < vectorSize ; j ++ ) { oneIniWeibo = vector . get ( j ) ; System . out . println ( oneIniWeibo ) ; if ( oneIniWeibo . contains ( "userName_s" ) && oneIniWeibo . contains ( "userid_s" ) && oneIniWeibo . contains ( "date_s" ) && oneIniWeibo . contains ( "weiboid_s" ) && oneIniWeibo . contains ( "forwardNum_s" ) && oneIniWeibo . contains ( "commentNum_s" ) && oneIniWeibo . contains ( "weiboSentence_s" ) ) { String userName = oneIniWeibo . substring ( oneIniWeibo . indexOf ( "<userName_s " ) + 12 , oneIniWeibo . indexOf ( " userName_e>" ) ) ; String userid = oneIniWeibo . substring ( oneIniWeibo . indexOf ( "<userid_s " ) + 10 , oneIniWeibo . indexOf ( " userid_e>" ) ) ; String date = oneIniWeibo . substring ( oneIniWeibo . indexOf ( "<date_s " ) + 8 , oneIniWeibo . indexOf ( " date_e>" ) ) ; String weiboid = oneIniWeibo . substring ( oneIniWeibo . indexOf ( "<weiboid_s " ) + 11 , oneIniWeibo . indexOf ( " weiboid_e>" ) ) ; String forwardNum = oneIniWeibo . substring ( oneIniWeibo . indexOf ( "<forwardNum_s " ) + 14 , oneIniWeibo . indexOf ( " forwardNum_e>" ) ) ; String commentNum = oneIniWeibo . substring ( oneIniWeibo . indexOf ( "<commentNum_s " ) + 14 , oneIniWeibo . indexOf ( " commentNum_e>" ) ) ; String weiboSentence = oneIniWeibo . substring ( oneIniWeibo . indexOf ( "<weiboSentence_s " ) + 17 , oneIniWeibo . indexOf ( " weiboSentence_e>" ) ) ; org . dom4j . Element weiboElement = rootElement . addElement ( "weibo" ) ; weiboElement . addAttribute ( "polarity" , "unknown" ) ; weiboElement . addAttribute ( "opinionated" , "unknown" ) ; weiboElement . addAttribute ( "userName" , userName ) ; weiboElement . addAttribute ( "userid" , userid ) ; weiboElement . addAttribute ( "date" , date ) ; weiboElement . addAttribute ( "weiboid" , weiboid ) ; weiboElement . addAttribute ( "forwardNum" , forwardNum ) ; weiboElement . addAttribute ( "commentNum" , commentNum ) ; weiboElement . setText ( weiboSentence ) ; } } XMLWriter xw = new XMLWriter ( fw , format ) ; xw . write ( document ) ; xw . close ( ) ; }
va	IDF	public List < Vak > getVakkenVanStudent ( long studentId ) { List < Vak > vakken = new ArrayList < Vak > ( ) ; List < long > klasIds = new ArrayList < long > ( ) ; List < long > vakIds = new ArrayList < long > ( ) ; try { PreparedStatement prepareStatement = manager . prepareStatement ( "SELECT klas_id FROM leerling_klas WHERE leerling_id = ?" ) ; prepareStatement . setLong ( 1 , studentId ) ; ResultSet resultSet = prepareStatement . executeQuery ( ) ; while ( resultSet . next ( ) ) { klasIds . add ( resultSet . getLong ( 1 ) ) ; } PreparedStatement prepareStatement2 = manager . prepareStatement ( "SELECT vak_id FROM vak_klas WHERE klas_id = ?" ) ; for ( long klasId : klasIds ) { prepareStatement2 . setLong ( 1 , klasId ) ; ResultSet resultSet2 = prepareStatement2 . executeQuery ( ) ; while ( resultSet2 . next ( ) ) { vakIds . add ( resultSet2 . getLong ( 1 ) ) ; } } for ( long vakId : vakIds ) { vakken . add ( getVak ( vakId ) ) ; } return vakken ; } catch ( SQLException e ) { e . printStackTrace ( ) ; return vakken ; } }
va	IDF	public void shouldOrderByAliasedColumnFiltered ( ) { Relation all = parser . parse ( "select foo shoe  bar  baz as bam from table_1 where (shoe > 14 and bar <> 17) order by bam asc;" ) . executeQuery ( ) ; Object [ ] [ ] expectedTable = new Object [ ] [ ] { { 1556.345 , 8975 , "testing" } , { 57735.12 , 1 , "this" } } ; Map < String , ColumnDefinition > newColDefs = new LinkedHashMap < > ( ) ; newColDefs . put ( "shoe" , colDefs . get ( "foo" ) ) ; newColDefs . put ( "bar" , colDefs . get ( "bar" ) ) ; newColDefs . put ( "bam" , colDefs . get ( "baz" ) ) ; assertOrderedRelationsEqual ( all , toRelation ( newColDefs , expectedTable ) ) ; }
va	IDF	@ Override protected void configureWindow ( java . awt . Window root ) { }
va	KEY	public static void main ( String [ ] args ) { }
va	IDF	public List < Profile > getProfileListByHobby ( List < String > hobby ) ;
va	KEY	static synchronized void incOversize ( ) { oversize ++ ; }
va	IDF	@ Override public String getColumnName ( int col ) { return columnNames [ col ] ; }
va	IDF	@ Bean JmsTemplate jmsTemplate ( ConnectionFactory connectionFactory ) { return new JmsTemplate ( connectionFactory ) ; }
va	KEY	public long getElectiveId ( ) { return electiveId ; }
va	IDF	public static Builder < ? > builder ( String name , int productType , List < Integer > authors , String title , int isbn , int pages , String publisher ) { return new Builder2 ( name , productType , authors , title , isbn , pages , publisher ) ; }
va	IDF	@ Override void prepare ( ) { System . out . println ( "Prepareing " + name ) ; dough = inFactory . createDough ( ) ; sauce = inFactory . createSauce ( ) ; cheese = inFactory . createCheese ( ) ; }
va	IDF	private Object domain ( Object subtree ) { if ( subtree == null ) return null ; else if ( ! ( subtree instanceof Node ) ) { Object [ ] ary = ( Object [ ] ) subtree ; int nkeys = ary . length >> 1 ; Object [ ] dom = new Object [ nkeys ] ; for ( int i = 0 ; i < nkeys ; ++ i ) dom [ i ] = ary [ i ] ; return dom ; } else { Node node = ( Node ) subtree ; Object ldom = domain ( node . left ) , rdom = domain ( node . right ) ; if ( node . key instanceof EquivalentMap ) { ArrayList < Entry > al = ( ( EquivalentMap ) node . key ) . contents ; ArrayList < Object > dom = new ArrayList < Object > ( al . size ( ) ) ; for ( int i = 0 ; i < al . size ( ) ; ++ i ) dom . add ( ( ( Entry ) al . get ( i ) ) . key ) ; return FTreeSet . makeNode ( new FTreeSet . EquivalentSet ( dom ) , ldom , rdom ) ; } else return FTreeSet . makeNode ( node . key , ldom , rdom ) ; } }
va	KEY	private static float tosubpixx ( final float pix_x ) { return f_SUBPIXEL_POSITIONS_X * pix_x ; }
va	KEY	public void setX ( int x ) { this . x = x ; }
va	KEY	public void prepare ( ) { }
va	IDF	@ Override public Object invoke ( Object proxy , Method method , Object [ ] args ) throws Throwable { if ( method . isDefault ( ) ) { final class < ? > declaringClass = method . getDeclaringClass ( ) ; final MethodHandles . Lookup lookup = MethodHandles . publicLookup ( ) . in ( declaringClass ) ; final Field f = MethodHandles . Lookup . class . getDeclaredField ( "allowedModes" ) ; final int modifiers = f . getModifiers ( ) ; if ( Modifier . isFinal ( modifiers ) ) { final Field modifiersField = Field . class . getDeclaredField ( "modifiers" ) ; modifiersField . setAccessible ( true ) ; modifiersField . setInt ( f , modifiers & ~ Modifier . final ) ; f . setAccessible ( true ) ; f . set ( lookup , MethodHandles . Lookup . private ) ; } return lookup . unreflectSpecial ( method , declaringClass ) . bindTo ( proxy ) . invokeWithArguments ( args ) ; } if ( args . length == 0 ) { return ( ( PayrollMonoid ) proxy ) . empty ( ) ; } else if ( args . length == 1 ) { return ( ( PayrollMonoid ) proxy ) . unit ( args [ 0 ] ) ; } else { return ( ( PayrollMonoid ) proxy ) . fold ( Arrays . asList ( args ) ) ; } }
va	IDF	@ Test public void test_checkout_policies_registered ( ) throws PolicyException { exception = ExpectedException . none ( ) ; User u = new User ( ) ; u . setUserID ( 1 ) ; UnitOfWork co = UnitOfWork . create ( CheckOut . class , policyGraph ) . with ( u ) ; co . Go ( ) ; }
va	IDF	public FractalTypeException ( ASTNode src , String expected , String actual ) { this ( expected , actual ) ; setSource ( src ) ; }
va	IDF	public void update ( ) { super . update ( ) ; if ( this . isClicked ( ) && ( Timer . getTime ( ) - this . lastClick ) > 200 ) { this . state = ! this . state ; this . lastClick = Timer . getTime ( ) ; } }
va	KEY	public long getKey ( ) { return bitString ; }
va	KEY	@ Override public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( ) != obj . getClass ( ) ) { return false ; } final UserSelling other = ( UserSelling ) obj ; if ( double . doubleToLongBits ( this . price ) != double . doubleToLongBits ( other . price ) ) { return false ; } return true ; }
va	KEY	public static Test suite ( ) { return new TestSuite ( AppTest . class ) ; }
va	KEY	public void freeze ( ) { }
va	KEY	public synchronized int xgetR2AssignedKeyCode ( ) { return r2 ; }
va	IDF	private static void propagateTopDownBestRefinePath ( SecurityGoal sg ) { boolean refined = false ; if ( sg . isCriticality ( ) || sg . isNon_deterministic ( ) ) { return ; } else { for ( RequirementLink rl : sg . and_refine_links ) { if ( rl . refine_type . equals ( InfoEnum . RefineType . INTERVAL . name ( ) ) ) { refined = true ; rl . setRemark ( InfoEnum . LinkRemark . BESTPATH . name ( ) ) ; rl . getSource ( ) . setRemark ( InfoEnum . ElementRemark . BESTPATH . name ( ) ) ; propagateTopDownBestRefinePath ( ( SecurityGoal ) rl . getSource ( ) ) ; } } if ( ! refined ) { for ( RequirementLink rl : sg . and_refine_links ) { if ( rl . refine_type . equals ( InfoEnum . RefineType . ATTRIBUTE . name ( ) ) ) { refined = true ; rl . setRemark ( InfoEnum . LinkRemark . BESTPATH . name ( ) ) ; rl . getSource ( ) . setRemark ( InfoEnum . ElementRemark . BESTPATH . name ( ) ) ; propagateTopDownBestRefinePath ( ( SecurityGoal ) rl . getSource ( ) ) ; } } if ( ! refined ) { for ( RequirementLink rl : sg . and_refine_links ) { if ( rl . refine_type . equals ( InfoEnum . RefineType . ASSET . name ( ) ) ) { refined = true ; rl . setRemark ( InfoEnum . LinkRemark . BESTPATH . name ( ) ) ; rl . getSource ( ) . setRemark ( InfoEnum . ElementRemark . BESTPATH . name ( ) ) ; propagateTopDownBestRefinePath ( ( SecurityGoal ) rl . getSource ( ) ) ; } } } } } }
va	IDF	public StructuralInfo ( int numInputs , int numOutputs , int [ ] hiddenLayerInformation ) { this . numInputs = numInputs ; this . numOutputs = numOutputs ; this . hiddenLayerInformation = hiddenLayerInformation ; }
va	KEY	@ Override public void onBind ( class < ? extends IListener > listenerClass ) { }
va	KEY	public void setPriceLevel3 ( double priceLevel3 ) { this . priceLevel3 = priceLevel3 ; }
va	IDF	public boolean onTarget ( ) { boolean done = ! enabled || ( Math . abs ( origGoal - lastSource ) < onTargetError ) && ( Math . abs ( lastDeltaError ) < onTargetDeltaError ) ; if ( done ) { System . out . println ( name + " DONE" ) ; } return done ; }
va	KEY	public synchronized int xgetR4AssignedKeyCode ( ) { return r4 ; }
va	KEY	public int getNrows ( ) { return r ; }
va	KEY	public static Singleton getInstance ( ) { return INSTANCE ; }
va	KEY	public boolean returnSelection ( ) { return selection ; }
va	IDF	public void extract ( String text , int length , boolean stopWords ) throws FileNotFoundException , IOException { extract ( text , length , stopWords , this . overlap ) ; }
va	IDF	public static AdultOption fromValue ( String v ) { for ( AdultOption c : AdultOption . values ( ) ) { if ( c . value . equals ( v ) ) { return c ; } } throw new IllegalArgumentException ( v ) ; }
va	IDF	public void addKlasAanVak ( long klasId , long vakId ) { try { PreparedStatement prepareStatement = manager . prepareStatement ( "INSERT INTO vak_klas VALUES (? ?)" ) ; prepareStatement . setLong ( 1 , vakId ) ; prepareStatement . setLong ( 2 , klasId ) ; prepareStatement . execute ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } }
va	IDF	private void checkFirstElementCorrectincCount ( String message , int [ ] input ) { for ( int num : input ) { dc . incCount ( num ) ; } SimpleIterator < DataCount < Integer >> iter = dc . getIterator ( ) ; assertEquals ( message , input [ input . length - 1 ] , ( int ) iter . next ( ) . data ) ; }
va	IDF	public void addConversation ( Conversation c ) { conversations . add ( c ) ; }
va	KEY	public abstract void initialize ( ) ;
va	IDF	public MiscellaneousPanel ( ) { InitializeComponents ( ) ; BorderLayout mainLayout = new BorderLayout ( ) ; this . setLayout ( mainLayout ) ; JPanel centerPanel = new JPanel ( ) ; centerPanel . setLayout ( new BoxLayout ( centerPanel , BoxLayout . PAGE_AXIS ) ) ; centerPanel . add ( this . getAdditionalComments ( ) ) ; centerPanel . add ( this . optoutNotice ) ; centerPanel . add ( this . getOptout ( ) ) ; this . add ( centerPanel , BorderLayout . CENTER ) ; this . setBorder ( BorderFactory . createBevelBorder ( 1 ) ) ; }
va	IDF	public DuplicateEntityViolation ( String message , Throwable cause ) { super ( message , cause ) ; }
va	KEY	protected abstract boolean takeAction ( ) ;
va	IDF	boolean contains ( Point p ) { return rect . contains ( p ) ; }
va	KEY	protected abstract void initComponents ( ) ;
va	IDF	public void save ( Base o ) { Notebook notebook = ( Notebook ) o ; EntityTransaction tx = getEntityManager ( ) . getTransaction ( ) ; tx . begin ( ) ; getEntityManager ( ) . persist ( notebook ) ; tx . commit ( ) ; }
va	IDF	@ Override public void rightMultiply ( IMatrix other ) { for ( int i = 0 ; i < 4 ; i ++ ) for ( int j = 0 ; j < 4 ; j ++ ) copy [ i ] [ j ] = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { for ( int k = 0 ; k < 4 ; k ++ ) { copy [ i ] [ j ] = copy [ i ] [ j ] + this . get ( k , i ) * other . get ( j , k ) ; } } } for ( int i = 0 ; i < 4 ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { this . set ( j , i , copy [ i ] [ j ] ) ; } } }
va	IDF	@ Override public void saveOrUpdateLecture ( long id , String meetingName , long lecturerId , List < long > roomIds , long studentGroupId , int numberOfAppointments , Date startDate , Date endDate ) { Lecture lecture = lectureDAO . load ( id ) ; if ( lecture == null ) { lecture = new Lecture ( ) ; } meetingService . fillMeeting ( lecture , meetingName , lecturerId , roomIds , numberOfAppointments , startDate , endDate , EMeetingType . LECTURE ) ; StudentGroup studentGroup = studentGroupDAO . load ( studentGroupId ) ; lecture . setStudentGroup ( studentGroup ) ; lectureDAO . save ( lecture ) ; }
va	IDF	@ SuppressWarnings ( "unchecked" ) public List < Tablet > fireQuery ( String querie ) { EntityTransaction tx = getEntityManager ( ) . getTransaction ( ) ; tx . begin ( ) ; Query query = getEntityManager ( ) . createNativeQuery ( querie , Tablet . class ) ; tx . commit ( ) ; return query . getResultList ( ) ; }
va	KEY	public void takeTurn ( ) { return ; }
va	KEY	public void setID ( long ID ) ;
va	KEY	protected void interrupted ( ) { }
va	IDF	public Headquarter ( Board board , Player owner , Position position ) { super ( board , "Headquarter" , "HQ" , owner , position ) ; }
va	KEY	public FLinkedHashSet ( ) { set_tree = null ; list_tree = null ; }
va	IDF	@ Override public Dimension minimumLayoutSize ( Container target ) { Dimension minimum = layoutSize ( target , false ) ; minimum . width -= ( getHgap ( ) + 1 ) ; return minimum ; }
va	KEY	public void setCount ( int count ) { this . count = count ; }
va	KEY	public double getPrix ( ) { return prix ; }
va	IDF	public boolean sendMessage ( String message ) { boolean messageSent = true ; out . println ( message ) ; return messageSent ; }
va	KEY	public Settings ( ) { }
va	KEY	public void moveVector ( double x , double y , double z ) ;
va	IDF	public abstract Object execute ( HttpServletRequest request , HttpServletResponse response ) throws Exception ;
va	KEY	public double get ( int col , int row ) ;
va	IDF	public int getPieceCount ( DraughtsState gs ) { int [ ] pieces = gs . getPieces ( ) ; int count = 0 ; for ( int f = 1 ; f < pieces . length ; f = f + 1 ) { int piece = pieces [ f ] ; if ( Draughts . isWhite ( piece ) || Draughts . isBlack ( piece ) ) { count ++ ; } } return count ; }
va	KEY	public static String getVersionQualifier ( ) { if ( _qualifierText != null ) { return _qualifierText ; } createVersionText ( ) ; return _qualifierText ; }
va	IDF	@ Override protected void post ( Message request , Message response ) { new QuestionIdService ( ) . doPost ( request , response ) ; String questionId = response . get ( Question . ID ) ; request . put ( Question . ID , questionId ) ; request . put ( Document . ID , response . get ( Question . ID ) ) ; request . put ( Document . TYPE , Question . RESOURCE_NAME ) ; new PersistentDocumentService ( ) . doPost ( request , response ) ; new QuestionSearchIndexService ( ) . doPost ( request , response ) ; request . put ( Profile . ID , request . get ( Document . AUTHOR ) ) ; request . put ( Profile . POINTS , "" + Question . POINTS_FOR_QUESTION ) ; new ProfileService ( ) . doPut ( request , response ) ; response . put ( Question . ID , questionId ) ; }
va	KEY	public void setMatchCount ( int matchCount ) { this . matchCount = matchCount ; }
va	KEY	public void cancel ( ) { if ( _process != null ) { _process . destroy ( ) ; } }
va	KEY	public int getId ( ) { return id ; }
va	KEY	protected void dead ( ) { setDispose ( ) ; }
va	KEY	public void setEnabled ( boolean enabled ) { this . enabled = enabled ; }
va	IDF	@ Override public void actionPerformed ( ActionEvent arg0 ) { mDialog = new XbpadDialog ( parent , mUI , "Setup a mouse input" , null , null ) ; mUI . xgetLatencySlider ( ) . setValue ( container . xgetCurrentPreset ( ) . xgetMouseLatency ( ) ) ; mUI . xgetSpeedSlider ( ) . setValue ( container . xgetCurrentPreset ( ) . xgetMouseSpeed ( ) ) ; utils . XbpadSwingUtils . fadeIn ( mDialog ) ; }
va	IDF	private boolean tableExists ( String name ) throws SQLException { DatabaseMetaData md = conn . getMetaData ( ) ; ResultSet rs = md . getTables ( null , null , "%" , null ) ; while ( rs . next ( ) ) { if ( rs . getString ( 3 ) . equalsIgnoreCase ( name ) ) { return true ; } } return false ; }
va	IDF	public BingSearchApiUrlBuilder withMobileWebRequest ( String name , MobileWebRequest request ) { withParameter ( name + ".Offset" , request . getOffset ( ) ) ; withParameter ( name + ".Count" , request . getCount ( ) ) ; if ( ! request . getMobileWebSearchOptionList ( ) . isEmpty ( ) ) { List < String > values = new ArrayList < String > ( ) ; for ( MobileWebSearchOption option : request . getMobileWebSearchOptionList ( ) ) { values . add ( option . value ( ) ) ; } withParameter ( name + ".Options" , values ) ; } return this ; }
va	KEY	public ValorBooleano ( boolean valor ) { super ( valor ) ; }
va	KEY	public void remove ( ) { throw new UnsupportedOperationException ( ) ; }
va	IDF	public static int addValue ( int r , int c , DraughtsState ds ) { int piece = ds . getPiece ( r , c ) ; if ( piece == DraughtsState . WHITEFIELD || piece == DraughtsState . EMPTY ) { return 0 ; } if ( piece == DraughtsState . WHITEKING ) { return 50 + KING + calcDef ( r , c , true , ds ) ; } if ( piece == DraughtsState . WHITEPIECE ) { return calcPlayground ( r , c , true ) + DRAUGHT + calcDef ( r , c , true , ds ) ; } if ( piece == DraughtsState . BLACKKING ) { return - 50 - KING + calcDef ( r , c , false , ds ) ; } if ( piece == DraughtsState . BLACKPIECE ) { return - calcPlayground ( r , c , false ) - DRAUGHT + calcDef ( r , c , false , ds ) ; } return 0 ; }
va	IDF	public Token ( int leftPosition , int rightPosition , Symbol sym ) { this . leftPosition = leftPosition ; this . rightPosition = rightPosition ; this . symbol = sym ; }
va	KEY	protected boolean isFinished ( ) { return true ; }
va	IDF	public synchronized void persistSome ( long targetSize ) { boolean done = false ; long bytesSaved = 0 ; int persisted = 0 ; while ( ! done ) { try { WrappedString suggested = strategy . suggest ( ) ; if ( suggested == null ) { for ( Map . Entry < WrappedString , ArrayHashMapOption > entry : store . entrySet ( ) ) { if ( entry . getValue ( ) . inMemory ( ) ) { System . out . println ( "Found in memory option while strategy was oblivious" ) ; entry . getValue ( ) . persist ( ) ; } } } ArrayHashMapOption currentOption = store . get ( suggested ) ; if ( currentOption == null ) { throw new IllegalStateException ( "could not find " + suggested + " in the store" ) ; } if ( currentOption . inMemory ( ) ) { bytesSaved += currentOption . getValue ( ) . getKeys ( ) . length * 8 ; bytesSaved += currentOption . persist ( ) ; strategy . evict ( suggested ) ; persisted ++ ; } else { throw new IllegalStateException ( suggested + " is already evicted but was proposed nonetheless." ) ; } if ( bytesSaved > targetSize ) { System . out . println ( "We are done by size" ) ; done = true ; } if ( persisted > 130 ) { System . out . println ( "We are done by count" ) ; } } catch ( IOException e ) { e . printStackTrace ( ) ; } } System . out . println ( "Evicted " + bytesSaved + " bytes in total" ) ; }
va	KEY	public int getPosition ( ) { return lexer . getPosition ( ) ; }
va	IDF	public List < News > getAllNews ( ) { if ( allNews == null ) { allNews = getTopicsService ( ) . getNewsDAO ( ) . getAllDesc ( ) ; } return allNews ; }
va	IDF	public String getFormula ( ) { return formulaField . getText ( ) ; }
va	KEY	protected void switchUsable ( ) { if ( isUsable == true ) { isUsable = false ; _save . setEnabled ( false ) ; } else { isUsable = true ; _save . setEnabled ( true ) ; } }
va	IDF	public void keyPressed ( java . awt . event . KeyEvent evt ) { jTextArea2KeyPressed ( evt ) ; }
va	IDF	private void updateMissileGraphics ( int index ) { if ( index == 0 ) mM0Graphics = getMissileGraphics ( 0 ) ; else if ( index == 1 ) mM1Graphics = getMissileGraphics ( 1 ) ; }
va	KEY	public int getW ( ) { return w ; }
va	IDF	private Msg fetchSingleResult ( ResultSet rs ) throws SQLException { if ( rs . next ( ) ) { Msg dto = new Msg ( ) ; populateDto ( dto , rs ) ; return dto ; } else { return null ; } }
va	KEY	@ Override public void onDartMissedPressed ( ) { }
va	IDF	@ SuppressWarnings ( "unchecked" ) private void initComponents ( ) { jScrollPane1 = new javax . swing . JScrollPane ( ) ; jTextPane1 = new javax . swing . JTextPane ( ) ; setDefaultCloseOperation ( javax . swing . WindowConstants . DISPOSE_ON_CLOSE ) ; org . jdesktop . application . ResourceMap resourceMap = org . jdesktop . application . Application . getInstance ( info . longshore . sudoku . gui . SudokuApplication . class ) . getContext ( ) . getResourceMap ( UserManualDialog . class ) ; setTitle ( resourceMap . getString ( "Form.title" ) ) ; setName ( "Form" ) ; jScrollPane1 . setName ( "jScrollPane1" ) ; jTextPane1 . setContentType ( resourceMap . getString ( "jTextPane1.contentType" ) ) ; jTextPane1 . setText ( resourceMap . getString ( "jTextPane1.text" ) ) ; jTextPane1 . setName ( "jTextPane1" ) ; jScrollPane1 . setViewportView ( jTextPane1 ) ; javax . swing . GroupLayout layout = new javax . swing . GroupLayout ( getContentPane ( ) ) ; getContentPane ( ) . setLayout ( layout ) ; layout . setHorizontalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( jScrollPane1 , javax . swing . GroupLayout . Alignment . TRAILING , javax . swing . GroupLayout . DEFAULT_SIZE , 410 , short . MAX_VALUE ) ) ; layout . setVerticalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( jScrollPane1 , javax . swing . GroupLayout . Alignment . TRAILING , javax . swing . GroupLayout . DEFAULT_SIZE , 311 , short . MAX_VALUE ) ) ; pack ( ) ; }
va	KEY	public boolean isAlive ( ) { return alive ; }
va	IDF	List < ECollisionType > getCollisions ( long id , long lecturerId , List < long > roomIds , long studentGroupId , int numberOfAppointments , Date startDate , Date endDate ) ;
va	IDF	public ItemMenu insistirPorEntradaValida ( EntradaSaida io ) { do { try { return this . selecionarItem ( io ) ; } catch ( EntradaInvalidaException e ) { io . imprimirLinha ( "[!] " + e . getMessage ( ) + "\n" ) ; continue ; } } while ( true ) ; }
va	KEY	public double getPriceLevel6 ( ) { return priceLevel6 ; }
va	IDF	public ProfesorBean loadId ( ProfesorBean oAlumno ) throws NumberFormatException { try { if ( request . getParameter ( "id" ) != null ) { oAlumno . setId ( Integer . parseInt ( request . getParameter ( "id" ) ) ) ; } else { oAlumno . setId ( 0 ) ; } } catch ( NumberFormatException e ) { throw new NumberFormatException ( "Controller: Error: Load: Formato de datos en par\u00E1metros incorrecto " + e . getMessage ( ) ) ; } return oAlumno ; }
va	IDF	private void updatePF0 ( int data ) { setRegister ( PF0 , data ) ; updatePlayfieldGraphics ( ) ; updatePlayfieldVisibility ( ) ; }
va	KEY	public void onDeviceInformationSent ( ) ;
va	IDF	public static void main ( String [ ] args ) { if ( false ) { int [ ] test0 = { 130 , 115 , 90 , 1025 , 330 , 475 , 190 , 515 , 290 , 1770 , 1505 , 25 , 180 , 115 , 325 , 660 , 1920 , 1440 , 960 , 1280 } ; FTreeSet < MyInteger > set0 = new FTreeSet < MyInteger > ( conv ( test0 ) ) ; println ( set0 . dump ( ) ) ; println ( set0 ) ; int [ ] test1 = { 215 , 775 , 180 , 625 , 1960 , 25 , 525 , 415 , 325 , 705 , 800 , 360 , 485 , 270 , 1025 , 890 , 830 , 715 , 665 , 305 , 240 , 695 , 215 } ; FTreeSet < MyInteger > set1 = new FTreeSet < MyInteger > ( conv ( test1 ) ) ; println ( set1 . dump ( ) ) ; println ( set1 ) ; FTreeSet < MyInteger > set0u1 = set0 . union ( set1 ) ; println ( set0u1 . dump ( ) ) ; println ( set0u1 ) ; FTreeSet < MyInteger > set0i1 = set0 . intersection ( set1 ) ; println ( set0i1 . dump ( ) ) ; println ( set0i1 ) ; FTreeSet < MyInteger > set0d1 = set0 . difference ( set1 ) ; println ( set0d1 . dump ( ) ) ; println ( set0d1 ) ; } if ( args . length != 1 ) { println ( "Usage: java TestSuite [n_iterations]" ) ; exit ( ) ; } int n_iterations = Integer . decode ( args [ 0 ] ) . intValue ( ) ; Random rand = new Random ( deadbeefcafe ) ; for ( int i = 0 ; i < n_iterations ; ++ i ) { FTreeSet < MyInteger > fts = testFTreeSet ( rand , i ) ; FHashSet < MyInteger > fhs = testFHashSet ( rand , i ) ; testFLinkedHashSet ( rand , i ) ; testFTreeMap ( rand , i , fts ) ; testFHashMap ( rand , i , fhs ) ; testFLinkedHashMap ( rand , i ) ; testFTreeList ( rand , i ) ; } println ( "All tests passed." ) ; }
va	IDF	void onGetImage ( Image image , S imageSource ) ;
va	KEY	public SRPCorrectionTest ( ) { }
va	KEY	public void close ( ) { closed = true ; started = false ; }
va	IDF	public boolean registerUser ( IPlayer playerOne ) { Connection conn = getConnection ( ) ; try { CallableStatement cs = conn . prepareCall ( "{CALL registerUsers(?  ?  ?  ?)}" ) ; cs . setString ( 1 , playerOne . getName ( ) ) ; cs . setInt ( 2 , playerOne . getWins ( ) ) ; cs . setInt ( 3 , playerOne . getNumberOfPlays ( ) ) ; cs . setInt ( 4 , highScoreInstance . getScore ( playerOne ) ) ; cs . executeQuery ( ) ; } catch ( NullPointerException e ) { System . out . println ( e . getMessage ( ) ) ; } catch ( CommunicationsException e ) { System . out . println ( e . getMessage ( ) ) ; } catch ( SQLException e ) { System . out . println ( "Error occured while registering." + e . getMessage ( ) ) ; } return true ; }
va	IDF	public void write ( ) { try { ps1 . setString ( 1 , source ) ; ps1 . setInt ( 2 , ( int ) reldepth ) ; ps1 . setLong ( 3 , ID ) ; ps1 . setTimestamp ( 4 , new Timestamp ( time ) ) ; ps1 . setDouble ( 5 , duration ) ; ps1 . setDouble ( 6 , distance ) ; ps1 . setString ( 7 , status ) ; ps1 . setString ( 8 , destination ) ; ps1 . setBoolean ( 9 , nodata ) ; ps1 . setDouble ( 10 , lon ) ; ps1 . setDouble ( 11 , lat ) ; ps1 . setDouble ( 12 , depth ) ; ps1 . addBatch ( ) ; ps1 . execute ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } }
va	IDF	@ Override public Object getObject ( ResultSet rs , int columnIndex , int columnType ) throws SQLException { switch ( columnType ) { case Types . TIME : return getJavaDate ( rs . getTimestamp ( columnIndex ) ) ; case Types . TIMESTAMP : return getJavaDate ( rs . getTimestamp ( columnIndex ) ) ; case Types . DATE : return getJavaDate ( rs . getTimestamp ( columnIndex ) ) ; default : return rs . getObject ( columnIndex ) ; } }
va	KEY	public Stock ( ) { }
va	IDF	@ Override public void componentShown ( ComponentEvent e ) { }
va	IDF	public List < Listen > getListen ( ) { if ( listen == null ) { listen = new ArrayList < Listen > ( ) ; } return this . listen ; }
va	KEY	public double getPrice ( ) { return price ; }
va	KEY	public void setOneKmRub ( int oneKmRub ) { this . oneKmRub = oneKmRub ; }
va	KEY	public void setCount ( long value ) { this . count = value ; }
va	IDF	private void markByte ( int xMouse , int yMouse ) { for ( int i = 0 ; i < m_hexData . length ; i ++ ) { int x = i % ( int ) 16 ; int y = i / ( int ) 16 ; int xRect = getTotalMarginLeft ( ) + x * s_iByteRectHorizontalSpacing + x * s_iByteRectWidth ; int yRect = getTotalMarginTop ( ) + y * s_iByteRectHeight ; if ( xMouse >= xRect && xMouse < xRect + s_iByteRectWidth && yMouse >= yRect && yMouse < yRect + s_iByteRectHeight ) mMarkedByte = i ; } repaint ( ) ; }
va	KEY	abstract public void addCondiments ( ) ;
va	KEY	public String getMessage ( ) { if ( detail == null ) { return super . getMessage ( ) ; } else { return super . getMessage ( ) ; } }
va	IDF	public LightOffCommand ( Light light ) { this . light = light ; }
va	IDF	@ Override public Action loadObject ( JsonObject json ) { return new VillageTileAction ( Integer . parseInt ( json . getString ( "actionID" ) ) , Integer . parseInt ( json . getString ( "x" ) ) , Integer . parseInt ( json . getString ( "y" ) ) ) ; }
va	IDF	public void setRetVal ( String retVal ) { this . retVal = retVal ; }
va	KEY	public Photograph ( ) { super . workCode = 101 ; }
va	IDF	public Profile [ ] findByDynamicWhere ( String sql , Object [ ] sqlParams ) throws ProfileDaoException ;
va	KEY	public void setValue ( int value ) { this . value = value ; }
va	KEY	public double getLimitAxisX ( ) { return limitAxisX ; }
va	KEY	public synchronized int xgetRTAssignedKeyCode ( ) { return rt ; }
va	KEY	public boolean isFighting ( ) { return fighting ; }
va	KEY	public abstract void visit ( Print print ) ;
va	IDF	public void play ( final Object soundKey ) { synchronized ( queue ) { if ( queue . size ( ) < 3 ) { queue . add ( soundKey ) ; queue . notify ( ) ; } } }
va	KEY	public synchronized int xgetL5InitialDelay ( ) { return l5ID ; }
va	IDF	public void setDocType ( String docType ) { this . docType = docType ; }
va	KEY	double normMaximum ( ) ;
va	IDF	public TelaGestaoChamado ( java . awt . Frame parent , boolean modal ) { super ( parent , modal ) ; initComponents ( ) ; setLocationRelativeTo ( parent ) ; try { dadosDAO = new ChamadoDAO ( ) ; } catch ( SQLException ex ) { javax . swing . JOptionPane . showMessageDialog ( null , ex . getMessage ( ) , "Conectando BD" , javax . swing . JOptionPane . ERROR_MESSAGE ) ; System . exit ( 1 ) ; } }
va	IDF	public void printDescription ( ) { System . out . println ( "You are in an empty field." ) ; this . north . examine ( ) ; this . east . examine ( ) ; this . west . examine ( ) ; this . south . examine ( ) ; if ( firstTimePrintingDescription ) { firstTimePrintingDescription = false ; Game . player . inventory . add ( new Sword ( ) ) ; Game . player . inventory . add ( new PocketLint ( ) ) ; Game . player . viewInventory ( ) ; System . out . println ( "Suddenly a piece of paper comes soaring on the wind and lands right in front of your feet." ) ; Pamphlet pamphlet = new Pamphlet ( ) ; this . droppedItems . add ( pamphlet ) ; } this . printItemsOnGround ( ) ; }
va	KEY	public BankTest ( ) { this . bank = new Bank ( ) ; }
va	KEY	public int size ( ) { return FTreeMap . this . size ( ) ; }
va	KEY	private boolean greater ( int i , int j ) { return this . elements [ i ] > this . elements [ j ] ; }
va	IDF	@ Override protected void setEstadoEdicao ( ) { jTFDescricao . setEditable ( true ) ; jTFDescricao . requestFocusInWindow ( ) ; }
va	IDF	public void render ( Graphics2D context ) { Font contextFont = context . getFont ( ) ; context . setColor ( this . textColor ) ; if ( Os . isWindows ( ) ) { this . setText ( this . getText ( ) . replace ( "\u00E4" , "ae" ) ) ; this . setText ( this . getText ( ) . replace ( "\u00FC" , "ue" ) ) ; this . setText ( this . getText ( ) . replace ( "\u00F6" , "oe" ) ) ; this . setText ( this . getText ( ) . replace ( "\u00DF" , "ss" ) ) ; this . setText ( this . getText ( ) . replace ( "\u00C4" , "Ae" ) ) ; this . setText ( this . getText ( ) . replace ( "\u00DC" , "Ue" ) ) ; this . setText ( this . getText ( ) . replace ( "\u00D6" , "Oe" ) ) ; } context . setFont ( this . getFont ( ) ) ; context . drawString ( this . text , this . getX ( ) , this . getY ( ) ) ; context . setFont ( contextFont ) ; }
va	IDF	public void __doPost ( HttpServletRequest req , HttpServletResponse resp ) throws IOException { resp . setContentType ( "text/plain" ) ; resp . getWriter ( ) . println ( "Ouch... not implemented yet :(" ) ; }
va	KEY	public double getSheltersValue ( ) { return sheltersValue ; }
va	IDF	public static void main ( String [ ] args ) { String pathinput = "C:/Users/lin/Desktop/myemotion/sentence/res.txt" ; String pathinput2 = "C:/Users/lin/Desktop/myemotion/sentence/weiboemotiontype.txt" ; File file = new File ( pathinput ) ; File unigramfile = new File ( pathinput2 ) ; BufferedReader reader = null ; BufferedReader reader2 = null ; try { reader = new BufferedReader ( new FileReader ( file ) ) ; reader2 = new BufferedReader ( new FileReader ( unigramfile ) ) ; String tempString = null ; int num = 0 , num2 = 0 ; while ( ( tempString = reader . readLine ( ) ) != null ) { String tem2 = reader2 . readLine ( ) ; if ( tempString . equals ( tem2 ) ) { num ++ ; } else { num2 ++ ; } } System . out . println ( num ) ; System . out . println ( num2 ) ; reader . close ( ) ; reader2 . close ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } finally { if ( reader != null ) { try { reader . close ( ) ; } catch ( IOException e1 ) { } } } }
va	IDF	public long createLinkCodePW ( FeatureTemplate . Link temp , long x , long y ) { return ( ( ( ( x << wordNumBits ) | y ) << numLinkFeatBits ) | temp . ordinal ( ) ) << ( auglbNumBits * 2 ) ; }
va	IDF	public static INDINumberProperty createSaveableNumberProperty ( INDIDriver driver , String name , String label , String group , PropertyStates state , PropertyPermissions permission , int timeout ) throws IllegalArgumentException { INDINumberProperty np = loadNumberProperty ( driver , name ) ; if ( np == null ) { np = new INDINumberProperty ( driver , name , label , group , state , permission , timeout ) ; np . setSaveable ( true ) ; } return np ; }
va	IDF	public String dump ( ) { String rv = String . format ( "Benchmark of %s in %d passes.\n" , subject , passes ) ; rv += String . format ( "Total time:        %.4f s\n" , total_t ) ; rv += String . format ( "Average time/pass: %.2f ms\n" , av_t ) ; rv += String . format ( "Max. time/pass:    %d ms\n" , max_t ) ; rv += String . format ( "Min. time/pass:    %d ms\n" , min_t ) ; return rv ; }
va	IDF	private void constructSpan ( int id ) { left [ id ] = id ; right [ id ] = id + 1 ; int st = startIndex ( id ) ; int ed = endIndex ( id ) ; for ( int p = st ; p < ed ; ++ p ) { int cid = get ( p ) ; if ( right [ cid ] == 0 ) constructSpan ( cid ) ; if ( left [ cid ] < left [ id ] ) left [ id ] = left [ cid ] ; if ( right [ cid ] > right [ id ] ) right [ id ] = right [ cid ] ; } }
va	KEY	public int getSeconds ( ) { return seconds ; }
va	KEY	@ JsonProperty ( "midPoint" ) public long getMidPoint ( ) { return midPoint ; }
va	IDF	void println ( ) { mOut . println ( ) ; }
va	IDF	public JoinChatRoomMessage ( ClientID id , String roomName ) { this . roomName = roomName ; client = id ; }
va	IDF	private Connection makeConnection ( ) { Connection myConn = null ; shutDown ( ) ; try { try { class myclass = class . forName ( dbClassNm ) ; if ( myclass == null ) { CLogError . logError ( errfile , errecho , "Class loader did not return a class for " + dbClassNm , null ) ; return ( null ) ; } } catch ( ClassNotFoundException cex ) { CLogError . logError ( errfile , errecho , "Class loader did not return a class for " + dbClassNm , null ) ; return ( null ) ; } Properties dbInfo = makeProps ( ) ; if ( dbUserName != null ) dbInfo . setProperty ( "user" , dbUserName ) ; if ( dbPassword != null ) dbInfo . setProperty ( "password" , dbPassword ) ; myConn = DriverManager . getConnection ( dbUrl , dbInfo ) ; if ( myConn == null ) { CLogError . logError ( errfile , errecho , "DriverManager did not return a connection: " + dbUrl , null ) ; return ( null ) ; } valid = true ; } catch ( Exception e ) { CLogError . logError ( errfile , errecho , "Error making connection: " , e ) ; } return myConn ; }
va	IDF	public void setSetting ( String group , String name , String value ) { String compiledName = group + "." + name ; this . settings . put ( compiledName , value ) ; try { Element propertiesElem = getOrCreateCollection ( "properties" ) ; Node setting = Utilities . selectSingleNode ( propertiesElem , "./c:property[@c:name='" + compiledName + "']" , this . namespaces ) ; if ( setting == null ) { setting = Utilities . createElement ( propertiesElem , "c" , "property" , this . namespaces ) ; Utilities . setAttribute ( setting , "c" , "name" , compiledName , this . namespaces ) ; propertiesElem . appendChild ( setting ) ; } CDATASection section = null ; Node first = setting . getFirstChild ( ) ; if ( first != null ) { if ( first . getNodeType ( ) == Node . CDATA_SECTION_NODE ) { section = ( CDATASection ) first ; } } if ( section == null ) { section = this . doc . createCDATASection ( value ) ; } setting . appendChild ( section ) ; save ( ) ; } catch ( Exception e ) { logger . warn ( "Unable to write setting: " + compiledName ) ; } }
va	KEY	public AddContactsToGroups createAddContactsToGroups ( ) { return new AddContactsToGroups ( ) ; }
va	KEY	public void reset ( ) { }
va	KEY	public int getGameEntityCount ( ) { return entities . size ( ) ; }
va	IDF	public FailedException ( final String message , final Throwable caughtException ) { super ( message , caughtException ) ; }
va	IDF	public static void main ( String args [ ] ) { try { for ( javax . swing . UIManager . LookAndFeelInfo info : javax . swing . UIManager . getInstalledLookAndFeels ( ) ) { if ( "Nimbus" . equals ( info . getName ( ) ) ) { javax . swing . UIManager . setLookAndFeel ( info . getClassName ( ) ) ; break ; } } } catch ( ClassNotFoundException ex ) { java . util . logging . Logger . getLogger ( jfOrdenPintura . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( InstantiationException ex ) { java . util . logging . Logger . getLogger ( jfOrdenPintura . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( IllegalAccessException ex ) { java . util . logging . Logger . getLogger ( jfOrdenPintura . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( javax . swing . UnsupportedLookAndFeelException ex ) { java . util . logging . Logger . getLogger ( jfOrdenPintura . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } java . awt . EventQueue . invokeLater ( new Runnable ( ) { public void run ( ) { jfOrdenPintura dialog = new jfOrdenPintura ( new javax . swing . JFrame ( ) , true ) ; dialog . addWindowListener ( new java . awt . event . WindowAdapter ( ) { @ Override public void windowClosing ( java . awt . event . WindowEvent e ) { System . exit ( 0 ) ; } } ) ; dialog . setVisible ( true ) ; } } ) ; }
va	IDF	private void initMouseControlsListener ( ) { mUI . xgetLatencySlider ( ) . addChangeListener ( new ChangeListener ( ) { @ Override public void stateChanged ( ChangeEvent e ) { JSlider source = ( JSlider ) e . getSource ( ) ; if ( ! source . getValueIsAdjusting ( ) ) { int value = source . getValue ( ) ; if ( value == 0 ) { value = 1 ; } container . xgetCurrentPreset ( ) . xsetMouseLatency ( value ) ; } } } ) ; mUI . xgetSpeedSlider ( ) . addChangeListener ( new ChangeListener ( ) { @ Override public void stateChanged ( ChangeEvent e ) { JSlider source = ( JSlider ) e . getSource ( ) ; if ( ! source . getValueIsAdjusting ( ) ) { int value = source . getValue ( ) ; if ( value == 0 ) { value = 1 ; } container . xgetCurrentPreset ( ) . xsetMouseSpeed ( value ) ; } } } ) ; mUI . xgetComboBox ( ) . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { JComboBox src = ( JComboBox ) e . getSource ( ) ; int i = src . getSelectedIndex ( ) ; if ( i == 0 ) { container . xgetCurrentPreset ( ) . xsetLeftThumbMouse ( ) ; r1 . setEnabled ( true ) ; r2 . setEnabled ( true ) ; r3 . setEnabled ( true ) ; r4 . setEnabled ( true ) ; l1 . setEnabled ( false ) ; l2 . setEnabled ( false ) ; l3 . setEnabled ( false ) ; l4 . setEnabled ( false ) ; } else { container . xgetCurrentPreset ( ) . xsetRightThumbMouse ( ) ; l1 . setEnabled ( true ) ; l2 . setEnabled ( true ) ; l3 . setEnabled ( true ) ; l4 . setEnabled ( true ) ; r1 . setEnabled ( false ) ; r2 . setEnabled ( false ) ; r3 . setEnabled ( false ) ; r4 . setEnabled ( false ) ; } } } ) ; }
va	KEY	public void setInfluence ( long influence ) { this . influence = influence ; }
va	IDF	public String exportItem ( ) { StringBuilder retstr = new StringBuilder ( 4096 ) ; retstr . append ( "<TestCaseItem>\n" ) ; retstr . append ( "<TestGroup>" + testgroupid + "</TestGroup>\n" ) ; retstr . append ( "<TestTitle>" + testtitle + "</TestTitle>\n" ) ; retstr . append ( "<TestDesc>" + testdesc + "</TestDesc>\n" ) ; retstr . append ( "<TestNotes>" + testnote + "</TestNotes>\n" ) ; retstr . append ( "<CreateBy>" + createby + "</CreateBy>\n" ) ; retstr . append ( "<BaseDate>" + dtfmt . format ( basedate ) + "</BaseDate>\n" ) ; retstr . append ( "<LastName>" + lastname + "</LastName>\n" ) ; retstr . append ( "<FirstName>" + firstname + "</FirstName>\n" ) ; retstr . append ( "<BirthDate>" + dtfmt . format ( birthdate ) + "</BirthDate>\n" ) ; retstr . append ( "<GenderCd>" + gendercd + "</GenderCd>\n" ) ; retstr . append ( shotlist . exportList ( ) ) ; retstr . append ( nonadmlist . exportList ( ) ) ; retstr . append ( ereslist . exportList ( ) ) ; retstr . append ( edoselist . exportList ( ) ) ; retstr . append ( "</TestCaseItem>\n" ) ; return ( retstr . toString ( ) ) ; }
va	KEY	public float getSpeedRA ( ) { return speedRA ; }
va	IDF	public void write ( int addr , int data ) { if ( ! getBit ( addr , 12 ) && getBit ( addr , 7 ) ) { mRAM . setRS ( getBit ( addr , 9 ) ) ; mRAM . write ( addr & 7F , data ) ; mStepping = true ; } if ( ! getBit ( addr , 12 ) && ! getBit ( addr , 7 ) ) { mStella . write ( addr & 3F , data ) ; } if ( getBit ( addr , 12 ) ) { mGame . write ( addr , data ) ; } }
va	KEY	@ AfterClass public static void tearDownClass ( ) throws Exception { }
va	KEY	public Pepperoni createPepperoni ( ) { return new SlicedPepperoni ( ) ; }
va	IDF	public static boolean isValidPredAugPair ( DependencyInstance inst , int p , int a ) { int [ ] heads = inst . heads ; int pa = heads [ a ] ; for ( int i = 0 , x = p ; i <= MAX_DEPTH && x >= 0 ; ++ i ) { if ( x == a || x == pa ) return true ; x = heads [ x ] ; } return false ; }
va	KEY	public void decrementTwo ( ) { numTwoTile -- ; }
va	KEY	private StringUtilities ( ) { }
va	KEY	public boolean getShow ( ) { return _show ; }
va	KEY	static float evalCubic ( final float a , final float b , final float c , final float d , final float t ) { return t * ( t * ( t * a + b ) + c ) + d ; }
va	IDF	public static boolean isBlack ( int piece ) { return piece == DraughtsState . BLACKPIECE || piece == DraughtsState . BLACKKING ; }
va	IDF	private static boolean eql ( Object x , Object y ) { return x == null ? y == null : x . equals ( y ) ; }
va	IDF	@ Override public FractalValue visitASTTCmdForward ( ASTTCmdForward form , FractalState state ) throws FractalException { System . out . print ( "->CmdForward" ) ; ASTExp distExp = form . getLength ( ) ; FractalValue distVal = distExp . visit ( this , state ) ; double distance = distVal . realValue ( ) * state . getDefaultScale ( ) ; state . getTurtleState ( ) . displace ( distance ) ; return FractalValue . NO_VALUE ; }
va	KEY	public static SqlMapClient getSqlMapClient ( ) { return sqlMapClient ; }
va	IDF	private void checkNewLine ( char c ) { if ( c == Characters . NEWLINE ) { ++ rowNum ; colNum = 0 ; } }
va	IDF	public void setState ( String state ) { this . state = state ; }
va	IDF	public TinyUrlManagerException ( String arg0 , Throwable arg1 , boolean arg2 , boolean arg3 ) { super ( arg0 , arg1 , arg2 , arg3 ) ; }
va	KEY	@ Override public int getNumberOfRows ( ) { return n ; }
va	IDF	public SchoolYear ( String name , Date start , Date end ) { this . name = name ; this . start = start ; this . end = end ; }
va	KEY	public boolean isMain ( ) { return main ; }
va	KEY	public abstract void buildTempero ( ) ;
va	KEY	@ Override public void exec ( ) { }
va	IDF	public void addEmptyLine ( Paragraph paragraph , int number ) { for ( int i = 0 ; i < number ; i ++ ) { paragraph . add ( new Paragraph ( " " ) ) ; } }
va	IDF	LengthIterator ( ) { this . recCurveStack = new float [ REC_LIMIT + 1 ] [ 8 ] ; this . sides = new Side [ REC_LIMIT ] ; this . nextT = float . MAX_VALUE ; this . lenAtNextT = float . MAX_VALUE ; this . lenAtLastSplit = float . MIN_VALUE ; this . recLevel = Integer . MIN_VALUE ; this . lastSegLen = float . MAX_VALUE ; this . done = true ; }
va	KEY	public double getPriceLevel4 ( ) { return priceLevel4 ; }
va	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { mainMenuButtonActionPerformed ( evt ) ; }
va	KEY	public void setArrMatched ( int [ ] arrMatched ) { this . arrMatched = arrMatched ; }
va	KEY	public synchronized void xassignD3KeyCode ( int code ) { d3 = code ; }
va	IDF	public void dieJumpRecord ( ) { deaths [ 8 ] ++ ; detailedLog += "Die:  Gap " ; detailedLog += "\n" ; }
va	KEY	public long getId ( ) { return id ; }
va	KEY	public int getWidth ( ) { return width ; }
va	IDF	public void allPositions ( int [ ] playerIDs , String [ ] playerNames , String [ ] playerColors , int [ ] [ ] xPos , int [ ] [ ] yPos , int [ ] score , int [ ] xFood , int [ ] yFood ) { if ( boardPanel != null ) boardPanel . allPositions ( playerIDs , playerNames , playerColors , xPos , yPos , score , xFood , yFood ) ; if ( sideBarPanel != null ) sideBarPanel . setScore ( playerIDs , playerNames , playerColors , xPos , yPos , score , xFood , yFood ) ; }
va	IDF	public void setPrice ( Price price ) { this . price = price ; }
va	KEY	public HeuristicEval ( ) { scores = new ArrayList < double > ( ) ; }
va	KEY	public boolean checkIfEveryoneIsOutOfCards ( ) { for ( JavaFestivalPlayer player : players ) { if ( player . checkIfInFestival ( ) ) { if ( player . getNumPalaceCards ( ) > 0 ) return false ; } } return true ; }
va	KEY	int size ( ) ;
va	IDF	public final BoolContext bool ( int _p ) throws RecognitionException { ParserRuleContext _parentctx = _ctx ; int _parentState = getState ( ) ; BoolContext _localctx = new BoolContext ( _ctx , _parentState , _p ) ; BoolContext _prevctx = _localctx ; int _startState = 8 ; enterRecursionRule ( _localctx , RULE_bool ) ; int _la ; try { int _alt ; enterOuterAlt ( _localctx , 1 ) ; { setState ( 86 ) ; switch ( getInterpreter ( ) . adaptivePredict ( _input , 5 , _ctx ) ) { case 1 : { _localctx = new NaoLogicoContext ( _localctx ) ; _ctx = _localctx ; _prevctx = _localctx ; setState ( 71 ) ; match ( 4 ) ; setState ( 72 ) ; bool ( 3 ) ; } break ; case 2 : { _localctx = new BooleanoContext ( _localctx ) ; _ctx = _localctx ; _prevctx = _localctx ; setState ( 73 ) ; _la = _input . LA ( 1 ) ; if ( ! ( _la == 3 || _la == 24 ) ) { _errHandler . recoverInline ( this ) ; } consume ( ) ; } break ; case 3 : { _localctx = new OpRelContext ( _localctx ) ; _ctx = _localctx ; _prevctx = _localctx ; setState ( 74 ) ; expressao ( 0 ) ; setState ( 75 ) ; match ( 12 ) ; setState ( 76 ) ; expressao ( 0 ) ; } break ; case 4 : { _localctx = new OpRelContext ( _localctx ) ; _ctx = _localctx ; _prevctx = _localctx ; setState ( 78 ) ; expressao ( 0 ) ; setState ( 79 ) ; match ( 14 ) ; setState ( 80 ) ; expressao ( 0 ) ; } break ; case 5 : { _localctx = new BoolParContext ( _localctx ) ; _ctx = _localctx ; _prevctx = _localctx ; setState ( 82 ) ; match ( 10 ) ; setState ( 83 ) ; bool ( 0 ) ; setState ( 84 ) ; match ( 2 ) ; } break ; } _ctx . stop = _input . < ( - 1 ) ; setState ( 93 ) ; _errHandler . sync ( this ) ; _alt = getInterpreter ( ) . adaptivePredict ( _input , 6 , _ctx ) ; while ( _alt != 2 && _alt != - 1 ) { if ( _alt == 1 ) { if ( _parseListeners != null ) triggerExitRuleEvent ( ) ; _prevctx = _localctx ; { { _localctx = new ELogicoContext ( new BoolContext ( _parentctx , _parentState , _p ) ) ; pushNewRecursionContext ( _localctx , _startState , RULE_bool ) ; setState ( 88 ) ; if ( ! ( 2 >= _localctx . _p ) ) throw new FailedPredicateException ( this , "2 >= $_p" ) ; setState ( 89 ) ; match ( 15 ) ; setState ( 90 ) ; bool ( 3 ) ; } } } setState ( 95 ) ; _errHandler . sync ( this ) ; _alt = getInterpreter ( ) . adaptivePredict ( _input , 6 , _ctx ) ; } } } catch ( RecognitionException re ) { _localctx . exception = re ; _errHandler . reportError ( this , re ) ; _errHandler . recover ( this , re ) ; } finally { unrollRecursionContexts ( _parentctx ) ; } return _localctx ; }
va	KEY	public final Directory getDirectory ( ) { return new Directory ( super . getParent ( ) ) ; }
va	KEY	protected final Object clone ( ) { return this ; }
va	IDF	public ShavingFoam ( Integer price , String name ) { super ( price , name ) ; }
va	KEY	public void setCreatedDate ( Calendar createdDate ) { if ( createdDate == null ) { throw new IllegalArgumentException ( "Created date cannot be null!" ) ; } this . createdDate = createdDate ; }
va	KEY	public void setModDate ( ) { moddate = new Date ( ) ; }
va	IDF	public void setIdcliente ( int idcliente ) { this . idcliente = idcliente ; try { this . setCliente ( ClienteDP . getOne ( idcliente ) ) ; } catch ( SQLException ex ) { Logger . getLogger ( Remito . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; } }
va	KEY	public static TimeInfoManager getInstance ( ) { if ( _instance == null ) { _instance = new TimeInfoManager ( ) ; } return _instance ; }
va	IDF	@ Override public void closePath ( ) { out . closePath ( ) ; }
va	KEY	void display ( ) ;
va	IDF	public void setLocation ( int xloc , int yloc ) { x = xloc ; y = yloc ; repaint ( ) ; }
va	KEY	public void toggle ( ) { if ( isSetIn ( ) ) { setOut ( ) ; } else { setIn ( ) ; } }
va	IDF	public ArrayList < Integer > getUnassignedVariables ( ) { ArrayList < Integer > uav = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < assignment . length ; i ++ ) { if ( assignment [ i ] == - 1 ) { uav . add ( i ) ; } } return uav ; }
va	KEY	public int getCantidad ( ) { return cantidad ; }
va	KEY	@ Override public ScenarioTreeStep getNextStep ( ) { return null ; }
va	KEY	public int getNumFrames ( ) { return frames . size ( ) ; }
va	IDF	private static void split ( final double d , final double split [ ] ) { if ( d < 8e298 && d > - 8e298 ) { final double a = d * HEX_40000000 ; split [ 0 ] = ( d + a ) - a ; split [ 1 ] = d - split [ 0 ] ; } else { final double a = d * 9.31322574615478515625E-10 ; split [ 0 ] = ( d + a - d ) * HEX_40000000 ; split [ 1 ] = d - split [ 0 ] ; } }
va	IDF	@ Override public void setIdMessage ( String idMessage ) { this . _idMessage = idMessage ; }
va	KEY	private int toBlock ( double n ) { return ( int ) ( n / 16 ) ; }
va	KEY	public Cliente createCliente ( ) { return new Cliente ( ) ; }
va	IDF	public ICCC ( Imposto outroImposto ) { super ( outroImposto ) ; }
va	IDF	public void construct ( ) { cellDoor = new PrisonCellDoor ( World . prisonHallway ) ; this . aspects . add ( cellDoor ) ; this . droppedItems . add ( new PrisonCellKey ( ) ) ; return ; }
va	IDF	public void increment ( ) { index ++ ; if ( index >= autoModes . size ( ) ) { index = 0 ; } lcd . println ( DriverStationLCD . Line . kUser1 , 1 , "                                       " ) ; lcd . println ( DriverStationLCD . Line . kUser1 , 1 , "Auto: " + getCurrentName ( ) ) ; lcd . updateLCD ( ) ; }
va	IDF	@ Override public void addLine ( String line ) { lines . add ( line ) ; }
va	KEY	public int getSubjectCount ( ) { return this . subjects . size ( ) ; }
va	IDF	private static int hashCode ( Object x ) { return FHashSet . hashCode ( x ) ; }
va	KEY	@ Override public void run ( ) { }
va	KEY	public ResendPassword ( ) { super ( ) ; }
va	IDF	private static Change parseChange ( String s , String revision , String revisionBefore ) { if ( s . trim ( ) . isEmpty ( ) ) return null ; List < String > values = split ( s , "\t" ) ; VcsChange . Type changeType = parseChangeType ( values . get ( 0 ) ) ; boolean hasRenames = values . size ( ) > 2 ; String filePath = unescapeQuotes ( hasRenames ? values . get ( 2 ) : values . get ( 1 ) ) ; String filePathBefore = unescapeQuotes ( hasRenames ? values . get ( 1 ) : filePath ) ; if ( changeType == Added ) { filePathBefore = VcsChange . noFilePath ; revisionBefore = VcsChange . noRevision ; } else if ( changeType == Deleted ) { filePathBefore = filePath ; filePath = VcsChange . noFilePath ; } return new Change ( changeType , filePath , filePathBefore , revision , revisionBefore ) ; }
va	KEY	public static void initInstance ( ) { if ( global == null ) { global = new ImageManager ( RESOURCE_PATH ) ; } }
va	IDF	public ArrayList < FilterBean > getAlFilter ( ) { return alFilter ; }
va	KEY	public boolean isOnline ( ) { return isOnline ; }
va	IDF	public void setNr ( int nr ) { this . nr = nr ; col = PlayerColor . getPlayerColor ( nr ) ; }
va	IDF	public Five01Game ( List < Player > players ) { super ( players , 501 ) ; }
va	KEY	public static String getDatabasePort ( ) { return "3306" ; }
va	IDF	public static void printUncontrolledException ( Exception e ) { System . err . println ( "ERROR: An uncontrolled exception happened.\nApplication is going to be closed.\nPlease contact with the administrator of the System.\nThanks and sorry for the inconveniences." ) ; e . printStackTrace ( ) ; }
va	KEY	public void setRank ( int rank ) { this . rank = rank ; }
va	IDF	public ExitChatRoomMessage ( ClientID id , String roomName ) { this . roomName = roomName ; client = id ; }
va	IDF	void configureViewElementsLayout ( ) { this . setSize ( 800 , 400 ) ; JPanel divisionSizeArea = createDivisionSizeInputArea ( ) ; JTabbedPane inputArea = createInputTabs ( ) ; SpringLayout layout = new SpringLayout ( ) ; layout . putConstraint ( SpringLayout . WEST , divisionSizeArea , 10 , SpringLayout . WEST , getContentPane ( ) ) ; layout . putConstraint ( SpringLayout . NORTH , divisionSizeArea , 10 , SpringLayout . NORTH , getContentPane ( ) ) ; layout . putConstraint ( SpringLayout . WEST , inputArea , 10 , SpringLayout . WEST , getContentPane ( ) ) ; layout . putConstraint ( SpringLayout . NORTH , inputArea , 10 , SpringLayout . SOUTH , divisionSizeArea ) ; layout . putConstraint ( SpringLayout . SOUTH , inputArea , 10 , SpringLayout . NORTH , messageArea ) ; layout . putConstraint ( SpringLayout . NORTH , messageArea , - 50 , SpringLayout . SOUTH , getContentPane ( ) ) ; layout . putConstraint ( SpringLayout . SOUTH , messageArea , - 20 , SpringLayout . SOUTH , getContentPane ( ) ) ; layout . putConstraint ( SpringLayout . WEST , paintScreen , 10 , SpringLayout . EAST , inputArea ) ; layout . putConstraint ( SpringLayout . EAST , paintScreen , - 10 , SpringLayout . EAST , getContentPane ( ) ) ; layout . putConstraint ( SpringLayout . NORTH , paintScreen , 10 , SpringLayout . NORTH , getContentPane ( ) ) ; layout . putConstraint ( SpringLayout . SOUTH , paintScreen , - 20 , SpringLayout . SOUTH , getContentPane ( ) ) ; this . setLayout ( layout ) ; Container contentPane = getContentPane ( ) ; contentPane . add ( divisionSizeArea ) ; contentPane . add ( inputArea ) ; contentPane . add ( messageArea ) ; contentPane . add ( paintScreen ) ; }
va	KEY	public PorteAvion ( ) { super ( "Porte Avion" , 5 ) ; }
va	IDF	Dept D ( String name , Employee manager , List < SubUnit > subUnits ) ;
va	KEY	private Util ( ) { }
va	IDF	private List < String > read ( ) { List < String > lines = new ArrayList < > ( ) ; open ( ) ; scan . reset ( ) ; while ( scan . hasNextLine ( ) ) { lines . add ( scan . nextLine ( ) ) ; } return lines ; }
va	IDF	@ Override public void render ( VGraphics g ) { g . setColor ( Color . white ) ; g . setTexture ( "vau/background.png" ) ; g . drawRect ( 0 , 0 , g . getWidth ( ) + 50 , g . getHeight ( ) + 50 ) ; i += 5.0f ; g . setTexture ( "vau/loading.png" ) ; g . drawRect ( 64 , 64 , 64 , 64 , i ) ; g . drawRect ( 96 , 64 , 64 , - 64 , - i - 90 ) ; g . setTexture ( "vau/loading_word.png" ) ; g . drawRect ( 32 , 96 , 128 , 128 ) ; g . drawString ( "Programmer: Yew_Mentzaki (http://grts3.ru/yew_mentzaki.php)" , 135 , 35 ) ; g . drawString ( "Music: Alex Mason (http://freemusicarchive.org/music/Alex_Mason/)" , 135 , 75 ) ; }
va	KEY	public void criarNovoProdutoPizza ( ) { pizza = new Pizza ( ) ; }
va	IDF	public void update ( ) { img = new BufferedImage ( tileMap . getWidth ( ) * tileMap . getTileWidth ( ) , tileMap . getHeight ( ) * tileMap . getTileHeight ( ) , ColorModel . TRANSLUCENT ) ; Graphics2D g = ( Graphics2D ) img . getGraphics ( ) ; g . setComposite ( AlphaComposite . getInstance ( AlphaComposite . SRC_OVER ) ) ; int dx = 0 , dy = 0 , id ; int tw = tileMap . getTileWidth ( ) ; int th = tileMap . getTileHeight ( ) ; Tileset ts = tileMap . getTileset ( ) ; BufferedImage tileImg ; TileData td ; float [ ] dash = { 10.0f } ; g . setStroke ( new BasicStroke ( 1.0f , BasicStroke . CAP_BUTT , BasicStroke . JOIN_MITER , 10.0f , dash , 0.0f ) ) ; for ( int l = 0 ; l < tileMap . getLayerCount ( ) ; l ++ ) { dy = 0 ; for ( int y = 0 ; y < tileMap . getHeight ( l ) ; y ++ ) { dx = 0 ; for ( int x = 0 ; x < tileMap . getWidth ( l ) ; x ++ ) { id = tileMap . getTileId ( l , x , y ) ; td = ts . get ( id ) ; tileImg = td . getImage ( ) . getImage ( ) ; if ( tileImg != null ) { g . drawImage ( tileImg , dx , dy , null ) ; if ( GameSettings . getInstance ( ) . isDebugMode ( ) ) { g . setColor ( Color . gray ) ; if ( "1" . equals ( td . getProperty ( "landBlocked" ) ) ) { g . setColor ( new Color ( 255 , 0 , 0 , 128 ) ) ; g . fillRect ( x * tw , y * th , tw , th ) ; } } } dx += tw ; } dy += th ; } } dirty = false ; img = ImageUtils . toCompatibleImage ( img ) ; }
va	IDF	public void removeParam ( String strParam ) { this . parameters . remove ( strParam ) ; }
va	IDF	private Symbol ( String n , Tokens kind ) { name = n ; this . kind = kind ; }
va	IDF	public void render ( Graphics g ) { Graphics2D g2 = ( Graphics2D ) g ; g . setFont ( font ) ; lines . clear ( ) ; Rectangle2D rec = font . getStringBounds ( text , g2 . getFontRenderContext ( ) ) ; String tempText = new String ( ) ; if ( rec . getWidth ( ) > width ) { for ( int i = 0 ; i < text . length ( ) ; ++ i ) { tempText += text . charAt ( i ) ; rec = font . getStringBounds ( tempText + "A" , g2 . getFontRenderContext ( ) ) ; if ( rec . getWidth ( ) >= width ) { lines . add ( tempText ) ; tempText = new String ( ) ; } } lines . add ( tempText ) ; } else { lines . add ( text ) ; } for ( int j = 0 ; j < lines . size ( ) ; ++ j ) { rec = font . getStringBounds ( lines . get ( j ) , g2 . getFontRenderContext ( ) ) ; g . drawString ( lines . get ( j ) , x , y + ( int ) rec . getHeight ( ) * ( j + 1 ) ) ; } if ( showBox ) { height = ( int ) rec . getHeight ( ) * lines . size ( ) ; g . setColor ( Color . BLUE ) ; g . drawRect ( x , y , width , height ) ; } }
va	IDF	public Environment get ( String name ) { if ( Utilities . isNullOrWhitespace ( name ) ) { throw new IllegalArgumentException ( "Name must be valid." ) ; } return this . environments . get ( name ) ; }
va	IDF	public void setBecomeRegisteredVoter ( JCheckBox becomeRegisteredVoter ) { this . becomeRegisteredVoter = becomeRegisteredVoter ; }
va	KEY	@ Override public boolean needTile ( Object ctx , int x , int y , int w , int h ) { return true ; }
va	IDF	@ Override public void setOnDeleteCard ( Presentable presenter ) { this . onDeleteCard = presenter ; }
va	IDF	public void setTransactionArticles ( TransactionArticle [ ] transactionArticles ) { this . transactionArticles = transactionArticles ; }
va	KEY	public WrapLayout ( int align ) { super ( align ) ; }
va	KEY	@ Override public int getNumerator ( ) { return numerator ; }
va	KEY	public boolean isGameOver ( ) { return gameOver ; }
va	IDF	@ Test public void testWebSocket ( ) { createWebSocketPingServer ( ) ; RxHttpClient client = new RxHttpClient ( vertx . createHttpClient ( ) . setHost ( "localhost" ) . setPort ( 8090 ) ) ; final List < String > seq = new ArrayList ( Arrays . asList ( "eeny" , "meeny" , "miny" , "moe" , "EOF" ) ) ; client . connectWebsocket ( "/ping/connect" ) . subscribe ( new Action1 < RxWebSocket > ( ) { public void call ( RxWebSocket s ) { System . out . println ( "WebSocket:connected" ) ; assertSingle ( s . writeAsTextFrame ( Observable . from ( seq ) ) , 5 ) ; assertSequenceThenComplete ( s . asObservable ( ) , new Buffer ( "eeny" ) , new Buffer ( "meeny" ) , new Buffer ( "miny" ) , new Buffer ( "moe" ) ) ; } } ) ; }
va	IDF	private static Node makeNode ( Object key , Object value , Object left , Object right ) { if ( key instanceof Entry ) { Entry ent = ( Entry ) key ; value = ent . value ; key = ent . key ; } return new Node ( treeSize ( left ) + treeSize ( right ) + keySize ( key ) , key , value , left , right ) ; }
va	KEY	public void setRelevance ( double relevance ) { this . relevance = relevance ; }
va	IDF	public static int revsToCounts ( double revs ) { Robot robot = Configuration . getRobot ( ) ; return ( int ) ( revs * robot . getCountsRevs ( ) ) ; }
va	KEY	public int getUserConfigY ( ) { return userConfigY ; }
va	IDF	void rehashConfig ( ) throws JAXBException , FileNotFoundException , SAXException ;
va	KEY	public EncapsulationTest ( ) { }
va	IDF	public Action pressEnter ( GameModel game ) { VillageTileAction action = new VillageTileAction ( game . nextActionID ( ) , x , y ) ; if ( action . doAction ( game ) ) return action ; return null ; }
va	IDF	public XmlQuery getQuery ( ) throws Exception { if ( ! FieldTypeEnum . QUERY . equals ( discriminator ) ) { throw new Exception ( "is not a query." ) ; } return query ; }
va	IDF	public String getTitle ( ) { return _metadata . getID3v1Tag ( ) . getTitle ( ) . get ( 0 ) . toString ( ) ; }
va	IDF	private double findMedianSortedArrays ( int [ ] m , int [ ] n , int start , int end ) { int i = start + ( end - start ) / 2 ; int j = ( m . length + n . length + 1 ) / 2 - i ; int maxLeft , minRight ; if ( i == 0 ) { if ( m . length == 0 ) { if ( n . length == 0 ) { return 0 ; } if ( n . length == 1 ) { return n [ 0 ] ; } maxLeft = n [ j - 1 ] ; minRight = n [ j ] ; return makeMedian ( m , n , maxLeft , minRight ) ; } if ( n [ j - 1 ] <= m [ i ] ) { maxLeft = n [ j - 1 ] ; minRight = j == n . length ? m [ i ] : min ( m [ i ] , n [ j ] ) ; return makeMedian ( m , n , maxLeft , minRight ) ; } else { return findMedianSortedArrays ( m , n , i + 1 , end ) ; } } if ( i == m . length ) { if ( m [ i - 1 ] <= n [ j ] ) { maxLeft = j == 0 ? m [ i - 1 ] : max ( m [ i - 1 ] , n [ j - 1 ] ) ; minRight = n [ j ] ; return makeMedian ( m , n , maxLeft , minRight ) ; } else { return findMedianSortedArrays ( m , n , start , i ) ; } } if ( m [ i - 1 ] <= n [ j ] && n [ j - 1 ] <= m [ i ] ) { maxLeft = max ( m [ i - 1 ] , n [ j - 1 ] ) ; minRight = min ( m [ i ] , n [ j ] ) ; return makeMedian ( m , n , maxLeft , minRight ) ; } else if ( m [ i - 1 ] > n [ j ] ) { return findMedianSortedArrays ( m , n , start , i ) ; } else { return findMedianSortedArrays ( m , n , i + 1 , end ) ; } }
va	KEY	public static int max ( final int a , final int b ) { return ( a <= b ) ? b : a ; }
va	IDF	protected void assertNotNullOrEmpty ( String name , String value ) { if ( isNullOrEmpty ( value ) ) { throw new IllegalArgumentException ( name + " cannot be null or empty." ) ; } }
va	IDF	@ Test public void testExecute ( ) { System . setOut ( ps ) ; light . on ( ) ; System . out . flush ( ) ; System . setOut ( old ) ; expected = "Light is on" ; actual = baos . toString ( ) ; actual = actual . replace ( "\n" , "" ) . replace ( "\r" , "" ) ; assertEquals ( expected , actual ) ; }
va	IDF	public void showCreateSuccess ( ProductModel newProduct ) { System . out . println ( "You have created a new product:" ) ; System . out . println ( newProduct ) ; }
va	KEY	public Game ( ) { this ( new Dimension ( 13 , 13 ) ) ; }
va	KEY	public boolean hasWinner ( ) { return colourOfWinner ( ) != EMPTY_STONE_COLOUR ; }
va	IDF	public static String getFrom ( Email email ) { String value = getHeaderAttribute ( email , "From" ) ; return StringUtil . getEmailFromContent ( value ) ; }
va	IDF	private void zzScanError ( int errorCode ) { String message ; try { message = ZZ_ERROR_MSG [ errorCode ] ; } catch ( ArrayIndexOutOfBoundsException e ) { message = ZZ_ERROR_MSG [ ZZ_UNKNOWN_ERROR ] ; } throw new Error ( message ) ; }
va	KEY	public String toTextValue ( ) { return this . textValue ; }
va	KEY	public int getParScore ( ) { return parScore ; }
va	KEY	public void setReturn ( long value ) { this . _return = value ; }
va	IDF	public void process ( String table ) throws SQLException { long start = System . currentTimeMillis ( ) ; System . out . println ( ">> Working on " + table ) ; Statement stmt = conn . createStatement ( ) ; stmt . execute ( "DROP INDEX " + table + "_geom" ) ; stmt . execute ( "CREATE INDEX " + table + "_geom ON " + table + " USING GIST (geom)" ) ; stmt . execute ( "VACUUM ANALYZE " + table ) ; long stop = System . currentTimeMillis ( ) ; System . out . println ( ">> " + table + " complete.  Elapsed time: " + TimeConvert . millisToString ( stop - start ) ) ; }
va	KEY	protected int getStartId ( ) { return this . startId ; }
va	IDF	public int IdentificacionUsuario ( String nombreUsuario , String password ) throws SQLException { int resultado = 4 ; try { class . forName ( "sun.jdbc.odbc.JdbcOdbcDriver" ) ; Connection conexion = DriverManager . getConnection ( "jdbc:odbc:ADSI" ) ; Statement sentencia = conexion . createStatement ( ) ; conexion . setAutoCommit ( false ) ; String consul = "Select email  contrasena  Tipo from Usuario " + "where email = '" + nombreUsuario + "' and contrasena = '" + password + "'" ; ResultSet rs = sentencia . executeQuery ( consul ) ; while ( rs . next ( ) ) { String email = rs . getString ( "email" ) ; int tipo = rs . getInt ( "Tipo" ) ; if ( tipo == 0 ) { resultado = 0 ; } else if ( tipo == 1 ) { resultado = 1 ; } else { resultado = 2 ; } } sentencia . close ( ) ; conexion . close ( ) ; } catch ( Exception err ) { System . out . println ( "Error " + err . getMessage ( ) ) ; } return resultado ; }
va	KEY	public void checkTurn ( ) ;
va	IDF	public Rectangle findActiveBird ( List < Rectangle > birds ) { Rectangle activeBird = null ; for ( Rectangle r : birds ) { if ( ( activeBird == null ) || ( activeBird . y > r . y ) ) { activeBird = r ; } } return activeBird ; }
va	KEY	public synchronized int xgetR1AssignedKeyCode ( ) { return r1 ; }
va	KEY	Symbol getcopy ( ) { return new DataStore ( this ) ; }
va	IDF	@ Test public final void testWriteProperties_FileNotExists ( ) { final File file = new File ( "mock.txt" ) ; file . delete ( ) ; try { final OrderedProperties orderedProperties = new OrderedProperties ( ) ; orderedProperties . put ( "key" , "value" ) ; file . write ( orderedProperties ) ; fail ( ) ; } catch ( final FileNotOnDiskException e ) { } }
va	IDF	public WrapLayout ( int align , int hgap , int vgap ) { super ( align , hgap , vgap ) ; }
va	IDF	public Object accept ( ASTVisitor v ) { return v . visitCallTree ( this ) ; }
va	IDF	@ Override public String getColumnName ( int column ) { return entete [ column ] ; }
va	KEY	public boolean isRunning ( ) { return running ; }
va	IDF	@ Override public void mouseClicked ( MouseEvent arg0 ) { System . exit ( 0 ) ; }
va	IDF	public static void GoFromMainMenuToLevelSelection ( ) { GameState state = StateUtil . getGameState ( proxy ) ; while ( state == GameState . MAIN_MENU ) { System . out . println ( "Go to the Episode Menu" ) ; proxy . send ( new ProxyClickMessage ( 305 , 277 ) ) ; try { Thread . sleep ( 1000 ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } state = StateUtil . getGameState ( proxy ) ; } while ( state == GameState . EPISODE_MENU ) { System . out . println ( "Select the Poached Eggs Episode" ) ; proxy . send ( new ProxyClickMessage ( 150 , 300 ) ) ; state = StateUtil . getGameState ( proxy ) ; try { Thread . sleep ( 1000 ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } state = StateUtil . getGameState ( proxy ) ; } }
va	IDF	public List < String > getAssets ( ) { return assets ; }
va	IDF	public int hashCode ( ) { return ( ( key == null ? 0 : key . hashCode ( ) ) ^ ( value == null ? 0 : value . hashCode ( ) ) ) ; }
va	KEY	public boolean getShift ( ) { return mainJoystick . getRawButton ( 9 ) ; }
va	KEY	public boolean isEmpty ( ) { return tree == null ; }
va	IDF	public boolean fromVillageToRice ( JavaCell jc1 , JavaCell jc2 ) { if ( jc1 . getCellType ( ) . equals ( "village" ) && jc2 . getCellType ( ) . equals ( "rice" ) || jc1 . getCellType ( ) . equals ( "rice" ) && jc2 . getCellType ( ) . equals ( "village" ) ) { return true ; } return false ; }
va	IDF	@ Test public void portIsSetCorrectlyWhenZeroUsed ( ) { assertThat ( broker . getPort ( ) , not ( 0 ) ) ; }
va	IDF	public ActorModel ( int id , String firstname , String lastname ) { this . id = id ; this . firstname = firstname ; this . lastname = lastname ; }
va	IDF	private void addCardToCenterPanelWithImage ( String imageHashKey , int indexOfPlayer ) { JLabel card = palaceLabel ( imageSourceHashMap . get ( "label_" + imageHashKey ) ) ; if ( indexOfPlayer % 2 == 1 ) { BufferedImage cardToDraw = getImage ( imageSourceHashMap . get ( imageHashKey ) ) ; BufferedImage cardLabel = new BufferedImage ( cardToDraw . getHeight ( ) , cardToDraw . getWidth ( ) , BufferedImage . TYPE_INT_ARGB ) ; Graphics2D g2d = cardLabel . createGraphics ( ) ; if ( indexOfPlayer == 1 ) { g2d . rotate ( ( - 1 ) * Math . PI / 2 ) ; g2d . translate ( ( - 1 ) * cardToDraw . getWidth ( ) , 0 ) ; g2d . drawImage ( cardToDraw , null , 0 , 0 ) ; } else { g2d . rotate ( Math . PI / 2 ) ; g2d . translate ( 0 , ( - 1 ) * cardToDraw . getHeight ( ) ) ; g2d . drawImage ( cardToDraw , null , 0 , 0 ) ; } g2d . dispose ( ) ; card = new JLabel ( new ImageIcon ( cardLabel ) ) ; card . setPreferredSize ( new Dimension ( cardLabel . getWidth ( ) , cardLabel . getHeight ( ) ) ) ; } playedCardsPanels [ indexOfPlayer ] . add ( card ) ; updateUI ( ) ; }
va	IDF	@ Override public void setValue ( Object newValue ) throws IllegalArgumentException { if ( newValue instanceof String ) { setValueAsString ( ( String ) newValue ) ; } else if ( newValue instanceof double ) { setValueAsdouble ( ( ( double ) newValue ) . doubleValue ( ) ) ; } else { throw new IllegalArgumentException ( "Value for a Number Element must be a String or a Double" ) ; } }
va	KEY	public Point ( double x , double y ) { this . x = ( int ) ( x * 100000 ) ; this . y = ( int ) ( y * 100000 ) ; }
va	IDF	@ Override public boolean equals ( Object o ) { if ( this == o ) return true ; if ( o == null || getClass ( ) != o . getClass ( ) ) return false ; Survey survey = ( Survey ) o ; if ( idsurvey != survey . idsurvey ) return false ; if ( date != null ? ! date . equals ( survey . date ) : survey . date != null ) return false ; if ( question != null ? ! question . equals ( survey . question ) : survey . question != null ) return false ; return true ; }
va	IDF	public TIPPTask ( TIPPTaskType taskType , String sourceLocale , String targetLocale ) { this . taskType = taskType ; this . sourceLocale = sourceLocale ; this . targetLocale = targetLocale ; }
va	IDF	public Location ( String region , String place ) { this . region = region ; this . place = place ; }
va	IDF	private Pessoa prepararPessoaSingleplayer ( ) { Menu menuCorJogador = new MenuCorJogador ( ) ; ItemMenu corEscolhida = menuCorJogador . insistirPorEntradaValida ( new EntradaSaida ( ) ) ; switch ( corEscolhida . getNome ( ) ) { case "BRANCO" : return new Pessoa ( nomeValido ( TipoCorJogador . BRANCO ) , TipoCorJogador . BRANCO ) ; case "PRETO" : return new Pessoa ( nomeValido ( TipoCorJogador . PRETO ) , TipoCorJogador . PRETO ) ; } return null ; }
va	KEY	public PooledThread ( ) { super ( ThreadPool . this , "PooledThread-" + ( threadID ++ ) ) ; }
va	KEY	public final void clean ( ) throws DiskReadException { this . delete ( ) ; try { this . createNewFile ( ) ; } catch ( final IOException e ) { throw new DiskReadException ( "Failed to create file" , this . toString ( ) , e ) ; } }
va	KEY	private MarlinUtils ( ) { }
va	KEY	public int f ( int i ) { return i > 0 ? 1 : 0 ; }
va	KEY	public int numWeapons ( ) { return weapons . size ( ) ; }
va	KEY	public void setAbonoPag_Orden ( double AbonoPag_Orden ) { this . AbonoPag_Orden = AbonoPag_Orden ; }
va	KEY	public PatternFormatException ( ) { }
va	IDF	private void clearAction ( ) { input_equation . setText ( "" ) ; input_value . setText ( "" ) ; }
va	IDF	List < EFieldOfStudy > getAllFieldsOfStudy ( ) ;
va	IDF	public S remove ( S entity ) ;
va	IDF	public Characters ( String training ) { bigrams = new HashMap < String , Integer > ( ) ; trigrams = new HashMap < String , Integer > ( ) ; bigramTotal = 0 ; trigramTotal = 0 ; countGrams ( training ) ; }
va	IDF	public void update ( final double ct ) { final Entity [ ] entities = getEntities ( ) ; for ( final Entity entity : entities ) { entity . update ( ct ) ; } for ( final Entity entityA : entities ) { for ( final Entity entityB : entities ) { if ( ( entityA != entityB ) && entityA . isAlive ( ) && entityB . isAlive ( ) ) { if ( entityA . intersects ( entityB ) ) { entityA . handleCollsion ( entityB ) ; entityB . handleCollsion ( entityA ) ; if ( ! entityA . isAlive ( ) ) { remove ( entityA ) ; } if ( ! entityB . isAlive ( ) ) { remove ( entityB ) ; } } } } } }
va	KEY	public int size ( ) { return FHashMap . this . size ( ) ; }
va	KEY	public int getID ( ) { return ID ; }
va	KEY	public boolean equals ( Object _other ) { if ( _other == null ) { return false ; } if ( _other == this ) { return true ; } if ( ! ( _other instanceof MsgType ) ) { return false ; } final MsgType _cast = ( MsgType ) _other ; if ( msgType == null ? _cast . msgType != msgType : ! msgType . equals ( _cast . msgType ) ) { return false ; } return true ; }
va	IDF	public Map . Entry < Key , Val > arb ( ) { return ( Map . Entry < Key , Val > ) arb ( tree ) ; }
va	IDF	public static void main ( String [ ] args ) { System . out . println ( findCommonElements ( Arrays . asList ( 2 , 5 , 5 , 5 ) , Arrays . asList ( 2 , 2 , 3 , 5 , 5 , 7 ) ) ) ; System . out . println ( findCommonElements ( Arrays . asList ( 2 , 2 , 3 , 5 , 5 , 7 ) , Arrays . asList ( 2 , 3 , 5 , 5 , 6 ) ) ) ; System . out . println ( findCommonElements ( Arrays . asList ( 1 , 3 ) , Arrays . asList ( 1 , 1 , 3 ) ) ) ; System . out . println ( findCommonElements ( Arrays . asList ( 1 , 1 , 3 ) , Arrays . asList ( 3 ) ) ) ; System . out . println ( findCommonElements ( Arrays . asList ( 1 , 3 ) , Arrays . asList ( 2 , 4 ) ) ) ; }
va	IDF	@ Override public BufferedImage getStepImage ( Type type , Orientation orientation , Timing timing ) { switch ( type ) { case REGULAR : case FREEZE_START : case ROLL_START : switch ( timing ) { case L1ST : case L4TH : return steps [ 0 ] ; case L8TH : return steps [ 1 ] ; case L12TH : return steps [ 2 ] ; case L16TH : return steps [ 3 ] ; case L24TH : return steps [ 4 ] ; case L32ND : return steps [ 5 ] ; case L48TH : return steps [ 6 ] ; default : return steps [ 7 ] ; } case MINE : return mine ; default : return null ; } }
va	KEY	abstract protected float getDistanceFromOwner ( ) ;
va	KEY	public void setStop ( boolean stop ) { this . stop = stop ; }
va	KEY	@ Override public void think ( long frame ) { }
va	KEY	public String getStatus ( ) { return this . status ; }
va	IDF	@ Override protected String getTableName ( ) { return TableName ; }
va	KEY	public double getTimeSpent ( ) { return timeSpent ; }
va	IDF	@ Override public void onReceive ( Entity host ) { host . attack ( state ) ; }
va	KEY	@ AfterClass public static void tearDownClass ( ) throws Exception { }
va	IDF	@ Override public String toString ( ) { return _x + "  " + _y ; }
va	IDF	public void actionPerformed ( ActionEvent e ) { String layer_choice = getCommand ( layer ) ; if ( layer_choice . equals ( InfoEnum . Layer . ALL . name ( ) ) ) { ms . req_bus_model . printModel ( ) ; ms . req_app_model . printModel ( ) ; ms . req_phy_model . printModel ( ) ; } else if ( layer_choice . equals ( InfoEnum . Layer . BUSINESS . name ( ) ) ) { ms . req_bus_model . printModel ( ) ; } else if ( layer_choice . equals ( InfoEnum . Layer . APPLICATION . name ( ) ) ) { ms . req_app_model . printModel ( ) ; } else if ( layer_choice . equals ( InfoEnum . Layer . PHYSICAL . name ( ) ) ) { ms . req_phy_model . printModel ( ) ; } else { NewCommandPanel . logger . severe ( "Layer selection error!" ) ; } }
va	KEY	@ Override public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( ! ( obj instanceof Customer ) ) { return false ; } final Customer other = ( Customer ) obj ; if ( ! Objects . equals ( this . lastName , other . lastName ) ) { return false ; } if ( ! Objects . equals ( this . firstName , other . firstName ) ) { return false ; } return true ; }
va	IDF	public static String getWuXingJuByGongGanZhi ( int gonggan , int gongzhi ) { int row = gonggan / 2 ; int col = gongzhi / 2 ; return wuXingJuBiao [ row ] [ col ] ; }
va	KEY	public boolean isRegistered ( ) { return registered ; }
va	IDF	public static void play ( boolean [ ] [ ] world ) throws Exception { int userResponse = 0 ; while ( userResponse != q ) { print ( world ) ; userResponse = System . in . read ( ) ; world = nextGeneration ( world ) ; } }
va	IDF	@ Test public void testPackageLoad ( ) throws Exception { CollectingErrorHandler status = new CollectingErrorHandler ( ) ; try ( TIPP tipp = getSamplePackage ( "data/test_package.zip" , status ) ) { checkErrors ( status , 0 ) ; verifyRequestPackage ( tipp ) ; for ( TIPPFile file : tipp . getSection ( TIPPSectionType . BILINGUAL ) . getFileResources ( ) ) { try ( InputStream is = tipp . getFile ( file ) ) { assertNotNull ( is ) ; } } } }
va	IDF	public static INDIOneElementBLOBProperty createSaveableOneElementBLOBProperty ( INDIDriver driver , String name , String label , PropertyStates state , PropertyPermissions permission ) throws IllegalArgumentException { INDIOneElementBLOBProperty bp = loadOneElementBLOBProperty ( driver , name ) ; if ( bp == null ) { bp = new INDIOneElementBLOBProperty ( driver , name , label , state , permission ) ; bp . setSaveable ( true ) ; } return bp ; }
va	KEY	public SendMessageResponse createSendMessageResponse ( ) { return new SendMessageResponse ( ) ; }
va	IDF	public void setDateDepart ( String dateDepart ) { this . dateDepart = dateDepart ; }
va	IDF	@ Override public void actionPerformed ( ActionEvent e ) { dispose ( ) ; String [ ] args = new String [ 0 ] ; StartSnakeGame . main ( args ) ; }
va	IDF	public HoldFestivalFrame ( GameController gc , JavaPlayer [ ] players , int indexOfPlayerHoldingFestival , PalaceCard festivalCard , int selectedPalaceValue , int [ ] palaceXY ) { setTitle ( "Let's Party!" ) ; setSize ( 800 , 800 ) ; setResizable ( false ) ; this . gameController = gc ; addKeyListener ( new KeyListener ( ) { @ Override public void keyTyped ( KeyEvent e ) { } @ Override public void keyReleased ( KeyEvent e ) { festController . keyPressed ( e ) ; } @ Override public void keyPressed ( KeyEvent e ) { } } ) ; setFocusTraversalKeysEnabled ( false ) ; startFestival ( players , indexOfPlayerHoldingFestival , festivalCard , selectedPalaceValue ) ; this . palaceXY = palaceXY ; }
va	KEY	private int convertTime ( int time ) { return ( int ) Math . floor ( ( time + 15 - 1 ) / 15 ) ; }
va	IDF	public final long createArcCodeWP ( FeatureTemplate . Arc temp , long x , long y ) { return ( ( ( ( x << tagNumBits ) | y ) << numArcFeatBits ) | temp . ordinal ( ) ) << flagBits ; }
va	IDF	@ Override public FractalValue visitASTExpAdd ( ASTExpAdd form , FractalState state ) throws FractalException { System . out . print ( "->ExpAdd" ) ; FractalValue v1 = form . getFirst ( ) . visit ( this , state ) ; FractalValue v2 = form . getSecond ( ) . visit ( this , state ) ; FractalValue result = v1 . add ( v2 ) ; return result ; }
va	IDF	public boolean has ( Disc disc ) { HashSet < Disc > discSet = new HashSet < Disc > ( discs ) ; return discSet . contains ( disc ) ; }
va	IDF	@ Override public Pane getPane ( ) { GridPane gridPane = new GridPane ( ) ; Image imgBook = new Image ( "file:img/icons/book-icon.png" ) ; ImageView imgViewBook = new ImageView ( imgBook ) ; Image imgCust = new Image ( "file:img/icons/cust-icon.png" ) ; ImageView imgViewCust = new ImageView ( imgCust ) ; Image imgBorrow = new Image ( "file:img/icons/borrow-icon.png" ) ; ImageView imgViewBorrow = new ImageView ( imgBorrow ) ; Image imgStat = new Image ( "file:img/icons/stat-icon.png" ) ; ImageView imgViewStat = new ImageView ( imgStat ) ; Button bookButton = new Button ( "" , imgViewBook ) ; bookButton . setPrefSize ( 220 , 220 ) ; Button userButton = new Button ( "" , imgViewCust ) ; userButton . setPrefSize ( 220 , 220 ) ; Button borrowButton = new Button ( "" , imgViewBorrow ) ; borrowButton . setPrefSize ( 220 , 220 ) ; Button statButton = new Button ( "" , imgViewStat ) ; statButton . setPrefSize ( 220 , 220 ) ; bookButton . setOnAction ( new EventHandler < ActionEvent > ( ) { @ Override public void handle ( ActionEvent e ) { screenController . setScreen ( "BOOK_SCREEN" ) ; } } ) ; userButton . setOnAction ( new EventHandler < ActionEvent > ( ) { @ Override public void handle ( ActionEvent e ) { screenController . setScreen ( "USER_SCREEN" ) ; } } ) ; borrowButton . setOnAction ( new EventHandler < ActionEvent > ( ) { @ Override public void handle ( ActionEvent e ) { screenController . setScreen ( "BORROW_SCREEN" ) ; } } ) ; statButton . setOnAction ( new EventHandler < ActionEvent > ( ) { @ Override public void handle ( ActionEvent e ) { screenController . setScreen ( "STAT_SCREEN" ) ; } } ) ; gridPane . add ( bookButton , 0 , 0 ) ; gridPane . add ( userButton , 1 , 0 ) ; gridPane . add ( borrowButton , 0 , 1 ) ; gridPane . add ( statButton , 1 , 1 ) ; gridPane . setHgap ( 5 ) ; gridPane . setVgap ( 5 ) ; gridPane . setAlignment ( Pos . CENTER ) ; gridPane . getStyleClass ( ) . add ( "background-style" ) ; return gridPane ; }
va	IDF	public void init ( ) { coreCommands . registerCommand ( PingCommand . COMMAND_NAME , command ) ; }
va	IDF	@ Override public String getXMLOneElement ( ) { String stat = Constants . getSwitchStatusAsString ( status ) ; String xml = "<oneSwitch name=\"" + this . getName ( ) + "\">" + stat + "</oneSwitch>" ; return xml ; }
va	KEY	@ Override public int getGeometry ( ) { return _geometry ; }
va	IDF	void setPanels ( MapPanel newMapPanel ) { this . mapPanel = newMapPanel ; }
va	IDF	public GameLoop ( GameSceneManager sceneMaster ) { this . sceneManager = sceneMaster ; }
va	IDF	public static < T > void assertError ( Observable < T > in , final class errClass , final String errMsg ) { in . subscribe ( new Action1 < T > ( ) { public void call ( T value ) { System . out . println ( "error-next:" + value ) ; } } , new Action1 < Throwable > ( ) { public void call ( Throwable t ) { System . out . println ( "error-caught:" + t ) ; assertEquals ( errClass , t . getClass ( ) ) ; if ( errMsg != null ) assertEquals ( errMsg , t . getMessage ( ) ) ; testComplete ( ) ; } } , new Action0 ( ) { public void call ( ) { fail ( "unexpected-complete: failure expected" ) ; } } ) ; }
va	KEY	public int getyPosition ( ) { return yPosition ; }
va	KEY	public static final ServiceDecloration getServiceAnnotation ( class < ? > cls ) { return cls . getAnnotation ( ServiceDecloration . class ) ; }
va	KEY	public int getId ( ) { return id ; }
va	KEY	public String getStationCode ( ) { return this . stationCode ; }
va	KEY	protected void end ( ) { }
va	KEY	void reset ( ) ;
va	KEY	public int getEagles ( ) { return eagles ; }
va	KEY	protected void end ( ) { }
va	IDF	private void load ( String fileName ) throws IOException { FileRead fp = null ; File file = new File ( Data . getDataDirectory ( ) + "/data/level/" + fileName ) ; try { fp = new FileRead ( file ) ; } catch ( Exception e ) { System . out . printf ( "Failed to load collision map: %s\n" , fileName ) ; throw new IOException ( "Missing game data:\n" + fileName + "\nPlace the editor directory within the game directory." ) ; } if ( fp != null ) { int index = 0 ; while ( fp . hasNext ( ) ) { String next = fp . getNext ( ) ; if ( next . equals ( "EOF" ) ) break ; map [ index ] = Integer . parseInt ( next ) ; index ++ ; } } }
va	KEY	public Create createCreate ( ) { return new Create ( ) ; }
va	IDF	@ Override public void accept ( Visitor visitor ) { visitor . visit ( this ) ; }
va	KEY	public Color getSmallBoarderColor ( ) { return this . smallBoarderColor ; }
va	IDF	public int get ( int key ) { Integer value = map . get ( key ) ; if ( value == null ) return - 1 ; return value ; }
va	KEY	protected abstract void unbindSelf ( ) ;
va	IDF	public void printVegetarianMenu ( ) { Iterator iterator = allMenus . createIterator ( ) ; System . out . println ( "\n VEGETARIAN MENU \n --------------------" ) ; while ( iterator . hasNext ( ) ) { MenuComponent menuComponent = ( MenuComponent ) iterator . next ( ) ; try { if ( menuComponent . isVegetarian ( ) ) { menuComponent . print ( ) ; } } catch ( UnsupportedOperationException e ) { } } }
va	IDF	public void renderInterface ( vgame . VGame vg , VGraphics g ) { i . renderInterface ( vg , g ) ; }
va	KEY	@ Override public void exit ( ) throws ParsingException { }
va	IDF	public double getHammingDis ( int [ ] actDeps , int [ ] actLabs , int [ ] predDeps , int [ ] predLabs ) { double dis = 0 ; for ( int i = 1 ; i < actDeps . length ; ++ i ) if ( options . learnLabel ) { if ( labelLossType == 0 ) { if ( actDeps [ i ] != predDeps [ i ] ) dis += 0.5 ; if ( actLabs [ i ] != predLabs [ i ] ) dis += 0.5 ; } else if ( actDeps [ i ] != predDeps [ i ] || actLabs [ i ] != predLabs [ i ] ) dis += 1 ; } else { if ( actDeps [ i ] != predDeps [ i ] ) dis += 1 ; } return dis ; }
va	KEY	private int getHeight ( ) { if ( m_videoMode == VideoMode . PAL ) return mPALHeight ; else if ( m_videoMode == VideoMode . NTSC ) return mNTSCHeight ; else return 0 ; }
va	IDF	public void reportInterest ( String name , double add ) { interestToday += add ; log ( "R\u00E4nta inrapporterad" ) ; log ( "Post: " + name ) ; log ( "R\u00E4nta: " + add ) ; log ( "Totalt hittils: " + interestToday ) ; }
va	KEY	public double getCountsRpm ( ) { return countsRpm ; }
va	IDF	public Tunnel ( Location destination ) { this . name = "tunnel" ; this . destination = destination ; }
va	IDF	public void setTitle ( String title ) { this . title = title ; }
va	KEY	public GetGroups createGetGroups ( ) { return new GetGroups ( ) ; }
va	IDF	private void writeQNames ( javax . xml . namespace . QName [ ] qnames , javax . xml . stream . XMLStreamWriter xmlWriter ) throws javax . xml . stream . XMLStreamException { if ( qnames != null ) { java . lang . StringBuffer stringToWrite = new java . lang . StringBuffer ( ) ; java . lang . String namespaceURI = null ; java . lang . String prefix = null ; for ( int i = 0 ; i < qnames . length ; i ++ ) { if ( i > 0 ) { stringToWrite . append ( " " ) ; } namespaceURI = qnames [ i ] . getNamespaceURI ( ) ; if ( namespaceURI != null ) { prefix = xmlWriter . getPrefix ( namespaceURI ) ; if ( ( prefix == null ) || ( prefix . length ( ) == 0 ) ) { prefix = generatePrefix ( namespaceURI ) ; xmlWriter . writeNamespace ( prefix , namespaceURI ) ; xmlWriter . setPrefix ( prefix , namespaceURI ) ; } if ( prefix . trim ( ) . length ( ) > 0 ) { stringToWrite . append ( prefix ) . append ( ":" ) . append ( org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qnames [ i ] ) ) ; } else { stringToWrite . append ( org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qnames [ i ] ) ) ; } } else { stringToWrite . append ( org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qnames [ i ] ) ) ; } } xmlWriter . writeCharacters ( stringToWrite . toString ( ) ) ; } }
va	IDF	public void setSourceType ( String value ) { this . sourceType = value ; }
va	KEY	public boolean isDisponible ( ) { return disponible ; }
va	IDF	@ XmlElementDecl ( namespace = "http://api.soap.mytxtbuddy.com/" , name = "resetPassword" ) public JAXBElement < ResetPassword > createResetPassword ( ResetPassword value ) { return new JAXBElement < ResetPassword > ( _ResetPassword_QNAME , ResetPassword . class , null , value ) ; }
va	IDF	protected boolean eat ( ) { System . out . println ( "You swallow the pocket lint." ) ; Game . player . inventory . remove ( this ) ; return true ; }
va	IDF	public CommonObjectAttributes ( String label , byte authId , byte [ ] flags ) { this . label = label ; this . authId = authId ; this . flags = flags ; }
va	KEY	public int getRam ( ) { return ram ; }
va	KEY	public int getDefinitionID ( ) { return this . definitionID ; }
va	KEY	public CountMessages createCountMessages ( ) { return new CountMessages ( ) ; }
va	KEY	public static long set ( long packed , int position , boolean value ) { if ( value ) { packed |= ( ( long ) 1 << position ) ; } else { packed &= ~ ( ( long ) 1 << position ) ; } return packed ; }
va	KEY	public void loadPlugins ( ) { loadFromDirectory ( ) ; }
va	IDF	public void resume ( ) { status = DOWNLOADING ; stateChanged ( ) ; download ( ) ; }
va	IDF	private void rotateBy ( int degrees , Graphics2D g2d ) { AffineTransform transform = new AffineTransform ( ) ; int size = Math . min ( this . getWidth ( ) , this . getHeight ( ) ) ; transform . rotate ( Math . toRadians ( degrees ) , 0 + size / 2 , 0 + size / 2 ) ; g2d . transform ( transform ) ; }
va	KEY	public double getY ( ) { return Y ; }
va	KEY	public void disconnect ( int playerID ) ;
va	IDF	public void conectarBaseDeDatos ( ) { try { conexion = ( Connection ) DriverManager . getConnection ( url , usuario , contrasena ) ; if ( conexion != null ) System . out . println ( "Se ha establecido una conexi\u00F3n a la base de datos" + url ) ; stmt = ( Statement ) conexion . createStatement ( ) ; } catch ( Exception e ) { JOptionPane . showMessageDialog ( null , "Error al tratar de conectar la base de datos.\n Verifica tus datos de conexion" ) ; } }
va	KEY	public void setPenUse ( boolean penUse ) { this . penUse = penUse ; }
va	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { comboEstado10ActionPerformed ( evt ) ; }
va	KEY	public static SentItemService getSentItemService ( ) { return sentItemService ; }
va	KEY	public TecnicoDAO ( ) throws SQLException { super ( ) ; }
va	IDF	@ Override public ArrayList < TIPO_OBJETO > getPage ( int intRegsPerPag , int intPage , ArrayList < FilterBean > hmFilter , HashMap < String , String > hmOrder ) throws Exception { class < TIPO_OBJETO > tipo = ( class < TIPO_OBJETO > ) ( ( ParameterizedType ) getClass ( ) . getGenericSuperclass ( ) ) . getActualTypeArguments ( ) [ 0 ] ; Method metodo_setId = tipo . getMethod ( "setId" , Integer . class ) ; ArrayList < Integer > arrId ; ArrayList < TIPO_OBJETO > arrCliente = new ArrayList < > ( ) ; try { oMysql . conexion ( enumTipoConexion ) ; arrId = oMysql . getPage ( strTabla , intRegsPerPag , intPage , hmFilter , hmOrder ) ; Iterator < Integer > iterador = arrId . listIterator ( ) ; while ( iterador . hasNext ( ) ) { Object oBean = class . forName ( tipo . getName ( ) ) . newInstance ( ) ; metodo_setId . invoke ( oBean , iterador . next ( ) ) ; arrCliente . add ( this . get ( ( TIPO_OBJETO ) oBean ) ) ; } oMysql . desconexion ( ) ; return arrCliente ; } catch ( Exception e ) { throw new Exception ( "GenericDao.getPage: Error: " + e . getMessage ( ) ) ; } }
va	IDF	public void increase2 ( ) throws InterruptedException { threadMessage ( "Thread trying to increase Counter2" ) ; synchronized ( lock2 ) { counter2 ++ ; threadMessage ( "Thread increased Counter2" ) ; Thread . sleep ( 1000 ) ; } }
va	KEY	public int getOneKmRub ( ) { return oneKmRub ; }
va	IDF	public ImageWindow ( List < S > sourceList , int windowLength , int threadNum ) { this ( sourceList , windowLength , threadNum , DefaultBufferedLimitSize , DefaultImageLoadTimeOut ) ; }
va	KEY	float getAlpha ( ) ;
va	KEY	public GameEngine ( ) { }
va	KEY	public String getServletInfo ( ) { return "Login request processing" ; }
va	KEY	public int getIntWidth ( ) { return ( int ) this . width ; }
va	KEY	public abstract void setCell ( int col , int row , boolean alive ) ;
va	IDF	@ WebResult ( name = "return" , targetNamespace = "" ) @ RequestWrapper ( localName = "countContacts" , targetNamespace = "http://api.soap.mytxtbuddy.com/" , className = "com.dreamoval.mytxtbuddy.api.proxy.CountContacts" ) @ WebMethod @ ResponseWrapper ( localName = "countContactsResponse" , targetNamespace = "http://api.soap.mytxtbuddy.com/" , className = "com.dreamoval.mytxtbuddy.api.proxy.CountContactsResponse" ) public java . lang . String countContacts ( @ WebParam ( name = "username" , targetNamespace = "" ) java . lang . String username , @ WebParam ( name = "password" , targetNamespace = "" ) java . lang . String password ) ;
va	KEY	protected void initDefaultCommand ( ) { }
va	IDF	public void windowClosing ( java . awt . event . WindowEvent evt ) { formWindowClosing ( evt ) ; }
va	KEY	public final void checkExists ( ) throws DirectoryNotOnDiskException { if ( ! exists ( ) ) throw new DirectoryNotOnDiskException ( this . toString ( ) , null ) ; }
va	IDF	private void drawDeads ( Graphics2D g2d ) { for ( TmpGraphic item : dead ) { item . paint ( g2d ) ; } }
va	KEY	public boolean isSel ( ) { return sel ; }
va	IDF	@ HandlesEvent ( "showDetail" ) public Resolution getProduct ( ) { try { this . item = new dao . ProductDAO ( ) . getProductByProductID ( itemID ) ; } catch ( SQLException | NamingException e ) { e . printStackTrace ( ) ; } return new ForwardResolution ( "/productdetail.jsp" ) ; }
va	IDF	DeltaTransformFilter init ( PathConsumer2D out , float mxx , float mxy , float myx , float myy ) { this . out = out ; this . mxx = mxx ; this . mxy = mxy ; this . myx = myx ; this . myy = myy ; return this ; }
va	KEY	public ComisionBean ( ) { }
va	IDF	private int miniMax ( NodeLVL4 node , int depth , int alpha , int beta ) throws AIStoppedException { DraughtsState ds = node . getState ( ) ; if ( stopped ) { stopped = false ; throw new AIStoppedException ( ) ; } if ( depth == 0 || ds . isEndState ( ) ) { stopped = false ; return node . getValue ( ) ; } if ( ! ds . isWhiteToMove ( ) ) { for ( Move move : ds . getMoves ( ) ) { ds . doMove ( move ) ; alpha = max ( alpha , miniMax ( new NodeLVL4 ( ds . clone ( ) ) , depth - 1 , alpha , beta ) ) ; if ( alpha >= beta ) { return beta ; } ds . undoMove ( move ) ; } return alpha ; } else { for ( Move move : ds . getMoves ( ) ) { ds . doMove ( move ) ; beta = min ( beta , miniMax ( new NodeLVL4 ( ds . clone ( ) ) , depth - 1 , alpha , beta ) ) ; if ( alpha >= beta ) { return alpha ; } ds . undoMove ( move ) ; } return beta ; } }
va	IDF	boolean parse ( Transferable input ) ;
va	IDF	public void actionPerformed ( ActionEvent e ) { showSelectPlayerForm ( ) ; }
va	IDF	public List < MobileWebResult > getResults ( ) { if ( results == null ) { results = new ArrayList < MobileWebResult > ( ) ; } return this . results ; }
va	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { jBUltimoActionPerformed ( evt ) ; }
va	IDF	@ Override public String toString ( ) { return idName ; }
va	IDF	public static void main ( String [ ] args ) { final int [ ] subscripts = new int [ ] { 1 , 10 , 100 , 1000 , 10000 , 100000 , 1000000 } ; final int last = subscripts [ subscripts . length - 1 ] ; String s = null ; long p = 1 ; int ls = 0 ; int j = 0 ; int l = 0 ; for ( int i = 1 ; i < 1000000 ; i ++ ) { s = String . valueOf ( i ) ; ls = s . length ( ) ; l += ls ; if ( l >= subscripts [ j ] ) { final int n = ls - ( l - subscripts [ j ] ) - 1 ; final int d = Integer . parseInt ( s . substring ( n , n + 1 ) ) ; p *= ( long ) d ; j ++ ; } if ( l > last ) { break ; } } System . out . println ( "# p = " + p ) ; }
va	IDF	public double crossProduct ( Vector2D rhs ) { return x * rhs . y - y * rhs . x ; }
va	IDF	public void derived ( ) { System . out . println ( "derived" ) ; }
va	IDF	public static void main ( String [ ] args ) { Derived ib = new Derived ( ) ; if ( ib instanceof IBase ) { System . out . println ( "IBase" ) ; } if ( ib instanceof Base ) { System . out . println ( "Base" ) ; } if ( ib instanceof IDerived ) { System . out . println ( "IDerived" ) ; } if ( ib instanceof Derived ) { System . out . println ( "Derived" ) ; } }
va	IDF	Matrix transpose ( ) ;
va	KEY	@ Override public void definirDefense ( ) { }
va	IDF	protected int findContainingChild ( Rectangle bds ) { for ( int i = 0 ; i < 4 ; i ++ ) { if ( children [ i ] . bounds . contains ( bds ) ) return i ; } return - 1 ; }
va	KEY	@ Override public int getColNum ( ) { return colNum ; }
va	IDF	public void setStart_date ( String start_date ) { this . start_date = start_date ; }
va	KEY	public Color hungerColor ( ) { if ( nutrition >= 4000 ) return new Color ( 0 , 255 , 0 ) ; else if ( nutrition >= 2000 ) return new Color ( 153 , 255 , 51 ) ; else if ( nutrition >= 1200 ) return new Color ( 255 , 255 , 51 ) ; else if ( nutrition >= 600 ) return new Color ( 204 , 102 , 0 ) ; else if ( nutrition >= 0 ) return new Color ( 204 , 0 , 0 ) ; else if ( nutrition > - 600 ) return new Color ( 153 , 0 , 0 ) ; else return new Color ( 51 , 0 , 0 ) ; }
va	KEY	public abstract String getNameAndValueAsString ( ) ;
va	KEY	@ BeforeClass public static void setUpClass ( ) { }
va	KEY	public double getOrientation ( ) { return orientation ; }
va	IDF	private static java . lang . String generatePrefix ( java . lang . String namespace ) { if ( namespace . equals ( "http://tinyurl.com.src" ) ) { return "ns1" ; } return org . apache . axis2 . databinding . utils . BeanUtil . getUniquePrefix ( ) ; }
va	IDF	@ Override public AbstractMutableFormula accept ( FormulaVisitor visitor ) { return visitor . visit ( this ) ; }
va	KEY	public final OrderedProperties put ( final String key , final double value ) { super . put ( key , double . toString ( value ) ) ; return this ; }
va	KEY	public void setValPag_Entrega ( double ValPag_Entrega ) { this . ValPag_Entrega = ValPag_Entrega ; }
va	KEY	public boolean isComplete ( ) { return complete ; }
va	KEY	public void setPrice ( double price ) { this . price = price ; }
va	IDF	public void setAdditionalInformation ( AdditionalInformation additionalInformation ) { this . additionalInformation = additionalInformation ; }
va	IDF	private PentHouse ( Builder b ) { this . building = b . building ; this . id = b . id ; }
va	IDF	@ Override public String toString ( ) { return String . format ( "(UnitCommand) %s" , cmd . toString ( ) ) ; }
va	KEY	public BlockTree ( ) { }
va	IDF	@ Override public double eval ( Map < String , double > vars ) { return - formula . eval ( vars ) ; }
va	IDF	public static void main ( String [ ] args ) { EvaluationDAO dao = new EvaluationDAO ( ) ; EvaluationBean pojo = new EvaluationBean ( ) ; pojo . setNote ( 5 ) ; pojo . setCommentaire ( "commentaire test" ) ; dao . insert ( pojo ) ; pojo . setNote ( 1 ) ; TrasporteurBean tr = new TrasporteurBean ( ) ; tr . setMail ( "aaa" ) ; tr . setNom ( "nom" ) ; tr . setPassword ( "p" ) ; tr . setPrenom ( "prenom" ) ; dao . insert ( tr ) ; dao . update ( pojo ) ; EvaluationBean pojo2 = dao . getById ( 1 ) ; tr . setMail ( "ma" ) ; pojo2 . setNote ( 3 ) ; dao . update ( pojo2 ) ; dao . delete ( pojo ) ; }
va	KEY	public final int getTextureID ( ) { return textureID ; }
va	IDF	public Builder golfEstates2 ( String id ) { this . id = id ; return this ; }
va	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { buttonColoredAction1ActionPerformed ( evt ) ; }
va	KEY	public synchronized void xassignR1KeyCode ( int code ) { r1 = code ; }
va	KEY	public int count ( ) { return count ; }
va	KEY	public void hideView ( view v ) { switch ( v ) { case StoreActivity : this . storeActivity . setVisible ( false ) ; break ; case Sales : this . sales . setVisible ( false ) ; break ; case ReceiptLookUp : this . receiptLookUp . setVisible ( false ) ; break ; case ReceiptDisplay : this . receiptDisplay . setVisible ( false ) ; break ; case PaymentCredit : this . paymentCredit . setVisible ( false ) ; break ; case PaymentCheck : this . paymentCheck . setVisible ( false ) ; break ; case PaymentCash : this . paymentCash . setVisible ( false ) ; break ; case Payment : this . payment . setVisible ( false ) ; break ; case MainMenu : this . mainMenu . setVisible ( false ) ; break ; case Inventory : this . inventory . setVisible ( false ) ; break ; case GenreSearchResult : this . genreSearchResult . setVisible ( false ) ; break ; case GenreSearch : this . genreSearch . setVisible ( false ) ; break ; case DeliveryResult : this . deliveryResult . setVisible ( false ) ; break ; case Delivery : this . delivery . setVisible ( false ) ; break ; case ArtistSearchResult : this . artistSearchResult . setVisible ( false ) ; break ; case ArtistSearch : this . artistSearch . setVisible ( false ) ; break ; case AlbumnSearchResult : this . albumnSearchResult . setVisible ( false ) ; break ; case AlbumnSearch : this . artistSearch . setVisible ( false ) ; break ; case UpdateInventory : this . updateInventory . setVisible ( false ) ; break ; } }
va	IDF	public void setReturn ( GroupInfo value ) { this . _return = value ; }
va	KEY	public void setCin ( int cin ) { this . cin = cin ; }
va	KEY	public static boolean isStatic ( int style ) { if ( ( style & LCARS . ES_STATIC ) == 0 ) { return false ; } else { return true ; } }
va	IDF	@ JsonProperty ( "factors" ) public List < Object > getFactors ( ) { return factors ; }
va	KEY	protected abstract void updateLocation ( double elapsedTime ) ;
va	IDF	private void sink ( int k ) { while ( 2 * k <= size ) { int j = 2 * k ; if ( j < size && less ( j , j + 1 ) ) j ++ ; if ( ! less ( k , j ) ) break ; exchange ( k , j ) ; k = j ; } }
va	KEY	public void flush ( ) { this . out . flush ( ) ; }
va	KEY	public int getId_Orden ( ) { return Id_Orden ; }
va	KEY	public ProcedimentoJaDeclaradoException ( ) { super ( ) ; }
va	IDF	public String nextTo ( String delimiters ) throws JSONException { char c ; StringBuffer sb = new StringBuffer ( ) ; for ( ; ; ) { c = this . next ( ) ; if ( delimiters . indexOf ( c ) >= 0 || c == 0 || c == '' || c == '' ) { if ( c != 0 ) { this . back ( ) ; } return sb . toString ( ) . trim ( ) ; } sb . append ( c ) ; } }
va	KEY	public static void abilityROver ( ) { abilityRDuration = false ; }
va	IDF	public void viterbi ( ) { TransitionModel transitionModel = new TransitionModel ( ) ; SensorModel sensorModel = new SensorModel ( ) ; int t = 0 ; HashMap < String , Node > ppaths = new HashMap < String , Node > ( ) ; for ( Character cstate : states ) { String state = cstate . toString ( ) ; if ( logOn ) ppaths . put ( state , new Node ( state , null , Math . log ( initial_probability . get ( state ) ) , true ) ) ; else ppaths . put ( state , new Node ( state , null , initial_probability . get ( state ) ) ) ; } for ( Character ee : observations ) { String e = ee . toString ( ) ; transitionModel . setLast ( e ) ; HashMap < String , Node > nppaths = new HashMap < String , Node > ( ) ; for ( Character ctostate : states ) { String tostate = ctostate . toString ( ) ; double myprob ; Node nn ; if ( logOn ) { myprob = Math . log ( 1d ) ; nn = new Node ( null , null , Math . log ( - 0 ) , true ) ; } else { myprob = 1d ; nn = new Node ( null , null , 0d ) ; } for ( Node fromstate : ppaths . values ( ) ) { myprob = fromstate . probability ; double predict = transitionModel . get ( fromstate . state , tostate ) ; double update = sensorModel . get ( tostate , e ) ; if ( t == 0 ) predict = 1d ; double both ; if ( logOn ) { both = Math . log ( predict ) + Math . log ( update ) ; myprob += both ; } else { both = predict * update ; myprob *= both ; } nn . updateMax ( tostate , fromstate , myprob ) ; if ( t == 0 ) nn . parent = null ; } if ( nn . state != null ) nppaths . put ( tostate , nn ) ; } if ( t == 0 ) normalize ( nppaths ) ; System . out . println ( nppaths ) ; ppaths = nppaths ; t ++ ; } if ( t == observations . length ) { System . out . println ( "most probable sequence:" ) ; Node max ; if ( logOn ) max = new Node ( null , null , Math . log ( - 0 ) , true ) ; else max = new Node ( null , null , 0d ) ; for ( Character cstate : states ) { String state = cstate . toString ( ) ; Node from = ppaths . get ( state ) ; max . updateMax ( from . state , from . parent , from . probability ) ; } System . out . println ( max ) ; } }
va	KEY	public Role ( ) { }
va	KEY	public long getRating ( ) { return rating ; }
va	KEY	public void addTimePlayed ( ) { timesPlayed ++ ; }
va	KEY	public int size ( ) { return FHashMap . this . size ( ) ; }
va	KEY	static synchronized void incResizeDirtyFloat ( ) { resizeDirtyFloat ++ ; }
va	IDF	@ Before public void setup ( ) { when ( environment . getSize ( ) ) . thenReturn ( new Dimension ( ( int ) w , ( int ) h ) ) ; }
va	IDF	private boolean andouDuasCasas ( Posicao origem , Posicao destino ) { return this . medeDeslocamentoPeca ( origem . getLinha ( ) , destino . getLinha ( ) ) == 2 ; }
va	KEY	public int getLeistung ( ) { return leistung ; }
va	KEY	public int getNrows ( ) { return r ; }
va	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { jMenuItem15ActionPerformed ( evt ) ; }
va	IDF	@ Override public boolean setPacketFields ( Map < String , Object > in ) { return true ; }
va	IDF	@ Override protected String [ ] getColumnNames ( ) { return ColumnNames ; }
va	KEY	public long getBreakingNews ( ) { return breakingNews ; }
va	IDF	@ Override public void keyTyped ( KeyEvent e ) { char c = e . getKeyChar ( ) ; if ( ! Character . isDigit ( c ) ) { e . consume ( ) ; Toolkit . getDefaultToolkit ( ) . beep ( ) ; } }
va	KEY	public abstract void exec ( ) ;
va	KEY	public void run ( ) { new PlayRound ( ) . setVisible ( true ) ; }
va	IDF	public static List < Vector2D > worldTransform ( final List < Vector2D > points , Vector2D pos , Vector2D forward , Vector2D side , Vector2D scale ) { Matrix2D matTransform = new Matrix2D ( ) ; if ( ( scale . x != 1.0 ) || ( scale . y != 1.0 ) ) matTransform . scale ( scale . x , scale . y ) ; matTransform . rotate ( forward , side ) ; matTransform . translate ( pos . x , pos . y ) ; return matTransform . transformVector2D ( points ) ; }
va	KEY	public long getCount ( ) { return count ; }
va	IDF	public void reset ( ) { try { valid = false ; theConnection . close ( ) ; theConnection = makeConnection ( ) ; valid = true ; } catch ( Exception e ) { CLogError . logError ( errfile , errecho , "Unable to reset connection: " , e ) ; } }
va	IDF	public ResultSetTableModel ( String url , String username , String password , String query ) throws SQLException { connection = DriverManager . getConnection ( url , username , password ) ; statement = connection . createStatement ( ResultSet . TYPE_SCROLL_SENSITIVE , ResultSet . CONCUR_READ_ONLY ) ; connectedToDatabase = true ; setQuery ( query ) ; }
va	IDF	@ Override public Integer apply ( Integer i ) { return i ; }
va	KEY	public void paint ( ) ;
va	IDF	@ Override public void rotateX ( double radians ) { for ( int i = 0 ; i < 4 ; i ++ ) for ( int j = 0 ; j < 4 ; j ++ ) temp . set ( j , i , 0 ) ; temp . set ( 0 , 0 , 1 ) ; temp . set ( 1 , 1 , Math . cos ( radians ) ) ; temp . set ( 2 , 2 , Math . cos ( radians ) ) ; temp . set ( 2 , 1 , - Math . sin ( radians ) ) ; temp . set ( 1 , 2 , Math . sin ( radians ) ) ; temp . set ( 3 , 3 , 1 ) ; this . rightMultiply ( temp ) ; }
va	KEY	@ Override public String getColumnName ( int columnIndex ) { if ( columnIndex == 0 ) return "name" ; if ( columnIndex == 1 ) return "formula" ; return "value" ; }
va	KEY	@ Override public int getId ( ) { return id ; }
va	KEY	@ EFAttribute public int getInt ( ) { return 13 ; }
va	KEY	public int getStartRow ( ) { return startRow ; }
va	KEY	public void join ( ) { cleanUp ( ) ; super . join ( ) ; }
va	IDF	public void initComponents ( ) { this . getContentPane ( ) . setBackground ( Color . WHITE ) ; this . topic = new JTextPane ( ) ; this . scrollPane = new JScrollPane ( table ) ; table . setPreferredScrollableViewportSize ( new Dimension ( 400 , 0 ) ) ; super . setBackground ( Color . WHITE ) ; super . setResizable ( false ) ; super . setSize ( 500 , 500 ) ; super . setVisible ( true ) ; super . setLayout ( null ) ; scrollPane . setBounds ( 50 , 80 , 400 , 350 ) ; topic . setEditable ( false ) ; SimpleAttributeSet set = new SimpleAttributeSet ( ) ; StyleConstants . setAlignment ( set , StyleConstants . ALIGN_LEFT ) ; StyleConstants . setFontFamily ( set , "Times New Roman" ) ; StyleConstants . setFontSize ( set , 30 ) ; StyleConstants . setItalic ( set , true ) ; StyleConstants . setBold ( set , true ) ; topic . setParagraphAttributes ( set , true ) ; topic . setBackground ( Color . WHITE ) ; topic . setBounds ( 50 , 20 , 200 , 50 ) ; topic . setText ( "Topic" ) ; table . setAutoResizeMode ( JTable . AUTO_RESIZE_OFF ) ; scrollPane . setVerticalScrollBarPolicy ( JScrollPane . VERTICAL_SCROLLBAR_ALWAYS ) ; scrollPane . setHorizontalScrollBarPolicy ( JScrollPane . HORIZONTAL_SCROLLBAR_ALWAYS ) ; super . add ( scrollPane ) ; super . add ( topic ) ; }
va	IDF	public void solve ( ) { if ( generateNetwork ) { generateNetworkToFile ( "C:/Users/comco/network.dot" ) ; } algorithm . solve ( solutionSet ) ; System . out . println ( "Done!" ) ; System . out . format ( "Total number of solutions found: %d\n" , solutionSet . foundSolutionsCount ( ) ) ; System . out . format ( "Total examined nodes: %d\n" , solutionSet . addedRowsCount ( ) ) ; System . out . format ( "Total examined columns: %d\n" , solutionSet . addedColsCount ( ) ) ; }
va	IDF	protected boolean isKeyPressed ( int key ) { return ( key < 1024 && key >= 0 ) && keys [ key ] ; }
va	KEY	protected void setSaveable ( boolean saveable ) { this . saveable = saveable ; }
va	KEY	public boolean isShortUrlSpecified ( ) { return localShortUrlTracker ; }
va	KEY	public abstract Component getParent ( ) ;
va	IDF	public static List < String [ ] > search ( String sort , int number ) throws ClientProtocolException , IOException { HttpClient httpclient = new DefaultHttpClient ( ) ; List < String [ ] > list = new ArrayList < String [ ] > ( ) ; for ( int page = 1 ; page < number ; page ++ ) { String url = "http://huati.weibo.com/aj_topiclist/big?ctg1=99&ctg2=0&prov=0&sort=" + sort + "&p=" + Integer . toString ( page ) + "&t=1&_t=0&__rnd=1405513612404" ; HttpGet httpgets = new HttpGet ( url ) ; httpgets . setHeader ( "Accept" , "text/html application/xhtml+xml application/xml;q=0.9 */*;q=0.8" ) ; httpgets . setHeader ( "Accept-Encoding" , "UTF-8" ) ; httpgets . setHeader ( "Accept-Language" , "zh-cn zh;q=0.8 en-us;q=0.5 en;q=0.3" ) ; httpgets . setHeader ( "Content-Type" , "application/x-www-form-urlencoded" ) ; httpgets . setHeader ( "Cookie" , "UOR=  login.sina.com.cn; SUBP=002A2c-gVlwEm1dAWxfgXELuuu1xVxBxAuKN01wSRQDjIgjtotAMswHuHYq17IYcaEic7uMcIAYETiabR-%3D; SINAGLOBAL=7261884966436.946.1395492318712; ULV=1405511261283:8:1:1:4279240755523.39.1405511261210:1402223609228; BR=usrmd15178; SUB=AbL5YffpTDf3R9iU5oC2b9lRpIPhxt6166tmkPw7bjWHAFK5uKNfQth09AVYO9dyDSjD6BBtGUh0zAKGFXTh0kxDC3JG32ENzBVuk206ozfmLK04A1yA2JHfXzOUuZkKgjil3P3Q6HwD2s2zF8ABMya1zqwzmzmyBmIf%2BJiigSI6; _s_tentry=login.sina.com.cn; Apache=4279240755523.39.1405511261210; WBStore=0227cb35607f4724|undefined; __utma=3067689.1877266229.1405511263.1405511263.1405511263.1; __utmb=3067689.13.10.1405511263; __utmc=3067689; __utmz=3067689.1405511263.1.1.utmcsr=login.sina.com.cn|utmccn=(referral)|utmcmd=referral|utmcct=/sso/login.php; myuid=1767953817" ) ; httpgets . setHeader ( "Host" , "huati.weibo.com" ) ; httpgets . setHeader ( "Referer" , "http://huati.weibo.com/?ctg1=99&ctg2=0&prov=0&sort=time&p=2&t=1" ) ; httpgets . setHeader ( "User-Agent" , "Mozilla/5.0 (Windows NT 6.3; WOW64; rv:29.0) Gecko/20100101 Firefox/29.0" ) ; httpgets . setHeader ( "X-Requested-With" , "XMLHttpRequest" ) ; HttpResponse response = httpclient . execute ( httpgets ) ; HttpEntity entity = response . getEntity ( ) ; if ( entity != null ) { InputStream instreams = entity . getContent ( ) ; String unicodehtml = convertStreamToString ( instreams ) ; String html = convert ( unicodehtml ) ; String regextopic = "url=([^\"]*topic=([^\"]*))" ; Matcher m = Pattern . compile ( regextopic ) . matcher ( html ) ; while ( m . find ( ) ) { String changeurl = m . group ( 1 ) . toString ( ) . substring ( 1 , m . group ( 1 ) . toString ( ) . length ( ) - 1 ) ; String topic = m . group ( 2 ) . toString ( ) . substring ( 0 , m . group ( 2 ) . toString ( ) . length ( ) - 1 ) ; System . out . println ( changeurl + "     " + topic ) ; if ( changeurl . contains ( "tid=" ) && ! ( changeurl . contains ( "k\\/" ) ) ) { String [ ] changehtml = new HTML ( ) . getHTML ( "http://huati.weibo.com" + changeurl ) ; String regexnewurl = "http://weibo.com/p/([^\"]*)" ; Matcher findnewurl = Pattern . compile ( regexnewurl ) . matcher ( changehtml [ 1 ] ) ; String discribe = "" ; if ( findnewurl . find ( ) ) { String newurl = "http://weibo.com/p/" + findnewurl . group ( 1 ) . toString ( ) ; discribe = search ( newurl ) ; } String [ ] TopicAndDiscribe = new String [ 2 ] ; TopicAndDiscribe [ 0 ] = topic ; TopicAndDiscribe [ 1 ] = discribe ; list . add ( TopicAndDiscribe ) ; } } } httpgets . abort ( ) ; } return list ; }
va	KEY	public void setId ( long id ) { this . id = id ; }
va	IDF	public void setGreetings ( String greetings ) { this . greetings = greetings ; }
va	IDF	public static void deleteUser ( String userName ) throws SQLException { String sql ; Connection conn = DbConnect . Connect ( ) ; sql = "DELETE FROM users WHERE username ='" + userName + "'" ; conn . createStatement ( ) . executeUpdate ( sql ) ; }
va	IDF	public QueensModel ( final QueensSolutionKnitter solutionSet ) { super ( solutionSet ) ; this . solutionSet = solutionSet ; }
va	IDF	@ Override public void removeUpdate ( DocumentEvent arg0 ) { Document document = ( Document ) arg0 . getDocument ( ) ; try { setUserInput ( actionCommand , document . getText ( 0 , document . getLength ( ) ) ) ; } catch ( BadLocationException e ) { e . printStackTrace ( ) ; } }
va	KEY	public boolean interact ( String action , Interactable target ) { if ( super . interact ( action , target ) ) { return true ; } else if ( action . equals ( "raise" ) ) { return this . raise ( ) ; } return false ; }
va	KEY	public int getOperand ( ) { return mOperand ; }
va	IDF	@ Override public SearchRequestBuilder withNewsRequestCount ( long count ) { getNewsRequest ( ) . setCount ( count ) ; return this ; }
va	IDF	@ Test public void testGetCharacters ( ) throws Exception { RemoteAPIServiceImpl service = new RemoteAPIServiceImpl ( ) ; ApiAuth < ? > authorize = service . authorize ( keyID , vCode ) ; Set < EveCharacter > characters = service . getCharacters ( authorize ) ; boolean ok = false ; for ( EveCharacter character : characters ) { if ( character . getCharacterID ( ) == characterID ) { ok = true ; break ; } } assert . assertTrue ( "Character with expected id: " + characterID + " not found." , ok ) ; }
va	KEY	@ Override protected void setupInitialState ( ) { this . sessionKey = null ; }
va	IDF	public static void main ( String [ ] args ) { Restart2DB rsd = new Restart2DB ( ) ; rsd . connect ( ) ; File file = new File ( "restartFile" ) ; try ( BufferedReader br = new BufferedReader ( new FileReader ( file ) ) ) { String ln = br . readLine ( ) ; while ( ln != null ) { StringTokenizer stk = new StringTokenizer ( ln ) ; String fname = stk . nextToken ( ) ; rsd . procFile ( fname , stk . nextToken ( ) ) ; ln = br . readLine ( ) ; System . out . println ( fname + "processed.  " + rsd . sdf . format ( new Date ( System . currentTimeMillis ( ) ) ) ) ; } } catch ( FileNotFoundException e ) { e . printStackTrace ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }
va	IDF	public SmartCreature ( IEnvironment environment , Point2D position , double direction , double speed , Color color ) { super ( environment , position ) ; this . direction = direction ; this . speed = speed ; this . color = color ; }
va	IDF	@ Override protected boolean validarCampos ( ) { if ( jFTFData . getText ( ) . isEmpty ( ) ) { JOptionPane . showMessageDialog ( this , "\u00C9 obrigat\u00F3rio o preenchimento do campo 'Data'" , "Aviso" , 0 ) ; return false ; } if ( jTADescricao . getText ( ) . isEmpty ( ) ) { JOptionPane . showMessageDialog ( this , "\u00C9 obrigat\u00F3rio o preenchimento do campo 'Descri\u00E7\u00E3o'" , "Aviso" , 0 ) ; return false ; } if ( jTFMaquinaCodigo . getText ( ) . isEmpty ( ) ) { JOptionPane . showMessageDialog ( this , "\u00C9 obrigat\u00F3rio o preenchimento do campo 'C\u00F3digo da M\u00E1quina'" , "Aviso" , 0 ) ; return false ; } if ( jTFTitulo . getText ( ) . isEmpty ( ) ) { JOptionPane . showMessageDialog ( this , "\u00C9 obrigat\u00F3rio o preenchimento do campo 'T\u00EDtulo'" , "Aviso" , 0 ) ; return false ; } return true ; }
va	IDF	private TIPP getSamplePackage ( String path , CollectingErrorHandler status ) throws Exception { InputStream is = getClass ( ) . getResourceAsStream ( path ) ; return TestUtils . createFactory ( status ) . openFromStream ( is ) ; }
va	KEY	public Loft loft ( ) { return new Loft ( this ) ; }
va	KEY	public void setValPag_Fac ( double ValPag_Fac ) { this . ValPag_Fac = ValPag_Fac ; }
va	KEY	public Type getType ( ) { return this . type ; }
va	KEY	public void cancel ( ) { if ( _process != null ) { _process . destroy ( ) ; } }
va	KEY	public Status getStatus ( ) { return this . status ; }
va	KEY	@ Override public void showDialog ( ) { this . setVisible ( true ) ; }
va	IDF	@ Override protected String getXMLPropertyDefinitionInit ( String message ) { String xml = "<defSwitchVector device=\"" + getDriver ( ) . getName ( ) + "\" name=\"" + getName ( ) + "\" label=\"" + getLabel ( ) + "\" group=\"" + getGroup ( ) + "\" state=\"" + Constants . getPropertyStateAsString ( getState ( ) ) + "\" perm=\"" + Constants . getPropertyPermissionAsString ( getPermission ( ) ) + "\" rule=\"" + Constants . getSwitchRuleAsString ( getRule ( ) ) + "\" timeout=\"" + getTimeout ( ) + "\" timestamp=\"" + INDIDateFormat . getCurrentTimestamp ( ) + "\" message=\"" + message + "\">" ; return xml ; }
va	KEY	public boolean isRelativeMouseMode ( ) { return ( robot != null ) ; }
va	IDF	public List < ContactInfo > getReturn ( ) { if ( _return == null ) { _return = new ArrayList < ContactInfo > ( ) ; } return this . _return ; }
va	KEY	public void setWatchTime ( long watchTime ) { this . watchTime = watchTime ; }
va	IDF	public Tir [ ] getTirs ( ) { return tirs_joues . toArray ( new Tir [ tirs_joues . size ( ) ] ) ; }
va	IDF	private FlickrAPI ( String key ) { this . key = key ; jsonParser = new JSONParser ( ) ; }
va	KEY	public SendMessage createSendMessage ( ) { return new SendMessage ( ) ; }
va	IDF	public ArrayList < TransportBean > getByIdTransporteur ( int id ) { session = sf . openSession ( ) ; Query query = session . createQuery ( "from TransportBean as b  where b.proposedTo = :id " ) ; query . setParameter ( "id" , id ) ; ArrayList < TransportBean > e = ( ArrayList < TransportBean > ) query . list ( ) ; session . close ( ) ; return e ; }
va	KEY	public static synchronized double getWidth ( ) { return m_width ; }
va	KEY	public void scale ( double x , double y , double z ) ;
va	IDF	public MainFrame ( ) { enableEvents ( AWTEvent . WINDOW_EVENT_MASK ) ; try { jbInit ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }
va	IDF	public TBlock_LOpposite ( TBlockBox box ) { super ( box ) ; }
va	IDF	public void incrementStrength ( ) { strIncrement ++ ; if ( strIncrement >= 10 ) { strIncrement -= 10 ; setStrength ( getStrength ( ) + 1 ) ; Controller . getInstance ( ) . getMessenger ( ) . println ( "You feel stronger!" ) ; } }
va	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButton11ActionPerformed ( evt ) ; }
va	KEY	@ Before public void prepare ( ) { }
va	IDF	@ Override public TBlock getRotatedBlk ( RotateDirection clockwise ) { return this ; }
va	KEY	public boolean give ( Interactable target ) { if ( target != null ) { if ( target instanceof Wizard ) { ( ( Wizard ) target ) . give ( this ) ; return true ; } else if ( target instanceof Merchant ) { ( ( Merchant ) target ) . give ( this ) ; return true ; } } return false ; }
va	IDF	private void processGetProperties ( Element xml ) { String device = xml . getAttribute ( "device" ) . trim ( ) ; String property = xml . getAttribute ( "name" ) . trim ( ) ; if ( device . length ( ) == 0 ) { setListenToAllDevices ( true ) ; } else { if ( property . length ( ) == 0 ) { addDeviceToListen ( device ) ; } else { addPropertyToListen ( device , property ) ; } } server . notifyClientListenersGetProperties ( this , xml ) ; }
va	KEY	public boolean hasNext ( ) { return nextCurveIdx <= numTs ; }
va	IDF	public GameRunnerImpl ( int gameID , Game game , int sleep ) { this . gameID = gameID ; this . game = game ; this . sleep = sleep ; }
va	IDF	@ Override public Stream < ? extends Tuple > getValues ( ) { return in . getValues ( ) . map ( tuple -> { return new AbstractTuple ( ) { @ Override protected Value doSelect ( String colName ) { return tuple . select ( allAliases . get ( colName ) ) ; } @ Override public Map < String , ColumnDefinition > getColumnDefinitions ( ) { return cols ; } } ; } ) ; }
va	KEY	public int getId ( ) { return id ; }
va	KEY	public boolean isDebug ( ) { return debug ; }
va	KEY	public boolean getHaySesion ( ) { return haySesion ; }
va	KEY	protected boolean isFinished ( ) { return false ; }
va	KEY	public void equipEffect ( ) { }
va	KEY	public boolean isCellEditable ( int rowIndex , int columnIndex ) { return canEdit [ columnIndex ] ; }
va	IDF	@ Test public void testSize ( ) { assertEquals ( 3 , new SubOperator ( new Constant ( 10 ) , new Variable ( "x" ) ) . getSubtreeSize ( ) ) ; }
va	IDF	public int hashCode ( ) { int _hashCode = 0 ; if ( idProfile != null ) { _hashCode = 29 * _hashCode + idProfile . hashCode ( ) ; } if ( fName != null ) { _hashCode = 29 * _hashCode + fName . hashCode ( ) ; } if ( surName != null ) { _hashCode = 29 * _hashCode + surName . hashCode ( ) ; } if ( sex != null ) { _hashCode = 29 * _hashCode + sex . hashCode ( ) ; } if ( pict != null ) { _hashCode = 29 * _hashCode + pict . hashCode ( ) ; } if ( introd != null ) { _hashCode = 29 * _hashCode + introd . hashCode ( ) ; } if ( hobby != null ) { _hashCode = 29 * _hashCode + hobby . hashCode ( ) ; } return _hashCode ; }
va	IDF	public static Vector2D vectorToWorldSpace ( Vector2D vec , Vector2D AgentHeading , Vector2D AgentSide ) { Matrix2D matTransform = new Matrix2D ( ) ; matTransform . rotate ( AgentHeading , AgentSide ) ; return matTransform . transformVector2D ( vec ) ; }
va	IDF	public static String formatDate ( String dt ) { String retDt = "" ; try { if ( null == dt || dt . length ( ) == 0 ) { return "" ; } else { String year = "" ; String month = "" ; String date = "" ; int idx = dt . indexOf ( "-" , 5 ) ; if ( idx == - 1 ) { return "" ; } year = dt . substring ( 0 , 4 ) ; month = dt . substring ( 5 , idx ) ; if ( month . length ( ) == 1 ) { month = "0" + month ; } date = dt . substring ( idx + 1 ) ; if ( date . length ( ) == 1 ) { date = "0" + date ; } retDt = year + "-" + month + "-" + date ; } return retDt ; } catch ( Exception e ) { return "" ; } }
va	IDF	public Builder ( int averageWeather , String id ) { this . averageWeather = averageWeather ; this . id = id ; }
va	IDF	public boolean isEnemy ( Player p ) { return p . nr != nr ; }
va	KEY	public int getControl ( MyEvent event ) { switch ( event ) { case UP : return up ; case DOWN : return down ; case LEFT : return left ; case RIGHT : return right ; case BOMB : return bomb ; case SURREND : return surrend ; default : return - 1 ; } }
va	KEY	public boolean isConnected ( ) { return connected ; }
va	IDF	public void run ( ) { for ( int i = 0 ; i < 100 ; i ++ ) { final int % = i ; SwingUtilities . invokeLater ( new Runnable ( ) { public void run ( ) { | . setValue ( % ) ; } } ) ; try { Thread . sleep ( 25 ) ; } catch ( InterruptedException e ) { } } frame . dispose ( ) ; @ SuppressWarnings ( "unused" ) boolean temp = true ; if ( adapter . connectToServer ( addr , pName ) ) { dispose ( ) ; StartSnakeGame . frame . setVisible ( false ) ; joinMenu . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ) ; joinMenu . setTitle ( "Snake on Lan - Join Game" ) ; joinMenu . setResizable ( false ) ; joinMenu . setLocationRelativeTo ( null ) ; joinMenu . setVisible ( true ) ; eventAdapter . setJoinMenu ( joinMenu ) ; } else { JOptionPane . showMessageDialog ( null , "Could not connect to Host" , "Server-Adress" , JOptionPane . ERROR_MESSAGE ) ; } }
va	KEY	public void setFlightHistoryId ( long value ) { this . flightHistoryId = value ; }
va	KEY	void dispose ( ) ;
va	KEY	public synchronized int xgetARepeatDelay ( ) { return aRD ; }
va	KEY	public class getColumnClass ( int columnIndex ) { return types [ columnIndex ] ; }
va	IDF	public void getDBContents ( ) { List < Festplatte > entries = dbSource . fireQuery ( query ) ; this . data = new Object [ entries . size ( ) ] [ columnNames . length ] ; for ( int i = 0 ; i < entries . size ( ) ; ++ i ) { Festplatte currentFestplatte = entries . get ( i ) ; data [ i ] [ 0 ] = currentFestplatte . getId ( ) ; data [ i ] [ 1 ] = currentFestplatte . getHersteller ( ) ; data [ i ] [ 2 ] = currentFestplatte . getName ( ) ; data [ i ] [ 3 ] = currentFestplatte . getArt ( ) ; data [ i ] [ 4 ] = currentFestplatte . getGroesse ( ) ; data [ i ] [ 5 ] = currentFestplatte . getPreis ( ) + " \u20AC" ; } }
va	IDF	@ Override public void run ( ) { DemoAgent na = new DemoAgent ( ) ; try { na . Run ( ) ; } catch ( InvalidFileFormatException e ) { e . printStackTrace ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }
va	IDF	public JSONObject ( String source ) throws JSONException { this ( new JSONTokener ( source ) ) ; }
va	IDF	@ Override public void setModel ( Topic topic ) { this . model = topic ; }
va	KEY	protected void setRange ( int bombRange ) { this . bombRange = bombRange ; }
va	IDF	@ Override double [ ] cloneCoordsDouble ( AffineTransform at ) { double [ ] ret ; if ( at == null ) { ret = Arrays . copyOf ( doubleCoords , numCoords ) ; } else { ret = new double [ numCoords ] ; at . transform ( doubleCoords , 0 , ret , 0 , numCoords / 2 ) ; } return ret ; }
va	IDF	@ Override protected void decode ( String name , HashMap < String , Object > readFields ) { class < Packet > clazz = packets . get ( name ) ; if ( null == clazz ) return ; Packet packet ; try { packet = clazz . newInstance ( ) ; } catch ( Exception e ) { throw new RuntimeException ( "B\u0142\u0105d podczas tworzenia pakietu:" + name + "  TanksProtocolTiger.decode" ) ; } if ( packet . setPacketFields ( readFields ) ) { packet . onReceive ( self ) ; } }
va	IDF	@ Override public CartAppActionBeanContext getContext ( ) { return ctx ; }
va	IDF	@ Override public void Modificar ( ) throws SQLException { try { Conexion . GetInstancia ( ) . Conectar ( ) ; Conexion . GetInstancia ( ) . Ejecutar ( "UPDATE Bodega SET Nom_Bodega = '" + ObBodega . getNom_Bodega ( ) + "' Des_Bodega = '" + ObBodega . getDes_Bodega ( ) + "' Ext_Bodega = '" + ObBodega . getExt_Bodega ( ) + "' WHERE Cod_Bodega =" + ObBodega . getCod_Bodega ( ) ) ; } catch ( SQLException ex ) { throw ex ; } finally { Conexion . GetInstancia ( ) . Desconectar ( ) ; } }
va	KEY	public StopMoveCommand ( ) { }
va	IDF	public boolean intersects ( Point p1 , Point p2 ) { if ( outer . contains ( p1 ) || outer . contains ( p2 ) ) return true ; int xMin = Math . min ( p1 . x , p2 . x ) ; int xMax = Math . max ( p1 . x , p2 . x ) ; int yMin = Math . min ( p1 . y , p2 . y ) ; int yMax = Math . max ( p1 . y , p2 . y ) ; if ( xMin == xMax ) { if ( outer . x < xMin && xMin < outer . x + outer . width ) if ( yMin < outer . y && yMax >= outer . y + outer . height ) return true ; } else { if ( outer . y < yMin && yMin < outer . y + outer . height ) if ( xMin < outer . x && xMax >= outer . x + outer . width ) return true ; } return false ; }
va	KEY	public void winActions ( ) { }
va	IDF	@ Override public String toString ( ) { return numerator + "/" + denominator ; }
va	KEY	public int getNumberPalaceCards ( ) { return palaceCardDeck . size ( ) ; }
va	IDF	public static < A , B extends Iterable < A >> ITransducer < A , B > cat ( ) { return new ATransducer < A , B > ( ) { @ Override public < R > IReducingFunction < R , B > apply ( final IReducingFunction < R , ? super A > rf ) { return new AReducingFunctionOn < R , A , B > ( rf ) { @ Override public R apply ( R result , B input , AtomicBoolean reduced ) { return reduce ( rf , result , input , reduced ) ; } } ; } } ; }
va	KEY	boolean isBoolean ( ) ;
va	IDF	private static void escreverAcao ( String acao ) { try { StringBuilder string = new StringBuilder ( ) ; BufferedReader in = new BufferedReader ( new FileReader ( getCodePath ( ) ) ) ; while ( in . ready ( ) ) { String linha = in . readLine ( ) ; if ( linha . contains ( "@ACAO@" ) ) { string . append ( "\t" ) ; string . append ( acao ) ; string . append ( "\n" ) ; string . append ( "\t//@ACAO@" ) ; } else { string . append ( linha ) ; } string . append ( "\n" ) ; } in . close ( ) ; BufferedWriter out = new BufferedWriter ( new FileWriter ( getCodePath ( ) ) ) ; out . write ( string . toString ( ) ) ; out . close ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }
va	KEY	public static int getSubPixel_Log2_X ( ) { return getInteger ( "sun.java2d.renderer.subPixel_log2_X" , 3 , 1 , 8 ) ; }
va	KEY	public void onSendError ( int packetId ) ;
va	KEY	@ Override public int getNumberOfRows ( ) { return n ; }
va	KEY	public double getCountsRps ( ) { return countsRps ; }
va	KEY	public void setSalary ( int salary ) { this . salary = salary ; }
va	KEY	public void NLPIR_Exit ( ) ;
va	IDF	private String [ ] splitSimFile ( String fileData ) { return getRegexMatchingList ( metaDataRegex , fileData ) . toArray ( new String [ 0 ] ) ; }
va	IDF	public static void main ( String [ ] args ) throws Exception { try ( MLParser p = new MLParser ( "D:\\tmp\\privte\\export\\sealed\\mediawiki.txt" ) ) { p . run ( ) ; try ( LatexGenerator lg = new LatexGenerator ( "Sealed" , "D:\\tmp\\privte\\export\\sealed\\mediawiki.tex" , p . lineIterator ( ) ) ) { lg . setUseSectionNumbers ( false ) ; lg . run ( ) ; } } }
va	KEY	public final int getTextureWidth ( ) { return texWidth ; }
va	IDF	public ClientNaiveAgent ( String ip , int id ) { ar = new ClientActionRobotJava ( ip ) ; tp = new TrajectoryPlanner ( ) ; randomGenerator = new Random ( ) ; prevTarget = null ; firstShot = true ; this . id = id ; }
va	IDF	public CellEditorType getEditorType ( JTable table , int row , int column ) { System . out . println ( "Editor Type: " ) ; Object obj = table . getModel ( ) . getValueAt ( row , column ) ; System . out . println ( obj . toString ( ) ) ; return null ; }
va	KEY	protected abstract void teardown ( ) ;
va	KEY	@ Override public boolean init ( ) { this . setLayout ( null ) ; initActionBar ( ) ; return true ; }
va	KEY	public synchronized boolean isRunning ( ) { return running ; }
va	KEY	public abstract double getValue ( Calendar date ) ;
va	IDF	public T visitASTSetLevel ( ASTSetLevel form , S state ) throws FractalException ;
va	KEY	public MsgType ( ) { }
va	KEY	public void setUserIduser ( int userIduser ) { this . userIduser = userIduser ; }
va	IDF	public void setInclude ( String include ) { this . include = include ; }
va	KEY	public void setX ( int x ) { this . x = x ; }
va	IDF	int [ ] getDstPixels ( final int len ) { int [ ] t = _dstPixels ; if ( t . length < len ) { System . out . println ( "_dstPixels = new int[" + len + "]" ) ; _dstPixels = t = new int [ len ] ; } return t ; }
va	KEY	public boolean turnHasRemainingThrows ( ) { return this . currentTurn . getThrowCount ( ) < 3 ; }
va	KEY	@ Override public double [ ] getProfits ( ) { double [ ] result = { 15 , 20 , 20 , 40 } ; return result ; }
va	IDF	public void render ( final Graphics2D g ) { final int cx = ( int ) x - WIDTH / 2 ; final int cy = ( int ) y ; g . setColor ( WHITE ) ; g . fillRect ( cx , cy , WIDTH , HEIGHT ) ; }
va	IDF	public void shouldSelectColumnsNotAllAliasedWhereOnAliasedColumn ( ) { Relation all = parser . parse ( "select baz one  foo  bar three from table_1 where three > 20;" ) . executeQuery ( ) ; Object [ ] [ ] expectedTable = new Object [ ] [ ] { { "foo" , 13.0 , 27 } , { "is" , 0.0007 , 3486978 } , { "testing" , 1556.345 , 8975 } } ; Map < String , ColumnDefinition > newColDefs = new LinkedHashMap < > ( ) ; newColDefs . put ( "one" , colDefs . get ( "baz" ) ) ; newColDefs . put ( "foo" , colDefs . get ( "foo" ) ) ; newColDefs . put ( "three" , colDefs . get ( "bar" ) ) ; assertRelationsEqual ( all , toRelation ( newColDefs , expectedTable ) ) ; }
va	KEY	public synchronized void stop ( ) { this . portWatcher . stop ( ) ; this . fileWatcher . stop ( ) ; }
va	IDF	private void runServer ( ) { while ( serverIsRunning ) { try { while ( true ) { try { s = ss . accept ( ) ; activeConnections . registerConnection ( s ) ; activePlayers . registerPlayer ( activeConnections . getIdByS ( s ) ) ; oos = new ObjectOutputStream ( s . getOutputStream ( ) ) ; activeConnections . registerOOS ( s , oos ) ; r = new NetworkReader ( s , activeConnections , msgProto ) ; Thread tr = new Thread ( r ) ; tr . start ( ) ; activeConnections . displayConnection ( ) ; activePlayers . displayPlayer ( ) ; System . out . println ( "peer " + s . getRemoteSocketAddress ( ) + " connected" ) ; } catch ( IOException e ) { System . out . println ( "problem with accepting new connection from peer " + s . getRemoteSocketAddress ( ) ) ; } } } finally { closeServer ( ) ; } } }
va	KEY	public float ( Shape s ) { this ( s , null ) ; }
va	IDF	public static int globalScan ( int x , int y ) { if ( x > 0 && y > 0 && x <= 20 && y <= 10 ) { if ( ( x == Sphere1 . x && y == Sphere1 . y ) || ( x == Sphere2 . x && y == Sphere2 . y ) || ( x == Sphere3 . x && y == Sphere3 . y ) ) return InfoCenter . map_esfera ; else if ( x == Goal . x && y == Goal . y ) return InfoCenter . map_objetivo ; else return InfoCenter . map [ x - 1 ] [ y - 1 ] ; } else { return 0 ; } }
va	IDF	@ SuppressWarnings ( "unchecked" ) private void initComponents ( ) { jScrollPane1 = new javax . swing . JScrollPane ( ) ; jButton1 = new javax . swing . JButton ( ) ; jButton2 = new javax . swing . JButton ( ) ; jButton3 = new javax . swing . JButton ( ) ; jButton4 = new javax . swing . JButton ( ) ; jLabel1 = new javax . swing . JLabel ( ) ; setDefaultCloseOperation ( javax . swing . WindowConstants . EXIT_ON_CLOSE ) ; jButton1 . setText ( "Cash" ) ; jButton1 . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButton1ActionPerformed ( evt ) ; } } ) ; jButton2 . setText ( "Credit" ) ; jButton2 . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButton2ActionPerformed ( evt ) ; } } ) ; jButton3 . setText ( "Check" ) ; jButton3 . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButton3ActionPerformed ( evt ) ; } } ) ; jButton4 . setText ( "Cancel" ) ; jButton4 . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButton4ActionPerformed ( evt ) ; } } ) ; jLabel1 . setFont ( new java . awt . Font ( "Tahoma" , 0 , 24 ) ) ; jLabel1 . setText ( "WIZARD MUSIC STORE" ) ; javax . swing . GroupLayout layout = new javax . swing . GroupLayout ( getContentPane ( ) ) ; getContentPane ( ) . setLayout ( layout ) ; layout . setHorizontalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addGap ( 90 , 90 , 90 ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING , false ) . addGroup ( layout . createSequentialGroup ( ) . addComponent ( jButton1 ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addComponent ( jButton2 ) . addGap ( 91 , 91 , 91 ) . addComponent ( jButton3 ) ) . addComponent ( jScrollPane1 , javax . swing . GroupLayout . PREFERRED_SIZE , 415 , javax . swing . GroupLayout . PREFERRED_SIZE ) ) . addContainerGap ( 95 , short . MAX_VALUE ) ) . addGroup ( javax . swing . GroupLayout . Alignment . TRAILING , layout . createSequentialGroup ( ) . addContainerGap ( javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( javax . swing . GroupLayout . Alignment . TRAILING , layout . createSequentialGroup ( ) . addComponent ( jButton4 ) . addGap ( 29 , 29 , 29 ) ) . addGroup ( javax . swing . GroupLayout . Alignment . TRAILING , layout . createSequentialGroup ( ) . addComponent ( jLabel1 ) . addGap ( 174 , 174 , 174 ) ) ) ) ) ; layout . setVerticalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addContainerGap ( ) . addComponent ( jLabel1 ) . addGap ( 18 , 18 , 18 ) . addComponent ( jScrollPane1 , javax . swing . GroupLayout . PREFERRED_SIZE , 192 , javax . swing . GroupLayout . PREFERRED_SIZE ) . addGap ( 53 , 53 , 53 ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE ) . addComponent ( jButton1 ) . addComponent ( jButton3 ) . addComponent ( jButton2 ) ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED , 133 , short . MAX_VALUE ) . addComponent ( jButton4 ) . addGap ( 26 , 26 , 26 ) ) ) ; pack ( ) ; }
va	KEY	public final int getPercentCorrect ( ) { assert _statistics != null : "Question statistics is null" ; return _statistics . getPercentCorrect ( ) ; }
va	IDF	public void update ( MsgTypePk pk , MsgType dto ) throws MsgTypeDaoException ;
va	KEY	public synchronized void xsetXRepeatDelay ( int a ) { xRD = a ; }
va	KEY	public int getBorderSize ( ) { return borderSize ; }
va	IDF	@ Override public void endElement ( String uri , @ NotNull String localName , @ NotNull String name ) throws SAXException { if ( name . equals ( "logentry" ) ) { Iterator < Change > i = changes . iterator ( ) ; while ( i . hasNext ( ) ) { Change change = i . next ( ) ; if ( change . getType ( ) == Deleted && movedPaths . contains ( change . getFilePathBefore ( ) ) ) { i . remove ( ) ; } } commits . add ( new Commit ( revision , revisionBefore , dateTime , author , comment , new ArrayList < > ( changes ) ) ) ; changes . clear ( ) ; movedPaths . clear ( ) ; } else if ( name . equals ( "path" ) ) { expectFileName = false ; if ( isFileChange ) { if ( isCopy ) { changes . add ( new Change ( Moved , filePath , copyFromFilePath , revision , copyFromRevision ) ) ; movedPaths . add ( copyFromFilePath ) ; } else if ( changeType == SvnChangeType . Added ) { changes . add ( new Change ( Added , filePath , revision ) ) ; } else if ( changeType == SvnChangeType . Delete ) { changes . add ( new Change ( Deleted , noFilePath , filePath , revision , revisionBefore ) ) ; } else if ( changeType == SvnChangeType . Replaced ) { changes . add ( new Change ( Deleted , noFilePath , filePath , revision , revisionBefore ) ) ; changes . add ( new Change ( Added , filePath , revision ) ) ; } else { if ( isTextModification ) { changes . add ( new Change ( Modified , filePath , filePath , revision , revisionBefore ) ) ; } } } } else if ( name . equals ( "path" ) ) { expectFileName = false ; } else if ( name . equals ( "author" ) ) { expectAuthor = false ; } else if ( name . equals ( "msg" ) ) { expectComment = false ; } else if ( name . equals ( "date" ) ) { expectDate = false ; dateTime = dateTimeFormatter . parse ( commitDateString , DateTimeUtil COLCOL asInstant ) ; } }
va	KEY	public int getKills ( int monster ) { return kills [ monster ] ; }
va	KEY	public static int getShenGongByMonthAndHour ( int month , int hour ) { return shenGongBiao [ hour ] [ month ] ; }
va	IDF	public SubjectCollection ( Contributor contributor , String path , int port ) throws IOException { this . contributor = contributor ; this . files = new HashMap < String , SubjectFile > ( ) ; this . fileWatcher = new FileSystemWatcher ( this , path ) ; }
va	KEY	public synchronized int xgetR5RepeatDelay ( ) { return r5RD ; }
va	KEY	public void setPriority ( int priority ) { this . priority = priority ; }
va	KEY	@ Override public boolean clearAllComponents ( ) { return false ; }
va	KEY	public abstract JPanel getRightComponent ( ) ;
te	KEY	public List < long > getIds ( ) { if ( ids == null ) { ids = new ArrayList < long > ( ) ; } return this . ids ; }
te	KEY	public void setScoredLineCnt ( int scoredLineCnt ) { this . scoredLineCnt = scoredLineCnt ; }
te	IDF	public static void initializeMain ( ) { currentPlayer = - 1 ; players = new ArrayList < > ( ) ; fields = new ArrayList < > ( ) ; streetgroups = new ArrayList < > ( ) ; dices = new Dice [ ] { new Dice ( ) , new Dice ( ) } ; PlayerNames pnForm = new PlayerNames ( ) ; pnForm . setVisible ( true ) ; }
te	IDF	public static boolean [ ] sieve ( int n , boolean [ ] prime ) { Arrays . fill ( prime , true ) ; prime [ 0 ] = prime [ 1 ] = false ; for ( int i = 2 ; i <= ( int ) Math . sqrt ( n ) ; i ++ ) { if ( prime [ i ] ) { for ( int k = i * i ; k <= n ; k += i ) prime [ k ] = false ; } } return prime ; }
te	IDF	@ Override public String getKey ( ) { return id ; }
te	IDF	public void setSg_elem ( LinkedList < SecurityGoal > sg_elem ) { this . sg_elems = sg_elem ; }
te	KEY	public MoreExceptions ( ) { }
te	KEY	public void think ( long frame ) ;
te	IDF	public static ArrayList < long > getSelectedGraph ( ) throws ScriptException { String script = "get_selected_graph()\n" ; String method_file = InfoEnum . drawing_method_file ; try { script = loadMethods ( script , method_file ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } String output = executeAppleScript ( script ) ; ArrayList < long > result = new ArrayList < long > ( ) ; if ( output . contains ( " " ) ) { String [ ] ids = output . split ( " " ) ; for ( String id : ids ) { result . add ( long . valueOf ( id . trim ( ) ) ) ; } } else { result . add ( long . valueOf ( output ) ) ; } return result ; }
te	IDF	public void mouseClicked ( MouseEvent e ) { if ( inBounds ( e ) ) { if ( ! clicked ) { xVal = Yloc ( e ) ; yVal = Xloc ( e ) ; System . out . println ( "Location: " + xVal + " " + yVal + "   State: " + piece . getState ( ) ) ; piece . printShape ( ) ; boolean validSpot = false ; if ( player . isInit ( ) ) { validSpot = board . validInit ( xVal , yVal , piece ) ; } else validSpot = board . validPlace ( xVal , yVal , piece , false ) ; if ( validSpot ) { image = darkImage ; if ( submitButton != null ) submitButton . setEnabled ( true ) ; } } else { image = lightImage ; if ( submitButton != null ) submitButton . setEnabled ( false ) ; } clicked = ! clicked ; setLocation ( Xsnap ( e ) , Ysnap ( e ) ) ; } }
te	IDF	void keepBusy ( String character , Script script ) ;
te	KEY	public Person makePerson ( ) { return new Teacher ( ) ; }
te	IDF	@ Override public List < String > vcsErrorsIn ( Result result ) { return result . errors ; }
te	KEY	public void transform ( double [ ] src , double [ ] dst ) ;
te	KEY	public void setDecimalDigits ( int decimalDigits ) { this . decimalDigits = decimalDigits ; }
te	KEY	public int getSize ( ) { return size ; }
te	IDF	@ Override public R apply ( R result , A input , AtomicBoolean reduced ) { R ret = result ; if ( dropped < n ) { dropped ++ ; } else { ret = rf . apply ( result , input , reduced ) ; } return ret ; }
te	KEY	public JSONArray put ( int index , boolean value ) throws JSONException { this . put ( index , value ? boolean . true : boolean . false ) ; return this ; }
te	KEY	public void aprova ( ) { estadoAtual . aprova ( this ) ; }
te	IDF	public void readState ( DataInputStream stream ) throws IOException { int len = mt . length ; for ( int x = 0 ; x < len ; x ++ ) mt [ x ] = stream . readInt ( ) ; len = mag01 . length ; for ( int x = 0 ; x < len ; x ++ ) mag01 [ x ] = stream . readInt ( ) ; mti = stream . readInt ( ) ; __nextNextGaussian = stream . readDouble ( ) ; __haveNextNextGaussian = stream . readBoolean ( ) ; }
te	IDF	private synchronized void setBuffers ( ) { try { bufferBoard = board . clone ( ) ; } catch ( CloneNotSupportedException e ) { e . printStackTrace ( ) ; } ArrayList < Player > players = new ArrayList < Player > ( ) ; for ( Player player : playerList ) players . add ( player . clone ( ) ) ; bufferPlayers = players ; }
te	IDF	public String queryOrder ( Order order , Pagination pagination , HttpServletRequest request ) throws ServiceException ;
te	KEY	public void identity ( ) ;
te	KEY	void pressMoveLeft ( ) ;
te	IDF	@ Transactional ( propagation = Propagation . NOT_SUPPORTED ) public List < BackPackers > findAll ( ) { return null ; }
te	IDF	private void setFrame ( ) { setDefaultCloseOperation ( EXIT_ON_CLOSE ) ; setPreferredSize ( new Dimension ( 700 , 435 ) ) ; }
te	IDF	@ Test public void sleepingKeepsCharacterBusy ( ) { context . checking ( new Expectations ( ) { { oneOf ( jim ) . heardFromGame ( "zzz..." ) ; never ( jim ) . heardFromGame ( "walking" ) ; } } ) ; game . addScript ( new Sleep ( "jim" ) ) ; game . addScript ( new Walk ( "jim" ) ) ; game . tick ( ) ; }
te	IDF	public double getAngle ( GameEntity o ) { return Math . atan2 ( o . y - y , o . x - x ) ; }
te	IDF	@ Test public void testGetY ( ) throws Exception { Entity entity = new Entity ( "sprites/test.png" , 42 , 23 ) ; assert . assertEquals ( "Entity::getY not correct" , 23.0f , entity . getY ( ) ) ; }
te	IDF	private void handleGameInitializing ( ) { if ( System . currentTimeMillis ( ) - gameStateChangeTime >= 1000 ) { changeGameState ( GameState . STARTING ) ; } }
te	IDF	TreeNode ( int x ) { val = x ; }
te	KEY	public Game ( ) { super ( "Mensch \u00E4rgere dich nicht" , 800 , 600 ) ; this . fps = new Fps ( ) ; this . setRenderer ( this ) ; this . setUpdater ( this ) ; this . initScenes ( ) ; this . loadScene ( Scene . SCENE_INTRO ) ; }
te	IDF	public static Point randPoint ( Rectangle rect ) { int xPt = randInt ( rect . x , rect . x + rect . width - 1 ) ; int yPt = randInt ( rect . y , rect . y + rect . height - 1 ) ; return new Point ( xPt , yPt ) ; }
te	KEY	public void setId_Empleado ( int Id_Empleado ) { this . Id_Empleado = Id_Empleado ; }
te	IDF	protected INDINetworkDevice ( AbstractINDIServer server , String host , int port ) throws INDIException { super ( server ) ; names = new ArrayList < String > ( ) ; this . host = host ; this . port = port ; try { socket = new Socket ( ) ; socket . connect ( new InetSocketAddress ( host , port ) , 20000 ) ; } catch ( IOException e ) { throw new INDIException ( "Problem connecting to " + host + ":" + port ) ; } }
te	KEY	public int getPlayerIndex ( ) { return 0 ; }
te	IDF	public FTreeList < Elt > lessFirst ( ) { return less ( 0 ) ; }
te	IDF	public void setShippingEmail ( String shippingEmail ) { this . shippingEmail = shippingEmail ; }
te	IDF	public static void wait ( int time ) { try { Thread . sleep ( time ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } }
te	KEY	public int getH ( ) { return this . h ; }
te	IDF	protected void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { HttpSession session = request . getSession ( true ) ; session . setAttribute ( "user" , null ) ; response . sendRedirect ( MappedJsp . HOME ) ; }
te	KEY	public void awardFamePoints ( int points ) { this . famePointsToAward += points ; }
te	KEY	public double getClock ( ) { return clock ; }
te	KEY	public Body ( ) { super ( ) ; }
te	KEY	public static void main ( String [ ] args ) { new FourSum ( ) . fourSum ( new int [ ] { 1 , 0 , - 1 , 0 , - 2 , 2 } , 0 ) ; }
te	KEY	protected abstract boolean acceptClient ( Socket socket ) ;
te	KEY	public class < ? extends Request > getRequestClass ( ) { return this . clazz ; }
te	KEY	public void setRotationSpeed ( float rotationSpeed ) { this . rotationSpeed = rotationSpeed ; }
te	IDF	public LogFileContentResult ( @ NotNull String text ) { this ( text , "" , 0 , null ) ; }
te	KEY	public PlayerLVL4 ( ) { super ( PlayerLVL4 . class . getResource ( "resources/squirtle.jpg" ) ) ; }
te	KEY	@ Override public boolean blockWalk ( ) { return true ; }
te	KEY	public Arbeitsspeicher ( ) { }
te	IDF	public void delete ( T t ) throws EntityNotFoundException { Registry . getInstance ( ) . delete ( ( EFPersistable ) t ) ; DMLStatementExecution < T > a = new DMLStatementExecution < T > ( prepMap . get ( DELETE ) , new Delete ( ) ) ; try { a . execute ( t ) ; } catch ( EFrameWorkUserIsIdiotException e ) { e . printStackTrace ( ) ; } }
te	KEY	public void setCommission ( int commission ) { this . commission = commission ; }
te	IDF	private CallResultInternal sendPost ( URL url , String encodedCall ) throws IOException { HttpURLConnection httpcon = ( HttpURLConnection ) url . openConnection ( ) ; httpcon . setDoOutput ( true ) ; httpcon . setRequestProperty ( "Content-Type" , encoder . contentType ( ) ) ; httpcon . setRequestProperty ( "Accept" , encoder . contentType ( ) ) ; httpcon . setRequestMethod ( "POST" ) ; final OutputStreamWriter osw = new OutputStreamWriter ( httpcon . getOutputStream ( ) , encoder . charset ( ) ) ; osw . write ( encodedCall ) ; osw . close ( ) ; int responseCode = httpcon . getResponseCode ( ) ; if ( HttpStatus . isClientError ( responseCode ) || HttpStatus . isServerError ( responseCode ) ) { return new CallResultInternal ( responseCode , readString ( httpcon . getErrorStream ( ) ) ) ; } return new CallResultInternal ( CallResultInternal . NO_ERROR , readString ( httpcon . getInputStream ( ) ) ) ; }
te	KEY	public int getNbJoueurs ( ) { return nb_joueurs ; }
te	IDF	@ Override public void actionPerformed ( ActionEvent e ) { panelJSP . invalidate ( ) ; Simu5 . this . invalidate ( ) ; }
te	IDF	private static String readFile ( String path , Charset encoding ) throws IOException { byte [ ] encoded = Files . readAllBytes ( Paths . get ( path ) ) ; return encoding . decode ( ByteBuffer . wrap ( encoded ) ) . toString ( ) ; }
te	IDF	@ Override public void windowClosing ( WindowEvent e ) { System . exit ( 0 ) ; }
te	IDF	public * ( int x , int y ) { super ( "STAR" , x , y ) ; calories = EATABLE_LOW ; }
te	IDF	@ Override protected void delete ( Message request , Message response ) { }
te	IDF	public Minimap ( Dimension size , World w ) { super ( new Point ( ) , size ) ; init ( w ) ; }
te	IDF	public boolean isExistResult ( String html ) { boolean isExist = true ; Pattern pExist = Pattern . compile ( "\u62B1\u6B49\uFF0C\u6CA1\u6709\u627E\u5230.+?span>\u76F8\u5173\u7684\u7ED3\u679C" ) ; Matcher mExist = pExist . matcher ( html ) ; if ( mExist . find ( ) ) { isExist = false ; } return isExist ; }
te	IDF	public void conectarBaseDeDatos ( ) { try { conexion = ( Connection ) DriverManager . getConnection ( url , usuario , contrasena ) ; if ( conexion != null ) System . out . println ( "Se ha establecido una conexi\u00F3n a la base de datos" + url ) ; stmt = ( Statement ) conexion . createStatement ( ) ; } catch ( Exception e ) { JOptionPane . showMessageDialog ( null , "Error al tratar de conectar la base de datos.\n Verifica tus datos de conexion" ) ; } }
te	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { btnNuevoActionPerformed ( evt ) ; }
te	IDF	public void setPageViewArticleUrl ( String pageViewArticleUrl ) { this . pageViewArticleUrl = pageViewArticleUrl ; }
te	IDF	public static String getPokerCardImageFileName ( PokerCard card ) { int cardValue = card . getCard ( ) . ordinal ( ) ; Suit cardSuit = card . getSuit ( ) ; String value = Integer . toString ( cardValue ) ; String suit = cardSuit . toString ( ) . substring ( 0 , 1 ) ; return value + suit + fileExtension ; }
te	KEY	public TSquare [ ] getSquares ( ) { return this . sq ; }
te	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { refreshjButton2ActionPerformed ( evt ) ; }
te	IDF	public long getLong ( String key ) throws JSONException { Object object = this . get ( key ) ; try { return object instanceof Number ? ( ( Number ) object ) . longValue ( ) : long . parseLong ( ( String ) object ) ; } catch ( Exception e ) { throw new JSONException ( "JSONObject[" + quote ( key ) + "] is not a long." ) ; } }
te	KEY	public double tt ( ) { return ( double ) getTotalLittleTime ( ) / ( double ) getTotalTime ( ) ; }
te	IDF	protected void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { TransportDAO dao = new TransportDAO ( ) ; HttpSession session = request . getSession ( true ) ; TrasporteurBean pojo = ( TrasporteurBean ) session . getAttribute ( "user" ) ; if ( pojo == null ) { request . setAttribute ( "error" , "Session perdue ! veuillez vous reconnecter!" ) ; this . getServletContext ( ) . getRequestDispatcher ( MappedJsp . ERROR ) . forward ( request , response ) ; } else { ArrayList < TransportBean > transportsOffres = dao . getByIdTransporteurToAccept ( pojo . getId ( ) ) ; request . setAttribute ( "transportOffres" , transportsOffres ) ; System . out . println ( transportsOffres . size ( ) ) ; dao = new TransportDAO ( ) ; ArrayList < TransportBean > transportsAFaire = dao . getByIdTransporteurToDo ( pojo . getId ( ) ) ; request . setAttribute ( "transportAFaire" , transportsAFaire ) ; System . out . println ( transportsAFaire . size ( ) ) ; dao = new TransportDAO ( ) ; ArrayList < TransportBean > transportsFait = dao . getByIdTransporteurFinished ( pojo . getId ( ) ) ; request . setAttribute ( "transportsFait" , transportsFait ) ; System . out . println ( transportsFait . size ( ) ) ; this . getServletContext ( ) . getRequestDispatcher ( MappedJsp . LISTE_TRANSPORTS_JSP ) . forward ( request , response ) ; } }
te	KEY	public static int getTileSize_Log2 ( ) { return getInteger ( "sun.java2d.renderer.tileSize_log2" , 5 , 3 , 8 ) ; }
te	IDF	private void initMainBox ( ) { TBlock blk = blkFactory . createBlock ( TBlkType . T , Color . RED , mainBox ) ; blk . init ( 5 , 18 ) ; this . blkMoveRight ( 1 , blk ) ; }
te	IDF	@ Before public void setUp ( ) throws FileNotFoundException { Game . player = new Player ( ) ; Game . parser = new Parser ( ) ; class TestItem extends Item { TestItem ( ) { this . name = "testName" ; } } class TestItem2 extends Item { TestItem2 ( ) { this . name = "testName2" ; } } item = new TestItem ( ) ; item2 = new TestItem2 ( ) ; class TestLocation extends Location { TestLocation ( ) { this . droppedItems . add ( item ) ; } } location = new TestLocation ( ) ; Game . player . currentLocation = location ; player = Game . player ; out = new PrintStream ( "testing.txt" ) ; System . setOut ( out ) ; }
te	IDF	@ Test public void testPublicMethods ( ) throws FileNotFoundException { class TestLoc extends Location { } TestLoc testLoc = new TestLoc ( ) ; testLoc . construct ( ) ; testLoc . printDescription ( ) ; class TestItem extends Item { TestItem ( String name ) { this . name = name ; } } TestItem item1 = new TestItem ( "item1" ) ; TestItem item2 = new TestItem ( "item2" ) ; testLoc . printItemsOnGround ( ) ; testLoc . droppedItems . add ( item1 ) ; testLoc . printItemsOnGround ( ) ; testLoc . droppedItems . add ( item2 ) ; testLoc . printItemsOnGround ( ) ; Scanner sc = new Scanner ( new File ( "testing.txt" ) ) ; ArrayList < String > testOutput = new ArrayList < String > ( ) ; while ( sc . hasNextLine ( ) ) { testOutput . add ( sc . nextLine ( ) ) ; } assertArrayEquals ( "On the ground there is a: item1." . toCharArray ( ) , testOutput . get ( 0 ) . toCharArray ( ) ) ; assertArrayEquals ( "On the ground there are:" . toCharArray ( ) , testOutput . get ( 1 ) . toCharArray ( ) ) ; assertArrayEquals ( "   item1" . toCharArray ( ) , testOutput . get ( 2 ) . toCharArray ( ) ) ; assertArrayEquals ( "   item2" . toCharArray ( ) , testOutput . get ( 3 ) . toCharArray ( ) ) ; sc . close ( ) ; }
te	KEY	public int getLevel ( ) { return level ; }
te	IDF	public EDFEnemy spawnTo ( ShootingScene parentScene ) { try { return enemyClass . getConstructor ( ShootingScene . class , float . class , LR . class ) . newInstance ( parentScene , angle , rotateLR ) ; } catch ( NoSuchMethodException | SecurityException | InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e ) { System . err . println ( "\u30A8\u30E9\u30FC\uFF1A\u30B3\u30F3\u30B9\u30C8\u30E9\u30AF\u30BF\u304C\u547C\u3073\u51FA\u305B\u307E\u305B\u3093" ) ; e . printStackTrace ( ) ; } return null ; }
te	IDF	public CircleLinkElement < Value > getNext ( ) { return next ; }
te	IDF	public static boolean isValidTerm ( int years ) { int range [ ] = getTermRange ( ) ; return ( ( range [ 0 ] <= years ) && ( years <= range [ 1 ] ) ) ; }
te	IDF	public ChallengePane ( ActionListener listener ) { super ( ) ; setLayout ( new GridBagLayout ( ) ) ; GridBagConstraints c = new GridBagConstraints ( ) ; double w = c . weightx ; JPanel cPanel = new JPanel ( ) ; cPanel . setLayout ( new GridBagLayout ( ) ) ; c . gridx = 0 ; c . gridy = 0 ; c . gridwidth = 6 ; c . gridheight = 1 ; c . weighty = w ; c . weightx = w ; c . fill = GridBagConstraints . BOTH ; c . anchor = GridBagConstraints . WEST ; c . insets = new Insets ( 5 , 5 , 5 , 5 ) ; cta = new JTextArea ( 6 , 120 ) ; cta . setEditable ( false ) ; cta . setFont ( MainGUI . FONT ) ; cta . setAutoscrolls ( true ) ; components . add ( cta ) ; JScrollPane sp = new JScrollPane ( cta , JScrollPane . VERTICAL_SCROLLBAR_ALWAYS , JScrollPane . HORIZONTAL_SCROLLBAR_ALWAYS ) ; sp . setMinimumSize ( new Dimension ( 10 , 80 ) ) ; c . weightx = 1 ; JPanel p1 = new JPanel ( ) ; p1 . setLayout ( new BorderLayout ( ) ) ; p1 . add ( sp ) ; cPanel . add ( p1 , c ) ; c . gridwidth = 1 ; c . gridy ++ ; c . fill = GridBagConstraints . NONE ; c . anchor = GridBagConstraints . WEST ; cPanel . add ( new JLabel ( "Length: " ) , c ) ; c . gridx ++ ; len = new JTextField ( 6 ) ; len . setText ( "8" ) ; len . setInputVerifier ( intInputVerifier ) ; len . getCaret ( ) . addChangeListener ( new CaretChangeListener ( len , intInputVerifier ) ) ; components . add ( len ) ; cPanel . add ( len , c ) ; c . gridx ++ ; JButton button = new JButton ( "Get Challenge" ) ; button . setActionCommand ( "getchallenge" ) ; button . addActionListener ( listener ) ; components . add ( button ) ; cPanel . add ( button , c ) ; c . gridx ++ ; button = new JButton ( "Save..." ) ; button . setActionCommand ( "save" ) ; button . addActionListener ( this ) ; components . add ( button ) ; cPanel . add ( button , c ) ; c . gridx ++ ; button = new JButton ( "Use as DTBS" ) ; button . setActionCommand ( "usedtbs" ) ; button . addActionListener ( listener ) ; components . add ( button ) ; cPanel . add ( button , c ) ; c . fill = GridBagConstraints . HORIZONTAL ; c . anchor = GridBagConstraints . WEST ; c . gridx ++ ; c . weightx = 10 ; cPanel . add ( new JLabel ( "" ) , c ) ; c . gridy ++ ; c . gridx = 0 ; c . gridwidth = 6 ; c . insets = new Insets ( 0 , 0 , 0 , 0 ) ; cPanel . add ( new JLabel ( "                                                                                                  " ) , c ) ; cPanel . setBorder ( BorderFactory . createTitledBorder ( "Get Challenge" ) ) ; c . gridx = 0 ; c . gridy = 0 ; c . gridwidth = 1 ; c . gridheight = 1 ; c . weightx = w ; c . weighty = w ; c . fill = GridBagConstraints . HORIZONTAL ; c . anchor = GridBagConstraints . WEST ; c . insets = new Insets ( 5 , 0 , 5 , 0 ) ; add ( cPanel , c ) ; }
te	IDF	private int distance ( int x1 , int y1 , int x2 , int y2 ) { int d ; if ( _hue [ y1 ] [ x1 ] == 0 && _hue [ y2 ] [ x2 ] == 0 ) { int dv = _val [ y1 ] [ x1 ] - _val [ y2 ] [ x2 ] ; d = wv * Math . abs ( dv ) ; } else { int ds = _sat [ y1 ] [ x1 ] - _sat [ y2 ] [ x2 ] ; int dh = _hue [ y1 ] [ x1 ] - _hue [ y2 ] [ x2 ] ; d = ( int ) Math . sqrt ( wh * dh * dh + ws * ds * ds ) ; } return d > EDGE_BOUND ? EDGE_BOUND : d ; }
te	IDF	private void jMenuItem1ActionPerformed ( java . awt . event . ActionEvent evt ) { MailInternalFrame mif = new MailInternalFrame ( ) ; masterjdesktopPane . add ( mif ) ; mif . show ( ) ; }
te	KEY	public long getId ( ) { return id ; }
te	IDF	public void setAddressLine1 ( String addressLine1 ) { this . addressLine1 = addressLine1 ; }
te	IDF	public JPanel paneStrategy ( ) { paneStrategy . setLayout ( new GridLayout ( 1 , 2 ) ) ; GridBagLayout plantGBL = new GridBagLayout ( ) ; GridBagLayout herbivoreGBL = new GridBagLayout ( ) ; GridBagConstraints plantGBC = new GridBagConstraints ( ) ; GridBagConstraints herbivoreGBC = new GridBagConstraints ( ) ; panePlant . setBorder ( BorderFactory . createMatteBorder ( 0 , 0 , 0 , 1 , Color . BLACK ) ) ; panePlant . setLayout ( plantGBL ) ; plantGBC . gridx = plantGBC . gridy = 0 ; plantGBC . insets = new Insets ( 30 , 110 , 0 , 0 ) ; panePlant . add ( new JLabel ( "Plants Parameters" ) , plantGBC ) ; plantGBC . insets = new Insets ( 25 , - 70 , 0 , 0 ) ; plantGBC . gridx = 0 ; plantGBC . gridy ++ ; plantGBC . gridy ++ ; panePlant . add ( new JLabel ( "Plant Number" ) , plantGBC ) ; plantGBC . gridy ++ ; plantGBC . gridy ++ ; panePlant . add ( new JLabel ( "Life Degeneration Rate" ) , plantGBC ) ; plantGBC . gridy = 1 ; panePlant . add ( new JLabel ( "min life" ) , plantGBC ) ; minLifePlant . setColumns ( 4 ) ; minLifePlant . setText ( "003" ) ; panePlant . add ( minLifePlant , plantGBC ) ; plantGBC . gridx ++ ; panePlant . add ( new JLabel ( "max life" ) , plantGBC ) ; maxLifePlant . setColumns ( 4 ) ; maxLifePlant . setText ( "010" ) ; panePlant . add ( maxLifePlant , plantGBC ) ; plantGBC . gridx = 1 ; plantGBC . gridy = 2 ; strategyPlant . setBackground ( Color . WHITE ) ; strategyPlant . setEnabled ( true ) ; panePlant . add ( strategyPlant , plantGBC ) ; strategyPlant . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent event ) { JComboBox < ? > comboBox = ( JComboBox < ? > ) event . getSource ( ) ; Object selected = comboBox . getSelectedItem ( ) ; if ( selected . toString ( ) . equals ( "Raw Number" ) ) { plantNb . setEnabled ( true ) ; } else if ( selected . toString ( ) . equals ( "Map %" ) ) { plantNb . setEnabled ( true ) ; } else { plantNb . setEnabled ( false ) ; } } } ) ; plantGBC . gridy ++ ; plantNb . setColumns ( 5 ) ; plantNb . setEnabled ( false ) ; panePlant . add ( plantNb , plantGBC ) ; plantGBC . gridy ++ ; damageOverTimeRate . setValue ( 5 ) ; damageOverTimeRate . setMajorTickSpacing ( 25 ) ; damageOverTimeRate . setMinorTickSpacing ( 5 ) ; damageOverTimeRate . setPaintTicks ( true ) ; damageOverTimeRate . setPaintLabels ( true ) ; damageOverTimeRate . addChangeListener ( new ChangeListener ( ) { @ Override public void stateChanged ( ChangeEvent e ) { Plant . setLifeDegenSpeed ( damageOverTimeRate . getValue ( ) ) ; } } ) ; panePlant . add ( damageOverTimeRate , plantGBC ) ; paneHerbivore . setLayout ( herbivoreGBL ) ; herbivoreGBC . gridx = herbivoreGBC . gridy = 0 ; herbivoreGBC . insets = new Insets ( 5 , 120 , 15 , 0 ) ; paneHerbivore . add ( new JLabel ( "Herbivores Parameters" ) , herbivoreGBC ) ; herbivoreGBC . gridy = 1 ; herbivoreGBC . insets = new Insets ( 0 , - 120 , 0 , 0 ) ; paneHerbivore . add ( new JLabel ( "min life" ) , herbivoreGBC ) ; minLifeHerbivore . setColumns ( 4 ) ; paneHerbivore . add ( minLifeHerbivore , herbivoreGBC ) ; herbivoreGBC . gridx ++ ; paneHerbivore . add ( new JLabel ( "max life" ) , herbivoreGBC ) ; maxLifeHerbivore . setColumns ( 4 ) ; paneHerbivore . add ( maxLifeHerbivore , herbivoreGBC ) ; herbivoreGBC . gridy ++ ; herbivoreGBC . gridx = 0 ; paneHerbivore . add ( new JLabel ( "Herbivore Number" ) , herbivoreGBC ) ; herbivoreGBC . gridy ++ ; paneHerbivore . add ( new JLabel ( "Life Degeneration Rate" ) , herbivoreGBC ) ; herbivoreGBC . gridy ++ ; paneHerbivore . add ( new JLabel ( "Birth Rate" ) , herbivoreGBC ) ; herbivoreGBC . gridy ++ ; paneHerbivore . add ( new JLabel ( "Seed Gathering Rate" ) , herbivoreGBC ) ; herbivoreGBC . gridy ++ ; paneHerbivore . add ( new JLabel ( "Escape Rate" ) , herbivoreGBC ) ; herbivoreGBC . gridx ++ ; herbivoreGBC . gridy = 2 ; herbivoreNb . setColumns ( 5 ) ; paneHerbivore . add ( herbivoreNb , herbivoreGBC ) ; herbivoreGBC . gridy ++ ; herbivoreDamageOverTimeRate . setValue ( 5 ) ; herbivoreDamageOverTimeRate . setMajorTickSpacing ( 25 ) ; herbivoreDamageOverTimeRate . setMinorTickSpacing ( 5 ) ; herbivoreDamageOverTimeRate . setPaintTicks ( true ) ; herbivoreDamageOverTimeRate . setPaintLabels ( true ) ; herbivoreDamageOverTimeRate . addChangeListener ( new ChangeListener ( ) { @ Override public void stateChanged ( ChangeEvent e ) { Herbivore . setLifeDegenSpeed ( herbivoreDamageOverTimeRate . getValue ( ) ) ; } } ) ; paneHerbivore . add ( herbivoreDamageOverTimeRate , herbivoreGBC ) ; herbivoreGBC . gridy ++ ; herbivoreBirthRate . setValue ( 10 ) ; herbivoreBirthRate . setMajorTickSpacing ( 25 ) ; herbivoreBirthRate . setMinorTickSpacing ( 5 ) ; herbivoreBirthRate . setPaintTicks ( true ) ; herbivoreBirthRate . setPaintLabels ( true ) ; herbivoreBirthRate . addChangeListener ( new ChangeListener ( ) { @ Override public void stateChanged ( ChangeEvent e ) { Herbivore . setBirthRate ( herbivoreBirthRate . getValue ( ) ) ; } } ) ; paneHerbivore . add ( herbivoreBirthRate , herbivoreGBC ) ; herbivoreGBC . gridy ++ ; seedGatheringRate . setMajorTickSpacing ( 25 ) ; seedGatheringRate . setMinorTickSpacing ( 5 ) ; seedGatheringRate . setPaintTicks ( true ) ; seedGatheringRate . setPaintLabels ( true ) ; seedGatheringRate . addChangeListener ( new ChangeListener ( ) { @ Override public void stateChanged ( ChangeEvent arg0 ) { Herbivore . setSeedGatheringRate ( seedGatheringRate . getValue ( ) ) ; } } ) ; paneHerbivore . add ( seedGatheringRate , herbivoreGBC ) ; herbivoreGBC . gridy ++ ; herbivoreEscape . setMajorTickSpacing ( 25 ) ; herbivoreEscape . setMinorTickSpacing ( 5 ) ; herbivoreEscape . setPaintTicks ( true ) ; herbivoreEscape . setPaintLabels ( true ) ; herbivoreEscape . addChangeListener ( new ChangeListener ( ) { @ Override public void stateChanged ( ChangeEvent e ) { Herbivore . setEscapeRate ( herbivoreEscape . getValue ( ) ) ; } } ) ; paneHerbivore . add ( herbivoreEscape , herbivoreGBC ) ; paneStrategy . add ( panePlant ) ; paneStrategy . add ( paneHerbivore ) ; return paneStrategy ; }
te	KEY	public double getDes_blanco ( ) { return des_blanco ; }
te	IDF	private int insertIfEmpty ( Connection connection ) { if ( basicSelect ( connection ) > 0 ) return 0 ; QueryUtil qu = qm . createQueryUtil ( "insertUser" ) ; int result = 0 ; try { qu . setConnection ( connection , false ) ; qu . setString ( "alpha" ) ; qu . setString ( "alpha@email.com" ) ; qu . setDouble ( 10.1 ) ; qu . setTimestamp ( new Timestamp ( System . currentTimeMillis ( ) ) ) ; result += qu . executeUpdate ( ) ; User user = new User ( ) ; user . setUserName ( "beta" ) ; user . setEmailAddress ( "beta@email.com" ) ; user . setAmount ( 20.2 ) ; user . setCreated ( new Timestamp ( System . currentTimeMillis ( ) ) ) ; result += qu . executeUpdate ( user ) ; User blankBean = new User ( ) ; result += qu . executeUpdate ( blankBean ) ; result += qu . executeUpdateParameters ( "gamma" , "gamma@gmail.com" , 30.3 , new Timestamp ( System . currentTimeMillis ( ) ) ) ; result += qu . executeUpdateParameters ( null , null , null , null ) ; Map < String , Object > map = new HashMap < String , Object > ( ) ; map . put ( "userName" , "delta" ) ; map . put ( "emailAddress" , "delta@email.com" ) ; map . put ( "amount" , 40.4 ) ; map . put ( "created" , new Timestamp ( System . currentTimeMillis ( ) ) ) ; result += qu . executeUpdate ( map ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } finally { if ( result == 6 ) QueryUtil . commit ( connection ) ; else QueryUtil . rollback ( connection ) ; qu . closeJust ( ) ; } if ( result != 6 ) throw new RuntimeException ( "should be 6 but " + result ) ; System . out . println ( "############# insertIfEmpty ##########" ) ; System . out . println ( "inserted " + result ) ; return result ; }
te	KEY	public double getMiny ( ) { return miny ; }
te	KEY	public int getIdCategory ( ) { return id_category ; }
te	IDF	private void jcbSoundEnabledActionPerformed ( java . awt . event . ActionEvent evt ) { Options opt = new Options ( ) ; opt . setSound ( jcbSoundEnabled . isSelected ( ) ) ; }
te	KEY	public void redoEvent ( ) { AbstractGame game = resolveGame ( ) ; if ( game == null ) { return ; } }
te	IDF	public java_cup . runtime . Symbol next_token ( ) throws java . io . IOException { int zzInput ; int zzAction ; int zzCurrentPosL ; int zzMarkedPosL ; int zzEndReadL = zzEndRead ; char [ ] zzBufferL = zzBuffer ; char [ ] zzCMapL = ZZ_CMAP ; int [ ] zzTransL = ZZ_TRANS ; int [ ] zzRowMapL = ZZ_ROWMAP ; int [ ] zzAttrL = ZZ_ATTRIBUTE ; while ( true ) { zzMarkedPosL = zzMarkedPos ; yychar += zzMarkedPosL - zzStartRead ; boolean zzR = false ; for ( zzCurrentPosL = zzStartRead ; zzCurrentPosL < zzMarkedPosL ; zzCurrentPosL ++ ) { switch ( zzBufferL [ zzCurrentPosL ] ) { case  : case  : case  : case   : case   : yyline ++ ; yycolumn = 0 ; zzR = false ; break ; case '' : yyline ++ ; yycolumn = 0 ; zzR = true ; break ; case '' : if ( zzR ) zzR = false ; else { yyline ++ ; yycolumn = 0 ; } break ; default : zzR = false ; yycolumn ++ ; } } if ( zzR ) { boolean zzPeek ; if ( zzMarkedPosL < zzEndReadL ) zzPeek = zzBufferL [ zzMarkedPosL ] == '' ; else if ( zzAtEOF ) zzPeek = false ; else { boolean eof = zzRefill ( ) ; zzEndReadL = zzEndRead ; zzMarkedPosL = zzMarkedPos ; zzBufferL = zzBuffer ; if ( eof ) zzPeek = false ; else zzPeek = zzBufferL [ zzMarkedPosL ] == '' ; } if ( zzPeek ) yyline -- ; } zzAction = - 1 ; zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL ; zzState = ZZ_LEXSTATE [ zzLexicalState ] ; zzForAction : { while ( true ) { if ( zzCurrentPosL < zzEndReadL ) zzInput = zzBufferL [ zzCurrentPosL ++ ] ; else if ( zzAtEOF ) { zzInput = YYEOF ; break zzForAction ; } else { zzCurrentPos = zzCurrentPosL ; zzMarkedPos = zzMarkedPosL ; boolean eof = zzRefill ( ) ; zzCurrentPosL = zzCurrentPos ; zzMarkedPosL = zzMarkedPos ; zzBufferL = zzBuffer ; zzEndReadL = zzEndRead ; if ( eof ) { zzInput = YYEOF ; break zzForAction ; } else { zzInput = zzBufferL [ zzCurrentPosL ++ ] ; } } int zzNext = zzTransL [ zzRowMapL [ zzState ] + zzCMapL [ zzInput ] ] ; if ( zzNext == - 1 ) break zzForAction ; zzState = zzNext ; int zzAttributes = zzAttrL [ zzState ] ; if ( ( zzAttributes & 1 ) == 1 ) { zzAction = zzState ; zzMarkedPosL = zzCurrentPosL ; if ( ( zzAttributes & 8 ) == 8 ) break zzForAction ; } } } zzMarkedPos = zzMarkedPosL ; switch ( zzAction < 0 ? zzAction : ZZ_ACTION [ zzAction ] ) { case 17 : { return new Symbol ( sym . FORWARD ) ; } case 35 : break ; case 24 : { return new Symbol ( sym . END ) ; } case 36 : break ; case 2 : { return new Symbol ( sym . VARIABLE , yytext ( ) ) ; } case 37 : break ; case 14 : { return new Symbol ( sym . ATSYM ) ; } case 38 : break ; case 33 : { return new Symbol ( sym . FRACTAL ) ; } case 39 : break ; case 8 : { return new Symbol ( sym . MOD ) ; } case 40 : break ; case 15 : { return new Symbol ( sym . EXCLAMATION ) ; } case 41 : break ; case 25 : { return new Symbol ( sym . DEF ) ; } case 42 : break ; case 22 : { return new Symbol ( sym . PENUP ) ; } case 43 : break ; case 13 : { return new Symbol ( sym . } ) ; } case 44 : break ; case 11 : { return new Symbol ( sym . , ) ; } case 45 : break ; case 20 : { return new Symbol ( sym . BACK ) ; } case 46 : break ; case 32 : { return new Symbol ( sym . RENDER ) ; } case 47 : break ; case 26 : { return new Symbol ( sym . SAVE ) ; } case 48 : break ; case 5 : { return new Symbol ( sym . + ) ; } case 49 : break ; case 6 : { return new Symbol ( sym . MUL ) ; } case 50 : break ; case 10 : { return new Symbol ( sym . ) ) ; } case 51 : break ; case 19 : { return new Symbol ( sym . LEFT ) ; } case 52 : break ; case 29 : { return new Symbol ( sym . CLEAR ) ; } case 53 : break ; case 21 : { return new Symbol ( sym . PENDOWN ) ; } case 54 : break ; case 18 : { return new Symbol ( sym . RIGHT ) ; } case 55 : break ; case 4 : { return new Symbol ( sym . MINUS ) ; } case 56 : break ; case 7 : { return new Symbol ( sym . DIV ) ; } case 57 : break ; case 12 : { return new Symbol ( sym . { ) ; } case 58 : break ; case 16 : { return new Symbol ( sym . ; ) ; } case 59 : break ; case 31 : { return new Symbol ( sym . SCALE ) ; } case 60 : break ; case 30 : { return new Symbol ( sym . LEVEL ) ; } case 61 : break ; case 3 : { return new Symbol ( sym . INTEGER , new Integer ( yytext ( ) ) ) ; } case 62 : break ; case 28 : { return new Symbol ( sym . HOME ) ; } case 63 : break ; case 23 : { return new Symbol ( sym . double , new double ( yytext ( ) ) ) ; } case 64 : break ; case 34 : { return new Symbol ( sym . RESTORE ) ; } case 65 : break ; case 27 : { return new Symbol ( sym . SELF ) ; } case 66 : break ; case 9 : { return new Symbol ( sym . ( ) ; } case 67 : break ; case 1 : { } case 68 : break ; default : if ( zzInput == YYEOF && zzStartRead == zzCurrentPos ) { zzAtEOF = true ; { return new Symbol ( sym . EOF ) ; } } else { zzScanError ( ZZ_NO_MATCH ) ; } } } }
te	IDF	public void contextInitialized ( ServletContextEvent servletContextEvent ) { ServletContext ctx = servletContextEvent . getServletContext ( ) ; InputStream is = ctx . getResourceAsStream ( ctx . getInitParameter ( policyFile ) ) ; JAXBContext jaxbContext ; try { jaxbContext = JAXBContext . newInstance ( TransactionPolicy . class ) ; Unmarshaller jaxbUnmarshaller = jaxbContext . createUnmarshaller ( ) ; TransactionPolicy pol = ( TransactionPolicy ) jaxbUnmarshaller . unmarshal ( is ) ; ctx . setAttribute ( CartAppActionBeanContext . policyAttribute , pol ) ; } catch ( JAXBException e ) { e . printStackTrace ( ) ; } }
te	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { n5ActionPerformed ( evt ) ; }
te	IDF	public List < String > readData ( ) throws FileNotFoundException { Scanner sc = new Scanner ( new File ( "src/resources/spiegelhalter.txt" ) ) ; List < String > lines = new ArrayList < > ( ) ; while ( sc . hasNextLine ( ) ) { String curLine = sc . nextLine ( ) ; lines . add ( curLine ) ; } return lines ; }
te	KEY	public boolean equals ( Object object ) { return object == null || object == this ; }
te	KEY	abstract public void performZoom ( int steps ) ;
te	KEY	public int getPosM0 ( ) { return mPosM0 ; }
te	IDF	@ Override public String execute ( HttpServletRequest request , HttpServletResponse response ) throws Exception { String data ; try { int rpp ; if ( request . getParameter ( "rpp" ) == null ) { rpp = 10 ; } else { rpp = Integer . parseInt ( request . getParameter ( "rpp" ) ) ; } ArrayList < FilterBean > alFilter = new ArrayList < > ( ) ; if ( request . getParameter ( "filter" ) != null ) { if ( request . getParameter ( "filteroperator" ) != null ) { if ( request . getParameter ( "filtervalue" ) != null ) { FilterBean oFilterBean = new FilterBean ( ) ; oFilterBean . setFilter ( request . getParameter ( "filter" ) ) ; oFilterBean . setFilterOperator ( request . getParameter ( "filteroperator" ) ) ; oFilterBean . setFilterValue ( request . getParameter ( "filtervalue" ) ) ; oFilterBean . setFilterOrigin ( "user" ) ; alFilter . add ( oFilterBean ) ; } } } if ( request . getParameter ( "systemfilter" ) != null ) { if ( request . getParameter ( "systemfilteroperator" ) != null ) { if ( request . getParameter ( "systemfiltervalue" ) != null ) { FilterBean oFilterBean = new FilterBean ( ) ; oFilterBean . setFilter ( request . getParameter ( "systemfilter" ) ) ; oFilterBean . setFilterOperator ( request . getParameter ( "systemfilteroperator" ) ) ; oFilterBean . setFilterValue ( request . getParameter ( "systemfiltervalue" ) ) ; oFilterBean . setFilterOrigin ( "system" ) ; alFilter . add ( oFilterBean ) ; } } } HashMap < String , String > hmOrder = new HashMap < > ( ) ; if ( request . getParameter ( "order" ) != null ) { if ( request . getParameter ( "ordervalue" ) != null ) { hmOrder . put ( request . getParameter ( "order" ) , request . getParameter ( "ordervalue" ) ) ; } else { hmOrder = null ; } } else { hmOrder = null ; } CargoDao oCargoDAO = new CargoDao ( Conexion . getConection ( ) ) ; int pages = oCargoDAO . getPages ( rpp , alFilter , hmOrder ) ; data = "{\"data\":\"" + Integer . toString ( pages ) + "\"}" ; return data ; } catch ( Exception e ) { throw new ServletException ( "CargoGetpagesJson: View Error: " + e . getMessage ( ) ) ; } }
te	KEY	public static void validate ( int a ) { if ( a < 18 ) { throw new ArithmeticException ( "not eligible" ) ; } }
te	IDF	public static Ruta getOne ( int id ) throws SQLException { Ruta res = null ; sql = "SELECT * FROM RUTAS WHERE RUTAS.ID = " + Integer . toString ( id ) ; try ( ResultSet rs = ComunDP . getData ( sql ) ) { if ( rs . next ( ) ) { res = DbToObj ( rs ) ; } } return res ; }
te	IDF	public void addPropertyChangeListener ( PropertyChangeListener listener ) { propertyChangeSupport . addPropertyChangeListener ( listener ) ; }
te	KEY	public void run ( ) { new FileRenamerFrame ( ) . setVisible ( true ) ; }
te	KEY	public ASCII_Art ( boolean printTitle ) { if ( printTitle ) { } }
te	IDF	public void setHand ( ArrayList < PokerCard > hand ) { this . hand = hand ; }
te	IDF	public ReceiveThread ( Connection connection ) { this . connection = connection ; }
te	KEY	static synchronized void incResizeInt ( ) { resizeInt ++ ; }
te	IDF	@ Override public LevelInterface generateLevel ( String detailedInfo ) { return null ; }
te	KEY	void displayHelpMenu ( ) ;
te	IDF	@ Override public void keyReleased ( KeyEvent e ) { }
te	IDF	public Executor ( Node root ) { super ( root ) ; }
te	IDF	@ Override public void putChar ( char c ) throws ParsingException { if ( c == Characters . SUB_END ) { close ( ) ; exit ( ) ; context . putChar ( Characters . SUB_END ) ; } else super . putChar ( c ) ; }
te	KEY	public void sendHostWin ( ) ;
te	IDF	public void actionPerformed ( ActionEvent e ) { controller . fieldOfView ( false ) ; controller . addPlayerEvent ( 10 ) ; controller . stairsUp ( ) ; controller . fieldOfView ( true ) ; }
te	IDF	public void setNonInclude ( String nonInclude ) { this . nonInclude = nonInclude ; }
te	IDF	@ Override public String toString ( ) { RandomListNode p = this ; String s = "" ; while ( p != null ) { String r = ( p . random == null ) ? "(null)" : "(" + p . random . label + ")" ; s += p . label + r + " " ; p = p . next ; } return s ; }
te	IDF	@ Override public AbstractMutableFormula visit ( AbstractBinaryOperator binaryOperator ) { AbstractMutableFormula simplifiedLeft = binaryOperator . getLeft ( ) . accept ( this ) ; AbstractMutableFormula simplifiedRight = binaryOperator . getRight ( ) . accept ( this ) ; AbstractMutableFormula result ; result = evalBinary ( binaryOperator , simplifiedLeft , simplifiedRight ) ; if ( result != null ) { return result ; } result = simplifyDivision ( binaryOperator , simplifiedLeft , simplifiedRight ) ; if ( result != null ) return result ; return binaryOperator . getInstance ( simplifiedLeft , simplifiedRight ) ; }
te	KEY	public int getQtiteStock ( ) { return qtiteStock ; }
te	IDF	public static void quitter ( ) { choix = fenetre . afficherChoixMessage ( "\u00CAtes-vous sur de vouloir quitter ?" , "Attention" ) ; if ( choix == JOptionPane . YES_OPTION ) System . exit ( 0 ) ; }
te	KEY	public void setNumero ( long value ) { this . numero = value ; }
te	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { helpButtonActionPerformed ( evt ) ; }
te	KEY	public double getX ( ) { return location . x ; }
te	KEY	public static Leaf randomFullLeaf ( ) { return randomFullLeaf ( 2 ) ; }
te	IDF	public SearchMachine ( JTextComponent txtComponent ) { setTxtComponent ( txtComponent ) ; myHighlightPainter = new MyHighlightPainter ( Color . YELLOW ) ; }
te	IDF	public void occupyLocation ( Player player , int row , int column ) throws GameException { Player playerAtLocation = this . boardLocations [ row ] [ column ] ; if ( playerAtLocation != null ) { throw new GameException ( ErrorType . ERROR203 . getMessage ( ) ) ; } this . boardLocations [ row ] [ column ] = player ; }
te	KEY	public float ( int rule , int initialCapacity ) { super ( rule , initialCapacity ) ; floatCoords = new float [ initialCapacity * 2 ] ; }
te	IDF	static ArrayList < ArrayList < byte >> permutations ( ArrayList < ArrayList < byte >> previousDigits , byte digitsLeft ) { if ( previousDigits . size ( ) == 0 ) previousDigits . add ( new ArrayList < byte > ( ) ) ; if ( digitsLeft == 0 ) return previousDigits ; ArrayList < ArrayList < byte >> newPreviousDigits = new ArrayList < ArrayList < byte >> ( ) ; for ( int i = 0 ; i < previousDigits . size ( ) ; i ++ ) for ( byte j = 0 ; j < GUESS_LENGTH ; j ++ ) { if ( previousDigits . size ( ) == 1 || j > previousDigits . get ( i ) . get ( previousDigits . get ( i ) . size ( ) - 1 ) ) { newPreviousDigits . add ( new ArrayList < byte > ( ) ) ; ArrayList < byte > oldPreviousDigits = previousDigits . get ( i ) ; for ( int k = 0 ; k < oldPreviousDigits . size ( ) ; k ++ ) newPreviousDigits . get ( newPreviousDigits . size ( ) - 1 ) . add ( oldPreviousDigits . get ( k ) ) ; newPreviousDigits . get ( newPreviousDigits . size ( ) - 1 ) . add ( j ) ; } } return permutations ( newPreviousDigits , ( byte ) ( digitsLeft - 1 ) ) ; }
te	KEY	public int getY ( ) { return y ; }
te	IDF	public void setHandler ( ServerHandler handler ) { this . handler = handler ; }
te	KEY	@ Override public boolean shouldContinue ( ) { return true ; }
te	IDF	@ Override public ImageIcon getImg ( ) { ImageRegistry reg = ImageManager . getInstance ( ) . getTileSet ( "monsters" ) ; if ( reg == null ) { return null ; } else { return reg . getTile ( this . getName ( ) ) ; } }
te	IDF	@ Override public double distanceFromAPoint ( Point2D p ) { return getPosition ( ) . distance ( p ) ; }
te	IDF	@ Override public Value aggregate ( String columnName , Stream < ? extends Tuple > tuples ) { return Value . of ( tuples . count ( ) ) ; }
te	IDF	@ Override public void add ( Geometry child ) { kids . add ( child ) ; }
te	IDF	public UsuarioBean loadId ( UsuarioBean oUsuario ) throws ServletException { try { if ( request . getParameter ( "id" ) != null ) { oUsuario . setId ( Integer . parseInt ( request . getParameter ( "id" ) ) ) ; } else { oUsuario . setId ( 0 ) ; } } catch ( NumberFormatException e ) { throw new ServletException ( "Controller: Error: loadId: Formato de datos en par\u00E1metros incorrecto " + e . getMessage ( ) ) ; } return oUsuario ; }
te	KEY	public int getThrownDarts ( ) ;
te	KEY	public static void main ( String [ ] args ) { new MainExceptions ( ) ; }
te	KEY	public void setLimite ( int limite ) { this . limite = limite ; }
te	IDF	public static DataAccess getDataAccess ( ) { if ( dataAccessService == null ) { System . out . println ( "Connection to data access has not been established." ) ; System . exit ( 1 ) ; } return dataAccessService ; }
te	KEY	public void setUnitsOnOrder ( int unitsOnOrder ) { this . unitsOnOrder = unitsOnOrder ; }
te	IDF	public void loadAudioSampleAU ( final String resourcePath , final Object clipName ) { try { final AudioData audioData = loadAudioData ( resourcePath ) ; if ( audioData != null ) { samplesAU . put ( clipName , audioData ) ; Logger . info ( "Loaded audio sample '%s' as '%s'\n" , resourcePath , clipName ) ; } } catch ( IOException e ) { e . printStackTrace ( ) ; } }
te	KEY	public abstract DependencyInstance nextInstance ( ) throws IOException ;
te	KEY	public int getCompletion ( ) { return completion ; }
te	KEY	public long getPageNumber ( ) { return pageNumber ; }
te	IDF	private void jTFCodigoKeyReleased ( java . awt . event . KeyEvent evt ) { try { Chamado chamado = ( Chamado ) dadosDAO . consulta ( jTFCodigo . getText ( ) ) ; jLChamado . setText ( chamado != null ? "C\u00F3digo j\u00E1 cadastrado" : "C\u00F3digo n\u00E3o cadastrado" ) ; } catch ( SQLException ex ) { Logger . getLogger ( TelaGestaoChamado . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; } }
te	KEY	@ Override public FilmModel build ( ) { return new FilmModel ( this ) ; }
te	IDF	public static String getShortString ( Calendar date ) { String returnString = "" ; returnString = returnString + date . get ( Calendar . YEAR ) ; returnString = returnString . concat ( "-" ) ; String monthString = "" + ( date . get ( Calendar . MONTH ) + 1 ) ; if ( monthString . length ( ) == 1 ) monthString = "0" + monthString ; returnString = returnString . concat ( monthString ) ; returnString = returnString . concat ( "-" ) ; String dayString = "" + ( date . get ( Calendar . DAY_OF_MONTH ) ) ; if ( dayString . length ( ) == 1 ) dayString = "0" + dayString ; returnString = returnString . concat ( dayString ) ; return returnString ; }
te	IDF	@ Basic @ Column ( name = "date" ) public Timestamp getDate ( ) { return date ; }
te	KEY	public void close ( ) ;
te	IDF	private void textBuscarKeyTyped ( java . awt . event . KeyEvent evt ) { if ( CheckNombre . isSelected ( ) ) { if ( ! Character . isLetterOrDigit ( evt . getKeyChar ( ) ) && ! Character . isISOControl ( evt . getKeyChar ( ) ) && evt . getKeyChar ( ) != - && evt . getKeyChar ( ) != . && ! Character . isWhitespace ( evt . getKeyChar ( ) ) ) { Toolkit . getDefaultToolkit ( ) . beep ( ) ; evt . consume ( ) ; } if ( textBuscar . getText ( ) . length ( ) == 45 ) { Toolkit . getDefaultToolkit ( ) . beep ( ) ; evt . consume ( ) ; JOptionPane . showMessageDialog ( this , "Nombre demasiado largo" , "ADVERTENCIA" , WIDTH ) ; } } if ( CheckFuncion . isSelected ( ) ) { if ( ! Character . isLetter ( evt . getKeyChar ( ) ) && ! Character . isISOControl ( evt . getKeyChar ( ) ) && ! Character . isWhitespace ( evt . getKeyChar ( ) ) ) { Toolkit . getDefaultToolkit ( ) . beep ( ) ; evt . consume ( ) ; } if ( textBuscar . getText ( ) . length ( ) == 45 ) { Toolkit . getDefaultToolkit ( ) . beep ( ) ; evt . consume ( ) ; JOptionPane . showMessageDialog ( this , "Funcion de medicamento demasiado larga" , "ADVERTENCIA" , WIDTH ) ; } } if ( CheckLote . isSelected ( ) ) { if ( ! Character . isLetterOrDigit ( evt . getKeyChar ( ) ) && ! Character . isISOControl ( evt . getKeyChar ( ) ) && evt . getKeyChar ( ) != - && evt . getKeyChar ( ) != . ) { Toolkit . getDefaultToolkit ( ) . beep ( ) ; evt . consume ( ) ; } if ( textBuscar . getText ( ) . length ( ) == 45 ) { Toolkit . getDefaultToolkit ( ) . beep ( ) ; evt . consume ( ) ; JOptionPane . showMessageDialog ( this , "Numero de lote demadiado largo." , "ADVERTENCIA" , WIDTH ) ; } } if ( CheckSerial . isSelected ( ) ) { if ( ! Character . isLetterOrDigit ( evt . getKeyChar ( ) ) && ! Character . isISOControl ( evt . getKeyChar ( ) ) ) { Toolkit . getDefaultToolkit ( ) . beep ( ) ; evt . consume ( ) ; } if ( textBuscar . getText ( ) . length ( ) == 45 ) { Toolkit . getDefaultToolkit ( ) . beep ( ) ; evt . consume ( ) ; JOptionPane . showMessageDialog ( this , "Serial demadiado largo." , "ADVERTENCIA" , WIDTH ) ; } } if ( CheckProveedor . isSelected ( ) ) { if ( ! Character . isLetter ( evt . getKeyChar ( ) ) && ! Character . isISOControl ( evt . getKeyChar ( ) ) && ! Character . isWhitespace ( evt . getKeyChar ( ) ) ) { Toolkit . getDefaultToolkit ( ) . beep ( ) ; evt . consume ( ) ; } if ( textBuscar . getText ( ) . length ( ) == 45 ) { Toolkit . getDefaultToolkit ( ) . beep ( ) ; evt . consume ( ) ; JOptionPane . showMessageDialog ( this , "Nombre del proveedor demadiado largo." , "ADVERTENCIA" , WIDTH ) ; } } if ( CheckTipo . isSelected ( ) ) { if ( textBuscar . getText ( ) . length ( ) == 45 ) { Toolkit . getDefaultToolkit ( ) . beep ( ) ; evt . consume ( ) ; JOptionPane . showMessageDialog ( this , "Tipo de medicamento demadiado largo." , "ADVERTENCIA" , WIDTH ) ; } } }
te	KEY	public Produto createProduto ( ) { return new Produto ( ) ; }
te	KEY	@ Override public void pressMoveRight ( ) { }
te	KEY	public void setSpeicher ( int speicher ) { this . speicher = speicher ; }
te	KEY	@ Override public boolean isIsVrmlFile ( ) { return _isVrmlFile ; }
te	KEY	public static void setMinSeed ( int min ) { MIN_SEED = min ; }
te	IDF	private void insertBook ( Connection conn , BookModel book , int id ) throws SQLException { String sql = "INSERT INTO book(product_id title format isbn  pages  publisher) VALUES(? ? ? ? ? ?)" ; try ( PreparedStatement pstmt = conn . prepareStatement ( sql ) ) { prepareStatementFromModel ( pstmt , book , id ) ; pstmt . executeUpdate ( ) ; insertAuthors ( conn , id , book . getAuthors ( ) ) ; } }
te	IDF	public void setScenarios ( List < String > scenarios ) { this . scenarios = scenarios ; }
te	IDF	private void buttonSair_MenuPrincipalActionPerformed ( java . awt . event . ActionEvent evt ) { System . exit ( 0 ) ; }
te	IDF	public HashMap < JavaPlayer , Integer > getFamePointsWon ( ) { HashMap < JavaPlayer , Integer > hash = new HashMap < JavaPlayer , Integer > ( ) ; for ( JavaFestivalPlayer player : players ) { hash . put ( player . getJavaPlayer ( ) , new Integer ( player . getFamePoints ( ) ) ) ; } return hash ; }
te	KEY	public Savings ( int id ) { super ( id ) ; }
te	IDF	@ Override public void deleteSeminar ( long seminarId ) { this . seminarDAO . delete ( this . seminarDAO . load ( seminarId ) ) ; }
te	KEY	public String getTableName ( ) { return "socialnetwork.user" ; }
te	KEY	protected abstract int getStartId ( ) ;
te	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButton2ActionPerformed ( evt ) ; }
te	KEY	public ProfilePresenterImpl ( ) { super ( ) ; }
te	KEY	public void setSize ( int size ) { this . size = size ; }
te	IDF	public String save ( ) { try { roomService . saveRoom ( room ) ; } catch ( ConstraintViolationException e ) { addActionError ( getText ( "msg.error.roomConstraint" ) ) ; return INPUT ; } return SUCCESS ; }
te	IDF	static void deleteUser ( String email ) { try ( Connection conn = DevDBConfig . getConnection ( ) ) { String sql = "DELETE FROM users WHERE email = ?" ; try ( PreparedStatement pstmt = conn . prepareStatement ( sql ) ) { pstmt . setString ( 1 , email ) ; pstmt . executeUpdate ( ) ; } } catch ( SQLException e ) { e . printStackTrace ( ) ; } }
te	IDF	@ Override public void runTest ( ) { List < Integer > result ; result = grayCode ( 3 ) ; for ( int i : result ) dbg ( i ) ; }
te	IDF	protected void refresh ( ) { img = new BufferedImage ( size . width , size . height , BufferedImage . TYPE_INT_ARGB ) ; int innerWidth = size . width - 2 * margin - 2 * borderWidth ; int innerHeight = size . height - 2 * margin - 2 * borderWidth ; if ( innerWidth < 0 || innerHeight < 0 ) { innerWidth = 0 ; innerHeight = 0 ; } inner = new Rectangle ( margin + borderWidth , margin + borderWidth , innerWidth , innerHeight ) ; bounds = new Rectangle ( pos . x , pos . y , size . width , size . height ) ; dirty = true ; }
te	IDF	public boolean placeDeveloperOnBoard ( int x , int y ) { return gameBoard . placeDeveloper ( gameBoard . getCellAtXY ( x , y ) , players [ indexOfCurrentPlayer ] ) ; }
te	IDF	public void setId_Equipo ( Equipo Id_Equipo ) { this . Id_Equipo = Id_Equipo ; }
te	IDF	public PassOut ( ) { requires ( feeder ) ; }
te	IDF	public void execute ( ) { for ( Filter f : filters ) { f . setChain ( this ) ; ( new Thread ( f ) ) . start ( ) ; } while ( runningChildren != filters . length ) { try { Thread . sleep ( 50 ) ; } catch ( InterruptedException e ) { System . err . println ( "Interrupted." ) ; System . exit ( 1 ) ; } } synchronized ( this ) { notifyAll ( ) ; } }
te	IDF	public void setNrpp ( Integer intNrpp ) { this . set ( "nrpp" , intNrpp . toString ( ) ) ; }
te	KEY	public int unpack ( int packedRGB , int component ) { return packedRGB >> 8 * ( 2 - component ) & 255 ; }
te	IDF	private void addNewEntities ( ) { synchronized ( addQueue ) { if ( ! addQueue . isEmpty ( ) ) { synchronized ( entitySet ) { entitySet . addAll ( addQueue ) ; } addQueue . clear ( ) ; this . dirtyCache = true ; } } }
te	IDF	public void assignMachine ( String src , XbpadButton button , String text , int keycode ) { switch ( src ) { case "lt" : { assignLTKeyCode ( button , text , keycode ) ; } break ; case "lb" : { assignLBKeyCode ( button , text , keycode ) ; } break ; case "l1" : { assignL1KeyCode ( button , text , keycode ) ; } break ; case "l2" : { assignL2KeyCode ( button , text , keycode ) ; } break ; case "l3" : { assignL3KeyCode ( button , text , keycode ) ; } break ; case "l4" : { assignL4KeyCode ( button , text , keycode ) ; } break ; case "l5" : { assignL5KeyCode ( button , text , keycode ) ; } break ; case "d1" : { assignD1KeyCode ( button , text , keycode ) ; } break ; case "d2" : { assignD2KeyCode ( button , text , keycode ) ; } break ; case "d3" : { assignD3KeyCode ( button , text , keycode ) ; } break ; case "d4" : { assignD4KeyCode ( button , text , keycode ) ; } break ; case "s1" : { assignS1KeyCode ( button , text , keycode ) ; } break ; case "s2" : { assignS2KeyCode ( button , text , keycode ) ; } break ; case "r1" : { assignR1KeyCode ( button , text , keycode ) ; } break ; case "r2" : { assignR2KeyCode ( button , text , keycode ) ; } break ; case "r3" : { assignR3KeyCode ( button , text , keycode ) ; } break ; case "r4" : { assignR4KeyCode ( button , text , keycode ) ; } break ; case "r5" : { assignR5KeyCode ( button , text , keycode ) ; } break ; case "x" : { assignXKeyCode ( button , text , keycode ) ; } break ; case "y" : { assignYKeyCode ( button , text , keycode ) ; } break ; case "b" : { assignBKeyCode ( button , text , keycode ) ; } break ; case "a" : { assignAKeyCode ( button , text , keycode ) ; } break ; case "rb" : { assignRBKeyCode ( button , text , keycode ) ; } break ; case "rt" : { assignRTKeyCode ( button , text , keycode ) ; } break ; } }
te	KEY	public void setBecomeRegisteredVoter ( boolean becomeRegisteredVoter ) { this . becomeRegisteredVoter = becomeRegisteredVoter ; }
te	IDF	private void drawTile ( int x , int y , FieldTyp type , Graphics g , String color ) { if ( color == null ) { g . setColor ( Color . BLACK ) ; g . fillRect ( x , y , TILE_SIZE , TILE_SIZE ) ; } else { int i = Integer . parseInt ( color , 16 ) ; Color c = new Color ( i ) ; g . setColor ( c ) ; g . fillOval ( x + 2 , y + 2 , TILE_SIZE - 4 , TILE_SIZE - 4 ) ; } }
te	IDF	public List < T > execute ( ) { List < T > entities = new ArrayList < T > ( ) ; try { ResultSet resultSet = super . statement . executeQuery ( ) ; while ( resultSet . next ( ) ) { T entity = dao . bind ( resultSet ) ; entities . add ( entity ) ; } resultSet . close ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } return entities ; }
te	KEY	public boolean isAlive ( ) { return isAlive ; }
te	KEY	protected int getLifetimeScore ( ) { return lifetimeOverUnder ; }
te	IDF	private int findInsertionPoint ( List < Interval > a , Interval target ) { int l = 0 , r = a . size ( ) - 1 ; int mid = 0 ; while ( l < r ) { mid = l + ( r - l ) / 2 ; if ( a . get ( mid ) . start == target . start ) { break ; } else if ( a . get ( mid ) . start < target . start ) { l = mid + 1 ; } else { r = mid - 1 ; } } if ( a . get ( mid ) . start == target . start ) return mid ; if ( a . get ( l ) . start <= target . start ) return l ; else { if ( l > 0 ) return l - 1 ; else return - 1 ; } }
te	IDF	private Currency ( final int numeric , final Digits digits , final String title ) { this . title = title ; this . numeric = numeric ; this . digits = digits ; }
te	IDF	public int askCategoryToSearch ( List < CategoryModel > categories ) { System . out . println ( "What category do you want to search books: " ) ; for ( CategoryModel category : categories ) { System . out . println ( category . getId ( ) + ". " + category . getName ( ) ) ; } return readInt ( ) ; }
te	KEY	public void editing ( ) { }
te	IDF	public void addSeconds ( int i ) { secondsRemaining += i ; g . getForm ( ) . setTimerTime ( "Seconds left: " + String . valueOf ( secondsRemaining ) ) ; }
te	IDF	public boolean shellCollideCheck ( Shell shell ) { if ( deadTime != 0 ) return false ; float xD = shell . x - x ; float yD = shell . y - y ; if ( xD > - 16 && xD < 16 ) { if ( yD > - height && yD < shell . height ) { world . sound . play ( Art . samples [ Art . SAMPLE_MARIO_KICK ] , this , 1 , 1 , 1 ) ; xa = shell . facing * 2 ; ya = - 5 ; flyDeath = true ; if ( spriteTemplate != null ) spriteTemplate . isDead = true ; deadTime = 100 ; winged = false ; hPic = - hPic ; yPicO = - yPicO + 16 ; if ( world . recorder != null ) world . recorder . shellKillRecord ( this ) ; return true ; } } return false ; }
te	IDF	static float [ ] sRGB_to_LCH ( final int rgba , final float [ ] LCH ) { return Lab_to_LCH ( XYZ_to_Lab ( sRGB_to_XYZ ( sRGB_to_f ( rgba , LCH ) ) ) ) ; }
te	KEY	public static boolean isValidFileName ( String fileName ) { for ( String c : invalidFileNameChars ) { if ( fileName . contains ( c ) ) { return false ; } } return true ; }
te	KEY	public void initFrame ( double time ) { }
te	IDF	@ Override public Graphics2D getGraphics2D ( ) { return graphics2D ; }
te	KEY	@ Override public boolean clearData ( ) { return false ; }
te	IDF	@ Override public Collection < V > values ( ) { return map . values ( ) ; }
te	KEY	public void setCantidad ( int i ) { throw new UnsupportedOperationException ( "Not supported yet." ) ; }
te	KEY	public boolean getWorking ( ) { return _isWorking ; }
te	KEY	public boolean ifDead ( ) { return dead ; }
te	KEY	private GameManagerFactory ( ) { super ( ) ; }
te	KEY	public void setShowOnlyFreeRooms ( boolean showOnlyFreeRooms ) { this . showOnlyFreeRooms = showOnlyFreeRooms ; }
te	IDF	public ChessVanillaKingPiece ( ChessState . PieceOwner Owner ) { this . Name = "King" ; this . Owner = Owner ; this . ImagePath = Path ; this . ImageFile = "King.png" ; this . Movement = new ChessMovement ( ) { @ Override public boolean CanMove ( ChessTile Start , ChessTile End ) { int ForwardMove = Math . abs ( Start . GetPosition ( ) [ 1 ] - End . GetPosition ( ) [ 1 ] ) ; int SideMove = Math . abs ( Start . GetPosition ( ) [ 0 ] - End . GetPosition ( ) [ 0 ] ) ; return ForwardMove <= 1 && SideMove <= 1 ; } } ; }
te	IDF	public void actionPerformed ( ActionEvent e ) { controller . addPlayerEvent ( 10 ) ; controller . playTurn ( ) ; }
te	IDF	Person makePerson ( ) ;
te	IDF	private Profile fetchSingleResult ( ResultSet rs ) throws SQLException { if ( rs . next ( ) ) { Profile dto = new Profile ( ) ; populateDto ( dto , rs ) ; return dto ; } else { return null ; } }
te	IDF	@ Override public void parseFile ( ) { data = new ArrayList < > ( ) ; try { Scanner in = new Scanner ( new File ( filePath ) ) ; findClasses ( ) ; while ( in . hasNext ( ) ) { String [ ] split = in . nextLine ( ) . split ( " " ) ; List < double > featureList = new ArrayList < > ( ) ; for ( int featureIterator = 0 ; featureIterator < inputs ; featureIterator ++ ) featureList . add ( double . valueOf ( split [ featureIterator ] ) ) ; List < double > output = getOutputVector ( split [ inputs ] ) ; data . add ( new DataPoint ( featureList , output ) ) ; } in . close ( ) ; } catch ( FileNotFoundException e ) { System . out . println ( "File not found for banknote dataset." ) ; e . printStackTrace ( ) ; } finally { findClasses ( ) ; } }
te	KEY	public long getImageID ( ) { return imageID ; }
te	KEY	public void setTransactionId ( int transactionId ) { this . transactionId = transactionId ; }
te	KEY	public int getDecimalCount ( ) { return decimalCount ; }
te	IDF	private void textTelefonoKeyTyped ( java . awt . event . KeyEvent evt ) { if ( ! Character . isDigit ( evt . getKeyChar ( ) ) && ! Character . isISOControl ( evt . getKeyChar ( ) ) ) { Toolkit . getDefaultToolkit ( ) . beep ( ) ; evt . consume ( ) ; } if ( textTelefono . getText ( ) . length ( ) == 13 ) { Toolkit . getDefaultToolkit ( ) . beep ( ) ; evt . consume ( ) ; JOptionPane . showMessageDialog ( this , "Telefono demasiado largo" , "ADVERTENCIA" , WIDTH ) ; } }
te	KEY	@ Override public long getId ( ) { return m_Id ; }
te	KEY	public double getShippingCost ( ) { return shippingCost ; }
te	KEY	public double calckm ( int km ) { return km + km ; }
te	IDF	void warn ( String msg ) ;
te	KEY	protected final void mEscape ( boolean _createToken ) throws RecognitionException , CharStreamException , TokenStreamException { int _ttype ; Token _token = null ; int _begin = text . length ( ) ; _ttype = Escape ; int _saveIndex ; match ( \ ) ; { switch ( LA ( 1 ) ) { case 0 : case 1 : case 2 : case 3 : { { matchRange ( 0 , 3 ) ; } { _loop610 : do { if ( ( ( LA ( 1 ) >= 0 && LA ( 1 ) <= 9 ) ) && ( true ) && ( true ) && ( true ) && ( true ) ) { mDIGIT ( false ) ; } else { break _loop610 ; } } while ( true ) ; } break ; } case 4 : case 5 : case 6 : case 7 : { { matchRange ( 4 , 7 ) ; } { _loop613 : do { if ( ( ( LA ( 1 ) >= 0 && LA ( 1 ) <= 9 ) ) && ( true ) && ( true ) && ( true ) && ( true ) ) { mDIGIT ( false ) ; } else { break _loop613 ; } } while ( true ) ; } break ; } case x : { match ( x ) ; { int _cnt615 = 0 ; _loop615 : do { if ( ( ( LA ( 1 ) >= 0 && LA ( 1 ) <= 9 ) ) && ( true ) && ( true ) && ( true ) && ( true ) ) { mDIGIT ( false ) ; } else if ( ( ( LA ( 1 ) >= a && LA ( 1 ) <= f ) ) && ( true ) && ( true ) && ( true ) && ( true ) ) { matchRange ( a , f ) ; } else if ( ( ( LA ( 1 ) >= A && LA ( 1 ) <= F ) ) && ( true ) && ( true ) && ( true ) && ( true ) ) { matchRange ( A , F ) ; } else { if ( _cnt615 >= 1 ) { break _loop615 ; } else { throw new NoViableAltForCharException ( ( char ) LA ( 1 ) , getFilename ( ) , getLine ( ) , getColumn ( ) ) ; } } _cnt615 ++ ; } while ( true ) ; } break ; } default : if ( ( _tokenSet_4 . member ( LA ( 1 ) ) ) ) { { match ( _tokenSet_4 ) ; } } else { throw new NoViableAltForCharException ( ( char ) LA ( 1 ) , getFilename ( ) , getLine ( ) , getColumn ( ) ) ; } } } if ( _createToken && _token == null && _ttype != Token . SKIP ) { _token = makeToken ( _ttype ) ; _token . setText ( new String ( text . getBuffer ( ) , _begin , text . length ( ) - _begin ) ) ; } _returnToken = _token ; }
te	KEY	public double real ( ) { return re ; }
te	IDF	public Iterator < Map . Entry < Key , Val >> iterator ( ) { return FHashMap . this . iterator ( ) ; }
te	IDF	public void testIllegalCharacters ( ) { System . out . println ( "\nStarting testIllegalCharacters: users" ) ; try { new User ( "RegularName" ) ; } catch ( IllegalArgumentException iae ) { fail ( "iae not expected." ) ; } try { new User ( "NumbersWithinName3350" ) ; } catch ( IllegalArgumentException iae ) { fail ( "iae not expected." ) ; } try { new User ( "#BestUserNameEver" ) ; fail ( "iae expected." ) ; } catch ( IllegalArgumentException iae ) { } try { new User ( "Hello World" ) ; fail ( "iae expected." ) ; } catch ( IllegalArgumentException iae ) { } try { new User ( "@!#$%^&*(&^%$&*(^%$&%$" ) ; fail ( "iae expected." ) ; } catch ( IllegalArgumentException iae ) { } try { User newUser = new User ( "ThisIsAValidUserName" ) ; newUser . setUserName ( "#This&ISNOTAVALID" ) ; fail ( "iae expected." ) ; } catch ( IllegalArgumentException iae ) { } System . out . println ( "Finished testIllegalCharacters: users" ) ; }
te	IDF	@ Override public void run ( ) { while ( ! isInterrupted ( ) ) { try { final DatagramPacket packet = new DatagramPacket ( new byte [ 1024 ] , 1024 ) ; socket . receive ( packet ) ; InetAddress address = packet . getAddress ( ) ; int len = packet . getLength ( ) ; byte [ ] data = packet . getData ( ) ; if ( ! ClientManager . getInstance ( ) . contains ( address ) ) { System . err . println ( "Chatmesage from unknown/unidentified user." ) ; } String message = new String ( data , 0 , len ) ; int splitPoint = message . indexOf ( : ) ; final String username = message . substring ( 0 , splitPoint ) ; final String chatMessage = message . substring ( splitPoint + 1 ) ; Manager . getInstance ( ) . publishTask ( new Task ( ) { @ Override public TaskAction getAction ( ) { return TaskAction . RUSER_NEWMESSAGE ; } @ Override public HashMap < String , String > getParameters ( ) { HashMap < String , String > params = new HashMap < String , String > ( ) ; params . put ( "username" , username ) ; params . put ( "message" , chatMessage ) ; return params ; } } ) ; } catch ( IOException e ) { interrupt ( ) ; e . printStackTrace ( ) ; } } }
te	IDF	public Rol ( long id , String naam ) { this . id = id ; this . naam = naam ; this . permissies = new ArrayList < Permissie > ( ) ; }
te	KEY	public int [ ] getArrTilesCount ( ) { return arrTilesCount ; }
te	IDF	public SpawnField ( String spriteRef , int id ) { super ( spriteRef , id ) ; }
te	IDF	public boolean applyTechniqueCandidateLines ( ) { int puzzleLineLength = getSize ( ) ; int blockLineLength = ( int ) Math . sqrt ( ( double ) getSize ( ) ) ; try { for ( int currentBlock = 0 ; currentBlock < this . getSize ( ) ; currentBlock ++ ) { int blockFirstElement = currentBlock * blockLineLength + ( int ) Math . floor ( currentBlock / blockLineLength ) * 2 * puzzleLineLength ; int [ ] numOfLinesInWhichAGivenValueIsFound = new int [ getSize ( ) ] ; int [ ] lineInWhichAGivenValueWasLastEncountered = new int [ getSize ( ) ] ; for ( int value = 1 ; value <= getSize ( ) ; value ++ ) { numOfLinesInWhichAGivenValueIsFound [ value - 1 ] = 0 ; lineInWhichAGivenValueWasLastEncountered [ value - 1 ] = - 1 ; } for ( int row = 0 ; row < blockLineLength ; row ++ ) { int rowFirstElement = blockFirstElement + puzzleLineLength * row ; int rowLastElement = rowFirstElement + blockLineLength - 1 ; HashSet < Integer > potentialValuesInThisBlockRow = new HashSet < Integer > ( ) ; for ( int position = rowFirstElement ; position <= rowLastElement ; position ++ ) { if ( getElementWithNumber ( position ) == EMPTY_ELEMENT_VALUE ) { potentialValuesInThisBlockRow . addAll ( validElementsCache . get ( position ) ) ; } else { potentialValuesInThisBlockRow . remove ( getElementWithNumber ( position ) ) ; } } for ( int value = 1 ; value <= getSize ( ) ; value ++ ) { if ( potentialValuesInThisBlockRow . contains ( value ) ) { numOfLinesInWhichAGivenValueIsFound [ value - 1 ] ++ ; lineInWhichAGivenValueWasLastEncountered [ value - 1 ] = row ; } } } for ( int value = 1 ; value <= getSize ( ) ; value ++ ) { if ( numOfLinesInWhichAGivenValueIsFound [ value - 1 ] == 1 ) { int rowToEliminate = lineInWhichAGivenValueWasLastEncountered [ value - 1 ] ; int rowFirstElement = blockFirstElement ; while ( rowFirstElement % puzzleLineLength != 0 ) { rowFirstElement -- ; } rowFirstElement += puzzleLineLength * rowToEliminate ; boolean atLeastOneCandidateRemoved = false ; for ( int position = rowFirstElement ; position < rowFirstElement + puzzleLineLength ; position ++ ) { if ( position % puzzleLineLength < blockFirstElement % puzzleLineLength || position % puzzleLineLength > ( blockFirstElement % puzzleLineLength ) + blockLineLength - 1 ) { if ( getElementWithNumber ( position ) == EMPTY_ELEMENT_VALUE && validElementsCache . get ( position ) . contains ( value ) ) { atLeastOneCandidateRemoved = true ; removeValueForElementWithNumber ( position , value ) ; } } } if ( atLeastOneCandidateRemoved ) { return true ; } } } for ( int value = 1 ; value <= getSize ( ) ; value ++ ) { numOfLinesInWhichAGivenValueIsFound [ value - 1 ] = 0 ; lineInWhichAGivenValueWasLastEncountered [ value - 1 ] = - 1 ; } for ( int col = 0 ; col < blockLineLength ; col ++ ) { int colFirstElement = blockFirstElement + col ; int colLastElement = colFirstElement + puzzleLineLength * ( blockLineLength - 1 ) ; HashSet < Integer > potentialValuesInThisBlockCol = new HashSet < Integer > ( ) ; for ( int position = colFirstElement ; position <= colLastElement ; position += puzzleLineLength ) { if ( getElementWithNumber ( position ) == EMPTY_ELEMENT_VALUE ) { potentialValuesInThisBlockCol . addAll ( validElementsCache . get ( position ) ) ; } else { potentialValuesInThisBlockCol . remove ( getElementWithNumber ( position ) ) ; } } for ( int value = 1 ; value <= getSize ( ) ; value ++ ) { if ( potentialValuesInThisBlockCol . contains ( value ) ) { numOfLinesInWhichAGivenValueIsFound [ value - 1 ] ++ ; lineInWhichAGivenValueWasLastEncountered [ value - 1 ] = col ; } } } for ( int value = 1 ; value <= getSize ( ) ; value ++ ) { if ( numOfLinesInWhichAGivenValueIsFound [ value - 1 ] == 1 ) { int colToEliminate = lineInWhichAGivenValueWasLastEncountered [ value - 1 ] ; int colFirstElement = ( currentBlock % blockLineLength ) * blockLineLength + colToEliminate ; boolean atLeastOneCandidateRemoved = false ; for ( int position = colFirstElement ; position < puzzleLineLength * puzzleLineLength ; position += puzzleLineLength ) { if ( position < blockFirstElement || position > blockFirstElement + puzzleLineLength * ( blockLineLength - 1 ) + blockLineLength - 1 ) { if ( getElementWithNumber ( position ) == EMPTY_ELEMENT_VALUE && validElementsCache . get ( position ) . contains ( value ) ) { atLeastOneCandidateRemoved = true ; removeValueForElementWithNumber ( position , value ) ; } } } if ( atLeastOneCandidateRemoved ) { return true ; } } } } return false ; } catch ( Exception e ) { return false ; } }
te	IDF	public static Point randPerimeter ( Rectangle r ) { if ( r . height <= 1 ) { return randPoint ( r ) ; } int perimeter = ( 2 * r . width ) + ( 2 * ( r . height - 2 ) ) ; int index = randInt ( perimeter - 1 ) ; if ( index < r . width ) { return new Point ( r . x + index , r . y ) ; } else if ( index < ( r . width + r . height - 2 ) ) { return new Point ( r . x , r . y + 1 + ( index - r . width ) ) ; } else if ( index < ( r . width + 2 * ( r . height - 2 ) ) ) { return new Point ( r . x + r . width - 1 , r . y + 1 + ( index - ( r . width + ( r . height - 2 ) ) ) ) ; } else if ( index < perimeter ) { return new Point ( r . x + ( index - ( r . width + 2 * ( r . height - 2 ) ) ) , r . y + r . height - 1 ) ; } return null ; }
te	KEY	private boolean less ( int i , int j ) { return this . elements [ i ] < this . elements [ j ] ; }
te	KEY	@ AfterClass public static void tearDownClass ( ) { }
te	IDF	public boolean associateDeveloperWithCell ( JavaCell jc ) { int index = indexWithNoDeveloper ( ) ; if ( index > - 1 ) { developersArray [ indexWithNoDeveloper ( ) ] . setLocation ( jc ) ; jc . setDeveloper ( ) ; return true ; } return false ; }
te	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { viewtweetsBtnActionPerformed ( evt ) ; }
te	KEY	public String getRawValue ( ) { return this . rawValue ; }
te	IDF	private void repaintCards ( ) { cardsPanel . removeAll ( ) ; for ( int i = 0 ; i < game . getTurnCards ( ) . size ( ) ; i ++ ) cardsPanel . add ( new GameCardComponent ( game . getTurnCards ( ) . get ( i ) ) ) ; }
te	KEY	public double optDouble ( int index ) { return this . optDouble ( index , double . NaN ) ; }
te	KEY	public Teacher makeTeacher ( ) { return new Teacher ( ) ; }
te	IDF	public static String getTimeToMonth ( ) { SimpleDateFormat dateFormat = new SimpleDateFormat ( dateFormatToMonth ) ; return dateFormat . format ( new Date ( ) ) ; }
te	KEY	public boolean isError ( ) ;
te	IDF	private JComponent createControlPanel ( ) { controlPanel = new ControlPanel ( ) { protected void onSpeedChange ( int value ) { playTimer . setDelay ( 1 + ( 100 - value ) * 10 ) ; } protected void onStepChange ( int value ) { timeStep = value ; } protected void onZoomChange ( int value ) { gamePanel . setZoom ( value ) ; } } ; addBorder ( controlPanel , Strings . PANEL_CONTROL ) ; return controlPanel ; }
te	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { generatePDFjButtonActionPerformed ( evt ) ; }
te	KEY	public String getTableName ( ) { return "socialnetwork.profile" ; }
te	IDF	public String getNick ( ) { return ( player . getNick ( ) ) ; }
te	KEY	public int getScore ( ) { return score ; }
te	IDF	public Missiles ( Board board , Player owner , Position position ) { super ( board , "Missiles" , "MS" , owner , position ) ; _cost = 12000 ; _unitType = UnitType . LAND ; _movementType = MovementType . TIRES ; _moveRange = 4 ; _maxFuel = 50 ; _visionDefault = 5 ; _weaponPrimary = new Weapon ( 6 , 3 , 5 ) ; _pieceTypeProperty = new SimpleStringProperty ( _unitType . toString ( ) ) ; }
te	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { jTextField1ActionPerformed ( evt ) ; }
te	IDF	public void deleteById ( String id , String sqlId ) throws DBException { try { this . getSqlMapClientTemplate ( ) . delete ( sqlId , id ) ; } catch ( DataAccessException e ) { throw new DBException ( e . getMessage ( ) ) ; } }
te	IDF	ScaleFilter init ( PathConsumer2D out , float sx , float sy , float tx , float ty ) { this . out = out ; this . sx = sx ; this . sy = sy ; this . tx = tx ; this . ty = ty ; return this ; }
te	KEY	public TMXLoader ( ) { super ( ) ; }
te	KEY	public void disposePanel ( ) { }
te	KEY	public final Type getType ( ) { return _type ; }
te	KEY	public double getX ( ) { return X ; }
te	IDF	public InputConnector ( String name , Component . Position pos ) { this . name = name ; this . pos = pos ; }
te	KEY	public boolean isClear ( ) { if ( ! spawns . isEmpty ( ) ) { return false ; } for ( EDFEnemy enemy : spawnedEnemies ) { if ( ! enemy . isDisposed ( ) ) { return false ; } } return true ; }
te	KEY	public int size ( ) ;
te	IDF	@ Test public void test ( ) { ListNode a0 = new ListNode ( 1 ) ; ListNode a1 = new ListNode ( 1 ) ; ListNode a2 = new ListNode ( 2 ) ; a0 . next = a1 ; a1 . next = a2 ; ListNode head = deleteDuplicates ( a0 ) ; System . out . println ( head . toCommaString ( ) ) ; }
te	IDF	protected void forward ( String destination , HttpServletRequest req , HttpServletResponse resp ) throws ServletException , IOException { RequestDispatcher dispatcher = req . getRequestDispatcher ( destination ) ; dispatcher . forward ( req , resp ) ; }
te	KEY	public Turn ( ) { }
te	IDF	public static byte [ ] append ( byte [ ] a1 , byte [ ] a2 ) { byte [ ] result = new byte [ a1 . length + a2 . length ] ; System . arraycopy ( a1 , 0 , result , 0 , a1 . length ) ; System . arraycopy ( a2 , 0 , result , a1 . length , a2 . length ) ; return result ; }
te	KEY	public void incrementThreeSpaceTiles ( ) { threeSpaceTiles ++ ; }
te	KEY	public boolean isGameOver ( ) { return gameOver ; }
te	KEY	public User ( ) { }
te	IDF	public boolean partieTermine ( ) { int nombreDePerdants = 0 ; for ( int i = 0 ; i < joueurs . size ( ) ; i ++ ) if ( joueurs . get ( i ) . aPerdu ( ) ) nombreDePerdants ++ ; return ( nombreDePerdants >= joueurs . size ( ) - 1 ) ; }
te	IDF	public RotateShootingCharacter ( ShootingScene scene , float power , float hp ) { super ( scene , power , hp ) ; }
te	KEY	public void act ( ) { setUp ( ) ; }
te	KEY	public boolean isSavingImages ( ) { return saveImages ; }
te	IDF	public boolean wordBreak ( String s , Set < String > dict ) { cache . clear ( ) ; return wordBreakDFS ( s , dict ) ; }
te	KEY	public int getYears ( ) { return years ; }
te	IDF	private void mutateFloor ( Random random , int height ) { this . floor = Math . min ( this . floor - ( random . nextInt ( 3 ) - 1 ) , height - 1 ) ; }
te	IDF	MessageType election ( String name ) throws DeadNodeException ;
te	IDF	public static byte [ ] decode ( String s , int options ) throws java . io . IOException { if ( s == null ) { throw new NullPointerException ( "Input string was null." ) ; } byte [ ] bytes ; try { bytes = s . getBytes ( PREFERRED_ENCODING ) ; } catch ( java . io . UnsupportedEncodingException uee ) { bytes = s . getBytes ( ) ; } bytes = decode ( bytes , 0 , bytes . length , options ) ; boolean dontGunzip = ( options & DONT_GUNZIP ) != 0 ; if ( ( bytes != null ) && ( bytes . length >= 4 ) && ( ! dontGunzip ) ) { int head = ( ( int ) bytes [ 0 ] & ff ) | ( ( bytes [ 1 ] << 8 ) & ff00 ) ; if ( java . util . zip . GZIPInputStream . GZIP_MAGIC == head ) { java . io . ByteArrayInputStream bais = null ; java . util . zip . GZIPInputStream gzis = null ; java . io . ByteArrayOutputStream baos = null ; byte [ ] buffer = new byte [ 2048 ] ; int length = 0 ; try { baos = new java . io . ByteArrayOutputStream ( ) ; bais = new java . io . ByteArrayInputStream ( bytes ) ; gzis = new java . util . zip . GZIPInputStream ( bais ) ; while ( ( length = gzis . read ( buffer ) ) >= 0 ) { baos . write ( buffer , 0 , length ) ; } bytes = baos . toByteArray ( ) ; } catch ( java . io . IOException e ) { e . printStackTrace ( ) ; } finally { try { baos . close ( ) ; } catch ( Exception e ) { } try { gzis . close ( ) ; } catch ( Exception e ) { } try { bais . close ( ) ; } catch ( Exception e ) { } } } } return bytes ; }
te	IDF	@ Override public PreparedStatement createPreparedStatement ( Connection connection ) throws SQLException { String sql = "INSERT INTO sitestat (uniquevisitor  pageview  visit  hour video  site_id) VALUES (?  ?  ?  ? ?  ?)" ; PreparedStatement ps = connection . prepareStatement ( sql , Statement . RETURN_GENERATED_KEYS ) ; ps . setInt ( 1 , model . getUniqueVisitor ( ) ) ; ps . setInt ( 2 , model . getPageView ( ) ) ; ps . setInt ( 3 , model . getVisit ( ) ) ; ps . setLong ( 4 , model . getHour ( ) . getMillis ( ) ) ; ps . setLong ( 5 , model . getVideo ( ) ) ; ps . setLong ( 6 , model . getSite ( ) . getId ( ) ) ; return ps ; }
te	KEY	public boolean isAutoLogin ( ) { return autoLogin ; }
te	KEY	public SetLeftHardLimitOffCommand ( ) { }
te	KEY	public float getMoveSpeedDE ( ) { return moveSpeedDE ; }
te	KEY	public void run ( ) { new MainBoard ( ) . setVisible ( true ) ; }
te	KEY	public int getNumOfLayers ( ) { return this . layers . size ( ) ; }
te	KEY	public boolean isRequest ( ) { return true ; }
te	KEY	public void levelWon ( ) { levelWon = true ; }
te	KEY	public List < double > getClassificaitons ( ) { return classificationList ; }
te	KEY	@ Override public void execute ( ) { }
te	KEY	public String getPreparedStatementFct ( ) { return this . preparedStatement ; }
te	IDF	public static Keyword getSensitiveWord ( String append , String pre , Map < String , Map > nextWordsTree , String text ) { if ( nextWordsTree == null || nextWordsTree . isEmpty ( ) ) { return null ; } Map < String , Object > endTag = nextWordsTree . get ( StopCharacter . TREE_END_TAG ) ; if ( StringUtils . isEmpty ( text ) ) { if ( endTag != null ) { return checkPattern ( getKeyword ( append , endTag ) , pre , null ) ; } else { return null ; } } String next = text . substring ( 0 , 1 ) ; String suffix = null ; if ( text . length ( ) > 0 ) { suffix = text . substring ( 0 , 1 ) ; } Map < String , Map > nextTree = nextWordsTree . get ( next ) ; if ( endTag == null ) { if ( nextTree != null && nextTree . size ( ) > 0 ) { return getSensitiveWord ( append + next , pre , nextTree , text . substring ( 1 ) ) ; } else { return null ; } } else { Keyword tmp = null ; if ( nextTree != null && nextTree . size ( ) > 0 ) { tmp = getSensitiveWord ( append + next , pre , nextTree , text . substring ( 1 ) ) ; if ( tmp == null ) { tmp = getKeyword ( append , endTag ) ; } return checkPattern ( tmp , pre , suffix ) ; } else { return checkPattern ( getKeyword ( append , endTag ) , pre , suffix ) ; } } }
te	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { ButtonSaveEditActionPerformed ( evt ) ; }
te	KEY	public double value ( double x ) ;
te	IDF	public RadioButtonPanel ( final RadioButton radioButtonQuestionData , final Statistics session ) { super ( ( AbstractQuestion ) radioButtonQuestionData , session ) ; _radioButtonQuestionData = radioButtonQuestionData ; _springLayout = new SpringLayout ( ) ; _questionPanel = new JPanel ( _springLayout ) ; this . addPanel ( ) ; }
te	IDF	@ Test public void testProfileCrudUsingCard ( ) throws BeanstreamApiException { String profileId = null ; try { Address billing = getTestCardValidAddress ( ) ; Card card = getTestCard ( ) ; ProfileResponse createdProfile = beanstream . profiles ( ) . createProfile ( card , billing ) ; profileId = createdProfile . getId ( ) ; assert . assertNotNull ( "Test failed because it should create the profile and return a valid id" , profileId ) ; PaymentProfile paymentProfile = beanstream . profiles ( ) . getProfileById ( profileId ) ; assert . assertEquals ( "billing address assinged does not matches with the one sent at creation time" , paymentProfile . getBilling ( ) , billing ) ; assert . assertNotNull ( "Credit card was not in the response" , paymentProfile . getCard ( ) ) ; assert . assertTrue ( "The default lenguage should be english" , "en" . equals ( paymentProfile . getLanguage ( ) ) ) ; paymentProfile . setLanguage ( "fr" ) ; paymentProfile . setComments ( "test updating profile sending billing info only" ) ; beanstream . profiles ( ) . updateProfile ( paymentProfile ) ; paymentProfile = beanstream . profiles ( ) . getProfileById ( profileId ) ; assert . assertEquals ( "Language was updated to Francais" , paymentProfile . getLanguage ( ) , "fr" ) ; beanstream . profiles ( ) . deleteProfileById ( profileId ) ; try { beanstream . profiles ( ) . getProfileById ( profileId ) ; assert . fail ( "This profile was deleted  therefore should throw an exception" ) ; } catch ( BeanstreamApiException e ) { profileId = null ; } } catch ( BeanstreamApiException ex ) { assert . fail ( "Test can not continue  " + ex . getMessage ( ) ) ; } catch ( Exception ex ) { assert . fail ( "unexpected exception occur  test can not continue" ) ; } finally { if ( profileId != null ) { ProfileResponse response = beanstream . profiles ( ) . deleteProfileById ( profileId ) ; } } }
te	IDF	public BeanRootNode ( MutableTreeNode parent , NodeType type , String name , class < ? > objType , Object obj ) { super ( parent , type , name , objType , obj , null , null ) ; }
te	IDF	private JMenuItem createItem ( String action , String label ) { JMenuItem item = new JMenuItem ( label ) ; item . addActionListener ( factory . createAction ( action ) ) ; return item ; }
te	KEY	private void InitializeComponents ( ) { this . setAdditionalComments ( new LabeledTextField ( "Additional Comments" , 30 ) ) ; this . optoutNotice = new JLabel ( "Occasionally  the Alliance sends notices about upcoming events and advocacy opportunities." ) ; this . setOptout ( new JCheckBox ( "If you would NOT like to receive this information  check this box." ) ) ; }
te	IDF	private void remplirStockComboBox ( ) { listStock = stockDAO . findAll ( ) ; for ( Stock stock : listStock ) { libelleVetjComboBox1 . addItem ( stock . getId ( ) ) ; } }
te	IDF	private Element toolToElement ( TIPPTool tool , Document doc ) { Element toolEl = doc . createElement ( TOOL ) ; appendElementChildWithText ( doc , toolEl , ContributorTool . NAME , tool . getName ( ) ) ; appendElementChildWithText ( doc , toolEl , ContributorTool . ID , tool . getId ( ) ) ; appendElementChildWithText ( doc , toolEl , ContributorTool . VERSION , tool . getVersion ( ) ) ; return toolEl ; }
te	IDF	public ButtonPanel ( ) { setBorder ( BorderFactory . createEtchedBorder ( ) ) ; setLayout ( new MigLayout ( ) ) ; initFileChooser ( ) ; initButtons ( ) ; }
te	KEY	public int getType ( ) { return type ; }
te	IDF	public InvalidFileTypeException ( String message ) { super ( message ) ; }
te	IDF	public NotaFiscalResource ( URL wsdlLocation , WebServiceFeature ... features ) { super ( wsdlLocation , SERVICE , features ) ; }
te	IDF	private void emonthMBItemStateChanged ( java . awt . event . ItemEvent evt ) { int month = CalendarHandler . monthNumber ( emonthMB . getSelectedItem ( ) . toString ( ) ) ; int year = Integer . parseInt ( eyearMB . getSelectedItem ( ) . toString ( ) ) ; fillEndDayBoxes ( month , year ) ; }
te	KEY	public static PointEvent singleHitInner ( int number ) { return new HitEvent ( number , false ) ; }
te	KEY	public int getColumn ( ) { return yycolumn + 1 ; }
te	KEY	public synchronized void xsetR2RepeatDelay ( int a ) { r2RD = a ; }
te	KEY	public ScreensController ( ) { super ( ) ; }
te	IDF	public GestionServicio ( ) { Conexion . GetInstancia ( ) . CadenaConexion ( ) ; }
te	KEY	public JTextField [ ] getPlayerNames ( ) { return this . playerNames ; }
te	KEY	public static DBBuilder getInstance ( ) { if ( instance == null ) { instance = new DBBuilder ( ) ; } return instance ; }
te	IDF	public int getTop ( TBlock blk ) { int xLeft = blk . getLeftX ( ) ; int range = blk . getSqNum_Width ( ) ; return getTop ( xLeft , range , blk ) ; }
te	IDF	@ Override protected TaskAction getListenAction ( ) { return TaskAction . CONNECT_FAILED ; }
te	KEY	public Name ( ) { }
te	KEY	public int getFamePoints ( ) { return famePoints ; }
te	KEY	public Bouton getBoutonValider ( ) { return this . bouton_valider ; }
te	IDF	@ Before public void setUp ( ) { String keyIdString = System . getProperty ( "remote.keyID" , null ) ; if ( keyIdString != null ) { keyID = Integer . parseInt ( keyIdString ) ; } assert . assertNotNull ( "Key ID not specified. Please set up keyID using -Dremote.keyID on command line" , keyID ) ; vCode = System . getProperty ( "remote.vCode" , null ) ; assert . assertNotNull ( "Verification code not found. Please set verification code using -Dremote.vCode on command line" , vCode ) ; keyIdString = System . getProperty ( "remote.charID" , null ) ; if ( keyIdString != null ) { characterID = long . parseLong ( keyIdString ) ; } assert . assertNotNull ( "Key ID not specified. Please set up keyID using -Dremote.charID on command line" , characterID ) ; }
te	KEY	@ Override protected void decodeEnd ( ) { }
te	IDF	public String toString ( ) { return "Tir sur " + joueur . toString ( ) + " \u00E0 la position " + position . toString ( ) ; }
te	KEY	public void testApp ( ) { assertTrue ( true ) ; }
te	IDF	public final synchronized Rectangle2D getBounds2D ( ) { double x1 , y1 , x2 , y2 ; int i = numCoords ; if ( i > 0 ) { y1 = y2 = doubleCoords [ -- i ] ; x1 = x2 = doubleCoords [ -- i ] ; while ( i > 0 ) { double y = doubleCoords [ -- i ] ; double x = doubleCoords [ -- i ] ; if ( x < x1 ) x1 = x ; if ( y < y1 ) y1 = y ; if ( x > x2 ) x2 = x ; if ( y > y2 ) y2 = y ; } } else { x1 = y1 = x2 = y2 = 0.0 ; } return new Rectangle2D . double ( x1 , y1 , x2 - x1 , y2 - y1 ) ; }
te	IDF	public double Squaredl2NormUnsafe ( ) { if ( l2Vec == null || l2Vec . length < nRows ) l2Vec = new double [ nRows ] ; double sum = 0 ; for ( int i = 0 ; i < size ; ++ i ) l2Vec [ x [ i ] ] += va [ i ] ; for ( int i = 0 ; i < size ; ++ i ) { sum += l2Vec [ x [ i ] ] * l2Vec [ x [ i ] ] ; l2Vec [ x [ i ] ] = 0 ; } return sum ; }
te	IDF	public String getDescByCode ( String acode ) { return ( getDescByCode ( CAppConsts . TagNoValue , acode ) ) ; }
te	KEY	public long getSelected ( ) { return selected ; }
te	KEY	public void setMaxRows ( int maxRows ) ;
te	IDF	@ Override public String throwMsg ( ) { return "The " + decoratedFood . getName ( ) + " hits the floor with a splat!" ; }
te	IDF	protected INDIBLOBElementAndValue ( INDIBLOBElement element , INDIBLOBValue value ) { this . element = element ; this . value = value ; }
te	IDF	private AVLNode rotateLeftRight ( AVLNode parent ) { AVLNode parentNode = parent ; AVLNode current = ( AVLNode ) parentNode . left ; AVLNode moveToTop = ( AVLNode ) current . right ; AVLNode LRL = ( AVLNode ) moveToTop . left ; AVLNode LRR = ( AVLNode ) moveToTop . right ; if ( parent . parent == null ) { this . overallRoot = moveToTop ; ; moveToTop . parent = null ; } else if ( parent . parent . left == parent ) { parent . parent . left = moveToTop ; moveToTop . parent = parent . parent ; } else { parent . parent . right = moveToTop ; moveToTop . parent = parent . parent ; } current . right = LRL ; if ( LRL != null ) { LRL . parent = current ; } parent . left = LRR ; if ( LRR != null ) { LRR . parent = parent ; } moveToTop . left = current ; moveToTop . right = parent ; current . parent = moveToTop ; parent . parent = moveToTop ; return moveToTop ; }
te	KEY	public String hungerText ( ) { if ( nutrition >= 4000 ) return "Oversatiated" ; else if ( nutrition >= 2000 ) return "Satiated" ; else if ( nutrition >= 1200 ) return "Not Hungry" ; else if ( nutrition >= 600 ) return "Hungry" ; else if ( nutrition >= 0 ) return "Weak" ; else if ( nutrition > - 600 ) return "Starving" ; else return "Starved" ; }
te	IDF	public String getLoggedInUserProfileFullName ( ) { return this . get ( Profile . FULL_NAME ) ; }
te	IDF	@ Override public void setPrevios ( LinkedQuery previous ) { this . prev = previous ; }
te	IDF	public void setSpriteMap ( SpriteTemplate [ ] [ ] spriteTemplates ) { this . spriteTemplates = spriteTemplates ; }
te	KEY	public abstract void init ( ) ;
te	IDF	@ Override public String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( "{" ) ; ListNode iter = this ; while ( iter != null ) { sb . append ( iter . val ) . append ( " " ) ; iter = iter . next ; } sb . deleteCharAt ( sb . length ( ) - 1 ) . append ( "}" ) ; return sb . toString ( ) ; }
te	IDF	public static Object [ ] [ ] highScoreTable ( int i ) { IPlayer [ ] matt = new IPlayer [ i ] ; DBInteraction dbIter = new DBInteraction ( ) ; matt = dbIter . getHighestScorers ( i ) ; HighScore hs = new HighScore ( ) ; Object [ ] [ ] data = new Object [ i ] [ 2 ] ; for ( int k = 0 ; k < data . length ; k ++ ) { if ( matt [ k ] != null ) { data [ k ] [ 0 ] = matt [ k ] . getName ( ) ; data [ k ] [ 1 ] = hs . getScore ( matt [ k ] ) ; } } return data ; }
te	KEY	public void setTotalCosts ( double totalCosts ) { this . totalCosts = totalCosts ; }
te	KEY	private boolean isGameGoingOn ( ) { return currentGame != null ; }
te	IDF	public ExpRel ( Expressao esq , Expressao dir ) { this . esq = esq ; this . dir = dir ; }
te	IDF	private boolean containsDeviceInfo ( DeviceInfo deviceinfo ) { EntityManager mgr = getEntityManager ( ) ; boolean contains = true ; try { DeviceInfo item = mgr . find ( DeviceInfo . class , deviceinfo . getDeviceRegistrationID ( ) ) ; if ( item == null ) { contains = false ; } } finally { mgr . close ( ) ; } return contains ; }
te	IDF	private HitEvent ( int base , int multi , boolean outer ) { this . time = System . currentTimeMillis ( ) ; this . base = base ; this . multi = multi ; this . outerRing = outer ; }
te	IDF	@ Override public HashMap < String , String > getParameters ( ) { return userList ; }
te	IDF	private void processGetProperties ( Element xml ) { if ( ! xml . hasAttribute ( "version" ) ) { printMessage ( "getProperties: no version specified\n" ) ; return ; } if ( xml . hasAttribute ( "device" ) ) { String deviceName = xml . getAttribute ( "device" ) . trim ( ) ; if ( deviceName . compareTo ( deviceName ) != 0 ) { return ; } } if ( xml . hasAttribute ( "name" ) ) { String propertyName = xml . getAttribute ( "name" ) ; INDIProperty p = getProperty ( propertyName ) ; if ( p != null ) { sendDefXXXVectorMessage ( p , null ) ; } } else { sendAllProperties ( ) ; } }
te	IDF	public void open ( File file ) { if ( file == null ) { System . out . printf ( "File is empty!\n" ) ; return ; } this . fileName = file ; try { fw = new FileWriter ( file ) ; } catch ( IOException e ) { System . out . printf ( "Cannot access file %s!\n" , file ) ; } if ( fw != null ) { bw = new BufferedWriter ( fw ) ; } }
te	IDF	EnumSet < Sovereignty > getSovereignty ( ) { EnumSet < Sovereignty > result = EnumSet . noneOf ( Sovereignty . class ) ; Sovereignty [ ] sovereigntyArray = Sovereignty . values ( ) ; for ( int i = 0 ; i < sovereigntyCheckBoxes . length ; i ++ ) { JCheckBox checkBox = sovereigntyCheckBoxes [ i ] ; if ( checkBox . isSelected ( ) ) { result . add ( sovereigntyArray [ i ] ) ; } } return result ; }
te	KEY	public double getEps ( ) { return eps ; }
te	KEY	public void setNodata ( boolean nodata ) ;
te	KEY	private boolean isInRightRange ( final int x ) { if ( x > screen . getScreenWidth ( ) - clickableRange ) { return true ; } return false ; }
te	IDF	String getEquipmentCode ( ) ;
te	KEY	public HiloBean ( ) { }
te	KEY	@ Override public double getCenterX ( ) { return centerX ; }
te	KEY	public void setBaseDamage ( int baseDamage ) { this . baseDamage = baseDamage ; }
te	KEY	public int getId ( ) { return id ; }
te	IDF	@ Override protected void performInitialUpdate ( PacketListener listener ) { }
te	KEY	public boolean temNoFilho ( ) { if ( this . temNoPai ( ) ) { if ( this . getListaAdjacencia ( ) . size ( ) > 2 ) return true ; } else { if ( this . getListaAdjacencia ( ) . size ( ) > 1 ) return true ; } return false ; }
te	IDF	@ Override public void actionPerformed ( ActionEvent e ) { String name = custNameTxt . getText ( ) ; if ( ! name . isEmpty ( ) ) { JOptionPane . showMessageDialog ( View . this , "Dodano" , "Dodano" , JOptionPane . INFORMATION_MESSAGE ) ; fireCategoryEvent ( new CategoryEvent ( name , "kategorie" , 0 , "add" ) ) ; } else { JOptionPane . showMessageDialog ( View . this , "Uzupe\u0142nij pole" , "Uzupe\u0142nij pole" , JOptionPane . WARNING_MESSAGE ) ; } }
te	KEY	public Signup createSignup ( ) { return new Signup ( ) ; }
te	IDF	public boolean accept ( File file ) { return ! file . isHidden ( ) ; }
te	IDF	public int compare ( final OthelloCellCapturePath o1 , final OthelloCellCapturePath o2 ) { return o1 . captureCount ( ) - o2 . captureCount ( ) ; }
te	KEY	public void setHitpoints ( double hp ) { this . hitPoints = hp ; }
te	IDF	@ Override public void start ( ) { initialize ( ) ; container . deployModule ( System . getProperty ( "vertx.modulename" ) , new AsyncResultHandler < String > ( ) { @ Override public void handle ( AsyncResult < String > asyncResult ) { if ( asyncResult . failed ( ) ) { container . logger ( ) . error ( asyncResult . cause ( ) ) ; } assertTrue ( asyncResult . succeeded ( ) ) ; assertNotNull ( "deploymentID should not be null" , asyncResult . result ( ) ) ; startTests ( ) ; } } ) ; }
te	IDF	public static OrdenPinturaDetalle getOne ( int id ) throws SQLException { sql = "SELECT * " + "FROM OPINTURA_DETALLE " + "WHERE ID = " + Integer . toString ( id ) ; try ( ResultSet rs = ComunDP . getData ( sql ) ) { if ( rs != null && rs . next ( ) ) { return DbToObj ( rs ) ; } else { return null ; } } }
te	IDF	static void testTtfBuilder ( ) throws Exception { File file = new File ( "resources_test/test_set/Perpetua.ttf" ) ; System . out . println ( "Exists: " + file . getPath ( ) + ":  " + file . exists ( ) ) ; OtfTranslator metrics = new OtfTranslator ( file ) ; FileGarbage kill = new FileGarbage ( ) ; metrics . buildFont ( "whatever" , kill ) ; kill . empty ( ) ; }
te	KEY	@ Override public boolean isProcedimento ( ) { return this . isEqual ( PROCEDIMENTO ) ; }
te	IDF	private void printSwitching ( ) { printStart ( "Switch Variables" ) ; System . out . println ( "Time Spent Moving Right: " + convertTime ( totalRightTime ) + " (" + Math . round ( ( double ) convertTime ( totalRightTime ) / ( double ) convertTime ( totalTime ) * ( double ) 100 ) + "%)" ) ; System . out . println ( "Time Spent Moving Left: " + convertTime ( totalLeftTime ) + " (" + Math . round ( ( double ) convertTime ( totalLeftTime ) / ( double ) convertTime ( totalTime ) * ( double ) 100 ) + "%)" ) ; System . out . println ( "Time Spent Standing Still: " + ( convertTime ( totalTime ) - convertTime ( totalLeftTime ) - convertTime ( totalRightTime ) ) + " (" + Math . round ( ( double ) ( convertTime ( totalTime ) - convertTime ( totalLeftTime ) - convertTime ( totalRightTime ) ) / ( double ) convertTime ( totalTime ) * ( double ) 100 ) + "%)" ) ; printEnd ( ) ; }
te	IDF	private void addHelpMenu ( ) { JMenuBar jb = this . getJMenuBar ( ) ; if ( jb == null ) jb = new JMenuBar ( ) ; jb . add ( Help . makeHelpMenu ( ) ) ; this . setJMenuBar ( jb ) ; }
te	KEY	protected abstract void printMessageAndTime ( ) ;
te	IDF	@ Override public void execute ( String character , CommandContext commandContext ) { notifyNearbyCharacters ( character , commandContext ) ; }
te	KEY	public boolean hasNext ( ) { return list_it . hasNext ( ) ; }
te	IDF	@ Override public int hashCode ( ) { int hash = 0 ; hash += ( idproveedores != null ? idproveedores . hashCode ( ) : 0 ) ; return hash ; }
te	KEY	public void setSnakeScore ( int snakeScore ) { this . snakeScore = snakeScore ; }
te	IDF	public PaymentResponse voidPayment ( String paymentId , double amount ) throws BeanstreamApiException { Gateway . assertNotEmpty ( paymentId , "invalid paymentId" ) ; String url = getVoidPaymentUrl ( config . getPlatform ( ) , config . getVersion ( ) , paymentId ) ; JsonObject voidRequest = new JsonObject ( ) ; voidRequest . addProperty ( MERCHANT_ID_PARAM , String . valueOf ( config . getMerchantId ( ) ) ) ; voidRequest . addProperty ( AMOUNT_PARAM , String . valueOf ( amount ) ) ; String response = connector . ProcessTransaction ( HttpMethod . post , url , voidRequest ) ; return gson . fromJson ( response , PaymentResponse . class ) ; }
te	KEY	protected int getBogeys ( ) { return bogeys ; }
te	IDF	public static void main ( String [ ] args ) { try { GUIgestionEquipos dialog = new GUIgestionEquipos ( ) ; dialog . setDefaultCloseOperation ( JDialog . DISPOSE_ON_CLOSE ) ; dialog . setVisible ( true ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }
te	IDF	@ Test ( timeout = TIMEOUT ) public void testSortOneElementHS ( ) { Integer [ ] testArray = { 0 } ; Integer [ ] copyArray = { 0 } ; sorter . heapSort ( testArray , intcomp ) ; assertTrue ( "Testing heapSort for one element" , Arrays . equals ( testArray , copyArray ) ) ; }
te	KEY	public long getTime ( ) { return time ; }
te	IDF	public Collection < String > getPrimaryColumns ( String tableName ) { if ( tablesPrimaries == null ) { tablesPrimaries = new HashMap < String , Collection < String >> ( ) ; } Collection < String > primaries = tablesPrimaries . get ( tableName ) ; if ( primaries == null ) { primaries = loadPrimaryColumns ( tableName ) ; tablesPrimaries . put ( tableName , primaries ) ; } return primaries ; }
te	IDF	public void internalFrameClosing ( javax . swing . event . InternalFrameEvent evt ) { }
te	KEY	public int getCant_pack ( ) { return cant_pack ; }
te	IDF	public Object remove ( int index ) { Object o = this . opt ( index ) ; this . myArrayList . remove ( index ) ; return o ; }
te	KEY	protected EFPersistable getObject ( ) { return this . originalObject ; }
te	IDF	@ Override public void actionPerformed ( ActionEvent e ) { panel . editParams ( ) ; }
te	IDF	public TempQuery ( String id ) { this . id = id ; }
te	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { exitMenuItemActionPerformed ( evt ) ; }
te	IDF	@ Override public List < Integer > apply ( List < Integer > result , Integer input , AtomicBoolean reduced ) { result . add ( input ) ; return result ; }
te	KEY	public void setCanEqui_Entrega ( int CanEqui_Entrega ) { this . CanEqui_Entrega = CanEqui_Entrega ; }
te	KEY	public void close ( ) { if ( aSocket != null ) { aSocket . close ( ) ; } }
te	KEY	public int getId ( ) ;
te	KEY	public static void desconecta ( ) { if ( conexao != null ) { try { conexao . close ( ) ; conexao = null ; } catch ( Exception e ) { } } }
te	IDF	public static void log ( final Throwable exception ) { handleStatus ( exception . getMessage ( ) , exception , StatusManager . LOG , IStatus . ERROR ) ; }
te	KEY	public void setSessionEnded ( boolean sessionEnded ) { this . sessionEnded = sessionEnded ; }
te	IDF	@ Override public void setColor ( String color ) { this . color = color ; }
te	IDF	@ Test public void testIsFoldable ( ) { assertIsFoldable ( factory . createPattern ( LineType . MOUNTAIN , LineType . EMPTY , LineType . MOUNTAIN , LineType . EMPTY ) ) ; assertIsFoldable ( factory . createPattern ( LineType . MOUNTAIN , LineType . MOUNTAIN , LineType . MOUNTAIN , LineType . VALLEY ) ) ; }
te	IDF	public static void main ( String [ ] args ) { SimpleRemoteControl remote = new SimpleRemoteControl ( ) ; Light light = new Light ( ) ; GarageDoor garageDoor = new GarageDoor ( ) ; LightOnCommand lightOn = new LightOnCommand ( light ) ; GarageDoorOpenCommand garageOpen = new GarageDoorOpenCommand ( garageDoor ) ; remote . setCommand ( lightOn ) ; remote . buttonWasPressed ( ) ; remote . setCommand ( garageOpen ) ; remote . buttonWasPressed ( ) ; }
te	KEY	public void run ( ) { new Dialog ( null ) . setVisible ( true ) ; }
te	IDF	public Path deserialize ( String serialized ) ;
te	KEY	public void setUnitsInStock ( int unitsInStock ) { this . unitsInStock = unitsInStock ; }
te	IDF	public static String formatDate ( Calendar date , Locale locale ) { String result = "" ; SimpleDateFormat formatter ; String pattern ; if ( locale == null ) { formatter = new SimpleDateFormat ( ) ; pattern = formatter . toLocalizedPattern ( ) ; } else { formatter = ( SimpleDateFormat ) SimpleDateFormat . getDateInstance ( SimpleDateFormat . short , locale ) ; pattern = formatter . toPattern ( ) ; } pattern = pattern . substring ( 0 , pattern . lastIndexOf ( "y" ) + 1 ) ; while ( pattern . lastIndexOf ( "y" ) + 1 - pattern . indexOf ( "y" ) < 4 ) { pattern = pattern + "y" ; } formatter . applyPattern ( pattern ) ; if ( date != null ) { result = formatter . format ( date . getTime ( ) ) ; } else { throw new IllegalArgumentException ( ) ; } return result ; }
te	IDF	@ Test public void canSearchCategoryByName ( ) { CategoryDAO cd = new CategoryDAO ( ) ; CategoryModel retrieved = null ; try { retrieved = cd . searchCategoryByName ( categoryTest . getName ( ) ) ; } catch ( WebshopAppException e ) { e . printStackTrace ( ) ; fail ( "Exception" ) ; } assertEquals ( retrieved , categoryTest ) ; }
te	KEY	private Color getCaptionColor ( float hp ) { return new Color ( 255 , ( int ) ( hp * 17.5 ) , ( int ) ( hp * 17.5 ) ) ; }
te	KEY	public ParameterManager ( ) { this ( new ArrayList < Parameter > ( ) ) ; }
te	IDF	public void takeTurn ( ) { if ( ! alive ) { } else if ( playerJustEnteredLair ) { preparingToBreatheFire = true ; playerJustEnteredLair = false ; System . out . println ( "The Jabberwocky's eyes of flame light up as it senses you.\n" + "It backs up a bit and begins to inhale deeply.\nSmoke whiffles from its nostrils." ) ; } else if ( preparingToBreatheFire ) { preparingToBreatheFire = false ; System . out . println ( "The Jabberwocky exhales a massive breath of fire!" ) ; if ( playerRaisedShield ) { System . out . println ( "The fire is deflected by your shield!" ) ; playerRaisedShield = false ; } else { System . out . println ( "It incinerates you! Maybe you should have blocked it with something." ) ; Game . hasLost = true ; } } else { System . out . println ( "The Jabberwocky swings its claws at you!" ) ; if ( playerRaisedShield ) { System . out . println ( "Your shield blocks its attack!" ) ; playerRaisedShield = false ; } else if ( playerDazed ) { System . out . println ( "The blow knocks you unconscious!" ) ; System . out . println ( "The Jabberwocky takes its time eating you." ) ; Game . hasLost = true ; } else { System . out . println ( "The blow sends you flying into the wall!" ) ; System . out . println ( "You stagger to your feet  but you feel dizzy." ) ; System . out . println ( "One more hit in that state and you'll be knocked unconscious." ) ; playerDazed = true ; return ; } } if ( playerDazed == true && ! playerJustEnteredLair && Game . hasLost == false ) { System . out . println ( "You recover your senses." ) ; } playerRaisedShield = false ; playerDazed = false ; return ; }
te	KEY	public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( obj instanceof Keyword ) { Keyword k = ( Keyword ) obj ; if ( k . toString ( ) . equals ( this . toString ( ) ) ) { return true ; } } return false ; }
te	KEY	void inputProcess ( ) ;
te	IDF	private int readZeroY ( int data ) { int iAddr = readZero ( data + getY ( ) ) ; return iAddr ; }
te	IDF	public static String formatDataDate ( DateTime date ) { return date . toString ( ISODateTimeFormat . date ( ) ) ; }
te	IDF	private static void exch ( int [ ] a , int i , int j ) { int swap = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = swap ; }
te	IDF	public static JSONObject rowToJSONObject ( JSONArray names , JSONTokener x ) throws JSONException { JSONArray ja = rowToJSONArray ( x ) ; return ja != null ? ja . toJSONObject ( names ) : null ; }
te	IDF	public PaymentResponse preAuth ( CardPaymentRequest paymentRequest ) throws BeanstreamApiException { if ( paymentRequest == null || paymentRequest . getCard ( ) == null ) { BeanstreamResponse response = BeanstreamResponse . fromMessage ( "invalid payment request" ) ; throw BeanstreamApiException . getMappedException ( HttpStatus . SC_BAD_REQUEST , response ) ; } paymentRequest . getCard ( ) . setComplete ( false ) ; String preAuthUrl = getPaymentUrl ( config . getPlatform ( ) , config . getVersion ( ) ) ; String response = connector . ProcessTransaction ( HttpMethod . post , preAuthUrl , paymentRequest ) ; return gson . fromJson ( response , PaymentResponse . class ) ; }
te	IDF	@ Test public void testSimpleRegisterHandler ( ) { final RxEventBus rxEventBus = new RxEventBus ( vertx . eventBus ( ) ) ; Observable < RxMessage < String >> obs = rxEventBus . registerHandler ( "foo" ) ; assertMessageThenComplete ( obs . takeFirst ( ) , "hello" ) ; vertx . eventBus ( ) . send ( "foo" , "hello" ) ; }
te	IDF	private HttpRequest getHttp ( HttpMethod httpMethod , StringEntity entity ) { if ( HttpMethod . post . equals ( httpMethod ) ) { HttpPost http = new HttpPost ( ) ; http . setEntity ( entity ) ; return http ; } else if ( HttpMethod . put . equals ( httpMethod ) ) { HttpPut http = new HttpPut ( ) ; http . setEntity ( entity ) ; return http ; } else if ( HttpMethod . get . equals ( httpMethod ) ) { HttpGet http = new HttpGet ( ) ; return http ; } else if ( HttpMethod . delete . equals ( httpMethod ) ) { HttpDelete http = new HttpDelete ( ) ; return http ; } return null ; }
te	KEY	public boolean isCellEditable ( int rowIndex , int columnIndex ) { return canEdit [ columnIndex ] ; }
te	KEY	public String getServletInfo ( ) { return "Short description" ; }
te	KEY	public void seteBookAvailable ( boolean eBookAvailable ) { this . eBookAvailable = eBookAvailable ; }
te	KEY	void initialize ( ) ;
te	IDF	public Snake ( Player player , int [ ] xInitial , int [ ] yInitial , short initDirection ) { super ( xInitial , yInitial ) ; this . player = player ; this . direction = initDirection ; }
te	KEY	public boolean isPowered ( ) { return powered ; }
te	KEY	public int getCol ( ) { return col ; }
te	IDF	public double getScore ( DependencyInstance now , DependencyArcList arcLis ) { return getScore ( now . heads , arcLis ) ; }
te	KEY	public boolean userMustBeRegister ( ) { return true ; }
te	IDF	public void writeUserList ( ) { try { File userListFile = new File ( "src/server/bin/userListFile" ) ; FileOutputStream fos = new FileOutputStream ( userListFile ) ; ObjectOutputStream oos = new ObjectOutputStream ( fos ) ; oos . writeObject ( userList ) ; } catch ( FileNotFoundException e ) { e . printStackTrace ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }
te	IDF	public JSONObject ( JSONTokener x ) throws JSONException { this ( ) ; char c ; String key ; if ( x . nextClean ( ) != { ) { throw x . syntaxError ( "A JSONObject text must begin with '{'" ) ; } for ( ; ; ) { c = x . nextClean ( ) ; switch ( c ) { case 0 : throw x . syntaxError ( "A JSONObject text must end with '}'" ) ; case } : return ; default : x . back ( ) ; key = x . nextValue ( ) . toString ( ) ; } c = x . nextClean ( ) ; if ( c == = ) { if ( x . next ( ) != > ) { x . back ( ) ; } } else if ( c != : ) { throw x . syntaxError ( "Expected a ':' after a key" ) ; } this . putOnce ( key , x . nextValue ( ) ) ; switch ( x . nextClean ( ) ) { case ; : case   : if ( x . nextClean ( ) == } ) { return ; } x . back ( ) ; break ; case } : return ; default : throw x . syntaxError ( "Expected a ' ' or '}'" ) ; } } }
te	IDF	public ABType assignType ( int vision_type ) { ABType type = ABType . Unknown ; switch ( vision_type ) { case ImageSegmenter . PIG : type = ABType . Pig ; break ; case ImageSegmenter . STONE : type = ABType . Stone ; break ; case ImageSegmenter . WOOD : type = ABType . Wood ; break ; case ImageSegmenter . ICE : type = ABType . Ice ; break ; case ImageSegmenter . HILLS : type = ABType . Hill ; break ; case ImageSegmenter . RED_BIRD : type = ABType . RedBird ; break ; case ImageSegmenter . YELLOW_BIRD : type = ABType . YellowBird ; break ; case ImageSegmenter . BLUE_BIRD : type = ABType . BlueBird ; break ; case ImageSegmenter . BLACK_BIRD : type = ABType . BlackBird ; break ; case ImageSegmenter . WHITE_BIRD : type = ABType . WhiteBird ; break ; default : type = ABType . Unknown ; } return type ; }
te	KEY	public Object nextMeta ( ) throws JSONException { char c ; char q ; do { c = next ( ) ; } while ( Character . isWhitespace ( c ) ) ; switch ( c ) { case 0 : throw syntaxError ( "Misshaped meta tag" ) ; case < : return XML . < ; case > : return XML . > ; case / : return XML . / ; case = : return XML . = ; case ! : return XML . ! ; case ? : return XML . QUEST ; case " : case ' : q = c ; for ( ; ; ) { c = next ( ) ; if ( c == 0 ) { throw syntaxError ( "Unterminated string" ) ; } if ( c == q ) { return boolean . true ; } } default : for ( ; ; ) { c = next ( ) ; if ( Character . isWhitespace ( c ) ) { return boolean . true ; } switch ( c ) { case 0 : case < : case > : case / : case = : case ! : case ? : case " : case ' : back ( ) ; return boolean . true ; } } } }
te	KEY	private void repaintSuper ( ) { super . repaint ( ) ; }
te	KEY	public int getT_tap ( ) { return t_tap ; }
te	IDF	protected void addPlayer ( Player player ) { addPlayer ( newPlayer ( player ) ) ; }
te	IDF	private void jButton2ActionPerformed ( java . awt . event . ActionEvent evt ) { dispose ( ) ; }
te	KEY	public double getUserRating ( ) { return userRating ; }
te	KEY	public boolean isDiscovered ( ) { return discovered ; }
te	KEY	public void setPriority ( PriorityCode priority ) { if ( priority == null ) { throw new IllegalArgumentException ( "Priority cannot be null!" ) ; } this . priority = priority ; }
te	IDF	public SelectThreeTileAction ( String imageKey ) { super ( imageKey ) ; }
te	IDF	private void tableVariaveis_Fase_Update ( ) { tableVariaveis_Fase . setModel ( new javax . swing . table . DefaultTableModel ( new Object [ ] [ ] { } , new String [ ] { "Tipo" , "Nome" , "Valor inicial" } ) { boolean [ ] canEdit = new boolean [ ] { false , false , false } ; public boolean isCellEditable ( int rowIndex , int columnIndex ) { return canEdit [ columnIndex ] ; } } ) ; VariavelTableNode aux ; for ( int i = 0 ; i < variaveis . size ( ) ; i ++ ) { aux = variaveis . get ( i ) ; String [ ] linha = { aux . tipo , aux . nome , aux . valor } ; ( ( DefaultTableModel ) tableVariaveis_Fase . getModel ( ) ) . addRow ( linha ) ; } }
te	IDF	@ Override protected void post ( Message request , Message response ) { try { String hash = AuthUtils . createHash ( request . get ( Profile . PASSWORD ) ) ; response . put ( AuthenticationInfo . HASH , hash ) ; response . put ( System . RESULT_CODE , "0" ) ; response . put ( System . RESULT_MSG , "Success" ) ; } catch ( Exception e ) { response . put ( System . RESULT_CODE , "-1" ) ; response . put ( System . RESULT_MSG , "Error: " + e . getMessage ( ) ) ; } }
te	IDF	public Time getTime ( String columnLabel , Calendar cal ) throws SQLException { return rs . getTime ( columnLabel , cal ) ; }
te	KEY	@ Override public float getVY ( ) { return vy ; }
te	KEY	public void removeModel ( ) { registeredModel . removePropertyChangeListener ( this ) ; registeredModel = null ; }
te	KEY	@ Override public void putCharWhileLineComment ( char c ) throws ParsingException { }
te	KEY	public String getNoEFAttribute ( ) { return "Nope" ; }
te	KEY	public Datum ( List < double > attributesList ) { this ( attributesList , null ) ; return ; }
te	IDF	public static List < File > getFiles ( File file ) { List < File > fileList = new ArrayList < File > ( ) ; if ( file . isDirectory ( ) ) { for ( File child : file . listFiles ( ) ) { fileList . addAll ( getFiles ( child ) ) ; } } else { fileList . add ( file ) ; } return fileList ; }
te	KEY	public void setId ( long value ) { this . id = value ; }
te	KEY	private Helpers ( ) { throw new Error ( "This is a non instantiable class" ) ; }
te	KEY	public void sendWinOrDraw ( boolean win ) { if ( win ) { sendMessage ( "winner:" ) ; } else { sendMessage ( "draw" ) ; } }
te	IDF	@ Override protected Packet read ( ObjectInputStream in ) throws IOException { num = in . readInt ( ) ; dem = in . readInt ( ) ; return this ; }
te	IDF	private void addHead ( Node head , int size , int pos ) { sb . append ( String . format ( "%s [shape=record  label=\"{<L> L|<B> B}|{<T> T|<R> R}\"  pos=\"%d 0!\"];\n" , label ( head ) , pos ) ) ; }
te	IDF	public Descuento ( int Id_Descuento , String TipProSer_Descuento , String Des_Descuento , int Porcen_Descuento ) { this . Id_Descuento = Id_Descuento ; this . TipProSer_Descuento = TipProSer_Descuento ; this . Des_Descuento = Des_Descuento ; this . Porcen_Descuento = Porcen_Descuento ; }
te	KEY	@ AfterMethod public void tearDownMethod ( ) throws Exception { }
te	KEY	public static void startUpStubDB ( ) { Services . createDataAccess ( new DataAccessStub ( ) ) ; }
te	IDF	public SelectTwoTileAction ( String imageKey ) { super ( imageKey ) ; }
te	IDF	@ Override public void valueChanged ( ListSelectionEvent e ) { if ( ! e . getValueIsAdjusting ( ) ) { int rowSelected = jtPedidos . getSelectedRow ( ) , idColumn = 0 ; if ( rowSelected >= 0 ) { for ( int i = 0 ; i < jtPedidos . getColumnCount ( ) ; i ++ ) { if ( "NRO" . equals ( jtPedidos . getColumnName ( i ) ) ) { idColumn = i ; } } Remito r = ( Remito ) jtPedidos . getValueAt ( rowSelected , idColumn ) ; cargarTablaPedidoDetalle ( r . getDetalles ( ) ) ; } } }
te	IDF	public void setInviter ( User inviter ) { this . inviter = inviter ; }
te	KEY	@ Override public boolean isEnable ( ) { return enable ; }
te	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { butRotXActionPerformed ( evt ) ; }
te	KEY	public double dealForce ( ) { return applyForce ; }
te	KEY	public void initialize ( ) { }
te	IDF	@ HandlesEvent ( "getCategories" ) @ DefaultHandler public Resolution getCategories ( ) { try { this . categoryNames = new dao . ProductDAO ( ) . getCategoryList ( ) . toArray ( this . categoryNames ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } return new ForwardResolution ( "/categories.jsp" ) ; }
te	KEY	private boolean gershGorinCircleTest ( ArrayMatrix A ) { return false ; }
te	IDF	public long evaluate ( char playerColour , char enemyColour , Game game ) { return element . evaluate ( playerColour , enemyColour , game , children ) ; }
te	IDF	@ Transactional ( propagation = Propagation . SUPPORTS ) public Bond find ( String s ) { return null ; }
te	IDF	public void setAdLinkUrl ( String value ) { this . adLinkUrl = value ; }
te	IDF	static boolean pandigital ( long number ) { String num = "" + number ; if ( num . length ( ) < 9 ) return false ; num = num . substring ( 0 , 9 ) ; HashSet < Integer > digits = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < 9 ; i ++ ) digits . add ( Character . getNumericValue ( num . charAt ( i ) ) ) ; boolean pan = true ; for ( int i = 1 ; i < 10 ; i ++ ) if ( ! digits . contains ( i ) ) pan = false ; return pan ; }
te	KEY	void putCharWhileLineComment ( char c ) throws ParsingException ;
te	KEY	public double characterEnergy ( ) { if ( energy > 0.0 ) { return energy / energyMax ; } else { return 0.01 ; } }
te	KEY	private void setComponentes ( ) { setTitle ( "Gest\u00E3o de Ferramentas e Chamados" ) ; setLocationRelativeTo ( null ) ; setResizable ( false ) ; }
te	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { salirButtonActionPerformed ( evt ) ; }
te	IDF	public boolean placePalace ( int x , int y , JavaCell palace , JavaCell [ ] [ ] map , JavaPlayer player , LinkedList < Developer > gameDevelopers ) { if ( map [ x ] [ y ] . getCellType ( ) == "village" && mutualPalacePlacementRequirementsOK ( x , y , palace , map , player , gameDevelopers ) ) { return true ; } if ( map [ x ] [ y ] . getCellType ( ) . toString ( ) . startsWith ( "palace" ) && mutualPalacePlacementRequirementsOK ( x , y , palace , map , player , gameDevelopers ) && canUpgradePalace ( x , y , palace , map ) ) { return true ; } else { return false ; } }
te	IDF	public static void main ( String [ ] args ) { HashTable < Integer > intTable = new HashTable < Integer > ( new Comparator < Integer > ( ) { public int compare ( Integer e1 , Integer e2 ) { return e1 - e2 ; } } , new Hasher < Integer > ( ) { public int hash ( Integer data ) { return Math . abs ( data * 7 << 1 ) ; } } ) ; Integer [ ] ints = { 1 , 2 , 3 , 4 , 5 } ; for ( Integer i : ints ) { intTable . incCount ( i ) ; } SimpleIterator < DataCount < Integer >> it = intTable . getIterator ( ) ; while ( it . hasNext ( ) ) System . out . println ( it . next ( ) . data ) ; }
te	IDF	public void setFrom ( Node from ) { this . from = from ; }
te	IDF	public void train ( DependencyInstance [ ] lstTrain ) throws IOException , CloneNotSupportedException { long start = 0 , end = 0 ; if ( options . R > 0 && options . gamma < 1 && options . initTensorWithPretrain ) { Options optionsBak = ( Options ) options . clone ( ) ; options . learningMode = LearningMode . Basic ; options . R = 0 ; options . gamma = 1.0 ; options . gammaLabel = 1.0 ; options . maxNumIters = options . numPretrainIters ; options . useHO = false ; options . useSRL2O = false ; options . useSRLHO = false ; parameters . gamma = 1.0 ; parameters . gammaLabel = 1.0 ; parameters . rank = 0 ; options . gamma2 = 1.0 ; parameters . gamma2 = 1.0 ; parameters . rank2 = 1 ; System . out . println ( "=============================================" ) ; System . out . printf ( " Pre-training:%n" ) ; System . out . println ( "=============================================" ) ; start = System . currentTimeMillis ( ) ; System . out . println ( "Running MIRA ... " ) ; trainIter ( lstTrain , false ) ; System . out . println ( ) ; System . out . println ( "Init tensor ... " ) ; LowRankParam tensor = new LowRankParam ( parameters ) ; pipe . synFactory . fillParameters ( tensor , parameters ) ; tensor . decompose ( 1 , parameters ) ; if ( options . pminit ) { SemanticLowRankParam tensor2 = new SemanticLowRankParam ( parameters ) ; pipe . smnFactory . fillParameters ( tensor2 , parameters ) ; tensor2 . decompose ( parameters ) ; } System . out . println ( ) ; end = System . currentTimeMillis ( ) ; options . learningMode = optionsBak . learningMode ; options . R = optionsBak . R ; options . gamma = optionsBak . gamma ; options . gammaLabel = optionsBak . gammaLabel ; options . maxNumIters = optionsBak . maxNumIters ; options . useHO = optionsBak . useHO ; options . useSRL2O = optionsBak . useSRL2O ; options . useSRLHO = optionsBak . useSRLHO ; parameters . rank = optionsBak . R ; parameters . gamma = optionsBak . gamma ; parameters . gammaLabel = optionsBak . gammaLabel ; options . gamma2 = optionsBak . gamma2 ; parameters . gamma2 = options . gamma2 ; parameters . rank2 = optionsBak . R2 ; parameters . clearTheta ( ) ; parameters . printUStat ( ) ; parameters . printVStat ( ) ; parameters . printWStat ( ) ; System . out . println ( ) ; System . out . printf ( "Pre-training took %d ms.%n" , end - start ) ; System . out . println ( "=============================================" ) ; System . out . println ( ) ; } else { parameters . randomlyInitUVW ( ) ; } if ( ! options . pminit ) parameters . randomlyInitUVWX2 ( ) ; System . out . println ( "=============================================" ) ; System . out . printf ( " Training:%n" ) ; System . out . println ( "=============================================" ) ; start = System . currentTimeMillis ( ) ; System . out . println ( "Running MIRA ... " ) ; trainIter ( lstTrain , true ) ; System . out . println ( ) ; end = System . currentTimeMillis ( ) ; System . out . printf ( "Training took %d ms.%n" , end - start ) ; System . out . println ( "=============================================" ) ; System . out . println ( ) ; }
te	KEY	public void setId ( long id ) { this . id = id ; }
te	IDF	public static void sort ( int [ ] a ) { int N = a . length ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = i ; j > 0 && less ( a [ j ] , a [ j - 1 ] ) ; j -- ) { exchange ( a , j , j - 1 ) ; } assert isSorted ( a , 0 , i ) ; } assert isSorted ( a ) ; }
te	KEY	public double pressRotateRight ( ) { return 10 ; }
te	IDF	public static void main ( String [ ] args ) { Card card = new Card ( Card . Suit . SPADES , 2 ) ; System . out . println ( card . getSuit ( ) . ordinal ( ) + "  " + card . getValue ( ) ) ; List < String > list = new ArrayList < String > ( ) ; ArrayList < String > [ ] employeeLevels = new ArrayList [ 3 ] ; employeeLevels [ 0 ] = new ArrayList < String > ( ) ; employeeLevels [ 0 ] . add ( "fresher1" ) ; employeeLevels [ 0 ] . add ( "fresher2" ) ; ArrayList < String > employeeLevel = employeeLevels [ 0 ] ; for ( int i = 0 ; i < employeeLevels [ 0 ] . size ( ) ; i ++ ) { System . out . println ( employeeLevels [ 0 ] . get ( i ) ) ; } String a = "x" + 3 ; System . out . println ( a ) ; }
te	IDF	@ Override public ArrayList < Player > getAllPlayers ( String name ) { String query = "SELECT Id  name  email  balance FROM Player WHERE name LIKE " ; query += QueryBuilder . getParameterWithQuotesAndLikeOperator ( name ) ; return this . getjugadoresByQuery ( query ) ; }
te	IDF	public int Ysnap ( MouseEvent e ) { return Yloc ( e ) * SPACESIZE ; }
te	KEY	public boolean isOk ( ) { return ok ; }
te	IDF	private void dealtDamage ( int getX , int getY , int getWidth , int getLength , int getTime , int getDelay , double getDamage , int applyForce ) { if ( character . equals ( "P1" ) ) { if ( moveDirection ) { getWorld ( ) . addObject ( new P1AttackArea ( x + getX , y + getY , getWidth , getLength , getTime , getDelay , getDamage , applyForce , moveDirection ) , x + getX , y + getY ) ; } else { getWorld ( ) . addObject ( new P1AttackArea ( x - getX , y + getY , getWidth , getLength , getTime , getDelay , getDamage , applyForce , moveDirection ) , x - getX , y + getY ) ; } } else if ( character . equals ( "P2" ) ) { if ( moveDirection ) { getWorld ( ) . addObject ( new P2AttackArea ( x + getX , y + getY , getWidth , getLength , getTime , getDelay , getDamage , applyForce , moveDirection ) , x + getX , y + getY ) ; } else { getWorld ( ) . addObject ( new P2AttackArea ( x - getX , y + getY , getWidth , getLength , getTime , getDelay , getDamage , applyForce , moveDirection ) , x - getX , y + getY ) ; } } }
te	KEY	public void setWins ( int wins ) { }
te	KEY	@ Override public int getRowCount ( ) { if ( params == null ) return 0 ; return params . size ( ) ; }
te	KEY	int getNbConnectedUsers ( ) ;
te	IDF	static void testFHashMap ( Random rand , int i , FHashSet < MyInteger > set ) { FHashMap < MyInteger , MyInteger > fhm0 = new FHashMap < MyInteger , MyInteger > ( ) ; HashMap < MyInteger , MyInteger > hm0 = new HashMap < MyInteger , MyInteger > ( ) ; for ( int j = 0 ; j < 100 ; ++ j ) { int r = rand . nextInt ( 200 ) , v = rand . nextInt ( 3 ) ; MyInteger R = r == 57 ? null : new MyInteger ( r ) , V = new MyInteger ( v ) ; FHashMap < MyInteger , MyInteger > tmp = fhm0 . with ( R , V , myOp ) ; MyInteger hm0V = hm0 . get ( R ) ; V = hm0V == null ? V : myOp . apply ( hm0V , V ) ; hm0 . put ( R , V ) ; if ( ! tmp . verify ( ) ) { println ( "FHashMap Verification failure on iteration " + i ) ; println ( fhm0 . dump ( ) ) ; println ( "Adding " + R + "  " + V ) ; println ( tmp . dump ( ) ) ; exit ( ) ; } if ( tmp . hashCode ( ) != hm0 . hashCode ( ) ) { println ( "FHashMap hashCode failed on fhm0 on iteration " + i ) ; println ( fhm0 ) ; println ( fhm0 . dump ( ) ) ; println ( "Adding " + R + " -> " + V ) ; println ( tmp . dump ( ) ) ; println ( hm0 ) ; exit ( ) ; } fhm0 = tmp ; } FHashMap < MyInteger , MyInteger > fhm1 = new FHashMap < MyInteger , MyInteger > ( ) ; HashMap < MyInteger , MyInteger > hm1 = new HashMap < MyInteger , MyInteger > ( ) ; for ( int j = 0 ; j < 100 ; ++ j ) { int r = rand . nextInt ( 200 ) , v = rand . nextInt ( 3 ) ; MyInteger R = r == 57 ? null : new MyInteger ( r ) , V = new MyInteger ( v ) ; FHashMap < MyInteger , MyInteger > tmp = fhm1 . with ( R , V ) ; hm1 . put ( R , V ) ; if ( ! tmp . verify ( ) ) { println ( "FHashMap Verification failure on iteration " + i ) ; println ( fhm1 . dump ( ) ) ; println ( "Adding " + R + "  " + V ) ; println ( tmp . dump ( ) ) ; exit ( ) ; } fhm1 = tmp ; } for ( int j = 0 ; j < 20 ; ++ j ) { int r = rand . nextInt ( 200 ) ; MyInteger R = r == 57 ? null : new MyInteger ( r ) ; FHashMap < MyInteger , MyInteger > tmp = fhm0 . less ( R ) ; hm0 . remove ( R ) ; if ( ! tmp . verify ( ) ) { println ( "FHashMap Verification failure on iteration " + i ) ; println ( fhm0 . dump ( ) ) ; println ( "Removing " + R ) ; println ( tmp . dump ( ) ) ; exit ( ) ; } fhm0 = tmp ; } for ( int j = 0 ; j < 20 ; ++ j ) { int r = rand . nextInt ( 200 ) ; MyInteger R = r == 57 ? null : new MyInteger ( r ) ; FHashMap < MyInteger , MyInteger > tmp = fhm1 . less ( R ) ; hm1 . remove ( R ) ; if ( ! tmp . verify ( ) ) { println ( "FHashMap Verification failure on iteration " + i ) ; println ( fhm1 . dump ( ) ) ; println ( "Removing " + R ) ; println ( tmp . dump ( ) ) ; exit ( ) ; } fhm1 = tmp ; } if ( ! fhm0 . equals ( hm0 ) ) { println ( "FHashMap Equality failed (fhm0  A) on iteration " + i ) ; println ( fhm0 . dump ( ) ) ; println ( fhm0 ) ; println ( hm0 ) ; exit ( ) ; } if ( ! fhm0 . equals ( new FHashMap < MyInteger , MyInteger > ( hm0 ) ) ) { println ( "FHashMap Equality failed (fhm0  B) on iteration " + i ) ; println ( fhm0 . dump ( ) ) ; println ( hm0 ) ; exit ( ) ; } if ( ! fhm1 . equals ( hm1 ) ) { println ( "FHashMap Equality failed (fhm1  A) on iteration " + i ) ; println ( fhm1 . dump ( ) ) ; println ( fhm1 ) ; println ( hm1 ) ; exit ( ) ; } if ( ! fhm1 . equals ( new FHashMap < MyInteger , MyInteger > ( hm1 ) ) ) { println ( "FHashMap Equality failed (fhm1  B) on iteration " + i ) ; println ( fhm1 . dump ( ) ) ; exit ( ) ; } FHashMap < MyInteger , MyInteger > fhmm = fhm0 . union ( fhm1 ) ; HashMap < MyInteger , MyInteger > hmm = ( HashMap < MyInteger , MyInteger > ) hm0 . clone ( ) ; hmm . putAll ( hm1 ) ; if ( ! fhmm . verify ( ) || ! fhmm . equals ( hmm ) ) { println ( "FHashMap Union failed on iteration " + i ) ; println ( fhm0 ) ; println ( fhm0 . dump ( ) ) ; println ( fhm1 ) ; println ( fhm1 . dump ( ) ) ; println ( fhmm . size ( ) + "  " + hmm . size ( ) ) ; println ( fhmm ) ; println ( fhmm . dump ( ) ) ; println ( hmm ) ; exit ( ) ; } if ( ! fhmm . equals ( new FHashMap < MyInteger , MyInteger > ( hmm ) ) ) { println ( "FHashMap Equality failed (fhmm) on iteration " + i ) ; } FHashMap < MyInteger , MyInteger > fhmr = fhm0 . restrictedTo ( set ) ; HashMap < MyInteger , MyInteger > hmr = ( HashMap < MyInteger , MyInteger > ) hm0 . clone ( ) ; for ( Iterator it = hmr . keySet ( ) . iterator ( ) ; it . hasNext ( ) ; ) { Object k = it . next ( ) ; if ( ! set . contains ( k ) ) it . remove ( ) ; } if ( ! fhmr . verify ( ) || ! fhmr . equals ( hmr ) ) { println ( "FHashMap restrictedTo failed on iteration " + i ) ; println ( fhmr ) ; println ( hmr ) ; exit ( ) ; } fhmr = fhm0 . restrictedFrom ( set ) ; hmr = ( HashMap < MyInteger , MyInteger > ) hm0 . clone ( ) ; for ( Iterator it = hmr . keySet ( ) . iterator ( ) ; it . hasNext ( ) ; ) { Object k = it . next ( ) ; if ( set . contains ( k ) ) it . remove ( ) ; } if ( ! fhmr . verify ( ) || ! fhmr . equals ( hmr ) ) { println ( "FHashMap restrictedFrom failed on iteration " + i ) ; println ( fhmr ) ; println ( hmr ) ; exit ( ) ; } fhm0 = fhm0 . less ( null ) ; FSet < MyInteger > fhm0_dom = fhm0 . domain ( ) ; FHashMap < MyInteger , MyInteger > fhm0a = fhm0 . less ( pick ( rand , fhm0_dom ) ) . with ( pick ( rand , fhm0_dom ) , new MyInteger ( rand . nextInt ( 3 ) ) ) ; FHashMap < MyInteger , MyInteger > fhm0b = fhm0 . less ( pick ( rand , fhm0_dom ) ) . with ( pick ( rand , fhm0_dom ) , new MyInteger ( rand . nextInt ( 3 ) ) ) ; if ( sgn ( fhm0a . compareTo ( fhm0b ) ) != compare ( fhm0a , fhm0b ) ) { println ( "FHashMap Compare failed (fhm0) on iteration " + i ) ; println ( fhm0a . dump ( ) ) ; println ( fhm0b . dump ( ) ) ; println ( fhm0a ) ; println ( fhm0b ) ; println ( fhm0a . compareTo ( fhm0b ) ) ; println ( compare ( fhm0a , fhm0b ) ) ; exit ( ) ; } fhm1 = fhm1 . less ( null ) ; FSet < MyInteger > fhm1_dom = fhm1 . domain ( ) ; FHashMap < MyInteger , MyInteger > fhm1a = fhm1 . less ( pick ( rand , fhm1_dom ) ) . with ( pick ( rand , fhm1_dom ) , new MyInteger ( rand . nextInt ( 3 ) ) ) ; FHashMap < MyInteger , MyInteger > fhm1b = fhm1 . less ( pick ( rand , fhm1_dom ) ) . with ( pick ( rand , fhm1_dom ) , new MyInteger ( rand . nextInt ( 3 ) ) ) ; if ( sgn ( fhm1a . compareTo ( fhm1b ) ) != compare ( fhm1a , fhm1b ) ) { println ( "FHashMap Compare failed (fhm1) on iteration " + i ) ; println ( fhm1a . dump ( ) ) ; println ( fhm1b . dump ( ) ) ; println ( fhm1a ) ; println ( fhm1b ) ; println ( fhm1a . compareTo ( fhm1b ) ) ; println ( compare ( fhm1a , fhm1b ) ) ; exit ( ) ; } if ( i % 50 == 0 ) { try { FMap < MyInteger , MyInteger > fhmser = ( i == 0 ? new FHashMap < MyInteger , MyInteger > ( ) : fhm0 ) ; FileOutputStream fos = new FileOutputStream ( "fhm.tmp" ) ; ObjectOutputStream oos = new ObjectOutputStream ( fos ) ; oos . writeObject ( fhmser ) ; oos . close ( ) ; FileInputStream fis = new FileInputStream ( "fhm.tmp" ) ; ObjectInputStream ois = new ObjectInputStream ( fis ) ; FMap < MyInteger , MyInteger > nfhmser = ( FMap < MyInteger , MyInteger > ) ois . readObject ( ) ; ois . close ( ) ; if ( ! fhmser . equals ( nfhmser ) || fhmser . hashCode ( ) != nfhmser . hashCode ( ) ) { println ( "FHashMap read/write failed on iteration " + i ) ; exit ( ) ; } } catch ( IOException e ) { println ( "FHashMap read/write: exception " + e ) ; exit ( ) ; } catch ( ClassNotFoundException e ) { println ( "FHashMap read/write: exception " + e ) ; } } }
te	IDF	@ Override public boolean = ( RationalNumber r ) { int lcm = RationalNumber . lcm ( denominator , r . denominator ) ; return ( numerator * ( lcm / denominator ) ) == ( r . numerator * ( lcm / r . denominator ) ) ; }
te	IDF	@ Override public InputStream getInputStream ( ) { try { return new BufferedInputStream ( new FileInputStream ( file ) ) ; } catch ( FileNotFoundException e ) { throw new RuntimeException ( e ) ; } }
te	KEY	public int getMaxHP ( ) { return maxHP ; }
te	IDF	public boolean getBoolean ( String key ) throws JSONException { Object object = this . get ( key ) ; if ( object . equals ( boolean . false ) || ( object instanceof String && ( ( String ) object ) . equalsIgnoreCase ( "false" ) ) ) { return false ; } else if ( object . equals ( boolean . true ) || ( object instanceof String && ( ( String ) object ) . equalsIgnoreCase ( "true" ) ) ) { return true ; } throw new JSONException ( "JSONObject[" + quote ( key ) + "] is not a Boolean." ) ; }
te	KEY	public int getGridx ( ) { return gx ; }
te	IDF	public static void main ( String [ ] args ) { final int max = 20000 ; final HashMap < long , Integer > map = new HashMap < long , Integer > ( 2 * max ) ; final ArrayList < long > list = new ArrayList < long > ( max ) ; for ( int n = 1 ; n <= max ; n ++ ) { final long pn = getPentagonal ( n ) ; map . put ( pn , n ) ; list . add ( pn ) ; } int cnt = 0 ; long dmin = long . MAX_VALUE ; for ( int i = 0 ; i < max ; i ++ ) { final long pni = list . get ( i ) ; for ( int j = i + 1 ; j < max ; j ++ ) { if ( ++ cnt % 10000000 == 0 ) { System . out . println ( "# processed " + cnt + " pairs so far." ) ; } final long pnj = list . get ( j ) ; final long psum = pni + pnj ; if ( map . containsKey ( psum ) ) { final long pdiff = pnj - pni ; if ( map . containsKey ( pdiff ) ) { System . out . println ( "# sum and diff are Pentagonal; " + i + "\t" + j + "\t" + pni + "\t" + pnj ) ; final long d = java . lang . Math . abs ( pni - pnj ) ; if ( d < dmin ) { System . out . println ( "# new d_min; " + i + "\t" + j + "\t" + pni + "\t" + pnj + "\t" + d ) ; dmin = d ; } } } } } System . out . println ( "# dmin = " + dmin ) ; }
te	KEY	public void setValPro_Anulacion ( double ValPro_Anulacion ) { this . ValPro_Anulacion = ValPro_Anulacion ; }
te	KEY	public boolean creerDemanteTransport ( ) { return false ; }
te	KEY	@ Test public final void generateTest ( ) { }
te	KEY	@ Override protected Item child ( ) { return this ; }
te	IDF	public BufferedImage call ( ) throws Exception { return Scalr . resize ( src , resizeMode , targetSize , ops ) ; }
te	IDF	@ Override public void handle ( ActionEvent e ) { screenController . setScreen ( "USER_SCREEN" ) ; }
te	IDF	private List < Appointment > filterAppointmentsForTimeperiod ( List < Appointment > appointments , Date start , Date end ) { List < Appointment > appointmentsInTimeperiod = new ArrayList < Appointment > ( ) ; for ( Appointment a : appointments ) { Calendar as = Calendar . getInstance ( ) ; Calendar ae = Calendar . getInstance ( ) ; Calendar s = Calendar . getInstance ( ) ; Calendar e = Calendar . getInstance ( ) ; as . setTime ( a . getStart ( ) ) ; ae . setTime ( a . getEnd ( ) ) ; s . setTime ( start ) ; e . setTime ( end ) ; if ( ( as . after ( s ) || as . equals ( s ) ) && ( ae . before ( e ) || ae . equals ( e ) ) ) { appointmentsInTimeperiod . add ( a ) ; continue ; } else if ( as . before ( s ) && ( ae . after ( s ) || ae . equals ( s ) ) ) { appointmentsInTimeperiod . add ( a ) ; continue ; } else if ( ( as . before ( e ) || as . equals ( e ) ) && ae . after ( e ) ) { appointmentsInTimeperiod . add ( a ) ; continue ; } } return appointmentsInTimeperiod ; }
te	KEY	public boolean isWhiteKing ( ) { return isKing && isWhite ; }
te	IDF	@ Override public void actionPerformed ( ActionEvent e ) { frm . rename ( result ) ; frame . getFileListPanel ( ) . updateFiles ( toFiles . toArray ( new File [ toFiles . size ( ) ] ) ) ; dispose ( ) ; }
te	KEY	public Game ( int state ) { }
te	KEY	public float read ( float [ ] buf , int readRate ) ;
te	KEY	public boolean isAlive ( ) { return ( state == STATE_NORMAL ) ; }
te	KEY	abstract public void accept ( ExceptionVisitor v ) ;
te	KEY	public synchronized int xgetD2AssignedKeyCode ( ) { return d2 ; }
te	IDF	public JsonObject loadGame ( File loadFile ) { System . out . println ( "loading game" ) ; StringBuilder alpha = new StringBuilder ( ) ; try { Scanner input = new Scanner ( loadFile ) ; while ( input . hasNextLine ( ) ) { alpha . append ( input . nextLine ( ) ) ; } input . close ( ) ; } catch ( FileNotFoundException e ) { JOptionPane . showMessageDialog ( null , "File " + loadFile . getName ( ) + " could not be loaded." ) ; return null ; } String loadString = alpha . toString ( ) ; return new JsonObject ( loadString ) ; }
te	IDF	public String toString ( ) { return lastname + " " + firstname ; }
te	IDF	@ Override public RationalNumber div ( RationalNumber r ) { numerator *= r . denominator ; denominator *= r . numerator ; return this ; }
te	IDF	public byte [ ] getBytes ( ) { ByteBuffer buffer = ByteBuffer . allocate ( MESSAGE_SIZE ) ; buffer . order ( ByteOrder . BIG_ENDIAN ) ; buffer . putFloat ( 0 , speedRA ) ; buffer . putFloat ( 4 , speedDE ) ; buffer . put ( 8 , ( byte ) ( ( ticks / 256 ) & FF ) ) ; buffer . put ( 9 , ( byte ) ( ticks & FF ) ) ; byte [ ] array = buffer . array ( ) ; int sum = 0 ; for ( int i = 0 ; i < MESSAGE_SIZE - 1 ; i ++ ) { sum += array [ i ] ; } array [ MESSAGE_SIZE - 1 ] = ( byte ) ( sum & FF ) ; return array ; }
te	KEY	public void setRunTime ( long value ) { this . runTime = value ; }
te	KEY	void display ( ) ;
te	KEY	public ProfesorBean ( ) { }
te	KEY	public void startGame ( boolean startGame ) ;
te	KEY	public static double atan ( double x ) { return atan ( x , 0.0 , false ) ; }
te	IDF	@ Override public String apply ( String result , String input , AtomicBoolean reduced ) { return result + input + " " ; }
te	KEY	protected void end ( ) { }
te	IDF	@ Override public void handle ( ActionEvent event ) { final Stage myDialog = new Stage ( ) ; myDialog . initModality ( Modality . WINDOW_MODAL ) ; GridPane gp = new GridPane ( ) ; gp . setVgap ( 5 ) ; gp . setHgap ( 10 ) ; gp . add ( new Label ( "Book Id" ) , 0 , 0 ) ; gp . add ( new Label ( "#" + String . valueOf ( book . getId ( ) ) ) , 1 , 0 ) ; gp . add ( new Label ( "Name" ) , 0 , 1 ) ; gp . add ( nameTf , 1 , 1 ) ; nameTf . setText ( book . getName ( ) ) ; gp . add ( new Label ( "Author" ) , 0 , 2 ) ; gp . add ( new Label ( book . getAuthor ( ) . getName ( ) . toString ( ) ) , 1 , 2 ) ; gp . add ( new Label ( "Year" ) , 0 , 3 ) ; gp . add ( yearTf , 1 , 3 ) ; yearTf . setText ( String . valueOf ( book . getYear ( ) ) ) ; gp . add ( new Label ( "Description" ) , 0 , 4 ) ; desc = new TextArea ( book . getDescription ( ) ) ; desc . setPrefWidth ( 200 ) ; desc . setWrapText ( true ) ; gp . add ( desc , 1 , 4 ) ; if ( book . getAvailibility ( ) ) { gp . add ( LabelBuilder . create ( ) . text ( "Available" ) . style ( "-fx-text-fill: #31BB22;" ) . build ( ) , 0 , 5 ) ; } else { gp . add ( LabelBuilder . create ( ) . text ( "Not Available" ) . style ( "-fx-text-fill: #D7090E;" ) . build ( ) , 0 , 5 ) ; } editBtn = new Button ( "Edit" ) ; editBtn . setOnAction ( new EventHandler < ActionEvent > ( ) { @ Override public void handle ( ActionEvent e ) { book . setDescription ( desc . getText ( ) ) ; book . setName ( nameTf . getText ( ) ) ; if ( IntegerUtil . isInteger ( yearTf . getText ( ) ) ) { book . setYear ( Integer . parseInt ( yearTf . getText ( ) ) ) ; } bookCtrl . getBookService ( ) . update ( book ) ; editBtn . setStyle ( "-fx-background-color:linear-gradient(#f0ff35  #a9ff00) radial-gradient(center 50% -40%  radius 200%  #b8ee36 45%  #80c800 50%);" ) ; } } ) ; gp . add ( editBtn , 0 , 6 ) ; Scene myDialogScene = new Scene ( VBoxBuilder . create ( ) . children ( gp ) . alignment ( Pos . CENTER ) . padding ( new Insets ( 10 ) ) . build ( ) ) ; myDialog . setScene ( myDialogScene ) ; myDialog . show ( ) ; }
te	IDF	public void setType ( String type ) { this . type = type ; }
te	KEY	public void notifyCurrentDifficultyChanged ( ) { }
te	IDF	public static INDILightProperty createSaveableLightProperty ( INDIDriver driver , String name , String label , String group , PropertyStates state ) throws IllegalArgumentException { INDILightProperty lp = loadLightProperty ( driver , name ) ; if ( lp == null ) { lp = new INDILightProperty ( driver , name , label , group , state ) ; lp . setSaveable ( true ) ; } return lp ; }
te	KEY	public int getJ ( ) { return j ; }
te	IDF	public void remove ( VElement ve ) { vc . remove ( ve ) ; }
te	KEY	public double getAttaque ( ) { return attaque ; }
te	KEY	protected abstract void postRun ( T data ) throws Exception ;
te	KEY	public int hashCode ( ) { return first + second * 1000 ; }
te	IDF	@ Test public void testCapabilities ( ) { Adapter a = new Adapter ( ) ; Cap1Concrete cap1 = new Cap1Concrete ( ) ; Cap2Concrete cap2 = new Cap2Concrete ( ) ; a . register ( cap1 ) ; a . register ( cap2 ) ; a . act2 ( ) ; a . act1 ( ) ; try { a . act3 ( ) ; System . err . println ( "Failed test for unsupported operation" ) ; } catch ( UnsupportedOperationException e ) { System . out . println ( "Success test for unsupported operation" ) ; } }
te	KEY	public double getTakt ( ) { return takt ; }
te	IDF	public ObjectOutputStream getOOSByID ( int ID ) { Iterator < Connection > iter = activeConnections . iterator ( ) ; Connection con ; while ( iter . hasNext ( ) ) { con = iter . next ( ) ; if ( con . getId ( ) == ID ) { return con . getOOS ( ) ; } } return null ; }
te	KEY	protected abstract void onNextPlayer ( ) ;
te	KEY	public double getPrecio ( ) { return precio ; }
te	IDF	public void init ( ) throws ParsingException { qm = QueryFactory . createQueryMap ( queryFilePath ) ; qm2 = QueryMapHelper . getMap ( "pathTest" ) ; }
te	IDF	public void setName ( String value ) { this . name = value ; }
te	KEY	public int size ( ) { return numEntries ; }
te	IDF	public MsgStatusPk insert ( MsgStatus dto ) throws MsgStatusDaoException ;
te	KEY	public GraphvizDrawer ( ) { }
te	IDF	@ Override public void start ( ) { initialize ( ) ; container . deployModule ( System . getProperty ( "vertx.modulename" ) , new AsyncResultHandler < String > ( ) { @ Override public void handle ( AsyncResult < String > asyncResult ) { if ( asyncResult . failed ( ) ) { container . logger ( ) . error ( asyncResult . cause ( ) ) ; } assertTrue ( asyncResult . succeeded ( ) ) ; assertNotNull ( "deploymentID should not be null" , asyncResult . result ( ) ) ; startTests ( ) ; } } ) ; }
te	KEY	public double getPrice ( ) { return price ; }
te	IDF	@ Override public void paint ( ) { System . out . println ( "I'm a Osx Button" ) ; }
te	KEY	@ Override public int foundSolutionsCount ( ) { return foundSolutionsCount ; }
te	KEY	public String getTableName ( ) { return "socialnetwork.friendshstatus" ; }
te	IDF	public String toString ( ) { return ij . toString ( ) ; }
te	KEY	public final void add ( int index , Elt e ) { throw new UnsupportedOperationException ( ) ; }
te	KEY	public int getUnitsInStock ( ) { return unitsInStock ; }
te	KEY	public void setId ( long value ) { this . id = value ; }
te	KEY	public void reprova ( ) { estadoAtual . reprova ( this ) ; }
te	KEY	public static boolean congruent ( int a , int b , int m ) { return ( ( a - b ) % m ) == 0 ; }
te	IDF	public int getWidth ( int layer ) { return layers . get ( layer ) . getWidth ( ) ; }
te	IDF	public void setUsername ( String value ) { this . username = value ; }
te	IDF	public void keyTyped ( java . awt . event . KeyEvent evt ) { textCompraKeyTyped ( evt ) ; }
te	KEY	public double getUnidades ( ) { return unidades ; }
te	IDF	public void setPassword ( String value ) { this . password = value ; }
te	IDF	private void updateAUDC0 ( int data ) { setRegister ( AUDC0 , data ) ; }
te	KEY	public void setSpeed ( int speed ) { this . speed = speed ; }
te	KEY	public int getRowCount ( ) { return sentItems . size ( ) ; }
te	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { menuItemConsultaProyectosActionPerformed ( evt ) ; }
te	KEY	protected void setCorrupted ( boolean corrupted ) { this . corrupted = corrupted ; }
te	KEY	@ Override public void remove ( ) { }
te	KEY	public FractalException ( ) { super ( ) ; }
te	KEY	public BST ( ) { this . left = this . right = null ; this . value = 0 ; }
te	KEY	public void setB ( double b ) { this . b = b ; }
te	KEY	public double value ( int i ) { return va [ i ] ; }
te	IDF	VideoSortOption ( String v ) { value = v ; }
te	KEY	public Token nextToken ( ) throws TokenStreamException { Token theRetToken = null ; tryAgain : for ( ; ; ) { Token _token = null ; int _ttype = Token . INVALID_TYPE ; resetText ( ) ; try { try { switch ( LA ( 1 ) ) { case " : { mSTRING_LIT ( true ) ; theRetToken = _returnToken ; break ; } case A : case B : case C : case D : case E : case F : case G : case H : case I : case J : case K : case L : case M : case N : case O : case P : case Q : case R : case S : case T : case U : case V : case W : case X : case Y : case Z : case a : case b : case c : case d : case e : case f : case g : case h : case i : case j : case k : case l : case m : case n : case o : case p : case q : case r : case s : case t : case u : case v : case w : case x : case y : case z : { mIDENT ( true ) ; theRetToken = _returnToken ; break ; } default : if ( ( LA ( 1 ) == 0 ) && ( LA ( 2 ) == x ) ) { mHEX_DIGIT ( true ) ; theRetToken = _returnToken ; } else if ( ( LA ( 1 ) == / ) && ( LA ( 2 ) == / ) ) { mSL_COMMENT ( true ) ; theRetToken = _returnToken ; } else if ( ( LA ( 1 ) == / ) && ( LA ( 2 ) == * ) ) { mML_COMMENT ( true ) ; theRetToken = _returnToken ; } else if ( ( ( LA ( 1 ) >= 0 && LA ( 1 ) <= 9 ) ) && ( true ) ) { mINTLT ( true ) ; theRetToken = _returnToken ; } else if ( ( LA ( 1 ) == ' ) && ( true ) && ( true ) && ( true ) && ( true ) ) { mCHARLIT ( true ) ; theRetToken = _returnToken ; } else if ( ( _tokenSet_0 . member ( LA ( 1 ) ) ) && ( true ) && ( true ) && ( true ) && ( true ) ) { mDELIMETER ( true ) ; theRetToken = _returnToken ; } else { if ( LA ( 1 ) == EOF_CHAR ) { uponEOF ( ) ; _returnToken = makeToken ( Token . EOF_TYPE ) ; } else { throw new NoViableAltForCharException ( ( char ) LA ( 1 ) , getFilename ( ) , getLine ( ) , getColumn ( ) ) ; } } } if ( _returnToken == null ) { continue tryAgain ; } _ttype = _returnToken . getType ( ) ; _returnToken . setType ( _ttype ) ; return _returnToken ; } catch ( RecognitionException e ) { throw new TokenStreamRecognitionException ( e ) ; } } catch ( CharStreamException cse ) { if ( cse instanceof CharStreamIOException ) { throw new TokenStreamIOException ( ( ( CharStreamIOException ) cse ) . io ) ; } else { throw new TokenStreamException ( cse . getMessage ( ) ) ; } } } }
te	KEY	public void vacio ( ) { this . size = 0 ; }
te	KEY	public int getEagles ( ) { return eagles ; }
te	IDF	public void setNome ( String nome ) { this . nome = nome ; }
te	IDF	public static void CheckDuplicate ( List < ABObject > objects ) { HashSet hs = new HashSet ( ) ; hs . addAll ( objects ) ; objects . clear ( ) ; objects . addAll ( hs ) ; }
te	IDF	public void setExplosion ( Date explosion ) { this . explosion = explosion ; }
te	KEY	int getPixcelY ( ) ;
te	IDF	private void playMediumButtonActionPerformed ( java . awt . event . ActionEvent evt ) { java . awt . EventQueue . invokeLater ( new Runnable ( ) { public void run ( ) { player . setDifficulty ( MEDIUM ) ; Game game = new Game ( player ) ; game . initGame ( ) ; } } ) ; this . dispose ( ) ; }
te	KEY	public void setSpeed ( int speed ) { this . speed = speed ; }
te	KEY	protected void interrupted ( ) { }
te	IDF	public T visitASTTCmdForward ( ASTTCmdForward form , S state ) throws FractalException ;
te	IDF	public abstract boolean isActive ( Calendar from , Calendar to ) ;
te	KEY	public double getValPag_Compra ( ) { return ValPag_Compra ; }
te	IDF	public Element findElementByFormalName ( String fname ) { for ( Element e : this . elements ) { if ( e . getFormalName ( ) . equals ( fname ) ) return e ; } return null ; }
te	IDF	public TileMapDataProvider ( TileMap map ) { this . map = map ; }
te	IDF	@ Override public boolean equals ( Object o ) { if ( this == o ) return true ; if ( o == null || getClass ( ) != o . getClass ( ) ) return false ; OreSolution that = ( OreSolution ) o ; if ( ! Arrays . equals ( minerals , that . minerals ) ) return false ; if ( volumes != null ? ! volumes . equals ( that . volumes ) : that . volumes != null ) return false ; return true ; }
te	KEY	@ Override public void putEnd ( ) throws ParsingException { throw new UnsupportedCharacterException ( this , Characters . END ) ; }
te	IDF	public HelpFrame ( ) throws HeadlessException { SwingUtilities . invokeLater ( new Runnable ( ) { @ Override public void run ( ) { } } ) ; this . setTitle ( "Card Counter Training" ) ; this . setVisible ( true ) ; this . setDefaultCloseOperation ( JFrame . DISPOSE_ON_CLOSE ) ; this . setLayout ( new BoxLayout ( getContentPane ( ) , BoxLayout . PAGE_AXIS ) ) ; JLabel helpLabel = new JLabel ( ) ; helpLabel . setText ( getMarkUp ( ) ) ; this . add ( helpLabel ) ; this . setSize ( 500 , ( int ) getPreferredSize ( ) . getHeight ( ) + 20 ) ; }
te	KEY	@ BeforeClass public static void setUpClass ( ) throws Exception { service = new JobEmail ( ) ; }
te	KEY	@ BeforeMethod public void setUpMethod ( ) throws Exception { }
te	KEY	@ Override public boolean isMulticast ( ) { return multicast ; }
te	KEY	public void remove ( ) { }
te	IDF	private void jButtonSimpanActionPerformed ( java . awt . event . ActionEvent evt ) { Kontak kontak = new Kontak ( ) ; kontak . setNama ( ( jTextFieldNama . getText ( ) ) ) ; kontak . setNomor ( jTextFieldNomor . getText ( ) ) ; Grup grup = ( Grup ) jComboBoxGrup . getSelectedItem ( ) ; kontak . setGrup ( grup ) ; try { App . getKontakService ( ) . save ( kontak ) ; dialogKontak . getKontakTableModel ( ) . save ( kontak ) ; JOptionPane . showMessageDialog ( rootPane , "Data Berhasil ditambahkan" ) ; } catch ( Exception ex ) { JOptionPane . showMessageDialog ( rootPane , "Data Gagal ditambahkan" ) ; } this . dispose ( ) ; }
te	IDF	public Grafikkarte find ( long id ) { EntityTransaction tx = getEntityManager ( ) . getTransaction ( ) ; tx . begin ( ) ; Grafikkarte fGrafikkarte = getEntityManager ( ) . getReference ( Grafikkarte . class , id ) ; tx . commit ( ) ; return fGrafikkarte ; }
te	IDF	@ Override public String getIndex ( ) { return codigo ; }
te	IDF	@ Override public String toString ( ) { return "[ " + x + "  " + y + " ]" ; }
te	IDF	@ Override public boolean setPacketFields ( Map < String , Object > in ) { return false ; }
te	IDF	@ Override public void parseFile ( ) { findClasses ( ) ; data = new ArrayList < > ( ) ; try { Scanner in = new Scanner ( new File ( filePath ) ) ; while ( in . hasNext ( ) ) { String [ ] split = in . nextLine ( ) . split ( " " ) ; List < double > featureList = new ArrayList < > ( ) ; for ( int featureIterator = 1 ; featureIterator <= inputs ; featureIterator ++ ) { featureList . add ( double . valueOf ( split [ featureIterator ] ) ) ; } List < double > output = getOutputVector ( split [ 0 ] . toLowerCase ( ) ) ; data . add ( new DataPoint ( featureList , output ) ) ; } in . close ( ) ; } catch ( FileNotFoundException e ) { System . out . println ( "File not found for yeast dataset." ) ; e . printStackTrace ( ) ; } }
te	KEY	public int getTotalTime ( ) ;
te	KEY	public abstract void perform ( Visitor operation ) ;
te	IDF	@ Override public void deleteAuthor ( int id ) throws WebshopAppException { if ( id > 0 ) { try ( Connection conn = getConnection ( ) ) { String sql = "DELETE FROM author WHERE id = ?" ; try ( PreparedStatement pstmt = conn . prepareStatement ( sql ) ) { pstmt . setInt ( 1 , id ) ; pstmt . executeUpdate ( ) ; LOGGER . trace ( String . format ( "%s.DELETE_AUTHOR - %s %s %s" , this . getClass ( ) . getSimpleName ( ) , "Author of id: " , id , "deleted" ) ) ; } } catch ( SQLException e ) { WebshopAppException excep = new WebshopAppException ( e . getMessage ( ) , this . getClass ( ) . getSimpleName ( ) , "DELETE_AUTHOR" ) ; LOGGER . error ( excep ) ; throw excep ; } } else { LOGGER . error ( "Delete author: id is < 0" ) ; } }
te	KEY	int getStartposition ( ) ;
te	IDF	private int eat ( ) { String [ ] tileFood = player . getLocation ( ) . getItems ( ) . getFoodsTexts ( ) ; String [ ] playerFood = player . getInventory ( ) . getFoodsTexts ( ) ; if ( tileFood . length + playerFood . length == 0 ) { log . println ( "There is nothing to eat." ) ; return - 1 ; } else { JPanel panel = new JPanel ( ) ; panel . setLayout ( new GridLayout ( 0 , 1 ) ) ; final JRadioButton [ ] radioButtons = new JRadioButton [ tileFood . length + playerFood . length ] ; String tileIDs = descriptionsToIDString ( tileFood ) ; String playerIDs = descriptionsToIDString ( playerFood ) ; final String idsString = tileIDs + playerIDs ; ButtonGroup buttons = new ButtonGroup ( ) ; Action charAction = new AbstractAction ( ) { public void actionPerformed ( ActionEvent e ) { int index = idsString . indexOf ( e . getActionCommand ( ) ) ; if ( index != - 1 ) { JRadioButton button = radioButtons [ index ] ; button . setSelected ( true ) ; } else { println ( e . getActionCommand ( ) + " is not a valid ID  do you have capslock on?" ) ; } } } ; int foodCount = 0 ; if ( tileFood . length > 0 ) { panel . add ( new JLabel ( "ON GROUND:" ) ) ; for ( String f : tileFood ) { JRadioButton newButton = new JRadioButton ( f ) ; panel . add ( newButton ) ; radioButtons [ foodCount ] = newButton ; buttons . add ( newButton ) ; newButton . getInputMap ( JComponent . WHEN_IN_FOCUSED_WINDOW ) . put ( KeyStroke . getKeyStroke ( idsString . substring ( foodCount , foodCount + 1 ) . toUpperCase ( ) ) , f ) ; newButton . getActionMap ( ) . put ( f , charAction ) ; foodCount ++ ; } } if ( playerFood . length > 0 ) { panel . add ( new JLabel ( "INVENTORY" ) ) ; for ( String f : playerFood ) { JRadioButton newButton = new JRadioButton ( f ) ; panel . add ( newButton ) ; radioButtons [ foodCount ] = newButton ; buttons . add ( newButton ) ; newButton . getInputMap ( JComponent . WHEN_IN_FOCUSED_WINDOW ) . put ( KeyStroke . getKeyStroke ( idsString . substring ( foodCount , foodCount + 1 ) . toUpperCase ( ) ) , f ) ; newButton . getActionMap ( ) . put ( f , charAction ) ; foodCount ++ ; } } JOptionPane . showMessageDialog ( null , panel , "What would you like to eat?" , JOptionPane . PLAIN_MESSAGE ) ; for ( JRadioButton radio : radioButtons ) { if ( radio . isSelected ( ) ) { Character id = radio . getText ( ) . charAt ( 0 ) ; Food food ; try { if ( tileIDs . indexOf ( id ) >= 0 ) { food = ( Food ) player . getLocation ( ) . getItem ( id ) ; if ( food . isStackable ( ) ) food = ( Food ) player . getLocation ( ) . removeItem ( id , 1 ) ; else food = ( Food ) player . getLocation ( ) . removeItem ( id ) ; } else { food = ( Food ) player . getInventory ( ) . getItem ( id ) ; if ( food . isStackable ( ) ) food = ( Food ) player . getInventory ( ) . removeStackedItem ( id , 1 ) ; else food = ( Food ) player . getInventory ( ) . removeItem ( id ) ; } log . println ( controller . playerEat ( food ) ) ; return food . getTurnsToEat ( ) * 10 ; } catch ( InvalidKeyException e ) { log . println ( "The item you picked was invalid" ) ; return - 1 ; } } } } return - 1 ; }
te	IDF	@ Override public MAction pressM ( BoardModel board , JavaPlayer player ) { return null ; }
te	KEY	public static TanksWorld getWorld ( ) { return world ; }
te	KEY	public void rotateY ( double radians ) ;
te	IDF	public void setDVD ( ) { System . out . println ( location + " stereo is set for DVD input" ) ; }
te	KEY	public int getMsCount ( ) { return msCount ; }
te	KEY	public static UserManager getInstance ( ) { if ( instance == null ) { instance = new UserManager ( ) ; } return instance ; }
te	KEY	public SimpleRemoteControl ( ) { }
te	IDF	public AffineTransform getInverseWorldTransform ( ) { AffineTransform T = new AffineTransform ( ) ; T . translate ( cameraX , cameraY ) ; T . scale ( 1.0f / zoom , 1.0f / zoom ) ; T . translate ( - getWidth ( ) / 2 , - getHeight ( ) / 2 ) ; return T ; }
te	KEY	public long getDuration ( ) { return DURATION ; }
te	IDF	@ Override public void putNewLine ( ) throws ParsingException { close ( ) ; exit ( ) ; context . putNewLine ( ) ; }
te	KEY	public abstract byte getId ( ) ;
te	KEY	public void setFastBootSSDRequested ( boolean fastBootSSDRequested ) { this . fastBootSSDRequested = fastBootSSDRequested ; }
te	KEY	public double getMaximumTime ( ) { return max_t ; }
te	KEY	public boolean isClicked ( ) { return this . clicked ; }
te	KEY	public LogEntry ( ) { this . value = "" ; }
te	KEY	public String getClientName ( ) { return this . clientName ; }
te	IDF	@ WebResult ( name = "return" , targetNamespace = "" ) @ RequestWrapper ( localName = "getSenderNames" , targetNamespace = "http://api.soap.mytxtbuddy.com/" , className = "com.dreamoval.mytxtbuddy.api.proxy.GetSenderNames" ) @ WebMethod @ ResponseWrapper ( localName = "getSenderNamesResponse" , targetNamespace = "http://api.soap.mytxtbuddy.com/" , className = "com.dreamoval.mytxtbuddy.api.proxy.GetSenderNamesResponse" ) public java . util . List < java . lang . String > getSenderNames ( @ WebParam ( name = "username" , targetNamespace = "" ) java . lang . String username , @ WebParam ( name = "password" , targetNamespace = "" ) java . lang . String password ) ;
te	IDF	public Msg findByPrimaryKey ( MsgPk pk ) throws MsgDaoException ;
te	IDF	private int getSelectRow ( ListSelectionEvent e ) { int row = table . getSelectedRow ( ) ; return row ; }
te	IDF	public ActionBarAdvisor createActionBarAdvisor ( IActionBarConfigurer configurer ) { _applicationActionBarAdvisor = new ApplicationActionBarAdvisor ( configurer ) ; return _applicationActionBarAdvisor ; }
te	IDF	public void init ( ) throws ServletException { dbconn . CDbProps props = new dbconn . CDbProps ( ) ; CDbConnMan dbconnman = new CDbConnMan ( props . DbConfigFile , props . ErrorLogFile ) ; ServletContext scontext = this . getServletContext ( ) ; scontext . setAttribute ( "DbConnMan" , dbconnman ) ; CDbConnMan remconnman = new CDbConnMan ( props . RemConfigFile , props . ErrorLogFile ) ; scontext . setAttribute ( "RemConnMan" , remconnman ) ; CForecasters fcinfo = new CForecasters ( dbconnman . getConnection ( ) ) ; }
te	IDF	private Object rankElement ( Object subtree , int rank ) { if ( subtree == null ) throw new NullPointerException ( ) ; else if ( ! ( subtree instanceof Node ) ) return ( ( Object [ ] ) subtree ) [ rank ] ; else { Node node = ( Node ) subtree ; int left_size = treeSize ( node . left ) ; if ( rank < left_size ) return rankElement ( node . left , rank ) ; else { Object elt = node . element ; int elt_size = elementSize ( elt ) ; if ( rank < left_size + elt_size ) return elt ; else return rankElement ( node . right , rank - ( left_size + elt_size ) ) ; } } }
te	IDF	public static boolean isValidBorrowAmount ( double amount ) { double range [ ] = getBorrowAmountRange ( ) ; return ( ( range [ 0 ] <= amount ) && ( amount <= range [ 1 ] ) ) ; }
te	KEY	public int getRowCount ( ) { return rowCount ; }
te	IDF	public static void main ( String [ ] args ) { try { UIManager . setLookAndFeel ( "javax.swing.plaf.nimbus.NimbusLookAndFeel" ) ; } catch ( UnsupportedLookAndFeelException | ClassNotFoundException | InstantiationException | IllegalAccessException ex ) { } SwingUtilities . invokeLater ( new Runnable ( ) { @ Override public void run ( ) { MainGUI gui = new MainGUI ( ) ; gui . createGUI ( ) ; } } ) ; }
te	IDF	protected GeneralPath createRectangleShape ( ) { GeneralPath componentShape = new GeneralPath ( ) ; switch ( LCARS . getRectangleShape ( style ) ) { case LCARS . ES_RECT_RND : componentShape . moveTo ( h / 2 , 0 ) ; componentShape . lineTo ( w - h / 2 , 0 ) ; componentShape . curveTo ( w - h / 2 , 0 , w , 0 , w , h / 2 ) ; componentShape . curveTo ( w , h / 2 , w , h , w - h / 2 , h ) ; componentShape . lineTo ( h / 2 , h ) ; componentShape . curveTo ( h / 2 , h , 0 , h , 0 , h / 2 ) ; componentShape . curveTo ( 0 , h / 2 , 0 , 0 , h / 2 , 0 ) ; break ; case LCARS . ES_RECT_RND_E : componentShape . moveTo ( 0 , 0 ) ; componentShape . lineTo ( w - h / 2 , 0 ) ; componentShape . curveTo ( w - h / 2 , 0 , w , 0 , w , h / 2 ) ; componentShape . curveTo ( w , h / 2 , w , h , w - h / 2 , h ) ; componentShape . lineTo ( 0 , h ) ; componentShape . lineTo ( 0 , 0 ) ; break ; case LCARS . ES_RECT_RND_W : componentShape . moveTo ( h / 2 , 0 ) ; componentShape . lineTo ( w , 0 ) ; componentShape . lineTo ( w , h ) ; componentShape . lineTo ( h / 2 , h ) ; componentShape . curveTo ( h / 2 , h , 0 , h , 0 , h / 2 ) ; componentShape . curveTo ( 0 , h / 2 , 0 , 0 , h / 2 , 0 ) ; break ; default : componentShape . moveTo ( 0 , h ) ; componentShape . lineTo ( 0 , 0 ) ; componentShape . lineTo ( w , 0 ) ; componentShape . lineTo ( w , h ) ; componentShape . lineTo ( 0 , h ) ; break ; } area = new Area ( componentShape ) ; return componentShape ; }
te	IDF	@ Override public void rotateZ ( double radians ) { for ( int i = 0 ; i < 4 ; i ++ ) for ( int j = 0 ; j < 4 ; j ++ ) temp . set ( j , i , 0 ) ; temp . set ( 0 , 0 , Math . cos ( radians ) ) ; temp . set ( 1 , 0 , - Math . sin ( radians ) ) ; temp . set ( 2 , 2 , 1 ) ; temp . set ( 0 , 1 , Math . sin ( radians ) ) ; temp . set ( 1 , 1 , Math . cos ( radians ) ) ; temp . set ( 3 , 3 , 1 ) ; this . rightMultiply ( temp ) ; }
te	IDF	public static < T > void assertMessageThenComplete ( Observable < RxMessage < T >> in , final T exp ) { final AtomicInteger count = new AtomicInteger ( 1 ) ; in . subscribe ( new Action1 < RxMessage < T >> ( ) { public void call ( RxMessage < T > value ) { assertEquals ( exp , value . body ( ) ) ; assertEquals ( 0 , count . decrementAndGet ( ) ) ; System . out . println ( "got:" + value . body ( ) ) ; } } , new Action1 < Throwable > ( ) { public void call ( Throwable t ) { fail ( "Error while mapping message (t=" + t + ")" ) ; } } , new Action0 ( ) { public void call ( ) { assertEquals ( 0 , count . get ( ) ) ; testComplete ( ) ; } } ) ; }
te	KEY	public void setStudentGroupId ( long studentGroupId ) { this . studentGroupId = studentGroupId ; }
te	IDF	@ Test public void shouldCreateBounceOut ( ) { InteractionEvent result = handler . createEvent ( new int [ ] { Integer . parseInt ( "02" , 16 ) , Integer . parseInt ( "04" , 16 ) , Integer . parseInt ( "00" , 16 ) , Integer . parseInt ( "00" , 16 ) , Integer . parseInt ( "00" , 16 ) , Integer . parseInt ( "00" , 16 ) , Integer . parseInt ( "00" , 16 ) } ) ; assert . assertThat ( result , is ( instanceof ( UserCausedEvent . class ) ) ) ; assert . assertThat ( ( ( UserCausedEvent ) result ) . getType ( ) , is ( Type . BOUNCE_OUT ) ) ; }
te	KEY	public double getX ( ) { return x ; }
te	IDF	public static boolean isInsideTriangle ( Vector2D a , Vector2D b , Vector2D c , Vector2D p ) { return isInsideTriangle ( a . x , a . y , b . x , b . y , c . x , c . y , p . x , p . y ) ; }
te	KEY	boolean isdrawn ( ) { if ( this . getHeight ( ) > 0 || this . getWidth ( ) > 0 ) { return true ; } else return false ; }
te	IDF	public FractalException ( ASTNode node , String message , Throwable cause ) { super ( message , cause ) ; source = node ; }
te	KEY	private void rocessBackToEarth ( ) { if ( BACK_TO_EARTH . isPressed ( ) ) { } }
te	KEY	public abstract void visit ( Block block ) ;
te	IDF	public static void NGramList ( String tweet , int frequency ) { System . out . println ( tweet + " [" + frequency + "]" ) ; if ( CompareMessage ( ngramlist , tweet , frequency ) ) { NGram n = new NGram ( tweet , frequency ) ; getNgramlist ( ) . add ( n ) ; } }
te	KEY	public static Test suite ( ) { return new TestSuite ( AppTest . class ) ; }
te	KEY	public InstantAnswerResponse createInstantAnswerResponse ( ) { return new InstantAnswerResponse ( ) ; }
te	KEY	public class getColumnClass ( int columnIndex ) { return types [ columnIndex ] ; }
te	IDF	EntryComparator ( Comparator < Key > _map_comp ) { map_comp = _map_comp ; }
te	KEY	public int xgetAssignedKeyCode ( ) { return assignedKeyCode ; }
te	KEY	public int getRemainBullet ( ) { return remainBullet ; }
te	KEY	public boolean hasNextRecord ( ) { return nextRecord != null ; }
te	IDF	public Key next ( ) { Key key ; if ( ftmIter . inode == null ) throw new NoSuchElementException ( ) ; else if ( ! ( ftmIter . inode . subtree instanceof Node ) ) { Object [ ] ary = ( Object [ ] ) ftmIter . inode . subtree ; key = ( Key ) ary [ ftmIter . inode . index ] ; } else { Node node = ( Node ) ftmIter . inode . subtree ; if ( node . key instanceof EquivalentMap ) { ArrayList < Entry > al = ( ( EquivalentMap ) node . key ) . contents ; key = ( Key ) al . get ( ftmIter . inode . index - 1 ) . key ; } else key = ( Key ) node . key ; } ftmIter . inode . index ++ ; ftmIter . canonicalize ( ) ; return key ; }
te	IDF	public void setIdperfil ( String idperfil ) { this . idperfil = idperfil ; try { this . perfil = PerfilDP . getOne ( idperfil ) ; } catch ( SQLException ex ) { Logger . getLogger ( RemitoDetalle . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; } }
te	IDF	public static void main ( String [ ] args ) { TransporteurDAO dao = new TransporteurDAO ( ) ; TrasporteurBean pojo = new TrasporteurBean ( ) ; pojo . setId ( 1 ) ; pojo . setMail ( "mmaaaailllll" ) ; pojo . setNom ( "noooom" ) ; pojo . setPassword ( "passss" ) ; pojo . setPrenom ( "prenom" ) ; dao . insert ( pojo ) ; pojo . setMail ( "arghhh@lol.fr" ) ; dao . update ( pojo ) ; dao . delete ( pojo ) ; }
te	KEY	public Level ( ) { }
te	KEY	protected void setupPanel ( ) { }
te	KEY	public abstract void reset ( ) ;
te	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { menuItemBorrarMantenimientoProyectosActionPerformed ( evt ) ; }
te	KEY	public int getColumnCount ( ) { return columnNames . length ; }
te	KEY	public void finaliza ( ) { estadoAtual . finaliza ( this ) ; }
te	KEY	public void stopClock ( ) { try { this . timer . cancel ( ) ; this . timer . purge ( ) ; } catch ( NullPointerException ex ) { } this . timer = null ; }
te	KEY	public void verticalAlignRight ( int x ) { this . setX ( x - this . getWidth ( ) ) ; }
te	IDF	public void __doPut ( HttpServletRequest req , HttpServletResponse resp ) throws IOException { resp . setContentType ( "text/plain" ) ; resp . getWriter ( ) . println ( "Ouch... not implemented yet :(" ) ; }
te	KEY	public void onNoSocketProvided ( ) { }
te	KEY	public void setImageID ( long imageID ) { this . imageID = imageID ; }
te	KEY	public LecturerDAOImpl ( ) { super ( Lecturer . class ) ; }
te	IDF	public void actionPerformed ( ActionEvent e ) { if ( cursorMode ) { log . println ( "Invalid key" ) ; } else { log . println ( "Identify what? (Use arrow keys to move and enter to select)" ) ; identify ( ) ; display . repaint ( ) ; } }
te	KEY	public int getCedRuc_Persona ( ) { return CedRuc_Persona ; }
te	IDF	private String nomeValido ( TipoCorJogador cor ) { boolean nomeValido = false ; String nome = null ; do { if ( cor == TipoCorJogador . BRANCO ) nome = cli . lerNomeJogadorBranco ( ) ; else nome = cli . lerNomeJogadorPreto ( ) ; String nomeCase = nome . toUpperCase ( ) ; if ( nomeCase . equals ( "C\u00C9RBERO" ) || nomeCase . equals ( "DION\u00CDSIO" ) || nomeCase . equals ( "ARES" ) || nomeCase . equals ( "ZEUS" ) || nomeCase . equals ( "PROMETEU" ) ) cli . exibirAlerta ( "Nome inv\u00E1lido  pertence a uma m\u00E1quina" ) ; else if ( nomeCase . trim ( ) . isEmpty ( ) ) cli . exibirAlerta ( "Nome inv\u00E1lido  forne\u00E7a um nome que n\u00E3o tenha somente espa\u00E7os vazios" ) ; else nomeValido = true ; } while ( ! nomeValido ) ; return nome ; }
te	KEY	protected Logger getLogger ( ) { return this . logger ; }
te	KEY	public void setId3 ( int id3 ) { this . id3 = id3 ; }
te	IDF	private void readObject ( java . io . ObjectInputStream s ) throws java . lang . ClassNotFoundException , java . io . IOException { super . readObject ( s , false ) ; }
te	IDF	private void jPContrasenaActionPerformed ( java . awt . event . ActionEvent evt ) { }
te	KEY	public char getG ( ) { return g ; }
te	KEY	public int getTotalRunTime ( ) { return convertTime ( totalRunTime ) ; }
te	IDF	public boolean setUserIp ( Map < String , Object > param ) { boolean flg = false ; try { sqlMapClient . update ( SqlMap . SET_IP , param ) ; flg = true ; } catch ( Exception e ) { log . error ( "\u8BBE\u7F6E\u7528\u6237\u767B\u5F55IP\u51FA\u9519" ) ; e . printStackTrace ( ) ; } return flg ; }
te	IDF	public SimpleIterator < DataCount < E >> getIterator ( ) { return new SimpleIterator < DataCount < E >> ( ) { GStack < BSTNode > stack = new GArrayStack < BSTNode > ( ) ; { if ( overallRoot != null ) { stack . push ( overallRoot ) ; } } public boolean hasNext ( ) { return ! stack . isEmpty ( ) ; } public DataCount < E > next ( ) { if ( ! hasNext ( ) ) { throw new java . util . NoSuchElementException ( ) ; } BSTNode nextNode = stack . pop ( ) ; if ( nextNode . left != null ) { stack . push ( nextNode . left ) ; } if ( nextNode . right != null ) { stack . push ( nextNode . right ) ; } return new DataCount < E > ( nextNode . data , nextNode . count ) ; } } ; }
te	IDF	@ Override public String getSingleFormalExpression ( ) { if ( ! this . getRemark ( ) . equals ( InfoEnum . ElementRemark . NORMAL . name ( ) ) ) { return "" ; } String expression = null ; switch ( InfoEnum . RequirementElementType . valueOf ( this . getType ( ) ) ) { case ACTOR : expression = "actor(" + this . getFormalName ( ) + ")." ; if ( this . getLayer ( ) . equals ( InfoEnum . Layer . APPLICATION . name ( ) ) ) { expression += "\n" + "application(" + this . getFormalName ( ) + ")." ; } else if ( this . getLayer ( ) . equals ( InfoEnum . Layer . PHYSICAL . name ( ) ) ) { expression += "\n" + "hardware(" + this . getFormalName ( ) + ")." ; } else { } expression += "\n" + "asset(" + this . getFormalName ( ) + ")." ; break ; case GOAL : expression = "goal(" + this . getFormalName ( ) + ")." ; if ( this . getLayer ( ) . equals ( InfoEnum . Layer . BUSINESS . name ( ) ) ) { expression += "\n" + "service(" + this . getFormalName ( ) + ")." ; } expression += "\n" + "asset(" + this . getFormalName ( ) + ")." ; break ; case TASK : expression = "task(" + this . getFormalName ( ) + ")." ; if ( this . getLayer ( ) != null && this . getLayer ( ) . equals ( InfoEnum . Layer . BUSINESS . name ( ) ) ) { expression += "\n" + "service(" + this . getFormalName ( ) + ")." ; } break ; case SOFTGOAL : expression = "softgoal(" + this . getFormalName ( ) + ")." ; break ; case DOMAIN_ASSUMPTION : expression = "d_assumption(" + this . getFormalName ( ) + ")." ; break ; case QUALITY_CONSTRAINT : expression = "q_constraint(" + this . getFormalName ( ) + ")." ; break ; case SECURITY_GOAL : expression = "sec_goal(" + this . getFormalName ( ) + ")." ; break ; case SECURITY_MECHANISM : expression = "sec_mechanism(" + this . getFormalName ( ) + ")." ; break ; case RESOURCE : expression = "resource(" + Func . prepareFormalExpression ( this . getName ( ) ) + ")." ; break ; case ANTI_GOAL : expression = "anti_goal(" + this . getFormalName ( ) + ")." ; break ; case NEW_ANTI_GOAL : expression = "anti_goal(" + this . getFormalName ( ) + ")." ; break ; default : expression = "" ; break ; } return expression ; }
te	KEY	void saveConfig ( ) throws JAXBException ;
te	KEY	protected abstract boolean validarCampos ( ) ;
te	KEY	@ Override public String PecaToString ( Peca peca ) { if ( peca == null ) return " " ; switch ( peca . getTipoPeca ( ) ) { case PEAO : return "P" ; case TORRE : return "T" ; case BISPO : return "B" ; case CAVALO : return "C" ; case REI : return "R" ; case RAINHA : return "D" ; default : return "Erro!" ; } }
te	KEY	public ChamadoDAO ( ) throws SQLException { super ( ) ; }
te	IDF	@ Test public void testParseInput ( ) { assertTrue ( parser . parseInput ( "      134123   GI!@#$%^&**()34VE 43 852789 MERC_+-=+-*//H342.//ANT q8-4385n          .          .        24nn CO2INS       .      ..  " ) ) ; assertArrayEquals ( "give" . toCharArray ( ) , parser . action . toCharArray ( ) ) ; assertArrayEquals ( "merchant" . toCharArray ( ) , parser . object . toCharArray ( ) ) ; assertArrayEquals ( "coins" . toCharArray ( ) , parser . target . toCharArray ( ) ) ; assertTrue ( parser . parseInput ( "give merchant coins" ) ) ; assertArrayEquals ( "give" . toCharArray ( ) , parser . action . toCharArray ( ) ) ; assertArrayEquals ( "merchant" . toCharArray ( ) , parser . object . toCharArray ( ) ) ; assertArrayEquals ( "coins" . toCharArray ( ) , parser . target . toCharArray ( ) ) ; assertTrue ( parser . parseInput ( "attack goblin with sword" ) ) ; assertArrayEquals ( "attack" . toCharArray ( ) , parser . action . toCharArray ( ) ) ; assertArrayEquals ( "sword" . toCharArray ( ) , parser . object . toCharArray ( ) ) ; assertArrayEquals ( "goblin" . toCharArray ( ) , parser . target . toCharArray ( ) ) ; assertTrue ( parser . parseInput ( "use sword to attack goblin" ) ) ; assertArrayEquals ( "attack" . toCharArray ( ) , parser . action . toCharArray ( ) ) ; assertArrayEquals ( "sword" . toCharArray ( ) , parser . object . toCharArray ( ) ) ; assertArrayEquals ( "goblin" . toCharArray ( ) , parser . target . toCharArray ( ) ) ; assertTrue ( parser . parseInput ( "throw sword at goblin" ) ) ; assertArrayEquals ( "toss" . toCharArray ( ) , parser . action . toCharArray ( ) ) ; assertArrayEquals ( "sword" . toCharArray ( ) , parser . object . toCharArray ( ) ) ; assertArrayEquals ( "goblin" . toCharArray ( ) , parser . target . toCharArray ( ) ) ; assertTrue ( parser . parseInput ( "put pocket lint in ears" ) ) ; assertArrayEquals ( "put" . toCharArray ( ) , parser . action . toCharArray ( ) ) ; assertArrayEquals ( "pocket lint" . toCharArray ( ) , parser . object . toCharArray ( ) ) ; assertArrayEquals ( "ears" . toCharArray ( ) , parser . target . toCharArray ( ) ) ; assertTrue ( parser . parseInput ( "give coins to merchant" ) ) ; assertArrayEquals ( "give" . toCharArray ( ) , parser . action . toCharArray ( ) ) ; assertArrayEquals ( "coins" . toCharArray ( ) , parser . object . toCharArray ( ) ) ; assertArrayEquals ( "merchant" . toCharArray ( ) , parser . target . toCharArray ( ) ) ; assertTrue ( parser . parseInput ( "swing at goblin with sword" ) ) ; assertArrayEquals ( "attack" . toCharArray ( ) , parser . action . toCharArray ( ) ) ; assertArrayEquals ( "sword" . toCharArray ( ) , parser . object . toCharArray ( ) ) ; assertArrayEquals ( "goblin" . toCharArray ( ) , parser . target . toCharArray ( ) ) ; assertTrue ( parser . parseInput ( "with shield  block" ) ) ; assertArrayEquals ( "raise" . toCharArray ( ) , parser . action . toCharArray ( ) ) ; assertArrayEquals ( "shield" . toCharArray ( ) , parser . object . toCharArray ( ) ) ; assertArrayEquals ( "" . toCharArray ( ) , parser . target . toCharArray ( ) ) ; assertTrue ( parser . parseInput ( "quickly and speedily give the gray old merchant my valuable shiny coins" ) ) ; assertArrayEquals ( "give" . toCharArray ( ) , parser . action . toCharArray ( ) ) ; assertArrayEquals ( "merchant" . toCharArray ( ) , parser . object . toCharArray ( ) ) ; assertArrayEquals ( "coins" . toCharArray ( ) , parser . target . toCharArray ( ) ) ; assertFalse ( parser . parseInput ( "la kdsfl ka lkds;l k gga" ) ) ; assertTrue ( parser . parseInput ( "quit aldksf ask alst ackl" ) ) ; assertArrayEquals ( "quit" . toCharArray ( ) , parser . action . toCharArray ( ) ) ; assertArrayEquals ( "" . toCharArray ( ) , parser . object . toCharArray ( ) ) ; assertArrayEquals ( "" . toCharArray ( ) , parser . target . toCharArray ( ) ) ; assertTrue ( parser . parseInput ( "hide behind dull rock red rock" ) ) ; assertArrayEquals ( "raise" . toCharArray ( ) , parser . action . toCharArray ( ) ) ; assertArrayEquals ( "dull rock" . toCharArray ( ) , parser . object . toCharArray ( ) ) ; assertArrayEquals ( "red rock" . toCharArray ( ) , parser . target . toCharArray ( ) ) ; }
te	IDF	@ Override public void actionPerformed ( ActionEvent e ) { escapeAction ( ) ; }
te	IDF	public static boolean sendMail ( String destinataire_unique , String cc , String title , String text ) { return true ; }
te	KEY	public HangingMan ( ) { super ( ) ; }
te	IDF	public static void main ( String [ ] args ) { AlternateSuspendResumeDemo asr = new AlternateSuspendResumeDemo ( ) ; Thread t = new Thread ( asr ) ; t . start ( ) ; try { Thread . sleep ( 1000 ) ; } catch ( InterruptedException x ) { } for ( int i = 0 ; i < 10 ; i ++ ) { asr . suspendRequest ( ) ; try { Thread . sleep ( 350 ) ; } catch ( InterruptedException x ) { } System . out . println ( "dsr.areValuesEqual()=" + asr . areValuesEqual ( ) ) ; asr . resumeRequest ( ) ; try { Thread . sleep ( ( long ) ( Math . random ( ) * 2000.0 ) ) ; } catch ( InterruptedException x ) { } } System . exit ( 0 ) ; }
te	IDF	public static int getManhattanDistance ( Position p0 , Position p1 ) { return Math . abs ( p1 . _x - p0 . _x ) + Math . abs ( p1 . _y - p0 . _y ) ; }
te	IDF	public static boolean line_box_xywh ( double lx0 , double ly0 , double lx1 , double ly1 , double rx0 , double ry0 , double rWidth , double rHeight ) { int out1 , out2 ; if ( ( out2 = outcode ( lx1 , ly1 , rx0 , ry0 , rWidth , rHeight ) ) == 0 ) { return true ; } while ( ( out1 = outcode ( lx0 , ly0 , rx0 , ry0 , rWidth , rHeight ) ) != 0 ) { if ( ( out1 & out2 ) != 0 ) { return false ; } if ( ( out1 & ( OUT_LEFT | OUT_RIGHT ) ) != 0 ) { double x = rx0 ; if ( ( out1 & OUT_RIGHT ) != 0 ) { x += rWidth ; } ly0 = ly0 + ( x - lx0 ) * ( ly1 - ly0 ) / ( lx1 - lx0 ) ; lx0 = x ; } else { double y = ry0 ; if ( ( out1 & OUT_BOTTOM ) != 0 ) { y += rHeight ; } lx0 = lx0 + ( y - ly0 ) * ( lx1 - lx0 ) / ( ly1 - ly0 ) ; ly0 = y ; } } return true ; }
te	KEY	protected boolean drop ( ) { if ( Game . player . dropItem ( this ) ) { System . out . println ( "You drop your " + this . name + " on the ground." ) ; return true ; } return false ; }
te	IDF	public byte [ ] cshootSequence ( int [ ] ... shots ) { byte [ ] [ ] byteShots = new byte [ shots . length ] [ 24 ] ; int shotCount = 0 ; for ( int [ ] shot : shots ) { byteShots [ shotCount ] = ClientMessageEncoder . mergeArray ( intToByteArray ( shot [ 0 ] ) , intToByteArray ( shot [ 1 ] ) , intToByteArray ( shot [ 2 ] ) , intToByteArray ( shot [ 3 ] ) , intToByteArray ( shot [ 4 ] ) , intToByteArray ( shot [ 5 ] ) ) ; shotCount ++ ; } return super . cshootSequence ( byteShots ) ; }
te	IDF	private int getInventory ( ) { try { return new dao . ProductDAO ( ) . getProductByProductID ( productId ) . getUnitsInStock ( ) ; } catch ( SQLException | NamingException e ) { e . printStackTrace ( ) ; return 0 ; } }
te	KEY	public boolean getWorking ( ) { return _isWorking ; }
te	IDF	public SentItem findOne ( int index ) { return sentItems . get ( index ) ; }
te	IDF	public void delete ( UTypePk pk ) throws UTypeDaoException { long t1 = System . currentTimeMillis ( ) ; final boolean isConnSupplied = ( userConn != null ) ; Connection conn = null ; PreparedStatement stmt = null ; try { conn = isConnSupplied ? userConn : ResourceManager . getConnection ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Executing " + SQL_DELETE + " with PK: " + pk ) ; } stmt = conn . prepareStatement ( SQL_DELETE ) ; stmt . setString ( 1 , pk . getUType ( ) ) ; int rows = stmt . executeUpdate ( ) ; long t2 = System . currentTimeMillis ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( rows + " rows affected (" + ( t2 - t1 ) + " ms)" ) ; } } catch ( Exception _e ) { logger . error ( "Exception: " + _e . getMessage ( ) , _e ) ; throw new UTypeDaoException ( "Exception: " + _e . getMessage ( ) , _e ) ; } finally { ResourceManager . close ( stmt ) ; if ( ! isConnSupplied ) { ResourceManager . close ( conn ) ; } } }
te	KEY	@ Override public long getNativeConsumer ( ) { throw new InternalError ( "Stroker doesn't use a native consumer" ) ; }
te	IDF	public String findPwd ( User user ) throws ServiceException ;
te	KEY	public void setId_Orden ( int Id_Orden ) { this . Id_Orden = Id_Orden ; }
te	KEY	public int getSpeed ( ) { return speed ; }
te	KEY	public int getIdproveedor ( ) { return idproveedor ; }
te	IDF	public void setHour ( DateTime hour ) { this . hour = hour ; }
te	IDF	Query ( String id ) { this . id = id ; }
te	KEY	protected void threadStopped ( ) { }
te	IDF	public Gircosconfig . Vhosts getVhosts ( ) { return vhosts ; }
te	KEY	public void setCollided ( boolean isCollided ) { this . isCollided = isCollided ; }
te	IDF	public static UnitOfWork create ( class < ? > workClass , TransactionPolicy policyGraph ) { UnitOfWork u = null ; try { Constructor < ? > c = workClass . getDeclaredConstructor ( ) ; c . setAccessible ( true ) ; u = ( UnitOfWork ) c . newInstance ( ) ; for ( Transaction t : policyGraph . getTransaction ( ) ) { if ( workClass . getName ( ) . equalsIgnoreCase ( t . getId ( ) ) ) { for ( Policy polInfo : t . getPolicy ( ) ) { class < ? > policy = class . forName ( polInfo . getId ( ) ) ; business . policy . Policy bp = ( business . policy . Policy ) policy . getDeclaredConstructor ( ) . newInstance ( ) ; bp . setPolicyInfo ( polInfo ) ; u . policies . add ( bp ) ; } break ; } } } catch ( NoSuchMethodException | SecurityException | InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException | ClassNotFoundException e ) { e . printStackTrace ( ) ; } return u ; }
te	KEY	public SieveOfAtkin ( int limit ) { this . sieve = new int [ limit + 1 ] ; }
te	IDF	private void addAndGetCount ( String message , int [ ] input , int key , int expected ) { for ( int num : input ) { dc . incCount ( num ) ; } assertEquals ( message , expected , dc . getCount ( key ) ) ; }
te	KEY	public int matchesWon ( ) { return matchesWon ; }
te	KEY	public boolean canFinishWith ( int count , int i ) { return false ; }
te	KEY	public void setOrderDetailNum ( int orderDetailNum ) { this . orderDetailNum = orderDetailNum ; }
te	IDF	@ SuppressWarnings ( "unchecked" ) protected T getRequest ( ) { return ( T ) this . query . getRequest ( ) ; }
te	KEY	public void setUseSectionNumbers ( boolean useSectionNumbers ) { this . useSectionNumbers = useSectionNumbers ; }
te	IDF	public static TipoCorJogador parseCorJogador ( String corJogador ) { if ( corJogador . equals ( "BRANCO" ) ) return TipoCorJogador . BRANCO ; return TipoCorJogador . PRETO ; }
te	KEY	public String getVersion ( ) { return this . version ; }
te	IDF	public void changerVue ( AbstractView view ) { this . container = view ; update ( ) ; this . container . addListeners ( ) ; }
te	IDF	@ Test public void FullHouse_Test ( ) { ArrayList < PokerCard > cards = new ArrayList < PokerCard > ( ) ; cards . add ( new PokerCard ( Card . As , Suit . Corazones ) ) ; cards . add ( new PokerCard ( Card . As , Suit . Picas ) ) ; cards . add ( new PokerCard ( Card . Cinco , Suit . Corazones ) ) ; cards . add ( new PokerCard ( Card . As , Suit . Diamantes ) ) ; cards . add ( new PokerCard ( Card . Cinco , Suit . Trebol ) ) ; String rankScale = this . GetRank ( cards ) ; assertEquals ( rankScale , PokerRankingCatalog . FULL_HOUSE ) ; }
te	IDF	public BigDecimal run ( double val ) { double move = randInt ( 1 , 12 ) ; try { Thread . sleep ( 1000 ) ; } catch ( InterruptedException ignored ) { } BigDecimal result = new BigDecimal ( 1.2345 ) ; return result ; }
te	KEY	@ Override public int getX ( int x , int width ) { return x ; }
te	IDF	@ Override public boolean putIfAbsent ( K key , V value ) { if ( key == null ) { throw new IllegalArgumentException ( "key awas null" ) ; } if ( value == null ) { throw new IllegalArgumentException ( "value was null" ) ; } int offset = offset ( key ) ; int reprobes = 0 ; while ( keys [ offset ] != null && keys [ offset ] != Tombstone ) { if ( keys [ offset ] . equals ( key ) ) { return false ; } offset = nextHop ( offset ) ; if ( offset == offset ( key ) ) { return false ; } reprobes ++ ; } keys [ offset ] = key ; values [ offset ] = value ; increaseSize ( ) ; checkResize ( reprobes ) ; return true ; }
te	IDF	public void actionPerformed ( ActionEvent arg0 ) { close . doClick ( ) ; }
te	KEY	public synchronized void xsetR3InitialDelay ( int a ) { r3ID = a ; }
te	IDF	public void actionRegister ( ) { bregister . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { doRegister ( ) ; } } ) ; }
te	KEY	public boolean interact ( String action , Interactable target ) { if ( super . interact ( action , target ) ) { return true ; } else if ( action . equals ( "drop" ) ) { return this . drop ( ) ; } else if ( action . equals ( "toss" ) ) { return this . toss ( target ) ; } else if ( action . equals ( "attack" ) ) { return this . attack ( target ) ; } else if ( action . equals ( "eat" ) ) { return this . eat ( ) ; } else if ( action . equals ( "give" ) ) { return this . give ( target ) ; } return false ; }
te	KEY	public double getPreciomedicamentos ( ) { return preciomedicamentos ; }
te	KEY	boolean isVisible ( ) ;
te	IDF	private boolean exe ( String source , String regex ) { try { Pattern pattern = Pattern . compile ( regex ) ; Matcher matcher = pattern . matcher ( source ) ; boolean result = matcher . matches ( ) ; return result ; } catch ( Exception e ) { return false ; } }
te	IDF	static int [ ] sort ( int [ ] player ) { int [ ] sorted = new int [ 5 ] ; for ( int i = 0 ; i < 5 ; i ++ ) { int min = 52 ; int minLoc = 5 ; for ( int n = 0 ; n < 5 ; n ++ ) if ( player [ n ] < min ) { min = player [ n ] ; minLoc = n ; } player [ minLoc ] = 52 ; sorted [ i ] = min ; } return sorted ; }
te	IDF	@ Override public Vector add ( Vector v ) { HashMapVector res = new HashMapVector ( ) ; res . initialize ( n ) ; HashSet < Integer > keys = new HashSet < Integer > ( ) ; keys . addAll ( vec . keySet ( ) ) ; keys . addAll ( ( ( HashMapVector ) v ) . vec . keySet ( ) ) ; for ( Integer key : keys ) { res . set ( key , this . get ( key ) + v . get ( key ) ) ; } return res ; }
te	KEY	public void setId ( long id ) { this . id = id ; }
te	IDF	@ Override public R apply ( R result , A input , AtomicBoolean reduced ) { R ret = result ; if ( taken < n ) { ret = rf . apply ( result , input , reduced ) ; taken ++ ; } else { reduced . set ( true ) ; } return ret ; }
te	KEY	public void setVPH_Empleado ( double VPH_Empleado ) { this . VPH_Empleado = VPH_Empleado ; }
te	IDF	private SwingWorker < M , U > createNewSwingWorker ( ) { return new SwingWorker < M , U > ( ) { @ Override protected M doInBackground ( ) throws Exception { return SearchTask . this . search ( ) ; } @ Override protected void done ( ) { try { M m = get ( ) ; SearchTask . this . done ( m ) ; } catch ( InterruptedException | ExecutionException ex ) { System . err . println ( "Exception in search task: " + ex ) ; } } } ; }
te	KEY	public void adjustLifetimeOverUnder ( int amount ) { this . lifetimeOverUnder += amount ; }
te	IDF	public AbstractTIPPBuilder setCreator ( TIPPCreator creator ) { getManifestBuilder ( ) . setCreator ( creator ) ; return this ; }
te	KEY	public int getDifficulty ( ) { return this . difficulty ; }
te	KEY	public void setExitMM ( boolean exitMM ) { this . exitMM = exitMM ; }
te	KEY	public int getNumberOfOnlineUsers ( ) { return this . onlineUsers . size ( ) ; }
te	KEY	public int getSize ( ) { return size ; }
te	KEY	public double [ ] getDirection ( ) { return direction ; }
te	KEY	public double getHeight ( ) { return DataKeeper . getHeight ( ) ; }
te	KEY	public synchronized void xsetRTrepeatable ( boolean flag ) { isRTrepeatable = flag ; }
te	KEY	public int getId ( ) { return id ; }
te	KEY	public boolean equals ( Object _other ) { if ( _other == null ) { return false ; } if ( _other == this ) { return true ; } if ( ! ( _other instanceof MsgStatus ) ) { return false ; } final MsgStatus _cast = ( MsgStatus ) _other ; if ( msgStatus == null ? _cast . msgStatus != msgStatus : ! msgStatus . equals ( _cast . msgStatus ) ) { return false ; } return true ; }
te	KEY	@ Override public double [ ] getWeights ( ) { double [ ] result = { 3.75 , 3.75 , 3.75 , 3.75 } ; return result ; }
te	KEY	private static boolean checkKnownPrimes ( long n ) { if ( n > getLastPrime ( ) ) { return false ; } else { for ( int i = 0 ; i < np ; i ++ ) { if ( n == primes [ i ] ) { return true ; } } return false ; } }
te	KEY	private static boolean isDivisible ( final int number , final int divisor ) { final int result = number / divisor ; return ( number == ( result * divisor ) ) ; }
te	KEY	public long getFlightHistoryId ( ) { return flightHistoryId ; }
te	IDF	private void encerrarPartida ( AplJogo apljogo ) { cli . atualizar ( apljogo . getTabuleiro ( ) , apljogo . getJogadorBrancas ( ) , apljogo . getJogadorPretas ( ) ) ; TipoSituacaoPartida motivoFim = apljogo . getSituacaoPartida ( ) ; switch ( motivoFim ) { case VITORIA : case DESISTENCIA : String nomeVencedor = apljogo . getNomeVencedor ( ) ; cli . fechamentoDaPartida ( "Vit\u00F3ria para o jogador: " + nomeVencedor ) ; break ; case EMPATE : cli . fechamentoDaPartida ( "A partida terminou em um empate." ) ; break ; case PAUSA : cli . fechamentoDaPartida ( "Jogo foi pausado." ) ; break ; default : break ; } try { manipuladorPartidas . gravarPartida ( apljogo ) ; } catch ( IOException e ) { cli . exibirAlerta ( "N\u00E3o foi poss\u00EDvel gravar a partida" ) ; } }
te	KEY	public searchHandler ( ) { super ( ) ; }
te	IDF	public void setPhone1HomeType ( JRadioButton phone1HomeType ) { this . phone1HomeType = phone1HomeType ; }
te	KEY	public int getId ( ) { return id ; }
te	IDF	public void store ( Matrix x , double t ) { trajectory . add ( x ) ; time . add ( t ) ; }
te	IDF	private void refresh ( String text ) { if ( ! "" . equals ( text ) ) setLabelText ( text ) ; addLabel ( ) ; }
te	IDF	public String readQueryLine ( ) { Scanner sc = new Scanner ( System . in ) ; System . out . println ( "Enter your query:" ) ; System . out . print ( "> " ) ; return sc . nextLine ( ) . replaceAll ( " " , "" ) ; }
te	KEY	public Builder bedAndBreakfast ( boolean selfServing ) { this . selfServing = selfServing ; return this ; }
te	IDF	@ Override public void update ( ) { if ( Math . abs ( u . vx ) < Movable . VELOCITY_THRESHOLD && Math . abs ( u . vy ) < Movable . VELOCITY_THRESHOLD ) { return ; } double desiredOrientation = Math . atan2 ( u . vy , u . vx ) ; double orientationDiff = Utils . modulo2Pi ( desiredOrientation - u . getOrientation ( ) ) ; double oa = Math . abs ( orientationDiff ) ; if ( oa < CLOSEENOUGH ) { return ; } double rv = c * orientationDiff ; if ( oa < SLOWDOWN ) { rv *= oa / SLOWDOWN ; } u . addAngular ( rv ) ; }
te	IDF	public boolean execute ( Object parameterBean ) throws Exception { setBean ( parameterBean ) ; return execute ( ) ; }
te	IDF	@ SuppressWarnings ( "unchecked" ) private void initComponents ( ) { txtUserName = new javax . swing . JTextField ( ) ; txtPuesto = new javax . swing . JTextField ( ) ; txtEstado = new javax . swing . JTextField ( ) ; passPassword = new javax . swing . JPasswordField ( ) ; labelRound1 = new org . edisoncor . gui . label . LabelRound ( ) ; labelRound2 = new org . edisoncor . gui . label . LabelRound ( ) ; labelRound3 = new org . edisoncor . gui . label . LabelRound ( ) ; labelRound4 = new org . edisoncor . gui . label . LabelRound ( ) ; buttonColoredAction1 = new org . edisoncor . gui . button . ButtonColoredAction ( ) ; buttonTask1 = new org . edisoncor . gui . button . ButtonTask ( ) ; txtEstado . setEditable ( false ) ; passPassword . setEditable ( false ) ; passPassword . setText ( "jPasswordField1" ) ; labelRound1 . setBackground ( new java . awt . Color ( 153 , 0 , 0 ) ) ; labelRound1 . setText ( "UserName" ) ; labelRound2 . setBackground ( new java . awt . Color ( 153 , 0 , 0 ) ) ; labelRound2 . setText ( "Password" ) ; labelRound3 . setBackground ( new java . awt . Color ( 153 , 0 , 0 ) ) ; labelRound3 . setText ( "Puesto" ) ; labelRound4 . setBackground ( new java . awt . Color ( 153 , 0 , 0 ) ) ; labelRound4 . setText ( "Estado" ) ; buttonColoredAction1 . setBackground ( new java . awt . Color ( 255 , 51 , 153 ) ) ; buttonColoredAction1 . setText ( "Change Password" ) ; buttonColoredAction1 . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { buttonColoredAction1ActionPerformed ( evt ) ; } } ) ; buttonTask1 . setIcon ( new javax . swing . ImageIcon ( getClass ( ) . getResource ( "/QATracker/imagenes/1397548955_stock_save-as.png" ) ) ) ; buttonTask1 . setText ( "Save" ) ; buttonTask1 . setDescription ( " " ) ; buttonTask1 . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { buttonTask1ActionPerformed ( evt ) ; } } ) ; javax . swing . GroupLayout layout = new javax . swing . GroupLayout ( getContentPane ( ) ) ; getContentPane ( ) . setLayout ( layout ) ; layout . setHorizontalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( javax . swing . GroupLayout . Alignment . TRAILING , layout . createSequentialGroup ( ) . addGap ( 147 , 147 , 147 ) . addComponent ( txtUserName , javax . swing . GroupLayout . PREFERRED_SIZE , 111 , javax . swing . GroupLayout . PREFERRED_SIZE ) . addContainerGap ( javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) ) . addGroup ( javax . swing . GroupLayout . Alignment . TRAILING , layout . createSequentialGroup ( ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addGap ( 0 , 0 , short . MAX_VALUE ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( labelRound3 , javax . swing . GroupLayout . Alignment . TRAILING , javax . swing . GroupLayout . PREFERRED_SIZE , 62 , javax . swing . GroupLayout . PREFERRED_SIZE ) . addComponent ( labelRound4 , javax . swing . GroupLayout . Alignment . TRAILING , javax . swing . GroupLayout . PREFERRED_SIZE , 62 , javax . swing . GroupLayout . PREFERRED_SIZE ) ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) ) . addGroup ( javax . swing . GroupLayout . Alignment . TRAILING , layout . createSequentialGroup ( ) . addGap ( 0 , 36 , short . MAX_VALUE ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( labelRound1 , javax . swing . GroupLayout . PREFERRED_SIZE , 84 , javax . swing . GroupLayout . PREFERRED_SIZE ) . addComponent ( labelRound2 , javax . swing . GroupLayout . PREFERRED_SIZE , 84 , javax . swing . GroupLayout . PREFERRED_SIZE ) ) . addGap ( 27 , 27 , 27 ) ) ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( txtPuesto , javax . swing . GroupLayout . PREFERRED_SIZE , 111 , javax . swing . GroupLayout . PREFERRED_SIZE ) . addGroup ( layout . createSequentialGroup ( ) . addComponent ( passPassword , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) . addGap ( 30 , 30 , 30 ) . addComponent ( buttonColoredAction1 , javax . swing . GroupLayout . PREFERRED_SIZE , 138 , javax . swing . GroupLayout . PREFERRED_SIZE ) ) . addComponent ( txtEstado , javax . swing . GroupLayout . PREFERRED_SIZE , 111 , javax . swing . GroupLayout . PREFERRED_SIZE ) . addComponent ( buttonTask1 , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) ) . addGap ( 94 , 94 , 94 ) ) ) ; layout . setVerticalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addGap ( 29 , 29 , 29 ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE ) . addComponent ( txtUserName , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) . addComponent ( labelRound1 , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED , 15 , short . MAX_VALUE ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE ) . addComponent ( passPassword , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) . addComponent ( labelRound2 , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addComponent ( buttonColoredAction1 , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) ) . addGap ( 18 , 18 , 18 ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( txtPuesto , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) . addComponent ( labelRound3 , javax . swing . GroupLayout . PREFERRED_SIZE , 20 , javax . swing . GroupLayout . PREFERRED_SIZE ) ) . addGap ( 18 , 18 , 18 ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( txtEstado , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) . addComponent ( labelRound4 , javax . swing . GroupLayout . PREFERRED_SIZE , 20 , javax . swing . GroupLayout . PREFERRED_SIZE ) ) . addGap ( 18 , 18 , 18 ) . addComponent ( buttonTask1 , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) . addContainerGap ( 25 , short . MAX_VALUE ) ) ) ; pack ( ) ; }
te	IDF	public GestionProducto ( ) { Conexion . GetInstancia ( ) . CadenaConexion ( ) ; }
te	KEY	@ Override public boolean lastTurnTerminatedCorrect ( ) { return this . currentTurn . terminatedCorrect ; }
te	KEY	static public int getTianGanByYear ( int year ) { return ( year - 4 ) % 60 % 10 ; }
te	KEY	public abstract void eat ( String something ) ;
te	IDF	public MsgType findByPrimaryKey ( MsgTypePk pk ) throws MsgTypeDaoException ;
te	KEY	int addedColsCount ( ) ;
te	IDF	public void setMsg ( String msg ) { this . msg = msg ; }
te	IDF	public NotaFiscalResource ( URL wsdlLocation , QName serviceName , WebServiceFeature ... features ) { super ( wsdlLocation , serviceName , features ) ; }
te	KEY	public String getMessage ( ) { return this . message ; }
te	IDF	public boolean contains ( Map . Entry < Key , Val > entry ) { Key key = entry . getKey ( ) ; Object val = FHashMap . get ( map_tree , key , hashCode ( key ) ) ; return val != FHashMap . NO_ELEMENT && eql ( val , entry . getValue ( ) ) ; }
te	KEY	@ Override public boolean clearAllComponents ( ) { return false ; }
te	IDF	public static void main ( String [ ] args ) { CoolService c = CoolService . getInstance ( ) ; Teacher t = c . makeTeacher ( ) ; Student s = c . makeStudent ( ) ; Ipad i = new Ipad ( ) ; Kniha k = new Kniha ( ) ; c . join ( t , k ) ; c . join ( s , i ) ; }
te	IDF	public void displayConnection ( ) { Iterator < Connection > iter = activeConnections . iterator ( ) ; Connection c ; System . out . println ( "--- ConnectionIDs ---" ) ; while ( iter . hasNext ( ) ) { c = iter . next ( ) ; System . out . println ( "ID: " + c . getId ( ) + "  Socket: " + c . getS ( ) + "  Input Stream: " + c . getOIS ( ) + "  Output Stream: " + c . getOOS ( ) ) ; } }
te	IDF	public void movePlayerLeft ( ) { if ( ! player . isDrunk ( ) ) { if ( player . getLocation ( ) . getColumn ( ) > 0 ) { moveSentient ( player , - 1 , 0 ) ; } } else { moveRandomly ( player ) ; } }
te	IDF	public static Date getCurrentDate ( ) { DateFormat dateFormat = new SimpleDateFormat ( "dd-mm-yyyy" ) ; Calendar calendar = Calendar . getInstance ( ) ; return calendar . getTime ( ) ; }
te	KEY	@ Override public int getSelection ( ) { if ( firstRadioButton . isSelected ( ) ) { return 0 ; } else { return 1 ; } }
te	KEY	public void close ( ) ;
te	IDF	public InviteResPk insert ( InviteRes dto ) throws InviteResDaoException ;
te	IDF	public void writeln ( String str ) throws IOException { bufferedWriter . write ( str ) ; bufferedWriter . write ( System . lineSeparator ( ) ) ; }
te	IDF	@ Override public void endSession ( ) { try { clientSocket . close ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }
te	IDF	private void setGameOver ( ) { middlePanel . removeAll ( ) ; bottomPanel . removeAll ( ) ; JLabel infoLabel = new JLabel ( "Correct answer was: " + game . getCurrentCount ( ) ) ; middlePanel . add ( infoLabel ) ; }
te	KEY	public void Reset ( ) { this . getEligibilityGroup ( ) . clearSelection ( ) ; }
te	KEY	public int getSize ( ) { return publishers . length ; }
te	IDF	public List < Task > getFilteredTasks ( String title , String assignedTo , String status , Calendar fromDate , Calendar toDate , String priority ) { List < Task > filteredTasks = new ArrayList < Task > ( ) ; boolean containsTitle ; boolean isUser ; boolean isStatus ; boolean afterFromDate ; boolean beforeToDate ; boolean isPriority ; for ( Task t : tasks ) { containsTitle = title . equals ( "" ) || t . getTitle ( ) . toLowerCase ( ) . contains ( title . toLowerCase ( ) ) ; isUser = assignedTo . equals ( NO_FILTER ) || t . getAssignedTo ( ) . equals ( assignedTo ) ; isStatus = status . equals ( NO_FILTER ) || t . getStatusString ( ) . equals ( status ) ; afterFromDate = compareDates ( fromDate , t . getDueDate ( ) ) <= 0 ; beforeToDate = compareDates ( toDate , t . getDueDate ( ) ) >= 0 ; isPriority = priority . equals ( NO_FILTER ) || t . getPriorityString ( ) . equals ( priority ) ; if ( containsTitle && isUser && isStatus && afterFromDate && beforeToDate && isPriority ) { filteredTasks . add ( t ) ; } } return filteredTasks ; }
te	KEY	public void start ( ) ;
te	KEY	public int getX43D ( ) { return 40 ; }
te	IDF	public void set ( UsuarioBean oUsuarioBean ) throws Exception { try { oMysql . conexion ( enumTipoConexion ) ; oMysql . initTrans ( ) ; if ( oUsuarioBean . getId ( ) == 0 ) { oUsuarioBean . setId ( oMysql . insertOne ( "usuario" ) ) ; } oMysql . updateOne ( oUsuarioBean . getId ( ) , "usuario" , "login" , oUsuarioBean . getLogin ( ) ) ; oMysql . updateOne ( oUsuarioBean . getId ( ) , "usuario" , "password" , oUsuarioBean . getPassword ( ) ) ; oMysql . commitTrans ( ) ; } catch ( Exception e ) { oMysql . rollbackTrans ( ) ; throw new Exception ( "UsuarioDao.setCliente: Error: " + e . getMessage ( ) ) ; } finally { oMysql . desconexion ( ) ; } }
te	KEY	@ Override public int getColumnCount ( ) { return 3 ; }
te	KEY	public static MailQueue getInstance ( ) { if ( mailQueue == null ) { mailQueue = new MailQueue ( ) ; } return mailQueue ; }
te	IDF	public void removePropertyChangeListener ( PropertyChangeListener listener ) { propertyChangeSupport . removePropertyChangeListener ( listener ) ; }
te	KEY	@ Override public void startGame ( boolean startGame ) { }
te	KEY	public void setId ( int id ) { this . id = id ; }
te	IDF	@ Test ( timeout = TIMEOUT ) public void testSortDuplicatesHS ( ) { Integer [ ] testArray = { 2 , 2 , 1 , 1 , 3 , 3 } ; Integer [ ] copyArray = { 1 , 1 , 2 , 2 , 3 , 3 } ; sorter . heapSort ( testArray , intcomp ) ; assertTrue ( "Testing heapsort for duplicates" , Arrays . equals ( testArray , copyArray ) ) ; }
te	IDF	private void showSets ( ) { final JPanel innerPanel = decoratePanel ( new JPanel ( ) ) ; innerPanel . setLayout ( new SetsLayout ( ) ) ; buttons = new ArrayList ( ) ; for ( PhotoSet set : sets ) { JButton button = createSetButton ( set ) ; innerPanel . add ( button ) ; buttons . add ( button ) ; AsyncLoader . getInstance ( ) . load ( new LoadSetCover ( set , button ) ) ; } innerPanel . addMouseListener ( flickrFrame ) ; setLayout ( new BorderLayout ( 0 , 0 ) ) ; final JScrollPane scrollPane = new JScrollPane ( innerPanel ) ; scrollPane . setBorder ( null ) ; decorateScrollBar ( scrollPane . getVerticalScrollBar ( ) ) ; scrollPane . setHorizontalScrollBarPolicy ( JScrollPane . HORIZONTAL_SCROLLBAR_NEVER ) ; scrollPane . addComponentListener ( new ComponentListener ( ) { @ Override public void componentShown ( ComponentEvent e ) { } @ Override public void componentResized ( ComponentEvent e ) { Dimension jspSize = ( ( JScrollPane ) e . getComponent ( ) ) . getViewport ( ) . getSize ( ) ; innerPanel . setBounds ( 0 , 0 , jspSize . width , jspSize . height ) ; } @ Override public void componentMoved ( ComponentEvent e ) { } @ Override public void componentHidden ( ComponentEvent e ) { } } ) ; add ( scrollPane , BorderLayout . CENTER ) ; revalidate ( ) ; repaint ( ) ; }
te	IDF	public void getAnswers ( ) { Scanner input = new Scanner ( System . in ) ; System . out . println ( "Connect 4 Quiz \n Please answer all questions with a " + "'True or False' answer.\n" ) ; System . out . println ( "Question #1: This game is only played with 1 player." ) ; this . question1 = input . next ( ) ; switch ( question1 ) { case "False" : System . out . println ( "Correct\n" ) ; points = ( short ) ( points + correctAns ) ; break ; case "True" : System . out . println ( "Incorrect\n" ) ; break ; default : System . out . println ( "Invalid Entry\n" ) ; break ; } System . out . println ( "Question #2: The first player to score 4 discs in\n" + "a row either vertically  horizontally or diagonally in the winner." ) ; this . question2 = input . next ( ) ; switch ( question2 ) { case "True" : System . out . println ( "Correct\n" ) ; points = ( short ) ( points + correctAns ) ; break ; case "False" : System . out . println ( "Incorrect\n" ) ; break ; default : System . out . println ( "Invalid Entry\n" ) ; break ; } System . out . println ( "Question #3: A player may not take two turns consecutively." ) ; this . question3 = input . next ( ) ; switch ( question3 ) { case "True" : System . out . println ( "Correct\n" ) ; points = ( short ) ( points + correctAns ) ; break ; case "False" : System . out . println ( "Incorrect\n" ) ; break ; default : System . out . println ( "Invalid Entry\n" ) ; break ; } System . out . println ( "Question #4: A player may not undo a turn once taken." ) ; this . question4 = input . next ( ) ; switch ( question4 ) { case "True" : System . out . println ( "Correct\n" ) ; points = ( short ) ( points + correctAns ) ; break ; case "False" : System . out . println ( "Incorrect\n" ) ; break ; default : System . out . println ( "Invalid Entry\n" ) ; break ; } System . out . println ( "Question #5: Connect 4 is exactly the same as Tic Tac Toe." ) ; this . question5 = input . next ( ) ; switch ( question5 ) { case "False" : System . out . println ( "Correct\n" ) ; points = ( short ) ( points + correctAns ) ; break ; case "True" : System . out . println ( "Incorrect\n" ) ; break ; default : System . out . println ( "Invalid Entry\n" ) ; break ; } quizPercentage = ( this . points * 100 / this . totalPoints ) ; System . out . println ( "\tYour Quiz Score is " + this . points + ". This gives you a " + this . quizPercentage + "%" ) ; if ( this . quizPercentage <= 60 ) { System . out . println ( "\tFailing Grade - Please retake the quiz." ) ; } else System . out . println ( "\tYou PASSED Congratulations!" ) ; }
te	IDF	@ Test public void canUpdateCartZeroValue ( ) { boolean isNotException = true ; try { insertShoppingCart ( user1 . getEmail ( ) , prod_id1 , 20 ) ; shoppingCart . updateCart ( user1 , prod_id1 , 0 ) ; } catch ( WebshopAppException e ) { isNotException = false ; } Map < Integer , Integer > sc = getShoppingCart ( user1 ) ; deleteShoppingCartUser ( user1 ) ; assertTrue ( isNotException && sc . get ( prod_id1 ) == null ) ; }
te	KEY	public synchronized void xsetR5InitialDelay ( int a ) { r5ID = a ; }
te	KEY	public String getTilesetName ( ) { return this . tilesetName ; }
te	KEY	public void setLargo ( int largo ) { this . largo = largo ; }
te	KEY	public int getThreeSpaceTiles ( ) { return threeSpaceTiles ; }
te	KEY	@ Override public String serialize ( ) { return null ; }
te	IDF	public List < Klas > getKlassenVanVak ( long vakId ) { List < long > klasIds = new ArrayList < long > ( ) ; List < Klas > klassen = new ArrayList < Klas > ( ) ; try { PreparedStatement prepareStatement = manager . prepareStatement ( "SELECT klas_id FROM vak_klas WHERE vak_id = ?" ) ; prepareStatement . setLong ( 1 , vakId ) ; ResultSet resultSet = prepareStatement . executeQuery ( ) ; while ( resultSet . next ( ) ) { klasIds . add ( resultSet . getLong ( 1 ) ) ; } for ( long klasId : klasIds ) { klassen . add ( getKlas ( klasId ) ) ; } return klassen ; } catch ( SQLException e ) { e . printStackTrace ( ) ; return klassen ; } }
te	KEY	public double getValue ( ) { return element . getValue ( ) ; }
te	KEY	public boolean interact ( String action , Interactable target ) { if ( super . interact ( action , target ) ) { return true ; } else if ( action . equals ( "go" ) ) { return this . go ( ) ; } return false ; }
te	KEY	public double getDescuento ( ) { return descuento ; }
te	IDF	public Position [ ] getEmplacementsLibres ( ) { ArrayList < Position > positions_libres = new ArrayList < Position > ( ) ; for ( int i = 0 ; i < longueur ; i ++ ) { for ( int j = 0 ; j < hauteur ; j ++ ) { Position position_courante = new Position ( i , j ) ; if ( ! existeBloc ( position_courante ) ) positions_libres . add ( position_courante ) ; } } return positions_libres . toArray ( new Position [ positions_libres . size ( ) ] ) ; }
te	IDF	@ Override public Collection < String > getColumnNames ( ) { return columnDefinitions . keySet ( ) ; }
te	KEY	public boolean isEnabled ( ) { return enabled ; }
te	KEY	@ Override public final boolean equals ( Object obj ) { if ( ! ( obj instanceof LifeBuff ) ) return false ; return super . equals ( obj ) ; }
te	KEY	public boolean isCellEditable ( int row , int column ) { if ( column == 0 || column == 1 ) { return false ; } else { return true ; } }
te	KEY	public void setRadius ( double radius ) { this . radius = radius ; }
te	KEY	private static int convertHexadecimalCharToDecimalNumber ( char digit ) { switch ( digit ) { case A : return 10 ; case B : return 11 ; case C : return 12 ; case D : return 13 ; case E : return 14 ; case F : return 15 ; default : return Integer . parseInt ( "" + digit ) ; } }
te	KEY	@ Override public int getBox ( ) { return this . box ; }
te	KEY	@ Override public boolean isColor ( ) { return this . isEqual ( COR ) ; }
te	KEY	public ScrambleDictionary ( ) { this . wordsAdded = 0 ; }
te	KEY	public boolean supprimerVoyage ( ) { return false ; }
te	IDF	private void writeAttribute ( java . lang . String prefix , java . lang . String namespace , java . lang . String attName , java . lang . String attValue , javax . xml . stream . XMLStreamWriter xmlWriter ) throws javax . xml . stream . XMLStreamException { if ( xmlWriter . getPrefix ( namespace ) == null ) { xmlWriter . writeNamespace ( prefix , namespace ) ; xmlWriter . setPrefix ( prefix , namespace ) ; } xmlWriter . writeAttribute ( namespace , attName , attValue ) ; }
te	IDF	@ Override public Component getTableCellEditorComponent ( JTable table , Object value , boolean isSelected , int row , int column ) { component = new JTextField ( "" ) ; if ( column == BeanTreeTableModel . ColNames . CUR_VAL . ordinal ( ) ) { Object pathComponent = ( ( JXTreeTable ) table ) . getPathForRow ( row ) . getLastPathComponent ( ) ; if ( pathComponent instanceof AbstractBeanTreeNode ) { AbstractBeanTreeNode node = ( AbstractBeanTreeNode ) pathComponent ; String className = node . getClassName ( ) ; switch ( node . getNodeType ( ) ) { case ROOT : case BEAN : if ( node . getObjType ( ) == boolean . class ) { JCheckBox checkBox = new JCheckBox ( value . toString ( ) ) ; boolean selectedCB = ( boolean ) ( node . parseObjectFromString ( node . getUserObject ( ) . toString ( ) ) ) ; checkBox . setSelected ( selectedCB ) ; checkBox . setText ( "Originally: " + String . valueOf ( selectedCB ) ) ; component = checkBox ; } else if ( node . getObjType ( ) . isEnum ( ) ) { JComboBox comboBox = new JComboBox ( node . getObjType ( ) . getEnumConstants ( ) ) ; comboBox . setSelectedItem ( node . getUserObject ( ) . toString ( ) ) ; component = comboBox ; } else { if ( AbstractBeanTreeNode . isTypeNumberOrString ( node . getObjType ( ) ) ) { String content = "" ; if ( value != null ) { content = value . toString ( ) ; } component = new JTextField ( content ) ; } } break ; } } } return component ; }
te	KEY	public void run ( ) { new About ( ) . setVisible ( true ) ; }
te	KEY	protected void execute ( ) { }
te	KEY	public void setPageSize ( int value ) { this . pageSize = value ; }
te	IDF	@ Override public void fieldsNotSet ( ) { JOptionPane . showMessageDialog ( null , TranslationManager . getinstance ( ) . getText ( "fieldsNotSet" ) ) ; }
te	KEY	public int getTicks ( ) { return ticks ; }
te	KEY	public long getTimeZoneOffset ( ) { return timeZoneOffset ; }
te	KEY	protected abstract void onStepChange ( int value ) ;
te	IDF	public void setName ( String name ) { this . name = name ; }
te	KEY	public void setNumberOfPlays ( int plays ) { }
te	IDF	public CYKDecoder ( Options options ) { this . options = options ; this . labelLossType = options . labelLossType ; }
te	KEY	public double nm ( ) { return getSwitchedPower ( ) ; }
te	KEY	public synchronized Dimension getSize ( ) { return new Dimension ( size ) ; }
te	KEY	public Merger ( ) { }
te	KEY	@ Override public Object getType ( ) { return null ; }
te	IDF	public static String toString ( JSONObject o ) throws JSONException { boolean b = false ; Iterator keys = o . keys ( ) ; String s ; StringBuffer sb = new StringBuffer ( ) ; while ( keys . hasNext ( ) ) { s = keys . next ( ) . toString ( ) ; if ( ! o . isNull ( s ) ) { if ( b ) { sb . append ( ; ) ; } sb . append ( Cookie . escape ( s ) ) ; sb . append ( "=" ) ; sb . append ( Cookie . escape ( o . getString ( s ) ) ) ; b = true ; } } return sb . toString ( ) ; }
te	KEY	protected boolean validSpot ( final int x , final int y ) { if ( x >= 0 && x < BOARD_SIZE && y >= 0 && y < BOARD_SIZE ) return true ; return false ; }
te	KEY	@ Override public void putNewLine ( ) throws ParsingException { throw new UnsupportedCharacterException ( this , Characters . NEWLINE ) ; }
te	IDF	long getCargo ( ) { return ( ( Number ) cargoVolume . getValue ( ) ) . longValue ( ) ; }
te	IDF	public static String getBudgetType ( String category ) { OWLParser parser = new OWLParser ( ) ; ArrayList < ArrayList < String >> osList = parser . getRestrictionOfCategory ( category ) ; ArrayList < String > returnValue = new ArrayList < String > ( ) ; for ( ArrayList < String > arrayList : osList ) { if ( arrayList . get ( 0 ) . contains ( "Budget" ) ) { returnValue = arrayList ; break ; } } return returnValue . get ( 1 ) ; }
te	KEY	public void setNeuronInput ( double neuronInput ) { this . neuronInput = neuronInput ; }
te	KEY	public void setTime ( long time ) { this . time = time ; }
te	IDF	@ Override public Map < String , ColumnDefinition > getColumnDefinitions ( ) { return cols ; }
te	KEY	public void setSpecular ( double [ ] specular ) { this . specular = specular ; }
te	KEY	public void setCanPro_Compra ( int CanPro_Compra ) { this . CanPro_Compra = CanPro_Compra ; }
te	KEY	public void reset ( ) { this . misses = 0 ; }
te	KEY	public static boolean palindrome ( int num ) { return ( num == reverseInt ( num ) ) ; }
te	KEY	public void setX ( int x ) { this . x = x ; }
te	IDF	private CategoryModel parseResultSetToModel ( ResultSet rs ) throws SQLException { int id = getInt ( rs , "id" ) ; String name = rs . getString ( "name" ) ; int staff_responsible = getInt ( rs , "staff_responsible" ) ; return new CategoryModel ( id , name , staff_responsible ) ; }
te	KEY	void popRow ( ) ;
te	KEY	public boolean getQuickTurn ( ) { return mainJoystick . getRawButton ( 7 ) ; }
te	IDF	public static byte [ ] decode ( byte [ ] source , int off , int len , int options ) throws java . io . IOException { if ( source == null ) { throw new NullPointerException ( "Cannot decode null source array." ) ; } if ( off < 0 || off + len > source . length ) { throw new IllegalArgumentException ( String . format ( "Source array with length %d cannot have offset of %d and process %d bytes." , source . length , off , len ) ) ; } if ( len == 0 ) { return new byte [ 0 ] ; } else if ( len < 4 ) { throw new IllegalArgumentException ( "Base64-encoded string must have at least four characters  but length specified was " + len ) ; } byte [ ] DECODABET = getDecodabet ( options ) ; int len34 = len * 3 / 4 ; byte [ ] outBuff = new byte [ len34 ] ; int outBuffPosn = 0 ; byte [ ] b4 = new byte [ 4 ] ; int b4Posn = 0 ; int i = 0 ; byte sbiDecode = 0 ; for ( i = off ; i < off + len ; i ++ ) { sbiDecode = DECODABET [ source [ i ] & FF ] ; if ( sbiDecode >= WHITE_SPACE_ENC ) { if ( sbiDecode >= EQUALS_SIGN_ENC ) { b4 [ b4Posn ++ ] = source [ i ] ; if ( b4Posn > 3 ) { outBuffPosn += decode4to3 ( b4 , 0 , outBuff , outBuffPosn , options ) ; b4Posn = 0 ; if ( source [ i ] == EQUALS_SIGN ) { break ; } } } } else { throw new java . io . IOException ( String . format ( "Bad Base64 input character decimal %d in array position %d" , ( ( int ) source [ i ] ) & FF , i ) ) ; } } byte [ ] out = new byte [ outBuffPosn ] ; System . arraycopy ( outBuff , 0 , out , 0 , outBuffPosn ) ; return out ; }
te	IDF	public String toString ( ) { StringBuffer ret = new StringBuffer ( ) ; ret . append ( "ua.bionichill.socialnetwork.dto.InvitePk: " ) ; ret . append ( "idInvite=" + idInvite ) ; return ret . toString ( ) ; }
te	IDF	public void setChildToHidden ( AbstractBeanTreeNode node ) { AbstractBeanTreeNode parent = ( ( AbstractBeanTreeNode ) ( node . getParent ( ) ) ) ; int nodeIndex = parent . getIndex ( node ) ; if ( parent . hiddenChildren == null ) { parent . hiddenChildren = new Vector < AbstractBeanTreeNode > ( ) ; } parent . remove ( node ) ; parent . hiddenChildren . add ( node ) ; node . setParent ( null ) ; modelSupport . fireChildRemoved ( new TreePath ( parent . getPath ( ) ) , nodeIndex , node ) ; }
te	IDF	public void print ( Writer w ) { PrintWriter pw = new PrintWriter ( w ) ; pw . println ( "-" ) ; for ( int row = 0 ; row < height ; row ++ ) { for ( int col = 0 ; col < width ; col ++ ) { pw . print ( getCell ( col , row ) ? "#" : "_" ) ; } pw . println ( ) ; } pw . flush ( ) ; }
te	IDF	public void setDataSource ( DataSource dataSource ) throws SQLException { try { connection = dataSource . getConnection ( ) ; kontakRepository = new KontakRepository ( ) ; kontakRepository . setConnection ( connection ) ; } catch ( SQLException ex ) { ex . printStackTrace ( ) ; throw new SQLException ( ex . toString ( ) ) ; } }
te	IDF	@ Override public void answerRightFast ( ) { answerField . setEditable ( false ) ; answerField . setBackground ( Color . GREEN ) ; this . resetBackground ( ) ; }
te	KEY	@ Override public int getBulletSize ( ) { return BULLET_SIZE ; }
te	KEY	public TinyUrlManagerException ( ) { }
te	KEY	protected abstract void setEstadoInsercao ( ) ;
te	IDF	void setNews ( String news ) ;
te	IDF	public void _13 ( double val ) { matrix . _13 = val ; }
te	KEY	public AideView ( ) { super ( ) ; this . controleur = new AideController ( this ) ; }
te	KEY	public String getDisplayName ( ) { return this . name ; }
te	IDF	@ Override public void quadTo ( float x1 , float y1 , float x2 , float y2 ) { out . quadTo ( x1 * mxx + y1 * mxy + mxt , x1 * myx + y1 * myy + myt , x2 * mxx + y2 * mxy + mxt , x2 * myx + y2 * myy + myt ) ; }
te	KEY	public void setReorderLevel ( int reorderLevel ) { this . reorderLevel = reorderLevel ; }
te	IDF	public AObject ( Vector3d pos , String name ) { _position = pos ; _name = name ; }
te	IDF	@ Override protected void performInitialUpdate ( ConnectionListener listener ) { switch ( connectedState ) { case CONNECTED : listener . onConnected ( sessionKey ) ; break ; case CONNECTING : listener . onConnecting ( ) ; break ; case DISCONNECTED : listener . onDisconnected ( ) ; break ; default : break ; } }
te	IDF	public SequenciaComando ( Comando comando1 , Comando comando2 ) { this . comando1 = comando1 ; this . comando2 = comando2 ; }
te	IDF	public static void main ( String args [ ] ) { try { for ( javax . swing . UIManager . LookAndFeelInfo info : javax . swing . UIManager . getInstalledLookAndFeels ( ) ) { if ( "Nimbus" . equals ( info . getName ( ) ) ) { javax . swing . UIManager . setLookAndFeel ( info . getClassName ( ) ) ; break ; } } } catch ( ClassNotFoundException ex ) { java . util . logging . Logger . getLogger ( frmAcceso . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( InstantiationException ex ) { java . util . logging . Logger . getLogger ( frmAcceso . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( IllegalAccessException ex ) { java . util . logging . Logger . getLogger ( frmAcceso . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( javax . swing . UnsupportedLookAndFeelException ex ) { java . util . logging . Logger . getLogger ( frmAcceso . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } java . awt . EventQueue . invokeLater ( new Runnable ( ) { public void run ( ) { new frmAcceso ( ) . setVisible ( true ) ; } } ) ; }
te	IDF	public FunctionalMessageTest ( ) throws Exception { when ( request . getSession ( ) ) . thenReturn ( session ) ; when ( response . getWriter ( ) ) . thenReturn ( new PrintWriter ( stringWriter ) ) ; when ( session . getId ( ) ) . thenReturn ( SSID ) ; messageSystem = new MessageSystem ( ) ; frontend = new Frontend ( messageSystem ) ; accountService = new AccountServiceImpl ( new HsqlDatabase ( ) , messageSystem ) ; fe = new Thread ( frontend ) ; as = new Thread ( accountService ) ; fe . start ( ) ; as . start ( ) ; }
te	KEY	public void viewInventory ( ) { this . viewedInventory = true ; return ; }
te	KEY	public final boolean addAll ( int index , Collection < ? extends Elt > c ) { throw new UnsupportedOperationException ( ) ; }
te	KEY	public void stop ( ) { this . stopTime = System . currentTimeMillis ( ) ; this . running = false ; }
te	IDF	private void btnCancelarPesqActionPerformed ( java . awt . event . ActionEvent evt ) { dispose ( ) ; }
te	IDF	public static Set < Stock > getAll ( ) throws SQLException { Set < Stock > res = new HashSet < > ( ) ; sql = "SELECT * FROM STOCK;" ; try ( ResultSet rs = ComunDP . getData ( sql ) ) { while ( rs . next ( ) ) { res . add ( DbToObj ( rs ) ) ; } } return res ; }
te	KEY	public Address ( ) { this ( null , null , null , "" , "" , null ) ; }
te	KEY	public void Reset ( ) { this . getAdditionalComments ( ) . reset ( ) ; this . getOptout ( ) . setSelected ( false ) ; }
te	KEY	public EtatBloc getEtatBloc ( ) { return this . etat ; }
te	KEY	public int getCoord_Y ( ) { return coord_Y ; }
te	IDF	public void itemStateChanged ( java . awt . event . ItemEvent evt ) { cbDiscsItemStateChanged ( evt ) ; }
te	IDF	public double getPNXScore ( int head , int arg , int pair ) { int pos = ( arg * lfd . len + head ) * lfd . len + pair ; if ( ppcc1 [ pos ] == null ) getPNXFeatureVector ( head , arg , pair ) ; return ppcc1 [ pos ] ; }
te	KEY	public boolean isBoolean ( ) { return this . isEqual ( boolean ) ; }
te	IDF	public Date getTimestamp ( ) { try { return FORMATTER . parse ( ( String ) this . get ( "ts" ) ) ; } catch ( ParseException e ) { e . printStackTrace ( ) ; return null ; } }
te	IDF	public InitializationException ( String message , Throwable cause ) { super ( message , cause ) ; }
te	IDF	@ SuppressWarnings ( "unchecked" ) @ Override public List < Borrowing > list ( ) { try { Transaction readTransaction = session . beginTransaction ( ) ; Query readQuery = session . createQuery ( "FROM Borrowing" ) ; List < Borrowing > result = readQuery . list ( ) ; readTransaction . commit ( ) ; return result ; } catch ( Exception e ) { return null ; } }
te	KEY	public static SessionFactory getSessionFactory ( ) { return sessionFactory ; }
te	IDF	public void dbUpdateItem ( Connection aconn ) { try { String qstr = "Update UserTbl set PassHash=? PwChangeTm=? where UserId=?" ; PreparedStatement stmt = aconn . prepareStatement ( qstr ) ; stmt . setString ( 1 , passhash ) ; java . sql . Timestamp tstmp = new java . sql . Timestamp ( pwchangedt . getTime ( ) ) ; stmt . setTimestamp ( 2 , tstmp ) ; stmt . setString ( 3 , userid ) ; stmt . executeUpdate ( ) ; stmt . close ( ) ; } catch ( Exception ex ) { manapp . CLogError . logError ( manapp . CAppConsts . ErrorFile , false , "dbUpdateItem error: " , ex ) ; } }
te	IDF	public boolean startGame ( ) { if ( isStarted ( ) ) return false ; while ( ! isReady ( ) ) { setBuffers ( ) ; } ArrayList < Point > positions = new ArrayList < Point > ( ) ; for ( Player player : playerList ) positions . add ( player . getBoardPosition ( ) ) ; board . generateBoard ( positions ) ; start = new Date ( ) ; do { setBuffers ( ) ; update ( ) ; } while ( ! isOver ( ) ) ; end = new Date ( ) ; return true ; }
te	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { player1GameHelpActionPerformed ( evt ) ; }
te	IDF	public String build ( Process process ) throws IOException { InputStream error = process . getErrorStream ( ) ; InputStream input = process . getInputStream ( ) ; String errorString = null ; String inputString = null ; if ( error != null ) { errorString = write ( error ) ; error . close ( ) ; if ( errorString != null && ! errorString . isEmpty ( ) ) throw new RuntimeException ( "Error : " + errorString ) ; } if ( input != null ) { inputString = write ( input ) ; input . close ( ) ; } return inputString ; }
te	IDF	public void removeSubject ( SubjectID subject ) { this . subjects . remove ( subject ) ; fireChange ( ) ; }
te	IDF	List < Elective > loadAllElectives ( ) ;
te	IDF	public void displayInventory ( ) { System . out . println ( "Inventory:" ) ; getInventory ( ) . display ( ) ; }
te	KEY	public void setId ( long id ) { this . id = id ; }
te	KEY	public void setTurnPlayer ( int turnPlayer ) { this . turnPlayer = turnPlayer ; }
te	KEY	public boolean getPKCS ( ) { return pkcsrb . isSelected ( ) ; }
te	IDF	private boolean findPath ( int u ) { visx [ u ] = true ; for ( int v = 0 ; v < T ; ++ v ) { Utils . assert ( x [ u ] + y [ v ] + eps >= f [ u * T + v ] ) ; if ( visy [ v ] == false && x [ u ] + y [ v ] <= f [ u * T + v ] + eps ) { visy [ v ] = true ; int w = find [ v ] ; find [ v ] = u ; if ( w == - 1 || findPath ( w ) ) return true ; find [ v ] = w ; } } return false ; }
te	KEY	public String getName ( ) { return this . name ; }
te	IDF	protected void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { processRequest ( request , response ) ; }
te	IDF	public void setNom_Bodega ( String Nom_Bodega ) { this . Nom_Bodega = Nom_Bodega ; }
te	KEY	public void setPriceLevel6 ( double priceLevel6 ) { this . priceLevel6 = priceLevel6 ; }
te	KEY	private Singleton ( ) { }
te	IDF	public void initHighOrderFeatureTables ( ) { if ( options . useSRL2O ) { consSib = new FeatureDataItem [ sibnum * L * L ] ; consPred = new FeatureDataItem [ coparnum * L * L ] ; } }
te	KEY	public boolean pressSpace ( ) { if ( selectedAction != null ) { return selectedAction . pressSpace ( ) ; } return false ; }
te	IDF	public String getYmdStr ( ) { SimpleDateFormat ymdfmt = new SimpleDateFormat ( CAppConsts . DateFmtYmd ) ; return ( ymdfmt . format ( shotdate ) ) ; }
te	KEY	public synchronized void xassignL1KeyCode ( int code ) { l1 = code ; }
te	KEY	public int getSize ( ) { return strings . size ( ) ; }
te	IDF	@ Override protected String [ ] getColumnNames ( ) { return ColumnNames ; }
te	IDF	HelloActionWorld2 ( ) { super ( "Hello Action" ) ; final JLabel label ; setDefaultCloseOperation ( EXIT_ON_CLOSE ) ; setLayout ( new BoxLayout ( getContentPane ( ) , BoxLayout . Y_AXIS ) ) ; label = new JLabel ( "Button unpressed" ) ; add ( label ) ; JButton button = new JButton ( "Press me" ) ; add ( button ) ; button . addActionListener ( new ActionListener ( ) { private int count = 0 ; public void actionPerformed ( ActionEvent e ) { count ++ ; label . setText ( "Button pressed " + count + " time(s)" ) ; } } ) ; setSize ( 320 , 240 ) ; }
te	IDF	public HTTPTokener ( String s ) { super ( s ) ; }
te	KEY	public int getPlayerNumber ( ) { return activePlayers . size ( ) ; }
te	KEY	public boolean isEmpty ( ) { return tree == null ; }
te	KEY	public int getColorD ( ) { return colorD ; }
te	IDF	@ Override public void actionPerformed ( ActionEvent e ) { Game . GA_ThrowDice ( ) ; }
te	IDF	public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; System . out . println ( "Please enter lines below:" ) ; List < String > lines = new ArrayList < > ( ) ; while ( scanner . hasNextLine ( ) ) { String line = scanner . nextLine ( ) ; if ( line . equalsIgnoreCase ( "exit" ) ) break ; else lines . add ( line ) ; } System . out . println ( "Below are the lines from the input:" ) ; for ( String line : lines ) { System . out . println ( line ) ; } }
te	KEY	public boolean isStackable ( ) { return stackable ; }
te	KEY	public void setMaxRows ( int maxRows ) { this . maxRows = maxRows ; }
te	KEY	public String [ ] getColumnNames ( ) { return this . columnNames ; }
te	IDF	private void selectSourceBtnActionPerformed ( java . awt . event . ActionEvent evt ) { if ( dataGrp . getSelection ( ) != null ) { filterCriteriaPanel . setEnabled ( true ) ; keywordCB . setEnabled ( true ) ; dateCB . setEnabled ( true ) ; resetCriteriaBtn . setEnabled ( true ) ; beginBtn . setEnabled ( true ) ; lmRB . setEnabled ( true ) ; topicRB . setEnabled ( true ) ; fillDateBoxes ( ) ; } else { JOptionPane . showMessageDialog ( null , "Must select tweet data source." , "Tweets Source Requirement" , JOptionPane . ERROR_MESSAGE ) ; } }
te	IDF	void visit ( PrintBold printBold ) ;
te	IDF	@ JsonProperty ( "entity" ) public Entity getEntity ( ) { return entity ; }
te	IDF	@ Override public void keyReleased ( KeyEvent arg0 ) { }
te	IDF	public void setFb_url ( String fb_url ) { this . fb_url = fb_url ; }
te	IDF	public void setUserName ( String userName ) { this . userName = userName ; }
te	KEY	@ Override public double getWeight ( ) { return 10 ; }
te	KEY	public UStatus ( ) { }
te	KEY	public char [ ] getPIN1 ( ) { return pin1 . getPassword ( ) ; }
te	IDF	public void update ( ) { Window window = device . getFullScreenWindow ( ) ; if ( window != null ) { BufferStrategy strategy = window . getBufferStrategy ( ) ; if ( ! strategy . contentsLost ( ) ) { strategy . show ( ) ; } } Toolkit . getDefaultToolkit ( ) . sync ( ) ; }
te	IDF	public int getPieceCount ( DraughtsState gs ) { int [ ] pieces = gs . getPieces ( ) ; int count = 0 ; for ( int f = 1 ; f < pieces . length ; f = f + 1 ) { int piece = pieces [ f ] ; if ( Draughts . isWhite ( piece ) || Draughts . isBlack ( piece ) ) { count ++ ; } } return count ; }
te	IDF	public static void main ( String [ ] args ) { ArrayList < ArrayList < Integer >> factors = new ArrayList < ArrayList < Integer >> ( ) ; for ( int i = 0 ; i < SIZE ; i ++ ) factors . add ( new ArrayList < Integer > ( ) ) ; for ( int i = 2 ; i < SIZE ; i ++ ) { factors . get ( i ) . add ( i ) ; for ( int j = 2 ; i * j < SIZE ; j ++ ) factors . get ( i * j ) . add ( i ) ; } ArrayList < ArrayList < ArrayList < Integer >>> factorizations = new ArrayList < ArrayList < ArrayList < Integer >>> ( ) ; for ( int i = 0 ; i < SIZE ; i ++ ) factorizations . add ( new ArrayList < ArrayList < Integer >> ( ) ) ; for ( int i = 2 ; i < SIZE ; i ++ ) { ArrayList < Integer > basicFactorization = new ArrayList < Integer > ( ) ; basicFactorization . add ( i ) ; factorizations . get ( i ) . add ( basicFactorization ) ; for ( int j = 0 ; j < ( factors . get ( i ) . size ( ) + 1 ) / 2 ; j ++ ) { int firstFactor = factors . get ( i ) . get ( j ) ; int secondFactor = i / firstFactor ; ArrayList < ArrayList < Integer >> firstFactorizations = factorizations . get ( firstFactor ) ; ArrayList < ArrayList < Integer >> secondFactorizations = factorizations . get ( secondFactor ) ; for ( int k = 0 ; k < firstFactorizations . size ( ) ; k ++ ) for ( int l = 0 ; l < secondFactorizations . size ( ) ; l ++ ) { ArrayList < Integer > firstFactorization = firstFactorizations . get ( k ) ; ArrayList < Integer > secondFactorization = secondFactorizations . get ( l ) ; ArrayList < Integer > nextFactorization = new ArrayList < Integer > ( ) ; for ( int m = 0 ; m < firstFactorization . size ( ) ; m ++ ) nextFactorization . add ( firstFactorization . get ( m ) ) ; for ( int m = 0 ; m < secondFactorization . size ( ) ; m ++ ) nextFactorization . add ( secondFactorization . get ( m ) ) ; if ( nextFactorization . get ( firstFactorization . size ( ) ) >= nextFactorization . get ( firstFactorization . size ( ) - 1 ) ) factorizations . get ( i ) . add ( nextFactorization ) ; } } HashSet < ArrayList < Integer >> clean = new HashSet < ArrayList < Integer >> ( ) ; for ( int j = 0 ; j < factorizations . get ( i ) . size ( ) ; j ++ ) { if ( clean . contains ( factorizations . get ( i ) . get ( j ) ) ) { factorizations . get ( i ) . remove ( j ) ; j -- ; } else clean . add ( factorizations . get ( i ) . get ( j ) ) ; } } int sum = 0 ; for ( int i = 2 ; i < SIZE ; i ++ ) { int max = 0 ; for ( int j = 0 ; j < factorizations . get ( i ) . size ( ) ; j ++ ) { ArrayList < Integer > current = factorizations . get ( i ) . get ( j ) ; int currentSum = 0 ; for ( int k = 0 ; k < current . size ( ) ; k ++ ) currentSum += drs ( current . get ( k ) ) ; if ( currentSum > max ) max = currentSum ; } sum += max ; } System . out . print ( sum ) ; }
te	KEY	public CNonadList ( ) { super ( true ) ; }
te	KEY	public void creer ( ) { }
te	IDF	public Config outputCharset ( Charset charset ) { return new Config ( workingDir , stdoutBufferSize , stderrBufferSize , charset , charsetAutoDetect , maxBufferForCharsetDetection , asyncExecutor ) ; }
te	IDF	public CreaturesNearbyPoint ( Point2D point , double margin ) { this . point = point ; this . margin = margin ; }
te	IDF	public List < Individual < T >> mate ( List < Individual < T >> parents ) { return crossoverFn . mate ( parents . get ( 0 ) , parents . get ( 1 ) ) ; }
te	KEY	public int getRowCount ( ) { return data . length ; }
te	IDF	public void __doGet ( HttpServletRequest req , HttpServletResponse resp ) throws IOException , ServletException { Context ctx = ( Context ) req . getSession ( ) . getAttribute ( Authtoken . TOKEN ) ; if ( ctx == null ) { ctx = new Context ( ) ; } String questionId = new String ( ) ; if ( req . getPathInfo ( ) != null ) { questionId = "/" + Question . RESOURCE_NAME + "/" + req . getPathInfo ( ) . replaceAll ( "/" , "" ) ; } if ( ! questionId . equals ( "" ) ) { Message request = new Message ( ctx ) ; request . put ( Question . ID , questionId ) ; Message response = new Message ( ctx ) ; new QuestionService ( ) . doGet ( request , response ) ; Message profileReq = new Message ( ctx ) ; Message profileResp = new Message ( ctx ) ; profileReq . put ( Profile . ID , response . get ( Document . AUTHOR ) ) ; new ProfileService ( ) . doGet ( profileReq , profileResp ) ; response . put ( Profile . FULL_NAME , profileResp . get ( Profile . FULL_NAME ) ) ; req . setAttribute ( Question . RESOURCE_NAME , response ) ; List < Map < String , String >> answers = new ArrayList < Map < String , String >> ( ) ; Message answerResp , voteResp ; for ( Map < String , String > ref : response . getReferences ( Question . ANSWERS ) ) { request = new Message ( ctx ) ; request . put ( Answer . ID , ref . get ( Answer . ID ) ) ; answerResp = new Message ( ctx ) ; new AnswerService ( ) . doGet ( request , answerResp ) ; Map < String , String > answer = new HashMap < String , String > ( ) ; answer . put ( Answer . ID , answerResp . get ( Answer . ID ) ) ; answer . put ( Answer . CONTENT , answerResp . get ( Answer . CONTENT ) ) ; answer . put ( Answer . VOTES , answerResp . get ( Answer . VOTES ) ) ; answer . put ( Document . AUTHOR , answerResp . get ( Document . AUTHOR ) ) ; answer . put ( System . TIMESTAMP , answerResp . get ( System . TIMESTAMP ) ) ; profileReq = new Message ( ctx ) ; profileResp = new Message ( ctx ) ; profileReq . put ( Profile . ID , answerResp . get ( Document . AUTHOR ) ) ; new ProfileService ( ) . doGet ( profileReq , profileResp ) ; answer . put ( Profile . FULL_NAME , profileResp . get ( Profile . FULL_NAME ) ) ; if ( ctx != null ) { request = new Message ( ctx ) ; request . put ( Profile . ID , ctx . getLoggedInUserProfileId ( ) ) ; request . put ( Answer . ID , ref . get ( Answer . ID ) ) ; voteResp = new Message ( ctx ) ; new VoteService ( ) . doGet ( request , voteResp ) ; if ( voteResp . containsField ( Vote . ID ) ) { answer . put ( Vote . ID , voteResp . get ( Vote . ID ) ) ; answer . put ( Vote . VOTE , voteResp . get ( Vote . VOTE ) ) ; } } answers . add ( answer ) ; } req . setAttribute ( Answer . RESOURCE_NAME , answers ) ; Message eventRequest = new Message ( request . getContext ( ) ) ; eventRequest . put ( Event . DOCUMENT_TYPE , Question . RESOURCE_NAME ) ; eventRequest . put ( Event . TYPE , "GET" ) ; eventRequest . put ( Event . DESCRIPTION , "View Question" ) ; eventRequest . put ( Event . OBJECT , questionId ) ; eventRequest . put ( Event . USER , ctx . getLoggedInUserProfileId ( ) ) ; eventRequest . put ( Event . TIMESTAMP , request . get ( System . TIMESTAMP ) ) ; EventPublisherService pub = new EventPublisherService ( ) ; pub . doPost ( eventRequest , response ) ; super . forward ( QUESTION_VIEW , req , resp ) ; } else { Message request = new Message ( ctx ) ; if ( req . getParameter ( QuestionSearchIndex . QUERY_STRING ) != null ) { request . put ( QuestionSearchIndex . QUERY_STRING , req . getParameter ( QuestionSearchIndex . QUERY_STRING ) ) ; } else { request . put ( QuestionSearchIndex . QUERY_STRING , "" ) ; } Message response = new Message ( ctx ) ; new QuestionService ( ) . doGet ( request , response ) ; response . put ( QuestionSearchIndex . QUERY_STRING , request . get ( QuestionSearchIndex . QUERY_STRING ) ) ; req . setAttribute ( Question . RESOURCE_NAME , response ) ; Message eventRequest = new Message ( request . getContext ( ) ) ; eventRequest . put ( Event . DOCUMENT_TYPE , QuestionSearchIndex . RESOURCE_NAME ) ; eventRequest . put ( Event . TYPE , "GET" ) ; eventRequest . put ( Event . DESCRIPTION , "Search Question" ) ; eventRequest . put ( Event . OBJECT , request . get ( QuestionSearchIndex . QUERY_STRING ) ) ; eventRequest . put ( Event . USER , ctx . getLoggedInUserProfileId ( ) ) ; eventRequest . put ( Event . TIMESTAMP , request . get ( System . TIMESTAMP ) ) ; EventPublisherService pub = new EventPublisherService ( ) ; pub . doPost ( eventRequest , response ) ; super . forward ( QUESTION_SEARCH_VIEW , req , resp ) ; } }
te	KEY	public String upload ( ) { return "uploadDocument.xhtml?faces-redirect=true" ; }
te	KEY	public boolean geteBookAvailable ( ) { return eBookAvailable ; }
te	KEY	public int geDenominator ( ) ;
te	IDF	public javax . xml . stream . XMLStreamReader getPullParser ( javax . xml . namespace . QName qName ) throws org . apache . axis2 . databinding . ADBException { java . util . ArrayList elementList = new java . util . ArrayList ( ) ; java . util . ArrayList attribList = new java . util . ArrayList ( ) ; if ( localShortUrlTracker ) { elementList . add ( new javax . xml . namespace . QName ( "http://tinyurl.com.src" , "shortUrl" ) ) ; elementList . add ( localShortUrl == null ? null : org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( localShortUrl ) ) ; } return new org . apache . axis2 . databinding . utils . reader . ADBXMLStreamReaderImpl ( qName , elementList . toArray ( ) , attribList . toArray ( ) ) ; }
te	KEY	public void cardChanged ( ) ;
te	IDF	void onHumanMove ( M m ) ;
te	KEY	public static TinyUrlServiceClient getInstance ( ) throws AxisFault { if ( instance == null ) { instance = new TinyUrlServiceClient ( ) ; } return instance ; }
te	KEY	public boolean getIsSelected ( ) { return isSelected ; }
te	IDF	public Ruleset ( Ruleset r ) { rules = new Rule [ r . rules . length ] ; for ( int i = 0 ; i < rules . length ; i ++ ) { try { rules [ i ] = r . rules [ i ] . getClass ( ) . newInstance ( ) ; } catch ( Exception e ) { } } }
te	KEY	public CountContacts createCountContacts ( ) { return new CountContacts ( ) ; }
te	IDF	public ArrayList < Integer > grayCode ( int n ) { ArrayList < Integer > result = new ArrayList < Integer > ( ) ; ArrayList < Integer > codes = init ( n ) ; result . add ( 0 ) ; Set < ArrayList < Integer >> cache = new HashSet < ArrayList < Integer >> ( ) ; cache . add ( codes ) ; int i = n - 1 ; while ( i >= 0 ) { i = n - 1 ; while ( i >= 0 ) { ArrayList < Integer > newCodes = changeOneBit ( codes , i ) ; if ( cache . contains ( newCodes ) ) { i -- ; } else { codes = newCodes ; cache . add ( codes ) ; result . add ( codesToNumber ( codes ) ) ; break ; } } } return result ; }
te	IDF	public void setHex ( boolean flag ) { hexcb . setSelected ( flag ) ; if ( flag ) hexInputVerifier . setIgnore ( false ) ; }
te	IDF	@ Override public void putCharWhileLineComment ( char c ) throws ParsingException { currentHandler . putCharWhileLineComment ( c ) ; }
te	IDF	private ArrayList < String > getValidationErrors ( ) { ArrayList < String > errors = new ArrayList < String > ( ) ; String username = txtUsername . getText ( ) ; if ( username . isEmpty ( ) ) { errors . add ( "Username field is blank" ) ; } return errors ; }
te	IDF	public void internalFrameDeiconified ( javax . swing . event . InternalFrameEvent evt ) { }
te	IDF	TIPPSection getInputSection ( ) ;
te	KEY	public void setLimitedVocationOrEmployment ( boolean limitedVocationOrEmployment ) { this . limitedVocationOrEmployment = limitedVocationOrEmployment ; }
te	KEY	public void add ( Object o ) { throw new UnsupportedOperationException ( ) ; }
te	IDF	GameCharacterObject setColor ( Color textureColor ) ;
te	KEY	public int getValue ( ) { return value ; }
te	IDF	public Writer2 ( SyncInterruptiblyDemo buff ) { this . buff = buff ; }
te	KEY	public int getY ( ) { return y ; }
te	KEY	public int getCompletionTime ( ) { return convertTime ( completionTime ) ; }
te	IDF	public ActorModel ( int id , ActorModel other ) { this ( id , other . firstname , other . lastname , other . dob ) ; }
te	KEY	public int getId ( ) { return id ; }
te	IDF	public static boolean isInsidePolygon ( Vector2D [ ] verts , double x0 , double y0 ) { boolean oddNodes = false ; for ( int i = 0 , j = verts . length - 1 ; i < verts . length ; j = i , i ++ ) { Vector2D vi = verts [ i ] ; Vector2D vj = verts [ j ] ; if ( ( vi . y < y0 && vj . y >= y0 || vj . y < y0 && vi . y >= y0 ) && ( vi . x + ( y0 - vi . y ) / ( vj . y - vi . y ) * ( vj . x - vi . x ) < x0 ) ) oddNodes = ! oddNodes ; } return oddNodes ; }
te	KEY	public boolean isInteger ( ) { return this . isEqual ( INTEGER ) ; }
te	KEY	public boolean getDebug ( ) { return debug ; }
te	KEY	@ Override public boolean intersects ( double x , double y , double w , double h ) { throw new UnsupportedOperationException ( "Not supported yet." ) ; }
te	IDF	public void setPaymentMethod ( String paymentMethod ) { this . paymentMethod = paymentMethod ; }
te	KEY	public MainWindowManager ( ) { }
te	IDF	@ Override public boolean delete ( Theme theme ) { Transaction deleteTransaction = session . beginTransaction ( ) ; session . delete ( theme ) ; deleteTransaction . commit ( ) ; return false ; }
te	IDF	public void loadTileImages ( ) { tiles = new ArrayList ( ) ; char ch = A ; while ( true ) { String name = "tile_" + ch + ".png" ; File file = new File ( "images/" + name ) ; if ( ! file . exists ( ) ) { break ; } tiles . add ( getSmallerImage ( loadImage ( name ) , .5f ) ) ; ch ++ ; } }
te	KEY	public boolean isAct_Stk ( ) { return act_Stk ; }
te	KEY	public void setExit ( boolean exit ) { this . exit = exit ; }
te	KEY	public static InstanceVariable getInstance ( ) { if ( null == instanceVariable ) { instanceVariable = new InstanceVariable ( ) ; } return instanceVariable ; }
te	IDF	public InviteRes [ ] findWhereInviteResEquals ( String inviteRes ) throws InviteResDaoException ;
te	IDF	@ Override public void getInput ( ) { int selection = - 1 ; boolean isValid = false ; do { this . displayMenu ( ) ; Scanner input = SnakeWithPartner . getInFile ( ) ; do { try { selection = input . nextInt ( ) ; isValid = true ; } catch ( NumberFormatException numx ) { System . out . println ( "Invalid Input. Please input a valid number." ) ; isValid = false ; } } while ( ! isValid ) ; switch ( selection ) { case 1 : this . helpMenuControl . displayRules ( ) ; break ; case 2 : this . helpMenuControl . displayControls ( ) ; break ; case 0 : break ; default : System . out . println ( "Please enter a valid menu item:" ) ; continue ; } } while ( selection != 0 ) ; }
te	KEY	@ Override public boolean equals ( Object obj ) { if ( this == obj ) return true ; if ( obj == null ) return false ; if ( getClass ( ) != obj . getClass ( ) ) return false ; Room other = ( Room ) obj ; if ( building == null ) { if ( other . building != null ) return false ; } else if ( ! building . equals ( other . building ) ) return false ; if ( roomNumber == null ) { if ( other . roomNumber != null ) return false ; } else if ( ! roomNumber . equals ( other . roomNumber ) ) return false ; return true ; }
te	IDF	public Linha ( int x , int y , ApiDeDesenho api ) { this . x = x ; this . y = y ; this . api = api ; }
te	KEY	@ Override public synchronized int size ( ) { return size ; }
te	KEY	public void setLat ( double lat ) { this . lat = lat ; }
te	IDF	@ Test public void testResendVerificationMail ( ) throws Exception { System . out . println ( "************ Testing ResendVerificationMail ************" ) ; String message = mtbService . resendVerificationMail ( username ) ; System . out . println ( "Message from API: " + message ) ; String response [ ] = message . split ( "::" ) ; assert . assertEquals ( "Checking the first part of the message" , "ok" , response [ 0 ] . toLowerCase ( ) ) ; assert . assertEquals ( "Success message Send Response from API" , "success" , response [ 1 ] . toLowerCase ( ) ) ; }
te	IDF	public void setUrlImage ( String value ) { this . urlImage = value ; }
te	IDF	public FileImageLoader ( String filename , BitmapFactory factory ) { this . filename = filename ; this . factory = factory ; }
te	KEY	public long getLote ( ) { return lote ; }
te	IDF	@ Override public String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( "{" ) ; UndirectedGraphNode node = this ; List < UndirectedGraphNode > set = new ArrayList < > ( ) ; LinkedList < UndirectedGraphNode > unvisited = new LinkedList < > ( ) ; unvisited . add ( node ) ; while ( ! unvisited . isEmpty ( ) ) { UndirectedGraphNode current = unvisited . pop ( ) ; set . add ( current ) ; for ( UndirectedGraphNode n : current . neighbors ) { if ( n != null && ! set . contains ( n ) ) { unvisited . add ( n ) ; } } } Collections . sort ( set , new Comparator < UndirectedGraphNode > ( ) { @ Override public int compare ( UndirectedGraphNode o1 , UndirectedGraphNode o2 ) { return o1 . label - o2 . label ; } } ) ; for ( UndirectedGraphNode n : set ) { sb . append ( n . label ) . append ( ":" ) ; for ( UndirectedGraphNode neighbor : n . neighbors ) { sb . append ( neighbor . label ) . append ( " " ) ; } sb . deleteCharAt ( sb . length ( ) - 1 ) ; sb . append ( "#" ) ; } sb . deleteCharAt ( sb . length ( ) - 1 ) ; sb . append ( "}" ) ; return sb . toString ( ) ; }
te	KEY	public void setId_Lab ( int Id_Lab ) { this . Id_Lab = Id_Lab ; }
te	IDF	public void removeQuery ( String name ) { try { Node setting = Utilities . selectSingleNode ( this . doc , "/c:settings/c:queries/c:query[@c:name='" + name + "']" , this . namespaces ) ; if ( setting != null ) { setting . getParentNode ( ) . removeChild ( setting ) ; save ( ) ; } } catch ( XPathExpressionException e ) { logger . warn ( "Unable to rremove query: " + name ) ; } }
te	KEY	private boolean formatCheck ( boolean isAudio ) { if ( isAudio == true ) { if ( _outFileT . getText ( ) . endsWith ( ".mp3" ) ) { return true ; } else { return false ; } } else { if ( _outFileT . getText ( ) . endsWith ( ".mp4" ) ) { return true ; } else { return false ; } } }
te	IDF	private void supprimerjButtonActionPerformed ( java . awt . event . ActionEvent evt ) { int [ ] selected = stockModeljTable1 . getSelectedRows ( ) ; System . out . println ( "selected rows " + selected . length ) ; List < Stock > toRemove = new ArrayList < Stock > ( selected . length ) ; for ( int i = 0 ; i < selected . length ; i ++ ) { Stock s = listStock . get ( stockModeljTable1 . convertRowIndexToModel ( selected [ i ] ) ) ; System . out . println ( s ) ; toRemove . add ( s ) ; } System . out . println ( "La taille de la liste de stock \u00E0 Supprimer .." + toRemove . size ( ) ) ; for ( Stock s : toRemove ) { stockDAO . delete ( s ) ; } listStock . removeAll ( toRemove ) ; }
te	IDF	public final Texture loadTexture ( final String imagePath ) { AlphaBlend . AlphaBlend . config ( ) ; try { return loadTexture ( ImageIO . read ( new FileInputStream ( imagePath ) ) ) ; } catch ( FileNotFoundException e ) { e . printStackTrace ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return null ; }
te	KEY	@ Override public void update ( ) { if ( checkPause ( ) || checkGameover ( ) ) { return ; } super . update ( ) ; }
te	KEY	public abstract String getName ( ) ;
te	IDF	public void setMeetingService ( MeetingService meetingService ) { this . meetingService = meetingService ; }
te	KEY	public GameFrame ( ) { this . initComponents ( ) ; this . initializeFrame ( ) ; setLocationRelativeTo ( null ) ; }
te	IDF	@ Override Pizza createPizza ( String type ) { Pizza pizza = null ; PizzaIngredientFactory inFactory = new NYPizzaIngredientFactory ( ) ; if ( type . equals ( "cheese" ) ) { pizza = new CheesePizza ( inFactory ) ; pizza . setName ( "NY Style Cheese Pizza" ) ; } else if ( type . equals ( "pepperoni" ) ) { pizza = new PepperoniPizza ( inFactory ) ; pizza . setName ( "NY Style Pepperoni Pizza" ) ; } else if ( type . equals ( "clam" ) ) { pizza = new ClamPizza ( inFactory ) ; pizza . setName ( "NY Style Clam Pizza" ) ; } else if ( type . equals ( "veggie" ) ) { pizza = new VeggiePizza ( inFactory ) ; pizza . setName ( "NY Style Veggie Pizza" ) ; } return pizza ; }
te	KEY	protected void initialize ( ) { }
te	KEY	public double getY ( ) { return location . y ; }
te	IDF	public void setPosition ( String value ) { this . position = value ; }
te	KEY	public int getCardId ( ) { return cardId ; }
te	IDF	public Token nextToken ( ) { if ( atEOF ) { if ( source != null ) { source . close ( ) ; source = null ; } return null ; } try { while ( Character . isWhitespace ( ch ) ) { ch = source . read ( ) ; } } catch ( IOException e ) { atEOF = true ; return nextToken ( ) ; } startPosition = source . getPosition ( ) ; endPosition = startPosition - 1 ; if ( Character . isJavaIdentifierStart ( ch ) ) { String id = "" ; try { do { endPosition ++ ; id += ch ; ch = source . read ( ) ; } while ( Character . isJavaIdentifierPart ( ch ) ) ; } catch ( IOException e ) { atEOF = true ; } return newIdToken ( id , startPosition , endPosition ) ; } if ( ch == ' ) { String character = "" ; try { endPosition ++ ; character += ch ; ch = source . read ( ) ; if ( ! Character . isAlphabetic ( ch ) ) { return makeToken ( character , startPosition , endPosition ) ; } else { endPosition ++ ; character += ch ; ch = source . read ( ) ; if ( ch != ' ) { do { endPosition ++ ; character += ch ; ch = source . read ( ) ; } while ( ! Character . isWhitespace ( ch ) ) ; return makeToken ( character , startPosition , endPosition ) ; } else { endPosition ++ ; character += ch ; ch = source . read ( ) ; } } } catch ( IOException ex ) { atEOF = true ; } return newCharToken ( character , startPosition , endPosition ) ; } if ( ch == . ) { String number = "" ; try { do { endPosition ++ ; number += ch ; ch = source . read ( ) ; } while ( Character . isDigit ( ch ) ) ; } catch ( IOException ex ) { atEOF = true ; } return newFloatNumberToken ( number , startPosition , endPosition ) ; } if ( Character . isDigit ( ch ) || ch == - ) { String number = "" ; boolean isNormalSciNote = true ; try { do { endPosition ++ ; number += ch ; ch = source . read ( ) ; } while ( Character . isDigit ( ch ) ) ; } catch ( IOException e ) { atEOF = true ; } if ( ch == . ) { if ( number . length ( ) > 1 ) { isNormalSciNote = false ; } try { do { endPosition ++ ; number += ch ; ch = source . read ( ) ; } while ( Character . isDigit ( ch ) ) ; } catch ( IOException ex ) { atEOF = true ; } if ( isNormalSciNote && ( ch == e || ch == E ) ) { try { do { endPosition ++ ; number += ch ; ch = source . read ( ) ; if ( ch == - || ch == + ) { endPosition ++ ; number += ch ; ch = source . read ( ) ; } } while ( Character . isDigit ( ch ) ) ; } catch ( IOException ex ) { atEOF = true ; } return newScientificNoteToken ( number , startPosition , endPosition ) ; } return newFloatNumberToken ( number , startPosition , endPosition ) ; } return newNumberToken ( number , startPosition , endPosition ) ; } String charOld = "" + ch ; String op = charOld ; Symbol sym ; try { endPosition ++ ; ch = source . read ( ) ; op += ch ; sym = Symbol . symbol ( op , Tokens . BogusToken ) ; if ( sym == null ) { return makeToken ( charOld , startPosition , endPosition ) ; } endPosition ++ ; ch = source . read ( ) ; return makeToken ( op , startPosition , endPosition ) ; } catch ( IOException e ) { } atEOF = true ; if ( startPosition == endPosition ) { op = charOld ; } return makeToken ( op , startPosition , endPosition ) ; }
te	KEY	public JoystickButton getRightShoulder ( ) { return new JoystickButton ( this , BUTTON_SHOULDER_RIGHT ) ; }
te	KEY	protected boolean isFinished ( ) { return isTimedOut ( ) ; }
te	KEY	public static GameSceneManager getInstance ( ) { if ( null == instance ) { instance = new GameSceneManager ( ) ; } return instance ; }
te	IDF	public Trajectory copy ( ) { Trajectory cloned = new Trajectory ( getNumSegments ( ) ) ; cloned . segments_ = copySegments ( this . segments_ ) ; return cloned ; }
te	IDF	public void resetPruningStats ( ) { pruningGoldHits = 0 ; pruningTotGold = 1e-30 ; pruningTotUparcs = 0 ; pruningTotArcs = 1e-30 ; }
te	KEY	public void setLon ( double lon ) { this . lon = lon ; }
te	KEY	@ Override public void onBind ( class < ? extends IListener > listenerClass ) { }
te	KEY	@ Override public int getColumnCount ( ) { return this . columnNames . size ( ) + 1 ; }
te	IDF	@ Override public String getColumnName ( int col ) { return columnNames [ col ] ; }
te	KEY	public int getHeight ( ) { return height ; }
te	IDF	@ Override public void mousePressed ( MouseEvent e ) { Point p = VolumeSlider . this . getMousePosition ( ) ; VolumeSlider . this . setValue ( 100 * p . x / VolumeSlider . this . getWidth ( ) ) ; }
te	KEY	public void windowDeactivated ( final WindowEvent e ) { }
te	IDF	@ Override public boolean redo ( GameModel game ) { if ( game . getBoard ( ) . placeTile ( x , y , new Tile ( TileType . twotile , rotationState ) , game . getCurrentPlayer ( ) , game . getAllPlayerDevelopers ( ) ) ) { game . getCurrentPlayer ( ) . decrementTwo ( ) ; return true ; } return false ; }
te	KEY	protected abstract int [ ] ParsePosition ( String ToParse ) ;
te	IDF	public List < NoArvore > criaCamada ( List < NoArvore > listaNos ) throws InterruptedException { GeraCamada parte1 = new GeraCamada ( 0 , ( int ) listaNos . size ( ) * 1 / 4 , listaNos ) ; GeraCamada parte2 = new GeraCamada ( ( int ) listaNos . size ( ) * 1 / 4 , ( int ) listaNos . size ( ) * 2 / 4 , listaNos ) ; GeraCamada parte3 = new GeraCamada ( ( int ) listaNos . size ( ) * 2 / 4 , ( int ) listaNos . size ( ) * 3 / 4 , listaNos ) ; GeraCamada parte4 = new GeraCamada ( ( int ) listaNos . size ( ) * 3 / 4 , listaNos . size ( ) , listaNos ) ; Thread t1 = new Thread ( parte1 ) ; Thread t2 = new Thread ( parte2 ) ; Thread t3 = new Thread ( parte3 ) ; Thread t4 = new Thread ( parte4 ) ; t1 . start ( ) ; t2 . start ( ) ; t3 . start ( ) ; t4 . start ( ) ; while ( t1 . getState ( ) == State . RUNNABLE || t2 . getState ( ) == State . RUNNABLE || t3 . getState ( ) == State . RUNNABLE || t4 . getState ( ) == State . RUNNABLE ) { long fim = System . currentTimeMillis ( ) ; if ( ( fim - inicio ) / 1000 > this . TEMPO_MAXIMO ) { parte1 . setAcabou ( ) ; parte2 . setAcabou ( ) ; parte3 . setAcabou ( ) ; parte4 . setAcabou ( ) ; t1 . join ( ) ; t2 . join ( ) ; t3 . join ( ) ; t4 . join ( ) ; return listaNos ; } } listaNos = parte1 . getNovaListaNos ( ) ; listaNos . addAll ( parte2 . getNovaListaNos ( ) ) ; listaNos . addAll ( parte3 . getNovaListaNos ( ) ) ; listaNos . addAll ( parte4 . getNovaListaNos ( ) ) ; return listaNos ; }
te	IDF	public FTreeList < Elt > concat ( List < ? extends Elt > list ) { if ( list . isEmpty ( ) ) return this ; else if ( list instanceof FTreeList ) return new FTreeList < Elt > ( concat ( tree , ( ( FTreeList ) list ) . tree ) , elt_comp ) ; else return new FTreeList < Elt > ( concat ( tree , fromCollection ( list ) ) , elt_comp ) ; }
te	IDF	@ DefaultHandler public Resolution helloname ( ) { name = getName ( ) ; return new ForwardResolution ( "/helloworld/index.jsp" ) ; }
te	IDF	public void actionPerformed ( ActionEvent arg0 ) { int result = JOptionPane . showConfirmDialog ( null , "Do you want return to Launcher? All changes will be lost!" , "Quiz Converter v1.6" , JOptionPane . YES_NO_CANCEL_OPTION , JOptionPane . QUESTION_MESSAGE ) ; if ( result == JOptionPane . YES_OPTION ) { dispose ( ) ; new AliveTask ( ) { @ Override public void run ( ) { try { Thread . sleep ( 500 ) ; } catch ( InterruptedException e ) { } FrameRunner . run ( LauncherDialog . class ) ; } } . start ( ) ; } }
te	KEY	@ Override public boolean isAlive ( ) { return alive ; }
te	KEY	public int getSubtreeSize ( ) { return subtreeSize ; }
te	IDF	public static void main ( String args [ ] ) { NaiveAgent na = new NaiveAgent ( ) ; if ( args . length > 0 ) na . currentLevel = Integer . parseInt ( args [ 0 ] ) ; na . run ( ) ; }
te	IDF	public void updateText ( ) { Highlighter . HighlightPainter hpPainter = new DefaultHighlighter . DefaultHighlightPainter ( player . hpColor ( ) ) ; Highlighter . HighlightPainter nutritionPainter = new DefaultHighlighter . DefaultHighlightPainter ( player . hungerColor ( ) ) ; int hpStartMarker = 0 ; int hpEndMarker = 0 ; int nutritionStartMarker = 0 ; int nutritionEndMarker = 0 ; String text = "Player: " ; text += "HP = " ; hpStartMarker = text . length ( ) ; text += player . getCurrentHP ( ) ; hpEndMarker = text . length ( ) ; text += "  Strength = " + player . getStrength ( ) ; text += "  Dexterity = " + player . getDexterity ( ) ; text += "  Armour: " + player . getACBonus ( ) ; text += "  Nutrition = " ; nutritionStartMarker = text . length ( ) ; text += player . hungerText ( ) ; nutritionEndMarker = text . length ( ) ; text += "  XP = " + player . getXP ( ) ; setText ( text ) ; try { this . getHighlighter ( ) . addHighlight ( hpStartMarker , hpEndMarker , hpPainter ) ; this . getHighlighter ( ) . addHighlight ( nutritionStartMarker , nutritionEndMarker , nutritionPainter ) ; } catch ( BadLocationException e ) { } }
te	IDF	@ Test public void canGetShoppingCart ( ) { Map < Integer , Integer > sc = new LinkedHashMap < > ( ) ; try { insertShoppingCart ( user1 . getEmail ( ) , prod_id1 , 20 ) ; insertShoppingCart ( user1 . getEmail ( ) , prod_id2 , 10 ) ; sc = shoppingCart . getShoppingCart ( user1 ) ; deleteShoppingCartUser ( user1 ) ; } catch ( WebshopAppException e ) { e . printStackTrace ( ) ; } assertTrue ( ( sc . size ( ) == 2 ) && ( sc . get ( prod_id1 ) == 20 ) && ( sc . get ( prod_id2 ) == 10 ) ) ; }
te	KEY	public int getPageCount ( ) { return pageCount ; }
te	KEY	public static DerbySingleton getInstance ( ) { return instance ; }
te	KEY	private HashSystem ( ) { }
te	IDF	public void setPlayerLog ( PlayerLog p ) { log = p ; }
te	IDF	Constructor_2 ( int x , int y ) { a = x ; b = y ; }
te	IDF	public void actionPerformed ( ActionEvent e ) { String command = e . getActionCommand ( ) ; if ( command . startsWith ( "choose" ) ) { int num = MainGUI . getCommandNum ( "choose" , command ) ; File f = MainGUI . getFile ( this , "Choose " + labels [ num ] + " key file" ) ; if ( f == null ) return ; keyPaths [ num ] . setText ( f . getAbsolutePath ( ) ) ; } }
te	KEY	public void transform ( double [ ] src , double [ ] dst ) ;
te	IDF	@ Test public void testIterator ( ) { Iterator < String > itr = abc . iterator ( ) ; assertTrue ( itr . hasNext ( ) ) ; assertEquals ( "a" , itr . next ( ) ) ; assertEquals ( "b" , itr . next ( ) ) ; assertTrue ( itr . hasNext ( ) ) ; assertTrue ( itr . hasNext ( ) ) ; assertEquals ( "c" , itr . next ( ) ) ; boolean failed = false ; try { itr . next ( ) ; } catch ( Exception e ) { failed = true ; } assertTrue ( failed ) ; }
te	IDF	private static Object [ ] insert2 ( Object [ ] ary , int idx , Object key , Object value ) { int nkeys = ary . length >> 1 ; Object [ ] a = new Object [ ary . length + 2 ] ; for ( int i = 0 ; i < idx ; ++ i ) { a [ i ] = ary [ i ] ; a [ i + nkeys + 1 ] = ary [ i + nkeys ] ; } a [ idx ] = key ; a [ idx + nkeys + 1 ] = value ; for ( int i = idx ; i < nkeys ; ++ i ) { a [ i + 1 ] = ary [ i ] ; a [ i + nkeys + 2 ] = ary [ i + nkeys ] ; } return a ; }
te	IDF	public void printCoordinates ( ) { System . out . println ( "Snake Coords Dump <" + player . getNick ( ) + ">:" ) ; for ( int i = 0 ; i < xcoords . size ( ) ; i ++ ) { int x = xcoords . get ( i ) . intValue ( ) ; int y = ycoords . get ( i ) . intValue ( ) ; System . out . println ( "x[" + i + "] y[" + i + "]: " + x + "  " + y ) ; } System . out . println ( "Snake Coords Dump <" + player . getNick ( ) + "> end." ) ; }
te	KEY	public void remove ( ) { throw new UnsupportedOperationException ( ) ; }
te	IDF	public static String getTimeToDay ( ) { SimpleDateFormat dateFormat = new SimpleDateFormat ( dateFormatToDay ) ; return dateFormat . format ( new Date ( ) ) ; }
te	IDF	public JSONObject putOpt ( String key , Object value ) throws JSONException { if ( key != null && value != null ) { put ( key , value ) ; } return this ; }
te	KEY	public void run ( ) { new IfNetworkBased ( ) . setVisible ( true ) ; }
te	IDF	private static boolean between ( double [ ] [ ] a , double value , int index ) { double minA = Math . min ( a [ 0 ] [ index ] , a [ 1 ] [ index ] ) ; double maxA = Math . max ( a [ 0 ] [ index ] , a [ 1 ] [ index ] ) ; if ( value < minA || value > maxA ) return false ; return true ; }
te	KEY	@ Override public void call ( ) { this . called . set ( true ) ; }
te	KEY	public boolean canUseIrrigation ( ) { return getAvailableActionPoints ( false ) > 0 ; }
te	KEY	public static int evaluate ( DraughtsState ds , boolean white ) { int [ ] pieces = ds . getPieces ( ) ; int total = 0 ; for ( int piece : pieces ) { switch ( piece ) { case 0 : total += 0 ; break ; case 1 : total += 100 ; break ; case 2 : total -= 100 ; break ; case 3 : total += 300 ; break ; case 4 : total -= 300 ; break ; case 5 : total += 0 ; break ; } } if ( ! white ) { total = - total ; } return total ; }
te	KEY	public int [ ] getData ( ) { return m_hexData ; }
te	KEY	public int getOverUnderPar ( ) { return overUnderPar ; }
te	IDF	public void setString ( String x ) throws SQLException { this . ps . setString ( parameterIndex ++ , x ) ; }
te	KEY	public int getxCordinate ( ) { return xCordinate ; }
te	IDF	@ Override public List < AbstractMutableFormula > apply ( List < AbstractMutableFormula > population , Random rnd ) { List < AbstractMutableFormula > newPopulation = new ArrayList < AbstractMutableFormula > ( ) ; for ( AbstractMutableFormula formula : population ) { newPopulation . add ( mutate ( formula , rnd ) ) ; } return newPopulation ; }
te	KEY	public Segment ( ) { }
te	IDF	private UdpSender ( ) { try { senderSocket = new DatagramSocket ( ) ; } catch ( SocketException e ) { e . printStackTrace ( ) ; } }
te	IDF	@ Override public void initTrans ( ) throws Exception { try { oConexionMySQL . setAutoCommit ( false ) ; } catch ( SQLException e ) { throw new Exception ( "Mysql.initTrans: Error al iniciar transacci\uFFFDn: " + e . getMessage ( ) ) ; } }
te	IDF	@ Override public void run ( ) { converge = options . numHcConverge ; earlyStop = options . earlyStop ; double goldScore = - double . MAX_VALUE ; if ( addLoss ) { goldScore = calcScore ( inst ) ; } DependencyInstance now = new DependencyInstance ( inst ) ; while ( ! stopped ) { SemanticFrame [ ] predFrames = new SemanticFrame [ numframes ] ; SemanticFrame [ ] frames = inst . frames ; TIntArrayList [ ] args = getArgs ( ) ; for ( int i = 0 ; i < numframes ; ++ i ) { predFrames [ i ] = sequentialSampling ( frames [ i ] , goldlbids [ i ] , sfd , i , args [ i ] ) ; } now . frames = predFrames ; hillClimbing ( now , args ) ; double score = calcScore ( now ) ; synchronized ( pred ) { ++ totRuns ; if ( score > bestScore ) { bestScore = score ; if ( addLoss && unchangedRuns >= earlyStop + options . numHcThreads && bestScore >= goldScore + 1e-6 ) System . out . print ( "(" + unchangedRuns + ") " ) ; unchangedRuns = 0 ; pred . frames = now . frames ; } else { ++ unchangedRuns ; if ( unchangedRuns >= converge ) stopped = true ; if ( addLoss && unchangedRuns >= earlyStop && bestScore >= goldScore + 1e-6 ) stopped = true ; } } } }
te	IDF	public void serialize ( final javax . xml . namespace . QName parentQName , javax . xml . stream . XMLStreamWriter xmlWriter , boolean serializeType ) throws javax . xml . stream . XMLStreamException , org . apache . axis2 . databinding . ADBException { java . lang . String prefix = null ; java . lang . String namespace = null ; prefix = parentQName . getPrefix ( ) ; namespace = parentQName . getNamespaceURI ( ) ; writeStartElement ( prefix , namespace , parentQName . getLocalPart ( ) , xmlWriter ) ; if ( serializeType ) { java . lang . String namespacePrefix = registerPrefix ( xmlWriter , "http://tinyurl.com.src" ) ; if ( ( namespacePrefix != null ) && ( namespacePrefix . trim ( ) . length ( ) > 0 ) ) { writeAttribute ( "xsi" , "http://www.w3.org/2001/XMLSchema-instance" , "type" , namespacePrefix + ":getLongUrlResponse" , xmlWriter ) ; } else { writeAttribute ( "xsi" , "http://www.w3.org/2001/XMLSchema-instance" , "type" , "getLongUrlResponse" , xmlWriter ) ; } } if ( local_returnTracker ) { namespace = "http://tinyurl.com.src" ; writeStartElement ( null , namespace , "return" , xmlWriter ) ; if ( local_return == null ) { writeAttribute ( "xsi" , "http://www.w3.org/2001/XMLSchema-instance" , "nil" , "1" , xmlWriter ) ; } else { xmlWriter . writeCharacters ( local_return ) ; } xmlWriter . writeEndElement ( ) ; } xmlWriter . writeEndElement ( ) ; }
te	KEY	public int getMeasureNumber ( ) { return measureNumber ; }
te	KEY	public void setValPag_Venta ( double ValPag_Venta ) { this . ValPag_Venta = ValPag_Venta ; }
te	IDF	public void setConnection ( Connection connection ) { this . connection = connection ; }
te	KEY	public long getId ( ) { return id ; }
te	IDF	@ Override public void pathDone ( ) { out . pathDone ( ) ; }
te	IDF	public IterationResult ( T result , double error , int iterationsNeeded , Type type ) { this . result = result ; this . error = error ; this . iterationsNeeded = iterationsNeeded ; this . resultType = type ; }
te	IDF	public InventoryUpdateException ( String string ) { super ( string ) ; }
te	IDF	@ Test ( timeout = TIMEOUT ) public void testNonEmpty ( ) { heap . insert ( 0 ) ; assertFalse ( "Heap should be nonempty" , heap . isEmpty ( ) ) ; }
te	KEY	public double getCompletions ( ) { return completions ; }
te	KEY	public static Connection getConexao ( ) { return conexao ; }
te	KEY	public void setReldepth ( double reldepth ) { this . reldepth = reldepth ; }
te	KEY	public static int getMingGongByMonthAndHour ( int month , int hour ) { return mingGongBiao [ hour ] [ month ] ; }
te	KEY	public OrderItem ( ) { }
te	KEY	public abstract void config ( ) ;
te	KEY	public DeepLink createDeepLink ( ) { return new DeepLink ( ) ; }
te	IDF	private void OP_INX ( ) { int iMem = getX ( ) ; int iVal = int8 ( iMem + 1 ) ; setNFlag ( getBit ( iVal , 7 ) ) ; setZFlag ( iVal == 0 ) ; setX ( iVal ) ; }
te	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { vrmlFileLoaderActionPerformed ( evt ) ; }
te	KEY	float damage ( float damage ) ;
te	KEY	public String [ ] getColumnNames ( ) { return this . columnNames ; }
te	KEY	public boolean isRunning ( ) { return m_emuTimer . isRunning ( ) ; }
te	KEY	public long getId ( ) { return id ; }
te	KEY	void call ( int i , long l ) ;
te	KEY	@ Override public void stop ( ) { stopped = true ; }
te	IDF	@ Override public E getElementAt ( int arg0 ) { return participants . get ( arg0 ) ; }
te	IDF	public static void store ( ) { for ( int i = 0 ; i < fib . length ; i ++ ) { if ( i < 2 ) { fib [ i ] = 1 ; } else { fib [ i ] = fib [ i - 1 ] + fib [ i - 2 ] ; } } }
te	IDF	public void matrixMultiply ( final Matrix mIn ) { Matrix mat = new Matrix ( ) ; mat . _11 = ( matrix . _11 * mIn . _11 ) + ( matrix . _12 * mIn . _21 ) + ( matrix . _13 * mIn . _31 ) ; mat . _12 = ( matrix . _11 * mIn . _12 ) + ( matrix . _12 * mIn . _22 ) + ( matrix . _13 * mIn . _32 ) ; mat . _13 = ( matrix . _11 * mIn . _13 ) + ( matrix . _12 * mIn . _23 ) + ( matrix . _13 * mIn . _33 ) ; mat . _21 = ( matrix . _21 * mIn . _11 ) + ( matrix . _22 * mIn . _21 ) + ( matrix . _23 * mIn . _31 ) ; mat . _22 = ( matrix . _21 * mIn . _12 ) + ( matrix . _22 * mIn . _22 ) + ( matrix . _23 * mIn . _32 ) ; mat . _23 = ( matrix . _21 * mIn . _13 ) + ( matrix . _22 * mIn . _23 ) + ( matrix . _23 * mIn . _33 ) ; mat . _31 = ( matrix . _31 * mIn . _11 ) + ( matrix . _32 * mIn . _21 ) + ( matrix . _33 * mIn . _31 ) ; mat . _32 = ( matrix . _31 * mIn . _12 ) + ( matrix . _32 * mIn . _22 ) + ( matrix . _33 * mIn . _32 ) ; mat . _33 = ( matrix . _31 * mIn . _13 ) + ( matrix . _32 * mIn . _23 ) + ( matrix . _33 * mIn . _33 ) ; matrix = mat ; }
te	IDF	public void saveCurrentPreset ( ) { if ( pointer == 1 ) { File xmlFile = defFile ; Writer writer = null ; try { writer = new FileWriter ( xmlFile ) ; xstream . toXML ( def , writer ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } if ( writer != null ) { try { writer . flush ( ) ; writer . close ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } xmlFile = null ; } else if ( pointer == 2 ) { File xmlFile = browserFile ; Writer writer = null ; try { writer = new FileWriter ( xmlFile ) ; xstream . toXML ( browser , writer ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } if ( writer != null ) { try { writer . flush ( ) ; writer . close ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } xmlFile = null ; } else if ( pointer == 3 ) { File xmlFile = app1File ; Writer writer = null ; try { writer = new FileWriter ( xmlFile ) ; xstream . toXML ( app1 , writer ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } if ( writer != null ) { try { writer . flush ( ) ; writer . close ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } xmlFile = null ; } else if ( pointer == 4 ) { File xmlFile = app2File ; Writer writer = null ; try { writer = new FileWriter ( xmlFile ) ; xstream . toXML ( app2 , writer ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } if ( writer != null ) { try { writer . flush ( ) ; writer . close ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } xmlFile = null ; } else if ( pointer == 5 ) { File xmlFile = app3File ; Writer writer = null ; try { writer = new FileWriter ( xmlFile ) ; xstream . toXML ( app3 , writer ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } if ( writer != null ) { try { writer . flush ( ) ; writer . close ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } xmlFile = null ; } else { File xmlFile = defFile ; Writer writer = null ; try { writer = new FileWriter ( xmlFile ) ; xstream . toXML ( def , writer ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } if ( writer != null ) { try { writer . flush ( ) ; writer . close ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } xmlFile = null ; } }
te	IDF	@ Test public void testCountContacts ( ) throws Exception { System . out . println ( "************ Testing CountContacts ************" ) ; String message = mtbService . countContacts ( username , hashedPassword ) ; System . out . println ( "Message from API: " + message ) ; String response [ ] = message . split ( "::" ) ; assert . assertEquals ( "Checking simple successful call to countcontats" , "ok" , response [ 0 ] . toLowerCase ( ) ) ; }
te	IDF	public int maxProduct ( int [ ] A ) { if ( A . length == 1 ) return A [ 0 ] ; int max = A [ 0 ] , min = A [ 0 ] , result = A [ 0 ] ; for ( int i = 1 ; i < A . length ; i ++ ) { int tmp = max ; max = Math . max ( Math . max ( max * A [ i ] , min * A [ i ] ) , A [ i ] ) ; min = Math . min ( Math . min ( tmp * A [ i ] , min * A [ i ] ) , A [ i ] ) ; result = Math . max ( max , result ) ; } return result ; }
te	IDF	@ Override public List < Integer > apply ( List < Integer > result , Integer input , AtomicBoolean reduced ) { result . add ( input ) ; return result ; }
te	IDF	ArrayList < String > getColumnNames ( ) ;
te	KEY	public void setCurrentAxisY ( double currentAxisY ) ;
te	KEY	public Builder winAgainstGPPlayerWeight ( int winAgainstGPPlayerWeight ) { this . winAgainstGPPlayerWeight = winAgainstGPPlayerWeight ; return this ; }
te	KEY	public abstract ActionMenuItem [ ] get_menus ( ) ;
te	IDF	@ Override public void executa ( NotaFiscal nf ) { System . out . println ( "Enviei por sms" ) ; }
te	KEY	protected void initialize ( ) { }
te	IDF	public static void main ( String [ ] args ) { if ( args . length < 1 ) { System . err . println ( "Usage: java FollowPointers input-file" ) ; return ; } String filename = args [ 0 ] ; Scanner scanner = null ; int [ ] array = null ; int size = 0 ; try { scanner = new Scanner ( new FileInputStream ( filename ) ) ; int i = 0 ; while ( scanner . hasNextLine ( ) ) { String line = scanner . nextLine ( ) ; if ( null == line || line . length ( ) == 0 ) break ; if ( 0 == i ) { size = Integer . parseInt ( line ) ; array = new int [ size ] ; } else { int val = Integer . parseInt ( line ) ; array [ i - 1 ] = val ; } i ++ ; } if ( 0 == array . length ) { System . err . println ( "Cannot process pointers" ) ; return ; } int result = followPointers ( array ) ; System . out . println ( result ) ; } catch ( Exception e ) { System . err . println ( "Error processing input file " + filename ) ; e . printStackTrace ( ) ; } finally { if ( null != scanner ) { scanner . close ( ) ; } } }
te	KEY	protected abstract void sendCommand ( ) ;
te	KEY	public void setRelactionLevel ( int relactionLevel ) { this . relactionLevel = relactionLevel ; }
te	IDF	public S merge ( S entity ) ;
te	IDF	private void updateRESM0 ( int data ) { setRegister ( RESM0 , data ) ; if ( ! getBit ( getRegister ( RESMP0 ) , 1 ) ) setPosM0 ( getPicturePosition ( ) >= 0 ? ( getPicturePosition ( ) + 4 ) % HORIZONTAL_PICTURE : 2 ) ; updateMissileToPlayerCentering ( 0 ) ; }
te	IDF	public Proyecto ( String descripcionProyecto , int estadoProyecto , Date fechainicio , Date fechafinal ) { this . descripcionProyecto = descripcionProyecto ; this . estadoProyecto = estadoProyecto ; this . fechainicio = fechainicio ; this . fechafinal = fechafinal ; }
te	IDF	public Map < Integer , String > getLog ( ) { return log ; }
te	KEY	public void update ( ) { }
te	KEY	public void initialize ( ) { }
te	IDF	public DbTemplate findTemplateSource ( String templateName ) throws IOException { String name = templateName . substring ( 0 , templateName . indexOf ( "_en_" ) ) ; DbTemplate dbtemp = new DbTemplate ( ) ; DBCursor cursor = coll . find ( new BasicDBObject ( ) . append ( "template_name" , name ) ) ; if ( cursor . hasNext ( ) ) { DBObject o = cursor . next ( ) ; String val = ( String ) o . get ( "template" ) ; dbtemp . template = val ; dbtemp . lastModified = new Date ( ) . getTime ( ) ; } return dbtemp ; }
te	KEY	public void cancel ( ) { if ( _process != null ) { _process . destroy ( ) ; } }
te	KEY	@ Override public boolean blockExplosion ( ) { return false ; }
te	IDF	public void setId ( String id ) { this . id = id ; }
te	KEY	void checkFinishingPossibility ( ) { if ( this . canFinish ( ) ) { this . host . provideFinishingCombination ( this . calculateFinishingCombinations ( ) ) ; } }
te	KEY	public char next ( ) throws JSONException { int c ; if ( this . usePrevious ) { this . usePrevious = false ; c = this . previous ; } else { try { c = this . reader . read ( ) ; } catch ( IOException exception ) { throw new JSONException ( exception ) ; } if ( c <= 0 ) { this . eof = true ; c = 0 ; } } this . index += 1 ; if ( this . previous == '' ) { this . line += 1 ; this . character = c == '' ? 0 : 1 ; } else if ( c == '' ) { this . line += 1 ; this . character = 0 ; } else { this . character += 1 ; } this . previous = ( char ) c ; return this . previous ; }
te	KEY	private void OP_NOP ( ) { }
te	KEY	void keyRealesed ( int keycode ) ;
te	IDF	public LinkedList < SecurityGoal > getSg_elem ( ) { return sg_elems ; }
te	KEY	public abstract String checkAndSave ( ) ;
te	IDF	private void initializeSeminars ( List < Seminar > seminars ) { for ( Seminar seminar : seminars ) { initializeSeminar ( seminar ) ; } }
te	IDF	public DBFReader ( String s ) throws JDBFException { stream = null ; fields = null ; nextRecord = null ; nFieldCount = 0 ; try { init ( new FileInputStream ( s ) ) ; } catch ( FileNotFoundException filenotfoundexception ) { throw new JDBFException ( filenotfoundexception ) ; } }
te	IDF	private org . apache . axiom . om . OMElement toOM ( src . com . tinyurlwebservicestub . TinyUrlWebServiceStub . GetShortUrlResponse param , boolean optimizeContent ) throws org . apache . axis2 . AxisFault { try { return param . getOMElement ( src . com . tinyurlwebservicestub . TinyUrlWebServiceStub . GetShortUrlResponse . MY_QNAME , org . apache . axiom . om . OMAbstractFactory . getOMFactory ( ) ) ; } catch ( org . apache . axis2 . databinding . ADBException e ) { throw org . apache . axis2 . AxisFault . makeFault ( e ) ; } }
te	KEY	public boolean isInSight ( ) { return inSight ; }
te	KEY	public void setPoint ( int point ) { this . point = point ; }
te	KEY	public long getHeight ( ) { return height ; }
te	KEY	private Chan ( ) { }
te	IDF	public int compareForPoints ( PalaceCard card ) { int points = 0 ; for ( Integer i : card . getSymbols ( ) ) { if ( this . symbols . contains ( i ) ) points ++ ; } return points ; }
te	KEY	public int getId ( ) { return id ; }
te	KEY	protected boolean isFinished ( ) { return isTimedOut ( ) ; }
te	IDF	public Object setValue ( Object newval ) { throw new UnsupportedOperationException ( ) ; }
te	KEY	public boolean handlePreferences ( ) { return true ; }
te	IDF	public AST rExpr ( ) throws SyntaxError { AST t , kid = rSimpleExpr ( ) ; t = getRelationTree ( ) ; if ( t == null ) { return kid ; } t . addKid ( kid ) ; t . addKid ( rSimpleExpr ( ) ) ; return t ; }
te	IDF	public List < DataProviderStatus > getStatuses ( ) throws Exception { if ( this . statuses == null ) { this . statuses = new ArrayList < DataProviderStatus > ( ) ; NodeList nodes = Utilities . selectNodes ( this . getDocument ( ) , "/dc:DCTransaction/dc:CheckStatusRs/dc:Payload/dc:DataProviders/dc:DataProvider" , XMLLabels . STANDARD_NAMESPACES ) ; for ( int i = 0 ; i < nodes . getLength ( ) ; ++ i ) { Node node = nodes . item ( i ) ; String name = Utilities . selectSingleText ( node , "./dc:Name" , XMLLabels . STANDARD_NAMESPACES ) ; String status = Utilities . selectSingleText ( node , "./dc:Status" , XMLLabels . STANDARD_NAMESPACES ) ; String version = Utilities . selectSingleText ( node , "./dc:Version" , XMLLabels . STANDARD_NAMESPACES ) ; this . statuses . add ( new DataProviderStatus ( name , status , version ) ) ; } } return this . statuses ; }
te	IDF	private void handleGamePlaying ( ) { board . update ( ) ; if ( stopWatch . isTimeUp ( ) ) { changeGameState ( GameState . TIME_OUT ) ; } else if ( board . getWordsLeft ( ) == 0 ) { changeGameState ( GameState . LEVEL_CHANGE ) ; } }
te	KEY	public Activator ( ) { }
te	KEY	protected int getLifetimeThrows ( ) { return lifetimeThrows ; }
te	KEY	AboutBox ( ) { this ( null ) ; }
te	IDF	@ Override public void mouseEntered ( MouseEvent arg0 ) { }
te	IDF	@ Test public void podeAtacar ( ) throws CasaOcupadaException , CloneNotSupportedException { assert . assertTrue ( bispoBranco . podeAtacar ( new Posicao ( 7 , 3 ) , new Posicao ( 6 , 4 ) , tabuleiro ) ) ; assert . assertTrue ( bispoBranco . podeAtacar ( new Posicao ( 6 , 6 ) , new Posicao ( 8 , 8 ) , tabuleiro ) ) ; assert . assertTrue ( bispoBranco . podeAtacar ( new Posicao ( 3 , 5 ) , new Posicao ( 5 , 3 ) , tabuleiro ) ) ; assert . assertFalse ( bispoBranco . podeAtacar ( new Posicao ( 3 , 7 ) , new Posicao ( 4 , 5 ) , tabuleiro ) ) ; assert . assertFalse ( bispoBranco . podeAtacar ( new Posicao ( 8 , 4 ) , new Posicao ( 6 , 2 ) , tabuleiro ) ) ; assert . assertFalse ( bispoBranco . podeAtacar ( new Posicao ( 1 , 8 ) , new Posicao ( 3 , 6 ) , tabuleiro ) ) ; }
te	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { passPasswordActionPerformed ( evt ) ; }
te	IDF	public static String getHostName ( ) { if ( LCARS . hostName == null ) { try { LCARS . hostName = InetAddress . getLocalHost ( ) . getHostName ( ) ; } catch ( java . net . UnknownHostException e ) { LCARS . hostName = "localhost" ; } } return LCARS . hostName ; }
te	KEY	public MsgPk ( ) { }
te	IDF	public EFPersistable get ( long id , class type ) { for ( Entity e : entities ) { if ( e . getObject ( ) . getId ( ) == id && e . getObject ( ) . getClass ( ) . equals ( type ) ) { return e . getObject ( ) ; } } throw new EntityNotFoundException ( id , type ) ; }
te	IDF	public Invite [ ] findByInviter ( String inviter ) throws InviteDaoException { return findByDynamicSelect ( SQL_SELECT + " WHERE inviter = ?" , new Object [ ] { inviter } ) ; }
te	IDF	@ Override public void onMessageReceived ( Message < ServerProtocolParameters > message ) { synchronized ( mListeners ) { for ( MessageListener listener : mListeners ) { try { listener . onMessageReceived ( message ) ; } catch ( RuntimeException e ) { System . out . println ( "Error notifying listener." ) ; e . printStackTrace ( ) ; } } } System . out . println ( "\n------------------------------------------------------------\n" + "Message received.\n------------------------------------------------------------\n" + message ) ; if ( message instanceof ServerPingMessage ) { sendMessage ( new ClientPingMessage ( getProtocolParameters ( ) ) ) ; } }
te	KEY	public void setup ( ) { connect ( ) ; }
te	KEY	public int getBorderSize ( ) { return this . borderSize ; }
te	KEY	public int getWins ( ) { return wins ; }
te	IDF	public static void print ( long world ) { System . out . println ( "-" ) ; for ( int row = 0 ; row < 8 ; row ++ ) { for ( int col = 0 ; col < 8 ; col ++ ) { System . out . print ( getCell ( world , col , row ) ? "#" : "_" ) ; } System . out . println ( ) ; } }
te	IDF	public int getPages ( String strTabla , int intRegsPerPage , ArrayList < FilterBean > alFilter , HashMap < String , String > hmOrder ) throws Exception ;
te	KEY	public Light ( ) { }
te	KEY	public int getKillsSuicide ( ) { return suicideKills ; }
te	KEY	public float getY ( float alpha ) { return 0 ; }
te	KEY	@ JsonProperty ( "id" ) public long getId ( ) { return id ; }
te	IDF	@ Override public SearchRequestBuilder withMobileWebRequestOffset ( long offset ) { getMobileWebRequest ( ) . setOffset ( offset ) ; return this ; }
te	IDF	public void paint ( Graphics g , Shape allocation ) { Graphics2D g2d = ( Graphics2D ) g ; double zoomFactor = getZoomFactor ( ) ; AffineTransform old = g2d . getTransform ( ) ; g2d . scale ( zoomFactor , zoomFactor ) ; super . paint ( g2d , allocation ) ; g2d . setTransform ( old ) ; }
te	KEY	public void setId ( int id ) { this . id = id ; }
te	KEY	@ Override public boolean isOuterRing ( ) { return outerRing ; }
te	IDF	default SimpleMath compose ( SimpleMath before ) { Objects . requireNonNull ( before ) ; return n -> evaluate ( before . evaluate ( n ) ) ; }
te	KEY	public void setElectiveId ( long electiveId ) { this . electiveId = electiveId ; }
te	IDF	@ Override protected void setupInitialState ( ) { this . state = ConnectedState . DISCONNECTED ; }
te	IDF	public CharacterIcons ( String getCharacter ) { if ( getCharacter . equals ( "White" ) ) setImage ( new GreenfootImage ( "CharacterIcons//FuShu.png" ) ) ; else if ( getCharacter . equals ( "Bond" ) ) setImage ( new GreenfootImage ( "CharacterIcons//JamesBond.png" ) ) ; else if ( getCharacter . equals ( "Ninja" ) ) setImage ( new GreenfootImage ( "CharacterIcons//Torato.png" ) ) ; else if ( getCharacter . equals ( "Mage" ) ) setImage ( new GreenfootImage ( "CharacterIcons//Gajiwala.png" ) ) ; else if ( getCharacter . equals ( "Ringer" ) ) setImage ( new GreenfootImage ( "CharacterIcons//MarkGreen.png" ) ) ; }
te	KEY	public void setLife ( int life ) { this . life = life ; }
te	IDF	@ Override public void print ( ) { System . out . println ( "Varia\u00E7\u00E3o do componente concreto" ) ; }
te	KEY	public int y ( ) { return ( int ) VConvert . to2DPoint ( ( int ) gd ( "x" ) , ( int ) gd ( "y" ) , 0 ) . y ; }
te	IDF	public static List < ABObject > SupporteeToppling ( ABObject supportee , ABObject obs , List < ABObject > objects ) { List < ABObject > affectedList = new ArrayList < ABObject > ( ) ; double ratio = obs . height / obs . width ; List < ABObject > temp = ABUtil . getSupporters ( obs , objects , 1 ) ; List < ABObject > temp1 = ABUtil . getAllSupporter ( temp , objects ) ; affectedList . addAll ( temp ) ; affectedList . addAll ( temp1 ) ; if ( ratio >= TOPPLING_RATIO_THRESHOLD ) { affectedList . addAll ( GetNeighbour ( obs , objects , false ) ) ; } return affectedList ; }
te	KEY	public IdentificadorJaDeclaradoException ( ) { super ( ) ; }
te	KEY	public int getThrowCount ( ) { if ( closedWithUnthrownDarts ) { return 3 ; } return this . throwz . size ( ) ; }
te	IDF	private int binarySearchHi ( Object [ ] ary , Object hi ) { int bin_srch_res = binarySearch ( ary , hi ) ; return bin_srch_res >> BIN_SEARCH_INDEX_SHIFT ; }
te	IDF	public void setTitle ( String title ) { this . title = title ; }
te	KEY	protected boolean isFinished ( ) { return isTimedOut ( ) ; }
te	KEY	public double getF ( ) { return kF . getDouble ( ) ; }
te	IDF	public void setThreat ( String threat ) { this . threat = threat ; }
te	IDF	public Profile [ ] findWhereIdProfileEquals ( Integer idProfile ) throws ProfileDaoException { return findByDynamicSelect ( SQL_SELECT + " WHERE idProfile = ? ORDER BY idProfile" , new Object [ ] { idProfile } ) ; }
te	KEY	long [ ] getResultMinerals ( ) ;
te	IDF	@ Override public void runTest ( ) { List < Interval > intervals = new ArrayList < Interval > ( ) ; intervals . add ( new Interval ( 1 , 3 ) ) ; intervals . add ( new Interval ( 2 , 6 ) ) ; printIntervals ( intervals ) ; intervals = merge ( intervals ) ; printIntervals ( intervals ) ; }
te	KEY	public int getNumberOfPages ( ) { return children . length ; }
te	KEY	public int getHga ( ) { return hga ; }
te	IDF	@ Override int makeTurn ( ) { System . out . print ( "You choose: " ) ; int number ; do { number = in . nextInt ( ) ; } while ( number < Game . MIN_CHOICE || number > Game . MAX_CHOICE ) ; return number ; }
te	KEY	@ Override public void setSelectionIntoScenarioStep ( ) { }
te	KEY	public IfTree ( ) { }
te	KEY	public EtatBateau getEtatBateau ( ) { return this . etat ; }
te	IDF	@ Override public boolean holds ( final LineGapCircle oneVertexPattern ) { return canBeFlat ( oneVertexPattern ) ; }
te	IDF	public static void main ( String [ ] args ) throws Exception { String s = "Auf dem Weg zur Zufahrt auf das MaRC Gel\u00E4nde  sah Hendrik noch weitere Menschen am Stra\u00DFenrand. Sie standen dort und taten nichts weiter  als sie anzustarren  als sie vorbeifuhren. ''Zumindest stellen sie sich uns nicht mehr in den Weg''  dachte Hendrik. Und gleichzeitig traf es ihn  wie ein Truck von der Seite: Rachel war diesen Typen hilflos ausgeliefert." ; String [ ] sp = s . split ( "''" ) ; System . out . println ( sp . length + " splits." ) ; for ( String ss : sp ) { System . out . println ( "    " + ss ) ; } }
te	IDF	public int generalTree ( Set < Keyword > sensitiveWords , Map < String , Map > wordsTree ) { int len = 0 ; if ( sensitiveWords == null || sensitiveWords . isEmpty ( ) || wordsTree == null ) { return len ; } wordsTreeTmp . clear ( ) ; for ( Keyword w : sensitiveWords ) { if ( len == 0 ) { len = w . getWordLength ( ) ; } else if ( w . getWordLength ( ) < len ) { len = w . getWordLength ( ) ; } AnalysisUtils . makeTreeByWord ( wordsTreeTmp , w . getWord ( ) , w ) ; } wordsTree . clear ( ) ; wordsTree . putAll ( wordsTreeTmp ) ; return len ; }
te	IDF	public void store ( final String path , final InputStream input ) throws IOException { send ( 13 , path , input ) ; }
te	IDF	public VGame ( String ... args ) throws InterruptedException { this . selected = new ArrayList [ 10 ] ; for ( int i = 0 ; i < 10 ; i ++ ) { selected [ i ] = new ArrayList < VObject > ( ) ; } VGraphics . getGraphicManager ( ) . removeAllLayers ( ) ; cfg = VFileReader . readCFG ( new File ( vengine . VEngine . cfg . g ( "modhome" ) + "configuration.cfg" ) ) ; for ( String param : args ) { try { String [ ] pr = param . split ( "=" ) ; cfg . s ( pr [ 0 ] , pr [ 1 ] ) ; } catch ( Exception e ) { } } String v = cfg . g ( "version" ) ; List factions = VFileReader . readList ( new File ( vengine . VEngine . cfg . g ( "modhome" ) + v + "/factions.list" ) ) ; String units [ ] = new File ( vengine . VEngine . cfg . g ( "modhome" ) + v + "/units" ) . list ( ) ; this . types = new CFG [ units . length + 1 ] ; this . factions = new CFG [ factions . size ( ) ] ; for ( int i = 0 ; i < units . length ; i ++ ) { this . types [ i ] = VFileReader . readCFG ( new File ( vengine . VEngine . cfg . g ( "modhome" ) + v + "/units/" + units [ i ] ) ) ; } CFG player = new CFG ( ) ; player . s ( "gamename" , "VPlayer" ) ; player . s ( "processor" , "VPlayer" ) ; this . types [ units . length ] = player ; for ( int i = 0 ; i < this . factions . length ; i ++ ) { this . factions [ i ] = VFileReader . readCFG ( new File ( vengine . VEngine . cfg . g ( "modhome" ) + v + "/factions/" + factions . get ( i ) + ".cfg" ) ) ; } new Thread ( ) { @ Override public void run ( ) { Scanner s = new Scanner ( System . in ) ; System . out . println ( "HScript ready:" ) ; while ( true ) { try { System . out . print ( ">" ) ; String prm [ ] = s . nextLine ( ) . split ( " " ) ; String cmd = prm [ 0 ] ; String prms [ ] = new String [ prm . length - 1 ] ; for ( int i = 0 ; i < prm . length - 1 ; i ++ ) { prms [ i ] = prm [ i + 1 ] ; } command ( cmd , prms ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } } } . start ( ) ; Thread . sleep ( 2000 ) ; Random r = new Random ( ) ; }
te	IDF	String getName ( ) ;
te	IDF	public void horizontalAlignCenter ( int y1 , int y2 ) { this . setY ( y1 + ( y2 - y1 ) / 2 - this . getHeight ( ) / 2 ) ; }
te	KEY	public int getTimesRun ( ) { return timesRun ; }
te	IDF	public Reader ( SyncNotInterruptiblyDemo buff ) { this . buff = buff ; }
te	IDF	public ScalePhotoThread ( Photo photo , int width , int height ) { this . photo = photo ; this . width = width ; this . height = height ; }
te	KEY	public static int randInt ( ) { return rand . nextInt ( ) ; }
te	KEY	public void setChatRoomUserList ( boolean chatRoomUserList ) { this . chatRoomUserList = chatRoomUserList ; }
te	KEY	public void setHgb ( int hgb ) { this . hgb = hgb ; }
te	IDF	public static List < Pattern > loadFromDisk ( String filename ) throws IOException , PatternFormatException { return load ( new FileReader ( filename ) ) ; }
te	KEY	public int getId ( ) { return id ; }
te	IDF	public static void displayErorrMsg ( String errorMessage ) { String fullMessage = "\t+ ERROR: " + errorMessage + " +" ; int dividerLineLength = fullMessage . length ( ) ; StringBuilder dividerLine = new StringBuilder ( dividerLineLength ) ; for ( int i = 0 ; i < dividerLineLength ; i ++ ) { dividerLine . insert ( i , + ) ; } System . out . println ( "\t" + dividerLine . toString ( ) ) ; System . out . println ( fullMessage ) ; System . out . println ( "\t" + dividerLine . toString ( ) ) ; }
te	KEY	public abstract void setBlank ( boolean isBlank ) ;
te	IDF	public void wiggleSort ( int [ ] nums ) { int [ ] sorted = Arrays . copyOfRange ( nums , 0 , nums . length ) ; Arrays . sort ( sorted ) ; int minEnd = ( nums . length - 1 ) / 2 , maxEnd = nums . length - 1 ; for ( int i = 0 ; i < nums . length ; ++ i ) { if ( i % 2 == 0 ) { nums [ i ] = sorted [ minEnd -- ] ; } else { nums [ i ] = sorted [ maxEnd -- ] ; } } }
te	KEY	public boolean isOutOfMoves ( ) { return ( misses == MAX_MOVES ) ; }
te	IDF	private Cell lookupCell ( final LetterElement element ) { for ( int col = 0 ; col < COLS ; col ++ ) { for ( int row = 0 ; row < ROWS ; row ++ ) { if ( matrix [ col ] [ row ] == element ) { return new Cell ( col , row , element . getLetter ( ) ) ; } } } throw new IllegalStateException ( ) ; }
te	IDF	public static void exhaustiveAntiGoalRefineAnalysis ( RequirementGraph req_model , ActorAssociationGraph actor_model , int visual_type , int scope ) throws IOException , ScriptException { req_model . ag_elems . clear ( ) ; req_model . ag_links . clear ( ) ; String expression_file = req_model . generateFormalExpressionToFile ( scope ) ; String security_model_file = InfoEnum . current_directory + "/dlv/models/security_model_" + req_model . getLayer ( ) . toLowerCase ( ) + ".dl " ; String threat_knowledge = InfoEnum . current_directory + "/dlv/anti_goal_rules/threat_knowledge.rule " ; String refine_rule = "" ; refine_rule = InfoEnum . current_directory + "/dlv/dlv -silent -nofacts " + InfoEnum . current_directory + "/dlv/anti_goal_rules/refine_all.rule " + InfoEnum . current_directory + "/dlv/models/asset_model.dl " + expression_file + security_model_file + threat_knowledge ; Runtime rt = Runtime . getRuntime ( ) ; Process pr = rt . exec ( refine_rule ) ; BufferedReader input = new BufferedReader ( new InputStreamReader ( pr . getInputStream ( ) ) ) ; String line = null ; while ( ( line = input . readLine ( ) ) != null ) { line = line . substring ( 1 , line . length ( ) - 1 ) ; String [ ] result = line . split ( "  " ) ; int number = 1 ; for ( String s : result ) { if ( s . startsWith ( "ex_refined_anti_goal" ) && ! s . contains ( "unknown" ) ) { s = s . replaceAll ( "ex_refined_anti_goal\\(" , "" ) ; s = s . replaceAll ( "\\)" , "" ) ; String [ ] ag = s . split ( " " ) ; AntiGoal child_ag = req_model . findExhausiveAntiGoalByAttributes ( ag [ 0 ] , ag [ 1 ] , ag [ 2 ] , ag [ 3 ] ) ; AntiGoal parent_ag = req_model . findExhausiveAntiGoalByAttributes ( ag [ 4 ] , ag [ 5 ] , ag [ 6 ] , ag [ 7 ] ) ; if ( child_ag == null ) { child_ag = new AntiGoal ( ag [ 0 ] , ag [ 1 ] , ag [ 2 ] , ag [ 3 ] , InfoEnum . RequirementElementType . ANTI_GOAL . name ( ) , req_model . getLayer ( ) ) ; child_ag . setId ( String . valueOf ( number ) ) ; number ++ ; req_model . ag_elems . add ( child_ag ) ; } if ( parent_ag == null ) { parent_ag = new AntiGoal ( ag [ 4 ] , ag [ 5 ] , ag [ 6 ] , ag [ 7 ] , InfoEnum . RequirementElementType . ANTI_GOAL . name ( ) , req_model . getLayer ( ) ) ; parent_ag . setId ( String . valueOf ( number ) ) ; number ++ ; req_model . ag_elems . add ( parent_ag ) ; } RequirementLink new_and_refine = new RequirementLink ( InfoEnum . RequirementLinkType . AND_REFINE . name ( ) , child_ag , parent_ag ) ; new_and_refine . refine_type = ag [ 8 ] ; if ( new_and_refine . refine_type . contains ( "o_" ) ) { new_and_refine . setType ( InfoEnum . RequirementLinkType . REFINE . name ( ) ) ; } if ( ! req_model . ag_links . contains ( new_and_refine ) ) { req_model . ag_links . add ( new_and_refine ) ; } if ( new_and_refine . getType ( ) . equals ( InfoEnum . RequirementLinkType . AND_REFINE . name ( ) ) ) { parent_ag . and_refine_links . add ( new_and_refine ) ; } else { parent_ag . refine_links . add ( new_and_refine ) ; } child_ag . parent = parent_ag ; child_ag . parent_link = new_and_refine ; } } } visualizeEAGGraph ( req_model , actor_model , InfoEnum . CANVAS , InfoEnum . INITIAL_VIEW ) ; }
te	IDF	public int getHeight ( int layer ) { return layers . get ( layer ) . getHeight ( ) ; }
te	KEY	public int getAC ( ) { return AC ; }
te	KEY	public float getMaxSpeed ( ) { return 0.2f ; }
te	IDF	public static boolean contains ( PathIterator pi , double x , double y ) { if ( x * 0.0 + y * 0.0 == 0.0 ) { int mask = ( pi . getWindingRule ( ) == WIND_NON_ZERO ? - 1 : 1 ) ; int cross = Curve . pointCrossingsForPath ( pi , x , y ) ; return ( ( cross & mask ) != 0 ) ; } else { return false ; } }
te	KEY	public int getMaxRows ( ) { return maxRows ; }
te	KEY	public static SimpleParameterMapper getInstance ( ) { return instance ; }
te	KEY	private static String monthName ( int month ) { String name = " " ; switch ( month ) { case 1 : return "Jan" ; case 2 : return "Feb" ; case 3 : return "Mar" ; case 4 : return "Apr" ; case 5 : return "May" ; case 6 : return "Jun" ; case 7 : return "Jul" ; case 8 : return "Aug" ; case 9 : return "Sep" ; case 10 : return "Oct" ; case 11 : return "Nov" ; case 12 : return "Dec" ; default : return name ; } }
te	IDF	public void construct ( ) { firstTimePrintingDescription = true ; this . north = new CardinalDirection ( "north" , World . wField , "To the north there is a road that runs east and west." ) ; this . east = new CardinalDirection ( "east" , World . sField , "To the east there is a field and a house." ) ; this . south = new CardinalDirection ( "south" , null , "To the south there is a deadly cliff that drops off to the sea." ) ; this . west = new CardinalDirection ( "west" , null , "To the west there is a rapid river that pours off a cliff into the sea.\n" + "Beyond that is a crenelated castle wall with many towers." ) ; this . aspects . add ( north ) ; this . aspects . add ( east ) ; this . aspects . add ( south ) ; this . aspects . add ( west ) ; return ; }
te	IDF	@ Override public void actionPerformed ( ActionEvent e ) { JCheckBox cb = ( JCheckBox ) e . getSource ( ) ; componentTB . setVisible ( cb . isSelected ( ) ) ; }
te	KEY	boolean isColor ( ) ;
te	KEY	public long getTotal ( ) { return total ; }
te	KEY	public void setDistance ( double distance ) { this . distance = distance ; }
te	KEY	public long getTotal ( ) { return total ; }
te	IDF	public ProgressMonitorDemo ( ) { super ( new BorderLayout ( ) ) ; startButton = new JButton ( "Start" ) ; startButton . setActionCommand ( "start" ) ; startButton . addActionListener ( this ) ; taskOutput = new JTextArea ( 5 , 20 ) ; taskOutput . setMargin ( new Insets ( 5 , 5 , 5 , 5 ) ) ; taskOutput . setEditable ( false ) ; add ( startButton , BorderLayout . PAGE_START ) ; add ( new JScrollPane ( taskOutput ) , BorderLayout . CENTER ) ; setBorder ( BorderFactory . createEmptyBorder ( 20 , 20 , 20 , 20 ) ) ; }
te	KEY	public void setTemperature ( int temperature ) { this . temperature = temperature ; }
te	KEY	public void setCID ( int cID ) { this . cID = cID ; }
te	KEY	public void setTopicnum ( int topicnum ) { this . topicnum = topicnum ; }
te	KEY	public int getMax ( ) { return max ; }
te	KEY	public int getNumberOfEnemies ( ) { return this . numEnemies ; }
te	IDF	private void buttonHistoria_MenuPrincipalActionPerformed ( java . awt . event . ActionEvent evt ) { showPanel ( panelHistoria ) ; }
te	IDF	@ Override protected String getName ( ) { return HashAndSalt . RESOURCE_NAME ; }
te	IDF	public void actionPerformed ( ActionEvent arg0 ) { dispose ( ) ; new AliveTask ( ) { @ Override public void run ( ) { try { Thread . sleep ( 2500 ) ; } catch ( InterruptedException e ) { } FrameRunner . run ( EditorWindow . class ) ; } } . start ( ) ; }
te	KEY	public CreateTaskWindow ( ) { super ( "Create a task" ) ; Register . newWindow ( this ) ; }
te	KEY	public boolean isAnswerCorrect ( ) { return _panel . isAnswerCorrect ( ) ; }
te	KEY	public synchronized void xsetL4repeatable ( boolean flag ) { isL4repeatable = flag ; }
te	KEY	public static int getPixelLen ( ) { return pixelLen ; }
te	IDF	public static Vector2D line_line_infinite ( Vector2D v0 , Vector2D v1 , Vector2D v2 , Vector2D v3 ) { Vector2D intercept = null ; double f1 = ( v1 . x - v0 . x ) ; double g1 = ( v1 . y - v0 . y ) ; double f2 = ( v3 . x - v2 . x ) ; double g2 = ( v3 . y - v2 . y ) ; double f1g2 = f1 * g2 ; double f2g1 = f2 * g1 ; double det = f2g1 - f1g2 ; if ( Math . abs ( det ) > ACCY ) { double s = ( f2 * ( v2 . y - v0 . y ) - g2 * ( v2 . x - v0 . x ) ) / det ; intercept = new Vector2D ( v0 . x + f1 * s , v0 . y + g1 * s ) ; } return intercept ; }
te	KEY	public void setClear ( boolean clear ) { this . clear = clear ; }
te	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButton17ActionPerformed ( evt ) ; }
te	IDF	private void save ( char c ) throws ParsingException { if ( saved != 0 ) handler . putChar ( saved ) ; saved = c ; }
te	KEY	public synchronized int xgetLTAssignedKeyCode ( ) { return < ; }
te	KEY	abstract public String getMessage ( ) ;
te	KEY	private Maps ( ) { }
te	IDF	public AgingWorld ( int width , int height ) { super ( width , height ) ; world = new int [ height ] [ width ] ; for ( int y = 0 ; y < getHeight ( ) ; ++ y ) { for ( int x = 0 ; x < getWidth ( ) ; ++ x ) world [ y ] [ x ] = 1000 ; } }
te	KEY	public double getY ( ) { return y ; }
te	IDF	@ Override public void run ( ) { Date nowDate = new Date ( this . scheduledExecutionTime ( ) ) ; System . out . println ( nowDate ) ; }
te	IDF	public void print_unitTable ( ) { _pieceTable . setItems ( _pieces ) ; }
te	KEY	public boolean isStudent ( ) { for ( Rol rol : rollen ) { if ( rol . getNaam ( ) . equals ( "student" ) ) { return true ; } } return false ; }
te	IDF	@ NotNull String getFilePath ( ) ;
te	IDF	public void message ( String message ) { try { printMessage ( message + "Entered method message()" ) ; semaphore . acquire ( ) ; printMessage ( message + "Acquired semaphore  now waiting my time" ) ; Thread . sleep ( 1000 ) ; printMessage ( message + "Done waiting  releasing semaphore" ) ; semaphore . release ( ) ; } catch ( InterruptedException e ) { printMessage ( message + "Received Interrupt!" ) ; } }
te	IDF	public void mouseEntered ( java . awt . event . MouseEvent evt ) { buttonVoltar_MenuFasesMouseEntered ( evt ) ; }
te	IDF	@ Transactional ( propagation = Propagation . REQUIRES_NEW ) public Bond merge ( Bond entity ) { return null ; }
te	KEY	@ Override protected void bindSelf ( ) { this . messageManager . bind ( this ) ; this . connectionManager . bind ( this ) ; this . discoveryManager . bind ( this ) ; }
te	KEY	@ Override public void destroy ( ) { }
te	KEY	@ BeforeMethod public void setUpMethod ( ) throws Exception { }
te	KEY	@ Override public void setOnDeleteTopic ( ) { throw new UnsupportedOperationException ( "Not implemented" ) ; }
te	IDF	public Point window2Board ( Point point ) { Dimension dimension = getWindowFavoriteSize ( ) ; Dimension boardSize = getBoardSize ( ) ; Point position = new Point ( ( int ) Math . floor ( ( double ) ( point . x * boardSize . width ) / ( double ) dimension . width ) , ( int ) Math . floor ( ( double ) ( point . y * boardSize . height ) / ( double ) dimension . height ) ) ; return position ; }
te	IDF	public String cancelOrdering ( ) throws Exception { logger . info ( "cancelOrdering start. " + index ) ; @ SuppressWarnings ( "unchecked" ) Map < Integer , Price > priceMap = ( Map < Integer , Price > ) session . get ( OtherConstants . SELECTED_TODAY_ORDERING ) ; priceMap . remove ( Integer . parseInt ( index ) ) ; session . put ( OtherConstants . SELECTED_TODAY_ORDERING , priceMap ) ; response . getWriter ( ) . print ( SUCCESS ) ; logger . info ( "cancelOrdering end." ) ; return null ; }
te	IDF	public String getCurrentMonthName ( ) { return getCalendar ( ) . getCurrentMonthName ( ) ; }
te	IDF	@ Test public void testEval ( ) { Map < String , double > vars = new HashMap < String , double > ( ) ; vars . put ( "x" , 6.5 ) ; assertEquals ( 9.5 , new SumOperator ( new Constant ( 3 ) , new Variable ( "x" ) ) . eval ( vars ) , 0 ) ; }
te	KEY	public static final boolean getBit ( int data , int bit ) { return ( data & ( 01 << bit ) ) != 0 ; }
te	KEY	public int getIdlista ( ) { return idlista ; }
te	IDF	private int readIndirect ( int dataHigh , int dataLow ) { int iHLAddr = joinBytes ( dataHigh , dataLow ) ; int iLowByte = readMemory ( int16 ( iHLAddr ) ) ; int iHighByte = readMemory ( int16 ( iHLAddr + 1 ) ) ; int iAddr = joinBytes ( iHighByte , iLowByte ) ; return iAddr ; }
te	IDF	public void setMemo ( String memo ) { this . memo = memo ; }
te	IDF	public ArrayList < TopicOutput > getAllTopics ( ) { return allTopics ; }
te	IDF	public ElementaryFileCertificateDirectory ( CertificateDirectoryEntry [ ] entries ) { this . entries = entries ; }
te	IDF	@ Override public void render ( Graphics2D g ) { this . background . render ( g ) ; g . setColor ( Color . white ) ; this . title . render ( g ) ; if ( showRaccoon ) { fatRaccoon . paintIcon ( GameWindow . getInstance ( ) . getFrame ( ) , g , GameWindow . getInstance ( ) . getWidth ( ) / 2 - fatRaccoon . getIconWidth ( ) / 2 , 25 ) ; } this . backButton . render ( g ) ; this . creditsCollection . render ( g ) ; }
te	IDF	@ Override public void keyReleased ( KeyEvent e ) { switch ( controls . getEvent ( e . getKeyCode ( ) ) ) { case UP : if ( player . getSpeed ( ) . getDirectionY ( ) == 1 ) player . down ( ) ; else player . stopY ( ) ; break ; case DOWN : if ( player . getSpeed ( ) . getDirectionY ( ) == - 1 ) player . up ( ) ; else player . stopY ( ) ; break ; case LEFT : if ( player . getSpeed ( ) . getDirectionX ( ) == 1 ) player . right ( ) ; else player . stopX ( ) ; break ; case RIGHT : if ( player . getSpeed ( ) . getDirectionX ( ) == - 1 ) player . left ( ) ; else player . stopX ( ) ; break ; default : break ; } }
te	KEY	private BingSearchServiceClientFactory ( ) { }
te	IDF	private Condition ( final String value ) { this . value = value ; }
te	IDF	public BingSearchException ( String message , Throwable cause ) { super ( message , cause ) ; }
te	IDF	@ Override public void onCurrentPlayerChanged ( Player currentPlayer , Score score ) { }
te	IDF	private void jButton1ActionPerformed ( java . awt . event . ActionEvent evt ) { new GUIgestionPiezas ( ) . setVisible ( true ) ; this . dispose ( ) ; }
te	IDF	@ SuppressWarnings ( "unchecked" ) private void initComponents ( ) { jLabel1 = new javax . swing . JLabel ( ) ; jLabel2 = new javax . swing . JLabel ( ) ; jLabel3 = new javax . swing . JLabel ( ) ; jTextFieldNama = new javax . swing . JTextField ( ) ; jTextFieldNomor = new javax . swing . JTextField ( ) ; jComboBoxGrup = new javax . swing . JComboBox ( ) ; jButtonSimpan = new javax . swing . JButton ( ) ; setDefaultCloseOperation ( javax . swing . WindowConstants . DISPOSE_ON_CLOSE ) ; setTitle ( "Tambah Kontak" ) ; jLabel1 . setText ( "Nama" ) ; jLabel2 . setText ( "Nomor" ) ; jLabel3 . setText ( "Grup" ) ; jButtonSimpan . setText ( "Simpan" ) ; jButtonSimpan . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButtonSimpanActionPerformed ( evt ) ; } } ) ; javax . swing . GroupLayout layout = new javax . swing . GroupLayout ( getContentPane ( ) ) ; getContentPane ( ) . setLayout ( layout ) ; layout . setHorizontalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addGap ( 31 , 31 , 31 ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . TRAILING ) . addComponent ( jButtonSimpan ) . addGroup ( layout . createSequentialGroup ( ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . TRAILING ) . addComponent ( jLabel2 ) . addComponent ( jLabel1 ) . addComponent ( jLabel3 ) ) . addGap ( 27 , 27 , 27 ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING , false ) . addComponent ( jTextFieldNama ) . addComponent ( jTextFieldNomor ) . addComponent ( jComboBoxGrup , 0 , 187 , short . MAX_VALUE ) ) ) ) . addContainerGap ( 57 , short . MAX_VALUE ) ) ) ; layout . setVerticalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addContainerGap ( ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE ) . addComponent ( jLabel1 ) . addComponent ( jTextFieldNama , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) ) . addGap ( 15 , 15 , 15 ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE ) . addComponent ( jLabel2 ) . addComponent ( jTextFieldNomor , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) ) . addGap ( 18 , 18 , 18 ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE ) . addComponent ( jLabel3 ) . addComponent ( jComboBoxGrup , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) ) . addGap ( 31 , 31 , 31 ) . addComponent ( jButtonSimpan ) . addContainerGap ( 31 , short . MAX_VALUE ) ) ) ; pack ( ) ; }
te	IDF	public INDISwitchElementAndValue ( INDISwitchElement element , SwitchStatus status ) { this . element = element ; this . status = status ; }
te	KEY	public void setSwitchGame ( final boolean switchGame ) { this . switchGame = switchGame ; }
te	IDF	public BingSearchApiUrlBuilder withVideoRequest ( String name , VideoRequest request ) { withParameter ( name + ".Offset" , request . getOffset ( ) ) ; withParameter ( name + ".Count" , request . getCount ( ) ) ; if ( ! request . getFilterList ( ) . isEmpty ( ) ) { List < String > values = new ArrayList < String > ( ) ; for ( String filter : request . getFilterList ( ) ) { values . add ( filter ) ; } withParameter ( name + ".Filters" , values ) ; } if ( request . getSortBy ( ) != null ) { withParameter ( name + ".SortBy" , request . getSortBy ( ) . value ( ) ) ; } return this ; }
te	KEY	public void close ( ) { if ( this . multicastSocket != null ) { if ( ! this . multicastSocket . isClosed ( ) ) { this . multicastSocket . close ( ) ; } } }
te	IDF	@ Test public void test_removeOrderItem ( ) throws Exception { OrderDAO oDAO = new OrderDAO ( ) ; ProductDAO pDAO = new ProductDAO ( ) ; UserDAO uDAO = new UserDAO ( ) ; int userID = uDAO . createUser ( new User ( - 1 , "Jim" , "321 Test Road" , "Columbus" , "OH" , "43230" , "6148881234" ) ) ; int orderID = oDAO . createOrderByUserID ( userID ) ; int productID = pDAO . createProduct ( new Product ( - 1 , "tacos" , "tacos desc" , "mexican food" , 15.99 , 5 , 10 , 5 , false , "imgpath" ) ) ; int quant = 5 ; int orderItemID = oiDAO . createOrderItem ( new OrderItem ( - 1 , productID , orderID , quant , - 1 ) ) ; OrderItem testOrderItem = oiDAO . getOrderItemByOrderItemID ( orderItemID ) ; double expectedLinePrice = quant * pDAO . getProductByProductID ( productID ) . getUnitPrice ( ) ; assertEquals ( orderID , testOrderItem . getOrderID ( ) ) ; assertEquals ( productID , testOrderItem . getProductID ( ) ) ; assertEquals ( quant , testOrderItem . getQuantity ( ) ) ; assertEquals ( expectedLinePrice , testOrderItem . getLinePrice ( ) , 0.00 ) ; oiDAO . removeOrderItem ( testOrderItem ) ; testOrderItem = oiDAO . getOrderItemByOrderItemID ( orderItemID ) ; assertNull ( "expected no record to be returned (null)" , testOrderItem ) ; pDAO . removeProductByProductID ( productID ) ; oDAO . removeOrderByOrderID ( orderID ) ; uDAO . removeUserByUserID ( userID ) ; pDAO . closeConnection ( ) ; oDAO . closeConnection ( ) ; uDAO . closeConnection ( ) ; oiDAO . removeOrderItemByOrderItemID ( orderItemID ) ; }
te	KEY	public int getRow ( ) { return row ; }
te	IDF	private static void countWords ( String file , DataCounter < String > counter ) { try { FileWordReader reader = new FileWordReader ( file ) ; String word = reader . nextWord ( ) ; while ( word != null ) { counter . incCount ( word ) ; word = reader . nextWord ( ) ; } } catch ( IOException e ) { System . err . println ( "Error processing " + file + " " + e ) ; System . exit ( 1 ) ; } }
te	KEY	public MoveDeveloperAction ( ) { }
te	IDF	public void setId_Empleado ( Empleado Id_Empleado ) { this . Id_Empleado = Id_Empleado ; }
te	KEY	protected boolean examine ( ) { System . out . println ( "A metal kite shield. If you are about to be attacked  you can raise it to block the attack." ) ; return true ; }
te	KEY	public int getPageSize ( ) { return pageSize ; }
te	KEY	public int getFoodNum ( ) { return foodNum ; }
te	KEY	public boolean getAccessHealthCare ( ) { return accessHealthCare ; }
te	KEY	public void rotateY ( double radians ) ;
te	IDF	public String getLongUrl ( String shortUrl ) throws TinyUrlManagerException { String longUrl = null ; longUrl = m_cachedTinyUrls . get ( shortUrl ) ; return longUrl ; }
te	IDF	public BlocoContext ( ComandoContext ctx ) { copyFrom ( ctx ) ; }
te	IDF	public void setIdFriendsh ( Integer idFriendsh ) { this . idFriendsh = idFriendsh ; }
te	KEY	public String toString ( ) { try { return [ + join ( " " ) + ] ; } catch ( Exception e ) { return null ; } }
te	IDF	public List < File > getFiles ( ) { List < File > files = new ArrayList < File > ( ) ; Enumeration < ? > enumeration = fileListModel . elements ( ) ; while ( enumeration . hasMoreElements ( ) ) { files . add ( ( File ) enumeration . nextElement ( ) ) ; } return files ; }
te	IDF	public static void main ( String [ ] args ) { Random die1 = new Random ( ) ; Random die2 = new Random ( ) ; Random chest = new Random ( ) ; Random chance = new Random ( ) ; int currentSquare = 0 ; int consecutiveDoubles = 0 ; int [ ] visits = new int [ 40 ] ; for ( int i = 0 ; i < 100000000 ; i ++ ) { int roll1 = die1 . nextInt ( 4 ) ; int roll2 = die2 . nextInt ( 4 ) ; if ( roll1 == roll2 ) consecutiveDoubles ++ ; else consecutiveDoubles = 0 ; if ( consecutiveDoubles == 3 ) { consecutiveDoubles = 0 ; currentSquare = 10 ; } else { currentSquare += roll1 + roll2 ; currentSquare %= 40 ; } if ( currentSquare == 7 || currentSquare == 22 || currentSquare == 36 ) { int chanceCard = chance . nextInt ( 16 ) ; if ( chanceCard == 0 ) currentSquare = 0 ; if ( chanceCard == 1 ) currentSquare = 10 ; if ( chanceCard == 2 ) currentSquare = 11 ; if ( chanceCard == 3 ) currentSquare = 24 ; if ( chanceCard == 4 ) currentSquare = 39 ; if ( chanceCard == 5 ) currentSquare = 5 ; if ( chanceCard == 6 || chanceCard == 7 ) { if ( currentSquare == 7 ) currentSquare = 15 ; if ( currentSquare == 22 ) currentSquare = 25 ; if ( currentSquare == 36 ) currentSquare = 5 ; } if ( chanceCard == 8 ) { if ( currentSquare == 22 ) currentSquare = 28 ; else currentSquare = 12 ; } if ( chanceCard == 9 ) currentSquare -= 3 ; } if ( currentSquare == 2 || currentSquare == 17 || currentSquare == 33 ) { int chestCard = chest . nextInt ( 16 ) ; if ( chestCard == 0 ) currentSquare = 0 ; if ( chestCard == 1 ) currentSquare = 10 ; } if ( currentSquare == 30 ) currentSquare = 10 ; visits [ currentSquare ] ++ ; } for ( int i = 0 ; i < 40 ; i ++ ) System . out . println ( visits [ i ] ) ; }
te	KEY	public double getPrice ( ) { return price ; }
te	KEY	public static GraphicsDevice getScreenDevice ( ) { return getMouseInfo ( null ) ; }
te	KEY	public int getMaxRows ( ) ;
te	IDF	public void write ( ) throws IOException { if ( ( reportTrigger != null ) && reportTrigger . isUsed ( ) ) { bufferedWriter . write ( "|" ) ; bufferedWriter . newLine ( ) ; if ( getReportLine ( ) . getNumberLine ( ) == 0 ) { bufferedWriter . write ( "|    " + RessourceReporting . getString ( "ERROR_TRIGGER_START_FILE" ) + " :" ) ; } else { bufferedWriter . write ( "|    " + RessourceReporting . getString ( "ERROR_TRIGGER_ON_LINE" ) + " : " + getReportLine ( ) . getNumberLine ( ) + " :" ) ; } reportTrigger . write ( ) ; bufferedWriter . flush ( ) ; } if ( reportLine . isUsed ( ) ) { reportLine . write ( ) ; } bufferedWriter . flush ( ) ; }
te	KEY	public static void resetCounter ( ) { counter = 0 ; }
te	IDF	private void addRow ( Row tuple ) { List < Index > addedIndices = new ArrayList < > ( indices . size ( ) ) ; try { for ( Index index : indices . values ( ) ) { index . add ( tuple ) ; addedIndices . add ( index ) ; } if ( ! rows . add ( tuple ) ) { throw new SqlException ( "Values " + tuple + " cannot be inserted into columns " + tuple . getColumnNames ( ) + ": duplicate row" ) ; } } catch ( SqlException e ) { removeFromIndices ( addedIndices , tuple ) ; throw e ; } }
te	IDF	String displayName ( ) ;
te	IDF	@ Override public void remove ( SubjectID item ) { GetDataBySubjectPanel . this . getRequest ( ) . removeSubject ( item ) ; stateChanged ( new GetDatabySubjectPanelChangeEvent ( GetDataBySubjectPanel . this ) ) ; }
te	KEY	public int getVal ( ) { return val ; }
te	IDF	private boolean isBlocking ( float _x , float _y , float xa , float ya ) { int x = ( int ) ( _x / 16 ) ; int y = ( int ) ( _y / 16 ) ; if ( x == ( int ) ( this . x / 16 ) && y == ( int ) ( this . y / 16 ) ) return false ; boolean blocking = world . level . isBlocking ( x , y , xa , ya ) ; byte block = world . level . getBlock ( x , y ) ; return blocking ; }
te	IDF	@ Override public void mouseClicked ( MouseEvent e ) { }
te	KEY	public double getCurrentAxisY ( ) { return currentAxisY ; }
te	IDF	@ Override public void run ( ) { guiController . printError ( "Name is already in use. Please try again." ) ; guiController . askUsername ( ) ; }
te	KEY	public int getBlkNum ( ) { return blks . size ( ) ; }
te	KEY	public static boolean isDoStats ( ) { return getBoolean ( "sun.java2d.renderer.doStats" , "false" ) ; }
te	IDF	public SpawnData ( class < ? extends EDFEnemy > enemyClass , long spawnFrame , float angle , LR rotateLR ) { this . enemyClass = enemyClass ; this . spawnFrame = spawnFrame ; this . angle = angle ; this . rotateLR = rotateLR ; }
te	IDF	public static byte [ ] stringToByteArray ( String s ) { java . util . Vector < Integer > v = new java . util . Vector < Integer > ( ) ; String operate = new String ( s ) ; operate = operate . replaceAll ( " " , "" ) ; operate = operate . replaceAll ( "\t" , "" ) ; operate = operate . replaceAll ( "\n" , "" ) ; if ( operate . endsWith ( ";" ) ) operate = operate . substring ( 0 , operate . length ( ) - 1 ) ; if ( operate . length ( ) % 2 != 0 ) return null ; int num = 0 ; while ( operate . length ( ) > 0 ) { try { num = Integer . parseInt ( operate . substring ( 0 , 2 ) , 16 ) ; } catch ( NumberFormatException nfe ) { return null ; } v . add ( new Integer ( num ) ) ; operate = operate . substring ( 2 ) ; } byte [ ] result = new byte [ v . size ( ) ] ; java . util . Iterator < Integer > it = v . iterator ( ) ; int i = 0 ; while ( it . hasNext ( ) ) result [ i ++ ] = it . next ( ) . byteValue ( ) ; return result ; }
te	IDF	@ Bean ( name = "bond" ) public BondCrudService getBond ( ) { return new BondCrudServiceImpl ( ) ; }
te	IDF	public void unloadJava ( String jar ) { destroyJavaDriversFromJAR ( jar ) ; jarFiles . remove ( jar ) ; }
te	KEY	protected boolean wake ( ) { return sendCommand ( new WakeCommand ( ) ) ; }
te	KEY	public void setID ( char id ) { this . id = id ; }
te	IDF	@ Override public void close ( ) throws IOException { try { writer . close ( ) ; out . close ( ) ; } catch ( XMLStreamException e ) { e . printStackTrace ( ) ; } }
te	IDF	static Node makeNode ( Object elt , Object left , Object right ) { return new Node ( treeSize ( left ) + treeSize ( right ) + elementSize ( elt ) , elt , left , right ) ; }
te	IDF	public int hashCode ( ) { return new HashCodeBuilder ( 1552374383 , 1779360547 ) . append ( this . width ) . append ( this . height ) . append ( this . y ) . append ( this . x ) . toHashCode ( ) ; }
te	IDF	@ SuppressWarnings ( "unchecked" ) private void initComponents ( ) { jPDadosContato = new javax . swing . JPanel ( ) ; jLabel1 = new javax . swing . JLabel ( ) ; jLabel2 = new javax . swing . JLabel ( ) ; jLabel3 = new javax . swing . JLabel ( ) ; jLabel4 = new javax . swing . JLabel ( ) ; jTFNome = new javax . swing . JTextField ( ) ; jTFEmail = new javax . swing . JTextField ( ) ; jLabel6 = new javax . swing . JLabel ( ) ; jTFDataContratacao = new javax . swing . JFormattedTextField ( ) ; jTFCodigo = new javax . swing . JTextField ( ) ; jBDataAtual = new javax . swing . JButton ( ) ; jLTecnico = new javax . swing . JLabel ( ) ; jTFTelefone = new javax . swing . JFormattedTextField ( ) ; jLabel5 = new javax . swing . JLabel ( ) ; setDefaultCloseOperation ( javax . swing . WindowConstants . DISPOSE_ON_CLOSE ) ; setTitle ( "Gest\u00E3o de T\u00E9cnicos" ) ; jPDadosContato . setBorder ( javax . swing . BorderFactory . createTitledBorder ( null , "Dados do Tecnico" , javax . swing . border . TitledBorder . DEFAULT_JUSTIFICATION , javax . swing . border . TitledBorder . DEFAULT_POSITION , null , new java . awt . Color ( 0 , 0 , 204 ) ) ) ; jLabel1 . setText ( "Codigo" ) ; jLabel2 . setText ( "Nome:" ) ; jLabel3 . setText ( "Data de Contrata\u00E7\u00E3o" ) ; jLabel4 . setText ( "Email:" ) ; jTFNome . addKeyListener ( new java . awt . event . KeyAdapter ( ) { public void keyReleased ( java . awt . event . KeyEvent evt ) { jTFNomeKeyReleased ( evt ) ; } } ) ; jTFEmail . addKeyListener ( new java . awt . event . KeyAdapter ( ) { public void keyReleased ( java . awt . event . KeyEvent evt ) { jTFEmailKeyReleased ( evt ) ; } } ) ; jLabel6 . setText ( "Telefone" ) ; try { jTFDataContratacao . setFormatterFactory ( new javax . swing . text . DefaultFormatterFactory ( new javax . swing . text . MaskFormatter ( "##/##/####" ) ) ) ; } catch ( java . text . ParseException ex ) { ex . printStackTrace ( ) ; } jTFDataContratacao . addKeyListener ( new java . awt . event . KeyAdapter ( ) { public void keyReleased ( java . awt . event . KeyEvent evt ) { jTFDataContratacaoKeyReleased ( evt ) ; } } ) ; jTFCodigo . setEditable ( false ) ; jTFCodigo . addKeyListener ( new java . awt . event . KeyAdapter ( ) { public void keyReleased ( java . awt . event . KeyEvent evt ) { jTFCodigoKeyReleased ( evt ) ; } } ) ; jBDataAtual . setText ( "Data Atual" ) ; jBDataAtual . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { jBDataAtualActionPerformed ( evt ) ; } } ) ; jLTecnico . setText ( " " ) ; try { jTFTelefone . setFormatterFactory ( new javax . swing . text . DefaultFormatterFactory ( new javax . swing . text . MaskFormatter ( "(##)####-####" ) ) ) ; } catch ( java . text . ParseException ex ) { ex . printStackTrace ( ) ; } jLabel5 . setText ( "C\u00F3digo gerado automaticamente" ) ; javax . swing . GroupLayout jPDadosContatoLayout = new javax . swing . GroupLayout ( jPDadosContato ) ; jPDadosContato . setLayout ( jPDadosContatoLayout ) ; jPDadosContatoLayout . setHorizontalGroup ( jPDadosContatoLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( jPDadosContatoLayout . createSequentialGroup ( ) . addGap ( 24 , 24 , 24 ) . addGroup ( jPDadosContatoLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . TRAILING ) . addComponent ( jLabel6 ) . addComponent ( jLabel4 ) . addComponent ( jLabel3 ) . addComponent ( jLabel2 ) . addComponent ( jLabel1 ) ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addGroup ( jPDadosContatoLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( jPDadosContatoLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING , false ) . addGroup ( jPDadosContatoLayout . createSequentialGroup ( ) . addComponent ( jTFDataContratacao , javax . swing . GroupLayout . PREFERRED_SIZE , 152 , javax . swing . GroupLayout . PREFERRED_SIZE ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addComponent ( jBDataAtual ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED , 135 , short . MAX_VALUE ) ) . addComponent ( jTFEmail ) . addComponent ( jTFNome ) ) . addGroup ( jPDadosContatoLayout . createSequentialGroup ( ) . addComponent ( jTFCodigo , javax . swing . GroupLayout . PREFERRED_SIZE , 112 , javax . swing . GroupLayout . PREFERRED_SIZE ) . addGap ( 10 , 10 , 10 ) . addComponent ( jLabel5 ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addComponent ( jLTecnico ) ) . addComponent ( jTFTelefone , javax . swing . GroupLayout . PREFERRED_SIZE , 203 , javax . swing . GroupLayout . PREFERRED_SIZE ) ) . addContainerGap ( javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) ) ) ; jPDadosContatoLayout . setVerticalGroup ( jPDadosContatoLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( jPDadosContatoLayout . createSequentialGroup ( ) . addContainerGap ( ) . addGroup ( jPDadosContatoLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE ) . addComponent ( jLabel1 ) . addComponent ( jTFCodigo , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) . addComponent ( jLTecnico ) . addComponent ( jLabel5 ) ) . addGap ( 13 , 13 , 13 ) . addGroup ( jPDadosContatoLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE ) . addComponent ( jLabel2 ) . addComponent ( jTFNome , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . UNRELATED ) . addGroup ( jPDadosContatoLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE ) . addComponent ( jLabel3 ) . addComponent ( jTFDataContratacao , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) . addComponent ( jBDataAtual ) ) . addGap ( 18 , 18 , 18 ) . addGroup ( jPDadosContatoLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE ) . addComponent ( jLabel4 ) . addComponent ( jTFEmail , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) ) . addGap ( 18 , 18 , 18 ) . addGroup ( jPDadosContatoLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE ) . addComponent ( jLabel6 ) . addComponent ( jTFTelefone , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) ) . addContainerGap ( 21 , short . MAX_VALUE ) ) ) ; javax . swing . GroupLayout layout = new javax . swing . GroupLayout ( getContentPane ( ) ) ; getContentPane ( ) . setLayout ( layout ) ; layout . setHorizontalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( jPDadosContato , javax . swing . GroupLayout . Alignment . TRAILING , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) ) ; layout . setVerticalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addContainerGap ( ) . addComponent ( jPDadosContato , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) . addContainerGap ( 74 , short . MAX_VALUE ) ) ) ; pack ( ) ; }
te	KEY	public int get_score ( ) { return _score ; }
te	IDF	public int compare ( Calendar firstDate , Calendar secondDate ) { if ( super . sortDown ) { return firstDate . compareTo ( secondDate ) ; } else { return secondDate . compareTo ( firstDate ) ; } }
te	IDF	@ Test public void canRemoveProductFromCartWithProductThatNotExist ( ) { boolean exception = false ; try { shoppingCart . removeProductFromCart ( user1 , - 50 ) ; } catch ( WebshopAppException e ) { exception = true ; } assertFalse ( exception ) ; }
te	IDF	private void adjustScale ( double v , double theta ) { int i = 0 ; while ( i < _launchVelocity . length && theta > _launchAngle [ i ] ) i ++ ; if ( i == 0 ) i = 1 ; double temp = v / _launchVelocity [ i - 1 ] ; if ( temp != temp ) return ; if ( temp > 1.1 || temp < 0.9 ) { return ; } if ( theta > Math . toRadians ( 50 ) ) _scaleFactor = temp ; else if ( theta > Math . toRadians ( 25 ) ) _scaleFactor = temp * 0.6 + _scaleFactor * 0.4 ; }
te	IDF	void xy2I ( int x , int y ) { mx = x ; my = y ; for ( I = scale . length - 1 ; I >= 0 ; I -- ) if ( y >= h / 2 - kh / 2 && y < h / 2 + kh / 2 && x >= x ( I ) - kw / 2 && x < x ( I ) + kw / 2 ) return ; }
te	KEY	public void initDefaultCommand ( ) { }
te	KEY	public int getNbJoueurs ( ) { return this . joueurs . size ( ) ; }
te	IDF	@ Override public void runTest ( ) { LRUCacheLinkedHashMap cache = new LRUCacheLinkedHashMap ( 2 ) ; cache . set ( 2 , 1 ) ; cache . set ( 1 , 1 ) ; cache . set ( 2 , 3 ) ; dbg ( cache . get ( 2 ) ) ; cache . set ( 4 , 1 ) ; dbg ( cache . get ( 1 ) ) ; dbg ( cache . get ( 2 ) ) ; }
te	IDF	@ Override public ImageViewerControl createImageViewerControl ( ImageViewer viewer , ImageSet set ) { return new ImageViewerControl ( imageViewer , set , createHashMap ( ) ) ; }
te	KEY	public double getDirection ( ) ;
te	KEY	public abstract double maximaTaxacao ( Orcamento orcamento ) ;
te	IDF	FSet < Elt > less ( Elt elt ) ;
te	KEY	public void setRank ( long value ) { this . rank = value ; }
te	IDF	WordBreakTest ( ) { dict . add ( "a" ) ; dict . add ( "leet" ) ; dict . add ( "code" ) ; }
te	KEY	public float getColorTolerance ( ) ;
te	IDF	public CeilingFanMediumCommand ( CeilingFan ceilingFan ) { this . ceilingFan = ceilingFan ; }
te	KEY	public String properName ( ) { return this . getName ( ) ; }
te	KEY	public ICPP ( ) { }
te	IDF	@ Override public void processAnswer ( final String userAnswer ) { Manager . getInstance ( ) . publishTask ( new Task ( ) { @ Override public TaskAction getAction ( ) { return TaskAction . CUSER_REQUESTNAMECHANGE ; } @ Override public HashMap < String , String > getParameters ( ) { HashMap < String , String > params = new HashMap < String , String > ( ) ; params . put ( "username" , userAnswer ) ; return params ; } } ) ; }
te	IDF	public int newGame ( short gameSpeed , int panelSize ) { Game g = new Game ( gameSpeed , null , commIF , panelSize , ++ gameCount ) ; games . add ( g ) ; return ( gameCount ) ; }
te	KEY	public boolean more ( ) throws JSONException { this . next ( ) ; if ( this . end ( ) ) { return false ; } this . back ( ) ; return true ; }
te	IDF	@ Test public void testConvertColumnName ( ) { assertEquals ( "aA" , Characters . convertColumnName ( "A_a" ) ) ; assertEquals ( "aA" , Characters . convertColumnName ( "A_A" ) ) ; assertEquals ( "aA" , Characters . convertColumnName ( "a_a" ) ) ; assertEquals ( "a1" , Characters . convertColumnName ( "a1" ) ) ; assertEquals ( "a_1" , Characters . convertColumnName ( "a_1" ) ) ; assertEquals ( "a_A" , Characters . convertColumnName ( "a__a" ) ) ; assertEquals ( "a__A" , Characters . convertColumnName ( "a___a" ) ) ; }
te	IDF	public void init ( ) { classListLabyrinthes = new ListeLabyrinthes ( ) ; this . setTitle ( "Menu Simulateur" ) ; this . setSize ( 800 , 500 ) ; this . setDefaultCloseOperation ( JFrame . DISPOSE_ON_CLOSE ) ; this . setResizable ( false ) ; this . setLocationRelativeTo ( null ) ; container = new JPanel ( ) ; container . setLayout ( new BoxLayout ( container , BoxLayout . PAGE_AXIS ) ) ; this . setContentPane ( container ) ; UIManager . LookAndFeelInfo [ ] laf = UIManager . getInstalledLookAndFeels ( ) ; for ( int i = 0 ; i < laf . length ; i ++ ) { System . out . println ( "Class name: " + laf [ i ] . getClassName ( ) ) ; System . out . println ( "Name: " + laf [ i ] . getName ( ) ) ; } try { UIManager . setLookAndFeel ( UIManager . getSystemLookAndFeelClassName ( ) ) ; } catch ( Exception e ) { } }
te	IDF	public int read ( char [ ] cbuf , int off , int len ) throws IOException { return bufferedReader . read ( cbuf , off , len ) ; }
te	KEY	int getNumberOfEntries ( ) ;
te	IDF	public void setItems ( ArrayList < CartItem > items ) { this . items = items ; }
te	KEY	public long getOffset ( ) { return offset ; }
te	KEY	public int read ( int addr ) { return getRegister ( addr ) ; }
te	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { jMenuDeleteTopicActionPerformed ( evt ) ; }
te	IDF	@ Override public void onTrigger ( Box other ) { }
te	KEY	private MaskUtils ( ) { }
te	IDF	@ Override public void update ( GameContainer gc , StateBasedGame sbg , int delta ) { if ( ! activated ) animation . update ( delta ) ; }
te	KEY	public int getNumberOfLines ( ) { return lines . size ( ) ; }
te	IDF	public void setToState ( int state ) { switch ( state ) { case 0 : lightImage = initLight ; darkImage = initDark ; break ; case 1 : lightImage = rotateImage ( initLight , 90 ) ; darkImage = rotateImage ( initDark , 90 ) ; break ; case 2 : lightImage = rotateImage ( initLight , 180 ) ; darkImage = rotateImage ( initDark , 180 ) ; break ; case 3 : lightImage = rotateImage ( initLight , - 90 ) ; darkImage = rotateImage ( initDark , - 90 ) ; break ; case 4 : lightImage = flipImage ( initLight ) ; darkImage = flipImage ( initDark ) ; lightImage = rotateImage ( lightImage , 180 ) ; darkImage = rotateImage ( darkImage , 180 ) ; break ; case 5 : lightImage = flipImage ( initLight ) ; darkImage = flipImage ( initDark ) ; lightImage = rotateImage ( lightImage , - 90 ) ; darkImage = rotateImage ( darkImage , - 90 ) ; break ; case 6 : lightImage = flipImage ( initLight ) ; darkImage = flipImage ( initDark ) ; break ; case 7 : lightImage = flipImage ( initLight ) ; darkImage = flipImage ( initDark ) ; lightImage = rotateImage ( lightImage , 90 ) ; darkImage = rotateImage ( darkImage , 90 ) ; break ; } lightImage = lightImage . getScaledInstance ( width , height , Image . SCALE_SMOOTH ) ; darkImage = darkImage . getScaledInstance ( width , height , Image . SCALE_SMOOTH ) ; if ( player != null ) { translatePieceHelper ( ) ; } }
te	IDF	@ Override public void actionPerformed ( ActionEvent e ) { Klas klas = vakInfoPanel . getSelectedKlas ( ) ; Vak vak = vakLijst . get ( list . getSelectedIndex ( ) ) ; int result = JOptionPane . showConfirmDialog ( null , "Wil je " + klas . getNaam ( ) + " verwijderen uit " + vak . getNaam ( ) + "?" , null , JOptionPane . YES_NO_OPTION ) ; if ( result == JOptionPane . YES_OPTION ) { Dao . getInstance ( ) . verwijderKlasVanVak ( klas . getId ( ) , vak . getId ( ) ) ; klas . getVakken ( ) . remove ( vak ) ; vakInfoPanel . setKlassenLijst ( Dao . getInstance ( ) . getKlassenVanVak ( vak . getId ( ) ) ) ; } }
te	KEY	public SousMarin ( ) { super ( "Sous-Marin" , 4 ) ; }
te	KEY	public static Test suite ( ) { return new TestSuite ( AppTest . class ) ; }
te	KEY	abstract protected int getShootDelayFrame ( ) ;
te	KEY	public int getStrength ( ) { return strength ; }
te	KEY	public static synchronized double getTime ( ) { return m_time ; }
te	KEY	public void aplicaDescontoExtra ( ) { estadoAtual . aplicaDescontoExtra ( this ) ; }
te	KEY	public boolean isEmpty ( ) { return this . size == 0 ; }
te	IDF	@ Override public void pausableChanged ( MediaPlayer arg0 , int arg1 ) { }
te	IDF	public void setMessage ( String message ) { this . message = message ; }
te	KEY	public TSquare ( ) { }
te	IDF	public ShootingCharacter ( ShootingScene scene , float power ) { super ( scene , power ) ; }
te	KEY	public boolean getHeaderWrite ( ) { return headerWrite ; }
te	IDF	public void changeContextState ( State newState ) { currentState = newState ; }
te	KEY	public Holdable reduceStack ( int c ) { return this ; }
te	IDF	public JSONObject ( JSONObject jo , String [ ] names ) throws JSONException { this ( ) ; for ( int i = 0 ; i < names . length ; i += 1 ) { putOnce ( names [ i ] , jo . opt ( names [ i ] ) ) ; } }
te	IDF	public void undoLastThrow ( ) { if ( throwz . size ( ) > 0 ) { throwz . remove ( throwz . size ( ) - 1 ) ; this . busted = false ; } }
te	IDF	public int sumNumbers ( TreeNode root ) { return sumNumbers ( root , 0 ) ; }
te	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButton2ActionPerformed ( evt ) ; }
te	IDF	public ExpressaoMaiorIgualQue ( Expressao expressaoEsquerda , Expressao expressaoDireita ) { super ( expressaoEsquerda , expressaoDireita , ">=" ) ; }
te	IDF	public void imageChangeWhite ( int getList ) { if ( getList == 18 ) { return ; } imageFrames ++ ; if ( getList == 0 ) { loadImage = new GreenfootImage ( "whiteSwordMan//whiteRun//whiteRun" + imageFrames + ".png" ) ; imageFramesMax = 6 ; } else if ( getList == 1 ) { loadImage = new GreenfootImage ( "whiteSwordMan//whiteNormal//whiteNormal" + imageFrames + ".png" ) ; imageFramesMax = 5 ; } else if ( getList == 2 ) { loadImage = new GreenfootImage ( "whiteSwordMan//whiteJump//Flash" + imageFrames + ".png" ) ; imageFramesMax = 3 ; } else if ( getList == 3 ) { loadImage = new GreenfootImage ( "whiteSwordMan//whiteJump//whiteJump" + imageFrames + ".png" ) ; imageFramesMax = 6 ; } else if ( getList == 4 ) { loadImage = new GreenfootImage ( "whiteSwordMan//whiteJump//whiteJumpAttack" + imageFrames + ".png" ) ; imageFramesMax = 5 ; } else if ( getList == 5 ) { loadImage = new GreenfootImage ( "whiteSwordMan//whiteHurt//hurt.png" ) ; imageFramesMax = 1 ; } else if ( getList == 6 ) { loadImage = new GreenfootImage ( "whiteSwordMan//WhiteDie//whiteDie" + imageFrames + ".png" ) ; imageFramesMax = 10 ; } else if ( getList == 7 ) { loadImage = new GreenfootImage ( "whiteSwordMan//whiteAttack//whiteAttack" + imageFrames + "Style1.png" ) ; imageFramesMax = 5 ; } else if ( getList == 8 ) { loadImage = new GreenfootImage ( "whiteSwordMan//whiteAttack//whiteAttack" + imageFrames + "Style2.png" ) ; imageFramesMax = 5 ; } else if ( getList == 9 ) { loadImage = new GreenfootImage ( "whiteSwordMan//whiteAttack//whiteAttack" + imageFrames + "Style3.png" ) ; imageFramesMax = 5 ; } else if ( getList == 10 ) { loadImage = new GreenfootImage ( "whiteSwordMan//whiteAbilityTwo//whiteAttack" + imageFrames + "Ability2.png" ) ; imageFramesMax = 21 ; } else if ( getList == 11 ) { imageFramesMax = 1 ; setImage ( new GreenfootImage ( "whiteSwordMan//whiteAbilityTwo//sword.png" ) ) ; setImage ( new GreenfootImage ( "whiteSwordMan//whiteAbilityTwo//swordDone.png" ) ) ; } else if ( getList == 12 ) { loadImage = new GreenfootImage ( "whiteSwordMan//whiteAbilityThree//whiteAttack1Ability3.png" ) ; imageFramesMax = 18 ; } else if ( getList == 13 ) { loadImage = new GreenfootImage ( "whiteSwordMan//whiteAbilityThree//Halo" + imageFrames + ".png" ) ; imageFramesMax = 6 ; } else if ( getList == 14 ) { loadImage = new GreenfootImage ( "whiteSwordMan//whiteAbilityOne//whiteAttack" + imageFrames + "Ability1.png" ) ; imageFramesMax = 15 ; } else if ( getList == 15 ) { loadImage = new GreenfootImage ( "whiteSwordMan//whiteAbilityOne//shockBlade" + imageFrames + ".png" ) ; imageFramesMax = 3 ; } else if ( getList == 16 ) { loadImage = new GreenfootImage ( "whiteSwordMan//whiteAbilityUlt//whiteAbilityUlt" + imageFrames + ".png" ) ; imageFramesMax = 5 ; } else if ( getList == 17 ) { loadImage = new GreenfootImage ( "whiteSwordMan//whiteAbilityUlt//windBlade" + imageFrames + ".png" ) ; imageFramesMax = 9 ; } if ( imageFrames == imageFramesMax ) { getList ++ ; imageFrames = 0 ; } setImage ( loadImage ) ; imageChangeWhite ( getList ) ; }
te	KEY	public synchronized void xsetD2repeatable ( boolean flag ) { isD2repeatable = flag ; }
te	IDF	private void updateVDELP1 ( int data ) { setRegister ( VDELP1 , data ) ; }
te	IDF	public void ERROR_FIELD_VALUE_IN_LIST ( ) { internalBuffer . append ( System . lineSeparator ( ) ) ; internalBuffer . append ( RessourceReporting . getString ( "ERROR_FIELD_VALUE_IN_LIST" , new Object [ ] { field . getBuffer ( ) } ) ) ; used = true ; }
te	KEY	public Point getPressPoint ( ) { if ( pressPoints . size ( ) == 0 ) { return null ; } else { return pressPoints . remove ( 0 ) ; } }
te	IDF	public static void generateProposals ( MapLocation locus , int distToLocus , int incrementalDist , ArrayList < Proposal > proposalList , Direction [ ] consideredDirs ) { for ( Direction d : consideredDirs ) { Proposal p ; if ( d . isDiagonal ( ) ) { p = new Proposal ( locus . add ( d ) , d , distToLocus + incrementalDist * 14 ) ; } else { p = new Proposal ( locus . add ( d ) , d , distToLocus + incrementalDist * 10 ) ; } int val = BreadthFirst . getMapData ( p . loc ) ; if ( val > 0 ) { p . dist += ( val - 10000 ) * 10 ; proposalList . add ( p ) ; } } }
te	IDF	private void remove ( ) { int [ ] indices = _myList . getSelectedIndices ( ) ; for ( int i = indices . length - 1 ; i >= 0 ; -- i ) { ( ( DefaultListModel ) _myList . getModel ( ) ) . remove ( indices [ i ] ) ; } }
te	IDF	public void run ( ) { for ( int i = 0 ; i < 4 ; i ++ ) { System . out . println ( "News" ) ; try { sleep ( 1000 ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } } }
te	IDF	@ Override public Point2D screen2world ( Point2D screen ) { return wr . getInverseWorldTransform ( ) . transform ( screen , null ) ; }
te	IDF	@ Override public void allPositions ( int [ ] playerIDs , String [ ] playerNames , String [ ] playerColors , int [ ] [ ] xPos , int [ ] [ ] yPos , int [ ] score , int [ ] xFood , int [ ] yFood ) { eventAdapter . allPositions ( playerIDs , playerNames , playerColors , xPos , yPos , score , xFood , yFood ) ; }
te	IDF	private int getMx ( ) { int mx = 0 ; if ( pFrom . x >= pTo . x ) { if ( pMid . x < eFrom . getX ( ) - gap && pMid . x > eTo . getX ( ) + eTo . getOWidth ( ) + gap ) mx = pMid . x ; else mx = Math . max ( pFrom . x + eFrom . getOWidth ( ) / 2 + gap , pTo . x + eTo . getOWidth ( ) / 2 + gap ) ; } else { if ( pMid . x > eFrom . getX ( ) + eFrom . getOWidth ( ) + gap && pMid . x < eTo . getX ( ) - gap ) mx = pMid . x ; else mx = Math . min ( pFrom . x - ( eFrom . getOWidth ( ) / 2 + gap ) , pTo . x - ( eTo . getOWidth ( ) / 2 + gap ) ) ; } return mx ; }
te	KEY	public void Modificar ( ) throws SQLException ;
te	IDF	List < Cohort > loadCohortByYearOfAdmission ( Integer yearOfAdmission ) ;
te	KEY	public int getActionPoints ( ) { return actionPoints ; }
te	KEY	public long getTotal ( ) { return total ; }
te	KEY	public GameMenuControl ( ) { throw new UnsupportedOperationException ( "Not supported yet." ) ; }
te	IDF	public Filter3d ( Sprite source , Sprite listener , int maxDistance ) { this . source = source ; this . listener = listener ; this . maxDistance = maxDistance ; this . lastVolume = 0.0f ; }
te	KEY	public Computer ( ) { super ( "" ) ; }
te	IDF	public void reset ( ) { count = 0 ; sum = 0 ; min = Integer . MAX_VALUE ; max = Integer . MIN_VALUE ; }
te	IDF	@ Override public Vector multiply ( double d ) { ArrayVector av = new ArrayVector ( ) ; av . initialize ( v . length ) ; for ( int i = 0 ; i < v . length ; ++ i ) { av . v [ i ] = v [ i ] * d ; } return av ; }
te	KEY	@ Override public boolean equals ( Object obj ) { if ( this == obj ) return true ; if ( obj == null ) return false ; if ( getClass ( ) != obj . getClass ( ) ) return false ; Arch other = ( Arch ) obj ; if ( start == null ) { if ( other . start != null ) return false ; } else if ( ! start . equals ( other . start ) ) return false ; if ( end == null ) { if ( other . end != null ) return false ; } else if ( ! end . equals ( other . end ) ) return false ; return true ; }
te	IDF	@ Override public List < Integer > apply ( List < Integer > result , Integer input , AtomicBoolean reduced ) { result . add ( input ) ; return result ; }
te	IDF	@ ManyToMany ( fetch = FetchType . EAGER ) @ JoinTable ( name = "user_has_event" , joinColumns = @ JoinColumn ( name = "user_iduser" ) , inverseJoinColumns = @ JoinColumn ( name = "event_idevent" ) ) public List < User > getUsers ( ) { return users ; }
te	KEY	@ Override public boolean hasNext ( ) { if ( next == null ) { next = findNext ( ) ; } return next != null ; }
te	IDF	public void dateMethod ( Date beforeDate , Date afterDate ) { boolean isBefore = beforeDate . before ( afterDate ) ; boolean isAfter = beforeDate . after ( afterDate ) ; boolean isEquals = beforeDate . equals ( afterDate ) ; int sequence = beforeDate . compareTo ( afterDate ) ; System . out . println ( "" + isBefore + isAfter + isEquals + sequence ) ; }
te	IDF	@ Override public void addCondiments ( ) { System . out . println ( "\uC124\uD0D5\uACFC \uC6B0\uC720\uB97C \uCD94\uAC00\uD558\uB294 \uC911" ) ; }
te	KEY	public ModeReseauView ( ) { super ( ) ; this . controleur = new ModeReseauController ( this ) ; }
te	IDF	public static void main ( String [ ] args ) { final SieveOfAtkin sieve = new SieveOfAtkin ( 10000 ) ; final int max = 10000 ; final ArrayList < Integer > list = sieve . run ( ) ; final HashMap < Integer , Integer > primes = new HashMap < Integer , Integer > ( ) ; for ( int prime : list ) { primes . put ( prime , primes . size ( ) ) ; } final int imax = list . size ( ) ; for ( int i = 0 ; i < imax ; i ++ ) { final int prime1 = list . get ( i ) ; if ( prime1 > 1000 && prime1 < 10000 ) { final int prime2 = prime1 + 3330 ; final int prime3 = prime2 + 3330 ; if ( primes . containsKey ( prime2 ) && primes . containsKey ( prime3 ) ) { if ( arePermutations ( prime1 , prime2 , prime3 ) ) { System . out . println ( i + "\t" + prime1 + "" + prime2 + "" + prime3 ) ; } } } } }
te	KEY	void clearResouce ( ) { this . rs = null ; this . ps = null ; this . connection = null ; }
te	KEY	public Main ( ) { this . database = new Database ( ) ; this . storeActivity = new StoreActivity ( this ) ; this . sales = new Sales ( this ) ; this . receiptLookUp = new ReceiptLookUp ( this ) ; this . receiptDisplay = new ReceiptDisplay ( this ) ; this . paymentCredit = new PaymentCredit ( this ) ; this . paymentCheck = new PaymentCheck ( this ) ; this . paymentCash = new PaymentCash ( this ) ; this . payment = new Payment ( this ) ; this . mainMenu = new MainMenu ( this ) ; this . inventory = new Inventory ( this ) ; this . genreSearchResult = new GenreSearchResult ( this ) ; this . genreSearch = new GenreSearch ( this ) ; this . deliveryResult = new DeliveryResult ( this ) ; this . delivery = new Delivery ( this ) ; this . artistSearchResult = new ArtistSearchResult ( this ) ; this . artistSearch = new ArtistSearch ( this ) ; this . albumnSearchResult = new AlbumnSearchResult ( this ) ; this . albumnSearch = new AlbumnSearch ( this ) ; this . updateInventory = new UpdateInventory ( this ) ; }
te	IDF	public void setCommand ( int slot , Command onCommand , Command offCommand ) { onCommands [ slot ] = onCommand ; offCommands [ slot ] = offCommand ; }
te	KEY	public void update ( ) { display ( ) ; }
te	KEY	protected void propertiesRequested ( ) { }
te	KEY	public void sort ( Comparator < ? super Elt > comp ) { throw new UnsupportedOperationException ( ) ; }
te	KEY	public boolean getIsAdditionalScreenNeeded ( ) { return additionalScreenNeeded ; }
te	IDF	public - ( ) { super ( 50 , 50 , "   " ) ; pi = new InputConnector ( "p" , Component . Position . left ) ; mi = new InputConnector ( "m" , Component . Position . bottom ) ; output = new OutputConnector ( "y" , Component . Position . right ) ; register ( pi ) ; register ( mi ) ; register ( output ) ; }
te	IDF	public void updateCijferBijStudent ( long toetsId , long studentId , double cijfer ) { try { PreparedStatement prepareStatement = manager . prepareStatement ( "UPDATE toetsuitslag SET cijfer = ? WHERE toets_id = ? AND leerling_id = ?" ) ; prepareStatement . setLong ( 2 , toetsId ) ; prepareStatement . setLong ( 3 , studentId ) ; prepareStatement . setDouble ( 1 , cijfer ) ; prepareStatement . executeUpdate ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } }
te	IDF	public QuestionsDatabase ( final String databaseName ) { _databaseName = databaseName ; }
te	IDF	@ Override public void mouseExited ( MouseEvent e ) { button . setBackground ( Color . DARK_GRAY ) ; if ( button . getIcon ( ) != null ) button . setText ( null ) ; }
te	IDF	@ Override public void handle ( final ActionEvent e ) { file = fileChooser . showOpenDialog ( primaryStage ) ; if ( file != null ) { labelFileName = new Label ( file . getName ( ) ) ; File folder = new File ( "img/books/" ) ; int count = folder . list ( ) . length ; dest = new File ( "img/books/" + "book_" + count + "_" + file . getName ( ) ) ; gridPane . add ( labelFileName , 2 , 6 ) ; } }
te	KEY	private AlgorithmFactory ( ) { }
te	IDF	public FractalUnboundException ( ASTNode node , String message , Throwable cause ) { super ( node , message , cause ) ; }
te	IDF	public MainApplication ( ) { MainFrame frame = new MainFrame ( ) ; if ( packFrame ) { frame . pack ( ) ; } else { frame . validate ( ) ; } Dimension screenSize = Toolkit . getDefaultToolkit ( ) . getScreenSize ( ) ; Dimension frameSize = frame . getSize ( ) ; if ( frameSize . height > screenSize . height ) { frameSize . height = screenSize . height ; } if ( frameSize . width > screenSize . width ) { frameSize . width = screenSize . width ; } frame . setLocation ( ( screenSize . width - frameSize . width ) / 2 , ( screenSize . height - frameSize . height ) / 2 ) ; frame . setVisible ( true ) ; }
te	IDF	private void menuItemConsultaTareasActionPerformed ( java . awt . event . ActionEvent evt ) { ConsultaTareas consulta = new ConsultaTareas ( ) ; consulta . setVisible ( true ) ; consulta . setTitle ( "Tareas" ) ; consulta . setClosable ( true ) ; consulta . setMaximizable ( true ) ; consulta . setResizable ( true ) ; jDesktopPane1 . add ( consulta ) ; }
te	KEY	public long getID ( ) ;
te	IDF	@ Override public void onReceive ( Entity host ) { host . getProxy ( ) . send ( new Pong ( msg ) ) ; }
te	KEY	public int getPosition ( ) { return position ; }
te	IDF	public void __doPut ( HttpServletRequest req , HttpServletResponse resp ) throws IOException { resp . setContentType ( "text/plain" ) ; resp . getWriter ( ) . println ( "Ouch... not implemented yet :(" ) ; }
te	IDF	public abstract Object accept ( ASTVisitor v ) ;
te	IDF	public void receiveErrorgetLongUrl ( java . lang . Exception e ) { }
te	IDF	public void theWinnerIs ( int playerID , String playerName , int score ) { boardPanel . theWinnerIs ( playerID , playerName , score ) ; }
te	IDF	private int checkNeededActionPoints ( JavaCell [ ] [ ] miniMap , Tile tile ) { int outsideCount = 1 ; TileType [ ] [ ] tileCells = tile . getTileCells ( ) ; for ( int i = 0 ; i < tileCells . length ; i ++ ) { for ( int j = 0 ; j < tileCells [ i ] . length ; j ++ ) { if ( tileCells [ i ] [ j ] != null ) { for ( int out = 0 ; out < outerCells . length ; out ++ ) { if ( miniMap [ i ] [ j ] != null && miniMap [ i ] [ j ] . getElevation ( ) == 0 && miniMap [ i ] [ j ] . getX ( ) == outerCells [ out ] . getX ( ) && miniMap [ i ] [ j ] . getY ( ) == outerCells [ out ] . getY ( ) ) { outsideCount ++ ; } } } } } return outsideCount ; }
te	KEY	public DoNothing ( ) { }
te	KEY	public double getZoom ( ) { return zoom ; }
te	KEY	public MapPanel getMapPanel ( ) { return this . mapPanel ; }
te	KEY	public int getNumSegments ( ) { return segments_ . length ; }
te	IDF	private static boolean isBST ( Node node , PrevNode prev ) { if ( node == null ) { return true ; } boolean a = isBST ( node . left , prev ) ; if ( prev . value > node . value ) { return false ; } prev . value = node . value ; boolean b = isBST ( node . right , prev ) ; return a & b ; }
te	IDF	public void positionChange ( int measure ) { if ( moveDirection ) { x += measure ; } else { x -= measure ; } }
te	IDF	public Builder2 ( String name , int productType , List < Integer > authors , String title , int isbn , int pages , String publisher ) { super ( name , productType , authors , title , isbn , pages , publisher ) ; }
te	KEY	public static boolean isLogCreateContext ( ) { return getBoolean ( "sun.java2d.renderer.logCreateContext" , "false" ) ; }
te	IDF	protected void prependRow ( ) { t . add ( 0 , new ArrayList < Integer > ( ) ) ; }
te	KEY	int getUnitsPerBatch ( ) ;
te	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { eliminarButtonActionPerformed ( evt ) ; }
te	IDF	@ Override public String execute ( HttpServletRequest request , HttpServletResponse response ) throws Exception { try { String data = "{\"data\": [\"id\"  \"Cargo\"]}" ; return data ; } catch ( Exception e ) { throw new ServletException ( "CargoGetpagesJson: View Error: " + e . getMessage ( ) ) ; } }
te	KEY	public double getLeftX ( ) { return getRawAxis ( AXIS_LEFT_X ) ; }
te	KEY	protected abstract ColumnNode selectColumn ( ) ;
te	IDF	public void mouseClicked ( MouseEvent event ) { case gcase = ( case ) event . getSource ( ) ; if ( fenetre . getModele ( ) . getJoueurCourant ( ) instanceof Humain ) tirerSurEnnemi ( gcase . getI ( ) , gcase . getJ ( ) , fenetre . getModele ( ) . getJoueurCourant ( ) . getAdversairesEnVie ( ) [ view . getIndiceAdversaire ( ) ] , false ) ; }
te	IDF	public EDFEnemy ( ShootingScene parentScene , float bornAngle , LR lr ) { super ( parentScene , POWER , HP ) ; setWidth ( SIZE ) ; setHeight ( SIZE ) ; setElevation ( WIDTH / 2 ) ; setVElevation ( - FALL_SPEED ) ; setAngle ( bornAngle ) ; setVAngle ( ROTATE_SPEED * lr . signum ( ) ) ; setTexture ( TEXTURE ) ; setTeam ( TEAM . ENEMY_TEAM ) ; setColor ( Color . orange ) ; }
te	IDF	@ Test public final void testSplitLotsOfSpecial ( ) { final ArrayList < String > splits = StringUtilities . split ( "Hello? Hello! HI! What  test: !@#$%^&*()-=" ) ; int x = 0 ; assertEquals ( "Hello" , splits . get ( x ) ) ; assertEquals ( "?" , splits . get ( ++ x ) ) ; assertEquals ( " " , splits . get ( ++ x ) ) ; assertEquals ( "Hello" , splits . get ( ++ x ) ) ; assertEquals ( "!" , splits . get ( ++ x ) ) ; assertEquals ( " " , splits . get ( ++ x ) ) ; assertEquals ( "HI" , splits . get ( ++ x ) ) ; assertEquals ( "!" , splits . get ( ++ x ) ) ; assertEquals ( " " , splits . get ( ++ x ) ) ; assertEquals ( "What" , splits . get ( ++ x ) ) ; assertEquals ( " " , splits . get ( ++ x ) ) ; assertEquals ( " " , splits . get ( ++ x ) ) ; assertEquals ( "test" , splits . get ( ++ x ) ) ; assertEquals ( ":" , splits . get ( ++ x ) ) ; assertEquals ( " " , splits . get ( ++ x ) ) ; assertEquals ( "!" , splits . get ( ++ x ) ) ; assertEquals ( "@" , splits . get ( ++ x ) ) ; assertEquals ( "#" , splits . get ( ++ x ) ) ; assertEquals ( "$" , splits . get ( ++ x ) ) ; assertEquals ( "%" , splits . get ( ++ x ) ) ; assertEquals ( "^" , splits . get ( ++ x ) ) ; assertEquals ( "&" , splits . get ( ++ x ) ) ; assertEquals ( "*" , splits . get ( ++ x ) ) ; assertEquals ( "(" , splits . get ( ++ x ) ) ; assertEquals ( ")" , splits . get ( ++ x ) ) ; assertEquals ( "-" , splits . get ( ++ x ) ) ; assertEquals ( "=" , splits . get ( ++ x ) ) ; assertEquals ( 27 , splits . size ( ) ) ; }
te	KEY	void update ( ) ;
te	IDF	public Borrowing findByBookIdWhenNull ( int bookId ) { try { Transaction readTransaction = session . beginTransaction ( ) ; Query readQuery = session . createQuery ( "FROM Borrowing WHERE id_book = :bookId AND date_delivery IS NULL" ) . setInteger ( "bookId" , bookId ) ; Borrowing result = ( Borrowing ) readQuery . list ( ) . get ( 0 ) ; readTransaction . commit ( ) ; return result ; } catch ( Exception e ) { return null ; } }
te	KEY	private void populateFaults ( ) { }
te	KEY	public void initialize ( ) { }
te	KEY	void configureAndPrint ( ) ;
te	IDF	public static void normalize ( double [ ] vec ) { double coeff = 1.0 / Math . sqrt ( squaredSum ( vec ) ) ; for ( int i = 0 , N = vec . length ; i < N ; ++ i ) vec [ i ] *= coeff ; }
te	KEY	public boolean pressRight ( ) { if ( selectedAction != null ) { return selectedAction . pressArrow ( 0 , 1 ) ; } return false ; }
te	IDF	public void setTime ( Time x , Calendar cal ) throws SQLException { this . ps . setTime ( parameterIndex ++ , x , cal ) ; }
te	IDF	public Vector < String > write2txt ( String searchword , String dirPath , String saveTXTPath ) throws IOException { Vector < String > weibos = new Vector < String > ( ) ; String onePiece ; File f = new File ( saveTXTPath ) ; FileWriter fw = new FileWriter ( f ) ; BufferedWriter bw = new BufferedWriter ( fw ) ; for ( int page = 0 ; page < 50 ; page ++ ) { String path = dirPath + "/" + searchword + page + ".html" ; File ff = new File ( path ) ; if ( ff . exists ( ) ) { String html = FileOperation . html2String ( path ) ; if ( ! html . equals ( "null" ) ) { Vector < String > pieces = new HTMLParser ( ) . splitHTML ( html ) ; for ( int i = 0 ; i < pieces . size ( ) ; i ++ ) { onePiece = pieces . get ( i ) ; String s = new HTMLParser ( ) . parse ( onePiece ) ; weibos . add ( s ) ; bw . write ( s + "\r\n" ) ; } } } } bw . close ( ) ; return weibos ; }
te	IDF	void move ( int x , int y ) { rect . setLocation ( x , y ) ; }
te	KEY	private Operation ( ) { }
te	IDF	private void jButtonDocumentationActionPerformed ( java . awt . event . ActionEvent evt ) { try { File htmlFile = new File ( "gamerjavadoc/index.html" ) ; Desktop . getDesktop ( ) . browse ( htmlFile . toURI ( ) ) ; } catch ( Exception e ) { } }
te	KEY	public boolean shellCollideCheck ( Shell shell ) { return false ; }
te	IDF	private void buttonVoltar_FaseActionPerformed ( java . awt . event . ActionEvent evt ) { showPanel ( panelMenuFases ) ; }
te	IDF	@ Override protected TaskAction getListenAction ( ) { return TaskAction . RUSER_ENTERED ; }
te	IDF	public void setContent ( String content ) { this . content = content ; }
te	IDF	protected static int countMatches ( String aexp , String aseq ) { Pattern p = Pattern . compile ( aexp ) ; Matcher m = p . matcher ( aseq ) ; int nmat = 0 ; while ( m . find ( ) ) nmat ++ ; return ( nmat ) ; }
te	IDF	public void setContentType ( String value ) { this . contentType = value ; }
te	KEY	public long getTimestamp ( ) { return this . timestamp ; }
te	KEY	public Object getObjectDefaultValueInstance ( class < ? > cls ) { if ( cls == boolean . TYPE || cls == boolean . class || cls == boolean . class ) { return boolean . false ; } else if ( cls == byte . TYPE || cls == byte . class || cls == byte . class ) { return ( byte ) 0 ; } else if ( cls == short . TYPE || cls == short . class || cls == short . class ) { return ( short ) 0 ; } else if ( cls == Integer . TYPE || cls == int . class || cls == Integer . class ) { return 0 ; } else if ( cls == long . TYPE || cls == long . class || cls == long . class ) { return ( long ) 0 ; } else if ( cls == float . TYPE || cls == float . class || cls == float . class ) { return 0.0F ; } else if ( cls == double . TYPE || cls == double . class || cls == double . class ) { return 0.0 ; } else if ( cls == Character . TYPE || cls == char . class || cls == Character . class ) { return ( ( char ) 0 ) ; } else { Object objInstance = null ; try { if ( cls . isArray ( ) ) { objInstance = Array . newInstance ( cls . getComponentType ( ) , 0 ) ; } else { if ( isObjTypeObjectNumber ( cls ) ) { objInstance = cls . getConstructor ( String . class ) . newInstance ( "0" ) ; } else { objInstance = cls . newInstance ( ) ; } } } catch ( IllegalAccessException e ) { e . printStackTrace ( ) ; } catch ( InstantiationException e ) { e . printStackTrace ( ) ; } catch ( NoSuchMethodException e ) { e . printStackTrace ( ) ; } catch ( InvocationTargetException e ) { e . printStackTrace ( ) ; } return objInstance ; } }
te	IDF	@ Override public void call ( RxMessage < String > stringRxMessage ) { }
te	KEY	public void onUnbind ( class < ? extends IListener > listenerClass ) { }
te	KEY	public boolean isCellEditable ( int rowIndex , int columnIndex ) { return canEdit [ columnIndex ] ; }
te	KEY	protected final void mLETTER ( boolean _createToken ) throws RecognitionException , CharStreamException , TokenStreamException { int _ttype ; Token _token = null ; int _begin = text . length ( ) ; _ttype = LETTER ; int _saveIndex ; { switch ( LA ( 1 ) ) { case a : case b : case c : case d : case e : case f : case g : case h : case i : case j : case k : case l : case m : case n : case o : case p : case q : case r : case s : case t : case u : case v : case w : case x : case y : case z : { matchRange ( a , z ) ; break ; } case A : case B : case C : case D : case E : case F : case G : case H : case I : case J : case K : case L : case M : case N : case O : case P : case Q : case R : case S : case T : case U : case V : case W : case X : case Y : case Z : { matchRange ( A , Z ) ; break ; } default : { throw new NoViableAltForCharException ( ( char ) LA ( 1 ) , getFilename ( ) , getLine ( ) , getColumn ( ) ) ; } } } if ( _createToken && _token == null && _ttype != Token . SKIP ) { _token = makeToken ( _ttype ) ; _token . setText ( new String ( text . getBuffer ( ) , _begin , text . length ( ) - _begin ) ) ; } _returnToken = _token ; }
te	KEY	protected void execute ( ) { }
te	IDF	public void setName ( String name ) { this . name = name ; }
te	KEY	public boolean isEspintura ( ) { return espintura ; }
te	KEY	public static void reConectar ( ) { if ( instance == null ) { instance = new AccessConector ( ) ; conectar ( ) ; } else { con = null ; conectar ( ) ; } }
te	KEY	public int getCardValue ( ) { if ( this . card == Card . As ) { return 14 ; } return this . card . ordinal ( ) + 1 ; }
te	KEY	public void setIdCompany ( int id_company ) { this . id_company = id_company ; }
te	IDF	@ Test public void testDistanceRatioFarthestFromIdeal ( ) throws IOException { Bag allDiscs = FrolfUtil . loadDiscs ( ) ; Bag bag = new Bag ( ) ; bag . addDisc ( allDiscs . getDisc ( "Innova Polecat" ) ) ; bag . addDisc ( allDiscs . getDisc ( "Innova Roc" ) ) ; bag . addDisc ( allDiscs . getDisc ( "Innova Leopard" ) ) ; bag . addDisc ( allDiscs . getDisc ( "Innova Boss" ) ) ; DiscType expected = DiscType . DISTANCEDRIVER ; DiscType actual = FrolfUtil . recommendDiscForBag ( bag ) . getDiscType ( ) ; assertTrue ( "A distance driver was not recommended for a bag whose ratio of distance drivers is farthest from ideal. Got: " + actual , expected == actual ) ; }
te	IDF	@ Override public boolean checaTipo ( AmbienteCompilacao ambiente ) throws IdentificadorJaDeclaradoException , IdentificadorNaoDeclaradoException { return this . getExpressao ( ) . getTipo ( ambiente ) . isColor ( ) || this . getExpressao ( ) . getTipo ( ambiente ) . isParametro ( ) ; }
te	IDF	@ Override public Object execute ( HttpServletRequest request , HttpServletResponse response ) throws Exception { Contexto oContexto = ( Contexto ) request . getAttribute ( "contexto" ) ; oContexto . setVista ( "jsp/confirmForm.jsp" ) ; EntradaBean oEntradaBean = new EntradaBean ( ) ; EntradaParam oEntradaParam = new EntradaParam ( request ) ; oEntradaBean = oEntradaParam . loadId ( oEntradaBean ) ; return "Borrar la compra " + oEntradaBean . getId ( ) ; }
te	KEY	public boolean getUp ( ) { return imgUp ; }
te	KEY	public abstract void cluster ( ) ;
te	IDF	public void setLPC ( int data ) { mLastPC = int16 ( data ) ; }
te	KEY	public void setDuration ( double duration ) { this . duration = duration ; }
te	IDF	public static void printSizes ( Component c ) { System . out . println ( "minimumSize = " + c . getMinimumSize ( ) ) ; System . out . println ( "preferredSize = " + c . getPreferredSize ( ) ) ; System . out . println ( "maximumSize = " + c . getMaximumSize ( ) ) ; }
te	KEY	private void handleGameOver ( ) { }
te	KEY	public Throwable getCause ( ) { return this . cause ; }
te	KEY	private final boolean isDigit ( char ch ) { return ch >= 48 && ch <= 57 ; }
te	KEY	Symbol getcopy ( ) { return new Entity ( this ) ; }
te	IDF	public void doPost ( HttpServletRequest req , HttpServletResponse resp ) throws IOException { resp . setContentType ( "text/plain" ) ; String string = req . getParameter ( "string" ) ; String [ ] profiles = string . split ( "\\{\\{RECRD_SEPARATOR\\}\\}" ) ; ProfileService service = new ProfileService ( ) ; int i = 0 ; for ( String profile : profiles ) { profile = profile . trim ( ) ; try { Message request = new Message ( new Context ( ) ) ; request . fromJson ( profile ) ; service . doPost ( request , new Message ( new Context ( ) ) ) ; resp . getWriter ( ) . println ( "Wrote record " + i ) ; } catch ( Exception e ) { resp . getWriter ( ) . println ( "Error writing record " + i ) ; } i ++ ; } }
te	KEY	public void setEspintura ( boolean espintura ) { this . espintura = espintura ; }
te	KEY	public abstract int build ( MyLevel level ) ;
te	IDF	public void setErrCode ( String errCode ) { this . errCode = errCode ; }
te	IDF	public String nextTo ( char d ) throws JSONException { StringBuffer sb = new StringBuffer ( ) ; for ( ; ; ) { char c = next ( ) ; if ( c == d || c == 0 || c == '' || c == '' ) { if ( c != 0 ) { back ( ) ; } return sb . toString ( ) . trim ( ) ; } sb . append ( c ) ; } }
te	IDF	@ Override public void print ( String s ) { System . out . print ( s ) ; }
te	KEY	protected void initialize ( ) { compressor . enabled = true ; }
te	IDF	public void setListener ( SoundListener soundListener ) { listenerMixer . setSoundListener ( soundListener ) ; }
te	IDF	private Predicate < Tuple > parseWhere ( PeekableIterator < String > parts ) throws SqlParseException { if ( consumeIfPresent ( "where" , parts ) ) { return parsePredicate ( parts ) ; } return null ; }
te	IDF	public void doGet ( HttpServletRequest req , HttpServletResponse resp ) throws IOException , ServletException { String fromStr = req . getParameter ( "from" ) ; String toStr = req . getParameter ( "to" ) ; String whoStr = req . getParameter ( "who" ) ; String whatStr = req . getParameter ( "what" ) ; String objectStr = req . getParameter ( "object" ) ; long from = - 1 ; try { Date fromDate = new SimpleDateFormat ( "dd/MM/yyyy" ) . parse ( fromStr ) ; from = fromDate . getTime ( ) ; } catch ( ParseException e ) { } long to = - 1 ; try { Date toDate = new SimpleDateFormat ( "dd/MM/yyyy" ) . parse ( toStr ) ; to = toDate . getTime ( ) ; } catch ( ParseException e ) { } StringBuffer filter = new StringBuffer ( ) ; StringBuffer paramDeclaration = new StringBuffer ( ) ; List < Object > params = new ArrayList < Object > ( ) ; if ( from != - 1 ) { this . addToStringBuffer ( filter , "timestamp >= fromParam" , "&&" ) ; this . addToStringBuffer ( paramDeclaration , "Long fromParam" , " " ) ; params . add ( from ) ; } if ( to != - 1 ) { this . addToStringBuffer ( filter , "timestamp <= toParam" , "&&" ) ; this . addToStringBuffer ( paramDeclaration , "Long toParam" , " " ) ; params . add ( to ) ; } if ( ( whoStr != null ) && ( ! whoStr . equals ( "" ) ) ) { this . addToStringBuffer ( filter , "user == whoParam" , "&&" ) ; this . addToStringBuffer ( paramDeclaration , "String whoParam" , " " ) ; params . add ( whoStr ) ; } if ( ( whatStr != null ) && ( ! whatStr . equals ( "" ) ) ) { String [ ] types = whatStr . split ( ":" ) ; if ( types . length == 1 ) { this . addToStringBuffer ( filter , "(docType == docTypeParam)" , "&&" ) ; this . addToStringBuffer ( paramDeclaration , "String docTypeParam" , " " ) ; params . add ( types [ 0 ] ) ; } else if ( types . length == 2 ) { this . addToStringBuffer ( filter , "(docType == docTypeParam && type == typeParam)" , "&&" ) ; this . addToStringBuffer ( paramDeclaration , "String docTypeParam" , " " ) ; this . addToStringBuffer ( paramDeclaration , "String typeParam" , " " ) ; params . add ( types [ 0 ] ) ; params . add ( types [ 1 ] ) ; } } if ( ( objectStr != null ) && ( ! objectStr . equals ( "" ) ) ) { this . addToStringBuffer ( filter , "object == objectParam" , "&&" ) ; this . addToStringBuffer ( paramDeclaration , "String objectParam" , " " ) ; params . add ( objectStr ) ; } PersistenceManager pm = PMF . getInstance ( ) . getPersistenceManager ( ) ; Query q = pm . newQuery ( Event . class ) ; if ( filter . length ( ) > 0 ) { q . setFilter ( filter . toString ( ) ) ; } if ( paramDeclaration . length ( ) > 0 ) { q . declareParameters ( paramDeclaration . toString ( ) ) ; } q . setOrdering ( "timestamp asc" ) ; try { List < Event > events = ( List < Event > ) q . executeWithArray ( params . toArray ( ) ) ; req . setAttribute ( "events" , events ) ; req . getRequestDispatcher ( "/admin/events/report/view" ) . forward ( req , resp ) ; } finally { q . closeAll ( ) ; } }
te	KEY	public void setPrecio ( double precio ) { this . precio = precio ; }
te	IDF	public void ImageDragRC ( ) { rotateClockwise ( ) ; setToState ( piece . getState ( ) ) ; }
te	KEY	public abstract JLabel getLabel ( ) ;
te	KEY	public final synchronized int getWindingRule ( ) { return windingRule ; }
te	KEY	private final static byte [ ] getDecodabet ( int options ) { if ( ( options & URL_SAFE ) == URL_SAFE ) { return _URL_SAFE_DECODABET ; } else if ( ( options & ORDERED ) == ORDERED ) { return _ORDERED_DECODABET ; } else { return _STANDARD_DECODABET ; } }
te	KEY	@ Override public int hashCode ( ) { return 0 ; }
te	KEY	public void setId ( int id ) { this . id = id ; }
te	KEY	public short [ ] [ ] production_table ( ) { return _production_table ; }
te	KEY	public abstract void init ( ) ;
te	IDF	List < T > findAll ( ) ;
te	KEY	public double getCollisionRadius ( ) { return hardr ; }
te	KEY	public double getValor ( ) { return valor ; }
te	IDF	public void __doPut ( HttpServletRequest req , HttpServletResponse resp ) throws IOException { resp . setContentType ( "text/plain" ) ; resp . getWriter ( ) . println ( "Ouch... not implemented yet :(" ) ; }
te	IDF	@ Test ( timeout = TIMEOUT ) public void testTwoInserts ( ) { addAndConfirm ( new Integer [ ] { 0 } , 0 , 1 ) ; addAndConfirm ( new Integer [ ] { 1 } , 1 , 1 ) ; }
te	KEY	public WrapLayout ( ) { super ( ) ; }
te	IDF	public static Integer [ ] triangulate ( List < Vector2D > contour ) { Vector2D [ ] contourArray = contour . toArray ( new Vector2D [ contour . size ( ) ] ) ; return triangulate ( contourArray ) ; }
te	IDF	public void setEmp_Proveedor ( String Emp_Proveedor ) { this . Emp_Proveedor = Emp_Proveedor ; }
te	IDF	public synchronized V put ( K key , V value ) { if ( m_hashTableKtoV . size ( ) == m_tableMaxSize ) { try { Node < V > element = m_mruQueue . removeElement ( ) ; K eleKey = m_hashTableVtoK . get ( element . get ( ) ) ; m_hashTableVtoK . remove ( element . get ( ) ) ; m_hashTableKtoV . remove ( eleKey ) ; } catch ( QueueEmptyException e ) { } } Node < V > nodeValue = new Node < V > ( value ) ; m_hashTableKtoV . put ( key , nodeValue ) ; m_hashTableVtoK . put ( value , key ) ; m_mruQueue . addElement ( nodeValue ) ; return value ; }
te	KEY	public boolean getPrevImage ( ImageGetter < S > getter ) { if ( getTargetImage ( getter , this . currIndex - 1 ) ) { lastTryGetNext = false ; currIndex -- ; return true ; } return false ; }
te	KEY	public byte [ ] getBLOBData ( ) { return BLOBData ; }
te	KEY	public int getId ( ) { return id ; }
te	IDF	public void execute ( final OthelloPiece [ ] [ ] grid ) { final int dx = getSlope ( columnStart , columnEnd ) ; final int dy = getSlope ( rowStart , rowEnd ) ; int x = columnStart ; int y = rowStart ; Logger . info ( "CapturePath: from {%d %d} to {%d %d}  dx = %d  dy = %d\n" , columnStart , rowStart , columnEnd , rowEnd , dx , dy ) ; Logger . info ( "CapturePath: setting {%d %d} with %s\n" , x , y , piece ) ; grid [ x ] [ y ] = piece ; while ( ( x != columnEnd ) || ( y != rowEnd ) ) { x += dx ; y += dy ; if ( ( x >= 0 ) && ( x < COLUMNS ) && ( y >= 0 ) && ( y < ROWS ) ) { Logger . info ( "CapturePath: setting {%d %d} with %s\n" , x , y , piece ) ; grid [ x ] [ y ] = piece ; } else { Logger . error ( "Move is out of bounds - {%d %d}\n" , x , y ) ; } } }
te	IDF	public static String getParameterWithComma ( int parameter ) { return Integer . toString ( parameter ) + , ; }
te	KEY	protected void editorSetChanged ( boolean changed ) { if ( codeEditorFile != null ) { if ( changed == true ) { this . codeEditorChanged = changed ; } } }
te	IDF	public void server ( ) throws Exception { DatagramSocket socket = new DatagramSocket ( 8888 ) ; byte [ ] buf = new byte [ 1024 ] ; DatagramPacket packet = new DatagramPacket ( buf , buf . length ) ; while ( true ) { socket . receive ( packet ) ; String requestContent = new String ( buf , 0 , packet . getLength ( ) ) ; System . out . println ( requestContent ) ; } }
te	KEY	public long getFileSize ( ) { return fileSize ; }
te	IDF	public void decline ( User user , Event event ) { event . getUsers ( ) . remove ( user ) ; getTopicsService ( ) . getEventDAO ( ) . update ( event ) ; }
te	IDF	public FLinkedHashSet < Elt > with ( Elt elt ) { Object new_set_tree = FHashSet . with ( set_tree , elt , hashCode ( elt ) ) ; if ( new_set_tree == set_tree ) return this ; else return new FLinkedHashSet ( new_set_tree , FTreeList . insert ( list_tree , FTreeList . treeSize ( list_tree ) , elt ) ) ; }
te	KEY	public void setRegistered ( boolean registered ) { this . registered = registered ; }
te	KEY	public int length ( ) { return sb . length ( ) ; }
te	KEY	void complete ( ) ;
te	IDF	@ Override protected void setPanel ( ) { setBorder ( BorderFactory . createLineBorder ( Color . BLACK ) ) ; setMinimumSize ( new Dimension ( weekNumberPannelMinimumWidht , weekNumberPannelMinimumHeight ) ) ; setPreferredSize ( new Dimension ( weekNumberPannelMinimumWidht , weekNumberPannelMinimumHeight ) ) ; }
te	KEY	public static boolean stopEmailServer ( ) { isServerRun = false ; return true ; }
te	KEY	@ Override public void sendDraw ( ) { }
te	KEY	public void setSingleParentHousehold ( boolean singleParentHousehold ) { this . singleParentHousehold = singleParentHousehold ; }
te	IDF	public Map < String , String > getFields ( ) { return this . _fields ; }
te	IDF	@ Override public void Modificar ( ) throws SQLException { try { Conexion . GetInstancia ( ) . Conectar ( ) ; Conexion . GetInstancia ( ) . Ejecutar ( "" ) ; } catch ( SQLException ex ) { throw ex ; } finally { Conexion . GetInstancia ( ) . Desconectar ( ) ; } }
te	KEY	public int getTotalFireTime ( ) { return convertTime ( totalFireTime ) ; }
te	KEY	@ Override public boolean isLoaded ( ) { return isLoaded ; }
te	KEY	public boolean isAttack ( ) { return this == ATTACK_POINT || this == ATTACK_TARGET ; }
te	IDF	public List < String > getIntervals ( ) { return intervals ; }
te	IDF	public int hashCode ( ) { if ( hash_code == Integer . MIN_VALUE ) hash_code = FHashMap . myHashCode ( map_tree ) ; return hash_code ; }
te	IDF	public static synchronized void setY ( int y ) { m_y = y ; SmartDashboard . putNumber ( "PiY" , m_y ) ; }
te	KEY	public int getRowStart ( ) { return rowStart ; }
te	IDF	public JMenuItem getItem ( final ElementPanel panel ) { EleItem item = new EleItem ( cls ) ; item . setIcon ( getIcon ( ) ) ; item . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { EleItem btn = ( EleItem ) e . getSource ( ) ; try { Component ele = ( Component ) btn . getCls ( ) . newInstance ( ) ; panel . add ( ele ) ; } catch ( InstantiationException e1 ) { e1 . printStackTrace ( ) ; } catch ( IllegalAccessException e1 ) { e1 . printStackTrace ( ) ; } } } ) ; item . setToolTipText ( getToolTipText ( cls ) ) ; return item ; }
te	IDF	public static void main ( String [ ] args ) { System . out . println ( shuffle ( 5 , 3 ) ) ; }
te	IDF	static ZipInputStream getZipInputStream ( InputStream inputStream ) throws IOException { if ( inputStream instanceof ZipInputStream ) { return ( ZipInputStream ) inputStream ; } else { return new ZipInputStream ( inputStream ) ; } }
te	KEY	public double get ( int col , int row ) ;
te	KEY	public int getCol ( ) { return col ; }
te	IDF	@ Override public Color getColor ( ) { return color ; }
te	IDF	public static void main ( String [ ] args ) throws SlickException { Sound sound = new Sound ( "assets/game/audio/walk1.wav" ) ; sound . play ( ) ; }
te	KEY	public RemitoDetalle ( ) { }
te	IDF	public void setReplayButtonEnabled ( boolean yes ) { replayButton . setEnabled ( yes ) ; }
te	KEY	public void setAutostart ( boolean autostart ) { this . autostart = autostart ; }
te	IDF	@ Override public void popRow ( ) { base . popRow ( ) ; setChanged ( ) ; notifyObservers ( ) ; sleep ( rowSleepTime ) ; }
te	IDF	public DialogGrup ( java . awt . Frame parent , boolean modal ) throws Exception { super ( parent , modal ) ; initComponents ( ) ; jScrollPane1 . setOpaque ( false ) ; jScrollPane1 . getViewport ( ) . setOpaque ( false ) ; jTable1 . setShowGrid ( false ) ; JLabel jLabel = new JLabel ( ) ; jLabel . setIcon ( new ImageIcon ( FormUtama . class . getResource ( "wood1.jpg" ) ) ) ; jLabel . setBounds ( 0 , 0 , 723 , 477 ) ; this . add ( jLabel ) ; try { grupTableModel = new GrupTableModel ( App . getGrupService ( ) . findAll ( ) ) ; jTable1 . setModel ( grupTableModel ) ; } catch ( Exception ex ) { throw new Exception ( ex . toString ( ) ) ; } setLocationRelativeTo ( null ) ; getRootPane ( ) . setGlassPane ( new JComponent ( ) { @ Override public void paintComponent ( Graphics g ) { g . setColor ( new Color ( 0 , 0 , 0 , 100 ) ) ; g . fillRect ( 0 , 0 , getWidth ( ) , getHeight ( ) ) ; super . paintComponent ( g ) ; } } ) ; }
te	KEY	public double getWidth ( ) { return 20 ; }
te	IDF	public static int randArray ( double [ ] probArray ) { int threshold = 0 ; int randNum = rand . nextInt ( ACCURACY - 1 ) ; for ( int i = 0 ; i < probArray . length ; i ++ ) { threshold += probArray [ i ] * ACCURACY ; if ( randNum < threshold ) { return i ; } } System . err . println ( "Warning! Probability array did not add to 1." ) ; return - 1 ; }
te	KEY	public double getLon ( ) { return lon ; }
te	KEY	@ Override public Point getBoardPosition ( ) { return null ; }
te	IDF	public int getCellAge ( int x , int y ) { if ( y < 0 || y >= getHeight ( ) ) return Integer . MAX_VALUE ; if ( x < 0 || x >= getWidth ( ) ) return Integer . MAX_VALUE ; return world [ y ] [ x ] ; }
te	KEY	public List createList ( ) { return new List ( ) ; }
te	KEY	public void moveAllCardsToFirstBox ( ) ;
te	IDF	void setOpenPieceEditButton ( final JButton b ) { this . openPieceEditButton = b ; }
te	KEY	public void setLimitAxisX ( double limitAxisX ) ;
te	KEY	public int get_ammo ( ) { return _ammo ; }
te	KEY	public int getSize ( ) { return size ; }
te	KEY	public boolean getButtonStateStart ( ) { return getRawButton ( BUTTON_START ) ; }
te	IDF	public boolean canPlaceDeveloper ( JavaCell locationCell , JavaPlayer player ) { if ( ! isTileOrLand ( locationCell . getX ( ) , locationCell . getY ( ) ) ) return false ; if ( locationCell . hasDeveloper ( ) ) return false ; if ( locationCell . isBorder ( ) ) { } else if ( ! hasAdjacentEmptyTile ( locationCell ) ) return false ; if ( ! player . decrementNActionPoints ( locationCell . getActionPointsFromDeveloperMove ( ) , false ) || ! player . canPlaceDeveloperOnBoard ( ) ) return false ; return true ; }
te	KEY	public boolean isKing ( ) { return isKing ; }
te	KEY	@ After public void tearDown ( ) throws Exception { }
te	KEY	public boolean getChoice ( ) { return this . choice ; }
te	KEY	public int getKillsStomp ( ) { return stompKills ; }
te	IDF	@ SuppressWarnings ( "unchecked" ) private void initComponents ( ) { jPanel1 = new javax . swing . JPanel ( ) ; jpBody = new javax . swing . JPanel ( ) ; jpTitle = new javax . swing . JPanel ( ) ; jlTitle = new javax . swing . JLabel ( ) ; jbHelp = new javax . swing . JButton ( ) ; jbQuit = new javax . swing . JButton ( ) ; jpGame = new javax . swing . JPanel ( ) ; jpFirstTile = new javax . swing . JPanel ( ) ; txtTile = new javax . swing . JTextField ( ) ; jSlide1 = new javax . swing . JSlider ( ) ; jSlide2 = new javax . swing . JSlider ( ) ; jlSelectTile1 = new javax . swing . JLabel ( ) ; jlSelectTile2 = new javax . swing . JLabel ( ) ; jPanelMeh = new javax . swing . JPanel ( ) ; txtMatches = new javax . swing . JTextField ( ) ; jPanelMurray = new javax . swing . JPanel ( ) ; txtMatch = new javax . swing . JTextField ( ) ; jpOptions = new javax . swing . JPanel ( ) ; jslideMatchPairs = new javax . swing . JSlider ( ) ; jScrollPane1 = new javax . swing . JScrollPane ( ) ; jtMatchStatus = new javax . swing . JTextArea ( ) ; cbDebug = new javax . swing . JCheckBox ( ) ; jbClear = new javax . swing . JButton ( ) ; javax . swing . GroupLayout jPanel1Layout = new javax . swing . GroupLayout ( jPanel1 ) ; jPanel1 . setLayout ( jPanel1Layout ) ; jPanel1Layout . setHorizontalGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGap ( 0 , 100 , short . MAX_VALUE ) ) ; jPanel1Layout . setVerticalGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGap ( 0 , 100 , short . MAX_VALUE ) ) ; setDefaultCloseOperation ( javax . swing . WindowConstants . EXIT_ON_CLOSE ) ; setTitle ( "memory" ) ; setResizable ( false ) ; jpBody . setBackground ( new java . awt . Color ( 204 , 204 , 204 ) ) ; jpTitle . setBackground ( new java . awt . Color ( 204 , 204 , 204 ) ) ; jlTitle . setBackground ( new java . awt . Color ( 204 , 204 , 204 ) ) ; jlTitle . setFont ( new java . awt . Font ( "Verdana" , 1 , 24 ) ) ; jlTitle . setHorizontalAlignment ( javax . swing . SwingConstants . CENTER ) ; jlTitle . setText ( "meh  murray" ) ; jlTitle . setHorizontalTextPosition ( javax . swing . SwingConstants . CENTER ) ; jbHelp . setBackground ( new java . awt . Color ( 153 , 153 , 153 ) ) ; jbHelp . setFont ( new java . awt . Font ( "Verdana" , 1 , 12 ) ) ; jbHelp . setForeground ( new java . awt . Color ( 0 , 51 , 153 ) ) ; jbHelp . setText ( "?" ) ; jbHelp . setBorder ( new javax . swing . border . LineBorder ( new java . awt . Color ( 0 , 0 , 0 ) , 1 , true ) ) ; jbHelp . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { jbHelpActionPerformed ( evt ) ; } } ) ; jbQuit . setBackground ( new java . awt . Color ( 153 , 153 , 153 ) ) ; jbQuit . setFont ( new java . awt . Font ( "Verdana" , 1 , 12 ) ) ; jbQuit . setForeground ( new java . awt . Color ( 0 , 51 , 153 ) ) ; jbQuit . setText ( "X" ) ; jbQuit . setToolTipText ( "" ) ; jbQuit . setBorder ( new javax . swing . border . LineBorder ( new java . awt . Color ( 0 , 0 , 0 ) , 1 , true ) ) ; jbQuit . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { jbQuitActionPerformed ( evt ) ; } } ) ; javax . swing . GroupLayout jpTitleLayout = new javax . swing . GroupLayout ( jpTitle ) ; jpTitle . setLayout ( jpTitleLayout ) ; jpTitleLayout . setHorizontalGroup ( jpTitleLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( javax . swing . GroupLayout . Alignment . TRAILING , jpTitleLayout . createSequentialGroup ( ) . addContainerGap ( ) . addComponent ( jbHelp , javax . swing . GroupLayout . PREFERRED_SIZE , 29 , javax . swing . GroupLayout . PREFERRED_SIZE ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addComponent ( jlTitle , javax . swing . GroupLayout . DEFAULT_SIZE , 259 , short . MAX_VALUE ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addComponent ( jbQuit , javax . swing . GroupLayout . PREFERRED_SIZE , 31 , javax . swing . GroupLayout . PREFERRED_SIZE ) . addContainerGap ( ) ) ) ; jpTitleLayout . setVerticalGroup ( jpTitleLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( jpTitleLayout . createSequentialGroup ( ) . addComponent ( jlTitle , javax . swing . GroupLayout . PREFERRED_SIZE , 43 , javax . swing . GroupLayout . PREFERRED_SIZE ) . addGap ( 0 , 0 , short . MAX_VALUE ) ) . addGroup ( jpTitleLayout . createSequentialGroup ( ) . addContainerGap ( ) . addGroup ( jpTitleLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( jbHelp , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addComponent ( jbQuit , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) ) . addContainerGap ( ) ) ) ; jpGame . setBackground ( new java . awt . Color ( 204 , 204 , 204 ) ) ; jpFirstTile . setBorder ( new javax . swing . border . LineBorder ( new java . awt . Color ( 0 , 0 , 0 ) , 1 , true ) ) ; jpFirstTile . setToolTipText ( "" ) ; jpFirstTile . setPreferredSize ( new java . awt . Dimension ( 335 , 140 ) ) ; txtTile . setFont ( new java . awt . Font ( "Tahoma" , 1 , 48 ) ) ; txtTile . setHorizontalAlignment ( javax . swing . JTextField . CENTER ) ; txtTile . setToolTipText ( "" ) ; txtTile . setBorder ( new javax . swing . border . LineBorder ( new java . awt . Color ( 0 , 0 , 0 ) , 4 , true ) ) ; txtTile . setEnabled ( false ) ; jSlide1 . setFont ( new java . awt . Font ( "Tahoma" , 1 , 10 ) ) ; jSlide1 . setMajorTickSpacing ( 1 ) ; jSlide1 . setMaximum ( 16 ) ; jSlide1 . setMinimum ( 1 ) ; jSlide1 . setMinorTickSpacing ( 1 ) ; jSlide1 . setOrientation ( javax . swing . JSlider . VERTICAL ) ; jSlide1 . setPaintLabels ( true ) ; jSlide1 . setPaintTicks ( true ) ; jSlide1 . setSnapToTicks ( true ) ; jSlide1 . setEnabled ( false ) ; jSlide1 . addMouseListener ( new java . awt . event . MouseAdapter ( ) { public void mouseExited ( java . awt . event . MouseEvent evt ) { jSlide1MouseExited ( evt ) ; } public void mouseReleased ( java . awt . event . MouseEvent evt ) { jSlide1MouseReleased ( evt ) ; } } ) ; jSlide1 . addChangeListener ( new javax . swing . event . ChangeListener ( ) { public void stateChanged ( javax . swing . event . ChangeEvent evt ) { jSlide1StateChanged ( evt ) ; } } ) ; jSlide1 . addMouseMotionListener ( new java . awt . event . MouseMotionAdapter ( ) { public void mouseDragged ( java . awt . event . MouseEvent evt ) { jSlide1MouseDragged ( evt ) ; } } ) ; jSlide2 . setFont ( new java . awt . Font ( "Tahoma" , 1 , 10 ) ) ; jSlide2 . setMajorTickSpacing ( 1 ) ; jSlide2 . setMaximum ( 32 ) ; jSlide2 . setMinimum ( 17 ) ; jSlide2 . setMinorTickSpacing ( 1 ) ; jSlide2 . setOrientation ( javax . swing . JSlider . VERTICAL ) ; jSlide2 . setPaintLabels ( true ) ; jSlide2 . setPaintTicks ( true ) ; jSlide2 . setSnapToTicks ( true ) ; jSlide2 . setEnabled ( false ) ; jSlide2 . addMouseListener ( new java . awt . event . MouseAdapter ( ) { public void mouseReleased ( java . awt . event . MouseEvent evt ) { jSlide2MouseReleased ( evt ) ; } } ) ; jSlide2 . addChangeListener ( new javax . swing . event . ChangeListener ( ) { public void stateChanged ( javax . swing . event . ChangeEvent evt ) { jSlide2StateChanged ( evt ) ; } } ) ; jlSelectTile1 . setFont ( new java . awt . Font ( "Tahoma" , 0 , 10 ) ) ; jlSelectTile1 . setText ( "First Selection" ) ; jlSelectTile2 . setFont ( new java . awt . Font ( "Tahoma" , 0 , 10 ) ) ; jlSelectTile2 . setText ( "Second Selection" ) ; jPanelMeh . setBorder ( new javax . swing . border . LineBorder ( new java . awt . Color ( 0 , 0 , 0 ) , 1 , true ) ) ; txtMatches . setFont ( new java . awt . Font ( "Tahoma" , 1 , 24 ) ) ; txtMatches . setHorizontalAlignment ( javax . swing . JTextField . CENTER ) ; txtMatches . setToolTipText ( "" ) ; txtMatches . setBorder ( null ) ; txtMatches . setEnabled ( false ) ; txtMatches . setOpaque ( false ) ; javax . swing . GroupLayout jPanelMehLayout = new javax . swing . GroupLayout ( jPanelMeh ) ; jPanelMeh . setLayout ( jPanelMehLayout ) ; jPanelMehLayout . setHorizontalGroup ( jPanelMehLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( txtMatches , javax . swing . GroupLayout . Alignment . TRAILING ) ) ; jPanelMehLayout . setVerticalGroup ( jPanelMehLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( txtMatches , javax . swing . GroupLayout . DEFAULT_SIZE , 73 , short . MAX_VALUE ) ) ; jPanelMurray . setBorder ( new javax . swing . border . LineBorder ( new java . awt . Color ( 0 , 0 , 0 ) , 1 , true ) ) ; txtMatch . setFont ( new java . awt . Font ( "Tahoma" , 1 , 24 ) ) ; txtMatch . setHorizontalAlignment ( javax . swing . JTextField . CENTER ) ; txtMatch . setToolTipText ( "" ) ; txtMatch . setBorder ( null ) ; txtMatch . setEnabled ( false ) ; txtMatch . setOpaque ( false ) ; javax . swing . GroupLayout jPanelMurrayLayout = new javax . swing . GroupLayout ( jPanelMurray ) ; jPanelMurray . setLayout ( jPanelMurrayLayout ) ; jPanelMurrayLayout . setHorizontalGroup ( jPanelMurrayLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( txtMatch , javax . swing . GroupLayout . Alignment . TRAILING ) ) ; jPanelMurrayLayout . setVerticalGroup ( jPanelMurrayLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( txtMatch , javax . swing . GroupLayout . DEFAULT_SIZE , 73 , short . MAX_VALUE ) ) ; javax . swing . GroupLayout jpFirstTileLayout = new javax . swing . GroupLayout ( jpFirstTile ) ; jpFirstTile . setLayout ( jpFirstTileLayout ) ; jpFirstTileLayout . setHorizontalGroup ( jpFirstTileLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( jpFirstTileLayout . createSequentialGroup ( ) . addContainerGap ( ) . addGroup ( jpFirstTileLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( jSlide1 , javax . swing . GroupLayout . PREFERRED_SIZE , 52 , javax . swing . GroupLayout . PREFERRED_SIZE ) . addGroup ( jpFirstTileLayout . createSequentialGroup ( ) . addGap ( 10 , 10 , 10 ) . addComponent ( jlSelectTile1 ) ) ) . addGap ( 22 , 22 , 22 ) . addGroup ( jpFirstTileLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( jPanelMurray , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addGroup ( jpFirstTileLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . TRAILING , false ) . addComponent ( txtTile , javax . swing . GroupLayout . Alignment . LEADING , javax . swing . GroupLayout . DEFAULT_SIZE , 113 , short . MAX_VALUE ) . addComponent ( jPanelMeh , javax . swing . GroupLayout . Alignment . LEADING , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) ) ) . addGap ( 18 , 18 , 18 ) . addGroup ( jpFirstTileLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( jSlide2 , javax . swing . GroupLayout . Alignment . TRAILING , javax . swing . GroupLayout . PREFERRED_SIZE , 52 , javax . swing . GroupLayout . PREFERRED_SIZE ) . addComponent ( jlSelectTile2 , javax . swing . GroupLayout . Alignment . TRAILING ) ) . addContainerGap ( ) ) ) ; jpFirstTileLayout . setVerticalGroup ( jpFirstTileLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( jpFirstTileLayout . createSequentialGroup ( ) . addGroup ( jpFirstTileLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING , false ) . addGroup ( jpFirstTileLayout . createSequentialGroup ( ) . addGap ( 7 , 7 , 7 ) . addComponent ( jPanelMeh , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addComponent ( txtTile ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . UNRELATED ) . addComponent ( jPanelMurray , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) ) . addGroup ( jpFirstTileLayout . createSequentialGroup ( ) . addContainerGap ( ) . addGroup ( jpFirstTileLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE ) . addComponent ( jSlide1 , javax . swing . GroupLayout . PREFERRED_SIZE , 258 , javax . swing . GroupLayout . PREFERRED_SIZE ) . addComponent ( jSlide2 , javax . swing . GroupLayout . PREFERRED_SIZE , 258 , javax . swing . GroupLayout . PREFERRED_SIZE ) ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addGroup ( jpFirstTileLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( jlSelectTile1 ) . addComponent ( jlSelectTile2 ) ) ) ) . addContainerGap ( javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) ) ) ; jSlide1 . getAccessibleContext ( ) . setAccessibleName ( "" ) ; jSlide1 . getAccessibleContext ( ) . setAccessibleDescription ( "" ) ; jpOptions . setBackground ( new java . awt . Color ( 204 , 204 , 204 ) ) ; jpOptions . setBorder ( javax . swing . BorderFactory . createTitledBorder ( javax . swing . BorderFactory . createTitledBorder ( "" ) , "x pairs (new game)" , javax . swing . border . TitledBorder . DEFAULT_JUSTIFICATION , javax . swing . border . TitledBorder . DEFAULT_POSITION , null , new java . awt . Color ( 0 , 0 , 0 ) ) ) ; jslideMatchPairs . setBackground ( new java . awt . Color ( 204 , 204 , 204 ) ) ; jslideMatchPairs . setFont ( new java . awt . Font ( "Verdana" , 0 , 10 ) ) ; jslideMatchPairs . setMajorTickSpacing ( 2 ) ; jslideMatchPairs . setMaximum ( 16 ) ; jslideMatchPairs . setMinorTickSpacing ( 1 ) ; jslideMatchPairs . setPaintLabels ( true ) ; jslideMatchPairs . setPaintTicks ( true ) ; jslideMatchPairs . setSnapToTicks ( true ) ; jslideMatchPairs . setToolTipText ( "" ) ; jslideMatchPairs . setValue ( 0 ) ; jslideMatchPairs . addChangeListener ( new javax . swing . event . ChangeListener ( ) { public void stateChanged ( javax . swing . event . ChangeEvent evt ) { jslideMatchPairsStateChanged ( evt ) ; } } ) ; javax . swing . GroupLayout jpOptionsLayout = new javax . swing . GroupLayout ( jpOptions ) ; jpOptions . setLayout ( jpOptionsLayout ) ; jpOptionsLayout . setHorizontalGroup ( jpOptionsLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( jslideMatchPairs , javax . swing . GroupLayout . Alignment . TRAILING , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) ) ; jpOptionsLayout . setVerticalGroup ( jpOptionsLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( jpOptionsLayout . createSequentialGroup ( ) . addComponent ( jslideMatchPairs , javax . swing . GroupLayout . PREFERRED_SIZE , 50 , javax . swing . GroupLayout . PREFERRED_SIZE ) . addContainerGap ( javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) ) ) ; jtMatchStatus . setColumns ( 20 ) ; jtMatchStatus . setFont ( new java . awt . Font ( "Verdana" , 0 , 12 ) ) ; jtMatchStatus . setLineWrap ( true ) ; jtMatchStatus . setRows ( 5 ) ; jtMatchStatus . setWrapStyleWord ( true ) ; jtMatchStatus . setBorder ( javax . swing . BorderFactory . createLineBorder ( new java . awt . Color ( 0 , 0 , 0 ) ) ) ; jScrollPane1 . setViewportView ( jtMatchStatus ) ; javax . swing . GroupLayout jpGameLayout = new javax . swing . GroupLayout ( jpGame ) ; jpGame . setLayout ( jpGameLayout ) ; jpGameLayout . setHorizontalGroup ( jpGameLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( jpGameLayout . createSequentialGroup ( ) . addGroup ( jpGameLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING , false ) . addComponent ( jpOptions , javax . swing . GroupLayout . Alignment . TRAILING , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addComponent ( jpFirstTile , javax . swing . GroupLayout . DEFAULT_SIZE , 327 , short . MAX_VALUE ) . addComponent ( jScrollPane1 , javax . swing . GroupLayout . DEFAULT_SIZE , 327 , short . MAX_VALUE ) ) . addContainerGap ( javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) ) ) ; jpGameLayout . setVerticalGroup ( jpGameLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( jpGameLayout . createSequentialGroup ( ) . addContainerGap ( ) . addComponent ( jpOptions , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addComponent ( jpFirstTile , javax . swing . GroupLayout . PREFERRED_SIZE , 301 , javax . swing . GroupLayout . PREFERRED_SIZE ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addComponent ( jScrollPane1 , javax . swing . GroupLayout . DEFAULT_SIZE , 191 , short . MAX_VALUE ) ) ) ; cbDebug . setBackground ( new java . awt . Color ( 204 , 204 , 204 ) ) ; cbDebug . setText ( "v" ) ; cbDebug . addItemListener ( new java . awt . event . ItemListener ( ) { public void itemStateChanged ( java . awt . event . ItemEvent evt ) { cbDebugItemStateChanged ( evt ) ; } } ) ; cbDebug . addPropertyChangeListener ( new java . beans . PropertyChangeListener ( ) { public void propertyChange ( java . beans . PropertyChangeEvent evt ) { cbDebugPropertyChange ( evt ) ; } } ) ; jbClear . setBackground ( new java . awt . Color ( 255 , 255 , 255 ) ) ; jbClear . setFont ( new java . awt . Font ( "Verdana" , 1 , 12 ) ) ; jbClear . setForeground ( new java . awt . Color ( 0 , 51 , 153 ) ) ; jbClear . setText ( "-" ) ; jbClear . setBorder ( new javax . swing . border . LineBorder ( new java . awt . Color ( 0 , 0 , 0 ) , 1 , true ) ) ; jbClear . addMouseListener ( new java . awt . event . MouseAdapter ( ) { public void mouseClicked ( java . awt . event . MouseEvent evt ) { jbClearMouseClicked ( evt ) ; } } ) ; jbClear . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { jbClearActionPerformed ( evt ) ; } } ) ; javax . swing . GroupLayout jpBodyLayout = new javax . swing . GroupLayout ( jpBody ) ; jpBody . setLayout ( jpBodyLayout ) ; jpBodyLayout . setHorizontalGroup ( jpBodyLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( jpTitle , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addGroup ( jpBodyLayout . createSequentialGroup ( ) . addContainerGap ( ) . addComponent ( jpGame , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) ) . addGroup ( jpBodyLayout . createSequentialGroup ( ) . addGap ( 19 , 19 , 19 ) . addComponent ( jbClear , javax . swing . GroupLayout . PREFERRED_SIZE , 21 , javax . swing . GroupLayout . PREFERRED_SIZE ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addComponent ( cbDebug ) . addGap ( 14 , 14 , 14 ) ) ) ; jpBodyLayout . setVerticalGroup ( jpBodyLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( jpBodyLayout . createSequentialGroup ( ) . addComponent ( jpTitle , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addGroup ( jpBodyLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE ) . addComponent ( cbDebug ) . addComponent ( jbClear , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addComponent ( jpGame , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addContainerGap ( ) ) ) ; javax . swing . GroupLayout layout = new javax . swing . GroupLayout ( getContentPane ( ) ) ; getContentPane ( ) . setLayout ( layout ) ; layout . setHorizontalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addContainerGap ( ) . addComponent ( jpBody , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) . addContainerGap ( javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) ) ) ; layout . setVerticalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addContainerGap ( ) . addComponent ( jpBody , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addContainerGap ( ) ) ) ; pack ( ) ; }
te	IDF	public void addToFile ( Labyrinthe laby , File file ) throws Exception { BufferedWriter buffer = new BufferedWriter ( new FileWriter ( file ) ) ; buffer . write ( laby . toBase ( ) ) ; buffer . close ( ) ; }
te	IDF	@ Override public void registerEventListener ( EventListener el ) { this . listeners . add ( el ) ; }
te	KEY	private Dialog createHelpDialog ( ) { return new HelpDialogSwing ( ) ; }
te	IDF	@ Test ( timeout = TIMEOUT ) public void testOrderAfterTwoInserts ( ) { heap . insert ( 0 ) ; heap . insert ( 1 ) ; assertEquals ( "Testing order after two inserts" , heap . deleteMin ( ) , ( Integer ) 0 ) ; }
te	IDF	private JComponent createOptionsPanel ( ) { Box result = Box . createVerticalBox ( ) ; result . add ( createSourcePanel ( ) ) ; result . add ( createPatternPanel ( ) ) ; result . add ( createControlPanel ( ) ) ; return result ; }
te	IDF	public void createAlphabets ( String file ) throws IOException { createDictionaries ( file ) ; if ( options . wordVectorFile != null ) loadWordVectors ( options . wordVectorFile ) ; long start = System . currentTimeMillis ( ) ; System . out . print ( "Creating Alphabet ... " ) ; HashSet < String > posTagSet = new HashSet < String > ( ) ; HashSet < String > cposTagSet = new HashSet < String > ( ) ; DependencyReader reader = DependencyReader . createDependencyReader ( options ) ; reader . startReading ( file ) ; DependencyInstance inst = reader . nextInstance ( ) ; int cnt = 0 ; Evaluator eval = new Evaluator ( options , this ) ; while ( inst != null ) { for ( int i = 0 ; i < inst . length ; ++ i ) { if ( inst . postags != null ) posTagSet . add ( inst . postags [ i ] ) ; if ( inst . cpostags != null ) cposTagSet . add ( inst . cpostags [ i ] ) ; } inst . setInstIds ( dictionaries , coarseMap , conjWord , options . lang ) ; eval . add ( inst , inst , false ) ; synFactory . initFeatureAlphabets ( inst ) ; smnFactory . initFeatureAlphabets ( inst ) ; inst = reader . nextInstance ( ) ; cnt ++ ; if ( options . maxNumSent != - 1 && cnt >= options . maxNumSent ) break ; } System . out . printf ( "[%d ms]%n" , System . currentTimeMillis ( ) - start ) ; closeAlphabets ( ) ; reader . close ( ) ; System . out . printf ( "Path items: %d (%d bits)%n" , smnFactory . pathcodeAlphabet . size ( ) , Utils . log2 ( smnFactory . pathcodeAlphabet . size ( ) + 1 ) ) ; System . out . printf ( "Num of CONLL fine POS tags: %d%n" , posTagSet . size ( ) ) ; System . out . printf ( "Num of CONLL coarse POS tags: %d%n" , cposTagSet . size ( ) ) ; System . out . printf ( "Num of labels: %d%n" , types . length ) ; System . out . printf ( "Num of Syntactic Features: %d %d%n" , synFactory . numWordFeats , synFactory . numArcFeats ) ; System . out . printf ( "Num of Semantic Features: %d %d %d %d%n" , smnFactory . numLinkFeats , smnFactory . numWordFeats , smnFactory . numPathFeats , smnFactory . numContextFeats ) ; eval . dumpArgStats ( ) ; }
te	IDF	public static TIPPResponseCode fromSchemaValue ( String value ) { for ( TIPPResponseCode msg : values ( ) ) { if ( msg . value . equals ( value ) ) { return msg ; } } return null ; }
te	KEY	protected void execute ( ) { }
te	KEY	public int levelDown ( ) { if ( level > 1 ) { level -- ; } return level ; }
te	KEY	public String getType ( ) { int numberOfCell = numOfSpaces ( ) ; if ( numberOfCell == 2 ) { return "two" ; } else if ( numberOfCell == 3 ) { return "three" ; } else if ( numberOfCell == 1 ) { return "one" ; } else { return "blank" ; } }
te	KEY	public void setBestMove ( int move ) { throw new UnsupportedOperationException ( "Not supported yet." ) ; }
te	KEY	public synchronized void clean ( ) { }
te	IDF	public InGameMessage ( final String text , final Color color , final long lifeSpanMillis ) { this ( text , DEFAULT_FONT , color , - 1 , - 1 , lifeSpanMillis ) ; }
te	IDF	private void setFields ( ) { _answerLocationPanel . setFields ( ) ; _questionTextField . setText ( "" ) ; _shortCutTextField . setText ( "" ) ; }
te	KEY	public double getPrice ( ) { return price ; }
te	KEY	public double getDuration ( ) { return duration ; }
te	KEY	public abstract boolean setSpeedMedium ( ) ;
te	KEY	public static boolean isEqual ( double a , double b , double err ) { return ( FastMath . abs ( a - b ) < err ) ? true : false ; }
te	KEY	public int getScorePoints ( ) { return 5 ; }
te	IDF	@ Transactional ( propagation = Propagation . REQUIRES_NEW ) public Farm merge ( Farm entity ) { return null ; }
te	IDF	public void setGrup ( Grup grup ) { this . grup = grup ; }
te	IDF	public Mythread ( String ippath , String searchwords , String txtpath , String xmlpath , String htmlpath , String [ ] topiclist , String pagecount , String dir ) { super ( ) ; this . ippath = ippath ; this . searchwords = searchwords ; this . txtpath = txtpath ; this . xmlpath = xmlpath ; this . htmlpath = htmlpath ; this . pagecount = pagecount ; this . topiclist = topiclist ; this . dir = dir ; }
te	IDF	public Player ( ) { inventory = new LinkedList < Item > ( ) ; }
te	IDF	@ Override public boolean equals ( Object o ) { if ( this == o ) return true ; if ( o == null || getClass ( ) != o . getClass ( ) ) return false ; SvnSettings that = ( SvnSettings ) o ; return useMergeHistory == that . useMergeHistory && failFast == that . failFast && svnPath . equals ( that . svnPath ) && defaultFileCharset . equals ( that . defaultFileCharset ) ; }
te	IDF	@ Override public void mouseClicked ( final MouseEvent e ) { if ( removeIfRightClicked ( e ) ) { return ; } LOGGER . debug ( "current boxIndex = " + currentBoxIndex ) ; int patternIndex = screen . getPatternIndexAt ( screen . getPage ( ) , currentBoxIndex ) ; if ( isOutOfIndexBound ( patternIndex ) ) { allocateNewPattern ( ) ; return ; } PaintScreenGridManager gridManager = screen . getGridManager ( ) ; Rectangle2D box = gridManager . getBoundBox ( currentBoxIndex ) ; AngleUnitFlapPattern pattern = screen . getPatternAt ( screen . getPage ( ) , currentBoxIndex ) ; LineTypeChanger changer = new LineTypeChanger ( 10 ) ; changer . changeIfCloseEnough ( pattern , box , e . getX ( ) , e . getY ( ) ) ; screen . repaint ( ) ; }
te	KEY	public GrafikkarteDao ( ) { }
te	KEY	public final void setWidth ( final int width ) { this . width = width ; }
te	KEY	public Enumeration < String > getKeys ( ) { return null ; }
te	IDF	private static Direction getRandomDirection ( final Direction ... directions ) { final int index = Randomizer . getInstance ( ) . nextInt ( Integer . MAX_VALUE ) % directions . length ; return directions [ index ] ; }
te	KEY	double getMinSecLevel ( ) ;
te	IDF	public boolean delete ( MasterBEAN delete ) { try { session = sf . openSession ( ) ; session . beginTransaction ( ) ; session . delete ( delete ) ; session . getTransaction ( ) . commit ( ) ; session . close ( ) ; return true ; } catch ( Exception e ) { e . printStackTrace ( ) ; return false ; } }
te	KEY	@ Override public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( getClass ( ) != obj . getClass ( ) ) { return false ; } final Bond other = ( Bond ) obj ; if ( this . years != other . years ) { return false ; } return true ; }
te	IDF	public static ArrayList < String > getAllRecipients ( Email email ) { ArrayList < String > recipientsList = new ArrayList < String > ( ) ; recipientsList . addAll ( getTo ( email ) ) ; recipientsList . addAll ( getCc ( email ) ) ; recipientsList . addAll ( getBcc ( email ) ) ; return recipientsList ; }
te	KEY	private static boolean less ( int v , int w ) { return ( v < w ) ; }
te	KEY	public JSONWriter object ( ) throws JSONException { if ( this . mode == i ) { this . mode = o ; } if ( this . mode == o || this . mode == a ) { this . append ( "{" ) ; this . push ( new JSONObject ( ) ) ; this . , = false ; return this ; } throw new JSONException ( "Misplaced object." ) ; }
te	KEY	boolean hasEnoughSeats ( long roomId , long studentGroupId ) ;
te	IDF	@ Test ( expected = NotFoundException . class ) public void rethrowsExceptionIfSubclassOfRemoteServerException ( ) { String throwingRemoteServiceName = registerThrowingRemoteService ( new NotFoundException ( "some message" ) ) ; ServiceAddress serviceAddress = new ServiceAddress ( "localhost" , port , throwingRemoteServiceName ) ; RemoteService remoteProxy = proxyMaker . make ( serviceAddress , RemoteService . class ) . service ( ) ; remoteProxy . call ( ) ; }
te	IDF	@ Override public boolean equals ( Object other ) { if ( other == this ) { return true ; } if ( other instanceof BookModel ) { BookModel otherBook = ( BookModel ) other ; boolean isSameClass = this . getClass ( ) . equals ( otherBook . getClass ( ) ) ; return ( this . isbn == otherBook . isbn ) && isSameClass ; } return false ; }
te	KEY	@ Override public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( obj == this ) { return true ; } if ( ! ( obj instanceof WrappedString ) ) { return false ; } WrappedString other = ( WrappedString ) obj ; return this . hashCode ( ) == other . hashCode ( ) ; }
te	IDF	public static float getLCARSFontSize ( int style ) { int fontSizeID = style & LCARS . ES_FONT ; switch ( fontSizeID ) { case LCARS . EF_TITLE : return LCARS . FONT_TITLE_SIZE ; case LCARS . EF_SUBTITLE : return LCARS . FONT_SUBTITLE_SIZE ; case LCARS . EF_BUTTON : return LCARS . FONT_BUTTON_SIZE ; case LCARS . EF_BODY : return LCARS . FONT_BODY_SIZE ; default : return 0F ; } }
te	KEY	public void close ( ) throws IOException { if ( writer != null ) writer . close ( ) ; }
te	KEY	public void print ( ) { print ( this . back ) ; }
te	KEY	@ Test public final void testHashParameterNull ( ) { assertEquals ( null , HashSystem . defaultHash ( null ) ) ; }
te	KEY	public int getPosBL ( ) { return mPosBL ; }
te	KEY	public int size ( ) { return location . size ( ) ; }
te	IDF	private static void quadMult ( final double a [ ] , final double b [ ] , final double result [ ] ) { final double xs [ ] = new double [ 2 ] ; final double ys [ ] = new double [ 2 ] ; final double zs [ ] = new double [ 2 ] ; split ( a [ 0 ] , xs ) ; split ( b [ 0 ] , ys ) ; splitMult ( xs , ys , zs ) ; result [ 0 ] = zs [ 0 ] ; result [ 1 ] = zs [ 1 ] ; split ( b [ 1 ] , ys ) ; splitMult ( xs , ys , zs ) ; double tmp = result [ 0 ] + zs [ 0 ] ; result [ 1 ] = result [ 1 ] - ( tmp - result [ 0 ] - zs [ 0 ] ) ; result [ 0 ] = tmp ; tmp = result [ 0 ] + zs [ 1 ] ; result [ 1 ] = result [ 1 ] - ( tmp - result [ 0 ] - zs [ 1 ] ) ; result [ 0 ] = tmp ; split ( a [ 1 ] , xs ) ; split ( b [ 0 ] , ys ) ; splitMult ( xs , ys , zs ) ; tmp = result [ 0 ] + zs [ 0 ] ; result [ 1 ] = result [ 1 ] - ( tmp - result [ 0 ] - zs [ 0 ] ) ; result [ 0 ] = tmp ; tmp = result [ 0 ] + zs [ 1 ] ; result [ 1 ] = result [ 1 ] - ( tmp - result [ 0 ] - zs [ 1 ] ) ; result [ 0 ] = tmp ; split ( a [ 1 ] , xs ) ; split ( b [ 1 ] , ys ) ; splitMult ( xs , ys , zs ) ; tmp = result [ 0 ] + zs [ 0 ] ; result [ 1 ] = result [ 1 ] - ( tmp - result [ 0 ] - zs [ 0 ] ) ; result [ 0 ] = tmp ; tmp = result [ 0 ] + zs [ 1 ] ; result [ 1 ] = result [ 1 ] - ( tmp - result [ 0 ] - zs [ 1 ] ) ; result [ 0 ] = tmp ; }
te	KEY	public int getHpCounter ( ) { return hpCounter ; }
te	IDF	private Object lessMin ( Object subtree ) { if ( ! ( subtree instanceof Node ) ) { Object [ ] ary = ( Object [ ] ) subtree ; return subseq ( ary , 1 , ary . length ) ; } else { Node node = ( Node ) subtree ; if ( node . left == null ) return node . right ; else return concat ( node . element , lessMin ( node . left ) , node . right ) ; } }
te	KEY	private RegexEscapeUtils ( ) { }
te	IDF	public void startNewGame ( Game game ) { game . start ( ) ; this . clearTheBoard ( ) ; }
te	IDF	public ItemLista ( int id ) { initComponents ( ) ; this . id = id ; }
te	KEY	public void setEditions ( int [ ] editions ) { this . editions = editions ; }
te	KEY	public boolean getStatus ( ) { return status ; }
te	KEY	public void setSpeedDE ( float speedDE ) { this . speedDE = speedDE ; }
te	KEY	public void dispose ( ) { store = null ; wrapped = null ; }
te	KEY	public boolean deleteActor ( int id ) throws WebshopAppException ;
te	IDF	private void endGameBtnMouseReleased ( java . awt . event . MouseEvent evt ) { if ( isNetwork ) { network . sendGameTerminate ( ) ; network . destroyConnection ( ) ; } else { MainApplication . ticTacToePlay . registerPlayers ( ) ; } mainBoard . dispose ( ) ; this . dispose ( ) ; TicTacToeUIApp . getApplication ( ) . getMainFrame ( ) . setVisible ( true ) ; }
te	IDF	public void setDropdown ( JComboBox dropdown ) { this . dropdown = dropdown ; }
te	KEY	@ Override public ScenarioTreeStep getNextStep ( ) { if ( this . getFollowUpSteps ( ) . length == 0 ) { throw new RuntimeException ( "ScenarioTreeStepDBOWLNotebook: Kein Folgeschritt gesetzt!" ) ; } return this . getFollowUpStep ( 0 ) ; }
te	IDF	public Msg [ ] findWhereTypeMsgEquals ( String typeMsg ) throws MsgDaoException { return findByDynamicSelect ( SQL_SELECT + " WHERE typeMsg = ? ORDER BY typeMsg" , new Object [ ] { typeMsg } ) ; }
te	IDF	public void init ( IWorkbench workbench ) { _prefStore = Activator . getDefault ( ) . getPreferenceStore ( ) ; setPreferenceStore ( _prefStore ) ; }
te	KEY	public int getSize ( ) { return size ; }
te	IDF	@ Override public void onCommand ( SMTPSession session ) throws SMTPException { if ( ! session . checkCommandOrder ( ) ) { throw new SMTPException ( "503 send HELO or ehlo first" ) ; } session . resetState ( ) ; String senderAddress = StringUtil . getAddressFromArgument ( session . getCurRemainCommandStr ( ) ) ; String remainCommand = StringUtil . getRemainCommand ( session . getCurRemainCommandStr ( ) ) ; if ( remainCommand == null || ! remainCommand . toUpperCase ( ) . equals ( "FROM" ) || senderAddress == null ) { throw new SMTPException ( "501 Syntax error in parameters or arguments" ) ; } if ( ! CheckUtil . isCorrectPath ( senderAddress ) ) { throw new SMTPException ( "501 Syntax error in parameters or arguments" ) ; } senderAddress = senderAddress . substring ( 1 , senderAddress . length ( ) - 1 ) ; emailName = StringUtil . getEmailName ( senderAddress ) ; emailDomain = StringUtil . getEmailDomain ( senderAddress ) ; if ( ! emailName . equals ( session . getUserName ( ) ) ) { throw new SMTPException ( "553 mail from must equal authorized user" ) ; } if ( CheckUtil . isSameDomain ( emailDomain , session . getDomainList ( ) ) ) { session . setLastCommandName ( ) ; responseStr = "250 Sender <" + senderAddress + "> OK" ; session . sendResponse ( responseStr ) ; } else { session . getLogger ( ) . info ( "\u53D1\u4EF6\u4EBA\u4E0E\u670D\u52A1\u5668\u5728\u4E0D\u540C\u4E00\u4E2A\u57DF" ) ; throw new SMTPException ( "553 mail from must equal authorized user" ) ; } }
te	KEY	public abstract boolean pressTab ( ) ;
te	KEY	public double getValCob_DevCompra ( ) { return ValCob_DevCompra ; }
te	IDF	@ Override public void actionPerformed ( ActionEvent e ) { if ( InterfaceEditeur . getSortiePresente ( ) == false ) { definirSortie ( ) ; panel_case . validate ( ) ; panel_case . repaint ( ) ; } else { JOptionPane . showMessageDialog ( null , "Une sortie est d\uFFFDj\uFFFD pr\uFFFDsente" , "ERREUR" , JOptionPane . ERROR_MESSAGE ) ; } }
te	KEY	public ColumnFullException ( ) { }
te	IDF	@ XmlElementDecl ( namespace = "http://api.soap.mytxtbuddy.com/" , name = "sendMessageResponse" ) public JAXBElement < SendMessageResponse > createSendMessageResponse ( SendMessageResponse value ) { return new JAXBElement < SendMessageResponse > ( _SendMessageResponse_QNAME , SendMessageResponse . class , null , value ) ; }
te	IDF	public void drawMyFigure ( Graphics g , int w , int h , Matrix m ) { this . w = w ; this . h = h ; for ( int f = 0 ; f < faces . length ; f ++ ) { for ( int f2 = 0 ; f2 < faces [ f ] . length ; f2 ++ ) { int i = faces [ f ] [ f2 ] ; int j = faces [ f ] [ ( f2 + 1 ) % faces [ f ] . length ] ; m . transform ( vertices [ j ] , point1 ) ; m . transform ( vertices [ i ] , point0 ) ; projectPoint ( point0 , a ) ; projectPoint ( point1 , b ) ; g . drawLine ( a [ 0 ] , a [ 1 ] , b [ 0 ] , b [ 1 ] ) ; } } }
te	KEY	public GetSenderNames createGetSenderNames ( ) { return new GetSenderNames ( ) ; }
te	KEY	void print ( int indent ) ;
te	IDF	private void jBEditaActionPerformed ( java . awt . event . ActionEvent evt ) { setEstado ( 2 ) ; }
te	KEY	public static ZiWeiSplashHandler getSplashHandler ( ) { return _splashHandler ; }
te	KEY	protected abstract JMenu createAboutMenu ( ) ;
te	IDF	private void initFiles ( ) { CodeSource codeSource = this . getClass ( ) . getProtectionDomain ( ) . getCodeSource ( ) ; File jarFile ; String jarDir = null ; try { jarFile = new File ( codeSource . getLocation ( ) . toURI ( ) . getPath ( ) ) ; jarDir = jarFile . getParentFile ( ) . getPath ( ) ; System . out . println ( jarDir ) ; } catch ( URISyntaxException e ) { e . printStackTrace ( ) ; } defFile = new File ( jarDir + "\\presets\\default.xml" ) ; browserFile = new File ( jarDir + "\\presets\\browser.xml" ) ; app1File = new File ( jarDir + "\\presets\\app1.xml" ) ; app2File = new File ( jarDir + "\\presets\\app2.xml" ) ; app3File = new File ( jarDir + "\\presets\\app3.xml" ) ; }
te	IDF	FrameClass ( ) { JFrame frame = new JFrame ( ) ; frame . setSize ( 600 , 400 ) ; frame . setTitle ( "Frame" ) ; frame . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ) ; frame . setLocationRelativeTo ( null ) ; frame . setLayout ( new GridBagLayout ( ) ) ; JButton button1 = new JButton ( ) ; button1 . setText ( "Button 1" ) ; button1 . setBackground ( Color . green ) ; button1 . setForeground ( Color . blue ) ; button1 . setFont ( new Font ( "Serif" , Font . BOLD , 14 ) ) ; button1 . setCursor ( new Cursor ( Cursor . HAND_CURSOR ) ) ; JButton button2 = new JButton ( ) ; button2 . setText ( "Button 2" ) ; button2 . setForeground ( Color . white ) ; button2 . setBackground ( Color . red ) ; frame . add ( button1 ) ; frame . add ( button2 ) ; button1 . addActionListener ( this ) ; button2 . addActionListener ( this ) ; frame . setVisible ( true ) ; }
te	IDF	protected void init ( String text ) { setTextInsets ( h / 3 , 10 ) ; setText ( text ) ; }
te	IDF	public void setBorrowing ( Set < Borrowing > borrowing ) { this . borrowing = borrowing ; }
te	KEY	public boolean isOk ( ) { return ok ; }
te	IDF	public static void assertEquals ( final CheckBox expected , final CheckBox actual ) { DatabaseAbstractQuestionTest . assertEquals ( expected , actual ) ; assert . assertEquals ( expected . getQuestionString ( ) , actual . getQuestionString ( ) ) ; assert . assertEquals ( expected . getAnswers ( ) , actual . getAnswers ( ) ) ; assert . assertEquals ( expected . getOptions ( ) , actual . getOptions ( ) ) ; }
te	IDF	private void Comparar ( ) { String Usuario = txtUsuario . getText ( ) ; if ( txtClave . getText ( ) . equals ( String . valueOf ( jPContrasena . getPassword ( ) ) ) ) { JOptionPane . showMessageDialog ( this , "BIENVENIDO " + Usuario ) ; iniciarCarga ( ) ; iniciarSplash ( ) ; if ( Progreso . getValue ( ) == 100 ) { JOptionPane . showMessageDialog ( null , "Est\u00E1 accediendo al Men\u00FA Principal" ) ; if ( txtTipEm . getText ( ) . equals ( "Administrador" ) ) { InterfazAdministrador IrAdmin = new InterfazAdministrador ( ) ; IrAdmin . setVisible ( true ) ; dispose ( ) ; } else if ( txtTipEm . getText ( ) . equals ( "Tecnico" ) ) { InterfazTecnico Tecnico = new InterfazTecnico ( ) ; Tecnico . setVisible ( true ) ; dispose ( ) ; } else if ( txtTipEm . getText ( ) . equals ( "Vendedor" ) ) { InterfazVendedor Vendedor = new InterfazVendedor ( ) ; Vendedor . setVisible ( true ) ; dispose ( ) ; } } } else { JOptionPane . showMessageDialog ( this , "Usuario o Contase\u00F1a Incorrecta" , "Error" , JOptionPane . ERROR_MESSAGE ) ; txtUsuario . requestFocus ( ) ; } }
te	KEY	public AcceptableByLineCount ( final int expectedCount ) { this . expectedCount = expectedCount ; }
te	KEY	@ Override public double getProfit ( ) { return 7 ; }
te	KEY	@ Override public boolean humanControl ( ) { if ( null == this . proxy ) return false ; return true ; }
te	IDF	private void storeMirrors ( final PatternHashElement element ) { put ( element . createBitMirrored ( headIndex ) ) ; AngleUnitFlapPattern pattern = element . getPattern ( ) ; int divisionSize = pattern . getDivisionSize ( ) ; if ( pattern . countLines ( ) < 3 ) { return ; } for ( int i = 1 ; i < divisionSize / 2 ; i ++ ) { int indexOfMirroredHead = headIndex + i * 2 ; if ( pattern . getAt ( indexOfMirroredHead ) == pattern . getAt ( headIndex ) ) { PatternHashElement bitMirrored = element . createBitMirrored ( i ) ; if ( LOGGER . isTraceEnabled ( ) ) { LOGGER . trace ( "mirror " + headIndex + "->" + indexOfMirroredHead + ": " + bitMirrored . getKey ( ) + pattern . createMirroredPattern ( i ) ) ; } put ( bitMirrored ) ; } } }
te	KEY	public int size ( ) { return arrs . length ; }
te	KEY	public void setAmount ( double amount ) { this . amount = amount ; }
te	IDF	public void loadNative ( String path ) { try { server . loadNativeDriver ( path ) ; } catch ( INDIException e ) { System . err . println ( e . getMessage ( ) ) ; } }
te	KEY	public SpriteTemplate [ ] [ ] getSpriteTemplate ( ) { return this . spriteTemplates ; }
te	IDF	public DevolucionCompra ( int Id_DevCompra , Producto Id_Producto , int NumFacCom_DevCompra , Date Fec_DevCompra , String Des_DevCompra , int CanPro_DevCompra , double Pcp_DevCompra , double ValCob_DevCompra , Compra Id_Compra , Empleado Id_Empleado ) { this . Id_DevCompra = Id_DevCompra ; this . Id_Producto = Id_Producto ; this . NumFacCom_DevCompra = NumFacCom_DevCompra ; this . Fec_DevCompra = Fec_DevCompra ; this . Des_DevCompra = Des_DevCompra ; this . CanPro_DevCompra = CanPro_DevCompra ; this . Pcp_DevCompra = Pcp_DevCompra ; this . ValCob_DevCompra = ValCob_DevCompra ; this . Id_Compra = Id_Compra ; this . Id_Empleado = Id_Empleado ; }
te	KEY	public void remove ( ) { throw new UnsupportedOperationException ( ) ; }
te	KEY	private Messages ( ) { }
te	KEY	public SalaryHistoryDAO ( ) { }
te	IDF	public static void main ( String [ ] args ) { Main main = new Main ( ) ; initApplication ( ) ; main . start ( ) ; }
te	KEY	private static String createMessage ( final String path ) { if ( path != null ) return "[File => " + path + "]" ; else return null ; }
te	IDF	private void setupComponents ( ) { setupMenuBar ( ) ; setupToolBar ( ) ; m_uiDisplay . start ( ) ; add ( m_uiDisplay , BorderLayout . CENTER ) ; }
te	KEY	protected void switchUsable ( ) { if ( isUsable == true ) { isUsable = false ; _confirm . setEnabled ( false ) ; } else { isUsable = true ; _confirm . setEnabled ( true ) ; } }
te	IDF	public static void main ( String args [ ] ) { try { for ( javax . swing . UIManager . LookAndFeelInfo info : javax . swing . UIManager . getInstalledLookAndFeels ( ) ) { if ( "Nimbus" . equals ( info . getName ( ) ) ) { javax . swing . UIManager . setLookAndFeel ( info . getClassName ( ) ) ; break ; } } } catch ( ClassNotFoundException ex ) { java . util . logging . Logger . getLogger ( UserControl . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( InstantiationException ex ) { java . util . logging . Logger . getLogger ( UserControl . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( IllegalAccessException ex ) { java . util . logging . Logger . getLogger ( UserControl . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( javax . swing . UnsupportedLookAndFeelException ex ) { java . util . logging . Logger . getLogger ( UserControl . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } java . awt . EventQueue . invokeLater ( new Runnable ( ) { public void run ( ) { try { new UserControl ( ) . setVisible ( true ) ; } catch ( SQLException ex ) { Logger . getLogger ( UserControl . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; } } } ) ; }
te	IDF	public static void setTimeZone ( String timezoneID ) { timezone = TimeZone . getTimeZone ( timezoneID ) ; }
te	IDF	public FinalMap ( ImageRegistry skin ) { super ( WIDTH , HEIGHT ) ; this . skin = skin ; generateMap ( ) ; }
te	IDF	public void keyReleased ( KeyEvent e ) { System . err . println ( "released " + e . getKeyChar ( ) ) ; }
te	IDF	private static void addMonstersRoom ( MapGenerator map , Map newMap , Rectangle room , int tier , int count ) { Rectangle placement = MapRand . innerRectangle ( room ) ; for ( int i = 0 ; i < count ; i ++ ) { Point tempPt = MapRand . randPoint ( placement ) ; int j = 0 ; j = 0 ; while ( ( ( map . getTile ( tempPt . x , tempPt . y ) != MapTile . ROOM_FLOOR ) || ( newMap . getTile ( tempPt . x , tempPt . y ) . isOccupied ( ) ) ) && ( j < RETRY_COUNT ) ) { tempPt = MapRand . randPoint ( placement ) ; j ++ ; } Tile selected = newMap . getTile ( tempPt . x , tempPt . y ) ; if ( selected . isOccupied ( ) ) continue ; Monster babyMonster = Controller . getInstance ( ) . getRandMapMonster ( tier ) ; selected . setOccupant ( babyMonster ) ; newMap . addMonster ( babyMonster ) ; } }
te	IDF	public CommandApagar ( Luz luz ) { this . objLuz = luz ; }
te	KEY	public void setT2 ( int t2 ) { this . t2 = t2 ; }
te	KEY	public abstract List < ? extends PuzzleAtom > atoms ( ) ;
te	KEY	public static boolean isUseSimplifier ( ) { return getBoolean ( "sun.java2d.renderer.useSimplifier" , "false" ) ; }
te	KEY	protected void interrupted ( ) { }
te	KEY	public boolean hasNext ( ) { if ( this . position >= items . length || items [ position ] == null ) { return false ; } else { return true ; } }
te	IDF	public void sendMessage ( Msg message ) { Queue < Msg > messageQueue = messages . get ( message . getTo ( ) ) ; messageQueue . add ( message ) ; }
te	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { jbGenerarOrdenActionPerformed ( evt ) ; }
te	KEY	public boolean mouseMove ( Event e , int x , int y ) { return true ; }
te	IDF	@ Override public void die ( Date now ) { if ( end . after ( now ) ) end = now ; }
te	KEY	protected void setupPanel ( ) { }
te	IDF	private FacesMessage createMessage ( Severity severity , String mensagemErro ) { return new FacesMessage ( severity , mensagemErro , mensagemErro ) ; }
te	IDF	public GitSettings withDefaultFileCharset ( Charset value ) { return new GitSettings ( gitPath , value , failFast ) ; }
te	KEY	public void deleteLecture ( long lectureId ) ;
te	KEY	public PKIService ( ) { }
te	IDF	public void setT2_character ( String t2_character ) { this . t2_character = t2_character ; }
te	KEY	public boolean getAccessAssistiveTechnology ( ) { return accessAssistiveTechnology ; }
te	KEY	public void setX ( int x ) { this . x = x ; }
te	IDF	@ Override public void processNewSwitchValue ( INDISwitchProperty property , Date timestamp , INDISwitchElementAndValue [ ] elementsAndValues ) { if ( property == send ) { if ( elementsAndValues . length > 0 ) { SwitchStatus stat = elementsAndValues [ 0 ] . getValue ( ) ; if ( stat == SwitchStatus . ON ) { property . setState ( PropertyStates . OK ) ; try { updateProperty ( property , "Checking images" ) ; } catch ( INDIException e ) { e . printStackTrace ( ) ; System . exit ( - 1 ) ; } checksForSpainImage ( true ) ; checksForEuropeImage ( true ) ; } } } }
te	IDF	private void completeProgress ( int time ) { try { Thread . sleep ( new Random ( ) . nextInt ( ( int ) ( time * 100 ) ) + 1000 ) ; } catch ( InterruptedException e ) { } }
te	KEY	public void setSourceTypeErrorCode ( long value ) { this . sourceTypeErrorCode = value ; }
te	IDF	public boolean containsReference ( String collection , String key , String value ) { Map < String , String > _reference = new HashMap < String , String > ( ) ; _reference . put ( key , value ) ; return this . _collections . get ( collection ) . contains ( _reference ) ; }
te	KEY	public int getCount ( ) { return count ; }
te	KEY	public int getId ( ) { return id ; }
te	IDF	private boolean isEqualColor ( int rgb1 , int rgb2 , float tolerance ) { Color c1 = new Color ( rgb1 , true ) ; Color c2 = new Color ( rgb2 , true ) ; int tolerance256 = ( int ) ( tolerance * 256 ) ; if ( Math . abs ( c1 . getRed ( ) - c2 . getRed ( ) ) > tolerance256 ) return false ; if ( Math . abs ( c1 . getGreen ( ) - c2 . getGreen ( ) ) > tolerance256 ) return false ; if ( Math . abs ( c1 . getBlue ( ) - c2 . getBlue ( ) ) > tolerance256 ) return false ; if ( c1 . getAlpha ( ) == 0 && c2 . getAlpha ( ) != 0 ) return false ; if ( c1 . getAlpha ( ) != 0 && c2 . getAlpha ( ) == 0 ) return false ; return true ; }
te	IDF	public FHashMap < Key , Val > union ( FMap < ? extends Key , ? extends Val > with_map , BinaryOp < Val > valCombiner ) { FHashMap < Key , Val > with_fhm = new FHashMap < Key , Val > ( with_map ) ; Object t = union ( tree , with_fhm . tree , valCombiner ) ; return new FHashMap < Key , Val > ( t , dflt ) ; }
te	IDF	public void orderShow ( ) { appListener . getOrder ( ) ; orderTable = new JTable ( ordermodel ) { private static final long serialVersionUID = 1 ; public boolean isCellEditable ( int row , int column ) { if ( column < 8 ) { return false ; } else { return true ; } } public Component prepareRenderer ( TableCellRenderer renderer , int Index_row , int Index_col ) { Component comp = super . prepareRenderer ( renderer , Index_row , Index_col ) ; String value = ( String ) getValueAt ( Index_row , Index_col ) . toString ( ) ; if ( Index_row % 2 == 0 && ! isCellSelected ( Index_row , Index_col ) ) { comp . setBackground ( new Color ( 240 , 248 , 255 ) ) ; } else { comp . setBackground ( new Color ( 198 , 226 , 255 ) ) ; } if ( value . equals ( "Brak realizacji" ) ) { comp . setBackground ( Color . red ) ; } else if ( value . equals ( "Zrealizowano" ) ) { comp . setBackground ( Color . GREEN ) ; } return comp ; } } ; orderScroll = new JScrollPane ( orderTable ) ; orderScroll . setPreferredSize ( new Dimension ( 820 , 600 ) ) ; ordermodel . addColumn ( "Lp." ) ; ordermodel . addColumn ( "ID" ) ; ordermodel . addColumn ( "Data" ) ; ordermodel . addColumn ( "Imie" ) ; ordermodel . addColumn ( "Nazwisko" ) ; ordermodel . addColumn ( "Adres" ) ; ordermodel . addColumn ( "Produkt" ) ; ordermodel . addColumn ( "Realizacja" ) ; orderTable . setRowHeight ( 20 ) ; TableColumnModel tcm = orderTable . getColumnModel ( ) ; tcm . getColumn ( 0 ) . setMaxWidth ( 50 ) ; tcm . getColumn ( 1 ) . setMaxWidth ( 50 ) ; orderTable . getTableHeader ( ) . setFont ( new Font ( "Arial" , 0 , 15 ) ) ; tableEdit ( orderTable ) ; controls = new JPanel ( new BorderLayout ( 5 , 5 ) ) ; buttons = new JPanel ( new GridLayout ( 0 , 1 , 4 , 4 ) ) ; print = new JButton ( "Drukuj" ) ; acceptbutton = new JButton ( "Akceptuj" ) ; deletebutton = new JButton ( "Usu\u0144" ) ; cancelbutton = new JButton ( "Anuluj" ) ; deleteAction ( orderTable , "zamowienia" ) ; JPopupMenu popupMenu = new JPopupMenu ( ) ; JMenuItem menuItemRemove = new JMenuItem ( "Usu\u0144" ) ; popupMenu . add ( menuItemRemove ) ; orderTable . setComponentPopupMenu ( popupMenu ) ; menuItemRemove . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { int selRow = Integer . parseInt ( orderTable . getValueAt ( orderTable . getSelectedRow ( ) , 1 ) . toString ( ) ) ; fireDeleteEvent ( new CompanyEvent ( null , "zamowienia" , null , selRow , "" ) , "zamowienia" ) ; } } ) ; acceptbutton . setEnabled ( false ) ; cancelbutton . setEnabled ( false ) ; orderTable . addMouseListener ( new MouseAdapter ( ) { @ Override public void mouseClicked ( MouseEvent e ) { acceptbutton . setEnabled ( true ) ; cancelbutton . setEnabled ( true ) ; } } ) ; cancelbutton . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { int selRow = ( Integer ) orderTable . getValueAt ( orderTable . getSelectedRow ( ) , 1 ) ; if ( selRow >= 0 ) { System . out . println ( selRow ) ; fireOrderEvent ( new OrderEvent ( selRow , "zamowienia" , 0 , "update" ) ) ; } } } ) ; acceptbutton . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { int selRow = ( Integer ) orderTable . getValueAt ( orderTable . getSelectedRow ( ) , 1 ) ; if ( selRow >= 0 ) { System . out . println ( selRow ) ; fireOrderEvent ( new OrderEvent ( selRow , "zamowienia" , 1 , "update" ) ) ; } } } ) ; buttons . add ( acceptbutton ) ; buttons . add ( cancelbutton ) ; buttons . add ( deletebutton ) ; buttons . add ( print ) ; buttons . setBorder ( new TitledBorder ( "Zarz\u0105dzaj" ) ) ; controls . add ( buttons , BorderLayout . NORTH ) ; card4 . add ( orderScroll ) ; card4 . add ( controls ) ; }
te	IDF	@ Override public void processNewSwitchValue ( INDISwitchProperty property , Date timestamp , INDISwitchElementAndValue [ ] elementsAndValues ) { if ( property == sendP ) { if ( elementsAndValues . length > 0 ) { INDISwitchElement el = elementsAndValues [ 0 ] . getElement ( ) ; SwitchStatus s = elementsAndValues [ 0 ] . getValue ( ) ; if ( ( el == sendE ) && ( s == SwitchStatus . ON ) ) { boolean imageLoaded = loadImageFromFile ( ) ; if ( imageLoaded ) { sendP . setState ( PropertyStates . OK ) ; imageP . setState ( PropertyStates . OK ) ; try { updateProperty ( sendP ) ; updateProperty ( imageP ) ; } catch ( INDIException e ) { e . printStackTrace ( ) ; System . exit ( - 1 ) ; } } } } } }
te	IDF	public Node search ( Node n , int key ) { if ( n == null ) return null ; if ( n . value == key ) { return n ; } else { return search ( n . next , key ) ; } }
te	KEY	void setSize ( int size ) ;
te	KEY	public int [ ] getPieces ( ) { return bs . getPieces ( ) ; }
te	IDF	GameCharacterObject setTexture ( Texture texture ) ;
te	KEY	@ Override public double calculateTorque ( double elapsedTime ) { return 0 ; }
te	IDF	public Image flipImage ( Image img ) { BufferedImage bimg = new BufferedImage ( img . getWidth ( null ) , img . getHeight ( null ) , BufferedImage . TYPE_INT_ARGB ) ; Graphics2D g = bimg . createGraphics ( ) ; AffineTransform tx = AffineTransform . getScaleInstance ( 1 , - 1 ) ; tx . translate ( 0 , - img . getHeight ( null ) ) ; g . drawRenderedImage ( toBufferedImage ( img ) , tx ) ; g . dispose ( ) ; return ( Image ) bimg ; }
te	IDF	public void setKeyValue ( String value ) { this . keyValue = value ; }
te	KEY	public synchronized void release ( ) { state = STATE_RELEASED ; }
te	KEY	public BingSearchException ( ) { }
te	KEY	public abstract void requestDrawPreviousPage ( ) ;
te	IDF	@ Override public Geometry getChild ( int i ) { return kids . get ( i ) ; }
te	KEY	void setDispose ( ) ;
te	KEY	public abstract void mouseClicked ( MouseEvent me ) ;
te	IDF	@ Override public ReportModel mapRow ( ResultSet rs , int i ) throws SQLException { ReportModel reportModel = new ReportModel ( ) ; reportModel . setId ( rs . getLong ( "id" ) ) ; reportModel . setName ( rs . getString ( "name" ) ) ; return reportModel ; }
te	KEY	public void closeServer ( ) { serverIsRunning = false ; }
te	KEY	public NonRotatableComponentAction ( ) { }
te	KEY	void stop ( ) ;
te	IDF	@ Override public void mouseClicked ( MouseEvent e ) { acceptbutton . setEnabled ( true ) ; cancelbutton . setEnabled ( true ) ; }
te	KEY	public String getTitulo ( ) { return this . Titulo ; }
te	IDF	public ProdutoResource ( WebServiceFeature ... features ) { super ( WSDL_LOCATION , SERVICE , features ) ; }
te	KEY	public boolean verifierAccessible ( ) { if ( this . etat . equalsIgnoreCase ( "locked" ) ) { return false ; } else { return true ; } }
te	IDF	@ Override public void visit ( Comment comment ) { }
te	KEY	public void run ( ) { new App ( ) . setVisible ( true ) ; }
te	IDF	@ Override public void keyPressed ( KeyEvent keyEvent ) { }
te	KEY	public void setCurrentAxisY ( double currentAxisY ) { this . currentAxisY = currentAxisY ; }
te	KEY	public Triangle ( ) { }
te	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { mainMenuButtonActionPerformed ( evt ) ; }
te	KEY	static void testValidity ( Object o ) throws JSONException { if ( o != null ) { if ( o instanceof double ) { if ( ( ( double ) o ) . isInfinite ( ) || ( ( double ) o ) . isNaN ( ) ) { throw new JSONException ( "JSON does not allow non-finite numbers." ) ; } } else if ( o instanceof float ) { if ( ( ( float ) o ) . isInfinite ( ) || ( ( float ) o ) . isNaN ( ) ) { throw new JSONException ( "JSON does not allow non-finite numbers." ) ; } } } }
te	KEY	public void setJ ( int j ) { this . j = j ; }
te	KEY	public class getColumnClass ( int columnIndex ) { return types [ columnIndex ] ; }
te	KEY	public static double getGamma ( ) { return getDouble ( "sun.java2d.renderer.gamma" , 1.0 , 0.5 , 4.0 ) ; }
te	IDF	public static double parseFormattedDouble ( String string ) { int decimal = string . indexOf ( . ) ; if ( decimal == - 1 || decimal + 1 >= string . length ( ) ) { return 0.0 ; } long whole_part = long . parseLong ( string . substring ( 0 , decimal ) ) ; long fractional_part = long . parseLong ( string . substring ( decimal + 1 , string . length ( ) ) ) ; double divisor = MathUtils . pow ( 10 , string . length ( ) - decimal - 1 ) ; double sign = ( ( string . indexOf ( - ) == - 1 ) ? 1.0 : - 1.0 ) ; return ( double ) whole_part + ( double ) fractional_part * sign / divisor ; }
te	IDF	private void doActions ( Action [ ] actions , int startIndex , int endIndex , boolean wait , boolean draw ) { for ( int x = startIndex ; x < endIndex ; ++ x ) { if ( wait ) { try { Thread . sleep ( 1000 ) ; } catch ( InterruptedException e ) { } } actions [ x ] . doAction ( currentGame ) ; if ( draw ) { shared . updateSharedPanel ( ) ; players . updatePlayerPanel ( currentGame . getPlayerIndex ( ) ) ; } else { board . setRedraw ( false ) ; } board . updateBoardPanel ( actions [ x ] , currentGame ) ; board . setRedraw ( true ) ; } }
te	KEY	public Joueur getJoueur ( ) { return this . joueur ; }
te	KEY	public void setValidation ( boolean validate ) { this . validate = validate ; }
te	KEY	@ Override public float getBulletRange ( ) { return BULLET_RANGE ; }
te	IDF	private BufferedReader rewind ( BufferedReader fp , String filename ) throws IOException { fp . close ( ) ; return new BufferedReader ( new FileReader ( filename ) ) ; }
te	IDF	@ Override public void loadProfile ( String path ) { PresenterManager . getInstance ( ) . stopAll ( ) ; this . model = ProfileManager . getInstance ( ) . loadProfile ( path ) ; }
te	KEY	public void setFuturesightCounter ( int futuresightCounter ) { this . futuresightCounter = futuresightCounter ; }
te	KEY	private JSONWriter append ( String s ) throws JSONException { if ( s == null ) { throw new JSONException ( "Null pointer" ) ; } if ( this . mode == o || this . mode == a ) { try { if ( this . , && this . mode == a ) { this . writer . write (   ) ; } this . writer . write ( s ) ; } catch ( IOException e ) { throw new JSONException ( e ) ; } if ( this . mode == o ) { this . mode = k ; } this . , = true ; return this ; } throw new JSONException ( "Value out of sequence." ) ; }
te	KEY	public boolean isDeleted ( ) { return isDeleted ; }
te	IDF	public FHashMap ( Key [ ] keys , Val [ ] vals ) { if ( keys . length != vals . length ) throw new IllegalArgumentException ( ) ; Object t = null ; dflt = null ; if ( keys . length != vals . length ) throw new IllegalArgumentException ( "array lengths must be equal" ) ; for ( int i = 0 ; i < keys . length ; ++ i ) t = with ( t , keys [ i ] , hashCode ( keys [ i ] ) , vals [ i ] ) ; tree = t ; }
te	KEY	private StringCleaningUtil ( ) { }
te	KEY	public boolean isOccupied ( ) { return occupant != null ; }
te	IDF	public void dfs ( String s , Set < String > dict , int start_idx , int current_idx , String current_result , List < String > result ) { if ( current_idx == s . length ( ) ) { if ( start_idx == s . length ( ) ) result . add ( current_result . substring ( 1 ) ) ; return ; } dfs ( s , dict , start_idx , current_idx + 1 , current_result , result ) ; if ( dict . contains ( s . substring ( start_idx , current_idx + 1 ) ) ) { dfs ( s , dict , current_idx + 1 , current_idx + 1 , current_result + " " + s . substring ( start_idx , current_idx + 1 ) , result ) ; } }
te	KEY	public static boolean isPositiveDouble ( String input ) { boolean result = false ; if ( input != null ) { try { double number = double . parseDouble ( input ) ; if ( number >= 0.00 ) { result = true ; } } catch ( NumberFormatException nfe ) { } } else { throw new IllegalArgumentException ( ) ; } return result ; }
te	KEY	public void setMinDamage ( int minDamage ) { this . minDamage = minDamage ; }
te	KEY	public void setId_category ( int id_category ) { this . id_category = id_category ; }
te	KEY	public void setObjectIsNew ( boolean value ) { this . objectIsNew = value ; }
te	IDF	@ Override public void open ( ) { TranslationManager . getinstance ( ) . addListener ( this ) ; translate ( ) ; setVisible ( true ) ; }
te	KEY	public void setSpentTime ( long time ) ;
te	IDF	private void jList1MouseClicked ( java . awt . event . MouseEvent evt ) { if ( evt . getClickCount ( ) == 2 ) { openSelectedCollection ( ) ; } }
te	KEY	public int [ ] getArrMatched ( ) { return arrMatched ; }
te	IDF	private void formAncestorResized ( java . awt . event . HierarchyEvent evt ) { int W = 4 ; int H = 4 ; Rectangle b = evt . getComponent ( ) . getBounds ( ) ; evt . getComponent ( ) . setBounds ( b . x , b . y , b . width , b . width * H / W ) ; }
te	KEY	private static synchronized void createInstance ( ) { if ( instance == null ) { instance = new AccessConector ( ) ; conectar ( ) ; } }
te	KEY	public double getLeftY ( ) { return getRawAxis ( AXIS_LEFT_Y ) ; }
te	IDF	public static void main ( String args [ ] ) throws InterruptedException , AWTException { PlacingTilesValidityTest . test ( ) ; GameRobot . wait ( 2000 ) ; Simulator . quitGame ( ) ; }
te	KEY	public void setHeaderWrite ( boolean headerWrite ) { this . headerWrite = headerWrite ; }
te	IDF	public Person ( String name , int balance ) { this . name = name ; this . balance = balance ; }
te	KEY	public int getMaxRows ( ) ;
te	IDF	public static void main ( String [ ] args ) { System . out . println ( "Testing Union Find\n" ) ; int NumElements = 128 ; int NumInSameSet = 128 ; int sumOperations = 0 ; DisjointSet s = new DisjointSet ( NumElements ) ; int set1 , set2 ; for ( int k = 1 ; k < NumInSameSet ; k *= 2 ) { for ( int j = 0 ; j + k < NumElements ; j += 2 * k ) { set1 = s . find ( j ) ; set2 = s . find ( j + k ) ; s . union ( set1 , set2 ) ; sumOperations ++ ; } } System . out . println ( "Sum is " + sumOperations ) ; for ( int i = 0 ; i < NumElements ; i ++ ) { if ( i % NumInSameSet == NumInSameSet - 1 ) System . out . println ( ) ; } System . out . println ( ) ; }
te	IDF	public void delete ( Proyecto proyecto ) throws SQLException { mySQLDB = new MYSQLDB ( ) ; String sql = "delete from proyecto where idproyecto = " + proyecto . getIdProyecto ( ) ; mySQLDB . execute ( sql ) ; mySQLDB . closeExecute ( ) ; }
te	KEY	public double dotProduct ( double [ ] _y ) { return dotProduct ( this , _y ) ; }
te	KEY	private MainWindowFrameBase ( ) { }
te	KEY	public abstract String [ ] getAllAttributesAsString ( ) ;
te	KEY	public int getNbSelected ( ) { return nbSelected ; }
te	KEY	public int boardRows ( ) { return maskRows ( getBoard ( ) ) ; }
te	IDF	public String getDomain ( String g ) { String [ ] s = g . split ( "/" ) ; String ns = null ; try { if ( s [ 2 ] != null && s [ 2 ] . matches ( ".*[.][a-zA-Z]{2 3}+" ) ) { ns = s [ 2 ] ; } } catch ( Exception e ) { System . out . println ( "\tmalformed domain in: " + g ) ; } return ns ; }
te	IDF	@ JsonProperty ( "name" ) public void setName ( String name ) { this . name = name ; }
te	KEY	public char getColor ( ) { return color ; }
te	KEY	public Bond bond ( ) { return new Bond ( this ) ; }
te	KEY	public int getNrows ( ) { return r ; }
te	KEY	public int getId ( ) { return id ; }
te	IDF	private void refreshPlayerStatsMenuFases ( ) { this . labelPoints_MenuFases . setText ( playerStats . getProperty ( "total" ) ) ; }
te	KEY	public Controlador ( ItemMenu ambiente ) { switch ( ambiente . getNome ( ) ) { case "PROMPT" : cli = new Prompt ( ) ; break ; case "TERMINAL" : cli = new Terminal ( ) ; break ; default : cli = new Prompt ( ) ; break ; } }
te	KEY	private CircleLinkAssertion ( ) { }
te	KEY	public int error_sym ( ) { return 1 ; }
te	KEY	public static String getIpAddress ( ) { return serverAdress ; }
te	IDF	private void makeXStub ( ) { OutputStub xStub = new OutputStub ( ) ; xStub . setName ( "x" ) ; xStub . setXY ( 300 , 300 ) ; addOutputStub ( xStub ) ; }
te	IDF	public void run ( ) { try { main . shutDown ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }
te	KEY	public int getPorcentajeNatural ( ) { return porcentajeNatural ; }
te	KEY	public Disassembler ( ) { }
te	KEY	public void execute ( ) ;
te	IDF	public static double distance ( double x0 , double y0 , double x1 , double y1 ) { return FastMath . sqrt ( ( x1 - x0 ) * ( x1 - x0 ) + ( y1 - y0 ) * ( y1 - y0 ) ) ; }
te	KEY	public double getVPH_Empleado ( ) { return VPH_Empleado ; }
te	KEY	public boolean isLogged ( ) { return Logged ; }
te	IDF	public void limpiarTabla ( JTable tabla ) { try { DefaultTableModel modelo = ( DefaultTableModel ) tabla . getModel ( ) ; int filas = tabla . getRowCount ( ) ; for ( int i = 0 ; filas > i ; i ++ ) { modelo . removeRow ( 0 ) ; } } catch ( Exception e ) { JOptionPane . showMessageDialog ( this , "Error al limpiar la tabla." ) ; } }
te	KEY	public static boolean isInteger ( String s ) { try { Integer . parseInt ( s ) ; } catch ( NumberFormatException e ) { return false ; } return true ; }
te	KEY	public final void resetClock ( ) { if ( this . timer != null ) stopClock ( ) ; minutes = 0 ; seconds = 0 ; refreshClock ( "00:00" ) ; }
te	KEY	public boolean hasOpenLot ( ) { return lots . remainingCapacity ( ) > 0 ; }
te	IDF	private Decision ( int column , long measure ) { this . column = column ; this . measure = measure ; }
te	KEY	public void setReceivedMsg ( boolean receivedMsg ) { this . receivedMsg = receivedMsg ; }
te	KEY	public synchronized boolean isD3repetitionEnabled ( ) { return isD3repeatable ; }
te	KEY	private BoardBuilder createBoardBuilder ( ) { return new BoardBuilder ( ) ; }
te	IDF	public void imageComplete ( int status ) { if ( status == STATICIMAGEDONE || status == SINGLEFRAMEDONE ) { accumPixels ( 0 , 0 , srcWidth , srcHeight , rgbModel , srcPixels , 0 , srcWidth ) ; } consumer . imageComplete ( status ) ; }
te	KEY	public static long minutesToMillis ( double minutes ) { return Math . round ( minutes * 60 * 1000 ) ; }
te	IDF	public LatexGenerator ( String title , String latexFile , Iterator < String > lineIterator ) throws IOException { fw = new FileWriter ( latexFile ) ; this . lineIterator = lineIterator ; String p = preamble . replace ( "__TITLE__" , title ) ; fw . write ( p ) ; }
te	KEY	public void setTimestamp ( long timestamp ) { this . timestamp = timestamp ; }
te	IDF	private RankTrimResult rankTrim ( Object subtree , int base , int lo , int hi ) { while ( subtree != null && subtree instanceof Node ) { Node node = ( Node ) subtree ; int nrank = base + treeSize ( node . left ) ; if ( nrank >= lo ) { if ( nrank < hi ) break ; else subtree = node . left ; } else { int rbase = nrank + elementSize ( node . element ) ; if ( rbase > lo ) break ; else { base = rbase ; subtree = node . right ; } } } return new RankTrimResult ( subtree , base ) ; }
te	KEY	protected boolean isFinished ( ) { return true ; }
te	IDF	public Profile findByPrimaryKey ( ProfilePk pk ) throws ProfileDaoException ;
te	KEY	public int getSalary ( ) { return salary ; }
te	IDF	@ Override public void translate ( ) { super . setTitle ( TranslationManager . getinstance ( ) . getText ( "topic" ) ) ; this . cardCount1 . setText ( TranslationManager . getinstance ( ) . getText ( "cards" ) ) ; this . cardCount2 . setText ( TranslationManager . getinstance ( ) . getText ( "cards" ) ) ; this . cardCount3 . setText ( TranslationManager . getinstance ( ) . getText ( "cards" ) ) ; this . cardCount4 . setText ( TranslationManager . getinstance ( ) . getText ( "cards" ) ) ; this . cardCount5 . setText ( TranslationManager . getinstance ( ) . getText ( "cards" ) ) ; this . beatTheClockCheckBox . setText ( TranslationManager . getinstance ( ) . getText ( "beatTheClock" ) ) ; this . noCardsInBox = TranslationManager . getinstance ( ) . getText ( "noCardsInBox" ) ; this . cardsMenu . setText ( TranslationManager . getinstance ( ) . getText ( "cards" ) ) ; this . createCards . setText ( TranslationManager . getinstance ( ) . getText ( "create" ) ) ; this . showCards . setText ( TranslationManager . getinstance ( ) . getText ( "show" ) ) ; this . moveAllCardsToFirstBox . setText ( TranslationManager . getinstance ( ) . getText ( "moveAllCardsToFirstBox" ) ) ; this . statisticMenu . setText ( TranslationManager . getinstance ( ) . getText ( "statistic" ) ) ; this . openStatistic . setText ( TranslationManager . getinstance ( ) . getText ( "open" ) ) ; this . boxLabel1 . setText ( TranslationManager . getinstance ( ) . getText ( "box" ) + " 1" ) ; this . boxLabel2 . setText ( TranslationManager . getinstance ( ) . getText ( "box" ) + " 2" ) ; this . boxLabel3 . setText ( TranslationManager . getinstance ( ) . getText ( "box" ) + " 3" ) ; this . boxLabel4 . setText ( TranslationManager . getinstance ( ) . getText ( "box" ) + " 4" ) ; this . boxLabel5 . setText ( TranslationManager . getinstance ( ) . getText ( "box" ) + " 5" ) ; }
te	KEY	public void set ( int col , int row , double value ) ;
te	IDF	public LinkedList < Link > getLinks ( ) { return links ; }
te	KEY	public Dimension getPreferredSize ( ) { return new Dimension ( 600 , 300 ) ; }
te	KEY	public boolean blockExplosion ( ) { return false ; }
te	IDF	@ Override public void actionPerformed ( ActionEvent evt ) { ( ( Timer ) evt . getSource ( ) ) . stop ( ) ; answerField . setEditable ( true ) ; answerField . setBackground ( Color . WHITE ) ; answerField . setText ( "" ) ; presenter . nextCard ( ) ; }
te	KEY	public boolean getIsAdditionalAccessoryNeeded ( ) { return additionalAccessoryNeeded ; }
te	KEY	public int getPosition ( ) { return position ; }
te	KEY	public int getBestMove ( ) { return 0 ; }
te	IDF	public void actionPerformed ( ActionEvent e ) { JOptionPane . showMessageDialog ( helpAbout , "\nFROG Level Editor version 0.0.1\n\n" + "Copyright \u00A9 2014-2015 Artur Rojek\n" + "Licensed under LGPL v2 +" , "About" , JOptionPane . INFORMATION_MESSAGE , new ImageIcon ( "./data/about.png" ) ) ; }
te	IDF	public boolean isCollision ( Loc r ) { return isCollision ( r . x , r . y ) ; }
te	IDF	public Motor ( int id , SerialCom serialCom ) { super ( id , serialCom ) ; }
te	KEY	public int getDifficulty ( ) { return difficulty ; }
te	IDF	public static String logFormat ( ) { String commitHash = "%H" ; String parentHashes = "%P" ; String authorDate = "%at" ; String authorName = "%an" ; String rawBody = "%s%n%n%-b" ; return "--pretty=format:" + commitStartSeparatorFormat + commitHash + commitFieldSeparatorFormat + parentHashes + commitFieldSeparatorFormat + authorDate + commitFieldSeparatorFormat + authorName + commitFieldSeparatorFormat + rawBody + commitFieldSeparatorFormat ; }
te	KEY	public static LCARS getSingletonObject ( ) { if ( reference == null ) { reference = new LCARS ( ) ; } return reference ; }
te	KEY	public boolean isAct_stock ( ) { return act_stock ; }
te	KEY	@ Override public double getLatestValue ( ) { return value ; }
te	KEY	public void Reset ( ) { this . eligibilityFormPanel . Reset ( ) ; }
te	KEY	public void setPower ( int power ) { this . power = power ; }
te	IDF	@ OneToMany ( mappedBy = "userByUserIduser" , fetch = FetchType . LAZY ) public Collection < SurveyHasUser > getSurveyHasUsersByIduser ( ) { return surveyHasUsersByIduser ; }
te	IDF	private Object first ( Object subtree ) { if ( ! ( subtree instanceof Node ) ) return ( ( Object [ ] ) subtree ) [ 0 ] ; else { Node node = ( Node ) subtree ; if ( node . left == null ) { if ( node . element instanceof EquivalentSet ) return ( ( EquivalentSet ) node . element ) . contents . get ( 0 ) ; else return node . element ; } else return first ( node . left ) ; } }
te	IDF	@ Override protected void delete ( Message request , Message response ) { }
te	IDF	public boolean TeclaEntPos ( String texto , KeyEvent e ) { char c = e . getKeyChar ( ) ; if ( ( c < 0 || c > 9 ) && c != e . VK_BACK_SPACE && c != e . VK_ENTER && c != e . VK_DELETE ) { validacion = false ; } else { validacion = true ; } return validacion ; }
te	KEY	public int getStartingLength ( ) { return startingLength ; }
te	KEY	public String getServletInfo ( ) { return "Short description" ; }
te	IDF	public static void main ( String [ ] args ) throws Exception { Pattern p = new Pattern ( args [ 0 ] ) ; boolean [ ] [ ] world = new boolean [ p . getHeight ( ) ] [ p . getWidth ( ) ] ; p . initialise ( world ) ; play ( world ) ; }
te	IDF	@ Override public WorkbenchWindowAdvisor createWorkbenchWindowAdvisor ( IWorkbenchWindowConfigurer configurer ) { return new ApplicationWorkbenchWindowAdvisor ( configurer ) ; }
te	KEY	public int getRoomCount ( ) { return rooms . size ( ) ; }
te	KEY	public boolean isNumeric ( ) { return this == INTEGER || this == float ; }
te	IDF	public void setPassword ( String password ) { this . password = password ; }
te	KEY	public RemoveContactsFromGroupResponse createRemoveContactsFromGroupResponse ( ) { return new RemoveContactsFromGroupResponse ( ) ; }
te	KEY	public DrawFestivalCardAction ( ) { }
te	KEY	@ Before public void setUp ( ) { }
te	IDF	@ Test ( expected = InterfaceHasMethodsWithSimilarName . class ) public void registrationFailsIfInterfaceHasOverloadedMethods ( ) { proxyMaker . make ( serviceAddress , ServiceInterfaceWithOverloading . class ) ; }
te	IDF	@ Override public void update ( ) { addBookingObjects ( ) ; inputProcess ( ) ; for ( GameObject go : gameObjects ) { go . update ( ) ; if ( go . canDispose ( ) ) { go . dispose ( ) ; gameObjects . remove ( go ) ; } } }
te	IDF	protected ArrayList < Bomb > getBombs ( ) { ArrayList < Bomb > bombList = new ArrayList < Bomb > ( ) ; for ( Bomb bomb : bombs ) bombList . add ( bomb . clone ( ) ) ; return bombs ; }
te	IDF	public void setCode ( String value ) { this . code = value ; }
te	IDF	@ Override public Node compile ( ) { return new Block ( new Print ( "**" ) , new Block ( new Print ( message ) , new Print ( "**" ) ) ) ; }
te	IDF	private String [ ] makeSysEqn ( int dim , TfDialog tf ) { String [ ] xf = new String [ dim ] ; for ( int i = 0 ; i < dim - 1 ; i ++ ) xf [ i ] = "x" + ( i + 2 ) ; StringBuffer sb = new StringBuffer ( ) ; for ( int i = 0 ; i < dim ; i ++ ) { sb . append ( "-(" + tf . getA ( i ) + ")*x" + ( i + 1 ) ) ; if ( i == dim - 1 ) sb . append ( "+" ) ; } sb . append ( "u1" ) ; xf [ dim - 1 ] = sb . toString ( ) ; return xf ; }
te	KEY	public TestPanel ( ) { super ( ) ; }
te	IDF	public String getOne ( String strTabla , String strCampo , int id ) throws Exception ;
te	KEY	private boolean inRow1 ( int index ) { return ( index < this . getNumSquare ( ) / 2 ) ? true : false ; }
te	KEY	public abstract void visit ( PrintBold printBold ) ;
te	KEY	public void playCatSound ( ) { playSound ( "catSound" ) ; }
te	IDF	@ Override public Vector2D calculate ( double elapsedTime ) { inputVector = inputVector . + ( steering . seek ( parent . getParent ( ) . parent . getMap ( ) . getPlayer ( ) . getPosition ( ) ) ) ; Vector2D returnVector = new Vector2D ( inputVector . x , inputVector . y ) ; inputVector = new Vector2D ( 0 , 0 ) ; return returnVector ; }
te	IDF	@ Before public void initialize ( ) { MockitoAnnotations . initMocks ( this ) ; factory = new EnumerationRunnerFactory ( ) ; }
te	IDF	public void print ( Writer w ) { PrintWriter pw = new PrintWriter ( w ) ; pw . println ( "-" ) ; for ( int row = 0 ; row < height ; row ++ ) { for ( int col = 0 ; col < width ; col ++ ) { pw . print ( getCell ( col , row ) ? "#" : "_" ) ; } pw . println ( ) ; } pw . flush ( ) ; }
te	IDF	public ResultSet executeQuery ( String sql ) throws SQLException { con = DriverManager . getConnection ( DB_URL , USER , PASS ) ; cstmt = con . prepareCall ( sql ) ; ResultSet res = cstmt . executeQuery ( ) ; return res ; }
te	KEY	public void onSendNoServerAddress ( int packetId ) ;
te	IDF	public void bcastPos ( int [ ] playerIDs , String [ ] playerNames , String [ ] playerColors , int [ ] [ ] xSnakePos , int [ ] [ ] ySnakePos , int [ ] score , int [ ] xFood , int [ ] yFood ) ;
te	KEY	public abstract void reset ( ) ;
te	IDF	@ Override public void actionPerformed ( ActionEvent e ) { connect ( ) ; }
te	IDF	public User findUserByKey ( String key ) { return userDAO . findUserByKey ( key ) ; }
te	KEY	public int getCol ( ) { return col ; }
te	IDF	protected boolean sendCommand ( Command command ) { try { serialCom . sendCommand ( getId ( ) , command ) ; return true ; } catch ( SerialPortException e ) { e . printStackTrace ( ) ; return false ; } }
te	IDF	protected double easeInOut ( float time , float start , float diff , float duration ) { time /= duration / 2 ; if ( time < 1 ) return diff / 2 * Math . pow ( 2 , 10 * ( time - 1 ) ) + start ; time -- ; return diff / 2 * ( - Math . pow ( 2 , - 10 * time ) + 2 ) + start ; }
te	KEY	public static String getText ( int d ) { if ( d == SOLVED ) { return "Solved" ; } else if ( d == EASY ) { return "Easy" ; } else if ( d == MEDIUM ) { return "Medium" ; } else if ( d == HARD ) { return "Hard" ; } else if ( d == REQUIRES_GUESSING ) { return "Solvable By Guessing" ; } else if ( d == UNSOLVABLE ) { return "Unsolvable" ; } else { return "Unknown" ; } }
te	KEY	@ BeforeMethod public void setUpMethod ( ) throws Exception { }
te	IDF	@ Override public void stateChanged ( ChangeEvent e ) { Plant . setLifeDegenSpeed ( damageOverTimeRate . getValue ( ) ) ; }
te	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButton3ActionPerformed ( evt ) ; }
te	IDF	protected void initialize ( ) { System . out . println ( "Init Drive " + Timer . getFPGATimestamp ( ) ) ; drive . resetEncoders ( ) ; driveController . loadProfile ( path . getLeftWheelTrajectory ( ) , path . getRightWheelTrajectory ( ) , 1.0 , heading ) ; drive . useController ( driveController ) ; driveController . enable ( ) ; }
te	KEY	public void setStart ( int value ) { this . start = value ; }
te	KEY	public NotInGameException ( ) { super ( "Not in game" ) ; }
te	KEY	public synchronized void xsetArepeatable ( boolean flag ) { isArepeatable = flag ; }
te	IDF	public boolean contains ( E e ) { E node = head ; while ( node != null ) { if ( node == e ) return true ; node = node . getNext ( ) ; } return false ; }
te	IDF	public void act ( ) { setLocation ( x , y ) ; }
te	IDF	@ Override public void updateSucess ( Update update ) { if ( cancelled == true ) { return ; } if ( update == null ) { lblStatus . setIcon ( null ) ; lblStatus . setText ( "An error occurred while checking for new updates." ) ; lblDetails . setText ( "Nothing has been changed. You can close this window." ) ; setDefaultCloseOperation ( JFrame . DISPOSE_ON_CLOSE ) ; progressBar . setIndeterminate ( false ) ; JOptionPane . showMessageDialog ( null , "An error occurred while checking for new updates." , "DynQuiz Updater v1.6" , JOptionPane . ERROR_MESSAGE ) ; return ; } if ( update . getName ( ) . equals ( getCurrent ( ) . getName ( ) ) ) { if ( update . getVersion ( ) . equalsIgnoreCase ( getCurrent ( ) . getVersion ( ) ) ) { lblStatus . setIcon ( null ) ; lblStatus . setText ( "No Update found! You have already the newest version." ) ; lblDetails . setText ( "Nothing has been changed. You can close this window." ) ; setDefaultCloseOperation ( JFrame . DISPOSE_ON_CLOSE ) ; progressBar . setIndeterminate ( false ) ; JOptionPane . showMessageDialog ( null , "No Update found! You have already the newest version." , "DynQuiz Updater v1.6" , JOptionPane . INFORMATION_MESSAGE ) ; return ; } progressBar . setIndeterminate ( false ) ; lblStatus . setText ( "Waiting for user response..." ) ; lblDetails . setText ( "New Update found! Update version: " + update . getVersion ( ) ) ; int result = JOptionPane . showConfirmDialog ( null , "New Update found!\nUpdate version: " + update . getVersion ( ) + "\nYour version: " + getCurrent ( ) . getVersion ( ) + "\n\nDo you want to download the new Update?" , "DynQuiz Updater v1.6" , JOptionPane . YES_NO_CANCEL_OPTION , JOptionPane . QUESTION_MESSAGE ) ; if ( result == JOptionPane . YES_OPTION ) { try { download = new Download ( new URL ( update . getUpdate ( ) ) ) ; new Thread ( new Runnable ( ) { public void run ( ) { lblStatus . setText ( "Downloading update... Please wait." ) ; while ( download . getStatus ( ) == Download . DOWNLOADING ) { progressBar . setValue ( ( int ) download . getProgress ( ) ) ; int downloaded = ( download . getDownloaded ( ) / 1024 ) ; int size = ( download . getSize ( ) / 1024 ) ; lblDetails . setText ( "Downloading file: " + downloaded + "kB /" + size + "kB (" + ( int ) download . getProgress ( ) + "%)" ) ; } if ( download . getStatus ( ) != Download . COMPLETE ) { lblStatus . setIcon ( null ) ; lblStatus . setText ( "Update has been cancelled by user." ) ; lblDetails . setText ( "Nothing has been changed. You can close this window." ) ; setDefaultCloseOperation ( JFrame . DISPOSE_ON_CLOSE ) ; File file = new File ( download . getFileName ( ) ) ; if ( file . exists ( ) ) { file . delete ( ) ; } return ; } System . gc ( ) ; File jar = getJarFile ( ) ; if ( jar . exists ( ) ) { jar . deleteOnExit ( ) ; } lblStatus . setIcon ( null ) ; lblStatus . setText ( "Finished! Update sucessfully downloaded." ) ; lblDetails . setText ( "File sucessfully downloaded!" ) ; setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ) ; progressBar . setValue ( 100 ) ; int result = JOptionPane . showConfirmDialog ( null , "Update sucessfully downloaded!\nTo apply the changes  this program needs to be restarted.\nDo you like to restart this application?" , "DynQuiz Updater v1.6" , JOptionPane . YES_NO_OPTION , JOptionPane . QUESTION_MESSAGE ) ; if ( result == JOptionPane . YES_OPTION ) { try { restartApplication ( new File ( download . getFileName ( ) ) ) ; } catch ( Exception ex ) { System . exit ( 0 ) ; } } } } ) . start ( ) ; } catch ( Exception ex ) { } } else { lblStatus . setIcon ( null ) ; lblStatus . setText ( "Update has been cancelled by user." ) ; lblDetails . setText ( "Nothing has been changed. You can close this window." ) ; setDefaultCloseOperation ( JFrame . DISPOSE_ON_CLOSE ) ; } } }
te	IDF	public static String toJSONString ( Map map ) { if ( map == null ) return "null" ; StringBuffer sb = new StringBuffer ( ) ; boolean first = true ; Iterator iter = map . entrySet ( ) . iterator ( ) ; sb . append ( { ) ; while ( iter . hasNext ( ) ) { if ( first ) first = false ; else sb . append (   ) ; Map . Entry entry = ( Map . Entry ) iter . next ( ) ; toJSONString ( String . valueOf ( entry . getKey ( ) ) , entry . getValue ( ) , sb ) ; } sb . append ( } ) ; return sb . toString ( ) ; }
te	IDF	private static boolean isUnix ( ) { return OS . contains ( "nix" ) || OS . contains ( "nux" ) || OS . indexOf ( "aix" ) > 0 ; }
te	KEY	public void back ( ) throws JSONException { if ( useLastChar || index <= 0 ) { throw new JSONException ( "Stepping back two steps is not supported" ) ; } index -= 1 ; useLastChar = true ; }
te	IDF	private static int zzUnpackAttribute ( String packed , int offset , int [ ] result ) { int i = 0 ; int j = offset ; int l = packed . length ( ) ; while ( i < l ) { int count = packed . charAt ( i ++ ) ; int value = packed . charAt ( i ++ ) ; do result [ j ++ ] = value ; while ( -- count > 0 ) ; } return j ; }
te	IDF	public void setOrientation ( Orientation orientation ) { this . orientation = orientation ; }
te	KEY	public void open ( ) ;
te	KEY	public boolean startedFestival ( ) { return this . startedFestival ; }
te	KEY	public void setColor ( int color ) { this . color = color ; }
te	IDF	public void setupProgress ( ) { _time . setActionCommand ( "tick" ) ; _time . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { if ( e . getActionCommand ( ) . equals ( "tick" ) ) { if ( _filterer . getWorking ( ) ) { _working . setIndeterminate ( true ) ; } else { _working . setIndeterminate ( false ) ; switchUsable ( ) ; _time . stop ( ) ; } } } } ) ; }
te	KEY	public int getHeight ( ) { return height ; }
te	KEY	public Filtro ( ) { }
te	KEY	public ChamadosRecentes ( ) { }
te	KEY	@ Override public boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( obj == this ) { return true ; } if ( ! ( obj instanceof WrappedObject ) ) { return false ; } WrappedObject other = ( WrappedObject ) obj ; return this . hashCode ( ) == other . hashCode ( ) ; }
te	KEY	public void scale ( double x , double y , double z ) ;
te	KEY	public int getMaxNumb ( ) { return maxNumb ; }
te	IDF	@ Override public void putParameter ( ) throws ParsingException { putChar ( Characters . QUESTION ) ; context . setCallerHandler ( this ) ; context . setHandler ( context . extParameterHandler ) ; }
te	IDF	public void onWifiCredsProvided ( String ssid , String username , String passphrase ) ;
te	KEY	public int getId ( ) { return id ; }
te	IDF	public abstract Object visitIntTree ( AST t ) ;
te	KEY	public void initialize ( ) { reset ( ) ; }
te	IDF	public void setPipelineFactory ( ServerPipelineFactory pipelineFactory ) { this . pipelineFactory = pipelineFactory ; }
te	KEY	public void reset ( ) { }
te	IDF	protected static int countDiff ( String anew , String aold ) { int mat = 0 ; for ( int idx = 0 ; idx < anew . length ( ) ; idx ++ ) { char achr = anew . charAt ( idx ) ; for ( int jdx = 0 ; jdx < aold . length ( ) ; jdx ++ ) { char bchr = aold . charAt ( jdx ) ; if ( achr == bchr ) { mat ++ ; break ; } } } return ( anew . length ( ) - mat ) ; }
te	KEY	public int getMpp ( ) { return mpp ; }
te	KEY	public void setEmployeeName ( String nM ) { throw new NullPointerException ( ) ; }
te	IDF	@ JsonProperty ( "label" ) public String getLabel ( ) { return label ; }
te	KEY	public int getMaxRows ( ) { return maxRows ; }
te	KEY	public static final boolean isSamePage ( int addr1 , int addr2 ) { return ( addr1 & FF00 ) == ( addr2 & FF00 ) ; }
te	IDF	public double round ( double value ) { double tio = 10 ; return Math . round ( value * 10 ) / tio ; }
te	KEY	public void setCriticality ( boolean criticality ) { this . criticality = criticality ; }
te	IDF	public double gd ( String p ) { try { if ( params . contains ( p ) ) { return double . parseDouble ( values . get ( params . indexOf ( p ) ) ) ; } else { return 0 ; } } catch ( Exception e ) { return 0 ; } }
te	IDF	public AST getKid ( int i ) { if ( ( i <= 0 ) || ( i > kidCount ( ) ) ) { return null ; } return kids . get ( i - 1 ) ; }
te	IDF	public ASTExpDiv ( ASTExp first , ASTExp second ) { this . first = first ; this . second = second ; }
te	IDF	private boolean [ ] getPlayerGraphics ( int index ) { int iSize = getPlayerSize ( index ) ; boolean [ ] bGraphics = new boolean [ PLAYER_WIDTH * iSize ] ; boolean bReflect = false ; if ( index == 0 ) { bReflect = getBit ( getRegister ( REFP0 ) , 3 ) ; if ( bReflect ) for ( int i = 0 ; i < bGraphics . length ; i ++ ) bGraphics [ i ] = getBit ( getRegister ( GRP0 ) , ( int ) ( i / iSize ) ) ; else for ( int i = 0 ; i < bGraphics . length ; i ++ ) bGraphics [ i ] = getBit ( getRegister ( GRP0 ) , bGraphics . length - 1 - ( int ) ( i / iSize ) ) ; } else if ( index == 1 ) { bReflect = getBit ( getRegister ( REFP1 ) , 3 ) ; if ( bReflect ) for ( int i = 0 ; i < bGraphics . length ; i ++ ) bGraphics [ i ] = getBit ( getRegister ( GRP1 ) , ( int ) ( i / iSize ) ) ; else for ( int i = 0 ; i < bGraphics . length ; i ++ ) bGraphics [ i ] = getBit ( getRegister ( GRP1 ) , bGraphics . length - 1 - ( int ) ( i / iSize ) ) ; } return bGraphics ; }
te	KEY	@ Override public void putParameter ( ) throws ParsingException { throw new UnsupportedCharacterException ( this , Characters . PARAMETER ) ; }
te	KEY	public void setGoal ( double goal ) { this . goal = goal ; }
te	IDF	public void c2pRotateCamera ( double r , double y , double z ) { TransformGroup transCam = u . getViewingPlatform ( ) . getViewPlatformTransform ( ) ; Transform3D oldT3D = new Transform3D ( ) ; transCam . getTransform ( oldT3D ) ; Vector3d rotate = new Vector3d ( ) ; rotate . set ( r , y , z ) ; Transform3D localT3D = new Transform3D ( ) ; localT3D . setEuler ( rotate ) ; Transform3D newT3D = new Transform3D ( ) ; newT3D . mul ( oldT3D , localT3D ) ; transCam . setTransform ( newT3D ) ; }
te	IDF	public InviteRes [ ] findByDynamicSelect ( String sql , Object [ ] sqlParams ) throws InviteResDaoException ;
te	KEY	protected abstract void onZoomChange ( int value ) ;
te	IDF	@ Override public boolean isLessThanOrEqual ( final Angle a ) { IntegerAngle anotherAngle = cast ( a ) ; return angle <= anotherAngle . angle ; }
te	IDF	public static String [ ] getNames ( Object object ) { if ( object == null ) { return null ; } class klass = object . getClass ( ) ; Field [ ] fields = klass . getFields ( ) ; int length = fields . length ; if ( length == 0 ) { return null ; } String [ ] names = new String [ length ] ; for ( int i = 0 ; i < length ; i += 1 ) { names [ i ] = fields [ i ] . getName ( ) ; } return names ; }
te	KEY	public String getName ( ) { return this . name ; }
te	IDF	@ Override public void buttonB ( boolean pressed ) { if ( enabled ) { if ( ses2 != null ) { setFlagsFalse ( ) ; if ( future != null ) { future . cancel ( true ) ; } } if ( pressed == true ) { bFlag = true ; dllProc . dll_keyPressed ( container . xgetCurrentPreset ( ) . xgetBAssignedKeyCode ( ) ) ; if ( container . xgetCurrentPreset ( ) . isBrepetitionEnabled ( ) ) { keyTask = new KeyboardTask ( ) ; future = ses2 . scheduleAtFixedRate ( keyTask , container . xgetCurrentPreset ( ) . xgetBInitialDelay ( ) , container . xgetCurrentPreset ( ) . xgetBRepeatDelay ( ) , TimeUnit . MILLISECONDS ) ; } } else if ( pressed == false ) { bFlag = false ; if ( ses2 != null ) { if ( future != null ) { future . cancel ( true ) ; } } dllProc . dll_keyRealesed ( container . xgetCurrentPreset ( ) . xgetBAssignedKeyCode ( ) ) ; } } else { if ( future != null ) { future . cancel ( true ) ; } dllProc . dll_keyRealesed ( container . xgetCurrentPreset ( ) . xgetBAssignedKeyCode ( ) ) ; } }
te	KEY	public Pamphlet ( ) { this . name = "pamphlet" ; }
te	IDF	private void txtTelefonoActionPerformed ( java . awt . event . ActionEvent evt ) { }
te	IDF	public void activation ( ) { FacesContext fc = FacesContext . getCurrentInstance ( ) ; User user = getAAService ( ) . findUserByKey ( key ) ; if ( user == null ) { ConfigurableNavigationHandler nav = ( ConfigurableNavigationHandler ) fc . getApplication ( ) . getNavigationHandler ( ) ; nav . performNavigation ( "failureActivation" ) ; } else { user . setActivateKey ( null ) ; getAAService ( ) . updateUser ( user ) ; } }
te	IDF	@ Override public int sizeOfTotalExtQueries ( ) { return totalExtQueries + ( tempMainQuery == null ? 0 : tempMainQuery . tempExtQueries . size ( ) ) ; }
te	IDF	public SimpleBenchmark ( Runnable subject , int repetitions ) { this . subject = subject ; this . repetitions = repetitions ; }
te	IDF	public void setModel ( NotebookWeeksNumberPanelModel model ) { this . model = model ; }
te	IDF	@ Override public Value next ( ) { return doSelect ( colIt . next ( ) ) ; }
te	IDF	@ Before public void init ( ) { base0 = new BasePersistable ( ) { private int integer = 100 ; private String string = "Name" ; @ Override public String [ ] getAllAttributesAsString ( ) { return new String [ ] { "" + this . getId ( ) , "" + integer , string } ; } } ; base0 . setId ( 0 ) ; base0 . updateMd5Hash ( ) ; base1 = new BasePersistable ( ) { private int integer = 100 ; private String string = "Name" ; @ Override public String [ ] getAllAttributesAsString ( ) { return new String [ ] { "" + this . getId ( ) , "" + integer , string } ; } } ; base1 . setId ( 0 ) ; base1 . updateMd5Hash ( ) ; }
te	KEY	public void resumeGame ( ) { sendMessage ( "resumeGame" ) ; }
te	IDF	public String resultingJson ( DBObject input ) { ObjectToJSON objectToJSON = new ObjectToJSON ( ) ; String json = ( String ) objectToJSON . convertedJSON ( input ) ; return resultingJson ( json ) ; }
te	KEY	public int get ( int i ) { return edges [ i ] ; }
te	KEY	public static long ceilPot ( long val ) { if ( val <= 0 ) { return 1 ; } return higherPot ( val - 1 ) ; }
te	IDF	public ArrayList < Piece > get_pieces ( ) { return _pieces ; }
te	KEY	public void next ( ) { }
te	KEY	public void setLectureId ( long lectureId ) { this . lectureId = lectureId ; }
te	KEY	public double getHeight ( ) { return 20 ; }
te	KEY	void endSession ( ) ;
te	IDF	< R > IReducingFunction < R , C > apply ( IReducingFunction < R , ? super B > rf ) ;
te	KEY	public final void setYears ( int years ) { this . years = years ; }
te	KEY	public static void main ( String [ ] args ) { }
te	IDF	public static synchronized String intToHex ( int i ) { return Integer . toHexString ( i ) . toUpperCase ( ) ; }
te	KEY	public static SendEmail getInstance ( ) { if ( sendEmail == null ) { sendEmail = new SendEmail ( ) ; } return sendEmail ; }
te	KEY	public void printDescription ( ) { this . printedDescription = true ; return ; }
te	IDF	@ Override public List < Depot > findAll ( ) { List < Depot > list = new ArrayList < Depot > ( ) ; String sql = "SELECT * FROM T_DEPOT" ; Statement statement = null ; ResultSet resultSet = null ; try { statement = connection . createStatement ( ) ; resultSet = statement . executeQuery ( sql ) ; System . out . println ( sql ) ; while ( resultSet . next ( ) ) { Depot found ; found = new Depot ( resultSet . getInt ( "ID" ) , resultSet . getString ( "ADRESSE" ) ) ; list . add ( found ) ; } } catch ( SQLException ex ) { Logger . getLogger ( DepotDAO . class . getName ( ) ) . log ( Level . SEVERE , "find all depots failed" , ex ) ; } finally { try { if ( resultSet != null ) { resultSet . close ( ) ; } if ( statement != null ) { statement . close ( ) ; } } catch ( SQLException ex ) { Logger . getLogger ( DepotDAO . class . getName ( ) ) . log ( Level . SEVERE , "free resourses failed" , ex ) ; } } return list ; }
te	KEY	public void die ( ) { this . alive = false ; }
te	KEY	public void notifyObservers ( final String event ) ;
te	KEY	public int getNumOneRiceTile ( ) { return numOneRiceTile ; }
te	IDF	public String getString ( String key ) { return ( String ) map . get ( key ) ; }
te	IDF	private JPanel createPanel ( ) { JPanel panel = new JPanel ( ) ; panel . add ( new JLabel ( "YOU WIN" ) ) ; return panel ; }
te	IDF	public String [ ] getFoodsTexts ( ) { String [ ] foodText = new String [ foods . size ( ) ] ; int itemCount = 0 ; if ( foods . size ( ) > 0 ) { Iterator < Entry < Character , Food >> iter = foods . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < Character , Food > entry = ( Map . Entry < Character , Food > ) iter . next ( ) ; foodText [ itemCount ] = entry . getKey ( ) + " - " + entry . getValue ( ) . properName ( ) ; itemCount ++ ; } } return foodText ; }
te	KEY	public int getMediumValue ( ) { return mediumValue ; }
te	IDF	@ Override public void draw ( ) { drawBarraVertical ( ) ; janelaDecorada . draw ( ) ; }
te	KEY	public static void main ( String [ ] args ) { new CyclicBarrierCyclicDemo ( 5 ) ; }
te	KEY	public static void setSeedGatheringRate ( int value ) { SEED_GATHERING_RATE = value ; }
te	IDF	public void randomSpawnPoint ( Soldier spawner ) { int index = ( int ) Math . floor ( Math . random ( ) * ( spawnPoints . length - 1 ) + 0.5 ) ; double [ ] vector = spawnPoints [ index ] . clone ( ) ; spawner . setVector ( vector ) ; synchronized ( world . entities ) { for ( Soldier s : soldiers ) { if ( s == spawner ) { continue ; } if ( Box . boundingTest ( s , spawner ) ) { s . takeHp ( 999 , spawner ) ; } } } }
te	KEY	public void end ( ) ;
te	IDF	@ Override public Object visitFloatTypeTree ( AST t ) { throw new UnsupportedOperationException ( "Not supported yet." ) ; }
te	KEY	@ Override public void onConnecting ( ) { }
te	IDF	public CategoryModel addCategory ( CategoryModel category ) throws WebshopAppException { return categoryRepository . addCategory ( category ) ; }
te	KEY	public int getSpeed ( ) { return speed ; }
te	KEY	public RelatedSearchResponse createRelatedSearchResponse ( ) { return new RelatedSearchResponse ( ) ; }
te	IDF	public ArticlesExtractor ( Definitions defs ) { int anz = 0 ; ArrayList < DataField > dfList = new ArrayList < > ( ) ; articles = new Articles ( ) ; System . out . println ( "Artikel werden ausgelesen." ) ; ArrayList < Definition > data = defs . getDefinitions ( ) ; for ( Definition def : data ) { if ( def . getLineTypeID ( ) == 10038 ) { Article art = new Article ( ) ; dfList = def . getDataField ( ) ; for ( DataField df : dfList ) { switch ( df . getDfNumber ( ) ) { case 1 : long number = long . valueOf ( df . getDataValue ( ) ) ; art . setNumber ( number ) ; break ; case 2 : art . setName ( df . getDataValue ( ) ) ; break ; case 3 : if ( df . getDataValue ( ) . length ( ) > 2 ) { art . setDisplay ( df . getDataValue ( ) ) ; } break ; case 7 : Integer wg = Integer . valueOf ( df . getDataValue ( ) ) ; art . setWg ( wg ) ; break ; case 10 : double price1 = double . valueOf ( df . getDataValue ( ) ) ; art . setPriceLevel1 ( price1 ) ; break ; case 11 : double price2 = double . valueOf ( df . getDataValue ( ) ) ; art . setPriceLevel2 ( price2 ) ; break ; case 12 : double price3 = double . valueOf ( df . getDataValue ( ) ) ; art . setPriceLevel3 ( price3 ) ; break ; case 13 : double price4 = double . valueOf ( df . getDataValue ( ) ) ; art . setPriceLevel4 ( price4 ) ; break ; case 14 : double price5 = double . valueOf ( df . getDataValue ( ) ) ; art . setPriceLevel5 ( price5 ) ; break ; case 15 : double price6 = double . valueOf ( df . getDataValue ( ) ) ; art . setPriceLevel6 ( price6 ) ; break ; case 16 : double price7 = double . valueOf ( df . getDataValue ( ) ) ; art . setPriceLevel7 ( price7 ) ; break ; case 17 : double price8 = double . valueOf ( df . getDataValue ( ) ) ; art . setPriceLevel8 ( price8 ) ; break ; case 18 : double price9 = double . valueOf ( df . getDataValue ( ) ) ; art . setPriceLevel9 ( price9 ) ; break ; case 19 : double price10 = double . valueOf ( df . getDataValue ( ) ) ; art . setPriceLevel10 ( price10 ) ; break ; case 301 : articles . addArticle ( art ) ; anz ++ ; break ; } } } } System . out . println ( "Es wurden " + anz + " Artikel exportiert." ) ; }
te	IDF	private void jButton4ActionPerformed ( java . awt . event . ActionEvent evt ) { this . main . hideView ( Main . view . GenreSearch ) ; this . main . showView ( Main . view . MainMenu ) ; }
te	IDF	public ListaExpressao ( Expressao expressao , ListaExpressao listaExpressao ) { super ( expressao , listaExpressao ) ; }
te	KEY	public int get_moveRange ( ) { return _moveRange ; }
te	KEY	public static String [ ] getNames ( ) { return NAMES ; }
te	IDF	@ Override public int getRowsAmount ( ) { if ( this . optionTextFields [ 0 ] . getText ( ) . equals ( "" ) ) return 0 ; return Integer . parseInt ( this . optionTextFields [ 0 ] . getText ( ) ) ; }
te	KEY	public CartItem ( ) { }
te	KEY	@ Override public double fire ( double input ) { return input ; }
te	IDF	@ Override public void itemStateChanged ( ItemEvent e ) { repaint ( ) ; if ( e . getStateChange ( ) == 1 ) { raceChoosen = ( String ) e . getItem ( ) ; if ( raceChoosen . equals ( "Elf" ) ) { vitesseSlider . setMinimum ( 8 ) ; vitesseSlider . setMaximum ( 10 ) ; vitesseSlider . setValue ( 9 ) ; forceSlider . setMinimum ( 1 ) ; forceSlider . setMaximum ( 3 ) ; forceSlider . setValue ( 2 ) ; } else if ( raceChoosen . equals ( "Ogre" ) ) { vitesseSlider . setMinimum ( 1 ) ; vitesseSlider . setMaximum ( 7 ) ; vitesseSlider . setValue ( 4 ) ; forceSlider . setMinimum ( 4 ) ; forceSlider . setMaximum ( 10 ) ; forceSlider . setValue ( 7 ) ; } else { vitesseSlider . setMinimum ( 4 ) ; vitesseSlider . setMaximum ( 10 ) ; vitesseSlider . setValue ( 7 ) ; forceSlider . setMinimum ( 1 ) ; forceSlider . setMaximum ( 7 ) ; forceSlider . setValue ( 4 ) ; } } }
te	IDF	@ Override public K suggest ( ) { return lru . content ; }
te	IDF	public void add ( int value ) { root = add ( root , value ) ; }
te	IDF	public void setDir ( String dir ) { this . dir = dir ; }
te	IDF	public int hashCode ( ) { int _hashCode = 0 ; if ( idFriendsh != null ) { _hashCode = 29 * _hashCode + idFriendsh . hashCode ( ) ; } return _hashCode ; }
te	IDF	public void setMessagesByIduser ( Collection < Message > messagesByIduser ) { this . messagesByIduser = messagesByIduser ; }
te	KEY	public abstract boolean getCell ( int col , int row ) ;
te	KEY	public void setGrossMonthlyHouseholdIncome ( double grossMonthlyHouseholdIncome ) { this . grossMonthlyHouseholdIncome = grossMonthlyHouseholdIncome ; }
te	IDF	private IAuthenticationManager createAuthenticationManager ( ) { return new AuthenticationManager ( managers . messageManager , managers . connectionManager , managers . discoveryManager ) ; }
te	IDF	public Object [ ] executeQueryPopulateArray ( Map < String , ? > values ) throws SQLException { setMap ( values ) ; return executeQueryPopulateArray ( ) ; }
te	IDF	public void setLabel ( String label ) { this . label = label ; }
te	KEY	public void disable ( ) { enabled = false ; }
te	IDF	private void jList1MouseEntered ( java . awt . event . MouseEvent evt ) { }
te	IDF	protected boolean move ( int delta , boolean dryRun ) { if ( delta == 0 ) { return false ; } if ( delta > 6 || delta < 0 ) { System . out . println ( "Cheat attempt" ) ; System . exit ( 0 ) ; } if ( getId ( ) != getStartId ( ) && isStartIdOccupied ( ) ) { GameFigure gameFigure = null ; for ( GameFigure gf : getOwner ( ) . getGameFigures ( ) ) { if ( gf . getId ( ) == getStartId ( ) ) { gameFigure = gf ; break ; } } if ( gameFigure != null && gameFigure . canMove ( delta ) ) { return false ; } } if ( delta == 6 && getId ( ) != IN_HOUSE_ID && ! isStartIdOccupied ( ) ) { for ( GameFigure gf : getOwner ( ) . getGameFigures ( ) ) { if ( gf . getId ( ) == IN_HOUSE_ID ) { return false ; } } } if ( getId ( ) < 0 && delta == 6 ) { if ( ! dryRun ) setId ( getStartId ( ) ) ; return true ; } else if ( getId ( ) >= 0 && getId ( ) < 40 ) { int tmp = ( getId ( ) + delta ) % 40 ; if ( tmp >= getStartId ( ) && ( ( getId ( ) < getStartId ( ) ) || ( getStartId ( ) == 0 && ( getId ( ) + delta ) >= 40 ) ) ) { if ( tmp - getStartId ( ) < 4 ) { tmp = getHomeStartId ( ) + tmp - getStartId ( ) ; if ( isFieldOccupied ( tmp ) ) { return false ; } if ( ! dryRun ) setId ( tmp ) ; return true ; } } else { if ( isFieldOccupied ( tmp ) ) { return false ; } if ( ! dryRun ) setId ( tmp ) ; return true ; } } else if ( getId ( ) >= 40 && getId ( ) + delta < getHomeStartId ( ) + 4 ) { int tmp = getId ( ) + delta ; if ( isFieldOccupied ( tmp ) ) { return false ; } if ( ! dryRun ) setId ( tmp ) ; return true ; } return false ; }
te	KEY	protected void execute ( ) { }
te	KEY	public EvaluerTransporteur ( ) { super ( ) ; }
te	IDF	public long createLinkCodePATHP ( FeatureTemplate . Link temp , long x , long y ) { return ( ( ( ( x << tagNumBits ) | y ) << numLinkFeatBits ) | temp . ordinal ( ) ) << ( auglbNumBits * 2 ) ; }
te	KEY	public void setColumn ( int column ) { this . column = column ; }
te	KEY	public final Location getLocation ( ) { assert _questionLocation != null : "Question location is null" ; return _questionLocation ; }
te	IDF	@ Override public void setNumSquare ( int numSquare ) { super . setNumSquare ( numSquare ) ; sqNumWidth = 4 ; sqNumHeight = 1 ; }
te	KEY	private void exibeDados ( ) { if ( corrente != - 1 ) { exibirDados ( ) ; } }
te	IDF	public JPanel paneAddPlant ( ) { paneAddPlant . setLayout ( new GridBagLayout ( ) ) ; GridBagConstraints addPlantGBC = new GridBagConstraints ( ) ; paneAddPlant . setBorder ( BorderFactory . createMatteBorder ( 1 , 0 , 0 , 0 , Color . BLACK ) ) ; addPlantGBC . gridx = addPlantGBC . gridy = 0 ; paneAddPlant . add ( new JLabel ( "Left Click Action : " ) , addPlantGBC ) ; addPlantGBC . gridy ++ ; paneAddPlant . add ( buttonAddPlants , addPlantGBC ) ; return paneAddPlant ; }
te	KEY	public Texture ( final int target , final int textureID ) { this . target = target ; this . textureID = textureID ; this . isAlphaPremultiplied = true ; }
te	KEY	public void sendDraw ( ) ;
te	IDF	private static boolean isTrue ( int [ ] array ) { int int1 = array [ 0 ] ; int int2 = array [ 0 ] ; for ( int i = 1 ; i < array . length ; i ++ ) { if ( array [ i ] != int1 ) { int2 = array [ i ] ; break ; } } if ( int1 == int2 ) { return false ; } int count1 = 0 ; int count2 = 0 ; for ( int i = 0 ; i < array . length ; i ++ ) { if ( array [ i ] == int1 ) { count1 ++ ; } if ( array [ i ] == int2 ) { count2 ++ ; } } return ( count1 == 2 && count2 == 3 ) || ( count1 == 3 && count2 == 2 ) ; }
te	IDF	public void initComponents ( int size ) { this . width = ( piece . getWidth ( ) * size ) ; this . height = ( piece . getHeight ( ) * size ) + 1 ; this . size = size ; this . clicked = false ; ImageIcon temp ; try { switch ( piece . getColor ( ) ) { case b : temp = new ImageIcon ( getClass ( ) . getResource ( "/images/Blue/" + piece . getType ( ) + ".png" ) ) ; darkImage = temp . getImage ( ) ; temp = new ImageIcon ( getClass ( ) . getResource ( "/images/Blue/" + piece . getType ( ) + "T.png" ) ) ; lightImage = temp . getImage ( ) ; color = Color . BLUE ; break ; case r : temp = new ImageIcon ( getClass ( ) . getResource ( "/images/Red/" + piece . getType ( ) + ".png" ) ) ; darkImage = temp . getImage ( ) ; temp = new ImageIcon ( getClass ( ) . getResource ( "/images/Red/" + piece . getType ( ) + "T.png" ) ) ; lightImage = temp . getImage ( ) ; color = Color . RED ; break ; case y : temp = new ImageIcon ( getClass ( ) . getResource ( "/images/Yellow/" + piece . getType ( ) + ".png" ) ) ; darkImage = temp . getImage ( ) ; temp = new ImageIcon ( getClass ( ) . getResource ( "/images/Yellow/" + piece . getType ( ) + "T.png" ) ) ; lightImage = temp . getImage ( ) ; color = Color . YELLOW ; break ; case g : temp = new ImageIcon ( getClass ( ) . getResource ( "/images/Green/" + piece . getType ( ) + ".png" ) ) ; darkImage = temp . getImage ( ) ; temp = new ImageIcon ( getClass ( ) . getResource ( "/images/Green/" + piece . getType ( ) + "T.png" ) ) ; lightImage = temp . getImage ( ) ; color = Color . GREEN ; break ; } if ( submitButton != null ) { submitButton . setEnabled ( false ) ; } } catch ( Exception ioe ) { ioe . printStackTrace ( ) ; } initDark = darkImage ; initLight = lightImage ; lightImage = lightImage . getScaledInstance ( width , height , Image . SCALE_SMOOTH ) ; darkImage = darkImage . getScaledInstance ( width , height , Image . SCALE_SMOOTH ) ; image = lightImage ; }
te	IDF	public AbstractPanelModel ( Logger logger ) { super ( logger ) ; }
te	IDF	@ Test public void testLose ( ) throws FileNotFoundException { clearCommands ( ) ; addCommand ( "new game" ) ; addCommand ( "go north" ) ; addCommand ( "go north" ) ; addCommand ( "throw lint at merchant" ) ; addCommand ( "quit" ) ; addCommand ( "yes" ) ; System . setIn ( in ) ; Game . main ( null ) ; Scanner sc = new Scanner ( new File ( "testing.txt" ) ) ; ArrayList < String > testOutput = new ArrayList < String > ( ) ; while ( sc . hasNextLine ( ) ) { testOutput . add ( sc . nextLine ( ) ) ; } sc . close ( ) ; assertArrayEquals ( "_____.___.              .____                        " . toCharArray ( ) , testOutput . get ( testOutput . size ( ) - 18 ) . toCharArray ( ) ) ; assertArrayEquals ( "\\__  |   | ____  __ __  |    |    ____  ______ ____  " . toCharArray ( ) , testOutput . get ( testOutput . size ( ) - 17 ) . toCharArray ( ) ) ; assertArrayEquals ( " /   |   |/  _ \\|  |  \\ |    |   /  _ \\/  ___// __ \\ " . toCharArray ( ) , testOutput . get ( testOutput . size ( ) - 16 ) . toCharArray ( ) ) ; assertArrayEquals ( " \\____   (  <_> )  |  / |    |__(  <_> )___ \\\\  ___/ " . toCharArray ( ) , testOutput . get ( testOutput . size ( ) - 15 ) . toCharArray ( ) ) ; assertArrayEquals ( " / ______|\\____/|____/  |_______ \\____/____  >\\___  >" . toCharArray ( ) , testOutput . get ( testOutput . size ( ) - 14 ) . toCharArray ( ) ) ; assertArrayEquals ( " \\/                             \\/         \\/     \\/ " . toCharArray ( ) , testOutput . get ( testOutput . size ( ) - 13 ) . toCharArray ( ) ) ; assertArrayEquals ( "" . toCharArray ( ) , testOutput . get ( testOutput . size ( ) - 12 ) . toCharArray ( ) ) ; assertArrayEquals ( "     ____.     ___.  ___.                                      __           " . toCharArray ( ) , testOutput . get ( testOutput . size ( ) - 11 ) . toCharArray ( ) ) ; assertArrayEquals ( "    |    |____ \\_ |__\\_ |__   _____________  _  ______   ____ |  | _____.__." . toCharArray ( ) , testOutput . get ( testOutput . size ( ) - 10 ) . toCharArray ( ) ) ; assertArrayEquals ( "    |    \\__  \\ | __ \\| __ \\_/ __ \\_  __ \\ \\/ \\/ /  _ \\_/ ___\\|  |/ <   |  |" . toCharArray ( ) , testOutput . get ( testOutput . size ( ) - 9 ) . toCharArray ( ) ) ; assertArrayEquals ( "/\\__|    |/ __ \\| \\_\\ \\ \\_\\ \\  ___/|  | \\/\\     (  <_> )  \\___|    < \\___  |" . toCharArray ( ) , testOutput . get ( testOutput . size ( ) - 8 ) . toCharArray ( ) ) ; assertArrayEquals ( "\\________(____  /___  /___  /\\___  >__|    \\/\\_/ \\____/ \\___  >__|_ \\/ ____|" . toCharArray ( ) , testOutput . get ( testOutput . size ( ) - 7 ) . toCharArray ( ) ) ; assertArrayEquals ( "              \\/    \\/    \\/     \\/                         \\/     \\/\\/     " . toCharArray ( ) , testOutput . get ( testOutput . size ( ) - 6 ) . toCharArray ( ) ) ; assertArrayEquals ( "Type:" . toCharArray ( ) , testOutput . get ( testOutput . size ( ) - 5 ) . toCharArray ( ) ) ; assertArrayEquals ( "\"new game\" to start new game" . toCharArray ( ) , testOutput . get ( testOutput . size ( ) - 4 ) . toCharArray ( ) ) ; assertArrayEquals ( "\"quit\" to quit" . toCharArray ( ) , testOutput . get ( testOutput . size ( ) - 3 ) . toCharArray ( ) ) ; assertArrayEquals ( ">> Are you sure you want to quit? (y/n)" . toCharArray ( ) , testOutput . get ( testOutput . size ( ) - 2 ) . toCharArray ( ) ) ; assertArrayEquals ( ">> " . toCharArray ( ) , testOutput . get ( testOutput . size ( ) - 1 ) . toCharArray ( ) ) ; }
te	KEY	public void run ( ) { new IfHighScores ( ) . setVisible ( true ) ; }
te	IDF	private TIPPSection sectionWithFiles ( TIPPSectionType type , String ... names ) { SectionBuilder b = new SectionBuilder ( type ) ; for ( String name : names ) { b . addFile ( name ) ; } return b . build ( ) ; }
te	KEY	public boolean getStaffConsent ( ) { return staffConsent ; }
te	IDF	@ Override public void removeUpdate ( DocumentEvent arg0 ) { changedUpdate ( arg0 ) ; }
te	KEY	public void rotateX ( double radians ) ;
te	KEY	public boolean hasNext ( ) { return ftmIter . hasNext ( ) ; }
te	KEY	public int getEndValue ( ) { return this . end . value ; }
te	IDF	public void setCoreCommands ( CoreCommands coreCommands ) { this . coreCommands = coreCommands ; }
te	KEY	public int getIdOrden ( ) { return idOrden ; }
te	KEY	@ Override public long getNativeConsumer ( ) { return 0 ; }
te	KEY	public RemoveGroups createRemoveGroups ( ) { return new RemoveGroups ( ) ; }
te	IDF	@ Override protected void onAction ( HashMap < String , String > params ) { if ( connection != null ) { connection . close ( ) ; } interrupt ( ) ; }
te	IDF	@ Override public Topic getTopic ( String name ) { return this . topics . get ( name ) ; }
te	KEY	public boolean isEnabled ( ) { return enabled ; }
te	KEY	public int hashCode ( ) { return new HashCodeBuilder ( 206116827 , - 753321887 ) . append ( this . name ) . toHashCode ( ) ; }
te	IDF	private void jBSairActionPerformed ( java . awt . event . ActionEvent evt ) { System . exit ( 0 ) ; }
te	KEY	public abstract String get_image ( ) ;
te	IDF	public static Vector < String > getValidProxyIPs ( Vector < String > allIPs ) throws ClientProtocolException , IOException { System . out . println ( "********start getting valid proxy IPs********" ) ; Vector < String > validHostWithPort = new Vector < String > ( ) ; int validIPNum = 0 ; for ( int i = 0 ; i < allIPs . size ( ) ; i ++ ) { String ip = allIPs . get ( i ) ; String hostWithPort = "null" ; String hostName = ip . split ( ":" ) [ 0 ] ; String portString = ip . split ( ":" ) [ 1 ] ; int port = Integer . parseInt ( portString ) ; String varifyURL = "http://iframe.ip138.com/ic.asp" ; String html = new HTML ( ) . getHTMLbyProxy ( varifyURL , hostName , port ) ; int iReconn = 0 ; int reConnectTimes = 2 ; while ( html . equals ( "null" ) ) { if ( iReconn == ( reConnectTimes - 1 ) ) { System . out . println ( reConnectTimes + " \u6B21\u94FE\u63A5\u8D85\u65F6\uFF0C\u653E\u5F03\u6B21IP" ) ; break ; } System . out . println ( "****\u91CD\u65B0\u94FE\u63A5****" ) ; html = new HTML ( ) . getHTMLbyProxy ( varifyURL , hostName , port ) ; iReconn ++ ; } Pattern p = Pattern . compile ( "\\d{1 3}\\.\\d{1 3}\\.\\d{1 3}\\.\\d{1 3}" ) ; Matcher m = p . matcher ( html ) ; if ( m . find ( ) ) { Document doc = Jsoup . parse ( html ) ; Element ele = doc . select ( "center" ) . first ( ) ; String showIP = ele . text ( ) ; System . out . println ( showIP ) ; String s = m . group ( ) ; hostWithPort = s + ":" + portString ; if ( ! validHostWithPort . contains ( hostWithPort ) ) { validHostWithPort . add ( hostWithPort ) ; validIPNum ++ ; System . out . println ( "valid proxy IP " + hostWithPort ) ; } else { System . out . println ( "No." + ( i + 1 ) + " IP " + hostWithPort + "have been saved." ) ; } } else { System . out . println ( "No." + ( i + 1 ) + " IP is invalid." ) ; } System . out . println ( "NO." + ( i + 1 ) + " ip" + ip + " be verified" ) ; } System . out . println ( "total number of valid IPs " + validIPNum ) ; return validHostWithPort ; }
te	KEY	public int getSwitchedPower ( ) { return switchedPower ; }
te	KEY	public Building getCopy ( ) { return new TubeBuilding ( this . start , this . lenght , this . floor ) ; }
te	IDF	private void drawBottomLine ( int row , int col ) { int boxX = cellSize + col * cellSize ; int startX = boxX - cellSize ; int boxY = cellSize + row * cellSize ; output . drawLine ( startX , boxY , boxX , boxY ) ; }
te	KEY	int getHeight ( ) { return ( int ) this . getBounds2D ( ) . getHeight ( ) ; }
te	IDF	@ Override public boolean hasSameContent ( InteractionEvent obj ) { if ( obj == null || ! ( obj instanceof HitEvent ) ) { return false ; } HitEvent that = ( HitEvent ) obj ; return this . getBaseNumber ( ) == that . getBaseNumber ( ) && this . getMultiplier ( ) == that . getMultiplier ( ) && this . isOuterRing ( ) == that . isOuterRing ( ) ; }
te	KEY	public AddGroup createAddGroup ( ) { return new AddGroup ( ) ; }
te	IDF	public Elt next ( ) { Object elt ; if ( inode == null ) throw new NoSuchElementException ( ) ; else if ( ! ( inode . subtree instanceof Node ) ) elt = ( ( Object [ ] ) inode . subtree ) [ inode . index ] ; else { Node node = ( Node ) inode . subtree ; if ( node . element instanceof EquivalentSet ) { ArrayList < Object > al = ( ( EquivalentSet ) node . element ) . contents ; elt = al . get ( inode . index - 1 ) ; } else elt = node . element ; } inode . index ++ ; canonicalize ( ) ; return ( Elt ) elt ; }
te	KEY	public void turnOffBluetooth ( ) ;
te	IDF	public void setPassword ( String password ) { this . password = password ; }
te	IDF	public static void testLockMethod ( ) { MethodLockObj lockObj = new MethodLockObj ( ) ; new MethodServiceThread ( lockObj ) . start ( ) ; new MethodServiceThread ( lockObj ) . start ( ) ; }
te	IDF	@ Override public void shutdown ( ) { executorService . shutdownNow ( ) ; }
te	IDF	public SendEmailToOtherException ( String e ) { errorMsg = e ; }
te	KEY	protected boolean isFinished ( ) { return true ; }
te	IDF	public String lerAcaoJogador ( Jogador jogador ) { return pedir ( "Entre com a jogada (vez do jogador: " + jogador . getNome ( ) + "):" ) ; }
te	KEY	public boolean hasPlaceLandTile ( ) { return hasPlacedLandTile ; }
te	IDF	public void endLittleRecord ( ) { if ( littleRecording ) { littleRecording = false ; endLittleTime = 2982 - levelScene . timeLeft ; totalLittleTime += endLittleTime - startLittleTime ; System . out . println ( "LITTLE END: " + endLittleTime ) ; System . out . println ( "TOTAL LITTLE END: " + totalLittleTime ) ; System . out . println ( "LITTLE END: " + endLittleTime ) ; detailedLog += "LittleState: StTime = " + startLittleTime + " EdTime = " + endLittleTime ; detailedLog += "\n" ; } }
te	IDF	@ Override public boolean insertTask ( Task newTask ) { boolean inserted = false ; if ( newTask != null && tasks . indexOf ( newTask ) < 0 ) { tasks . add ( newTask ) ; inserted = true ; } return inserted ; }
te	IDF	void regionChangedTo ( String character , String region ) ;
te	KEY	private PuzzleConvertor ( ) { }
te	KEY	public static void shutDown ( ) { Services . closeDataAccess ( ) ; }
te	KEY	public double getTotalPower ( ) { return totalPower ; }
te	IDF	public ReadOnlyArray < String > getColumns ( ) { return columns ; }
te	KEY	public int getId ( ) { return id ; }
te	KEY	@ Override public abstract void modelPropertyChange ( final PropertyChangeEvent evt ) ;
te	KEY	public int getValue ( ) { return val ; }
te	KEY	public void incrememntTwo ( ) { numTwoTile ++ ; }
te	KEY	public boolean isEmpty ( ) { return tree == null ; }
te	KEY	public int getCACertNum ( ) { return 0 ; }
te	KEY	public void testApp ( ) { assertTrue ( true ) ; }
te	IDF	public static float signum ( final float a ) { return ( a < 0.0f ) ? - 1.0f : ( ( a > 0.0f ) ? 1.0f : a ) ; }
te	KEY	public void setMaxSpeed ( double maxSpeed ) { this . maxSpeed = maxSpeed ; }
te	KEY	public void openStatistic ( ) ;
te	IDF	public Heap ( int B [ ] ) { A = new int [ B . length ] ; System . arraycopy ( B , 0 , A , 0 , B . length ) ; n = A . length ; for ( int i = n / 2 - 1 ; i >= 0 ; i -- ) { Heapify ( i ) ; } }
te	IDF	@ Override public boolean equals ( Object other ) { if ( other == this ) { return true ; } if ( other instanceof FilmModel ) { FilmModel otherBook = ( FilmModel ) other ; boolean isSameClass = this . getClass ( ) . equals ( otherBook . getClass ( ) ) ; return ( this . getTitle ( ) . equals ( otherBook . getTitle ( ) ) ) && this . getDirector ( ) . equals ( otherBook . getDirector ( ) ) && isSameClass ; } return false ; }
te	IDF	public void setLectureService ( LectureService lectureService ) { this . lectureService = lectureService ; }
te	IDF	public List < Seminar > getSeminarList ( ) { return seminarService . loadAllSeminars ( ) ; }
te	IDF	public Object start ( IApplicationContext context ) throws Exception { Display display = PlatformUI . createDisplay ( ) ; try { int returnCode = PlatformUI . createAndRunWorkbench ( display , new ApplicationWorkbenchAdvisor ( ) ) ; if ( returnCode == PlatformUI . RETURN_RESTART ) return IApplication . EXIT_RESTART ; else return IApplication . EXIT_OK ; } finally { display . dispose ( ) ; } }
te	KEY	public float getHeight ( ) { return anim . getImage ( ) . getHeight ( null ) ; }
te	IDF	public void actionPerformed ( java . awt . event . ActionEvent evt ) { jMenuOpenStatisticActionPerformed ( evt ) ; }
te	KEY	@ Override protected Builder2 self ( ) { return this ; }
te	KEY	public AttackPattern ( ) { super ( ) ; }
te	IDF	public void mouseClicked ( java . awt . event . MouseEvent evt ) { MenuMedicamentosMouseClicked ( evt ) ; }
te	KEY	public abstract boolean pressArrow ( int xChange , int yChange ) ;
te	IDF	Texture getTexture ( ) ;
te	IDF	public String generateFormalExpressionToFile ( int scope ) throws FileNotFoundException , UnsupportedEncodingException { String result = generateFormalExpression ( scope ) ; CommandPanel . logger . fine ( result ) ; String output = "" ; if ( this . getType ( ) == InfoEnum . ModelCategory . REQUIREMENT . name ( ) ) { output = InfoEnum . current_directory + "/dlv/models/req_" + this . getLayer ( ) . toLowerCase ( ) + "_model.dl" ; } else { output = InfoEnum . current_directory + "/dlv/models/other_model.dl" ; } PrintWriter writer = new PrintWriter ( output , "UTF-8" ) ; writer . println ( result ) ; writer . close ( ) ; return output + " " ; }
te	KEY	public Filterer ( ) { }
te	IDF	public static String transform ( Element xml ) { try { TransformerFactory transFactory = TransformerFactory . newInstance ( ) ; Transformer transformer = transFactory . newTransformer ( ) ; StringWriter buffer = new StringWriter ( ) ; transformer . setOutputProperty ( OutputKeys . OMIT_XML_DECLARATION , "yes" ) ; transformer . transform ( new DOMSource ( xml ) , new StreamResult ( buffer ) ) ; String str = buffer . toString ( ) ; return str ; } catch ( Exception e ) { } return "" ; }
