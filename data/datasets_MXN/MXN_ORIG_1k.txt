tr	1	public void drawPoint ( Vertex vertex ) { init ( ) ; double x = vertex . getPoint ( ) . getX ( ) * SCALE_X ; double y = vertex . getPoint ( ) . getY ( ) * SCALE_Y ; Ellipse2D el = new Ellipse2D . double ( x - pointSize / 2. , y - pointSize / 2. , pointSize , pointSize ) ; ensureHasSize ( el . getBounds2D ( ) ) ; Graphics2D g = getGraphicsObject ( ) ; g . setStroke ( new BasicStroke ( ( float ) penSize ) ) ; g . setColor ( penColor ) ; g . setColor ( pointFill ) ; g . fill ( el ) ; g . setColor ( pointBorder ) ; g . draw ( el ) ; if ( showVertexNumbers ) g . drawString ( "" + vertex . getVertexIndex ( ) , ( float ) x - 5 , ( float ) y + 5 ) ; repaint ( ) ; }
tr	3	public void onSessionStatusChanged ( O2GSessionStatusCode status ) { System . out . println ( "Status: " + status . toString ( ) ) ; switch ( status ) { case TRADING_SESSION_REQUESTED : if ( mSessionID . isEmpty ( ) ) { System . out . println ( "Argument for trading session ID is missing" ) ; } else { mSession . setTradingSession ( mSessionID , mPin ) ; } break ; case CONNECTED : mConnected = true ; mDisconnected = false ; mSemaphore . release ( ) ; break ; case DISCONNECTED : mConnected = false ; mDisconnected = true ; mSemaphore . release ( ) ; break ; } }
tr	3	public void tradeElGamal ( boolean first ) { { p = new BigInteger ( "4988735951183711405443349413015910122453507015594895638933838601555750189585703700647655985269637551634513770201277370413860951650702374379627998821919409" ) ; BigInteger g = new BigInteger ( "4403105895869798297264918950735787070665047406714785361037216842427722734684061748868589917485012596281820467352001338223691996653533143166890875549812531" ) ; BigInteger y = new BigInteger ( "3670294064109445804998782973709772470002041046377612489028768098078250713079795031354099562309432613560558383306865142781216201315104971340333690591679721" ) ; BigInteger x = new BigInteger ( "4589946301809196862611751989088793376762175950291076147544077975213763218505486754450017554342955014202444667772016113058406939298289857995054770609176615" ) ; elGamalC_own = new ElGamalCipher ( p , g , y , x ) ; elGamalS_own = new ElGamalSignature ( p , g , y , x ) ; } if ( first ) { com . sendTo ( 1 , p . toString ( 16 ) ) ; com . sendTo ( 1 , elGamalC_own . g . toString ( 16 ) ) ; com . sendTo ( 1 , elGamalC_own . y . toString ( 16 ) ) ; { BigInteger p = new BigInteger ( com . receive ( ) , 16 ) ; BigInteger g = new BigInteger ( com . receive ( ) , 16 ) ; BigInteger y = new BigInteger ( com . receive ( ) , 16 ) ; elGamalC_other = new ElGamalCipher ( p , g , y ) ; elGamalS_other = new ElGamalSignature ( p , g , y ) ; } } else { { BigInteger p = new BigInteger ( com . receive ( ) , 16 ) ; BigInteger g = new BigInteger ( com . receive ( ) , 16 ) ; BigInteger y = new BigInteger ( com . receive ( ) , 16 ) ; elGamalC_other = new ElGamalCipher ( p , g , y ) ; elGamalS_other = new ElGamalSignature ( p , g , y ) ; } com . sendTo ( 0 , p . toString ( 16 ) ) ; com . sendTo ( 0 , elGamalC_own . g . toString ( 16 ) ) ; com . sendTo ( 0 , elGamalC_own . y . toString ( 16 ) ) ; } }
tr	1	@ Override public int getColumnAmount ( ) { if ( this . optionTextFields [ 1 ] . getText ( ) . equals ( "" ) ) return 0 ; return Integer . parseInt ( this . optionTextFields [ 1 ] . getText ( ) ) ; }
tr	4	private DefaultTreeModel getGroups ( ) { DefaultMutableTreeNode root = new DefaultMutableTreeNode ( Constants . STR_GROUP ) ; String userNo = String . valueOf ( user . get ( Constants . USER_NO ) ) ; List < Map < String , Object >> groupList = userDao . getGroup ( userNo ) ; for ( int i = 0 , len = groupList . size ( ) ; i < len ; ++ i ) { Map < String , Object > group = groupList . get ( i ) ; DefaultMutableTreeNode child = new DefaultMutableTreeNode ( String . valueOf ( group . get ( Constants . GROUP_NAME ) ) ) ; Map < String , Object > param = new HashMap < String , Object > ( ) ; param . put ( Constants . USER_NO , String . valueOf ( group . get ( Constants . USER_NO ) ) ) ; param . put ( Constants . GROUP_NO , String . valueOf ( group . get ( Constants . GROUP_NO ) ) ) ; List < Map < String , Object >> friendList = userDao . getFriend ( param ) ; if ( Constants . NUM_ZERO != friendList . size ( ) ) { for ( int j = 0 , size = friendList . size ( ) ; j < size ; ++ j ) { Map < String , Object > friend = friendList . get ( j ) ; String friendNo = String . valueOf ( friend . get ( Constants . FRIEND_NO ) ) ; StringBuilder sb = new StringBuilder ( ) ; sb . append ( userDao . getUserInfo ( friendNo ) ) ; sb . append ( "(" ) ; sb . append ( friendNo ) ; sb . append ( ")" ) ; sb . append ( "  <" ) ; int status = userDao . getStatus ( friendNo ) ; sb . append ( userStatus . getItemAt ( status ) . toString ( ) ) ; sb . append ( ">" ) ; DefaultMutableTreeNode childschild = new DefaultMutableTreeNode ( sb . toString ( ) ) ; child . add ( childschild ) ; } } root . add ( child ) ; } return new DefaultTreeModel ( root ) ; }
tr	1	@ Override public MessageType getMessageType ( ) { return MessageType . EXITCHATROOM ; }
tr	2	protected void execute ( ) { if ( shooter . left . getD ( ) - accuracy > pos ) { shooter . set ( - holdVel ) ; } else if ( shooter . left . getD ( ) + accuracy < pos ) { shooter . set ( holdVel ) ; } else { shooter . set ( 0.0 ) ; } }
tr	1	@ XmlElementDecl ( namespace = "" , name = "xRequest" ) public JAXBElement < BigInteger > createXRequest ( BigInteger value ) { return new JAXBElement < BigInteger > ( _XRequest_QNAME , BigInteger . class , null , value ) ; }
tr	1	public InternManImpl ( UserStore userStore ) { this . users = new UserManagementImpl ( ) ; this . adverts = new AdvertManagementImpl ( ) ; }
tr	1	public void setId ( Integer id ) { this . id = id ; }
tr	3	protected boolean attack ( Interactable target ) { if ( target != null && ! ( target instanceof CardinalDirection ) ) { System . out . println ( "You swing your " + this . name + " at the " + target . name + "." ) ; if ( ! target . damage ( this ) ) { System . out . println ( "Your attack bounces off and does nothing." ) ; } return true ; } else { System . out . println ( "You swing your " + this . name + " wildy around." ) ; return true ; } }
tr	1	public void start ( ) { this . setPlayingOrder ( player1 , player2 ) ; this . board . clearTheBoard ( ) ; this . setStatus ( Game . NEW_GAME ) ; }
tr	1	public void windowDeiconified ( WindowEvent e ) { }
tr	2	public void executar ( AmbienteExecucao ambiente ) { try { comando . executar ( ambiente ) ; } catch ( IdentificadorJaDeclaradoException | IdentificadorNaoDeclaradoException e ) { e . printStackTrace ( ) ; } }
tr	4	int pack ( Buffer opb ) { byte [ ] temp = "Xiphophorus libVorbis I 20000508" . getBytes ( ) ; opb . write ( 03 , 8 ) ; opb . write ( _vorbis ) ; opb . write ( temp . length , 32 ) ; opb . write ( temp ) ; opb . write ( comments , 32 ) ; if ( comments != 0 ) { for ( int i = 0 ; i < comments ; i ++ ) { if ( user_comments [ i ] != null ) { opb . write ( comment_lengths [ i ] , 32 ) ; opb . write ( user_comments [ i ] ) ; } else { opb . write ( 0 , 32 ) ; } } } opb . write ( 1 , 1 ) ; return ( 0 ) ; }
tr	3	public void modifyCourse ( ClassInfo classInfo ) { ClassInfo cInfoData = getCourse ( classInfo . getClassNumber ( ) ) ; if ( cInfoData != null ) { if ( ! classInfo . getCourseName ( ) . equalsIgnoreCase ( cInfoData . getCourseName ( ) ) ) { Course crs = new Course ( ) ; crs . setCourseID ( classInfo . getCourseNumber ( ) ) ; crs . setCourseName ( classInfo . getCourseName ( ) ) ; saveDataModify ( crs ) ; } if ( ! classInfo . getCourseSection ( ) . equalsIgnoreCase ( cInfoData . getCourseSection ( ) ) ) { SchoolClass cls = new SchoolClass ( ) ; cls . setClassNumber ( classInfo . getClassNumber ( ) ) ; cls . setClassSection ( classInfo . getCourseSection ( ) ) ; saveDataModify ( cls ) ; } } }
tr	2	public static void main ( String [ ] args ) { System . out . println ( "Main menu" ) ; System . out . println ( "1. Add" ) ; System . out . println ( "2. Subtract" ) ; System . out . println ( "3. Multiply" ) ; System . out . println ( "4. Divide" ) ; System . out . print ( "Press 1  2  3 or 4 >>> " ) ; Scanner scan = new Scanner ( System . in ) ; int key = scan . nextInt ( ) ; System . out . print ( "enter first number >>> " ) ; float a = scan . nextFloat ( ) ; System . out . print ( "enter second number >>> " ) ; float b = scan . nextFloat ( ) ; switch ( key ) { case 1 : System . out . println ( "result of " + a + " + " + b + " = " + ( a + b ) ) ; break ; case 2 : System . out . println ( "result of " + a + " - " + b + " = " + ( a - b ) ) ; break ; case 3 : System . out . println ( "result of " + a + " * " + b + " = " + ( a * b ) ) ; break ; case 4 : Zero_Devide zeroDevide = new Zero_Devide ( ) ; zeroDevide . isDevideByZero ( a , b ) ; break ; default : System . out . println ( "Unknown Operator !!!" ) ; } System . out . println ( "Good bye !!!" ) ; }
tr	5X	public void run ( ) throws ParsingException { parseStack . push ( new TerminalEntry ( EOF ) ) ; parseStack . addToParseStack ( ruleTable . find ( startSymbol , startToken ) ) ; A = parseStack . peek ( ) ; getNextToken ( ) ; while ( ( A != null ) && ! A . isEof ( ) ) { A = parseStack . peek ( ) ; if ( A . isTerminal ( ) ) { if ( A . matches ( i ) ) { parseStack . pop ( ) ; if ( parseStack . notEmpty ( ) ) { A = parseStack . peek ( ) ; getNextToken ( ) ; } } else { throw new ParsingException ( "Terminal mismatch. Expected: " + A + " Found: " + i + "" ) ; } } else if ( A . isSemanticEntry ( ) ) { final SemanticNode node = nodeFactory . getNewNode ( A ) ; node . runOnSemanticStack ( semanticStack ) ; parseStack . pop ( ) ; } else { if ( isRuleContained ( A , i ) ) { parseStack . pop ( ) ; parseStack . addToParseStack ( ruleTable . find ( A , i ) ) ; A = parseStack . peek ( ) ; } else { throw new ParsingException ( "Non-terminal mismatch. No entry in the table for: " + A + "   " + i ) ; } } } if ( ! stream . isEmpty ( ) ) { throw new ParsingException ( "Parser found the end of file marker but the token stream was not empty." ) ; } }
tr	2	public void closeWriter ( ) { try { this . writer . flush ( ) ; this . writer . close ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }
tr	4	private static float [ ] [ ] genPerlinNoise ( final float [ ] [ ] baseNoise , final int octaveCount ) { final float [ ] [ ] [ ] smoothNoise = new float [ octaveCount ] [ ] [ ] ; for ( int index = 0 ; index < octaveCount ; index ++ ) { smoothNoise [ index ] = genSmoothNoise ( baseNoise , index ) ; } final int width = baseNoise . length ; final int height = baseNoise [ 0 ] . length ; final float persistance = 0.5f ; final float [ ] [ ] perlinNoise = new float [ width ] [ height ] ; float amplitude = 1 ; float totalAmplitude = 0 ; for ( int octave = octaveCount - 1 ; octave >= 0 ; octave -- ) { amplitude *= persistance ; totalAmplitude += amplitude ; for ( int x = 0 ; x < width ; x ++ ) { for ( int y = 0 ; y < height ; y ++ ) { perlinNoise [ x ] [ y ] += smoothNoise [ octave ] [ x ] [ y ] * amplitude ; } } } for ( int x = 0 ; x < width ; x ++ ) { for ( int y = 0 ; y < height ; y ++ ) { perlinNoise [ x ] [ y ] /= totalAmplitude ; } } return perlinNoise ; }
tr	1	@ Override public IGameController getController ( ) { return controller ; }
tr	1	@ Override public T evaluate ( T x , T y , T z ) throws AbstractException { T resFirst = first . evaluate ( x , y , z ) ; T resSecond = second . evaluate ( x , y , z ) ; return resFirst . sum ( resSecond ) ; }
tr	5X	@ Override public String execute ( HttpServletRequest request , HttpServletResponse response ) throws Exception { String data ; try { ArrayList < FilterBean > alFilter = new ArrayList < > ( ) ; if ( request . getParameter ( "filter" ) != null ) { if ( request . getParameter ( "filteroperator" ) != null ) { if ( request . getParameter ( "filtervalue" ) != null ) { FilterBean oFilterBean = new FilterBean ( ) ; oFilterBean . setFilter ( request . getParameter ( "filter" ) ) ; oFilterBean . setFilterOperator ( request . getParameter ( "filteroperator" ) ) ; oFilterBean . setFilterValue ( request . getParameter ( "filtervalue" ) ) ; oFilterBean . setFilterOrigin ( "user" ) ; alFilter . add ( oFilterBean ) ; } } } if ( request . getParameter ( "systemfilter" ) != null ) { if ( request . getParameter ( "systemfilteroperator" ) != null ) { if ( request . getParameter ( "systemfiltervalue" ) != null ) { FilterBean oFilterBean = new FilterBean ( ) ; oFilterBean . setFilter ( request . getParameter ( "systemfilter" ) ) ; oFilterBean . setFilterOperator ( request . getParameter ( "systemfilteroperator" ) ) ; oFilterBean . setFilterValue ( request . getParameter ( "systemfiltervalue" ) ) ; oFilterBean . setFilterOrigin ( "system" ) ; alFilter . add ( oFilterBean ) ; } } } RecompensaDao oRecompensaDAO = new RecompensaDao ( Conexion . getConection ( ) ) ; int pages = oRecompensaDAO . getCount ( alFilter ) ; data = "{\"data\":\"" + Integer . toString ( pages ) + "\"}" ; return data ; } catch ( Exception e ) { throw new ServletException ( "RecompensaGetregistersJson: View Error: " + e . getMessage ( ) ) ; } }
tr	1	@ Override public TileEntity getTileEntity ( Tile parent ) { return new TileDoorEntity ( parent ) ; }
tr	2	public static void main ( String [ ] args ) { int numbers [ ] = { 1 , 2 , 3 , 5 , 8 , 13 } ; System . out . println ( "First member of this array is " + numbers [ 0 ] ) ; System . out . println ( "Last member of this array is " + numbers [ numbers . length - 1 ] ) ; }
tr	2	public void awaitTermination ( ) { try { latch . await ( ) ; } catch ( InterruptedException e ) { String message = "awaitTermination() method was interrupted!" ; throw new UnsupportedOperationException ( message , e ) ; } }
tr	1	public JPasswordField getPassword ( ) { return password ; }
tr	1	public static ServiceFactory getInstance ( ) { if ( instance == null ) instance = new ServiceFactory ( ) ; return instance ; }
tr	1	public String getReturn ( ) { return _return ; }
tr	2	private static void loadConfig ( ) { VMConfiguration . config = new VMConfiguration ( ) ; InputStream conf_file ; try { conf_file = new FileInputStream ( new File ( CONF_FILE ) ) ; Properties props = new Properties ( ) ; props . load ( conf_file ) ; config . weightNumber = Integer . parseInt ( props . getProperty ( Constants . WEIGHT_NUMBER ) ) ; config . learnFileName = props . getProperty ( Constants . LEARN_FILE_NAME ) ; config . topologyModelType = props . getProperty ( Constants . TOPOLOGY_MODEL ) ; config . rows = Integer . parseInt ( props . getProperty ( Constants . ROWS ) ) ; config . cols = Integer . parseInt ( props . getProperty ( Constants . COLS ) ) ; config . radius = Integer . parseInt ( props . getProperty ( Constants . RADIUS ) ) ; config . numberofWeights = Integer . parseInt ( props . getProperty ( Constants . NUMBER_OF_WEIGHTS ) ) ; config . maxWeight = Integer . parseInt ( props . getProperty ( Constants . MAX_WEIGHT ) ) ; config . maxIteration = Integer . parseInt ( props . getProperty ( Constants . MAX_ITERATION ) ) ; config . trainMetricType = props . getProperty ( Constants . TRAIN_METRIC_TYPE ) ; config . predictMetricType = props . getProperty ( Constants . PREDICT_METRIC_TYPE ) ; config . learningFactor = Integer . parseInt ( props . getProperty ( Constants . LEARN_FACTOR ) ) ; config . neighbourFactor = double . parseDouble ( props . getProperty ( Constants . NEIGHBOUR_FACTOR ) ) ; config . kFoldValue = Integer . parseInt ( props . getProperty ( Constants . K_FOLD_VALUE ) ) ; config . delimiter = props . getProperty ( Constants . DELIMITER ) ; config . pythonFileLocation = props . getProperty ( Constants . PYTHON_FILE ) ; config . normalizedFileName = props . getProperty ( Constants . NORMALIZED_FILE ) ; config . normalNeurons = Integer . parseInt ( props . getProperty ( Constants . NORMAL_NEURONS ) ) ; config . predictDataFile = props . getProperty ( Constants . PREDICT_DATA_FILE ) ; config . lookAheadSize = Integer . parseInt ( props . getProperty ( Constants . LOOK_AHEAD_SIZE ) ) ; config . predictAheadStep = Integer . parseInt ( props . getProperty ( Constants . PREDICT_AHEAD_STEP ) ) ; config . gaussianHeight = Integer . parseInt ( props . getProperty ( Constants . GAUSSIAN_HEIGHT ) ) ; config . mem_log_file = props . getProperty ( Constants . MEM_LOG_FILE ) ; config . metric_log_file = props . getProperty ( Constants . METRIC_LOG_FILE ) ; config . train_mem_log_file = props . getProperty ( Constants . TRAIN_MEM_LOG_FILE ) ; config . train_metric_log_file = props . getProperty ( Constants . TRAIN_METRIC_LOG_FILE ) ; config . dotest = Integer . parseInt ( props . getProperty ( Constants . DO_TEST ) ) ; config . vm_name = props . getProperty ( Constants . VM_NAME ) ; config . predictFile = props . getProperty ( Constants . PREDICT_FILE ) ; config . annotateFile = props . getProperty ( Constants . ANN_FILE ) ; config . faultInterval = Integer . parseInt ( props . getProperty ( Constants . FAULT ) ) ; } catch ( FileNotFoundException e ) { logger . error ( "Error while opening configuration file" ) ; } catch ( IOException e ) { logger . error ( "Error while loading configuration file" ) ; } }
tr	1	public void setBankSwiftNo ( String bankSwiftNo ) { this . bankSwiftNo = bankSwiftNo ; }
tr	3	private void addFriend ( long l ) { try { if ( l == 0 ) return ; if ( friendsCount >= 100 && anInt1046 != 1 ) { pushMessage ( "Your friendlist is full. Max of 100 for free users  and 200 for members" , 0 , "" ) ; return ; } if ( friendsCount >= 200 ) { pushMessage ( "Your friendlist is full. Max of 100 for free users  and 200 for members" , 0 , "" ) ; return ; } String s = TextClass . fixName ( TextClass . nameForLong ( l ) ) ; for ( int i = 0 ; i < friendsCount ; i ++ ) if ( friendsListAsLongs [ i ] == l ) { pushMessage ( s + " is already on your friend list" , 0 , "" ) ; return ; } for ( int j = 0 ; j < ignoreCount ; j ++ ) if ( ignoreListAsLongs [ j ] == l ) { pushMessage ( "Please remove " + s + " from your ignore list first" , 0 , "" ) ; return ; } if ( s . equals ( myPlayer . name ) ) { return ; } else { friendsList [ friendsCount ] = s ; friendsListAsLongs [ friendsCount ] = l ; friendsNodeIDs [ friendsCount ] = 0 ; friendsCount ++ ; needDrawTabArea = true ; outStream1 . createFrame ( 188 ) ; outStream1 . writeQWord ( l ) ; return ; } } catch ( RuntimeException runtimeexception ) { signlink . reporterror ( "15283  " + ( byte ) 68 + "  " + l + "  " + runtimeexception . toString ( ) ) ; } throw new RuntimeException ( ) ; }
tr	1	public Shader build ( ) { String vsh = _vsh . build ( ) ; String fsh = _fsh . build ( ) ; int vID = createShader ( GL20 . GL_VERTEX_SHADER , vsh ) ; int fID = createShader ( GL20 . GL_FRAGMENT_SHADER , fsh ) ; int pID = linkShader ( vID , fID ) ; return new Shader ( pID , _manager ) ; }
tr	3	public static void main ( String [ ] args ) { Conn con = PoolManager . getInstance ( ) . getConnection ( ) ; Connection conn = con . getConn ( ) ; Statement stmt = null ; ResultSet rs = null ; try { stmt = conn . createStatement ( ) ; rs = stmt . executeQuery ( "select * from article " ) ; int c = rs . getMetaData ( ) . getColumnCount ( ) ; for ( int i = 1 ; i <= c ; ++ i ) { System . out . println ( rs . getMetaData ( ) . getColumnName ( i ) ) ; } while ( rs . next ( ) ) { System . out . print ( rs . getString ( "title" ) ) ; System . out . print ( rs . getString ( "author" ) ) ; System . out . println ( ) ; } } catch ( SQLException e ) { e . printStackTrace ( ) ; } finally { try { stmt . close ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } PoolManager . getInstance ( ) . releaseConnection ( con ) ; } }
tr	1	public static BasicRelation getEquivalenceRelation ( ) { BasicRelation rel = new BasicRelation ( "=" ) ; return rel ; }
tr	2	@ Override public void close ( final String guiName ) { if ( ! guiThreads . get ( guiName ) . isAlive ( ) ) { return ; } running = false ; try { guiThreads . get ( guiName ) . join ( ) ; } catch ( Exception e ) { GameLog . warn ( e ) ; } }
tr	2	public void saveLang ( ) { try { lang . save ( langFile ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }
tr	1	public int intensity_stereo_bound ( ) { return h_intensity_stereo_bound ; }
tr	5X	public void onCreate ( ) throws SQLException { setDefaultCloseOperation ( javax . swing . WindowConstants . HIDE_ON_CLOSE ) ; if ( level != 1 ) { jPanel1 . setEnabled ( false ) ; jButton2 . setEnabled ( false ) ; jButton3 . setEnabled ( false ) ; jButton4 . setEnabled ( false ) ; jButton6 . setEnabled ( false ) ; } double catNumeber = DbUtil . loadCategories ( ) . length ; int rows = ( int ) Math . ceil ( catNumeber / 5 ) ; jPanel2 . setLayout ( new GridLayout ( rows , 5 , 4 , 4 ) ) ; jPanel3 . setVisible ( false ) ; String array [ ] [ ] = DbUtil . loadCategories ( ) ; for ( int i = 0 ; i < catNumeber ; i ++ ) { final JButton btn = new JButton ( String . valueOf ( array [ i ] [ 1 ] ) ) ; JPanel buttonPane = new JPanel ( ) ; btn . setName ( String . valueOf ( array [ i ] [ 0 ] ) ) ; btn . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent ae2 ) { jPanel2 . setVisible ( false ) ; JPanel itemPane = new JPanel ( ) ; itemPane . setLayout ( new GridLayout ( 5 , 5 , 5 , 5 ) ) ; itemPane . setVisible ( true ) ; try { loadItems ( btn . getName ( ) ) ; } catch ( SQLException ex ) { Logger . getLogger ( Sales . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; } } } ) ; buttonPane . add ( btn ) ; jPanel2 . add ( buttonPane ) ; } add ( jPanel2 ) ; pack ( ) ; setVisible ( true ) ; }
tr	5X	private boolean placeRandomTeleportLocation ( int [ ] [ ] map , int [ ] randomlocation ) { if ( map == null ) throw new IllegalArgumentException ( "Invalid argument: map is null" ) ; if ( map [ 0 ] == null ) throw new IllegalArgumentException ( "Invalid argument: a row is null" ) ; if ( randomlocation . length != 2 ) throw new IllegalArgumentException ( "Invalid argument: the randomlocation array-holder is not of length 2" ) ; ArrayList < int [ ] > availableLocations = new ArrayList < > ( ) ; for ( int i = 0 ; i < map . length ; i ++ ) { for ( int j = 0 ; j < map [ 0 ] . length ; j ++ ) { if ( map [ i ] [ j ] == 0 ) { availableLocations . add ( new int [ ] { i , j } ) ; } } } if ( availableLocations . size ( ) == 0 ) { java . lang . System . out . println ( "Warning: You have a teleporter in a map with no spaces" ) ; return false ; } Random random = new Random ( ) ; random . setSeed ( java . lang . System . currentTimeMillis ( ) ) ; int index = random . nextInt ( availableLocations . size ( ) ) ; int [ ] chosen = availableLocations . get ( index ) ; randomlocation [ 0 ] = chosen [ 0 ] ; randomlocation [ 1 ] = chosen [ 1 ] ; return true ; }
tr	3	@ Override public void dispose ( ) { for ( ObjectMap < String , Object > entry : data . values ( ) ) { for ( Object resource : entry . values ( ) ) { if ( resource instanceof Disposable ) ( ( Disposable ) resource ) . dispose ( ) ; } } }
tr	5X	public static void main ( String [ ] args ) { JFrame frame = new JFrame ( ) ; frame . setSize ( 1500 , 1000 ) ; frame . setLocationRelativeTo ( null ) ; frame . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ) ; frame . setVisible ( true ) ; final TaskmgrGraph graph = new TaskmgrGraph ( new TaskmgrColors ( ) ) ; new Thread ( "Memory thread" ) { @ Override public void run ( ) { while ( true ) { Runtime rt = Runtime . getRuntime ( ) ; long current = ( rt . totalMemory ( ) - rt . freeMemory ( ) ) / 1024 / 1024 ; long max = rt . totalMemory ( ) / 1024 / 1024 ; int % = ( int ) ( ( ( float ) current / ( float ) max ) * 100 ) ; graph . setMaximum ( ( int ) max ) ; graph . addValue ( ( int ) current ) ; graph . setText ( current + " mb" ) ; System . out . println ( "Current usage: " + current + "  Maximum usage: " + max + "  Percent: " + % ) ; try { Thread . sleep ( 1000 ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } } } ; new Thread ( "Random thread" ) { @ Override public void run ( ) { while ( true ) { graph . setMaximum ( 10000 ) ; int value = new Random ( ) . nextInt ( 10000 ) ; graph . addValue ( value ) ; graph . setText ( value + "" ) ; try { Thread . sleep ( 1000 ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } } } . start ( ) ; frame . add ( graph ) ; }
tr	4	private int compareInputStreams ( InputStream encfsIs , InputStream decFsIs , String decodedFsFileName ) throws IOException { int bytesRead = 0 ; int bytesRead2 ; while ( bytesRead >= 0 ) { byte [ ] readBuf = new byte [ 128 ] ; byte [ ] readBuf2 = new byte [ 128 ] ; bytesRead = encfsIs . read ( readBuf ) ; bytesRead2 = decFsIs . read ( readBuf2 ) ; if ( bytesRead != bytesRead2 ) { logger . error ( "File bytes read missmatch {} ({}  {})" , new Object [ ] { decodedFsFileName , bytesRead , bytesRead2 } ) ; return - 1 ; } if ( ! Arrays . equals ( readBuf , readBuf2 ) ) { logger . error ( "File bytes missmatch {}" , decodedFsFileName ) ; return - 1 ; } } return 0 ; }
tr	1	public OlogClientBuilder withExecutor ( ExecutorService executor ) { this . executor = executor ; return this ; }
tr	3	@ Override public boolean hasNext ( ) { while ( index < menu . size ( ) ) { if ( menu . get ( index ) . getCalories ( ) <= maxCalories ) { return true ; } else { index ++ ; } } return false ; }
tr	5X	public void DesativaCampos ( ) { for ( Component c : tela . getjPFicha ( ) . getComponents ( ) ) { if ( c instanceof JComboBox ) { ( ( JComboBox ) c ) . setEnabled ( false ) ; } if ( c instanceof JCheckBox ) { ( ( JCheckBox ) c ) . setEnabled ( false ) ; } if ( c instanceof JTextField ) { ( ( JTextField ) c ) . setEnabled ( false ) ; } if ( c instanceof JDateChooser ) { ( ( JDateChooser ) c ) . setEnabled ( false ) ; } if ( c instanceof JScrollPane ) { for ( Component co : ( ( JScrollPane ) c ) . getComponents ( ) ) { if ( co instanceof JViewport ) { for ( Component com : ( ( JViewport ) co ) . getComponents ( ) ) { if ( com instanceof JTextArea ) { ( ( JTextArea ) com ) . setEnabled ( false ) ; } } } } } } }
tr	3	public boolean isCallableReference ( class clazz ) { if ( this == globalBridge ) { return false ; } if ( ! referencesEnabled ) { return false ; } if ( callableReferenceSet . contains ( clazz ) ) { return true ; } class [ ] interfaces = clazz . getInterfaces ( ) ; for ( int i = 0 ; i < interfaces . length ; i ++ ) { if ( callableReferenceSet . contains ( interfaces [ i ] ) ) { return true ; } } class superClass = clazz . getSuperclass ( ) ; while ( superClass != null ) { if ( callableReferenceSet . contains ( superClass ) ) { return true ; } superClass = superClass . getSuperclass ( ) ; } return globalBridge . isCallableReference ( clazz ) ; }
tr	5X	private void generatePressureFile ( ) { File file = new File ( this . pressFile ) ; ArrayList < Edge > edges = modelo . getEdges ( ) ; try { BufferedWriter output = new BufferedWriter ( new FileWriter ( file ) ) ; for ( Edge e : edges ) { String line ; int i = 1 ; for ( int vec : e . getFlowUnitVector ( ) ) { if ( vec != 0 ) { line = e . getNumber ( ) + " " + i + " " + vec + "\n" ; output . write ( line ) ; } i ++ ; } } output . close ( ) ; } catch ( IOException ex ) { Logger . getLogger ( Model . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; } }
tr	3	ArrayList < Object [ ] > getPickerArgs ( ) { ArrayList < Object [ ] > pickerArgs = new ArrayList < Object [ ] > ( ) ; if ( this . pickers > 0 ) { Pickers pickers = this . warehouse . getPickers ( ) ; ArrayList < Picker > rl = pickers . getPickerList ( ) ; for ( Picker r : rl ) { Object [ ] args = new Object [ 1 ] ; args [ 0 ] = r . getUID ( ) ; pickerArgs . add ( args ) ; } } return pickerArgs ; }
tr	4	public void startRepairGUI ( ) { EventQueue . invokeLater ( new Runnable ( ) { public void run ( ) { try { frame = new RepairGUI ( ) ; frame . setVisible ( true ) ; result = query . query ( nameTBL , 1 , nameID ) ; maxID = query . getLastID ( nameTBL , nameID ) ; insertValues ( result ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } } ) ; }
tr	5X	public void mouseDragged ( MouseEvent e ) { if ( isCtrlDown ( e ) || ( ! editMode && ! ctx . dragging ) ) { if ( panCurr != null ) { Point pt = new Point ( e . getX ( ) , e . getY ( ) ) ; if ( e . getComponent ( ) != null ) { SwingUtilities . convertPointToScreen ( pt , e . getComponent ( ) ) ; } int deltaX = pt . x - panCurr . x ; int deltaY = pt . y - panCurr . y ; prevPanCurr = panCurr ; panCurr = new PointAtTime ( pt . x , pt . y ) ; ctx . getScrollPane ( ) . getHorizontalScrollBar ( ) . setValue ( - deltaX + ctx . getScrollPane ( ) . getHorizontalScrollBar ( ) . getValue ( ) ) ; ctx . getScrollPane ( ) . getVerticalScrollBar ( ) . setValue ( - deltaY + ctx . getScrollPane ( ) . getVerticalScrollBar ( ) . getValue ( ) ) ; } } else { if ( ctx . dragging || ctx . rubberBanding ) { ctx . dragCurr = new Point ( e . getX ( ) , e . getY ( ) ) ; if ( ctx . rubberBanding ) { Point startP = ctx . getXY ( ctx . dragStart . x , ctx . dragStart . y ) ; Point endP = ctx . getXY ( ctx . dragCurr . x , ctx . dragCurr . y ) ; int temp ; if ( startP . x > endP . x ) { temp = startP . x ; startP . x = endP . x ; endP . x = temp ; } if ( startP . y > endP . y ) { temp = startP . y ; startP . y = endP . y ; endP . y = temp ; } ctx . clearSelection ( ) ; for ( CoverDetails cd : ctx . covers ) { if ( cd . getX ( ) >= startP . x && cd . getX ( ) <= endP . x && cd . getY ( ) >= startP . y && cd . getY ( ) <= endP . y ) { ctx . addSelection ( cd ) ; } } } ctx . mainRepaint ( ) ; } } }
tr	5X	public static Map < String , boolean > getAllChildren ( final String node , final Set < String > playerPermArray ) { final LinkedList < String > stack = new LinkedList < String > ( ) ; final Map < String , boolean > alreadyVisited = new HashMap < String , boolean > ( ) ; stack . push ( node ) ; alreadyVisited . put ( node , true ) ; while ( ! stack . isEmpty ( ) ) { final String now = stack . pop ( ) ; final Map < String , boolean > children = AdminPerms . getChildren ( now ) ; if ( children != null && ! playerPermArray . contains ( "-" + now ) ) { for ( final String childName : children . keySet ( ) ) { if ( ! alreadyVisited . containsKey ( childName ) ) { stack . push ( childName ) ; alreadyVisited . put ( childName , children . get ( childName ) ) ; } } } } alreadyVisited . remove ( node ) ; if ( ! alreadyVisited . isEmpty ( ) ) { return alreadyVisited ; } return null ; }
tr	4	private Element findNext ( ) { if ( next == null ) { while ( i < length ) { Node node = elements . item ( i ++ ) ; if ( node . getNodeType ( ) == Node . ELEMENT_NODE ) { next = ( Element ) node ; break ; } } } return next ; }
tr	1	public void setUpvote ( boolean upvote ) { this . upvote = upvote ; }
tr	3	@ Override public void handleEvent ( IParserEvent event ) { if ( event . getType ( ) == ParserEventType . DOCUMENT_END_EVENT ) { flushEvents ( ) ; event . fire ( listener ) ; } else { IParserEvent lastEvent = events . peekLast ( ) ; if ( lastEvent != null && lastEvent . getType ( ) == ParserEventType . STRING_EVENT && event . getType ( ) == ParserEventType . STRING_EVENT ) { event = mergeStringEvents ( ( StringEvent ) event ) ; } events . add ( event ) ; if ( events . size ( ) > MAX_EVENTS ) { events . removeFirst ( ) . fire ( listener ) ; } } }
tr	5X	public void setCurrentVar ( int idx ) { assert ( idx >= - 1 && idx < PaneData . var_measures . size ( ) ) ; if ( this . idx == idx ) return ; setVisible ( false ) ; this . removeAll ( ) ; this . idx = idx ; if ( idx == - 1 ) { log . severe ( "Filter Pane - Variable unselected." ) ; setVisible ( true ) ; applyFilter ( ) ; return ; } strMeasure = ( String ) PaneData . var_measures . get ( idx ) ; strType = ( String ) PaneData . var_types . get ( idx ) ; log . severe ( "Filter Pane - [" + PaneData . var_names . get ( idx ) + "] is selected." ) ; if ( strType . equals ( "S" ) && strMeasure . equals ( "O" ) ) { assert ( PaneData . values_min . get ( idx ) instanceof Integer ) ; assert ( PaneData . values_max . get ( idx ) instanceof Integer ) ; int min = ( ( Integer ) PaneData . values_min . get ( idx ) ) . intValue ( ) ; int max = ( ( Integer ) PaneData . values_max . get ( idx ) ) . intValue ( ) ; setLayout ( new BoxLayout ( this , BoxLayout . Y_AXIS ) ) ; checkboxList = new JCheckBox [ max - min + 1 ] ; for ( int i = 0 ; i <= max - min ; i ++ ) { DataLabel label = ( DataLabel ) PaneData . var_labels . get ( idx ) ; checkboxList [ i ] = new JCheckBox ( label . get ( min + i ) ) ; checkboxList [ i ] . setSelected ( true ) ; checkboxList [ i ] . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { JCheckBox c = ( JCheckBox ) e . getSource ( ) ; PaneFilterSelect pfs = ( PaneFilterSelect ) ( c . getParent ( ) ) ; pfs . applyFilter ( ) ; String s = "" ; for ( int i = 0 ; i < pfs . checkboxList . length ; i ++ ) { s = s + "[" + pfs . checkboxList [ i ] . getText ( ) + "] " + pfs . checkboxList [ i ] . isSelected ( ) ; if ( i < pfs . checkboxList . length - 1 ) s = s + "  " ; } log . severe ( "Filter Pane: Filter setting [" + PaneData . var_names . get ( pfs . idx ) + "] chagned to " + s ) ; } } ) ; add ( checkboxList [ i ] ) ; repaint ( ) ; } } else if ( strMeasure . equals ( "Q" ) ) { Object min , max ; if ( strType . equals ( "I" ) ) { min = ( Integer ) PaneData . values_min . get ( idx ) ; max = ( Integer ) PaneData . values_max . get ( idx ) ; doubleSlider = new DoubleSlider ( DoubleSlider . HORIZONTAL , ( ( Integer ) min ) . doubleValue ( ) , ( ( Integer ) max ) . doubleValue ( ) ) ; } else if ( strType . equals ( "D" ) ) { min = ( double ) PaneData . values_min . get ( idx ) ; max = ( double ) PaneData . values_max . get ( idx ) ; doubleSlider = new DoubleSlider ( DoubleSlider . HORIZONTAL , ( ( double ) min ) . doubleValue ( ) , ( ( double ) max ) . doubleValue ( ) ) ; } else { assert false ; min = new Integer ( 0 ) ; max = new Integer ( 0 ) ; } setLayout ( new GridBagLayout ( ) ) ; GridBagConstraints constraints = new GridBagConstraints ( ) ; constraints . fill = GridBagConstraints . BOTH ; lblList = new JLabel [ 2 ] ; lblList [ 0 ] = new JLabel ( min . toString ( ) ) ; lblList [ 0 ] . setHorizontalAlignment ( JLabel . LEFT ) ; lblList [ 1 ] = new JLabel ( max . toString ( ) ) ; lblList [ 1 ] . setHorizontalAlignment ( JLabel . RIGHT ) ; doubleSlider . addAdjustmentListener ( new DoubleSliderAdjustmentListener ( ) { public void adjustmentValueChanged ( DoubleSlider slider ) { PaneFilterSelect pfs = ( PaneFilterSelect ) ( slider . getParent ( ) ) ; pfs . applyFilter ( ) ; double selMin = slider . getSelectedMinimum ( ) ; double selMax = slider . getSelectedMaximum ( ) ; log . severe ( "Filter Pane - The filter for [" + PaneData . var_names . get ( pfs . idx ) + "]is changed to [" + selMin + "  " + selMax + "]" ) ; } } ) ; constraints . weightx = 0.1 ; constraints . weighty = 1 ; constraints . gridx = 0 ; constraints . gridy = 0 ; add ( lblList [ 0 ] , constraints ) ; constraints . weightx = 0.8 ; constraints . weighty = 1 ; constraints . gridx = 1 ; constraints . gridy = 0 ; add ( doubleSlider , constraints ) ; constraints . weightx = 0.1 ; constraints . weighty = 1 ; constraints . gridx = 2 ; constraints . gridy = 0 ; add ( lblList [ 1 ] , constraints ) ; } else assert false ; this . setVisible ( true ) ; }
tr	2	private int insert ( final BeanMissatge bean ) { String SQL1 = "INSERT INTO sig_missatgeria (idEntrevista destinatari idMateria materia actitud notes feina comentaris dataContestat idMensajeProfesor) " + " VALUES(? ? ? ? ? ? ? ? ? ?)" ; Object [ ] objs = new Object [ ] { bean . idEntrevista , bean . destinatari_abrev , bean . idMateria , bean . materia , bean . actitud , bean . notes , bean . feina , bean . comentari , bean . dataContestat , bean . idMensajeProfesor } ; int nup = client . getMysql ( ) . preparedUpdateID ( SQL1 , objs ) ; if ( nup > 0 ) { bean . setId ( nup ) ; } return nup ; }
tr	1	public void actionPerformed ( ActionEvent event ) { Main . newSet ( ) ; }
tr	1	public AddOrigen ( java . awt . Frame parent , boolean modal ) { super ( parent , modal ) ; initComponents ( ) ; }
tr	3	public int getPieceCount ( DraughtsState gs ) { int [ ] pieces = gs . getPieces ( ) ; int count = 0 ; for ( int f = 1 ; f < pieces . length ; f = f + 1 ) { int piece = pieces [ f ] ; if ( Draughts . isWhite ( piece ) || Draughts . isBlack ( piece ) ) { count ++ ; } } return count ; }
tr	3	public ActionListener buildExitActionListener ( ) { return new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { System . exit ( 0 ) ; } } ; }
tr	1	@ Override public String getVarName ( ) { return this . name ; }
tr	4	public void updateLocation ( int id , List < Object > list ) { if ( ! handler_location . initialize ( ) ) { System . out . println ( "LocationServer : failed to initialize location handler!" ) ; return ; } int result = 0 , min_rssi = 1000 ; for ( int i = 0 ; i < list . size ( ) ; i += 2 ) { String mac = ( String ) list . get ( i ) ; LocationNode node = handler_location . getLocationNode ( mac ) ; if ( node != null ) { int rssi = ( int ) list . get ( i + 1 ) - node . rssi ; if ( rssi < min_rssi ) { min_rssi = rssi ; result = node . area ; } } } if ( result != 0 ) { handler_location . updateLocation ( id , result ) ; } handler_location . close ( ) ; }
tr	4	public RegularAnalyzer ( List < Rule > rules ) { Set < String > definedRuleNames = new HashSet < String > ( ) ; List < Rule > observedRules = new ArrayList < Rule > ( ) ; observedRules . addAll ( rules ) ; boolean foundRegular ; do { foundRegular = false ; for ( int index = observedRules . size ( ) - 1 ; index >= 0 ; index -- ) { Set < String > dependent = observedRules . get ( index ) . getElements ( ) . getDependentRuleNames ( ) ; if ( definedRuleNames . containsAll ( dependent ) ) { definedRuleNames . add ( observedRules . get ( index ) . getRuleName ( ) . toString ( ) ) ; regularRules . add ( observedRules . get ( index ) ) ; observedRules . remove ( index ) ; foundRegular = true ; continue ; } } } while ( foundRegular ) ; observedRules . clear ( ) ; }
tr	5X	private void addContent ( ) { ScheduleDAO sdao = new ScheduleDAO ( db . connection ) ; for ( String day : StaticRes . WEEK_DAY_LIST ) { List < Schedule > list = sdao . getScheduleByDayList ( day ) ; TableModel model = new ScheduleTableModel ( list ) ; table = new JTable ( model ) ; table . setSelectionMode ( ListSelectionModel . SINGLE_SELECTION ) ; table . getColumnModel ( ) . getColumn ( 0 ) . setPreferredWidth ( 100 ) ; table . getColumnModel ( ) . getColumn ( 1 ) . setPreferredWidth ( 17 ) ; table . setRowHeight ( 20 ) ; table . addMouseListener ( new java . awt . event . MouseAdapter ( ) { @ Override public void mouseClicked ( java . awt . event . MouseEvent evt ) { if ( evt . getClickCount ( ) == 2 && evt . getButton ( ) == MouseEvent . BUTTON1 ) { int row = ( ( JTable ) evt . getSource ( ) ) . rowAtPoint ( evt . getPoint ( ) ) ; ; if ( row >= 0 ) { Schedule schedule = ( Schedule ) ( ( JTable ) evt . getSource ( ) ) . getValueAt ( row , - 1 ) ; Teacher teacher = ( Teacher ) cbTeacher . getSelectedItem ( ) ; submit ( schedule , teacher ) ; } } } } ) ; tabbedPane . addTab ( day , new JScrollPane ( table ) ) ; } }
tr	1	@ Override public PLType getType ( ) { return PLType . PLNull ; }
tr	3	private String getKey ( String keyword ) { Set < String > set = nTimesGivenDay . keySet ( ) ; Iterator < String > iter = set . iterator ( ) ; while ( iter . hasNext ( ) ) { String key = iter . next ( ) ; if ( key . contains ( keyword ) ) { return key ; } } return new String ( ) ; }
tr	3	public void plotElements ( view3D view ) { for ( int pass = 0 ; pass < 2 ; pass ++ ) { DArray list = ( pass == 0 ) ? vertices : elements ; for ( int i = 0 ; i < list . size ( ) ; i ++ ) { Renderable e = ( Renderable ) ( list . get ( i ) ) ; if ( e . deleted ( ) || ! e . visible ( ) ) continue ; e . transform ( view , viewVert , panelVert ) ; } } }
tr	5X	private List < String > generaCacheKey ( Object obj ) { ORMTable ormTable = obj . getClass ( ) . getAnnotation ( ORMTable . class ) ; if ( ormTable != null ) { String cachedTableKey = "" . equalsIgnoreCase ( ormTable . cachedShortAlias ( ) ) ? ormTable . tableName ( ) : ormTable . cachedShortAlias ( ) ; String [ ] cachedKeys = ormTable . cachedKey ( ) ; if ( cachedKeys . length > 0 ) { List < String > ks = new ArrayList < String > ( ) ; for ( int i = 0 ; i < cachedKeys . length ; i ++ ) { String cachedCol = cachedKeys [ i ] ; String [ ] fk = cachedCol . split ( "=" ) ; try { Field f = obj . getClass ( ) . getDeclaredField ( fk [ 0 ] ) ; f . setAccessible ( true ) ; ks . add ( cachedTableKey + "." + fk [ 1 ] + "." + f . get ( obj ) ) ; } catch ( NoSuchFieldException e ) { logger . warn ( "NoSuchFieldException:{};" , cachedCol , e ) ; continue ; } catch ( SecurityException e ) { logger . warn ( "SecurityException:{};" , cachedCol , e ) ; continue ; } catch ( IllegalArgumentException e ) { logger . warn ( "Get field value fail:{};" , cachedCol , e ) ; continue ; } catch ( IllegalAccessException e ) { logger . warn ( "Get field value fail:{};" , cachedCol , e ) ; continue ; } } return ks ; } else { return null ; } } else { return null ; } }
tr	5X	public MidiFile ( File file ) throws InvalidMidiDataException , IOException { this . tracks = new ArrayList < MidiTrack > ( ) ; Sequence sequence = MidiSystem . getSequence ( file ) ; resolution = sequence . getResolution ( ) ; int trackNo = 0 ; for ( Track track : sequence . getTracks ( ) ) { heldNotes . clear ( ) ; trackNo += 1 ; MidiTrack t = new MidiTrack ( trackNo ) ; for ( int i = 0 ; i < track . size ( ) ; i ++ ) { MidiEvent event = track . get ( i ) ; int time = ( int ) event . getTick ( ) ; MidiMessage message = event . getMessage ( ) ; if ( message instanceof ShortMessage ) { ShortMessage shortMessage = ( ShortMessage ) message ; if ( shortMessage . getCommand ( ) == ShortMessage . NOTE_ON ) { noteOn ( t , shortMessage , time - 16 ) ; } else if ( shortMessage . getCommand ( ) == ShortMessage . NOTE_OFF ) { noteOff ( t , shortMessage , time - 16 ) ; } } else if ( message instanceof MetaMessage ) { MetaMessage metaMessage = ( MetaMessage ) message ; if ( metaMessage . getType ( ) == 3 ) { String trackName = new String ( metaMessage . getData ( ) , "ascii" ) ; if ( trackName . length ( ) > 0 ) { t . setName ( trackName ) ; } } else if ( metaMessage . getType ( ) == 58 ) { byte [ ] data = metaMessage . getData ( ) ; this . timeSignature = new TimeSignature ( data [ 0 ] , 1 << data [ 1 ] ) ; } } } if ( t . hasNotes ( ) ) { tracks . add ( t ) ; } } }
tr	4	public Command getCmdFromIdent ( String ident , CommandSender sender ) { if ( this . identifiers . get ( ident . toLowerCase ( ) ) == null ) { for ( Command cmd : this . commands . values ( ) ) { if ( cmd . isIdentifier ( sender , ident ) ) { return cmd ; } } } return ( Command ) this . identifiers . get ( ident . toLowerCase ( ) ) ; }
tr	3	public ArrayList < Tile > getAdjacentTiles ( Tile tile ) { ArrayList < Tile > adjacentTiles = new ArrayList < Tile > ( ) ; for ( Direction direction : Direction . values ( ) ) { Tile nextTile = getTile ( tile . getGridX ( ) + direction . getXOffset ( ) , tile . getGridY ( ) + direction . getYOffset ( ) ) ; if ( nextTile != null ) { adjacentTiles . add ( nextTile ) ; } } return adjacentTiles ; }
tr	3	public synchronized void delete ( ) { if ( swigCPtr != 0 ) { if ( swigCMemOwn ) { swigCMemOwn = false ; otapiJNI . delete_BitcoinAcct ( swigCPtr ) ; } swigCPtr = 0 ; } super . delete ( ) ; }
tr	3	public static DummyKVStorable [ ] merge ( DummyKVStorable [ ] ... arrays ) { int size = 0 ; for ( DummyKVStorable [ ] A : arrays ) size += A . length ; DummyKVStorable [ ] all = new DummyKVStorable [ size ] ; int k = 0 ; for ( DummyKVStorable [ ] A : arrays ) { for ( DummyKVStorable d : A ) { all [ k ++ ] = d ; } } return all ; }
tr	5X	public static String rowToString ( JSONArray ja ) { StringBuffer sb = new StringBuffer ( ) ; for ( int i = 0 ; i < ja . length ( ) ; i += 1 ) { if ( i > 0 ) { sb . append (   ) ; } Object object = ja . opt ( i ) ; if ( object != null ) { String string = object . toString ( ) ; if ( string . length ( ) > 0 && ( string . indexOf (   ) >= 0 || string . indexOf (  ) >= 0 || string . indexOf (  ) >= 0 || string . indexOf ( 0 ) >= 0 || string . charAt ( 0 ) == " ) ) { sb . append ( " ) ; int length = string . length ( ) ; for ( int j = 0 ; j < length ; j += 1 ) { char c = string . charAt ( j ) ; if ( c >=   && c != " ) { sb . append ( c ) ; } } sb . append ( " ) ; } else { sb . append ( string ) ; } } } sb . append (  ) ; return sb . toString ( ) ; }
tr	5X	private void btnApostarActionPerformed ( java . awt . event . ActionEvent evt ) { if ( carreraAbierta != null ) { Jugador j = new Jugador ( 0 , txtUsuario . getText ( ) . toString ( ) , txtPass . getText ( ) . toString ( ) ) ; j = fachada . login ( j ) ; if ( j != null ) { if ( validarMonto ( ) ) { CaballoEnCarrera caballo = ( CaballoEnCarrera ) lstCaballos . getSelectedValue ( ) ; Apuesta a = new Apuesta ( Integer . parseInt ( txtMonto . getText ( ) ) , j ) ; if ( a . validar ( ) ) { ErroresApuesta ret = caballo . agregarApuesta ( a ) ; switch ( ret ) { case OK : messageBox ( "Apuesta realizada correctamente" ) ; borrarDatosJugador ( ) ; break ; case SaldoInsuficiente : messageBox ( "Saldo insuficiente" ) ; break ; case ErrorGenerico : messageBox ( "Error inesperado" ) ; break ; } } else { messageBox ( "El monto debe ser mayor que cero" ) ; } } else { messageBox ( "El monto debe ser num\u00E9rico" ) ; } } else { messageBox ( "Login incorrecto" ) ; } } else { messageBox ( "No hay carreras abiertas" ) ; } }
tr	1	public void setProduto ( Produto produto ) { this . produto = produto ; }
tr	4	@ SuppressWarnings ( "unchecked" ) @ Transactional public List < Merchant > getMerchantList ( String merchantName , String sortBy , String sortOrder ) throws Exception { List < Merchant > lstMerchants = new ArrayList < Merchant > ( ) ; Session session = null ; Criteria criteriaObj = null ; logger . info ( "merchantName---------->" + merchantName ) ; logger . info ( "sortBy--------------->" + sortBy ) ; logger . info ( "sortOrder------------>" + sortOrder ) ; String sName = merchantName ; try { session = sessionFactory . getCurrentSession ( ) ; logger . info ( "Entered into getMerchantList()--->" ) ; logger . info ( "Retrieving all merchants" ) ; if ( session != null ) { criteriaObj = session . createCriteria ( Merchant . class ) ; if ( merchantName != null ) { logger . info ( "Retrieving  merchants based on name" ) ; criteriaObj . add ( Restrictions . ilike ( "sName" , "%" + sName + "%" ) ) ; criteriaObj . add ( Restrictions . = ( "bdeletedFlag" , false ) ) ; } lstMerchants = criteriaObj . list ( ) ; logger . info ( "lstMerchants from DAO----------->" + lstMerchants . size ( ) ) ; } if ( sortBy != null && sortOrder == "asc" ) { logger . info ( "Retrieving  merchants based on Ascending sort order for " + sortBy ) ; lstMerchants = criteriaObj . addOrder ( Order . asc ( sortBy ) ) . list ( ) ; logger . info ( "lstMerchants size-------->" + lstMerchants . size ( ) ) ; } if ( sortBy != null && sortOrder == "desc" ) { logger . info ( "Retrieving  merchants based on Descending sort order for " + sortBy ) ; lstMerchants = criteriaObj . addOrder ( Order . desc ( sortBy ) ) . list ( ) ; logger . info ( "lstMerchants size-------->" + lstMerchants . size ( ) ) ; } Iterator < Merchant > it = lstMerchants . iterator ( ) ; while ( it . hasNext ( ) ) { Merchant merchant = it . next ( ) ; System . out . println ( "dao......." + merchant ) ; } } catch ( Exception e ) { e . printStackTrace ( ) ; logger . error ( "Exception occured in getMerchantList()--->" + e . getMessage ( ) ) ; throw new Exception ( "Exception occured in getMerchantList()--->" + e . getMessage ( ) ) ; } return lstMerchants ; }
tr	3	public void update ( Data ... records ) throws IOException { IntObjectOpenHashMap < ArrayList < Data >> bucketDataMapping = new IntObjectOpenHashMap < ArrayList < Data >> ( ) ; int bucketId ; for ( Data d : records ) { bucketId = hashFunction . getBucketId ( d . getKey ( ) ) ; if ( ! bucketDataMapping . containsKey ( bucketId ) ) { bucketDataMapping . put ( bucketId , new ArrayList < Data > ( ) ) ; } bucketDataMapping . get ( bucketId ) . add ( d ) ; } for ( IntObjectCursor < ArrayList < Data >> entry : bucketDataMapping ) { UpdateOnlySynchronizer < Data > synchronizer = new UpdateOnlySynchronizer < Data > ( gp . DATABASE_DIRECTORY + "/" + hashFunction . getFilename ( entry . key ) , gp ) ; @ SuppressWarnings ( "unchecked" ) Data [ ] toUpdate = ( Data [ ] ) entry . value . toArray ( new AbstractKVStorable [ entry . value . size ( ) ] ) ; Arrays . sort ( toUpdate , new AbstractKVStorableComparator ( ) ) ; synchronizer . upsert ( toUpdate ) ; } }
tr	1	@ Override public double getRotationDeg ( ) { return rotation ; }
tr	4	public void keyPressed ( KeyEvent keyEvent ) { Iterator < PComponent > it = components . iterator ( ) ; while ( it . hasNext ( ) ) { PComponent comp = it . next ( ) ; if ( shouldHandleKeys ) { if ( comp . shouldHandleKeys ( ) ) comp . keyPressed ( keyEvent ) ; } else { if ( comp instanceof PFrame ) { for ( PComponent component : ( ( PFrame ) comp ) . getComponents ( ) ) if ( component . forceKeys ( ) ) component . keyPressed ( keyEvent ) ; } else if ( comp . forceKeys ( ) ) comp . keyPressed ( keyEvent ) ; } } }
tr	5X	private boolean findBranchingRoute ( Agent a , Box obstacle ) { dir boxDir = null ; BacktrackTree root = new BacktrackTree ( a . desire . box . getAtField ( ) , a . getAtField ( ) , null ) ; BacktrackTree currentNode = null ; Set < BacktrackTree > closedSet = new HashSet < BacktrackTree > ( ) ; LinkedList < BacktrackTree > queue = new LinkedList < BacktrackTree > ( ) ; HashMap < Field , ArrayList < Field >> exploredStates = new HashMap < Field , ArrayList < Field >> ( ) ; ArrayList < Field > tempList = new ArrayList < Field > ( ) ; tempList . add ( a . desire . box . getAtField ( ) ) ; exploredStates . put ( a . getAtField ( ) , tempList ) ; queue . add ( root ) ; currentNode = queue . pop ( ) ; while ( currentNode . boxLocation != a . desire . goal ) { boxDir = Agent . getBoxDirection ( currentNode . agentLocation , currentNode . boxLocation ) ; ArrayList < Command > foundCommands = a . addPossibleCommandsForDirection ( boxDir , currentNode . agentLocation , currentNode . boxLocation ) ; for ( Command command : foundCommands ) { Field boxLocation = null ; Field agentLocation = null ; if ( command . cmd . equals ( "Push" ) ) { agentLocation = currentNode . boxLocation ; boxLocation = currentNode . boxLocation . neighbors [ command . dir2 . ordinal ( ) ] ; } else { boxLocation = currentNode . agentLocation ; agentLocation = currentNode . agentLocation . neighbors [ command . dir1 . ordinal ( ) ] ; } if ( exploredStates . containsKey ( agentLocation ) ) { if ( exploredStates . get ( agentLocation ) . contains ( boxLocation ) ) continue ; else { exploredStates . get ( agentLocation ) . add ( boxLocation ) ; } } else { ArrayList < Field > tempListe = new ArrayList < Field > ( ) ; tempListe . add ( boxLocation ) ; exploredStates . put ( agentLocation , tempListe ) ; } BacktrackTree bt = new BacktrackTree ( boxLocation , agentLocation , command ) ; bt . parent = currentNode ; boolean setupInClosedSet = false ; for ( BacktrackTree closedTree : closedSet ) { if ( closedTree . agentLocation . x == bt . agentLocation . x && closedTree . agentLocation . y == bt . agentLocation . y && closedTree . boxLocation . x == bt . boxLocation . x && closedTree . boxLocation . y == bt . boxLocation . y ) { setupInClosedSet = true ; } } if ( ! setupInClosedSet ) { queue . add ( bt ) ; closedSet . add ( bt ) ; } } if ( queue . isEmpty ( ) ) { return false ; } currentNode = queue . pop ( ) ; } ArrayList < Command > commands = new ArrayList < Command > ( ) ; while ( currentNode . parent != null ) { commands . add ( currentNode . action ) ; currentNode = currentNode . parent ; } Collections . reverse ( commands ) ; for ( Command command : commands ) { a . commandQueueDONOTUSE . add ( command ) ; } return true ; }
tr	1	public byte getNotSettable ( ) { return notSettable ; }
tr	2	public static void main ( String [ ] args ) { char [ ] arr = new char [ 100 ] ; String str = "a b c d e f" ; int i = 0 ; for ( char c : str . toCharArray ( ) ) { arr [ i ++ ] = c ; } replaceSpace ( arr , 11 ) ; System . out . println ( arr ) ; }
tr	3	private static String extractFollowingParaContaining ( String document , String containing , int begin ) { Matcher paragraph = Pattern . compile ( "<p[\\s\\S]*?</p>" ) . matcher ( document ) ; int start = begin ; int first = 0 ; int last = start ; while ( paragraph . find ( start ) ) { start = paragraph . end ( ) ; if ( paragraph . group ( ) . matches ( "<p[^>]*>[\\s\u00A0]*</p>" ) ) { continue ; } if ( ! paragraph . group ( ) . matches ( containing ) ) { break ; } if ( first == 0 ) { first = paragraph . start ( ) ; } last = paragraph . end ( ) ; } return first != 0 ? document . substring ( first , last ) : null ; }
tr	2	public static void main ( String [ ] args ) { try { AppGameContainer app = new AppGameContainer ( new Application ( ) ) ; app . setDisplayMode ( SCREEN_WIDTH , SCREEN_HEIGHT , false ) ; app . start ( ) ; } catch ( SlickException e ) { e . printStackTrace ( ) ; } }
tr	4	public void addShutDownHook ( ) { Runtime . getRuntime ( ) . addShutdownHook ( new Thread ( ) { public void run ( ) { try { shutDown ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } } ) ; }
tr	2	private void constructTextOutput ( final Vector < ScoredDocument > docs , StringBuffer response ) { for ( ScoredDocument doc : docs ) { response . append ( response . length ( ) > 0 ? "\n" : "" ) ; response . append ( doc . asTextResult ( ) ) ; } response . append ( response . length ( ) > 0 ? "\n" : "" ) ; }
tr	4	public static void applyShading ( Mesh m , view3D view ) { m . ensureVertBuffers ( ) ; m . transformVertices ( m . getMatrix ( ) , null ) ; for ( int i = 0 ; i < m . elements . size ( ) ; i ++ ) { Renderable e = m . elem ( i ) ; if ( e . type != RENDERABLE_FACE ) continue ; Face f = ( Face ) e ; { int a = f . v0 * 3 , b = f . v1 * 3 , c = f . v2 * 3 ; sVect . x = m . viewVert [ a + 0 ] - m . viewVert [ c + 0 ] ; sVect . y = m . viewVert [ a + 1 ] - m . viewVert [ c + 1 ] ; sVect . z = m . viewVert [ a + 2 ] - m . viewVert [ c + 2 ] ; tVect . x = m . viewVert [ b + 0 ] - m . viewVert [ c + 0 ] ; tVect . y = m . viewVert [ b + 1 ] - m . viewVert [ c + 1 ] ; tVect . z = m . viewVert [ b + 2 ] - m . viewVert [ c + 2 ] ; FPoint3 . crossProduct ( sVect , tVect , cProd ) ; cProd . normalize ( ) ; double sine = - FPoint3 . dotProduct ( cProd , view . lightDir ( ) ) ; double currLevel = f . getShade ( ) * .75 ; if ( sine > 0 ) { currLevel = ( 1.0 + sine ) * currLevel ; } f . setShade ( ( int ) currLevel ) ; } } }
tr	1	public char nextChar ( ) { return ( char ) ( next ( 16 ) ) ; }
tr	4	public static List < Employee > load ( InputStream input ) { List < Employee > employees = new ArrayList < Employee > ( ) ; BufferedReader reader = null ; try { reader = new BufferedReader ( new InputStreamReader ( input ) ) ; while ( true ) { String line = reader . readLine ( ) ; if ( line == null ) break ; String [ ] values = line . split ( " " ) ; Employee employee = new Employee ( values [ 0 ] , values [ 1 ] , values [ 2 ] ) ; employees . add ( employee ) ; } return employees ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } finally { if ( reader != null ) { try { reader . close ( ) ; } catch ( IOException e ) { } } } }
tr	2	public Tile cross ( Tile currentTile , Character crosser ) { if ( crosser == null || currentTile == null ) { throw new IllegalArgumentException ( "currentTile and crosser cannot be null" ) ; } if ( ! crosser . equals ( currentTile . getCharacter ( ) ) ) { throw new IllegalArgumentException ( "The given character must be on the given tile" ) ; } if ( ! canCross ( crosser ) ) { throw new IllegalArgumentException ( "The given character is not capable of crossing this edge" ) ; } Tile destination = getOtherTile ( currentTile ) ; currentTile . removeCharacter ( ) ; destination . addCharacter ( crosser ) ; return destination ; }
tr	1	public void setRunning ( boolean state ) { running = state ; }
tr	5X	private void checkForTermination ( int timezone ) { TerminationCounter counterT = terminationCounters . get ( timezone ) ; logger . info ( "Balance: " + counterT . getSentMessages ( ) + " / " + counterT . getReceivedMessages ( ) ) ; if ( counterT . isBalanced ( ) && counterT . isNotEmpty ( ) ) { TerminationCounter counterPrev = terminationCounters . get ( timezone - 1 ) ; TerminationCounter counterNext = terminationCounters . get ( timezone + 1 ) ; if ( counterPrev != null ) { if ( counterPrev . isBalanced ( ) && counterPrev . isNotEmpty ( ) ) { keepRunning = false ; logger . info ( "Termination reached! Messages sent: " + counterT . getSentMessages ( ) + " Messages received: " + counterT . getReceivedMessages ( ) ) ; } else { if ( counterNext != null && counterNext . isBalanced ( ) && counterNext . isNotEmpty ( ) ) { keepRunning = false ; logger . info ( "Termination reached! Messages sent: " + counterT . getSentMessages ( ) + " Messages received: " + counterT . getReceivedMessages ( ) ) ; } } } } }
tr	3	@ Override public Tipo validarSemantica ( ) throws Exception { Tipo izq , der ; izq = izquierdo . validarSemantica ( ) ; der = derecho . validarSemantica ( ) ; if ( izq instanceof TipoInt || der instanceof TipoFloat ) { if ( der instanceof TipoInt || der instanceof TipoFloat ) { return new TipoBooleano ( ) ; } else { throw new Exception ( "Error Semantico no se puede comparar un Tipo Int o Float con un Tipo " + der . toString ( ) ) ; } } else { throw new Exception ( "Error Semantico no se puede comparar un Tipo Int o Float con un Tipo " + der . toString ( ) ) ; } }
tr	2	public void obtainReservations ( ) { BigDecimal [ ] reservations = { BigDecimal . valueOf ( long . valueOf ( "1" ) ) , BigDecimal . valueOf ( long . valueOf ( "2" ) ) } ; System . out . println ( "Invoking Managed Tasks" ) ; ejbFacade . getReservations ( reservations ) ; setReservationListMessage ( "The reservation report has been initated" ) ; }
tr	2	int BitTreeDecode ( int [ ] paramArrayOfInt , int paramInt1 , int paramInt2 ) throws IOException { int i = 1 ; for ( int j = paramInt2 ; j > 0 ; j -- ) { i = i + i + BitDecode ( paramArrayOfInt , paramInt1 + i ) ; } return i - ( 1 << paramInt2 ) ; }
tr	2	@ Test public void setFormat_shouldThrowAnException_whenTypeIsNotStringAndFormatIsTime ( ) throws Exception { SimpleTypeSchema schema = new SimpleTypeSchema ( ) ; schema . setType ( SimpleType . NUMBER ) ; try { schema . setFormat ( "time" ) ; fail ( "Expected an exception" ) ; } catch ( IllegalArgumentException e ) { } }
tr	3	public void simulateOneStep ( ) { step ++ ; startSickness ( startKans ) ; List < Actor > newActors = new ArrayList < Actor > ( ) ; for ( Iterator < Actor > it = actors . iterator ( ) ; it . hasNext ( ) ; ) { Actor actor = it . next ( ) ; actor . act ( newActors ) ; if ( ! actor . isActive ( ) ) { it . remove ( ) ; } } actors . addAll ( newActors ) ; statusUpdate ( ) ; }
tr	5X	public static Method getMostSpecificMethod ( Method method , class < ? > targetClass ) { if ( method != null && isOverridable ( method , targetClass ) && targetClass != null && ! targetClass . equals ( method . getDeclaringClass ( ) ) ) { try { if ( Modifier . isPublic ( method . getModifiers ( ) ) ) { try { return targetClass . getMethod ( method . getName ( ) , method . getParameterTypes ( ) ) ; } catch ( NoSuchMethodException ex ) { return method ; } } else { Method specificMethod = ReflectionUtils . findMethod ( targetClass , method . getName ( ) , method . getParameterTypes ( ) ) ; return ( specificMethod != null ? specificMethod : method ) ; } } catch ( SecurityException ex ) { } } return method ; }
tr	4	public Code getCodeByDescription ( String description ) { for ( Code code : codes ) { Map < String , String > localizedStrings = code . getDescription ( ) . getLocalizedStrings ( ) ; for ( String key : localizedStrings . keySet ( ) ) { if ( localizedStrings . get ( key ) . equalsIgnoreCase ( description ) ) { return code ; } } } return null ; }
tr	1	public static void main ( String [ ] args ) { List < Integer > set = new ArrayList < > ( ) ; set . add ( - 7 ) ; set . add ( - 3 ) ; set . add ( - 2 ) ; set . add ( 5 ) ; set . add ( 8 ) ; System . out . println ( getSubsets ( set , 0 ) ) ; set = new ArrayList < > ( ) ; set . add ( 2 ) ; set . add ( 3 ) ; set . add ( 6 ) ; set . add ( 8 ) ; System . out . println ( getSubsets ( set , 11 ) ) ; }
tr	2	private static void testSplit ( ) { String src = "var arrayImg = new Array();" + "arrayImg[0] = \"http://srimg1.meimei22.com/big/suren/2014-8-22/1/407899112014050822400403_640.jpg\";" + "arrayImg[0] = \"http://srimg1.meimei22.com/big/suren/2014-8-22/1/4078991120140508224023013_640.jpg\";" + "arrayImg[0] = \"http://srimg1.meimei22.com/big/suren/2014-8-22/1/407899112014050822404702_640.jpg\";" + "arrayImg[0] = \"http://srimg1.meimei22.com/big/suren/2014-8-22/1/4078991120140508224114010_640.jpg\";" + "getImgString()" ; String [ ] arrs = src . split ( ";" ) ; for ( String arr : arrs ) { printStr ( arr ) ; } }
tr	1	@ Override public String getParams ( ) { StringBuilder parmas = new StringBuilder ( ) ; parmas . append ( pppUserName ) . append ( CTConstant . VALUE_ACCOUNT ) . append ( pppPassword ) ; return parmas . toString ( ) ; }
tr	4	public List < String > generateParenthesis ( int n ) { List < String > result = new ArrayList < String > ( ) ; if ( n == 0 ) { result . add ( "" ) ; return result ; } if ( n == 1 ) { result . add ( "()" ) ; return result ; } result = generateParenthesis ( n - 1 ) ; ArrayList < String > returnList = new ArrayList < String > ( ) ; int tempSize = result . size ( ) ; for ( int j = 0 ; j < tempSize ; j ++ ) { String tempStr = result . get ( j ) ; StringBuffer sb = new StringBuffer ( tempStr ) ; int size = sb . length ( ) ; for ( int i = 0 ; i < size ; ++ i ) { String str = sb . insert ( i , "()" ) . toString ( ) ; sb = new StringBuffer ( tempStr ) ; if ( ! returnList . contains ( str ) ) { returnList . add ( str ) ; } } } return returnList ; }
tr	4	public static void main ( String [ ] args ) throws IOException { Scanner in = new Scanner ( System . in ) ; byte p1 = 3 ; int p1Guess ; int p1Taken ; byte p2 = 3 ; int p2Guess ; int p2Taken ; boolean p1Turn = true ; byte round = 0 ; System . out . println ( "Stone game" ) ; while ( p1 > 0 && p2 > 0 ) { System . out . println ( "------------------" ) ; System . out . println ( "Round: " + ++ round ) ; System . out . println ( " You have " + p1 + " stones; CPU has " + p2 + " stones" ) ; System . out . println ( " How much stones you're taking: " ) ; do p1Taken = in . nextInt ( ) ; while ( p1Taken > p1 || p1Taken < 0 ) ; p2Taken = Game . randInt ( 0 , p2 ) ; if ( p1Turn ) { System . out . println ( " Your guess is: " ) ; p1Guess = in . nextInt ( ) ; do { int rand_min = p1Guess - p2 ; if ( rand_min < 0 ) rand_min = 0 ; p2Guess = Game . randInt ( rand_min , p1 + p2 ) ; } while ( p2Guess == p1Guess ) ; System . out . println ( "CPU is thinking of: " + p2Guess ) ; } else { p2Guess = Game . randInt ( p2Taken , p2Taken + p1 ) ; System . out . println ( "CPU is thinking of: " + p2Guess ) ; System . out . println ( " Your guess is: " ) ; do p1Guess = in . nextInt ( ) ; while ( p1Guess == p2Guess ) ; } System . out . println ( "We took: " + p1Taken + " P2 took: " + p2Taken + " stones" ) ; if ( p1Guess == ( p1Taken + p2Taken ) ) { System . out . println ( "We won " + round + ". round" ) ; -- p1 ; p1Turn = true ; } else if ( p2Guess == ( p1Taken + p2Taken ) ) { System . out . println ( "CPU won " + round + ". round" ) ; -- p2 ; p1Turn = false ; } else p1Turn = ! p1Turn ; } System . out . println ( "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" ) ; if ( p1 == 0 ) System . out . println ( "PLAYER 1 HAS WON" ) ; else System . out . println ( "CPU HAS WON" ) ; System . out . println ( "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" ) ; }
tr	4	private void persist ( PersistAction persistAction , String successMessage ) { if ( selected != null ) { setEmbeddableKeys ( ) ; try { if ( persistAction != PersistAction . DELETE ) { getFacade ( ) . edit ( selected ) ; } else { getFacade ( ) . remove ( selected ) ; } JsfUtil . addSuccessMessage ( successMessage ) ; } catch ( EJBException ex ) { String msg = "" ; Throwable cause = ex . getCause ( ) ; if ( cause != null ) { msg = cause . getLocalizedMessage ( ) ; } if ( msg . length ( ) > 0 ) { JsfUtil . addErrorMessage ( msg ) ; } else { JsfUtil . addErrorMessage ( ex , ResourceBundle . getBundle ( "/resoruces/Bundle" ) . getString ( "PersistenceErrorOccured" ) ) ; } } catch ( Exception ex ) { Logger . getLogger ( this . getClass ( ) . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; JsfUtil . addErrorMessage ( ex , ResourceBundle . getBundle ( "/resoruces/Bundle" ) . getString ( "PersistenceErrorOccured" ) ) ; } } }
tr	3	@ Override protected void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { request . setCharacterEncoding ( "utf-8" ) ; response . setContentType ( "text/xml;charset=UTF-8" ) ; String pillName = request . getParameter ( "pillName" ) ; String pillNum = request . getParameter ( "pillNum" ) ; String pillId = request . getParameter ( "pillId" ) ; String standard = request . getParameter ( "standard" ) ; String price = request . getParameter ( "price" ) ; String number = request . getParameter ( "number" ) ; String pillType = request . getParameter ( "pillType" ) ; double priceo = 0.00 ; int numbero = 0 ; infoReg ptreg = new infoReg ( ) ; boolean result = false ; if ( pillNum == null || pillNum . equals ( "" ) ) { if ( price == null || price . equals ( "" ) ) { } else { priceo = double . parseDouble ( request . getParameter ( "price" ) ) ; } if ( number == null || number . equals ( "" ) ) { } else { numbero = Integer . parseInt ( request . getParameter ( "number" ) ) ; } result = ptreg . pillInsert ( pillName , standard , priceo , numbero , pillId , pillType ) ; PrintWriter out = response . getWriter ( ) ; if ( result ) { response . sendRedirect ( request . getContextPath ( ) + "/infoSearch/commonSearch/pillSearch.jsp" ) ; } else { out . print ( "\u6CE8\u518C\u5931\u8D25" ) ; return ; } } else { if ( price == null || price . equals ( "" ) ) { } else { priceo = double . parseDouble ( request . getParameter ( "price" ) ) ; } if ( number == null || number . equals ( "" ) ) { } else { numbero = Integer . parseInt ( request . getParameter ( "number" ) ) ; } result = ptreg . pillUpdate ( pillNum , pillName , standard , priceo , numbero , pillId , pillType ) ; PrintWriter out = response . getWriter ( ) ; if ( result ) { response . sendRedirect ( request . getContextPath ( ) + "/infoSearch/commonSearch/pillSearch.jsp" ) ; } else { out . print ( "\u6CE8\u518C\u5931\u8D25" ) ; return ; } } }
tr	5X	protected void doRun ( ) { runButton . setEnabled ( false ) ; stopButton . setEnabled ( true ) ; logArea . setText ( "" ) ; logArea . setCaretPosition ( 0 ) ; int selectedIndex = demosBox . getSelectedIndex ( ) ; if ( selectedIndex >= 0 ) { setTitle ( ( String ) demosBox . getSelectedItem ( ) ) ; final String args = selectedIndex < demosBox . getItemCount ( ) - 1 ? reduceName ( DefaultActorTest . getTestNames ( ) [ selectedIndex ] ) : "*" ; Thread t = new Thread ( new Runnable ( ) { @ Override public void run ( ) { try { if ( "*" . equals ( args ) ) { for ( String name : DefaultActorTest . getTestNames ( ) ) { doStart ( ) ; setTitle ( name ) ; runTest ( reduceName ( name ) ) ; doStop ( ) ; try { Thread . sleep ( 10 * 1000 ) ; } catch ( InterruptedException e ) { break ; } } } else { doStart ( ) ; runTest ( args ) ; doStop ( ) ; } } finally { SwingUtilities . invokeLater ( new Runnable ( ) { public void run ( ) { stopButton . setEnabled ( false ) ; runButton . setEnabled ( true ) ; messageLine . setText ( "Done" ) ; } } ) ; } } } ) ; t . setDaemon ( true ) ; t . start ( ) ; } }
tr	2	public static boolean updateKurssi ( Kurssi kurssi ) { Connection con = connect ( ) ; try { PreparedStatement updateKurssi = con . prepareStatement ( "UPDATE kurssi SET nimi=? WHERE kurssiID=?" ) ; updateKurssi . setString ( 1 , kurssi . getNimi ( ) ) ; updateKurssi . setInt ( 2 , kurssi . getId ( ) ) ; updateKurssi . executeUpdate ( ) ; return true ; } catch ( SQLException ex ) { Logger . getLogger ( Database . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; return false ; } finally { closeConnection ( con ) ; } }
tr	1	public Object accept ( ASTVisitor visitor ) throws DatabaseException { return visitor . visit ( this ) ; }
tr	2	@ Override public void writeAVLData ( OutputStream out ) { PrintStream ps = new PrintStream ( out ) ; ps . print ( "BODY\n" ) ; ps . printf ( locale , "%1$s\n" , this . getName ( ) ) ; ps . printf ( locale , "#Nbody  Bspace\n" + formatInteger ( 1 ) + formatFloat ( 1 , 2 ) , this . getNbody ( ) , this . getBspace ( ) ) ; ps . print ( "\n" ) ; ps . print ( "YDUPLICATE\n" ) ; ps . printf ( locale , formatFloat ( 1 ) + "\n" , this . getYdupl ( ) ) ; if ( this . getdX ( ) != 0 || this . getdY ( ) != 0 || this . getdZ ( ) != 0 ) { ps . print ( "TRANSLATE\n" ) ; ps . printf ( locale , "#dX  dY  dZ\n" + formatFloat ( 3 ) + "\n" , this . getdX ( ) , this . getdY ( ) , this . getdZ ( ) ) ; } ps . print ( "BFILE\n" ) ; ps . print ( this . getBFILE ( ) + "\n" ) ; }
tr	3	private void removeOutTransferActionPerformed ( java . awt . event . ActionEvent evt ) { int items_to_delete [ ] = null ; if ( ! outgoingTransferList . isSelectionEmpty ( ) ) { items_to_delete = outgoingTransferList . getSelectedIndices ( ) ; } else { return ; } if ( items_to_delete != null ) { for ( int i = items_to_delete . length - 1 ; i >= 0 ; i -- ) { outgoingItems . elementAt ( i ) . cancel ( ) ; outgoingItems . elementAt ( i ) . cleanup ( ) ; outgoingItems . remove ( items_to_delete [ i ] ) ; } } }
tr	4	public List < Integer > getRow ( int rowIndex ) { List < Integer > result = new ArrayList < Integer > ( ) ; List < Integer > temp = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i <= rowIndex ; i ++ ) { temp = new ArrayList < Integer > ( result ) ; result . clear ( ) ; for ( int j = 0 ; j <= i ; j ++ ) { if ( j == 0 || j == i ) result . add ( 1 ) ; else { result . add ( temp . get ( j - 1 ) + temp . get ( j ) ) ; } } } return result ; }
tr	3	public synchronized void produce ( ) { try { if ( product != 0 ) { wait ( ) ; } } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } product = 1 ; System . out . println ( "Producer produce : " + product ) ; notifyAll ( ) ; }
tr	2	private void handleNames ( Message m ) { if ( m . numArgs ( ) < 3 ) return ; if ( m . getCode ( ) == MessageCode . RPL_ENDOFNAMES ) { getChannel ( m . getArg ( 2 ) ) . usersChanged ( ) ; return ; } if ( m . numArgs ( ) < 5 || m . get ( 3 ) . charAt ( 0 ) == * ) return ; Channel c = getChannel ( m . getArg ( 3 ) ) ; StringTokenizer st = new StringTokenizer ( m . getMessage ( ) , " " ) ; User u ; String nick ; while ( st . hasMoreTokens ( ) ) { nick = st . nextToken ( ) ; ChannelUser . Mode mode = ChannelUser . Mode . getMode ( nick . charAt ( 0 ) ) ; if ( mode != ChannelUser . Mode . NONE ) nick = nick . substring ( 1 ) ; u = getUser ( nick ) ; u . addChannel ( c ) ; c . addUserToList ( u ) ; c . setUserMode ( u , mode ) ; } }
tr	4	public Calendar getMaxDueDate ( ) { Calendar result = Calendar . getInstance ( ) ; Calendar max = null ; Calendar toCheck ; if ( tasks != null && tasks . size ( ) > 0 ) { for ( Task t : tasks ) { toCheck = t . getDueDate ( ) ; if ( max == null || toCheck . compareTo ( max ) > 0 ) { max = toCheck ; } } result . set ( Calendar . YEAR , max . get ( Calendar . YEAR ) ) ; result . set ( Calendar . MONTH , max . get ( Calendar . MONTH ) ) ; result . set ( Calendar . DAY_OF_MONTH , max . get ( Calendar . DAY_OF_MONTH ) ) ; } return result ; }
tr	2	private BigInteger selfPowers ( int n ) { Preconditions . checkArgument ( n > 0 ) ; BigInteger acc = BigInteger . ZERO ; for ( int i = 1 ; i <= n ; i ++ ) { acc = acc . add ( BigInteger . valueOf ( i ) . pow ( i ) ) ; } return acc ; }
tr	3	public List < Review > getReviews ( ) { final List < Review > reviews = new ArrayList < Review > ( ) ; for ( final Solution solution : solutions ) { if ( solution . isCorrected ( ) ) { reviews . add ( solution . getReview ( ) ) ; } } return reviews ; }
tr	5X	private void scheduleRefreshPackets ( ByteBuffer addEntityBuffer ) { synchronized ( entities ) { for ( Entity one : entities ) { if ( playerListChanged && one . getId ( ) > - 1 ) { protocol . send ( addEntityBuffer , new AddEntity ( one ) ) ; if ( one instanceof Box && one . humanControl ( ) ) { protocol . send ( addEntityBuffer , new Update ( ( Box ) one ) ) ; if ( one instanceof Soldier ) { protocol . send ( addEntityBuffer , new Color ( one ) ) ; protocol . send ( addEntityBuffer , new Ammo ( ( Soldier ) one ) ) ; } } } if ( one instanceof Box ) { Box b = ( Box ) one ; if ( b . needsUpdate ( frame ) ) { prepareUpdateBuffer ( ) ; Packet updatePacket = new Update ( b ) ; protocol . send ( updateBuffer , updatePacket ) ; if ( b . freshMeat ( ) && b instanceof Soldier ) { protocol . send ( updateBuffer , new Color ( b ) ) ; protocol . send ( updateBuffer , new Ammo ( ( Soldier ) b ) ) ; } } } } } }
tr	5X	public static void compute_first_sets ( ) throws internal_error { boolean change = true ; Enumeration n ; Enumeration p ; non_terminal nt ; production prod ; terminal_set prod_first ; while ( change ) { change = false ; for ( n = all ( ) ; n . hasMoreElements ( ) ; ) { nt = ( non_terminal ) n . nextElement ( ) ; for ( p = nt . productions ( ) ; p . hasMoreElements ( ) ; ) { prod = ( production ) p . nextElement ( ) ; prod_first = prod . check_first_set ( ) ; if ( ! prod_first . is_subset_of ( nt . _first_set ) ) { change = true ; nt . _first_set . add ( prod_first ) ; } } } } }
tr	5X	public Editor ( DefaultMutableTreeNode node , DefaultTreeModel model ) throws InvalidNodeRepresentationException { _node = node ; _model = model ; _children = new ArrayList < > ( ) ; if ( _node . getUserObject ( ) instanceof Song ) { SpringLayout layout = new SpringLayout ( ) ; setLayout ( layout ) ; setBorder ( new LineBorder ( Color . BLACK , 3 ) ) ; setBackground ( Color . WHITE ) ; _song = ( Song ) node . getUserObject ( ) ; _playlist = null ; _artist = new JTextField ( _song . getArtist ( ) ) ; _title = new JTextField ( _song . getTitle ( ) ) ; _album = new JTextField ( _song . getAlbum ( ) ) ; _genre = new JTextField ( _song . getGenre ( ) ) ; _year = new JTextField ( _song . getYear ( ) ) ; _name = null ; JLabel artist = new JLabel ( "Artist:" ) ; JLabel title = new JLabel ( "Title:" ) ; JLabel album = new JLabel ( "Album:" ) ; JLabel genre = new JLabel ( "Genre:" ) ; JLabel year = new JLabel ( "Year:" ) ; try { _saveButton = new JButton ( new BeethovenIcon ( getClass ( ) . getResource ( "Icons/save.png" ) . toURI ( ) . toURL ( ) ) ) ; _saveButton . setBackground ( Color . WHITE ) ; _saveButton . setBorder ( null ) ; _saveButton . setToolTipText ( "Save" ) ; _saveButton . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { save ( ) ; } } ) ; } catch ( MalformedURLException e ) { e . printStackTrace ( ) ; } catch ( URISyntaxException e ) { e . printStackTrace ( ) ; } add ( artist ) ; add ( _artist ) ; add ( title ) ; add ( _title ) ; add ( album ) ; add ( _album ) ; add ( genre ) ; add ( _genre ) ; add ( year ) ; add ( _year ) ; add ( _saveButton ) ; layout . putConstraint ( SpringLayout . NORTH , artist , 5 , SpringLayout . NORTH , this ) ; layout . putConstraint ( SpringLayout . WEST , artist , 5 , SpringLayout . WEST , this ) ; layout . putConstraint ( SpringLayout . NORTH , _artist , 5 , SpringLayout . NORTH , this ) ; layout . putConstraint ( SpringLayout . EAST , _artist , - 5 , SpringLayout . EAST , this ) ; layout . putConstraint ( SpringLayout . WEST , _artist , 5 , SpringLayout . EAST , album ) ; layout . putConstraint ( SpringLayout . NORTH , title , 5 , SpringLayout . SOUTH , _artist ) ; layout . putConstraint ( SpringLayout . WEST , title , 5 , SpringLayout . WEST , this ) ; layout . putConstraint ( SpringLayout . NORTH , _title , 5 , SpringLayout . SOUTH , _artist ) ; layout . putConstraint ( SpringLayout . EAST , _title , - 5 , SpringLayout . EAST , this ) ; layout . putConstraint ( SpringLayout . WEST , _title , 5 , SpringLayout . EAST , album ) ; layout . putConstraint ( SpringLayout . NORTH , album , 5 , SpringLayout . SOUTH , _title ) ; layout . putConstraint ( SpringLayout . WEST , album , 5 , SpringLayout . WEST , this ) ; layout . putConstraint ( SpringLayout . NORTH , _album , 5 , SpringLayout . SOUTH , _title ) ; layout . putConstraint ( SpringLayout . EAST , _album , - 5 , SpringLayout . EAST , this ) ; layout . putConstraint ( SpringLayout . WEST , _album , 5 , SpringLayout . EAST , album ) ; layout . putConstraint ( SpringLayout . NORTH , genre , 5 , SpringLayout . SOUTH , _album ) ; layout . putConstraint ( SpringLayout . WEST , genre , 5 , SpringLayout . WEST , this ) ; layout . putConstraint ( SpringLayout . NORTH , _genre , 5 , SpringLayout . SOUTH , _album ) ; layout . putConstraint ( SpringLayout . EAST , _genre , - 5 , SpringLayout . EAST , this ) ; layout . putConstraint ( SpringLayout . WEST , _genre , 5 , SpringLayout . EAST , album ) ; layout . putConstraint ( SpringLayout . NORTH , year , 5 , SpringLayout . SOUTH , _genre ) ; layout . putConstraint ( SpringLayout . WEST , year , 5 , SpringLayout . WEST , this ) ; layout . putConstraint ( SpringLayout . NORTH , _year , 5 , SpringLayout . SOUTH , _genre ) ; layout . putConstraint ( SpringLayout . EAST , _year , - 5 , SpringLayout . EAST , this ) ; layout . putConstraint ( SpringLayout . WEST , _year , 5 , SpringLayout . EAST , album ) ; layout . putConstraint ( SpringLayout . NORTH , _saveButton , 10 , SpringLayout . SOUTH , _year ) ; layout . putConstraint ( SpringLayout . WEST , _saveButton , 0 , SpringLayout . WEST , _year ) ; setPreferredSize ( new Dimension ( 512 , 720 / 3 ) ) ; } else if ( _node . getUserObject ( ) instanceof Playlist ) { SpringLayout layout = new SpringLayout ( ) ; setLayout ( layout ) ; setBorder ( new LineBorder ( Color . BLACK , 3 ) ) ; setBackground ( Color . WHITE ) ; _song = null ; _playlist = ( Playlist ) node . getUserObject ( ) ; _artist = null ; _title = null ; _album = null ; _genre = null ; _year = null ; _name = new JTextField ( _playlist . getName ( ) ) ; JLabel name = new JLabel ( "Title:" ) ; try { _saveButton = new JButton ( new BeethovenIcon ( getClass ( ) . getResource ( "Icons/save.png" ) . toURI ( ) . toURL ( ) ) ) ; _saveButton . setBackground ( Color . WHITE ) ; _saveButton . setBorder ( null ) ; _saveButton . setToolTipText ( "Save" ) ; _saveButton . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { save ( ) ; } } ) ; } catch ( MalformedURLException e ) { e . printStackTrace ( ) ; } catch ( URISyntaxException e ) { e . printStackTrace ( ) ; } add ( name ) ; add ( _name ) ; add ( _saveButton ) ; layout . putConstraint ( SpringLayout . NORTH , name , 5 , SpringLayout . NORTH , this ) ; layout . putConstraint ( SpringLayout . WEST , name , 5 , SpringLayout . WEST , this ) ; layout . putConstraint ( SpringLayout . NORTH , _name , 5 , SpringLayout . NORTH , this ) ; layout . putConstraint ( SpringLayout . EAST , _name , - 5 , SpringLayout . EAST , this ) ; layout . putConstraint ( SpringLayout . WEST , _name , 5 , SpringLayout . EAST , name ) ; layout . putConstraint ( SpringLayout . NORTH , _saveButton , 10 , SpringLayout . SOUTH , _name ) ; layout . putConstraint ( SpringLayout . WEST , _saveButton , 0 , SpringLayout . WEST , _name ) ; setPreferredSize ( new Dimension ( 512 , 720 / 3 ) ) ; } else { throw new InvalidNodeRepresentationException ( "Node must represent a Song or Playlist" ) ; } }
tr	1	@ Override public void close ( ) throws IOException { in . close ( ) ; }
tr	4	@ Override public Validator < AbstractConverter > getValidator ( ) { return new Validator < AbstractConverter > ( ) { @ Override public Set < ConstraintViolation > validate ( AbstractConverter item ) { Set < ConstraintViolation > constraints = new HashSet < ConstraintViolation > ( ) ; Map < String , ConverterParameter > params = item . getParametersMap ( ) ; ConverterParameter param = params . get ( "colFileSizeInBytes" ) ; if ( param . getAttachedColumn ( ) . isEmpty ( ) ) { ConstraintViolation constraint = new ConstraintViolation ( ) ; constraint . setMessage ( "You must choose the column with filesize in bytes data" ) ; constraint . setLevel ( ConstraintViolationLevel . CRITICAL ) ; constraint . setValueName ( param . getName ( ) ) ; constraints . add ( constraint ) ; } param = params . get ( "colFileSizeConvert" ) ; if ( param . getAttachedColumn ( ) . isEmpty ( ) ) { ConstraintViolation constraint = new ConstraintViolation ( ) ; constraint . setMessage ( "You must choose the output column" ) ; constraint . setLevel ( ConstraintViolationLevel . CRITICAL ) ; constraint . setValueName ( param . getName ( ) ) ; constraints . add ( constraint ) ; } return constraints ; } } ; }
tr	2	@ Override public void process ( Asset asset ) { String url = asset . getProperty ( "url" ) ; HttpGet get = new HttpGet ( url ) ; ResponseHandler < String > responseHandler = new BasicResponseHandler ( ) ; try { String body = client . execute ( get , responseHandler ) ; asset . setValue ( body ) ; next ( asset ) ; } catch ( ClientProtocolException e ) { throw new PipelineException ( asset , AssetState . FAILED , getLocation ( ) , e . getMessage ( ) ) ; } catch ( IOException e ) { throw new PipelineException ( asset , AssetState . FAILED , getLocation ( ) , e . getMessage ( ) ) ; } }
tr	5X	@ SuppressWarnings ( "rawtypes" ) public static List < String > getClassNamesImplementingInterface ( class interf , String basePackage ) { List < String > classNames = new ArrayList < String > ( ) ; try { class [ ] result = getClasses ( basePackage ) ; for ( class c : result ) { if ( ! Modifier . isAbstract ( c . getModifiers ( ) ) ) { for ( class implementingInterface : c . getInterfaces ( ) ) { if ( implementingInterface . getName ( ) . equals ( interf . getName ( ) ) ) { classNames . add ( c . getCanonicalName ( ) ) ; } } } } } catch ( ClassNotFoundException e ) { e . printStackTrace ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return classNames ; }
tr	2	protected void checkKey ( K k ) { if ( k == null ) { throw new InvalidKeyException ( "Invalid key: null." ) ; } }
tr	4	public void put ( String key , MqttPersistable message ) throws MqttPersistenceException { checkIsOpen ( ) ; File file = new File ( clientDir , key + MESSAGE_FILE_EXTENSION ) ; File backupFile = new File ( clientDir , key + MESSAGE_FILE_EXTENSION + MESSAGE_BACKUP_FILE_EXTENSION ) ; if ( file . exists ( ) ) { boolean result = file . renameTo ( backupFile ) ; if ( ! result ) { backupFile . delete ( ) ; file . renameTo ( backupFile ) ; } } try { FileOutputStream fos = new FileOutputStream ( file ) ; fos . write ( message . getHeaderBytes ( ) , message . getHeaderOffset ( ) , message . getHeaderLength ( ) ) ; if ( message . getPayloadBytes ( ) != null ) { fos . write ( message . getPayloadBytes ( ) , message . getPayloadOffset ( ) , message . getPayloadLength ( ) ) ; } fos . getFD ( ) . sync ( ) ; fos . close ( ) ; if ( backupFile . exists ( ) ) { backupFile . delete ( ) ; } } catch ( IOException ex ) { throw new MqttPersistenceException ( ex ) ; } finally { if ( backupFile . exists ( ) ) { boolean result = backupFile . renameTo ( file ) ; if ( ! result ) { file . delete ( ) ; backupFile . renameTo ( file ) ; } } } }
tr	5X	private QuerySet < T > isNull ( String query ) { QuerySet < T > querySet = null ; if ( query != null && ! query . trim ( ) . isEmpty ( ) ) { querySet = new QuerySet < T > ( ) ; query = query . trim ( ) . toLowerCase ( ) ; query = query . replace ( "__isnull" , "" ) ; String [ ] queryComponents = query . split ( "=" ) ; String fieldName = queryComponents [ 0 ] ; boolean isNull = boolean . parseBoolean ( queryComponents [ 1 ] ) ; Field field = null ; try { if ( fieldName . equalsIgnoreCase ( "id" ) ) { field = this . entity . getSuperclass ( ) . getDeclaredField ( fieldName ) ; } else { field = this . entity . getDeclaredField ( fieldName ) ; } field . setAccessible ( true ) ; for ( T model : this ) { if ( isNull ) { if ( field . get ( model ) == null ) { querySet . add ( model ) ; } } else { if ( field . get ( model ) != null ) { querySet . add ( model ) ; } } } } catch ( Exception e ) { e . printStackTrace ( ) ; } } return querySet ; }
tr	2	@ Test public void testTokenPayment ( ) { Gateway beanstream = new Gateway ( "v1" , 300200578 , "4BaD82D9197b4cc4b70a221911eE9f70" ) ; HttpsConnector connector = new HttpsConnector ( 300200578 , "4BaD82D9197b4cc4b70a221911eE9f70" ) ; LegatoTokenRequest legatoTokenRequest = new LegatoTokenRequest ( ) ; legatoTokenRequest . number = "5100000010001004" ; legatoTokenRequest . expiryMonth = 12 ; legatoTokenRequest . expiryYear = 18 ; legatoTokenRequest . cvd = "123" ; String url = "https://www.beanstream.com/scripts/tokenization/tokens" ; String output = "" ; try { output = connector . ProcessTransaction ( HttpMethod . post , url , legatoTokenRequest ) ; } catch ( BeanstreamApiException ex ) { Logger . getLogger ( SampleTransactions . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; assert . fail ( ex . getMessage ( ) ) ; } Gson gson = new Gson ( ) ; LegatoTokenResponse tokenResponse = gson . fromJson ( output , LegatoTokenResponse . class ) ; System . out . println ( "token: " + output ) ; TokenPaymentRequest tokenReq = new TokenPaymentRequest ( ) ; tokenReq . setAmount ( 100.00 ) ; tokenReq . setOrderNumber ( getRandomOrderId ( "token" ) ) ; tokenReq . getToken ( ) . setName ( "John Doe" ) . setCode ( tokenResponse . getToken ( ) ) ; try { PaymentResponse response = beanstream . payments ( ) . makePayment ( tokenReq ) ; System . out . println ( "Token Payment Approved? " + response . isApproved ( ) ) ; } catch ( BeanstreamApiException ex ) { Logger . getLogger ( this . getClass ( ) . getName ( ) ) . log ( Level . SEVERE , "An error occurred" , ex ) ; assert . fail ( ex . getMessage ( ) ) ; } try { output = connector . ProcessTransaction ( HttpMethod . post , url , legatoTokenRequest ) ; } catch ( BeanstreamApiException ex ) { Logger . getLogger ( SampleTransactions . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; assert . fail ( ex . getMessage ( ) ) ; } tokenResponse = gson . fromJson ( output , LegatoTokenResponse . class ) ; System . out . println ( "Token pre-auth: " + tokenResponse . getToken ( ) ) ; TokenPaymentRequest req = new TokenPaymentRequest ( ) ; req . setAmount ( 80.00 ) ; req . setOrderNumber ( getRandomOrderId ( "token" ) ) ; req . getToken ( ) . setName ( "John Doe" ) . setCode ( tokenResponse . getToken ( ) ) ; try { PaymentResponse response = beanstream . payments ( ) . preAuth ( req ) ; System . out . println ( "Token Payment Approved? " + response . isApproved ( ) ) ; response = beanstream . payments ( ) . preAuthCompletion ( response . id , 55.30 ) ; assert . assertTrue ( response . isApproved ( ) ) ; assert . assertEquals ( "PAC" , response . type ) ; } catch ( BeanstreamApiException ex ) { Logger . getLogger ( this . getClass ( ) . getName ( ) ) . log ( Level . SEVERE , "An error occurred" , ex ) ; assert . fail ( ex . getMessage ( ) ) ; } }
tr	2	public static void main ( String [ ] args ) { PricesInfo pricesInfo = new PricesInfo ( ) ; Reader [ ] readers = new Reader [ 5 ] ; Thread [ ] threadsReader = new Thread [ readers . length ] ; for ( int i = 0 ; i < readers . length ; i ++ ) { readers [ i ] = new Reader ( pricesInfo ) ; threadsReader [ i ] = new Thread ( readers [ i ] ) ; } Writer writer = new Writer ( pricesInfo ) ; Thread threadWriter = new Thread ( writer ) ; for ( Thread thread : threadsReader ) { thread . start ( ) ; } threadWriter . start ( ) ; }
tr	1	@ Override public List < Apontamento > obterPorOrdemServico ( int ordemServicoId ) { return session . createQuery ( "from Apontamento where OrdemServicoId = :ordemServicoId" ) . setString ( "ordemServicoId" , String . valueOf ( ordemServicoId ) ) . list ( ) ; }
tr	1	public int process_id ( ) { return 2 ; }
tr	5X	private boolean r_prelude ( ) { int v_1 ; int v_2 ; int v_3 ; int v_4 ; int v_5 ; B_Y_found = false ; v_1 = cursor ; lab0 : do { bra = cursor ; if ( ! ( eq_s ( 1 , "'" ) ) ) { break lab0 ; } ket = cursor ; slice_del ( ) ; } while ( false ) ; cursor = v_1 ; v_2 = cursor ; lab1 : do { bra = cursor ; if ( ! ( eq_s ( 1 , "y" ) ) ) { break lab1 ; } ket = cursor ; slice_from ( "Y" ) ; B_Y_found = true ; } while ( false ) ; cursor = v_2 ; v_3 = cursor ; lab2 : do { replab3 : while ( true ) { v_4 = cursor ; lab4 : do { golab5 : while ( true ) { v_5 = cursor ; lab6 : do { if ( ! ( in_grouping ( g_v , 97 , 121 ) ) ) { break lab6 ; } bra = cursor ; if ( ! ( eq_s ( 1 , "y" ) ) ) { break lab6 ; } ket = cursor ; cursor = v_5 ; break golab5 ; } while ( false ) ; cursor = v_5 ; if ( cursor >= limit ) { break lab4 ; } cursor ++ ; } slice_from ( "Y" ) ; B_Y_found = true ; continue replab3 ; } while ( false ) ; cursor = v_4 ; break replab3 ; } } while ( false ) ; cursor = v_3 ; return true ; }
tr	4	public int solution ( String input ) { final Deque < Character > stack = new LinkedList < Character > ( ) ; final int nbChars = input . length ( ) ; for ( int i = 0 ; i < nbChars ; i ++ ) { final char c = input . charAt ( i ) ; if ( c == ( ) { stack . push ( c ) ; } else if ( c == ) ) { if ( stack . isEmpty ( ) ) { return 0 ; } else { stack . pop ( ) ; } } } return stack . isEmpty ( ) ? 1 : 0 ; }
tr	2	@ Override public boolean equals ( Object obj ) { if ( obj instanceof GRGProteinNode ) { GRGProteinNode other = ( GRGProteinNode ) obj ; return this . node . equals ( other . node ) ; } else { return false ; } }
tr	4	@ Override public void onPairFailed ( ) { synchronized ( mListeners ) { for ( DiscoveryListener listener : mListeners ) { try { listener . onPairFailed ( ) ; } catch ( RuntimeException e ) { System . out . println ( "Error notifying listener." ) ; } } } System . out . println ( "onPairFailed" ) ; }
tr	1	static Date getTimeWarp ( ) { return timeWarp ; }
tr	4	private void comparePackageParts ( TIPP p1 , TIPP p2 ) throws Exception { Collection < TIPPSection > s1 = p1 . getSections ( ) ; Collection < TIPPSection > s2 = p2 . getSections ( ) ; assertNotNull ( s1 ) ; assertNotNull ( s2 ) ; for ( TIPPSection s : s1 ) { TIPPSectionType type = s . getType ( ) ; List < ? extends TIPPFile > o1 = s . getFileResources ( ) ; TIPPSection _s = p2 . getSection ( type ) ; assertEquals ( s , _s ) ; List < ? extends TIPPFile > o2 = _s . getFileResources ( ) ; assertNotNull ( o1 ) ; assertNotNull ( o2 ) ; assertEquals ( o1 , o2 ) ; Iterator < ? extends TIPPFile > fit1 = o1 . iterator ( ) ; Iterator < ? extends TIPPFile > fit2 = o2 . iterator ( ) ; while ( fit1 . hasNext ( ) ) { TIPPFile f1 = fit1 . next ( ) ; assertTrue ( fit2 . hasNext ( ) ) ; TIPPFile f2 = fit2 . next ( ) ; assertEquals ( f1 , f2 ) ; try ( InputStream is1 = p1 . getFile ( f1 ) ; InputStream is2 = p2 . getFile ( f2 ) ) { verifyBytes ( is1 , is2 ) ; } } } }
tr	5X	public static void main ( final String [ ] args ) throws FileNotFoundException { final PrintWriter out = new PrintWriter ( Merge . class . getPackage ( ) . getName ( ) . replace ( "." , "/" ) + "/merged.txt" ) ; final String [ ] results = new String [ 5000 ] ; for ( final File file : new File ( Merge . class . getPackage ( ) . getName ( ) . replace ( "." , "/" ) ) . listFiles ( new FileFilter ( ) { @ Override public boolean accept ( final File file ) { return file . getName ( ) . matches ( "output.txt|43.66-ok" ) ; } } ) ) { Logger . getLogger ( Merge . class . getName ( ) ) . log ( Level . INFO , "file = {0}" , file ) ; final Scanner scanner = new Scanner ( file ) ; for ( int i = 0 ; i < 5000 ; i ++ ) { if ( scanner . hasNextLine ( ) ) { final String line = scanner . nextLine ( ) ; if ( results [ i ] == null ) { results [ i ] = line ; } else { if ( results [ i ] . isEmpty ( ) || line . length ( ) > 0 && line . length ( ) < results [ i ] . length ( ) ) { results [ i ] = line ; } } } } scanner . close ( ) ; } for ( final String line : results ) { out . println ( line ) ; } out . close ( ) ; }
tr	3	private BufferedImage getView ( ) { if ( this . getWidth ( ) > 0 && this . getHeight ( ) > 0 ) { int mapSize = ( mapImage_Scaled . getHeight ( ) ) ; if ( viewPort . x + this . getWidth ( ) > mapSize ) { int moveXBy = viewPort . x + this . getWidth ( ) - mapSize ; moveView ( - moveXBy , 0 ) ; } if ( viewPort . y + this . getHeight ( ) > mapSize ) { int moveYBy = viewPort . y + this . getHeight ( ) - mapSize ; moveView ( 0 , - moveYBy ) ; } int windowHeight = this . getHeight ( ) ; int windowWidth = this . getWidth ( ) ; if ( this . getHeight ( ) > mapImage_Scaled . getHeight ( ) ) { windowHeight = mapImage_Scaled . getHeight ( ) ; viewPort . y = 0 ; } if ( this . getWidth ( ) > mapImage_Scaled . getWidth ( ) ) { windowWidth = mapImage_Scaled . getWidth ( ) ; viewPort . x = 0 ; } mapImage_View = null ; try { mapImage_View = mapImage_UnitAndBuildingsScaled . getSubimage ( viewPort . x , viewPort . y , windowWidth , windowHeight ) ; } catch ( Exception e ) { System . err . println ( "Error creating subview!" ) ; } } return mapImage_View ; }
tr	2	public JSONObject accumulate ( String key , Object value ) throws JSONException { testValidity ( value ) ; Object object = opt ( key ) ; if ( object == null ) { put ( key , value instanceof JSONArray ? new JSONArray ( ) . put ( value ) : value ) ; } else if ( object instanceof JSONArray ) { ( ( JSONArray ) object ) . put ( value ) ; } else { put ( key , new JSONArray ( ) . put ( object ) . put ( value ) ) ; } return this ; }
tr	2	public void closeUpvalues ( int index ) { int loopIndex = upvalues . size ( ) ; while ( -- loopIndex >= 0 ) { UpValue upvalue = upvalues . elementAt ( loopIndex ) ; if ( upvalue . getIndex ( ) < index ) return ; upvalue . close ( ) ; upvalues . removeElementAt ( loopIndex ) ; } }
tr	3	private void calculateMissing ( ) { if ( totalBytes > - 1 ) { if ( usedBytes > - 1 && freeBytes == - 1 ) { freeBytes = totalBytes - usedBytes ; } else if ( usedBytes == - 1 && freeBytes > - 1 ) { usedBytes = totalBytes - freeBytes ; } } }
tr	5X	public Individual run ( ) { int i , generation ; Individual offspring1 , offspring2 ; Individual . calculateAssignmentProbalityForDiefferentDepot ( problemInstance ) ; Individual . calculateProbalityForDiefferentVehicle ( problemInstance ) ; PopulationInitiator . initialisePopulation ( population , POPULATION_SIZE , problemInstance ) ; TotalCostCalculator . calculateCostofPopulation ( population , 0 , POPULATION_SIZE , loadPenaltyFactor , routeTimePenaltyFactor ) ; int continuosInjection = 0 ; double previousBest = - 1 ; double bestBeforeInjection = - 1 ; for ( generation = 0 ; generation < NUMBER_OF_GENERATION ; generation ++ ) { Solver . gatherExcelData ( population , POPULATION_SIZE , generation ) ; TotalCostCalculator . calculateCostofPopulation ( population , 0 , POPULATION_SIZE , loadPenaltyFactor , routeTimePenaltyFactor ) ; fussSelection . initialise ( population , false ) ; rouletteWheelSelection . initialise ( population , false ) ; i = 0 ; parent1 = population [ 0 ] ; parent2 = rouletteWheelSelection . getIndividual ( population ) ; offspring1 = new Individual ( problemInstance ) ; Uniform_VariedEdgeRecombnation_Crossover . crossOver_Uniform_VariedEdgeRecombination ( problemInstance , parent1 , parent2 , offspring1 ) ; offspringPopulation [ i ] = offspring1 ; i ++ ; while ( i < NUMBER_OF_OFFSPRING ) { parent1 = rouletteWheelSelection . getIndividual ( population ) ; parent2 = fussSelection . getIndividual ( population ) ; offspring1 = new Individual ( problemInstance ) ; Uniform_VariedEdgeRecombnation_Crossover . crossOver_Uniform_VariedEdgeRecombination ( problemInstance , parent1 , parent2 , offspring1 ) ; offspringPopulation [ i ] = offspring1 ; i ++ ; } TotalCostCalculator . calculateCostofPopulation ( offspringPopulation , 0 , NUMBER_OF_OFFSPRING , loadPenaltyFactor , routeTimePenaltyFactor ) ; Utility . concatPopulation ( parentOffspringTotalPopulation , population , offspringPopulation ) ; for ( int p = 0 ; p < parentOffspringTotalPopulation . length ; p ++ ) { if ( parentOffspringTotalPopulation [ p ] . validationTest ( ) == false ) { System . err . println ( "ERROR\nERROR\nERROR\nIndividual is invalid!!!" + " gen : " + generation + " index : " + p ) ; out . println ( "\n\nINVALID INDIVIDUAL : \n" ) ; parentOffspringTotalPopulation [ p ] . print ( ) ; return population [ 0 ] ; } } localImprovement . initialise ( parentOffspringTotalPopulation ) ; localImprovement . run ( parentOffspringTotalPopulation ) ; TotalCostCalculator . calculateCostofPopulation ( parentOffspringTotalPopulation , 0 , POPULATION_SIZE , loadPenaltyFactor , routeTimePenaltyFactor ) ; Utility . sort ( parentOffspringTotalPopulation ) ; for ( int p = 0 ; p < parentOffspringTotalPopulation . length - 1 ; p ++ ) { if ( parentOffspringTotalPopulation [ p ] . cost == parentOffspringTotalPopulation [ p + 1 ] . cost ) { if ( Individual . isDuplicate ( problemInstance , parentOffspringTotalPopulation [ p ] , parentOffspringTotalPopulation [ p + 1 ] ) ) { parentOffspringTotalPopulation [ p ] = new Individual ( problemInstance ) ; Initialise_ClosestDepot_GreedyCut . initialise ( parentOffspringTotalPopulation [ p ] ) ; TotalCostCalculator . calculateCost ( parentOffspringTotalPopulation [ p ] , loadPenaltyFactor , routeTimePenaltyFactor ) ; } } } Utility . sort ( parentOffspringTotalPopulation ) ; int elitistRatio = POPULATION_SIZE * 10 / 100 ; population [ 0 ] = parentOffspringTotalPopulation [ 0 ] ; int index2 = 1 ; int index1 = 1 ; while ( index1 < elitistRatio ) { population [ index1 ] = parentOffspringTotalPopulation [ index2 ] ; index1 ++ ; index2 ++ ; } Individual total [ ] = new Individual [ POPULATION_SIZE + NUMBER_OF_OFFSPRING - elitistRatio ] ; System . arraycopy ( parentOffspringTotalPopulation , elitistRatio , total , 0 , total . length ) ; survivalSelectionOperator . initialise ( total , true ) ; for ( i = elitistRatio ; i < POPULATION_SIZE ; i ++ ) { population [ i ] = survivalSelectionOperator . getIndividual ( total ) ; } Utility . sort ( population ) ; if ( Solver . singleRun ) { double tmpSum = 0 ; for ( int tmpi = 0 ; tmpi < POPULATION_SIZE ; tmpi ++ ) tmpSum += population [ tmpi ] . costWithPenalty ; System . out . println ( "Gen : " + generation + " Best : " + population [ 0 ] . costWithPenalty + " Feasibility : " + population [ 0 ] . isFeasible + " Avg : " + ( tmpSum / POPULATION_SIZE ) ) ; } } TotalCostCalculator . calculateCostofPopulation ( population , 0 , POPULATION_SIZE , loadPenaltyFactor , routeTimePenaltyFactor ) ; Utility . sort ( population ) ; Solver . gatherExcelData ( population , POPULATION_SIZE , generation ) ; if ( Solver . outputToFile ) { out . print ( "\n\n\n\n\n--------------------------------------------------\n" ) ; out . print ( "\n\n\nFINAL POPULATION\n\n" ) ; for ( i = 0 ; i < POPULATION_SIZE ; i ++ ) { out . println ( "\n\nIndividual : " + i ) ; population [ i ] . print ( ) ; } } System . out . println ( "Gen : " + generation + " Best : " + population [ 0 ] . costWithPenalty + " Feasibility : " + population [ 0 ] . isFeasible ) ; return population [ 0 ] ; }
tr	3	private void getReply ( DatagramSocket socket ) { while ( true ) { try { byte [ ] replybuffer = new byte [ 1024 ] ; DatagramPacket reply = new DatagramPacket ( replybuffer , replybuffer . length ) ; socket . receive ( reply ) ; System . out . println ( new String ( reply . getData ( ) ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } }
tr	2	public void renderLow ( Parameters params ) { if ( renderer == null ) { throw new IllegalStateException ( "renderer not set" ) ; } image = newImage ( ) ; showImage ( image ) ; int width = image . getWidth ( null ) ; int height = image . getHeight ( null ) ; params . adjustAspect ( width , height ) ; setParameters ( params ) ; imageComponent . setCursor ( waitCursor ) ; renderThread = new Thread ( new RenderRunner ( image , params , renderer ) ) ; renderThread . start ( ) ; }
tr	4	private void jButtonCheckRoomsActionPerformed ( java . awt . event . ActionEvent evt ) { dflRooms . removeAllElements ( ) ; if ( "" . equals ( jXDatePickercheckRoomArrival . getEditor ( ) . getText ( ) ) || "" . equals ( jXDatePickercheckRoomDeparture . getEditor ( ) . getText ( ) ) ) { JOptionPane . showMessageDialog ( rootPane , "Make sure both arrival and departure date are entered and in the correct format" ) ; } else { DateFormat dateFormat = new SimpleDateFormat ( "yyyy-MM-dd" ) ; jXDatePickercheckRoomArrival . setFormats ( dateFormat ) ; jXDatePickercheckRoomDeparture . setFormats ( dateFormat ) ; String arrival = dateFormat . format ( jXDatePickercheckRoomArrival . getDate ( ) ) . toString ( ) ; String departure = dateFormat . format ( jXDatePickercheckRoomDeparture . getDate ( ) ) . toString ( ) ; r = con . getRoomsList ( arrival , departure ) ; if ( r != null ) { for ( int i = 0 ; i < r . size ( ) ; i ++ ) { dflRooms . addElement ( r . get ( i ) . toString ( ) ) ; } } else { Statuslabel . setText ( "Could not get Rooms" ) ; } con . resetRooms ( ) ; } }
tr	1	private static void testWriteUnsignedInt ( ByteArrayTool baa ) { byte [ ] b = new byte [ 128 ] ; baa . putUnsignedInt ( b , 43 , fedaabed ) ; assertEquals ( ( byte ) ed , b [ 43 ] ) ; assertEquals ( ( byte ) ab , b [ 44 ] ) ; assertEquals ( ( byte ) da , b [ 45 ] ) ; assertEquals ( ( byte ) fe , b [ 46 ] ) ; baa . putUnsignedInt ( b , 47 , 2a ) ; assertEquals ( ( byte ) 2a , b [ 47 ] ) ; assertEquals ( ( byte ) 00 , b [ 48 ] ) ; assertEquals ( ( byte ) 00 , b [ 49 ] ) ; assertEquals ( ( byte ) 00 , b [ 50 ] ) ; }
tr	2	public void setPopulation ( Population p ) { for ( int i = 0 ; i < operators . size ( ) ; ++ i ) { operators . get ( i ) . setPopulation ( p ) ; } }
tr	3	public static < T > FunctionExecutor < T > createGet ( final FeatureDefinition < ? extends Property < T >> propertyDefinition ) { return new FunctionExecutor < T > ( ) { @ Override public T invoke ( FunctionInvocation < T > invocation , Object ... arguments ) throws ExecutorInvocationException { invocation . next ( arguments ) ; return invocation . getHolder ( ) . get ( propertyDefinition ) . get ( ) ; } } ; }
tr	1	@ Override public String toString ( ) { String dato = this . codigo + "-" + cliente + "-" + saldo + " lps en saldo." ; return dato ; }
tr	5X	private String [ ] getStringArray ( JComponent comp ) { if ( comp instanceof JComboBox ) { JComboBox comboBox = ( JComboBox ) comp ; List < String > list = new ArrayList < String > ( ) ; if ( comboBox . getItemCount ( ) > 0 ) { for ( int i = 0 ; i < comboBox . getItemCount ( ) ; i ++ ) { if ( ! isEmpty ( comboBox . getItemAt ( i ) ) ) { add ( list , comboBox . getItemAt ( i ) ) ; } else if ( ! isEmpty ( comboBox . getSelectedItem ( ) ) ) { add ( list , comboBox . getSelectedItem ( ) ) ; } } if ( list . size ( ) > 0 ) { return list . toArray ( new String [ 1 ] ) ; } else { return null ; } } else { if ( ! isEmpty ( comboBox . getSelectedItem ( ) ) ) { add ( list , comboBox . getSelectedItem ( ) ) ; return list . toArray ( new String [ 1 ] ) ; } } } return null ; }
tr	3	public final ProgramaContext programa ( ) throws RecognitionException { ProgramaContext _localctx = new ProgramaContext ( _ctx , getState ( ) ) ; enterRule ( _localctx , 0 , RULE_programa ) ; try { enterOuterAlt ( _localctx , 1 ) ; { setState ( 10 ) ; seqComando ( ) ; } } catch ( RecognitionException re ) { _localctx . exception = re ; _errHandler . reportError ( this , re ) ; _errHandler . recover ( this , re ) ; } finally { exitRule ( ) ; } return _localctx ; }
tr	2	@ Override public void run ( ) { try { instance . start ( ) ; } catch ( InterruptedException e ) { System . out . println ( Thread . currentThread ( ) . getName ( ) + " interrupted" ) ; } }
tr	3	public ListNode deleteDuplicates ( ListNode head ) { if ( head == null ) return null ; ListNode cur = head ; ListNode last = head ; int value = head . val ; while ( cur . next != null ) { cur = cur . next ; if ( cur . val != value ) { if ( last . next != cur ) last . next = cur ; last = cur ; value = cur . val ; } } if ( last != cur ) { last . next = null ; } return head ; }
tr	2	public static void changeSize ( final File file , final long newSize ) { try { RandomAccessFile randomAccessFile = new RandomAccessFile ( file , "rw" ) ; randomAccessFile . setLength ( newSize ) ; randomAccessFile . close ( ) ; } catch ( FileNotFoundException ex ) { Logger . getLogger ( files . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; } catch ( IOException ex ) { Logger . getLogger ( files . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; } }
tr	3	public static void main ( String [ ] args ) { final int [ ] subscripts = new int [ ] { 1 , 10 , 100 , 1000 , 10000 , 100000 , 1000000 } ; final int last = subscripts [ subscripts . length - 1 ] ; String s = null ; long p = 1 ; int ls = 0 ; int j = 0 ; int l = 0 ; for ( int i = 1 ; i < 1000000 ; i ++ ) { s = String . valueOf ( i ) ; ls = s . length ( ) ; l += ls ; if ( l >= subscripts [ j ] ) { final int n = ls - ( l - subscripts [ j ] ) - 1 ; final int d = Integer . parseInt ( s . substring ( n , n + 1 ) ) ; p *= ( long ) d ; j ++ ; } if ( l > last ) { break ; } } System . out . println ( "# p = " + p ) ; }
tr	1	public Creditos ( ) { JOptionPane . showMessageDialog ( null , message , "About..." , JOptionPane . INFORMATION_MESSAGE ) ; }
tr	2	private static void comparable ( ) { Set < DayOfTheWeek > dayOfTheWeeks = new TreeSet < > ( ) ; dayOfTheWeeks . add ( FRIDAY ) ; dayOfTheWeeks . add ( MONDAY ) ; dayOfTheWeeks . add ( SATURDAY ) ; for ( DayOfTheWeek dayOfTheWeek : dayOfTheWeeks ) { System . out . println ( dayOfTheWeek . display ( ) ) ; } }
tr	4	private JPanel getCenterPanel ( ) { if ( centerPanel == null ) { centerPanel = new JPanel ( ) ; centerPanel . setLayout ( new MigLayout ( "gap 0px 0px" , "[][][]" , "[][][][][][]" ) ) ; for ( int i = 0 ; i < 10 ; i ++ ) { for ( int j = 0 ; j < 10 ; j ++ ) { buttonGameBoard [ i ] [ j ] . setSize ( 40 , 40 ) ; centerPanel . add ( buttonGameBoard [ i ] [ j ] , "cell " + j + " " + i + "" ) ; } } } return centerPanel ; }
tr	4	public byte [ ] toBytes ( ) throws IOException { ByteArrayOutputStream bos = new ByteArrayOutputStream ( ) ; ObjectOutput out = null ; try { out = new ObjectOutputStream ( bos ) ; out . writeObject ( this ) ; byte [ ] yourBytes = bos . toByteArray ( ) ; return yourBytes ; } finally { try { if ( out != null ) { out . close ( ) ; } } catch ( IOException ex ) { } try { bos . close ( ) ; } catch ( IOException ex ) { } } }
tr	4	private void parsePacket ( ) throws MpegDecodeException , IOException { Statistics . startLog ( PARSE_PACKET_STRING ) ; System . out . println ( "Parsing packet" ) ; if ( m_ioTool . getBits ( 24 ) != 1 ) { Debug . println ( Debug . ERROR , "Synchronization error in packet" ) ; throw new MpegDecodeException ( "Synchronization error in packet" ) ; } int streamId = m_ioTool . getBits ( 8 ) ; int pktLength = m_ioTool . getBits ( 16 ) ; if ( streamId != PRIVATE_STREAM2 ) { pktLength -= parseTimeStamps ( ) ; } if ( ( streamId & E0 ) == C0 ) { decodeAudio ( pktLength ) ; } else { if ( ( F0 & streamId ) == E0 ) { decodeVideo ( pktLength ) ; } else if ( ( F0 & streamId ) == F0 ) { ; } else { switch ( streamId ) { case RESERVED_STREAM : case PRIVATE_STREAM1 : case PADDING_STREAM : case PRIVATE_STREAM2 : break ; default : Debug . println ( Debug . ERROR , "Unknown Stream: " + streamId ) ; throw new MpegDecodeException ( "Unknown Stream: " + streamId ) ; } } } Statistics . endLog ( PARSE_PACKET_STRING ) ; }
tr	5X	private static void horizLeftRight ( Board b , ArrayList < Tuple > movesToBlock , ArrayList < Tuple > movesToMake ) { int xIndex ; int yIndex ; Game game = b . getGame ( ) ; int player1Color = game . getPlayer1Color ( ) ; int player2Color = game . getPlayer2Color ( ) ; for ( int row = 0 ; row < 6 ; row ++ ) { for ( int col = 0 ; col < 4 ; col ++ ) { if ( player1Color == b . getGameGridCircle ( col , row ) . getState ( ) && player1Color == b . getGameGridCircle ( col + 1 , row ) . getState ( ) && player1Color == b . getGameGridCircle ( col + 2 , row ) . getState ( ) && ( b . getGameGridCircle ( col + 3 , row ) . getState ( ) == 0 ) ) { xIndex = col + 3 ; yIndex = row ; checkAndAdd ( b , movesToBlock , xIndex , yIndex , 2 ) ; } if ( player2Color == b . getGameGridCircle ( col , row ) . getState ( ) && player2Color == b . getGameGridCircle ( col + 1 , row ) . getState ( ) && player2Color == b . getGameGridCircle ( col + 2 , row ) . getState ( ) && ( b . getGameGridCircle ( col + 3 , row ) . getState ( ) == 0 ) ) { xIndex = col + 3 ; yIndex = row ; checkAndAdd ( b , movesToMake , xIndex , yIndex , 2 ) ; } if ( player2Color == b . getGameGridCircle ( col , row ) . getState ( ) && player2Color == b . getGameGridCircle ( col + 1 , row ) . getState ( ) && ( b . getGameGridCircle ( col + 2 , row ) . getState ( ) == 0 ) ) { if ( b . getGameGridCircle ( col + 3 , row ) . getState ( ) == 0 ) { xIndex = col + 2 ; yIndex = row ; checkAndAdd ( b , movesToMake , xIndex , yIndex , 1 ) ; } if ( b . getGameGridCircle ( col + 3 , row ) . getState ( ) == player2Color ) { xIndex = col + 2 ; yIndex = row ; checkAndAdd ( b , movesToMake , xIndex , yIndex , 2 ) ; } } } } }
tr	4	public User Authenticate ( String username , String password ) { DBConnection connection = DBConnection . sharedInstance ( ) ; ResultSet rs = connection . performQuery ( " SELECT * FROM users WHERE username = \"" + username + "\"" ) ; try { if ( rs . next ( ) ) { password = GenerateHash ( password ) ; if ( rs . getString ( "password" ) . equals ( password ) ) { UserFactory factory = UserFactory . sharedInstance ( ) ; User user = factory . getUserFromID ( rs . getInt ( "id" ) ) ; return user ; } } } catch ( SQLException e ) { e . printStackTrace ( ) ; return null ; } return null ; }
tr	3	public void load ( Runnable runnable ) { while ( true ) { try { executor . execute ( runnable ) ; break ; } catch ( RejectedExecutionException e ) { Macro . sleep ( 500 ) ; } } }
tr	2	public void draw ( ) { while ( ! ( glapi . isCloseRequest ( ) || Keyboard . isKeyDown ( Keyboard . KEY_Q ) ) ) { glapi . defaultMovements ( ) ; glapi . glLoopBegin ( ) ; glapi . glLoopEnd ( ) ; } glapi . destroyDisplay ( ) ; }
tr	4	public void randommovement ( ) { if ( anim > 39 ) { if ( ! walking ) { number = random . nextInt ( 3 ) ; if ( number == 1 ) { randir = random . nextInt ( 4 ) ; int randis = random . nextInt ( 25 ) ; if ( randir == 0 ) yp += - randis ; if ( randir == 1 ) yp += randis ; if ( randir == 2 ) xp += - randis ; if ( randir == 3 ) xp += randis ; } } } if ( yp != 0 ) { if ( yp > 0 ) { ya ++ ; yp -- ; } if ( yp < 0 ) { ya -- ; yp ++ ; } } if ( xp != 0 ) { if ( xp > 0 ) { xa ++ ; xp -- ; } if ( xp < 0 ) { xa -- ; xp ++ ; } } }
tr	4	public JSONWriter key ( String string ) throws JSONException { if ( string == null ) { throw new JSONException ( "Null key." ) ; } if ( this . mode == k ) { try { this . stack [ this . top - 1 ] . putOnce ( string , boolean . true ) ; if ( this . , ) { this . writer . write (   ) ; } this . writer . write ( JSONObject . quote ( string ) ) ; this . writer . write ( : ) ; this . , = false ; this . mode = o ; return this ; } catch ( IOException e ) { throw new JSONException ( e ) ; } } throw new JSONException ( "Misplaced key." ) ; }
tr	2	public void divide ( int ncol , int nrow ) { canvasPads . setSize ( this . getSize ( ) . width , this . getSize ( ) . height , ncol , nrow ) ; int ncharts = canvasPads . getNPads ( ) ; series . clear ( ) ; for ( int loop = 0 ; loop < ncharts ; loop ++ ) { ScGroupSeries chart = new ScGroupSeries ( new ScRegion ( canvasPads . getX ( loop ) , canvasPads . getY ( loop ) , canvasPads . getWidth ( loop ) , canvasPads . getHeight ( loop ) ) ) ; series . add ( chart ) ; } }
tr	1	public double getUnnormalisedInterpolatedHeightAt ( Vec pp ) { return getInterpolatedHeightAt ( pp ) * range + min ; }
tr	2	public byte [ ] decompress ( ) throws IOException { InflaterInputStream in = new InflaterInputStream ( getInStream ( ) ) ; ByteArrayOutputStream bout = new ByteArrayOutputStream ( 512 ) ; int b ; while ( ( b = in . read ( ) ) != - 1 ) { bout . write ( b ) ; } in . close ( ) ; bout . close ( ) ; return bout . toByteArray ( ) ; }
tr	3	public boolean matches ( KeyComponent other , Map < String , Object > bindings ) { List < KeyComponent > keyComponents = ( ( CompositeComponent ) other ) . components ; List < KeyComponent > ruleComponents = this . components ; if ( keyComponents . size ( ) != ruleComponents . size ( ) ) { return false ; } for ( int i = 0 ; i < keyComponents . size ( ) ; i ++ ) { if ( ! ruleComponents . get ( i ) . matches ( keyComponents . get ( i ) , bindings ) ) { return false ; } } return true ; }
tr	4	public Klas getKlas ( long klas_id ) { Klas klas = null ; try { PreparedStatement klasStatement = manager . prepareStatement ( "SELECT * FROM klassen WHERE id = ?" ) ; klasStatement . setLong ( 1 , klas_id ) ; ResultSet klasResult = klasStatement . executeQuery ( ) ; if ( klasResult . next ( ) ) { klas = new Klas ( klasResult . getLong ( 1 ) , klasResult . getString ( 2 ) ) ; PreparedStatement leerlingenKlas = manager . prepareStatement ( "SELECT leerling_id FROM leerling_klas WHERE klas_id = ?" ) ; leerlingenKlas . setLong ( 1 , klas_id ) ; ResultSet leerlingIds = leerlingenKlas . executeQuery ( ) ; while ( leerlingIds . next ( ) ) { klas . addStudent ( getUser ( leerlingIds . getLong ( 1 ) ) ) ; } for ( Vak vak : getVakkenVanKlas ( klas_id ) ) { klas . addVak ( vak ) ; } } } catch ( SQLException e ) { e . printStackTrace ( ) ; } return klas ; }
tr	1	public boolean blocksLineOfSight ( ) { return false ; }
tr	1	@ Override public FullVersion getVersion ( ) { return version ; }
tr	5X	private void openAddMeterPanel ( ) { boolean failure = false ; String options [ ] = { "Create" , "Cancel" } ; int result = JOptionPane . showOptionDialog ( null , addMeterPanel , "Add Meter to Account " + getSelectedAccountID ( ) , JOptionPane . DEFAULT_OPTION , JOptionPane . PLAIN_MESSAGE , null , options , options [ 0 ] ) ; if ( result == 0 ) { Meter m = getMeterFromAddMeterPanel ( ) ; Account temp = getSelectedAccount ( ) ; if ( m != null ) { if ( temp instanceof ResidentialAccount ) { ResidentialAccount resAcc = ( ResidentialAccount ) temp ; if ( resAcc . getMeter ( ) != null ) { boolean overWrite = confirmResidentialAccountConflict ( ) ; if ( ! overWrite ) return ; } } else if ( temp . hasMeter ( m . getMeterID ( ) ) ) { failure = true ; } } else { failure = true ; } if ( ! failure ) { temp . addMeter ( m ) ; System . out . println ( m . getMeterID ( ) ) ; showMetersInMeterTable ( temp ) ; } else { failToCreateMeterDialog ( ) ; } } }
tr	2	public void update ( float deltaTimeElapsedMs ) { speedX = bg1 . getSpeedX ( ) * 5 ; tileX += Util . factorByElapsedTimeMs ( speedX , deltaTimeElapsedMs ) ; tileBoundary . setBounds ( tileX , tileY , 40 , 40 ) ; if ( tileBoundary . intersects ( Player . perimeter ) && type != 0 ) { checkHorizontalCollision ( ) ; checkVerticalCollision ( ) ; } }
tr	1	public void setAddressId ( int value ) { addressId = value ; }
tr	4	public double calScore ( Query query , Document doc ) { Vector < String > qv = query . _tokens ; Vector < String > docTokens = ( ( DocumentFull ) doc ) . getConvertedTitleTokens ( ) ; docTokens . addAll ( ( ( DocumentFull ) doc ) . getConvertedBodyTokens ( ) ) ; double score = 0.0 ; if ( qv . size ( ) == 1 ) { for ( String queryToken : query . _tokens ) { for ( String docToken : docTokens ) { if ( queryToken . equals ( docToken ) ) score ++ ; } } } else { for ( int i = 0 ; i < qv . size ( ) - 1 ; i ++ ) { if ( docTokens . size ( ) == 1 ) { if ( qv . get ( i ) . equals ( docTokens . get ( 0 ) ) ) score ++ ; } else { for ( int j = 0 ; j < docTokens . size ( ) - 1 ; j ++ ) if ( qv . get ( i ) . equals ( docTokens . get ( j ) ) && qv . get ( i + 1 ) . equals ( docTokens . get ( j + 1 ) ) ) score ++ ; } } } return score ; }
tr	3	@ Override public Object getValueAt ( int row , int column ) { Vehicle vehicle = vehicles . elementAt ( row ) ; switch ( column ) { case 0 : return vehicle . getLicencePlate ( ) ; case 1 : return vehicle . getStartDate ( ) ; case 2 : return vehicle . getOwner ( ) . getFirstName ( ) + " " + vehicle . getOwner ( ) . getFamilyName ( ) . toUpperCase ( ) ; case 3 : return vehicle . getModel ( ) . getDesignation ( ) ; case 4 : if ( this . deleteIcon == null ) { return "Supprimer" ; } return this . deleteIcon ; default : break ; } return null ; }
tr	2	private int getMaxLen ( ) throws ValidationException { String text = this . maxLenTextField . getText ( ) ; try { int M = Integer . parseInt ( text ) ; return M ; } catch ( Exception e ) { String message = "The maximum length is not an integer number." ; throw new ValidationException ( message , "BAD_NUMBER" ) ; } }
tr	1	@ Override public void init ( GameContainer gc , StateBasedGame sbg ) throws SlickException { this . sbg = sbg ; logo = new Image ( "data/SVULogo.png" ) ; newgame = new Image ( "data/newgame.png" ) ; continuegame = new Image ( "data/loadgame.png" ) ; options = new Image ( "data/options.png" ) ; quit = new Image ( "data/quitgame.png" ) ; newgameroll = new Image ( "data/newgameglow.png" ) ; continuegameroll = new Image ( "data/loadgameglow.png" ) ; optionsroll = new Image ( "data/optionsglow.png" ) ; quitroll = new Image ( "data/quitgameglow.png" ) ; int logowidth = logo . getWidth ( ) ; logox = ( gc . getWidth ( ) - logowidth ) / 2 ; newgamex = ( gc . getWidth ( ) - newgame . getWidth ( ) ) / 2 ; continuex = ( gc . getWidth ( ) - continuegame . getWidth ( ) ) / 2 ; optionsx = ( gc . getWidth ( ) - options . getWidth ( ) ) / 2 ; quitx = ( gc . getWidth ( ) - quit . getWidth ( ) ) / 2 ; areas [ 0 ] = new MouseOverArea ( gc , newgame , newgamex , 300 , this ) ; areas [ 0 ] . setMouseOverImage ( newgameroll ) ; areas [ 1 ] = new MouseOverArea ( gc , continuegame , continuex , 350 , this ) ; areas [ 1 ] . setMouseOverImage ( continuegameroll ) ; areas [ 2 ] = new MouseOverArea ( gc , options , optionsx , 400 , this ) ; areas [ 2 ] . setMouseOverImage ( optionsroll ) ; areas [ 3 ] = new MouseOverArea ( gc , quit , quitx , 450 , this ) ; areas [ 3 ] . setMouseOverImage ( quitroll ) ; }
tr	1	public Holder ( ) { System . out . println ( "Holder created" ) ; }
tr	2	public void switchFullscreen ( ) { if ( fullscreen == false ) { throw new IllegalStateException ( "This window not supports fullscreen mode!" ) ; } if ( state == WindowState . WINDOW ) { Rectangle rc = this . getBounds ( ) ; boolean resizable = this . isResizable ( ) ; this . properties = new FrameProperties ( getX ( ) , getY ( ) , ( int ) rc . getWidth ( ) , ( int ) rc . getHeight ( ) , resizable ) ; } if ( device . getFullScreenWindow ( ) == null ) { FrameProperties properties = new FrameProperties ( 0 , 0 , getFullWidth ( ) , getFullHeight ( ) , false ) ; this . setExtendedState ( JFrame . MAXIMIZED_BOTH ) ; this . state = WindowState . FULLSCREEN ; properties . append ( this ) ; device . setFullScreenWindow ( this ) ; updateDisplay ( ) ; return ; } device . setFullScreenWindow ( null ) ; this . setExtendedState ( JFrame . NORMAL ) ; this . state = WindowState . WINDOW ; properties . append ( this ) ; updateDisplay ( ) ; }
tr	2	public boolean addMeter ( Meter meter ) { int meterID = meter . getMeterID ( ) ; if ( meters . containsKey ( meterID ) ) { return false ; } else meters . put ( meterID , meter ) ; return true ; }
tr	4	void deleteTime ( Component dialogParent , Time time ) { if ( time != null ) { if ( AlertMessages . deleteTimeConfirmation ( dialogParent , time ) ) { try { timeDao . deleteTime ( Dao . getConnection ( ) , time ) ; timeDialog . setTime ( null ) ; timeListDialog . selectPreviousRow ( ) ; timeDialog . setVisible ( false ) ; } catch ( SQLException ex ) { ErrorMessages . sqlExceptionError ( "deleteTime()" , ex ) ; } catch ( ClassNotFoundException ex ) { ErrorMessages . classNotFoundError ( "deleteTime()" , ex ) ; } } } else { AlertMessages . noTimeSelectedInTableForDeleting ( timeListDialog ) ; } }
tr	4	@ Override public void doInBackground ( ) { int Slashes = this . Address . indexOf ( / ) ; int Dots = this . Address . indexOf ( . ) ; if ( ( Dots >= 1 ) && ( Slashes > 0 ) && ( Slashes < this . Address . length ( ) - 1 ) ) { try { URLConnection Connection = new URL ( "http://" + this . Address ) . openConnection ( ) ; int TotalSize = Connection . getContentLength ( ) ; BufferedInputStream Input = new BufferedInputStream ( Connection . getInputStream ( ) ) ; FileOutputStream Output = new FileOutputStream ( this . OutputFile ) ; int Read ; double TotalRead = 0 ; while ( ( Read = Input . read ( ) ) != - 1 ) { Output . write ( Read ) ; ++ TotalRead ; this . setProgress ( ( int ) ( 100.0 / TotalSize * TotalRead ) ) ; } Input . close ( ) ; Output . close ( ) ; String Version = this . Address . substring ( this . Address . indexOf ( _ ) + 1 , this . Address . lastIndexOf ( ".jar" ) ) . replace ( _ , . ) . trim ( ) ; this . SetCurrentVersion ( Version ) ; } catch ( Exception e ) { new SPopup ( new SPopupData ( e ) ) ; } this . UpdateFrame . CloseFrame ( ) ; } else { this . ErrorPopup = new SPopup ( new SPopupData ( new SException ( "Invalid Address" ) ) ) ; this . ErrorPopup . InjectActionListener ( this ) ; } return null ; }
tr	4	private int getGameScore ( Game game ) { int result = 0 ; int tagworth = 1 ; int gameworth = 3 ; for ( Player p : activePlayers ) { if ( p . doesLikeGame ( game ) ) { result += gameworth ; } for ( Tag tag : game . getTags ( ) ) { if ( p . doesLikeTag ( tag ) ) { result += tagworth ; } } } return result ; }
tr	1	protected void informNextPlayerToGo ( String currentIP , int currentPort ) { int nextPlayerToGo = getNextTurnPlayerID ( pg . getPlayerIndex ( currentIP , currentPort ) ) ; srvrWaitingOnPlayerIndex = nextPlayerToGo ; pg . broadcastMessage ( "sTurn " + pg . getPlayer ( nextPlayerToGo ) . getNickName ( ) ) ; }
tr	3	public void loadFile ( ) { JFileChooser chooser = new JFileChooser ( executableDir ) ; FileNameExtensionFilter filter = new FileNameExtensionFilter ( "Pippin Executable Files" , "pipe" ) ; chooser . setFileFilter ( filter ) ; int openOK = chooser . showOpenDialog ( null ) ; if ( openOK == JFileChooser . APPROVE_OPTION ) { currentlyExecutingFile = chooser . getSelectedFile ( ) ; } if ( currentlyExecutingFile . exists ( ) ) { executableDir = currentlyExecutingFile . getAbsolutePath ( ) ; executableDir = executableDir . replace ( \ , / ) ; int lastSlash = executableDir . lastIndexOf ( / ) ; executableDir = executableDir . substring ( 0 , lastSlash + 1 ) ; try { properties . setProperty ( "SourceDirectory" , sourceDir ) ; properties . setProperty ( "ExecutableDirectory" , executableDir ) ; properties . store ( new FileOutputStream ( "propertyfile.txt" ) , "File locations" ) ; } catch ( Exception e ) { System . out . println ( "Error writing properties file" ) ; } } finalLoad_ReloadStep ( ) ; setChanged ( ) ; notifyObservers ( ) ; }
tr	4	private void randomPlayerGroup ( int start , int end ) { Game game = new Game ( ) ; RandomPlayer randomPlayer = new RandomPlayer ( ) ; for ( int i = start ; i < end && i < players . size ( ) ; i ++ ) { PlayerEnlist player = players . get ( i ) ; for ( int j = 0 ; j < groupSize - 1 ; j ++ ) { game . startGame ( player . player , randomPlayer ) ; player . newMatch ( ) ; if ( game . colourOfWinner ( ) == Game . FIRST_PLAYER_COLOUR ) { player . newRandomMatchWon ( ) ; } else if ( game . colourOfWinner ( ) == Game . EMPTY_STONE_COLOUR ) { player . newRandomMatchDraw ( ) ; } game . startGame ( randomPlayer , player . player ) ; player . newMatch ( ) ; if ( game . colourOfWinner ( ) == Game . SECOND_PLAYER_COLOUR ) { player . newRandomMatchWon ( ) ; } else if ( game . colourOfWinner ( ) == Game . EMPTY_STONE_COLOUR ) { player . newRandomMatchDraw ( ) ; } } } }
tr	2	@ Test public void acceptedTestAStar ( ) { Automaton a = new RegExp ( "a*" ) . toAutomaton ( ) ; String [ ] expected = { "" , "a" , "aa" , "aaa" , "aaaa" , "aaaaa" , "aaaaaa" , "aaaaaaa" , "aaaaaaaa" , "aaaaaaaaa" } ; int i = 0 ; for ( String s : AutomatonHelper . accepted ( a , 10 ) ) { assertEquals ( expected [ i ++ ] , s ) ; } }
tr	3	public BacklogBean loadId ( BacklogBean oBacklog ) throws ServletException { try { if ( request . getParameter ( "id" ) != null ) { oBacklog . setId ( Integer . parseInt ( request . getParameter ( "id" ) ) ) ; } else { oBacklog . setId ( 0 ) ; } } catch ( NumberFormatException e ) { throw new ServletException ( "Controller: Error: loadId: Formato de datos en par\u00E1metros incorrecto " + e . getMessage ( ) ) ; } return oBacklog ; }
tr	3	public void run ( ) { for ( String name : names ) { Apple apple = new Apple ( name ) ; dispatcher . dataReceived ( apple ) ; System . out . println ( "Built apple: " + apple ) ; try { Thread . sleep ( 900 ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } } dispatcher . dataReceived ( new Key ( all ( Apple . class ) ) ) ; }
tr	2	public List < SchoolVO > getSchools ( ) { if ( schools == null ) { schools = new ArrayList < SchoolVO > ( ) ; } return this . schools ; }
tr	5X	private boolean r_mark_suffix_with_optional_n_consonant ( ) { int v_1 ; int v_2 ; int v_3 ; int v_4 ; int v_5 ; int v_6 ; int v_7 ; lab0 : do { v_1 = limit - cursor ; lab1 : do { v_2 = limit - cursor ; if ( ! ( eq_s_b ( 1 , "n" ) ) ) { break lab1 ; } cursor = limit - v_2 ; if ( cursor <= limit_backward ) { break lab1 ; } cursor -- ; v_3 = limit - cursor ; if ( ! ( in_grouping_b ( g_vowel , 97 , 305 ) ) ) { break lab1 ; } cursor = limit - v_3 ; break lab0 ; } while ( false ) ; cursor = limit - v_1 ; { v_4 = limit - cursor ; lab2 : do { v_5 = limit - cursor ; if ( ! ( eq_s_b ( 1 , "n" ) ) ) { break lab2 ; } cursor = limit - v_5 ; return false ; } while ( false ) ; cursor = limit - v_4 ; } v_6 = limit - cursor ; if ( cursor <= limit_backward ) { return false ; } cursor -- ; v_7 = limit - cursor ; if ( ! ( in_grouping_b ( g_vowel , 97 , 305 ) ) ) { return false ; } cursor = limit - v_7 ; cursor = limit - v_6 ; } while ( false ) ; return true ; }
tr	2	public void update ( ) { super . update ( ) ; if ( this . isClicked ( ) && ( Timer . getTime ( ) - this . lastClick ) > 200 ) { this . state = ! this . state ; this . lastClick = Timer . getTime ( ) ; } }
tr	4	public static void initConfig ( String path ) { FileInputStream fis = null ; try { fis = new FileInputStream ( path ) ; SYSTEM_CONFIG . load ( fis ) ; } catch ( Exception e ) { logger . error ( "System config file init fail !" , e ) ; } finally { if ( fis != null ) { try { fis . close ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } } }
tr	5X	public void updateRender ( ) { GridSquare [ ] [ ] gridData = controller . getGrid ( ) ; for ( int col = 0 ; col < gridData . length ; col ++ ) { for ( int row = 0 ; row < gridData [ col ] . length ; row ++ ) { String text = "" ; if ( gridData [ col ] [ row ] . player == EPlayer . None ) text += "-" ; else if ( gridData [ col ] [ row ] . player == EPlayer . P1 ) text += "o" ; else text += "x" ; if ( gridData [ col ] [ row ] . turnNumber >= 0 ) text += gridData [ col ] [ row ] . turnNumber . toString ( ) ; if ( gridData [ col ] [ row ] . undefinedTurns . size ( ) > 0 ) { text += "(" ; for ( Integer it : gridData [ col ] [ row ] . undefinedTurns . keySet ( ) ) { if ( gridData [ col ] [ row ] . undefinedTurns . get ( it ) == EPlayer . None ) text += "-" ; else if ( gridData [ col ] [ row ] . undefinedTurns . get ( it ) == EPlayer . P1 ) text += "o" ; else text += "x" ; if ( it >= 0 ) text += it . toString ( ) ; } text += ")" ; } gridBtn [ col ] [ row ] . setText ( text ) ; } } }
tr	2	private void populateDto ( Msg dto , ResultSet rs ) throws SQLException { dto . setIdMsg ( new Integer ( rs . getInt ( COLUMN_ID_MSG ) ) ) ; try { dto . setMailer ( new UserDaoImpl ( ) . findByPrimaryKey ( rs . getString ( COLUMN_MAILER ) ) ) ; } catch ( UserDaoException e3 ) { e3 . printStackTrace ( ) ; } try { dto . setRecipient ( new UserDaoImpl ( ) . findByPrimaryKey ( rs . getString ( COLUMN_RECIPIENT ) ) ) ; } catch ( UserDaoException e2 ) { e2 . printStackTrace ( ) ; } dto . setHeadMsg ( rs . getString ( COLUMN_HEAD_MSG ) ) ; dto . setBodyMsg ( rs . getString ( COLUMN_BODY_MSG ) ) ; try { dto . setStatusMsg ( new MsgStatusDaoImpl ( ) . findByPrimaryKey ( rs . getString ( COLUMN_STATUS_MSG ) ) ) ; } catch ( MsgStatusDaoException e1 ) { e1 . printStackTrace ( ) ; } try { dto . setTypeMsg ( new MsgTypeDaoImpl ( ) . findByPrimaryKey ( rs . getString ( COLUMN_TYPE_MSG ) ) ) ; } catch ( MsgTypeDaoException e ) { e . printStackTrace ( ) ; } dto . setSendOffDate ( rs . getTimestamp ( COLUMN_SEND_OFF_DATE ) ) ; }
tr	3	public ListNode reverseKGroup1 ( ListNode head , int k ) { ListNode curr = head ; int count = 0 ; while ( curr != null && count != k ) { curr = curr . next ; count ++ ; } if ( count == k ) { curr = reverseKGroup ( curr , k ) ; while ( count -- > 0 ) { ListNode tmp = head . next ; head . next = curr ; curr = head ; head = tmp ; } head = curr ; } return head ; }
tr	1	public void setTopicsService ( TopicsService topicsService ) { this . topicsService = topicsService ; }
tr	2	private void setColunas ( ArrayList < EstruturaTabela > estruturaTabela ) { colunas = new String [ estruturaTabela . size ( ) ] ; Iterator iterator = estruturaTabela . iterator ( ) ; int i = 0 ; while ( iterator . hasNext ( ) ) { EstruturaTabela est = ( EstruturaTabela ) iterator . next ( ) ; colunas [ i ] = est . getCampo ( ) ; i ++ ; } }
tr	2	@ Override public BigDecimal evaluate ( String mathExpression ) throws EvaluationException { EvaluationContext context = new EvaluationContext ( mathExpression ) ; try { return run ( context ) ; } catch ( Exception ex ) { throw new EvaluationException ( ex . getMessage ( ) , context . getCurrentPosition ( ) ) ; } }
tr	3	private CcsContext load ( String name ) throws IOException { ImportResolver resolver = new ImportResolver ( ) { @ Override public InputStream resolve ( String uri ) { return getClass ( ) . getResourceAsStream ( "/" + uri ) ; } } ; return new CcsDomain ( ) . loadCcsStream ( resolver . resolve ( name ) , name , resolver ) . build ( ) ; }
tr	3	public Object stringToValue ( String text ) throws ParseException { StringTokenizer tokenizer = new StringTokenizer ( text , "." ) ; byte [ ] a = new byte [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { int b = 0 ; if ( ! tokenizer . hasMoreTokens ( ) ) throw new ParseException ( "Too few bytes" , 0 ) ; try { b = Integer . parseInt ( tokenizer . nextToken ( ) ) ; } catch ( NumberFormatException e ) { throw new ParseException ( "Not an integer" , 0 ) ; } if ( b < 0 || b >= 256 ) throw new ParseException ( "Byte out of range" , 0 ) ; a [ i ] = ( byte ) b ; } if ( tokenizer . hasMoreTokens ( ) ) throw new ParseException ( "Too many bytes" , 0 ) ; return a ; }
tr	4	public static void recoverTree ( TreeNode root ) { int preValue = Integer . MIN_VALUE ; int currentValue = Integer . MIN_VALUE ; Stack < TreeNode > stack = new Stack < TreeNode > ( ) ; TreeNode pre1 = null ; TreeNode pre2 = null ; TreeNode cur = root ; TreeNode preNode = null ; while ( cur != null || ! stack . isEmpty ( ) ) { while ( cur != null ) { stack . push ( cur ) ; cur = cur . left ; } cur = stack . pop ( ) ; System . out . println ( stack . size ( ) ) ; currentValue = cur . val ; if ( currentValue < preValue ) { if ( pre1 == null ) { pre1 = preNode ; pre2 = cur ; } else { pre2 = cur ; break ; } } preNode = cur ; preValue = currentValue ; cur = cur . right ; } if ( pre1 != null && pre2 != null ) { int temp = pre1 . val ; pre1 . val = pre2 . val ; pre2 . val = temp ; } }
tr	2	public static void main ( String [ ] args ) { TreeSet < Integer > set2 = new TreeSet < Integer > ( ) ; set2 . add ( 4 ) ; set2 . add ( 100 ) ; set2 . add ( 45 ) ; set2 . add ( 19 ) ; set2 . add ( 33 ) ; ArrayList < TreeSet < Integer >> totalSubSets = findSubSets ( set2 , 0 ) ; if ( totalSubSets == null ) System . out . println ( "No possible subsets" ) ; else for ( TreeSet < Integer > ts : totalSubSets ) { System . out . println ( ts ) ; } }
tr	2	public static boolean invertM ( float [ ] mInv , int mInvOffset , float [ ] m , int mOffset ) { final float src0 = m [ mOffset + 0 ] ; final float src4 = m [ mOffset + 1 ] ; final float src8 = m [ mOffset + 2 ] ; final float src12 = m [ mOffset + 3 ] ; final float src1 = m [ mOffset + 4 ] ; final float src5 = m [ mOffset + 5 ] ; final float src9 = m [ mOffset + 6 ] ; final float src13 = m [ mOffset + 7 ] ; final float src2 = m [ mOffset + 8 ] ; final float src6 = m [ mOffset + 9 ] ; final float src10 = m [ mOffset + 10 ] ; final float src14 = m [ mOffset + 11 ] ; final float src3 = m [ mOffset + 12 ] ; final float src7 = m [ mOffset + 13 ] ; final float src11 = m [ mOffset + 14 ] ; final float src15 = m [ mOffset + 15 ] ; final float atmp0 = src10 * src15 ; final float atmp1 = src11 * src14 ; final float atmp2 = src9 * src15 ; final float atmp3 = src11 * src13 ; final float atmp4 = src9 * src14 ; final float atmp5 = src10 * src13 ; final float atmp6 = src8 * src15 ; final float atmp7 = src11 * src12 ; final float atmp8 = src8 * src14 ; final float atmp9 = src10 * src12 ; final float atmp10 = src8 * src13 ; final float atmp11 = src9 * src12 ; final float dst0 = ( atmp0 * src5 + atmp3 * src6 + atmp4 * src7 ) - ( atmp1 * src5 + atmp2 * src6 + atmp5 * src7 ) ; final float dst1 = ( atmp1 * src4 + atmp6 * src6 + atmp9 * src7 ) - ( atmp0 * src4 + atmp7 * src6 + atmp8 * src7 ) ; final float dst2 = ( atmp2 * src4 + atmp7 * src5 + atmp10 * src7 ) - ( atmp3 * src4 + atmp6 * src5 + atmp11 * src7 ) ; final float dst3 = ( atmp5 * src4 + atmp8 * src5 + atmp11 * src6 ) - ( atmp4 * src4 + atmp9 * src5 + atmp10 * src6 ) ; final float det = src0 * dst0 + src1 * dst1 + src2 * dst2 + src3 * dst3 ; if ( det == 0.0f ) { return false ; } final float dst4 = ( atmp1 * src1 + atmp2 * src2 + atmp5 * src3 ) - ( atmp0 * src1 + atmp3 * src2 + atmp4 * src3 ) ; final float dst5 = ( atmp0 * src0 + atmp7 * src2 + atmp8 * src3 ) - ( atmp1 * src0 + atmp6 * src2 + atmp9 * src3 ) ; final float dst6 = ( atmp3 * src0 + atmp6 * src1 + atmp11 * src3 ) - ( atmp2 * src0 + atmp7 * src1 + atmp10 * src3 ) ; final float dst7 = ( atmp4 * src0 + atmp9 * src1 + atmp10 * src2 ) - ( atmp5 * src0 + atmp8 * src1 + atmp11 * src2 ) ; final float btmp0 = src2 * src7 ; final float btmp1 = src3 * src6 ; final float btmp2 = src1 * src7 ; final float btmp3 = src3 * src5 ; final float btmp4 = src1 * src6 ; final float btmp5 = src2 * src5 ; final float btmp6 = src0 * src7 ; final float btmp7 = src3 * src4 ; final float btmp8 = src0 * src6 ; final float btmp9 = src2 * src4 ; final float btmp10 = src0 * src5 ; final float btmp11 = src1 * src4 ; final float dst8 = ( btmp0 * src13 + btmp3 * src14 + btmp4 * src15 ) - ( btmp1 * src13 + btmp2 * src14 + btmp5 * src15 ) ; final float dst9 = ( btmp1 * src12 + btmp6 * src14 + btmp9 * src15 ) - ( btmp0 * src12 + btmp7 * src14 + btmp8 * src15 ) ; final float dst10 = ( btmp2 * src12 + btmp7 * src13 + btmp10 * src15 ) - ( btmp3 * src12 + btmp6 * src13 + btmp11 * src15 ) ; final float dst11 = ( btmp5 * src12 + btmp8 * src13 + btmp11 * src14 ) - ( btmp4 * src12 + btmp9 * src13 + btmp10 * src14 ) ; final float dst12 = ( btmp2 * src10 + btmp5 * src11 + btmp1 * src9 ) - ( btmp4 * src11 + btmp0 * src9 + btmp3 * src10 ) ; final float dst13 = ( btmp8 * src11 + btmp0 * src8 + btmp7 * src10 ) - ( btmp6 * src10 + btmp9 * src11 + btmp1 * src8 ) ; final float dst14 = ( btmp6 * src9 + btmp11 * src11 + btmp3 * src8 ) - ( btmp10 * src11 + btmp2 * src8 + btmp7 * src9 ) ; final float dst15 = ( btmp10 * src10 + btmp4 * src8 + btmp9 * src9 ) - ( btmp8 * src9 + btmp11 * src10 + btmp5 * src8 ) ; final float invdet = 1.0f / det ; mInv [ mInvOffset ] = dst0 * invdet ; mInv [ 1 + mInvOffset ] = dst1 * invdet ; mInv [ 2 + mInvOffset ] = dst2 * invdet ; mInv [ 3 + mInvOffset ] = dst3 * invdet ; mInv [ 4 + mInvOffset ] = dst4 * invdet ; mInv [ 5 + mInvOffset ] = dst5 * invdet ; mInv [ 6 + mInvOffset ] = dst6 * invdet ; mInv [ 7 + mInvOffset ] = dst7 * invdet ; mInv [ 8 + mInvOffset ] = dst8 * invdet ; mInv [ 9 + mInvOffset ] = dst9 * invdet ; mInv [ 10 + mInvOffset ] = dst10 * invdet ; mInv [ 11 + mInvOffset ] = dst11 * invdet ; mInv [ 12 + mInvOffset ] = dst12 * invdet ; mInv [ 13 + mInvOffset ] = dst13 * invdet ; mInv [ 14 + mInvOffset ] = dst14 * invdet ; mInv [ 15 + mInvOffset ] = dst15 * invdet ; return true ; }
tr	1	@ Override public void execute ( ) { light . on ( ) ; }
tr	3	private String nextToInternal ( String excluded ) { int start = pos ; for ( ; pos < in . length ( ) ; pos ++ ) { char c = in . charAt ( pos ) ; if ( c ==  || c ==  || excluded . indexOf ( c ) != - 1 ) { return in . substring ( start , pos ) ; } } return in . substring ( start ) ; }
tr	4	final public void edgeRHS ( ) throws ParseException { ASTedgeRHS jjtn000 = new ASTedgeRHS ( JJTEDGERHS ) ; boolean jjtc000 = true ; jjtree . openNodeScope ( jjtn000 ) ; try { edgeop ( ) ; switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case ID : node_id ( ) ; break ; case SUBGRAPH : case { : subgraph ( ) ; break ; default : jj_la1 [ 11 ] = jj_gen ; jj_consume_token ( - 1 ) ; throw new ParseException ( ) ; } switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case EDGE_UNDIRECTED : case EDGE_DIRECTED : edgeRHS ( ) ; break ; default : jj_la1 [ 12 ] = jj_gen ; ; } } catch ( Throwable jjte000 ) { if ( jjtc000 ) { jjtree . clearNodeScope ( jjtn000 ) ; jjtc000 = false ; } else { jjtree . popNode ( ) ; } if ( jjte000 instanceof RuntimeException ) { { if ( true ) throw ( RuntimeException ) jjte000 ; } } if ( jjte000 instanceof ParseException ) { { if ( true ) throw ( ParseException ) jjte000 ; } } { if ( true ) throw ( Error ) jjte000 ; } } finally { if ( jjtc000 ) { jjtree . closeNodeScope ( jjtn000 , true ) ; } } }
tr	3	private void mnuSaveAsTemplateActionPerformed ( java . awt . event . ActionEvent evt ) { JFileChooser jfc = new JFileChooser ( ) ; jfc . setFileFilter ( new FileNameExtensionFilter ( "xml Datei" , "xml" ) ) ; if ( jfc . showSaveDialog ( this ) == JFileChooser . APPROVE_OPTION ) { File f = jfc . getSelectedFile ( ) ; if ( ! f . getName ( ) . endsWith ( ".xml" ) ) f = new File ( f . getAbsolutePath ( ) + ".xml" ) ; try { SemesterLoader . saveAsTemplate ( f , semesterList ) ; } catch ( JDOMException ex ) { Logger . getLogger ( MainFrame . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; } catch ( IOException ex ) { Logger . getLogger ( MainFrame . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; } } }
tr	1	public void addPOS ( POS pos ) { posArray . add ( pos ) ; }
tr	5X	@ Override public final void instantiate ( ) { instanceId = generateInstanceId ( ) ; if ( this instanceof ParentTrait ) { ParentTrait parentThis = ( ParentTrait ) this ; for ( int i = 0 ; i < parentThis . getChildCount ( ) ; i ++ ) { if ( ! ( parentThis instanceof ReferenceTrait ) || ! ( ( ReferenceTrait ) parentThis ) . isBackReference ( i ) ) { GeneTrait childGene = parentThis . getChild ( i ) ; if ( childGene != null ) { childGene . instantiate ( ) ; } } } } }
tr	2	public boolean createAccount ( String login , String password ) { if ( logins . containsKey ( login + password ) ) { return false ; } else { logins . put ( login + password , null ) ; return true ; } }
tr	5X	public ArrayList < Integer > obtenerJugadasGanadorasDeHoy ( ArrayList < Integer > boletosDeHoy , ArrayList < Integer > numerosGanadores , int loteria_id ) { Verificadora verificadora = new Verificadora ( ) ; Connection cn = conexion . Conectar ( ) ; PreparedStatement pst ; ResultSet rs ; String query ; ArrayList < Integer > jugadasDeHoy = new ArrayList < > ( ) ; int numerog1 , numerog2 , numerog3 ; numerog1 = numerosGanadores . get ( 0 ) ; numerog2 = numerosGanadores . get ( 1 ) ; numerog3 = numerosGanadores . get ( 2 ) ; int coincidencias = 0 ; for ( int i = 0 ; i < boletosDeHoy . size ( ) ; i ++ ) { query = "SELECT jugada_id  combinacion  monto  formato_id FROM jugadas WHERE boleto_id = " + boletosDeHoy . get ( i ) + " AND loteria_id =" + loteria_id ; try { pst = cn . prepareStatement ( query ) ; rs = pst . executeQuery ( ) ; while ( rs . next ( ) ) { String comb = separarCombinacion ( rs . getString ( "combinacion" ) ) . get ( 0 ) ; String [ ] combinacion = rs . getString ( "combinacion" ) . split ( "-" ) ; int formato = rs . getInt ( "formato_id" ) ; int jugada_id = rs . getInt ( "jugada_id" ) ; numerosGanadores . clear ( ) ; numerosGanadores . add ( numerog1 ) ; numerosGanadores . add ( numerog2 ) ; numerosGanadores . add ( numerog3 ) ; coincidencias = verificadora . verificarCoincidencias ( separarCombinacion ( rs . getString ( "combinacion" ) ) , numerosGanadores ) ; System . out . println ( "jugada: " + jugada_id ) ; System . out . println ( "coinc: " + coincidencias ) ; System . out . println ( "Formato: " + formato ) ; if ( coincidencias == 1 && formato == 2 ) { jugadasDeHoy . add ( jugada_id ) ; calcularQuiniela ( jugada_id , Integer . parseInt ( combinacion [ 0 ] ) , numerog1 , numerog2 , numerog3 , double . parseDouble ( rs . getString ( "monto" ) ) ) ; System . out . println ( "Quiniela gan\u00F3: " + jugada_id ) ; } else if ( coincidencias == 2 && formato == 3 ) { jugadasDeHoy . add ( jugada_id ) ; calcularPale ( jugada_id , Integer . parseInt ( combinacion [ 0 ] ) , Integer . parseInt ( combinacion [ 1 ] ) , numerog1 , numerog2 , numerog3 , double . parseDouble ( rs . getString ( "monto" ) ) ) ; } else if ( coincidencias == 3 && formato == 1 ) { jugadasDeHoy . add ( jugada_id ) ; calcularTripleta ( jugada_id , double . parseDouble ( rs . getString ( "monto" ) ) ) ; } } } catch ( SQLException ex ) { System . out . println ( ex ) ; } } return jugadasDeHoy ; }
tr	3	private static List < List < String >> clone ( List < List < String >> original ) { List < List < String >> clone = new ArrayList < List < String >> ( original . size ( ) ) ; for ( List < String > oStrings : original ) { List < String > cStrings = new ArrayList < String > ( oStrings . size ( ) ) ; for ( String oString : oStrings ) { cStrings . add ( oString ) ; } clone . add ( cStrings ) ; } return clone ; }
tr	1	@ Override public String getSchema ( ) throws SQLException { return null ; }
tr	1	private void effacer ( java . awt . event . ActionEvent evt ) { nomEtu . setText ( "" ) ; }
tr	4	public static int testPublic ( int testNum ) { String inputFilename = String . format ( "tests/test%02d.crx" , testNum ) ; String outputFilename = String . format ( "tests/test%02d.rea" , testNum ) ; String expectedFilename = String . format ( "tests/test%02d.out" , testNum ) ; String astFilename = String . format ( "tests/test%02d.ast" , testNum ) ; Scanner s = null ; try { s = new Scanner ( new FileReader ( inputFilename ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; return NOT_ACCESSABLE ; } Parser p = new Parser ( s ) ; ast . Command syntaxTree = p . parse ( ) ; try { PrintStream outputStream = new PrintStream ( outputFilename ) ; PrintStream astStream = new PrintStream ( astFilename ) ; if ( p . hasError ( ) ) { outputStream . println ( "Error parsing file." ) ; outputStream . println ( p . errorReport ( ) ) ; outputStream . close ( ) ; astStream . println ( "Error parsing file." ) ; astStream . println ( p . errorReport ( ) ) ; astStream . close ( ) ; } else { PrettyPrinter pretty = new PrettyPrinter ( ) ; syntaxTree . accept ( pretty ) ; astStream . println ( pretty . toString ( ) ) ; astStream . close ( ) ; types . TypeChecker tc = new types . TypeChecker ( ) ; tc . check ( syntaxTree ) ; if ( tc . hasError ( ) ) { outputStream . println ( "Error type-checking file." ) ; outputStream . println ( tc . errorReport ( ) ) ; outputStream . close ( ) ; } else { outputStream . println ( "Crux Program has no type errors." ) ; } } } catch ( IOException e ) { System . err . println ( "Error opening output file: \"" + outputFilename + "\"" ) ; e . printStackTrace ( ) ; return IO_ERROR ; } BufferedReader bufferedexpected ; BufferedReader bufferedoutput ; String lineExpected ; String lineOutput ; try { bufferedexpected = new BufferedReader ( new FileReader ( expectedFilename ) ) ; bufferedoutput = new BufferedReader ( new FileReader ( outputFilename ) ) ; } catch ( FileNotFoundException e ) { e . printStackTrace ( ) ; return IO_ERROR ; } int result = PASS ; try { while ( ( lineExpected = bufferedexpected . readLine ( ) ) != null ) { lineOutput = bufferedoutput . readLine ( ) ; if ( lineOutput == null ) { result = FAIL ; break ; } lineExpected = lineExpected . replaceAll ( "\\s+$" , "" ) ; lineOutput = lineOutput . replaceAll ( "\\s+$" , "" ) ; if ( ! lineExpected . equals ( lineOutput ) ) { result = FAIL ; break ; } } } catch ( IOException e ) { e . printStackTrace ( ) ; result = IO_ERROR ; } try { bufferedoutput . close ( ) ; bufferedexpected . close ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return result ; }
tr	4	public static void main ( String [ ] args ) { Comparable [ ] arrayChar = { S , H , E , L , L , S , O , R , T , E , X , A , M , P , L , E } ; int length = arrayChar . length ; int h = 1 ; while ( h < length / 3 ) { h = h * 3 + 1 ; System . out . println ( "top==>" + h ) ; } while ( h >= 1 ) { for ( int i = h ; i < length ; i ++ ) { for ( int j = i ; j >= h && less ( arrayChar [ j ] , arrayChar [ j - h ] ) ; j -= h ) { exchange ( arrayChar , j , j - h ) ; } } h = h / 3 ; System . out . println ( h ) ; } show ( arrayChar ) ; }
tr	5X	public Card [ ] pickCards ( SelectCardOptions sco , Card [ ] allcards ) { GameQuery p = new GameQuery ( QueryType . GETCARD , QueryType . CARD ) . setObject ( sco ) ; p = query ( p ) ; if ( p == null ) return null ; if ( p . t != QueryType . CARD ) return null ; if ( p . o instanceof Card [ ] || p . o instanceof String [ ] ) { String [ ] selected ; if ( p . o instanceof Card [ ] ) { ArrayList < String > a = new ArrayList < String > ( ) ; for ( Card c : ( Card [ ] ) p . o ) a . add ( c . getName ( ) ) ; selected = a . toArray ( new String [ 0 ] ) ; } else selected = ( String [ ] ) p . o ; ArrayList < Card > ret = new ArrayList < Card > ( ) ; ArrayList < Card > all = new ArrayList < Card > ( Arrays . asList ( allcards ) ) ; for ( int i = 0 ; i < selected . length ; i ++ ) { for ( int j = 0 ; j < all . size ( ) ; j ++ ) { if ( all . get ( j ) . equals ( selected [ i ] ) ) { ret . add ( all . get ( j ) ) ; all . remove ( j ) ; break ; } } } return ret . toArray ( new Card [ 0 ] ) ; } return null ; }
tr	5X	public SocketThread ( Socket skt ) { this . socket = skt ; this . reader = new Thread ( new Runnable ( ) { @ Override public void run ( ) { try { input = new XMLReader ( new BufferedReader ( new InputStreamReader ( socket . getInputStream ( ) , "UTF-8" ) ) ) ; } catch ( XMLStreamException | IOException e ) { e . printStackTrace ( ) ; return ; } while ( true ) { try { messages . add ( input . readMessage ( ) ) ; fireEvent ( ) ; } catch ( XMLStreamException e ) { if ( Thread . interrupted ( ) ) { System . out . println ( "Reader closed." ) ; return ; } else { e . printStackTrace ( ) ; } } } } } ) ; this . writer = new Thread ( new Runnable ( ) { @ Override public void run ( ) { try { output = new XMLWriter ( new PrintWriter ( new OutputStreamWriter ( socket . getOutputStream ( ) , "UTF-8" ) ) ) ; } catch ( XMLStreamException | IOException e ) { e . printStackTrace ( ) ; return ; } while ( true ) { try { Message m = msgQueue . take ( ) ; output . writeMessage ( m ) ; } catch ( InterruptedException e ) { System . out . println ( "Writer closed." ) ; return ; } catch ( XMLStreamException e ) { e . printStackTrace ( ) ; } } } } ) ; }
tr	4	public static void flatten ( TreeNode root ) { if ( root == null ) { return ; } Queue < TreeNode > currentLevel = new LinkedList < TreeNode > ( ) ; TreeNode newNode = new TreeNode ( root . val ) ; TreeNode head = newNode ; TreeNode empty = new TreeNode ( 0 ) ; currentLevel . add ( root ) ; while ( ! currentLevel . isEmpty ( ) ) { Queue < TreeNode > nextLevel = new LinkedList < TreeNode > ( ) ; while ( ! currentLevel . isEmpty ( ) ) { TreeNode node = currentLevel . poll ( ) ; if ( newNode . right != null ) { newNode = newNode . right ; } newNode . left = null ; newNode . right = node ; if ( node . left != null ) nextLevel . add ( node . left ) ; if ( node . right != null ) nextLevel . add ( node . right ) ; } currentLevel = nextLevel ; } root = head . right ; }
tr	1	public void setFinalGrades ( boolean value ) { this . finalGrades = value ; }
tr	3	private Collection < Player > getPlayers ( File matchfile ) { String [ ] playernames = getValue ( matchfile , "players" ) . split ( " " ) ; for ( int i = 0 ; i < playernames . length ; i ++ ) { playernames [ i ] = playernames [ i ] . trim ( ) ; } LinkedList < Player > result = new LinkedList < Player > ( ) ; for ( String str : playernames ) { for ( Player p : model . getAllPlayers ( ) ) { if ( p . getName ( ) . equalsIgnoreCase ( str ) ) result . add ( p ) ; } } return result ; }
tr	4	public boolean move ( Direction direction , StringBuffer output ) throws EndGameException { boolean hasMoved = false ; if ( myPosition . isCrossable ( direction ) ) { if ( myPosition . hasCharacter ( direction ) ) { Character defender = myPosition . getCharacter ( direction ) ; if ( attack ( defender ) ) { this . myPosition = myPosition . moveCharacter ( direction ) ; output . append ( "You attacked and killed " + defender + ". You moved " + direction ) ; hasMoved = true ; } else { if ( isDead ( ) ) throw new EndGameException ( "Player has died. GAME OVER!" ) ; output . append ( "You attacked: \n" + defender . toString ( ) + "\n" + this . toString ( ) ) ; } } else { this . myPosition = myPosition . moveCharacter ( direction ) ; output . append ( "You moved " + direction + "." ) ; hasMoved = true ; } } else { output . append ( checkIfLockedExit ( direction ) ) ; } if ( hasMoved ) { notifyPositionChanged ( direction . getOppositeDirection ( ) ) ; } return hasMoved ; }
tr	3	public static < T > boolean bfs ( BinaryTreeNode < T > root , T target ) { if ( root == null ) { return false ; } LinkedList < BinaryTreeNode > list = new LinkedList < BinaryTreeNode > ( ) ; list . add ( root ) ; BinaryTreeNode < Integer > current ; while ( list . size ( ) > 0 ) { current = list . remove ( ) ; if ( target . equals ( current . data ) ) { return true ; } if ( current . left != null ) { list . add ( current . left ) ; } if ( current . right != null ) { list . add ( current . right ) ; } } return false ; }
tr	1	private void btnVoltarActionPerformed ( java . awt . event . ActionEvent evt ) { CSVAcesso acesso = new CSVAcesso ( "cadastro.csv" , "true" ) ; acesso . parse ( ) ; TelaMedico medico = new TelaMedico ( localNome , acesso . pegarPacientes ( ) , "Medico" ) ; this . setVisible ( false ) ; medico . setVisible ( true ) ; }
tr	3	public Image getImage ( URL url ) { try { Object content = url . getContent ( ) ; if ( content instanceof ImageProducer ) { return applet . createImage ( ( ImageProducer ) content ) ; } } catch ( IOException ex ) { } return null ; }
tr	2	@ Override public String filterReplacedString ( FilterBypass fb , int offset , int length , String str , AttributeSet attrs ) { if ( str == null ) return "" ; int remaining = limit - fb . getDocument ( ) . getLength ( ) + length ; if ( remaining > str . length ( ) ) { return str ; } else { return str . substring ( 0 , remaining ) ; } }
tr	1	public void paintComponent ( Graphics g2 ) { g2 . drawImage ( bgImage , 0 , 0 , null ) ; }
tr	5X	public void render ( Map map ) { if ( updateSenses ) { long startTime = System . currentTimeMillis ( ) ; playerSenses = map . getPlayerSenses ( ) ; long endTime = System . currentTimeMillis ( ) ; Log . print ( "Shadowcasting time: " + ( endTime - startTime ) ) ; updateSenses = false ; } HashMap < Integer , Tile > tileHashMap = playerSenses . getTiles ( ) ; HashMap < Integer , Actor > actorHashMap = playerSenses . getActors ( ) ; HashMap < Integer , ArrayList < Entity >> entities = playerSenses . getEntities ( ) ; Point top_left = new Point ( playerpos . getX ( ) - tilesx , playerpos . getY ( ) - tilesy ) ; for ( int x = top_left . getX ( ) ; x <= playerpos . getX ( ) + tilesx ; x ++ ) { for ( int y = top_left . getY ( ) ; y <= playerpos . getY ( ) + tilesy ; y ++ ) { if ( map . inBounds ( x , y ) ) { Tile tile = tileHashMap . get ( map . genKey ( x , y ) ) ; if ( tile != null ) { Image image = environment . getSprite ( tile . getSpriteID ( ) ) ; image . draw ( ( float ) ( ( x - top_left . getX ( ) ) * ppt ) , ( float ) ( ( y - top_left . getY ( ) ) * ppt ) , scale ) ; } ArrayList < Entity > ents = entities . get ( map . genKey ( x , y ) ) ; if ( ents != null && ents . size ( ) > 0 ) { Entity entity = ents . get ( 0 ) ; Image image = environment . getSprite ( entity . getSpriteID ( ) ) ; image . draw ( ( float ) ( ( x - top_left . getX ( ) ) * ppt ) , ( float ) ( ( y - top_left . getY ( ) ) * ppt ) , scale ) ; } Actor actor = actorHashMap . get ( map . genKey ( x , y ) ) ; if ( actor != null ) { Image image = actor_sprites . getSprite ( actor . getSpriteID ( ) ) ; image . draw ( ( float ) ( ( x - top_left . getX ( ) ) * ppt ) , ( float ) ( ( y - top_left . getY ( ) ) * ppt ) , scale ) ; } } } } Image player = actor_sprites . getSprite ( ActorSprite . player ) ; player . draw ( ( float ) ( ( playerpos . getX ( ) - top_left . getX ( ) ) * ppt ) , ( float ) ( ( playerpos . getY ( ) - top_left . getY ( ) ) * ppt ) , scale ) ; messageBox . render ( ) ; }
tr	2	public void serviceRemoved ( ServiceEvent event ) { synchronized ( infos ) { infos . remove ( event . getName ( ) ) ; } }
tr	5X	@ Test public void superThreadSafe ( ) { final SimpleMath math = new SimpleMath ( ) ; final Map < Integer , Integer > results = new ConcurrentHashMap < Integer , Integer > ( ) ; final CountDownLatch latch = new CountDownLatch ( 1000 ) ; final CountDownLatch allDone = new CountDownLatch ( 1000 ) ; for ( int i = 0 ; i < 1000 ; i ++ ) { final int copy = i ; new Thread ( ) { public void run ( ) { try { latch . countDown ( ) ; latch . await ( ) ; int result = math . doubleAndIncrement ( copy ) ; results . put ( copy , result ) ; allDone . countDown ( ) ; } catch ( Exception e ) { } } } . start ( ) ; } try { allDone . await ( ) ; } catch ( Exception e ) { } assertEquals ( new Integer ( 45 ) , results . get ( 22 ) ) ; }
tr	4	public static void main ( String args [ ] ) { try { for ( javax . swing . UIManager . LookAndFeelInfo info : javax . swing . UIManager . getInstalledLookAndFeels ( ) ) { if ( "Nimbus" . equals ( info . getName ( ) ) ) { javax . swing . UIManager . setLookAndFeel ( info . getClassName ( ) ) ; break ; } } } catch ( ClassNotFoundException ex ) { java . util . logging . Logger . getLogger ( Menu . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( InstantiationException ex ) { java . util . logging . Logger . getLogger ( Menu . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( IllegalAccessException ex ) { java . util . logging . Logger . getLogger ( Menu . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( javax . swing . UnsupportedLookAndFeelException ex ) { java . util . logging . Logger . getLogger ( Menu . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } java . awt . EventQueue . invokeLater ( new Runnable ( ) { public void run ( ) { new Menu ( ) . setVisible ( true ) ; } } ) ; }
tr	1	public boolean isNull ( String key ) { return JSONObject . null . equals ( this . opt ( key ) ) ; }
tr	4	public synchronized void doRanking ( ) { calculate_tf_idf_q ( ) ; Query q ; for ( String term : queryTerms . keySet ( ) ) { term = term . trim ( ) ; q = queryTerms . get ( term ) ; q . setPostings ( getPostingsFor ( term ) ) ; if ( q . getPostings ( ) == null ) { System . out . println ( "sry. no postings found" ) ; continue ; } for ( Posting p : q . getPostings ( ) . getPostings ( ) ) { float value = ( float ) ( q . getTf_idf ( ) * calculate_tf_idf_d ( p , q . getPostings ( ) . getOverallFrequency ( ) ) ) ; Score s = new Score ( ) ; s . setScore ( value ) ; s . setId ( p . getDocID ( ) ) ; if ( ! scores . containsKey ( p . getDocID ( ) ) ) { scores . put ( p . getDocID ( ) , s ) ; } else { Score sc = scores . get ( p . getDocID ( ) ) ; float score = sc . getScore ( ) ; score += value ; sc . setScore ( score ) ; scores . put ( p . getDocID ( ) , sc ) ; } } } float newScore , lengthV ; Score s ; for ( String id : scores . keySet ( ) ) { s = scores . get ( id ) ; try { newScore = s . getScore ( ) / length . get ( id ) . floatValue ( ) ; s . setScore ( newScore ) ; scores . put ( id , s ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } }
tr	4	LocalSocket ( Socket socket , PassthroughConnection ptc ) { this . ptc = ptc ; this . socket = socket ; DataInputStream inLocal = null ; DataOutputStream outLocal = null ; try { inLocal = new DataInputStream ( socket . getInputStream ( ) ) ; } catch ( IOException e ) { ptc . printLogMessage ( "Unable to open data stream to client" ) ; if ( inLocal != null ) { try { inLocal . close ( ) ; socket . close ( ) ; } catch ( IOException e1 ) { ptc . printLogMessage ( "Unable to close data stream to client" ) ; } } in = null ; out = null ; success = false ; return ; } try { outLocal = new DataOutputStream ( socket . getOutputStream ( ) ) ; } catch ( IOException e ) { ptc . printLogMessage ( "Unable to open data stream from client" ) ; if ( outLocal != null ) { try { outLocal . close ( ) ; socket . close ( ) ; } catch ( IOException e1 ) { ptc . printLogMessage ( "Unable to close data stream from client" ) ; } } in = null ; out = null ; success = false ; return ; } in = inLocal ; out = outLocal ; success = true ; }
tr	2	public String getClientToken ( ) { if ( clientToken . isEmpty ( ) ) { logger . debug ( "Token is empty.<br> A new one will be generated." ) ; clientToken = java . util . UUID . randomUUID ( ) . toString ( ) ; clientToken = clientToken . replaceAll ( "-" , "" ) ; logger . debug ( clientToken ) ; } return clientToken ; }
tr	2	public double getArea ( ) { final Punto ptInt = this . getPuntoInterior ( ) ; double area = 0 ; for ( int i = 0 ; i < this . numVertices ; i ++ ) { final Punto ptSig = ( i == this . numVertices - 1 ) ? this . vertices [ 0 ] : this . vertices [ i + 1 ] ; area += Poligono . getAreaTriangulo ( this . vertices [ i ] , ptSig , ptInt ) ; } return Math . round ( area * 1000 ) / 1000.0 ; }
tr	5X	public void MakeFrameNotActive ( final CallFrame FrameToHold ) { java . awt . EventQueue . invokeLater ( new Runnable ( ) { public void run ( ) { resumeButton = new JButton ( "\u0412\u043E\u0437\u043E\u0431\u043D\u043E\u0432\u0438\u0442\u044C \u0437\u0432\u043E\u043D\u043E\u043A" ) ; resumeButton . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent ev ) { String numberToUnhold = parkBridgeLines . get ( FrameToHold ) . get ( "NumberToUnhold" ) ; String holdChannel = parkBridgeLines . get ( FrameToHold ) . get ( "HoldChannel" ) ; FrameToHold . HoldIfNotActive ( ) ; Resume ( numberToUnhold , holdChannel . substring ( 0 , holdChannel . indexOf ( "-" ) ) ) ; } } ) ; resumeButton . setPreferredSize ( new Dimension ( 300 , 130 ) ) ; resumeButton . setBackground ( new Color ( 0 , 25 , 0 ) ) ; resumeButton . setForeground ( new Color ( 255 , 255 , 255 ) ) ; resumeButton . setFont ( new Font ( "TimesRoman" , Font . PLAIN , 35 ) ) ; FrameToHold . add ( resumeButton , BorderLayout . NORTH ) ; FrameToHold . setPreferredSize ( new Dimension ( 400 , 400 ) ) ; FrameToHold . pack ( ) ; } } ) ; }
tr	2	public String [ ] getParametersTypeOf ( String view , String viewMethod ) { for ( int i = 0 ; i < relations . size ( ) ; i ++ ) { if ( relations . get ( i ) . getView ( ) . equals ( view ) && relations . get ( i ) . getViewMethod ( ) . equals ( viewMethod ) ) return relations . get ( i ) . getParametersTypeAsArray ( ) ; } return null ; }
tr	3	@ Override public void actionPerformed ( ActionEvent e ) { if ( e . getActionCommand ( ) . equals ( "Apply" ) ) { this . dispose ( ) ; System . out . println ( "aaaa" ) ; Tuple < String , Tuple < String , Integer >> player1Data = player1 . getPlayerData ( ) ; Tuple < String , Tuple < String , Integer >> player2Data = player2 . getPlayerData ( ) ; int deadFields = this . deadFields . getDeadFieldNumber ( ) ; System . out . println ( deadFields ) ; System . out . println ( "bbb" ) ; Player [ ] players = { new Player ( player1Data . getFirstElement ( ) , player1Data . getSecondElement ( ) . getFirstElement ( ) , "w" , player1Data . getSecondElement ( ) . getSecondElement ( ) ) , new Player ( player2Data . getFirstElement ( ) , player2Data . getSecondElement ( ) . getFirstElement ( ) , "b" , player2Data . getSecondElement ( ) . getSecondElement ( ) ) , } ; System . out . println ( "ccc" ) ; try { masterGui . newGame ( players , deadFields ) ; } catch ( Exception e1 ) { e1 . printStackTrace ( ) ; } System . out . println ( "ddd" ) ; } }
tr	1	@ Override public String execute ( ) throws Exception { String consequence = ERROR ; long id = input . getLong ( "id" ) ; CategoriaDespesa categoriaDespesa = ServiceLocator . getCategoriaDespesaService ( ) . readById ( id ) ; ServiceLocator . getCategoriaDespesaService ( ) . delete ( id ) ; consequence = SUCCESS ; return consequence ; }
tr	3	public String checkDataEntry ( ) { if ( efastAnalysisPanel1 . parameterScreen . directoryChosen . getText ( ) . equals ( "Selected Directory: " ) ) { return "Error on Parameter Data Entry. Make sure all the boxes have been completed" ; } else if ( efastAnalysisPanel1 . parameterScreen . efastCurves . getText ( ) . equals ( "" ) || efastAnalysisPanel1 . parameterScreen . efastSampleNumber . getText ( ) . equals ( "" ) ) { return "Error on Parameter Data Entry. Make sure all the boxes have been completed" ; } else if ( efastAnalysisPanel1 . parameterScreen . parametersModel . contains ( "None Entered" ) ) { return "No parameters have been selected" ; } else { try { Integer . parseInt ( efastAnalysisPanel1 . parameterScreen . efastCurves . getText ( ) ) ; Integer . parseInt ( efastAnalysisPanel1 . parameterScreen . efastSampleNumber . getText ( ) ) ; return null ; } catch ( NumberFormatException e ) { return "Number of curves and parameter samples must be integers" ; } } }
tr	5X	@ Override protected void handleInboxItem ( InboxItem inboxItem ) { super . handleInboxItem ( inboxItem ) ; if ( inboxItem . getMessage ( ) instanceof TokenMessage ) { executeTurn ( ) ; } if ( inboxItem . getMessage ( ) instanceof LeaderElectionMessage ) { LeaderElectionMessage message = ( LeaderElectionMessage ) inboxItem . getMessage ( ) ; switch ( message . getLeaderElectionMessageType ( ) ) { case ASK_FOR_ROLL : { doRoll ( inboxItem . getSender ( ) ) ; break ; } case LEADER_ELECTED : { initRound ( ) ; ownPlayer . setActive ( true ) ; if ( message . getValue ( ) == ownEndpoint . getId ( ) ) { isDealer = true ; logger . info ( "New Dealer" ) ; sendToken ( getPreviousPlayer ( ) ) ; } else { logger . info ( "Player " + message . getValue ( ) + " is new dealer." ) ; } break ; } case ROLLED : { gatherRoll ( inboxItem . getSender ( ) , message ) ; break ; } } } if ( inboxItem . getMessage ( ) instanceof StatusMessage ) { handleStatusMessage ( ( StatusMessage ) inboxItem . getMessage ( ) ) ; } if ( inboxItem . getMessage ( ) instanceof DealerMessage ) { handleDealerMessage ( inboxItem . getSender ( ) , ( DealerMessage ) inboxItem . getMessage ( ) ) ; } }
tr	2	public static Image [ ] loadStills ( int numSprites , String imgPath ) { Image [ ] stills = new Image [ numSprites ] ; String path = Item . charPath + imgPath ; for ( int i = 0 ; i < numSprites ; i ++ ) { stills [ i ] = Item . loadImage ( path + i + "/0.png" ) ; } return stills ; }
tr	5X	public static void release ( Object ... releasables ) { for ( Object obj : releasables ) { if ( obj != null ) { try { if ( obj instanceof ServerSocket ) { ( ( ServerSocket ) obj ) . close ( ) ; } else if ( obj instanceof Socket ) { ( ( Socket ) obj ) . close ( ) ; } else if ( obj instanceof Process ) { ( ( Process ) obj ) . destroy ( ) ; } else if ( obj instanceof Closeable ) { ( ( Closeable ) obj ) . close ( ) ; } else { throw new IllegalArgumentException ( "This method does not not how to release objects of type " + obj . getClass ( ) ) ; } } catch ( IOException ex ) { } catch ( RuntimeException ex ) { } } } }
tr	4	public static Integer convertStringToNumber ( String str ) { str = str . toLowerCase ( ) ; int num = ones . indexOf ( str ) ; if ( num > - 1 ) { return num ; } num = tens . indexOf ( str ) ; if ( num > - 1 ) { return num * 10 ; } String arr [ ] = str . split ( " |-" ) ; if ( arr . length == 2 ) { num = tens . indexOf ( arr [ 0 ] ) * 10 ; if ( num > - 1 ) { num += ones . indexOf ( arr [ 1 ] ) ; if ( num > 20 ) { return num ; } } } return null ; }
tr	1	public void setGame ( Game game ) { this . game = game ; }
tr	1	public void isiOperan2 ( double x ) { op2 = x ; }
tr	3	public static byte [ ] decodeEncfs ( byte [ ] source ) { byte [ ] decodedInput = new byte [ source . length ] ; for ( int i = 0 ; i < source . length ; i ++ ) { int arrayIndex = source [ i ] ; if ( arrayIndex >= 0 ) { decodedInput [ i ] = _ENCFS_DECODABET [ source [ i ] ] ; } else { decodedInput [ i ] = - 9 ; } } int outputLen = ( source . length * 6 ) / 8 ; byte [ ] output = new byte [ outputLen ] ; int srcIdx = 0 ; int dstIdx = 0 ; int workBits = 0 ; long work = 0 ; while ( srcIdx < source . length ) { work |= decodedInput [ srcIdx ++ ] << workBits ; workBits += 6 ; while ( workBits >= 8 ) { output [ dstIdx ++ ] = ( byte ) ( work & ff ) ; work >>>= 8 ; workBits -= 8 ; } } return output ; }
tr	3	@ Override public int resolve ( ) throws Exception { Room room = getMyRoom ( ) ; if ( getMyString ( ) . equals ( CommandConstants . COMMAND_NAME_PENDOWN ) ) { room . getTurtle ( ) . setPenStatus ( true ) ; return CommandConstants . COMMAND_RETURN_TRUE ; } else if ( getMyString ( ) . equals ( CommandConstants . COMMAND_NAME_PENUP ) ) { room . getTurtle ( ) . setPenStatus ( false ) ; return CommandConstants . COMMAND_RETURN_FALSE ; } else { if ( room . getTurtle ( ) . getPenStatus ( ) ) { return CommandConstants . COMMAND_RETURN_TRUE ; } else { return CommandConstants . COMMAND_RETURN_FALSE ; } } }
tr	1	public void setIndId ( Integer indId ) { this . indId = indId ; }
tr	4	public void determineChunkStats ( ) { int emptyNeighborIndex = Integer . MIN_VALUE ; reset ( ) ; for ( int i = 0 ; i < map . length ; i ++ ) { boolean isRowEmpty = true ; for ( int j = 0 ; j < map [ i ] . length ; j ++ ) { if ( map [ i ] [ j ] != 0 ) { isRowEmpty = false ; } checkEnemy ( i , j ) ; checkCannons ( i , j ) ; checkTubes ( i , j ) ; checkHills ( i , j ) ; recordOtherStats ( i , j ) ; } if ( isRowEmpty && i - 1 != emptyNeighborIndex ) { emptyNeighborIndex = i ; numJumps ++ ; difficulty ++ ; if ( this . type != Type . JUMP && numJumps > getCurrentTypeCount ( ) ) { this . type = Type . JUMP ; } } else if ( isRowEmpty ) emptyNeighborIndex = i ; } }
tr	1	@ Override public boolean equals ( Object obj ) { if ( this == obj ) return true ; if ( obj == null ) return false ; if ( obj instanceof DescribeComponentsResult == false ) return false ; DescribeComponentsResult other = ( DescribeComponentsResult ) obj ; if ( other . getComponentInfos ( ) == null ^ this . getComponentInfos ( ) == null ) return false ; if ( other . getComponentInfos ( ) != null && other . getComponentInfos ( ) . equals ( this . getComponentInfos ( ) ) == false ) return false ; return true ; }
tr	1	public ScoreLevel ( ) { this . Id = 0 ; this . message = "" ; this . whole = true ; this . half = true ; this . dottedhalf = false ; this . quarter = false ; this . eighth = false ; this . silence = true ; this . triplet = false ; this . currentKey = "treble" ; this . randomtonality = false ; this . currenttonality = new Tonality ( 0 , "" ) ; this . pitcheslist = new ArrayList < Integer > ( ) ; this . notetype = "notes" ; this . nbnotes = 9 ; this . timeSignNumerator = 4 ; this . timeSignDenominator = 4 ; this . timeDivision = 1 ; this . speed = 28 ; this . metronome = true ; this . beats = false ; }
tr	4	public static void main ( String [ ] args ) { Utility . configure ( ) ; jobTrackerComm = new Communication ( Utility . JOBTRACKER . ipAddress , Utility . JOBTRACKER . port ) ; System . out . println ( "Registering on job tracker..." ) ; Message msg = new Message ( Utility . TASKTRACKERREG ) ; jobTrackerComm . sendMessage ( msg ) ; msg = jobTrackerComm . readMessage ( ) ; if ( msg . getMsgType ( ) == Utility . REGACK ) { taskTrackerID = msg . getTaskTrackerID ( ) ; System . out . println ( "Successfully registered." ) ; } while ( isRunning ) { msg = jobTrackerComm . readMessage ( ) ; if ( msg . getMsgType ( ) == Utility . NEWJOB ) { JobContext jobContext = msg . getJobContext ( ) ; String jobID = jobContext . getJobID ( ) . getID ( ) ; System . out . println ( "Receiced new job from job[" + jobID + "] tracker" ) ; if ( ! jobContexts . containsKey ( jobID ) ) { jobContexts . put ( jobID , jobContext ) ; } msg = new Message ( Utility . NEWJOBACK ) ; jobTrackerComm . sendMessage ( msg ) ; } else if ( msg . getMsgType ( ) == Utility . RUNMAPPER ) { System . out . println ( "Received RUNMAPPER command from job tracker." ) ; List < MapBasicContext > mapBasicContexts = msg . getMapContexts ( ) ; if ( mapBasicContexts . size ( ) != 0 ) { String jobID = mapBasicContexts . get ( 0 ) . getJobID ( ) . getID ( ) ; JobContext jobContext = jobContexts . get ( jobID ) ; numMappers = mapBasicContexts . size ( ) ; launchMappers ( jobContext , mapBasicContexts ) ; } } else if ( msg . getMsgType ( ) == Utility . RUNREDUCER ) { System . out . println ( "Received RUNREDUCER command from job tracker." ) ; List < ReduceBasicContext > reduceBasicContexts = msg . getReduceContexts ( ) ; if ( reduceBasicContexts . size ( ) != 0 ) { String jobID = reduceBasicContexts . get ( 0 ) . getJobID ( ) . getID ( ) ; JobContext jobContext = jobContexts . get ( jobID ) ; numReducers = reduceBasicContexts . size ( ) ; launchReducers ( jobContext , reduceBasicContexts ) ; } } else if ( msg . getMsgType ( ) == Utility . CLOSE ) { isRunning = false ; } } jobTrackerComm . close ( ) ; }
tr	2	private static int maxNode3 ( BSTNode root , int maxSoFar ) throws InvalidBSTException { if ( root == null ) return maxSoFar ; if ( maxNode3 ( root . getLeft ( ) , maxSoFar ) > ( ( Integer ) root . getData ( ) ) ) { throw new InvalidBSTException ( ) ; } maxSoFar = ( ( Integer ) root . getData ( ) ) . intValue ( ) ; return maxNode3 ( root . getRight ( ) , maxSoFar ) ; }
tr	2	private ArraySchema parseArraySchema ( JsonNode rawSchema , URL schemaLocation ) { ArraySchema result = new ArraySchema ( ) ; JsonNode rawItems = rawSchema . get ( "items" ) ; if ( rawItems != null ) { result . setItems ( parse ( rawItems , schemaLocation ) ) ; } JsonNode rawMinItems = rawSchema . get ( "minItems" ) ; if ( rawMinItems != null ) { result . setMinItems ( rawMinItems . intValue ( ) ) ; } JsonNode rawMaxItems = rawSchema . get ( "maxItems" ) ; if ( rawMaxItems != null ) { result . setMaxItems ( rawMaxItems . intValue ( ) ) ; } return result ; }
tr	5X	private void addFileDropTarget ( Composite parent ) { final FileTransfer fileTransfer = FileTransfer . getInstance ( ) ; DropTarget target = new DropTarget ( parent , DND . DROP_COPY | DND . DROP_DEFAULT ) ; target . setTransfer ( new Transfer [ ] { fileTransfer } ) ; target . addDropListener ( new DropTargetListener ( ) { public void dragEnter ( DropTargetEvent event ) { if ( event . detail == DND . DROP_DEFAULT ) { if ( ( event . operations & DND . DROP_COPY ) > 0 ) { event . detail = DND . DROP_COPY ; } else { event . detail = DND . DROP_NONE ; } } } public void drop ( DropTargetEvent event ) { if ( fileTransfer . isSupportedType ( event . currentDataType ) ) { String [ ] files = ( String [ ] ) event . data ; for ( String file : files ) { try { controller . openFile ( file ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; displayErrorMessage ( "Error loading file: " + e . getMessage ( ) ) ; } } } } public void dropAccept ( DropTargetEvent event ) { } public void dragOver ( DropTargetEvent event ) { } public void dragOperationChanged ( DropTargetEvent event ) { } public void dragLeave ( DropTargetEvent event ) { } } ) ; }
tr	3	public elimins ( ) { setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ) ; setBounds ( 100 , 100 , 450 , 300 ) ; contentPane = new JPanel ( ) ; contentPane . setBackground ( new Color ( 189 , 183 , 107 ) ) ; contentPane . setBorder ( new EmptyBorder ( 5 , 5 , 5 , 5 ) ) ; setContentPane ( contentPane ) ; contentPane . setLayout ( null ) ; JButton button = new JButton ( "inicio" ) ; button . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { inicio miInicio = new inicio ( ) ; miInicio . setVisible ( true ) ; hide ( ) ; } } ) ; button . setBounds ( 10 , 11 , 89 , 23 ) ; contentPane . add ( button ) ; JButton button_1 = new JButton ( "eliminar" ) ; button_1 . setBounds ( 259 , 85 , 89 , 23 ) ; contentPane . add ( button_1 ) ; JLabel lblIdInstructor = new JLabel ( "Id instructor" ) ; lblIdInstructor . setBounds ( 48 , 86 , 89 , 21 ) ; contentPane . add ( lblIdInstructor ) ; textField = new JTextField ( ) ; textField . setColumns ( 10 ) ; textField . setBounds ( 129 , 86 , 86 , 20 ) ; contentPane . add ( textField ) ; }
tr	1	public StudentInfo getStdInfo ( ) { return stdInfo ; }
tr	1	public short [ ] [ ] action_table ( ) { return _action_table ; }
tr	2	public void onUnitDestroy ( Unit unit ) { if ( eventListener != null ) { eventListener . onUnitDestroy ( unit ) ; } }
tr	5X	public String fillStaffInfo ( String staffPos ) { DB . db . openConnection ( ) ; ResultSet rs = DB . db . staff ( ) ; StringBuffer info = new StringBuffer ( ) ; try { info . append ( "<table>" ) ; while ( rs . next ( ) ) { ResultSet res = DB . db . position ( rs . getInt ( "posid" ) ) ; while ( res . next ( ) ) { if ( res . getString ( "posdesc" ) . equalsIgnoreCase ( staffPos ) ) { if ( staffPos . equalsIgnoreCase ( "gp" ) ) { info . append ( "<tr><td>Dr. <b>" ) ; } else if ( staffPos . equalsIgnoreCase ( "ns" ) ) { info . append ( "<tr><td>R.N. <b>" ) ; } else if ( staffPos . equalsIgnoreCase ( "ma" ) ) { info . append ( "<tr><td>Med.As. <b>" ) ; } info . append ( rs . getString ( "lname" ) ) ; info . append ( "  " + rs . getString ( "fname" ) ) ; info . append ( "</b></td></tr>" ) ; info . append ( "<tr><td>Phone: <b>" ) ; info . append ( rs . getString ( "phone" ) + "</b></td></tr>" ) ; ResultSet ress = DB . db . qualification ( rs . getInt ( "qualid" ) ) ; while ( ress . next ( ) ) { info . append ( "<tr><td>Qualification: <b>" ) ; info . append ( ress . getString ( "qualdesc" ) + "</b></td></tr>" ) ; } ResultSet rss = DB . db . staffSchedule ( rs . getInt ( "id" ) ) ; while ( rss . next ( ) ) { ress = DB . db . hospital ( rss . getInt ( "hospid" ) ) ; while ( ress . next ( ) ) { info . append ( "<tr><td>Hospital: <b>" ) ; info . append ( ress . getString ( "name" ) + "</b></td></tr>" ) ; } } info . append ( "<tr></tr>" ) ; } } } info . append ( "</table>" ) ; DB . db . close ( ) ; } catch ( SQLException ex ) { Logger . getLogger ( StartMedOfficer . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; DB . db . close ( ) ; } return info . toString ( ) ; }
tr	3	@ Override public void paint ( Graphics g ) { Graphics2D g2d = ( Graphics2D ) g ; if ( image != null ) { synchronized ( image ) { g2d . setRenderingHint ( RenderingHints . KEY_RENDERING , RenderingHints . VALUE_RENDER_SPEED ) ; g2d . drawImage ( image , 0 , 0 , null ) ; } } else { super . paint ( g2d ) ; } }
tr	3	void prune ( File [ ] files ) { int size = 0 ; for ( File file : files ) { if ( file . isFile ( ) && ! file . getName ( ) . equals ( "FAT" ) ) { size += file . length ( ) ; } } int cnt = 0 ; int limit = Globals . getCacheLimit ( ) ; while ( size > limit && cnt < files . length ) { File current = files [ cnt ++ ] ; if ( current . isFile ( ) && ! current . getName ( ) . equals ( "FAT" ) ) { size -= current . length ( ) ; current . delete ( ) ; } } fileUse . set ( size ) ; updateGUIDisk ( ) ; }
tr	4	@ Override public int loginUsuario ( String login , String password ) throws RemoteException { int result = - 1 ; ArrayList < UsuarioInt > usuarios = obtenerUsuarios ( ) ; for ( UsuarioInt usuario : usuarios ) { if ( login . compareTo ( usuario . getLogin ( ) ) == 0 && password . compareTo ( usuario . getPassword ( ) ) == 0 ) { if ( usuario . getAdmin ( ) ) { result = 2 ; } else { result = 1 ; } } else if ( login . compareTo ( usuario . getLogin ( ) ) == 0 || password . compareTo ( usuario . getPassword ( ) ) == 0 ) { result = 0 ; } } return result ; }
tr	4	private Object readValue ( ) throws JSONException { switch ( read ( 2 ) ) { case 0 : return new Integer ( read ( ! bit ( ) ? 4 : ! bit ( ) ? 7 : 14 ) ) ; case 1 : byte [ ] bytes = new byte [ 256 ] ; int length = 0 ; while ( true ) { int c = read ( 4 ) ; if ( c == endOfNumber ) { break ; } bytes [ length ] = bcd [ c ] ; length += 1 ; } Object value ; try { value = JSONObject . stringToValue ( new String ( bytes , 0 , length , "US-ASCII" ) ) ; } catch ( UnsupportedEncodingException e ) { throw new JSONException ( e ) ; } this . values . register ( value ) ; return value ; case 2 : return getAndTick ( this . values , this . bitreader ) ; case 3 : return readJSON ( ) ; default : throw new JSONException ( "Impossible." ) ; } }
tr	5X	private void evaluateArray ( Object target , String basePath ) throws InterpolationException { int len = Array . getLength ( target ) ; for ( int i = 0 ; i < len ; i ++ ) { Object value = Array . get ( target , i ) ; if ( value != null ) { if ( String . class == value . getClass ( ) ) { String interpolated = interpolator . interpolate ( ( String ) value , recursionInterceptor ) ; if ( ! interpolated . equals ( value ) ) { Array . set ( target , i , interpolated ) ; } } else { interpolationTargets . add ( new InterpolationTarget ( value , basePath + "[" + i + "]" ) ) ; } } } }
tr	4	public List < PayloadSubjectExceptionData > getExceptions ( ) throws Exception { if ( this . exceptions == null ) { this . exceptions = new ArrayList < PayloadSubjectExceptionData > ( ) ; NodeList exceptions = Utilities . selectNodes ( this . getDocument ( ) , "/dc:DCTransaction/dc:GetDataBySubjectRs/dc:PayloadSubjectExceptions/dc:PayloadSubjectException" , XMLLabels . STANDARD_NAMESPACES ) ; if ( exceptions != null ) { for ( int i = 0 ; i < exceptions . getLength ( ) ; ++ i ) { Node exception = exceptions . item ( i ) ; this . exceptions . add ( new PayloadSubjectExceptionData ( exception ) ) ; } } } return this . exceptions ; }
tr	4	@ Test public void basicNewBoard ( ) throws Exception { Thread t1 = new Thread ( new Runnable ( ) { public void run ( ) { Server server ; try { server = new Server ( 4444 ) ; server . serve ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } } ) ; t1 . start ( ) ; Client client = new Client ( "localhost" , 4444 ) ; ClientReceiveProtocol protocol = client . getClientReceiveProtocol ( ) ; String input = "newBoard board true" ; protocol . testHandleRequest ( input ) ; assertTrue ( client . getBoardSuccessful ( ) . containsKey ( "board" ) ) ; assertTrue ( client . getBoardSuccessful ( ) . get ( "board" ) . getValue ( ) == true ) ; }
tr	4	public static void main ( String [ ] args ) { int k = 0 ; try { k = Integer . parseInt ( args [ 0 ] ) ; } catch ( NumberFormatException e ) { System . out . println ( "Expected an argument with the number of elements to print." ) ; System . out . println ( "USAGE: Subset k - to print k values from the input." ) ; System . out . println ( "EXAMPLE: echo A B C D E F G H I | java Subset 3  => prints out 3 values from the input." ) ; } int n = 0 ; RandomizedQueue < String > rq = new RandomizedQueue < String > ( ) ; while ( ! StdIn . isEmpty ( ) ) { String s = StdIn . readString ( ) ; n ++ ; if ( rq . size ( ) == k ) { final double rnd = StdRandom . uniform ( 1 , n + 1 ) ; if ( rnd <= k ) { rq . dequeue ( ) ; rq . enqueue ( s ) ; } } else { rq . enqueue ( s ) ; } } for ( int i = 0 ; i < k && ! rq . isEmpty ( ) ; i ++ ) { System . out . println ( rq . dequeue ( ) ) ; } }
tr	3	private void parseDisplayBPM ( String bpmValues , SimFile accumulator ) { final String [ ] bpmCodes = bpmValues . split ( " " ) ; double min = Integer . MAX_VALUE ; String minText = "" ; double max = Integer . MIN_VALUE ; String maxText = "" ; for ( String bpmCode : bpmCodes ) { String bpmText = bpmCode . substring ( bpmCode . indexOf ( = ) + 1 ) ; double bpm = double . parseDouble ( bpmText ) ; if ( bpm < min ) { min = bpm ; minText = bpmText ; } if ( bpm > max ) { max = bpm ; maxText = bpmText ; } } String displayBPM ; if ( max == min ) { displayBPM = minText ; } else { displayBPM = minText + " - " + maxText ; } accumulator . setDisplayBPM ( displayBPM ) ; }
tr	2	public static void main ( String [ ] args ) { int numCases = in . nextInt ( ) ; for ( int i = 0 ; i < numCases ; i ++ ) { processCase ( i + 1 ) ; } }
tr	3	public void update ( User user ) { Session session = null ; try { session = HibernateUtil . getSessionFactory ( ) . openSession ( ) ; session . beginTransaction ( ) ; session . update ( user ) ; session . getTransaction ( ) . commit ( ) ; } catch ( Exception e ) { System . err . println ( "\u041E\u0448\u0438\u0431\u043A\u0430 \u043F\u0440\u0438 \u0432\u0441\u0442\u0430\u0432\u043A\u0435" + e . getMessage ( ) ) ; } finally { if ( session != null && session . isOpen ( ) ) { session . close ( ) ; } } }
tr	5X	@ Override public void doTurn ( ) { getLocation ( ) . world . clearTileVisibility ( ) ; for ( int y = getLocation ( ) . y + getViewDistance ( ) ; y >= getLocation ( ) . y - getViewDistance ( ) ; y -- ) { int deltaX = getViewDistance ( ) - Math . abs ( y - getLocation ( ) . y ) ; for ( int x = getLocation ( ) . x + deltaX ; x >= getLocation ( ) . x - deltaX ; x -- ) { if ( AIController . checkVisibility ( getLocation ( ) , new WorldLocation ( null , x , y ) ) ) { getLocation ( ) . world . setTileVisible ( x , y , true ) ; } if ( new WorldLocation ( getLocation ( ) . world , x , y ) . getTile ( ) instanceof TileSecretDoor ) { int chance = 30 - getStats ( ) . getIntelligence ( ) ; if ( chance <= 0 || new Random ( ) . nextInt ( chance ) == 0 ) { logMessage ( "Something about one of the walls nearby seems off to you" ) ; } } } } }
tr	5X	public ContextMenu getContextMenu ( final Modelverzameling mv ) { if ( contextMenu == null ) { contextMenu = new ContextMenu ( ) ; MenuItem menuItem1 = new MenuItem ( "Wat is het" ) ; menuItem1 . setOnAction ( new EventHandler < ActionEvent > ( ) { @ Override public void handle ( ActionEvent event ) { mv . getTekstVakModel ( ) . setText ( "Dit is een " + getName ( ) ) ; } } ) ; contextMenu . getItems ( ) . add ( menuItem1 ) ; if ( isEetbaar ( ) ) { MenuItem menuItem2 = new MenuItem ( "Eet" ) ; menuItem2 . setOnAction ( new EventHandler < ActionEvent > ( ) { @ Override public void handle ( ActionEvent event ) { eet ( mv ) ; } } ) ; contextMenu . getItems ( ) . add ( menuItem2 ) ; } } return contextMenu ; }
tr	3	private boolean r_attached_pronoun ( ) { int among_var ; ket = cursor ; if ( find_among_b ( a_1 , 13 ) == 0 ) { return false ; } bra = cursor ; among_var = find_among_b ( a_2 , 11 ) ; if ( among_var == 0 ) { return false ; } if ( ! r_RV ( ) ) { return false ; } switch ( among_var ) { case 0 : return false ; case 1 : bra = cursor ; slice_from ( "iendo" ) ; break ; case 2 : bra = cursor ; slice_from ( "ando" ) ; break ; case 3 : bra = cursor ; slice_from ( "ar" ) ; break ; case 4 : bra = cursor ; slice_from ( "er" ) ; break ; case 5 : bra = cursor ; slice_from ( "ir" ) ; break ; case 6 : slice_del ( ) ; break ; case 7 : if ( ! ( eq_s_b ( 1 , "u" ) ) ) { return false ; } slice_del ( ) ; break ; } return true ; }
tr	1	@ Override public synchronized void removeNotify ( ) { this . applet . shutdown ( ) ; super . removeNotify ( ) ; }
tr	1	public long getTimeToWait ( ) { return this . timeToWait ; }
tr	4	public static ArrayList < String > getCluster ( String token ) { if ( singleton == null ) { singleton = new BrownFeaturizer ( ) ; singleton . init ( new Model ( ) ) ; } ArrayList < String > list = new ArrayList < String > ( ) ; String cluster = singleton . mappingS . get ( token ) ; if ( cluster == null ) { cluster = "NONE" ; } else { for ( int len : LEN ) { if ( cluster . length ( ) >= len ) { String pf = cluster . substring ( 0 , len ) ; list . add ( "CLUST_" + len + "_" + pf ) ; } } list . add ( "CLUST_ALL_" + cluster ) ; } return list ; }
tr	5X	public static JSONArray rowToJSONArray ( JSONTokener x ) throws JSONException { JSONArray ja = new JSONArray ( ) ; for ( ; ; ) { String value = getValue ( x ) ; char c = x . next ( ) ; if ( value == null || ( ja . length ( ) == 0 && value . length ( ) == 0 && c !=   ) ) { return null ; } ja . put ( value ) ; for ( ; ; ) { if ( c ==   ) { break ; } if ( c !=   ) { if ( c ==  || c ==  || c == 0 ) { return ja ; } throw x . syntaxError ( "Bad character '" + c + "' (" + ( int ) c + ")." ) ; } c = x . next ( ) ; } } }
tr	5X	public void SendPinMsg ( ) { message = msgs . getText ( ) ; subject = subj . getText ( ) ; HTTPClient hc = new HTTPClient ( ) ; hc . getConnectionString ( ) ; if ( ! AppFunctions . ntwkCon ) { UiApplication . getUiApplication ( ) . invokeLater ( new Runnable ( ) { public void run ( ) { Dialog . inform ( "Please check your network  Pin Broadcast requires BIS or Wifi" ) ; info . setText ( "Check your network connection" ) ; } } ) ; } else if ( AppFunctions . trialCount < 1 ) { UiApplication . getUiApplication ( ) . invokeLater ( new Runnable ( ) { public void run ( ) { Dialog . inform ( "You have exceeded the number of messages you can send. You have " + AppFunctions . trialCount + " left. Please Buy more messages by selecting the 'Buy Pin Message' menu for information on subscription. Select 'Verify Account' on the menu after subscription to send more messages." ) ; info . setText ( "Message number exceeded." ) ; } } ) ; } else if ( ContactArray . size ( ) > AppFunctions . trialCount ) { UiApplication . getUiApplication ( ) . invokeLater ( new Runnable ( ) { public void run ( ) { Dialog . inform ( "The contacts in your message exceeds what you have left (" + AppFunctions . formatNumber ( AppFunctions . trialCount , 0 , " " ) + "). Please subscribe and select 'Verify Account' on the menu for unlimited contacts or reduce the number of your contacts to " + AppFunctions . formatNumber ( AppFunctions . trialCount , 0 , " " ) ) ; } } ) ; } else { if ( message . length ( ) < 5 || subject . length ( ) < 3 || from . getText ( ) . length ( ) < 2 || FileSel == null ) { UiApplication . getUiApplication ( ) . invokeLater ( new Runnable ( ) { public void run ( ) { Dialog . inform ( "Please verify that From  Subject  Message and your Contact File has been entered properly before sending this message." ) ; info . setText ( "Error in message  please check again." ) ; } } ) ; } else { new Thread ( sndmsg ) . start ( ) ; } } }
tr	2	private void endExpression ( ) { String s = textHandler . end ( ) ; if ( s . length ( ) > 0 ) { container . add ( new Expression ( s , pass2 ) ) ; } }
tr	1	@ Override public void setPopulation ( TspPopulation p ) { population = p ; }
tr	2	public int [ ] getAction_Per_State_As_Array ( ) { int ret [ ] = new int [ noOfStates ] ; for ( int i = 0 ; i < noOfStates ; i ++ ) { ret [ i ] = action_Per_State . get ( i ) ; } return ret ; }
tr	5X	public void start ( ) { if ( applet != null ) { applet . start ( ) ; return ; } if ( gameUpdaterStarted ) return ; Thread t = new Thread ( ) { public void run ( ) { gameUpdater . run ( ) ; try { if ( ! gameUpdater . fatalError ) replace ( gameUpdater . createApplet ( ) ) ; } catch ( ClassNotFoundException e ) { e . printStackTrace ( ) ; } catch ( InstantiationException e ) { e . printStackTrace ( ) ; } catch ( IllegalAccessException e ) { e . printStackTrace ( ) ; } } } ; t . setDaemon ( true ) ; t . start ( ) ; t = new Thread ( ) { public void run ( ) { while ( applet == null ) { repaint ( ) ; try { Thread . sleep ( 10 ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } } } } ; t . setDaemon ( true ) ; t . start ( ) ; gameUpdaterStarted = true ; }
tr	5X	void deleteActivity ( Component dialogParent , Activity activity ) { if ( activity != null ) { if ( AlertMessages . deleteActivityConfirmation ( dialogParent , activity ) ) { try { Connection conn = Dao . getConnection ( ) ; for ( Time t : timeDao . getTimesByActivity ( conn , activity ) ) { timeDao . deleteTime ( conn , t ) ; } activityDao . deleteActivity ( conn , activity ) ; activityDialog . setActivity ( null ) ; activityListDialog . selectPreviousRow ( ) ; activityDialog . setVisible ( false ) ; } catch ( SQLException ex ) { ErrorMessages . sqlExceptionError ( "deleteActivity()" , ex ) ; } catch ( ClassNotFoundException ex ) { ErrorMessages . classNotFoundError ( "deleteActivity()" , ex ) ; } } } else { AlertMessages . noActivitySelectedInTableForDeleting ( activityListDialog ) ; } }
tr	5X	public void clickActionListener ( final JButton btn ) { btn . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent arg0 ) { for ( int i = 0 ; i < suggestedButtonsNames . length ; i ++ ) if ( existingBoats . contains ( suggestedButtonsNames [ i ] ) ) { System . out . println ( "Ne mozes postaviti brod na to polje!" ) ; return ; } int sifraBroda = workingFrame . updateLabels ( ) ; if ( ( sifraBroda ) != - 1 ) { for ( int i = 0 ; i < 10 ; i ++ ) for ( int j = 0 ; j < 10 ; j ++ ) { if ( myButtonGameBoard [ i ] [ j ] . isBorderPainted ( ) ) { existingBoats . add ( myButtonGameBoard [ i ] [ j ] . getName ( ) ) ; myButtonGameBoard [ i ] [ j ] . setIcon ( shipImage ) ; gameBoardMask . FillStartMatrix ( i , j , sifraBroda ) ; } } } gameBoardMask . ispisi ( ) ; logicMatrix = gameBoardMask . gameBoard ; } } ) ; }
tr	3	public static BufferedImage getImage ( String fileName ) { BufferedImage i = null ; String path = "../images/" ; File f = null ; try { f = new File ( ResourceLoader . class . getResource ( path + fileName ) . getPath ( ) ) ; } catch ( NullPointerException e ) { Console . log ( "file + " + fileName + " is not there" , in . ERROR ) ; e . printStackTrace ( ) ; } if ( f != null && f . exists ( ) && ! f . isDirectory ( ) ) { try { i = ImageIO . read ( r . getClass ( ) . getClassLoader ( ) . getResource ( "images/" + fileName ) ) ; } catch ( Exception e ) { Console . log ( "image= " + fileName + " is not located here" , Console . in . ERROR ) ; e . printStackTrace ( ) ; } } return i ; }
tr	4	public static int getPedidosNatural ( Perfil perfil ) throws SQLException { if ( perfil != null ) { sql = "SELECT SUM(CANTIDAD) " + "FROM CLIENTES_REMITOS INNER JOIN CLIENTES_DETALLE_REMITO ON " + "CLIENTES_REMITOS.IDREMITO = CLIENTES_DETALLE_REMITO.IDREMITO " + "WHERE (((CLIENTES_REMITOS.TIPODOC)=1 Or (CLIENTES_REMITOS.TIPODOC)=4) AND " + "((CLIENTES_REMITOS.ENTREGADO)=False) AND " + "((CLIENTES_DETALLE_REMITO.ACT_STOCK)=False) AND " + "(COLOR = {COLOR}) AND (IDPERFIL = '{PERFIL}' ));" ; sql = sql . replace ( "{COLOR}" , Integer . toString ( ColorDP . ID_NATURAL ) ) ; sql = sql . replace ( "{PERFIL}" , perfil . getIdperf ( ) ) ; try ( ResultSet rs = ComunDP . getData ( sql ) ) { if ( rs != null && rs . next ( ) ) { return rs . getInt ( 1 ) ; } } } return 0 ; }
tr	3	public Map < String , Map < String , Object >> loadAsMap ( String key ) throws IOException { Map < String , Map < String , Object >> map = new HashMap < String , Map < String , Object >> ( ) ; LineIterator iterator = new LineIterator ( new FileReader ( file ) ) ; while ( iterator . hasNext ( ) ) { Map < String , Object > json = JsonOutput . MAPPER . readValue ( iterator . nextLine ( ) , Map . class ) ; if ( json . containsKey ( key ) ) { map . put ( json . get ( key ) . toString ( ) , json ) ; } } return map ; }
tr	5X	public static void lockInstance ( int port ) { if ( lockserver == null ) { try { lockserver = new ServerSocket ( port ) ; new Thread ( ) { @ Override public void run ( ) { while ( true ) { try { Socket socket = lockserver . accept ( ) ; ObjectInputStream in = new ObjectInputStream ( socket . getInputStream ( ) ) ; if ( window != null && in . readBoolean ( ) ) { window . setVisible ( true ) ; SwingUtilities . invokeLater ( new Runnable ( ) { @ Override public void run ( ) { window . setVisible ( true ) ; window . toFront ( ) ; window . requestFocus ( ) ; } } ) ; } in . close ( ) ; socket . close ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } } } . start ( ) ; } catch ( IOException e ) { try { Socket socket = new Socket ( Strings . getString ( InstanceLock . class , "0" ) , port ) ; ObjectOutputStream out = new ObjectOutputStream ( socket . getOutputStream ( ) ) ; out . writeBoolean ( true ) ; out . close ( ) ; socket . close ( ) ; } catch ( Exception e1 ) { } System . exit ( 0 ) ; } } }
tr	3	@ Override public void run ( ) { try { String hostname = NetBase . theNetBase ( ) . hostname ( ) ; if ( hostname != null ) { if ( hostname . isEmpty ( ) ) System . out . println ( "Host: root" ) ; else System . out . println ( "Host: '" + hostname + "'" ) ; } else System . out . println ( "Host: none" ) ; RPCService rpcService = ( RPCService ) NetBase . theNetBase ( ) . getService ( "rpc" ) ; if ( rpcService != null ) System . out . println ( "IP: " + IPFinder . localIP ( ) + "  Port: " + rpcService . localPort ( ) ) ; else System . out . println ( "No RPC service is running on this node." ) ; } catch ( Exception e ) { System . out . println ( "Caught exception: " + e . getMessage ( ) ) ; } }
tr	2	public void clearFeedback ( ) { for ( ValueSource vs : valueSources ) { vs . clearFeedback ( ) ; } }
tr	1	public static void showNewTimeWindow ( ) { timeBo . showNewTime ( ) ; }
tr	2	public DecisionNode getBranch ( Game game ) { int i ; for ( i = 0 ; i < Game . NUM_GHOSTS ; i ++ ) { if ( game . isEdible ( i ) == true ) return this . trueNode ; } return this . falseNode ; }
tr	3	public synchronized void updatedTTL ( ShareAvailability file ) { int row = 0 ; for ( String [ ] col : shares ) { if ( col [ 5 ] . equals ( file . getFile ( ) . getHash ( ) ) && col [ 4 ] . equals ( file . getHost ( ) . getAddress ( ) . getHostAddress ( ) ) ) { col [ 6 ] = String . valueOf ( file . getTtl ( ) ) ; } row ++ ; if ( shares . size ( ) > row ) { this . fireTableCellUpdated ( row , 6 ) ; } else { this . fireTableStructureChanged ( ) ; } } }
tr	2	public MerchantDeal getMerchantDeal ( int merchantDealId ) { MerchantDeal merchantDeal = null ; try { session = mySessionFactory . getCurrentSession ( ) ; merchantDeal = ( MerchantDeal ) session . get ( MerchantDeal . class , merchantDealId ) ; } catch ( Exception e ) { } return merchantDeal ; }
tr	5X	public static void changeBorrowState ( int copyID , boolean state ) { try { DocumentBuilderFactory docFactory = DocumentBuilderFactory . newInstance ( ) ; DocumentBuilder docBuilder = docFactory . newDocumentBuilder ( ) ; Document doc = docBuilder . parse ( new File ( "db/DBborrows.xml" ) ) ; doc . getDocumentElement ( ) . normalize ( ) ; int myItem = 0 ; NodeList borrowNodes = doc . getElementsByTagName ( "borrow" ) ; for ( int i = 0 ; i < borrowNodes . getLength ( ) ; i ++ ) { Element a = ( Element ) borrowNodes . item ( i ) ; if ( Integer . parseInt ( getNodeValue ( "borrowid" , a ) ) == copyID ) { myItem = i ; break ; } } Node copy = doc . getElementsByTagName ( "borrow" ) . item ( myItem ) ; NodeList list = copy . getChildNodes ( ) ; for ( int i = 0 ; i < list . getLength ( ) ; i ++ ) { Node node = list . item ( i ) ; if ( "active" . equals ( node . getNodeName ( ) ) ) { if ( state ) { node . setTextContent ( "true" ) ; } else { node . setTextContent ( "false" ) ; } } } TransformerFactory transformerFactory = TransformerFactory . newInstance ( ) ; Transformer transformer = transformerFactory . newTransformer ( ) ; DOMSource source = new DOMSource ( doc ) ; StreamResult result = new StreamResult ( new File ( "db/DBborrows.xml" ) ) ; transformer . transform ( source , result ) ; } catch ( ParserConfigurationException | SAXException | IOException | NumberFormatException | DOMException | AssertionError | TransformerFactoryConfigurationError | TransformerException e ) { JOptionPane . showMessageDialog ( null , e . getMessage ( ) , "" + "Error" , JOptionPane . ERROR_MESSAGE ) ; } }
tr	4	public char [ ] minCharCutMulti ( int numOfTracks ) { Debugger . debug ( "min cut set:***************\n" , 2 , debugLevel ) ; HashSet < ArrayList < Transition >> minCutSet = minCutMulti ( numOfTracks ) ; StringBuilder b = new StringBuilder ( ) ; for ( ArrayList < Transition > tracksArray : minCutSet ) { Transition tracks [ ] = new Transition [ numOfTracks ] ; for ( int i = 0 ; i < tracksArray . size ( ) ; i ++ ) { tracks [ tracksArray . get ( i ) . track - 1 ] = tracksArray . get ( i ) ; } for ( int i = 0 ; i < tracks . length ; i ++ ) { b . append ( "track" ) . append ( i + 1 ) ; b . append ( ": [" ) ; if ( tracks [ i ] . min != tracks [ i ] . max ) { Transition . appendCharString ( tracks [ i ] . min , b ) ; b . append ( "  " ) ; Transition . appendCharString ( tracks [ i ] . max , b ) ; } else Transition . appendCharString ( tracks [ i ] . min , b ) ; b . append ( "]" ) ; b . append ( "   " ) ; } b . append ( "\n" ) ; } Debugger . debug ( b . toString ( ) , 0 , debugLevel ) ; return null ; }
tr	1	public List < Calificacion > getCalificaciones ( ) { return calificaciones ; }
tr	5X	@ Override public void run ( ) { while ( true ) { try { for ( BlockLocationPair p : deletionQueue ) { String nodeLocation = p . nodeLocation ; String blockName = p . blockName ; String [ ] ipPort ; try { ipPort = AddressToIPPort . addressToIPPort ( nodeLocation ) ; Message inputMessage = new Message ( "remove" ) ; inputMessage . fileName = blockName ; Communicator . sendMessage ( ipPort [ 0 ] , Integer . parseInt ( ipPort [ 1 ] ) , inputMessage ) ; } catch ( NumberFormatException | IOException e ) { e . printStackTrace ( ) ; throw new IOException ( "Could not delete distributed file block " + blockName + "\n " + e . getMessage ( ) ) ; } } } catch ( Exception e ) { Logger . log ( "Error encountered while deleting distributed file: " + e . getMessage ( ) ) ; e . printStackTrace ( ) ; } try { Thread . sleep ( 3000 ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } } }
tr	1	public JTextField getTextNombre ( ) { return TextNombre ; }
tr	4	@ Override public InputStream getInputStream ( ) throws IOException { switch ( failValue ) { case 0 : return new InputStream ( ) { @ Override public int read ( ) throws IOException { return 1 ; } } ; case 1 : return null ; default : throw new IOException ( ) ; } }
tr	4	public void equipWeapon ( Survivor survivor , Weapon weapon ) throws CantEquipWeaponException { if ( ! this . survivors . contains ( survivor ) ) { throw new CantEquipWeaponException ( CantEquipWeaponException . notInTheTeam ( survivor ) ) ; } else if ( ! this . mainBase . getAvailableWeapons ( ) . contains ( weapon ) ) { throw new CantEquipWeaponException ( "Weapon must be one of those stored in base to equip" ) ; } else { Survivor owner = this . alreadyEquipped ( weapon ) ; if ( owner != null ) { throw new CantEquipWeaponException ( "Weapon is already equipped by " + owner . getName ( ) ) ; } else { Weapon oldWeapon = survivor . getWeapon ( ) ; this . mainBase . getAvailableWeapons ( ) . remove ( weapon ) ; survivor . setWeapon ( weapon ) ; if ( oldWeapon != null ) { this . mainBase . getAvailableWeapons ( ) . add ( oldWeapon ) ; } } } }
tr	3	private static void createList ( String tabName , final Vector < Chart > charts , TabFolder tabFolder , final StackLayout layout , final Composite composite ) { final List list = new List ( tabFolder , SWT . H_SCROLL | SWT . V_SCROLL ) ; TabItem basicTabItem = new TabItem ( tabFolder , SWT . NONE ) ; basicTabItem . setText ( tabName ) ; basicTabItem . setControl ( list ) ; for ( Chart chart : charts ) { list . add ( chart . getTitle ( ) . getText ( ) ) ; } list . addSelectionListener ( new SelectionAdapter ( ) { @ Override public void widgetSelected ( SelectionEvent event ) { Chart chart = charts . get ( list . getSelectionIndex ( ) ) ; chart . getAxisSet ( ) . adjustRange ( ) ; layout . topControl = chart ; composite . layout ( ) ; } } ) ; }
tr	3	public void advance ( ) { timeUntilNext -- ; if ( timeUntilNext <= 0 ) { stoppingAt ( ) ; if ( ! reverse && nextStation . getNext ( ) == null ) { reverse = true ; timeUntilNext = nextStation . getPrevTime ( ) ; nextStation = nextStation . getPrev ( ) ; return ; } if ( reverse && nextStation . getPrev ( ) == null ) { reverse = false ; timeUntilNext = nextStation . getNextTime ( ) ; nextStation = nextStation . getNext ( ) ; return ; } if ( reverse ) { timeUntilNext = nextStation . getPrevTime ( ) ; nextStation = nextStation . getPrev ( ) ; } else { timeUntilNext = nextStation . getNextTime ( ) ; nextStation = nextStation . getNext ( ) ; } } }
tr	1	private PlayerPanel buildSecondPlayerPanel ( ) { return new ComputerPlayerPanel ( controller , PlayerSide . RIGHT ) ; }
tr	4	public void incCount ( E data ) { if ( overallRoot == null ) { overallRoot = new BSTNode ( data ) ; return ; } BSTNode currentNode = overallRoot ; while ( true ) { int cmp = comparator . compare ( data , currentNode . data ) ; if ( cmp == 0 ) { currentNode . count ++ ; return ; } else if ( cmp < 0 ) { if ( currentNode . left == null ) { currentNode . left = new BSTNode ( data ) ; return ; } currentNode = currentNode . left ; } else { if ( currentNode . right == null ) { currentNode . right = new BSTNode ( data ) ; return ; } currentNode = currentNode . right ; } } }
tr	3	private Expression expression0 ( ) throws RequiredTokenException { enterRule ( NonTerminal . EXPRESSION0 ) ; Expression lhs = expression1 ( ) ; if ( firstSetSatisfied ( NonTerminal . OP0 ) ) { Token op = null ; try { op = op0 ( ) ; lhs = Command . newExpression ( lhs , op , expression1 ( ) ) ; } catch ( FirstSetUnsatisfiedException e ) { lhs = new Error ( ( ( Command ) lhs ) . lineNumber ( ) , ( ( Command ) lhs ) . charPosition ( ) , String . format ( "First set unsatisfied for nonterminal of type \"%s\"." , e . Unsatisfied ) ) ; } } exitRule ( ) ; return lhs ; }
tr	3	private static ArrayList < CoordenadasHomogeneas > criarMesh2 ( ArrayList < CoordenadasHomogeneas > listCoord , ArrayList < CoordenadasHomogeneas > listaSPCurvaParcial ) { for ( CoordenadasHomogeneas semiPonto : listaSPCurvaParcial ) { listCoord . add ( new CoordenadasNorm ( semiPonto . getXD ( ) , semiPonto . getYD ( ) , 1.0 ) ) ; } double [ ] [ ] m = new double [ 4 ] [ 3 ] ; Matrix matrizGeo = new Matrix ( m ) ; double [ ] f0 = new double [ 3 ] ; double [ ] deltaF0 = new double [ 3 ] ; double [ ] delta2F0 = new double [ 3 ] ; double [ ] delta3F0 = new double [ 3 ] ; FabricaMatriz ma = new FabricaMatriz ( ) ; Matrix gbs = ma . matrizGBS ( ) ; ArrayList < CoordenadasHomogeneas > ptsCurva = new ArrayList < CoordenadasHomogeneas > ( ) ; for ( int i = 0 ; i < listCoord . size ( ) - 3 ; i ++ ) { for ( int j = 0 ; j < matrizGeo . getRowDimension ( ) ; j ++ ) { matrizGeo . set ( j , 0 , listCoord . get ( j + i ) . getXD ( ) ) ; matrizGeo . set ( j , 1 , listCoord . get ( j + i ) . getYD ( ) ) ; matrizGeo . set ( j , 2 , listCoord . get ( j + i ) . getZD ( ) ) ; } Matrix coef = gbs . times ( matrizGeo ) ; double delta = ( 1.0 / DIVISOES ) ; for ( int k = 0 ; k < 3 ; k ++ ) { f0 [ k ] = coef . get ( 3 , k ) ; deltaF0 [ k ] = coef . get ( 0 , k ) * ( Math . pow ( delta , 3 ) ) + coef . get ( 1 , k ) * ( Math . pow ( delta , 2 ) ) + coef . get ( 2 , k ) * delta ; delta2F0 [ k ] = 6 * coef . get ( 0 , k ) * ( Math . pow ( delta , 3 ) ) + 2 * coef . get ( 1 , k ) * ( Math . pow ( delta , 2 ) ) ; delta3F0 [ k ] = 6 * coef . get ( 0 , k ) * ( Math . pow ( delta , 3 ) ) ; } CoordenadasHomogeneas p = listCoord . get ( i ) ; ArrayList < CoordenadasHomogeneas > ptsSegCurva = forwardDiferencies ( p , f0 , deltaF0 , delta2F0 , delta3F0 ) ; for ( CoordenadasHomogeneas c : ptsSegCurva ) { ptsCurva . add ( c ) ; } } return ptsCurva ; }
tr	5X	public static void main ( String [ ] args ) { boolean ok = false ; long startTime , endTime ; LinkedList < Drone > mDroneArm = new LinkedList < > ( ) ; DroneQueue droneQueue = new DroneQueue ( mDroneArm ) ; Config config = Config . getInstance ( ) ; config . load ( "config.xml" ) ; clearKMLs ( ) ; String dirs [ ] = config . getOption ( Config . GTFS_DIRS ) . split ( " " ) ; int timeGap = config . getIntOption ( Config . GTFS_TIME_GAP ) ; GraphFrame gp = null ; if ( config . getBooleanOption ( Config . DEBUG_DISPLAY ) ) { gp = new GraphFrame ( ) ; } final String password = Config . getInstance ( ) . getOption ( Config . SERVER_PASSWORD ) ; final int port = Config . getInstance ( ) . getIntOption ( Config . SERVER_PORT ) ; GPSPortal g = new GPSPortal ( port , password ) ; int id = 1 ; final double busSpeed = Config . getInstance ( ) . getDoubleOption ( Config . DRONE_SPEED ) ; final double busUpdateTime = Config . getInstance ( ) . getDoubleOption ( Config . DRONE_UPDATE_SPEED ) ; boolean dronesActive = config . getBooleanOption ( Config . DRONES_ACTIVE ) ; if ( dronesActive ) { System . out . println ( "Drones Active!" ) ; } ArrayList < GTFS > gtfs = new ArrayList < > ( ) ; for ( String dir : dirs ) { dir = dir . trim ( ) ; System . out . println ( dir + "\n----------" ) ; try { startTime = System . currentTimeMillis ( ) ; GTFS current = new GTFS ( dir , timeGap ) ; gtfs . add ( current ) ; endTime = System . currentTimeMillis ( ) ; System . out . println ( dir + " loaded and parsed in " + ( ( endTime - startTime ) / 1000.0 ) + " seconds" ) ; System . out . println ( dir + " id: " + current . getID ( ) ) ; if ( config . getBooleanOption ( Config . DEBUG_DISPLAY ) ) { gp . adjustViewport ( current . getMinLon ( ) , current . getMinLat ( ) , current . getMaxLon ( ) , current . getMaxLat ( ) ) ; gp . addPaths ( current . getPaths ( ) ) ; } if ( dronesActive ) { for ( int i = 0 ; i < current . getPaths ( ) . size ( ) ; i ++ ) { int now = timeToMinutes ( new SimpleDateFormat ( "HH:mm:ss" ) . format ( new Date ( ) ) ) ; if ( current . isValidService ( current . getPaths ( ) . get ( i ) . getServiceID ( ) ) && current . getPaths ( ) . get ( i ) . getEndTimecode ( ) > now ) { System . out . println ( dir + ": " + current . getPaths ( ) . get ( i ) ) ; droneQueue . addDrone ( new Drone ( id , current . getPaths ( ) . get ( i ) , busSpeed , busUpdateTime , "http://127.0.0.1:8080" , password , false ) ) ; id ++ ; } } } ok = true ; } catch ( Exception e ) { System . out . println ( e . toString ( ) ) ; System . exit ( - 1 ) ; } System . out . println ( ) ; } if ( config . getBooleanOption ( Config . DEBUG_DISPLAY ) ) { gp . setVisible ( true ) ; } boolean running = true ; int vListTimeout = Config . getInstance ( ) . getIntOption ( Config . VEHICLE_LIST_TIMEOUT ) ; System . out . println ( "Running..." ) ; while ( running ) { int now = timeToMinutes ( new SimpleDateFormat ( "HH:mm:ss" ) . format ( new Date ( ) ) ) ; Vehicle . cleanUp ( vListTimeout ) ; droneQueue . check ( now ) ; try { Thread . sleep ( 1000 ) ; } catch ( InterruptedException ex ) { Logger . getLogger ( WTBBackend . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; } System . gc ( ) ; running = ! droneQueue . isEmpty ( ) ; } }
tr	5X	public static LinkedList < String > generateAttackPlans ( AttackModel attack_model ) throws IOException , ScriptException { String attack_file = InfoEnum . current_directory + "/dlv/attack/attack_model.dl" ; Inference . writeFile ( attack_file , attack_model . generateFormalExpression ( InfoEnum . ALL_MODELS ) , false ) ; for ( Element e : attack_model . getElements ( ) ) { RequirementElement re = ( RequirementElement ) e ; if ( re . getType ( ) . equals ( InfoEnum . RequirementElementType . NEW_ANTI_GOAL . name ( ) ) ) { if ( re . getOutLinks ( ) . size ( ) == 0 ) { Inference . writeFile ( attack_file , "satisfied(" + re . getId ( ) + ")." , true ) ; break ; } } } String dlv_command = InfoEnum . current_directory + "/dlv/dlv -silent -nofacts " + InfoEnum . current_directory + "/dlv/attack/find_alternative_attacks.rule " + attack_file ; Runtime rt = Runtime . getRuntime ( ) ; Process pr = rt . exec ( dlv_command ) ; BufferedReader input = new BufferedReader ( new InputStreamReader ( pr . getInputStream ( ) ) ) ; String line = null ; LinkedList < LinkedList < String >> all_alternatives = new LinkedList < LinkedList < String >> ( ) ; LinkedList < String > alternative_description = new LinkedList < String > ( ) ; while ( ( line = input . readLine ( ) ) != null ) { LinkedList < String > one_alternative = new LinkedList < String > ( ) ; line = line . substring ( 1 , line . length ( ) - 1 ) ; String [ ] result = line . split ( "  " ) ; boolean validity = false ; for ( String s : result ) { if ( s . startsWith ( "result" ) ) { String id = s . substring ( s . indexOf ( "(" ) + 1 , s . indexOf ( " " ) ) ; String target = s . substring ( s . indexOf ( " " ) + 1 , s . indexOf ( ")" ) ) . replace ( "_" , " " ) ; Element node = attack_model . findElementById ( id ) ; if ( node != null ) { if ( node . getType ( ) . equals ( InfoEnum . RequirementElementType . TASK . name ( ) ) ) { one_alternative . add ( "perform " + node . getName ( ) + " to " + target ) ; validity = true ; } } else { System . out . println ( "result elements cannot be found." ) ; } } else if ( s . startsWith ( "unachievable" ) ) { validity = false ; break ; } } if ( validity ) { all_alternatives . add ( one_alternative ) ; } } int number = 0 ; for ( LinkedList < String > list : all_alternatives ) { number ++ ; String temp = "Attack alterntive " + number + "(" + list . size ( ) + " attack)" + ":{" ; String attacks = "" ; for ( String attack : list ) { attacks += attack + "  " ; } temp += attacks . substring ( 0 , attacks . length ( ) - 2 ) ; temp += "}" ; alternative_description . add ( temp ) ; } return alternative_description ; }
tr	5X	public class findClass ( String className ) { final class aClass = handleGenaratedClass ( className ) ; if ( aClass != null ) { return aClass ; } byte classByte [ ] ; class result = null ; result = ( class ) classes . get ( className ) ; if ( result != null ) { return result ; } try { return findSystemClass ( className ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } try { if ( jarFiles . size ( ) > 0 ) { for ( LibraryEntity jarFile : jarFiles ) { final String [ ] libNames = jarFile . getLibNames ( ) ; for ( String libName : libNames ) { JarFile jar = new JarFile ( ApplicationSettings . getInstance ( ) . getLibraryBasePath ( ) + libName ) ; final Enumeration < JarEntry > entries = jar . entries ( ) ; while ( entries . hasMoreElements ( ) ) { JarEntry element = entries . nextElement ( ) ; final String accClassName = element . getName ( ) . replaceAll ( "/" , "." ) ; if ( ( className + ".class" ) . equals ( accClassName ) ) { InputStream is = jar . getInputStream ( element ) ; ByteArrayOutputStream byteStream = new ByteArrayOutputStream ( ) ; int nextValue = is . read ( ) ; while ( - 1 != nextValue ) { byteStream . write ( nextValue ) ; nextValue = is . read ( ) ; } classByte = byteStream . toByteArray ( ) ; result = defineClass ( className , classByte , 0 , classByte . length , null ) ; classes . put ( className , result ) ; return result ; } } } } } } catch ( Exception e ) { e . printStackTrace ( ) ; } return null ; }
tr	4	public void update ( ) { for ( int i = 0 ; i < waternodes . size ( ) ; i ++ ) { float x = waternodes . get ( i ) . physrect . getX ( ) ; float y = waternodes . get ( i ) . physrect . getY ( ) ; float width = waternodes . get ( i ) . physrect . getWidth ( ) ; float height = waternodes . get ( i ) . physrect . getHeight ( ) ; Node leaf = getLeaf ( x , y + height ) ; if ( leaf != null ) { if ( leaf . type == Block . EMPTY ) { fillCell ( x , y + height , Block . WATER ) ; emptyCell ( x , y ) ; continue ; } } leaf = getLeaf ( x + width , y ) ; if ( leaf != null ) { if ( leaf . type == Block . EMPTY ) { fillCell ( x + width , y , Block . WATER ) ; emptyCell ( x , y ) ; continue ; } } leaf = getLeaf ( x - width , y ) ; if ( leaf != null ) { if ( leaf . type == Block . EMPTY ) { fillCell ( x - width , y , Block . WATER ) ; emptyCell ( x , y ) ; continue ; } } } for ( int i = 0 ; i < acidnodes . size ( ) ; i ++ ) { float x = acidnodes . get ( i ) . physrect . getX ( ) ; float y = acidnodes . get ( i ) . physrect . getY ( ) ; float width = acidnodes . get ( i ) . physrect . getWidth ( ) ; float height = acidnodes . get ( i ) . physrect . getHeight ( ) ; Node leaf = getLeaf ( x , y + height ) ; if ( leaf != null ) { if ( leaf . type == Block . EMPTY ) { fillCell ( x , y + height , Block . ACID ) ; emptyCell ( x , y ) ; continue ; } } leaf = getLeaf ( x + width , y ) ; if ( leaf != null ) { if ( leaf . type == Block . EMPTY ) { fillCell ( x + width , y , Block . ACID ) ; emptyCell ( x , y ) ; continue ; } } leaf = getLeaf ( x - width , y ) ; if ( leaf != null ) { if ( leaf . type == Block . EMPTY ) { fillCell ( x - width , y , Block . ACID ) ; emptyCell ( x , y ) ; continue ; } } } }
tr	4	public Matrix getU ( ) { Matrix X = new Matrix ( n , n ) ; double [ ] [ ] U = X . getArray ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( i <= j ) { U [ i ] [ j ] = LU [ i ] [ j ] ; } else { U [ i ] [ j ] = 0.0 ; } } } return X ; }
tr	3	public final void loadTerrainBlock ( byte blockData [ ] , int blockY , int blockX , int k , int l , CollisionMap collisionMap [ ] ) { for ( int plane = 0 ; plane < 4 ; plane ++ ) { for ( int tileX = 0 ; tileX < 64 ; tileX ++ ) { for ( int tileY = 0 ; tileY < 64 ; tileY ++ ) if ( blockX + tileX > 0 && blockX + tileX < 103 && blockY + tileY > 0 && blockY + tileY < 103 ) collisionMap [ plane ] . clippingData [ blockX + tileX ] [ blockY + tileY ] &= feffffff ; } } Buffer stream = new Buffer ( blockData ) ; for ( int plane = 0 ; plane < 4 ; plane ++ ) { for ( int tileX = 0 ; tileX < 64 ; tileX ++ ) { for ( int tileY = 0 ; tileY < 64 ; tileY ++ ) loadTerrainTile ( tileY + blockY , l , stream , tileX + blockX , plane , 0 , k ) ; } } }
tr	5X	private boolean checkBackDiagonal ( int j , int i , ConnectFourPiece [ ] [ ] m_Pieces ) { boolean gameWon = false ; int secondPieceDDiagonalColoumn = i - 1 ; int thirdPieceDDiagonalColoumn = i - 2 ; int fourthPieceDDiagonalColoumn = i - 3 ; int secondPieceDDiagonalRow = j + 1 ; int thirdPieceDDiagonalRow = j + 2 ; int fourthPieceDDiagonalRow = j + 3 ; if ( j < ROW_EIGHT && i > COLUMN_THREE && m_Pieces [ j ] [ i ] . getPieceColour ( ) == m_Pieces [ secondPieceDDiagonalRow ] [ secondPieceDDiagonalColoumn ] . getPieceColour ( ) ) { if ( j < ROW_EIGHT && i > COLUMN_THREE && m_Pieces [ j ] [ i ] . getPieceColour ( ) == m_Pieces [ thirdPieceDDiagonalRow ] [ thirdPieceDDiagonalColoumn ] . getPieceColour ( ) ) { if ( j < ROW_EIGHT && i > COLUMN_THREE && m_Pieces [ j ] [ i ] . getPieceColour ( ) == m_Pieces [ fourthPieceDDiagonalRow ] [ fourthPieceDDiagonalColoumn ] . getPieceColour ( ) ) { if ( m_Pieces [ j ] [ i ] . getPieceColour ( ) == RED_PIECE ) { m_Pieces [ j ] [ i ] . setPieceColour ( RED_STAR_PIECE ) ; m_Pieces [ secondPieceDDiagonalRow ] [ secondPieceDDiagonalColoumn ] . setPieceColour ( RED_STAR_PIECE ) ; m_Pieces [ thirdPieceDDiagonalRow ] [ thirdPieceDDiagonalColoumn ] . setPieceColour ( RED_STAR_PIECE ) ; m_Pieces [ fourthPieceDDiagonalRow ] [ fourthPieceDDiagonalColoumn ] . setPieceColour ( RED_STAR_PIECE ) ; } else if ( m_Pieces [ j ] [ i ] . getPieceColour ( ) == YELLOW_PIECE ) { m_Pieces [ j ] [ i ] . setPieceColour ( YELLOW_STAR_PIECE ) ; m_Pieces [ secondPieceDDiagonalRow ] [ secondPieceDDiagonalColoumn ] . setPieceColour ( YELLOW_STAR_PIECE ) ; m_Pieces [ thirdPieceDDiagonalRow ] [ thirdPieceDDiagonalColoumn ] . setPieceColour ( YELLOW_STAR_PIECE ) ; m_Pieces [ fourthPieceDDiagonalRow ] [ fourthPieceDDiagonalColoumn ] . setPieceColour ( YELLOW_STAR_PIECE ) ; } gameWon = true ; } } } return gameWon ; }
tr	5X	private Location createLocation ( IPLocation ipLoc ) { Location location = new Location ( ) ; String city = ipLoc . getArea ( ) ; String country = ipLoc . getCountry ( ) ; if ( ( city == null ) || ( city . indexOf ( "CZ88.NET" ) > - 1 ) ) { city = "" ; } location . setCountry ( country ) ; location . setProvince ( city ) ; location . setCity ( city ) ; location . setAddress ( country + city ) ; if ( ! MyStringUtil . isBlank ( location . getAddress ( ) ) ) { int provinclen = Provinces . length ; for ( int l = 0 ; l < provinclen ; l ++ ) { String province = Provinces [ l ] ; if ( location . getAddress ( ) . indexOf ( province ) != - 1 ) { location . setCountry ( "\u4E2D\u56FD" ) ; location . setProvince ( province ) ; System . out . println ( province ) ; String [ ] citys = ProvinceCityMap . get ( province ) ; if ( citys != null ) { int citylen = citys . length ; for ( int k = 0 ; k < citylen ; k ++ ) { city = citys [ k ] ; if ( location . getAddress ( ) . indexOf ( city ) != - 1 ) { location . setCity ( city ) ; break ; } } } else { location . setProvince ( "\u5176\u4ED6" ) ; location . setCity ( "\u5176\u4ED6" ) ; } break ; } } int isplen = ISPs . length ; for ( int l = 0 ; l < isplen ; l ++ ) { String isp = ISPs [ l ] ; if ( location . getAddress ( ) . indexOf ( isp ) != - 1 ) { location . setISP ( isp ) ; break ; } } } if ( MyStringUtil . isBlank ( location . getCountry ( ) ) ) { location . setCountry ( "\u5176\u4ED6" ) ; } if ( MyStringUtil . isBlank ( location . getProvince ( ) ) ) { location . setProvince ( "\u5176\u4ED6" ) ; } if ( MyStringUtil . isBlank ( location . getCity ( ) ) ) { location . setCity ( "\u5176\u4ED6" ) ; } return location ; }
tr	4	public static boolean maybeTwoPairs ( List < Card > sourceCards , HandCombinationSink handCombinationSink ) { final Holder < Hand > bestHandHolder = new Holder < Hand > ( ) ; CardCombinator . iterate ( sourceCards , new CardCombinationCallback ( ) { @ Override public boolean process ( List < Card > cards ) { Collections . sort ( cards , new RankComparator ( ) ) ; final Rank rank0 = cards . get ( 0 ) . getRank ( ) ; if ( rank0 != cards . get ( 1 ) . getRank ( ) ) { return false ; } final Rank rank1 = cards . get ( 2 ) . getRank ( ) ; if ( rank1 != cards . get ( 3 ) . getRank ( ) ) { return false ; } final int rating = RATING_FLAG_MAP . get ( rank0 ) | RATING_FLAG_MAP . get ( rank1 ) ; if ( bestHandHolder . value == null || bestHandHolder . value . getRating ( ) < rating ) { bestHandHolder . value = new DefaultHand ( rating , HandRank . TWO_PAIRS , cards ) ; } return false ; } } , TWO_PAIRS_HAND_SIZE ) ; return provideBestHand ( bestHandHolder , handCombinationSink ) ; }
tr	3	public OfficeObject getByValue ( String selectedValue ) { for ( OfficeObject curObj : data ) { if ( curObj . getName ( ) . equals ( selectedValue ) ) { return curObj ; } } return null ; }
tr	3	public int getCategorySize ( String name ) { Map < String , Actor > xactors = cloneActors ( ) ; int res = 0 ; for ( String key : xactors . keySet ( ) ) { Actor a = xactors . get ( key ) ; if ( a . getCategory ( ) . equals ( name ) ) { res ++ ; } } return res ; }
tr	2	public static byte [ ] getValues ( ) { byte [ ] values = { ENCODED_VOICE , RAW_BINARY_DATA , APPLICATION_SPECIFIC_DATA , DATABASE_INDEX } ; return values ; }
tr	5X	private List < Student > parse ( final Document doc ) { final List < Student > students = new Vector < Student > ( ) ; if ( doc == null ) { return students ; } final Element root = doc . getDocumentElement ( ) ; final NodeList nodeStudents = root . getChildNodes ( ) ; if ( nodeStudents != null ) { if ( nodeStudents . getLength ( ) != 0 ) { for ( int i = 0 ; i < nodeStudents . getLength ( ) ; ++ i ) { final Node nodeStudent = nodeStudents . item ( i ) ; if ( nodeStudent != null ) { if ( nodeStudent . getNodeType ( ) == Node . ELEMENT_NODE ) { final Student student = parseStudent ( nodeStudent ) ; students . add ( student ) ; } } } } } return students ; }
tr	2	@ Test public void testIdentifierOptionalPresentButNull ( ) throws TemplateException { Identifier variable = new Identifier ( "$variable?" , new Cursor ( "-:l1:c1" ) ) ; populateModel ( "variable" , null ) ; try { variable . writeObject ( null , model , null ) ; fail ( "An exception must be raised." ) ; } catch ( TemplateIgnoreRenderingException e ) { assertEquals ( "Ignore rendering because key 'variable' is not present or has null value in the model map at position '-:l1:c1'." , e . getMessage ( ) ) ; } }
tr	3	public FieldElement getElement ( Sprite sprite ) { Collection < FieldElement > keys ; Sprite currentSprite ; keys = table . keySet ( ) ; for ( FieldElement key : keys ) { currentSprite = table . get ( key ) ; if ( currentSprite . equals ( sprite ) ) { return key ; } } return null ; }
tr	3	public static void onAllROute ( Individual individual ) { ProblemInstance problemInstance = individual . problemInstance ; for ( int period = 0 ; period < problemInstance . periodCount ; period ++ ) { for ( int vehicle = 0 ; vehicle < problemInstance . vehicleCount ; vehicle ++ ) { mutateRouteBy2_Opt ( individual , period , vehicle ) ; } } }
tr	3	private void closeSocket ( ) { try { if ( socket != null ) { socket . close ( ) ; socket = null ; } } catch ( IOException e ) { logger . log ( Level . SEVERE , "Could not close network socket: " + e . getMessage ( ) ) ; } socket = null ; }
tr	1	public Tela_Usuario_Cadastro ( ) { initComponents ( ) ; }
tr	4	protected static void addObject ( IUnknown o ) { if ( apartmentInitialized . get ( ) == false ) { ComThread . InitSTA ( false ) ; apartmentInitialized . set ( true ) ; } if ( ! AUTO_GC ) return ; ReferenceQueue < IUnknown > deadObjects = deadPool . get ( ) ; objects . put ( new PointerWeakReference ( o , deadObjects ) , false ) ; if ( GC_COUNT != - 1 && ( count % GC_COUNT ) == 0 ) { System . gc ( ) ; } if ( ( count ++ % CULL_COUNT ) == 0 ) { int numberCulled = cullDeadPool ( deadObjects , objects ) ; if ( IUnknown . isDebugEnabled ( ) ) { if ( numberCulled > 0 ) { IUnknown . debug ( "ROT: added instance of " + o . getClass ( ) . getSimpleName ( ) + "->[+1  -" + numberCulled + "] with " + objects . size ( ) + " remaining live objects" ) ; } } } }
tr	4	public void draw ( ) { Iterator < Entity > i2 = getNearbyEntities ( p . getLocation ( ) , 15 ) . iterator ( ) ; ArrayList < Block > bs = getNearbyBlocks ( p . getLocation ( ) . modify ( 0 , 0 ) , 16 ) ; for ( Block b : bs ) { b . draw ( ) ; } while ( i2 . hasNext ( ) ) { Entity toDraw = i2 . next ( ) ; toDraw . draw ( ) ; } if ( path != null ) { for ( int c = 0 ; c < path . size ( ) ; c ++ ) { if ( c == 0 ) { Engine . render ( path . get ( c ) , Material . GOLD_ORE . getImage ( ) ) ; } else if ( c == path . size ( ) - 1 ) { Engine . render ( path . get ( c ) , Material . IRON_ORE . getImage ( ) ) ; } else { Engine . render ( path . get ( c ) , Material . OBSIDIAN . getImage ( ) ) ; } } } if ( renderLight ) { Engine . addQueueItem ( new RenderQueueItem ( lightLoc , lightMap ) ) ; } if ( drawMap ) { Engine . addQueueItem ( new RenderQueueItem ( new Rectangle ( 0 , 0 , Main . getPaneWidth ( ) , Main . getPaneHeight ( ) ) , Color . blue ) ) ; Engine . addQueueItem ( new RenderQueueItem ( 0 , 0 , map ) ) ; } }
tr	2	private void updateTableColumn ( int column , int width ) { final TableColumn tableColumn = table . getColumnModel ( ) . getColumn ( column ) ; if ( ! tableColumn . getResizable ( ) ) return ; width += spacing ; if ( isOnlyAdjustLarger ) { width = Math . max ( width , tableColumn . getPreferredWidth ( ) ) ; } columnSizes . put ( tableColumn , new Integer ( tableColumn . getWidth ( ) ) ) ; table . getTableHeader ( ) . setResizingColumn ( tableColumn ) ; tableColumn . setWidth ( width ) ; }
tr	1	public double getPriceLevel3 ( ) { return priceLevel3 ; }
tr	1	@ Override protected void finalize ( ) { close ( ) ; }
tr	4	public < H , S > void dispatch ( Event < H , S > event , S source ) { event . setSource ( source ) ; try { for ( H handler : this . < H > getQueueForType ( registeredHandlers , event . getType ( ) ) ) { try { event . dispatch ( handler ) ; } catch ( Throwable t ) { LoggerFactory . getLogger ( handler . getClass ( ) ) . error ( "Unhandled exception while dispatching event" , t ) ; } } for ( Reference < Waiter < Event < H , S >>> ref : this . < Reference < Waiter < Event < H , S >>> > getQueueForType ( registeredWaiters , event . getType ( ) ) ) { Waiter < Event < H , S >> waiter = ref . get ( ) ; if ( waiter != null ) { waiter . offer ( event ) ; } } if ( ! ( event instanceof EventEvent ) ) { dispatch ( new EventEvent ( ) , event ) ; } } finally { event . setSource ( null ) ; } }
tr	5X	private double [ ] [ ] inverso ( int [ ] [ ] llave ) { double [ ] [ ] inverso = new double [ llave . length ] [ llave [ 0 ] . length ] ; boolean signo = false ; for ( int f = 0 ; f < llave . length ; f ++ ) { for ( int c = 0 ; c < llave [ f ] . length ; c ++ ) { int [ ] [ ] matriz_de_adentro = new int [ llave . length - 1 ] [ llave [ f ] . length - 1 ] ; int fda = 0 , cda = 0 ; for ( int f2 = 0 ; f2 < llave . length ; f2 ++ ) { for ( int c2 = 0 ; c2 < llave [ f2 ] . length ; c2 ++ ) { if ( f2 != f && c2 != c ) { matriz_de_adentro [ fda ] [ cda ] = llave [ f2 ] [ c2 ] ; cda ++ ; if ( cda == matriz_de_adentro [ fda ] . length ) { cda = 0 ; fda ++ ; } } } } int dda = calcular_determinante ( matriz_de_adentro ) ; if ( signo ) { dda *= - 1 ; } signo = ! signo ; inverso [ f ] [ c ] = ( ( double ) dda ) / ( ( double ) DET ) ; } } return inverso ; }
tr	4	public double getDistanceAB ( ArrayList < Object > path ) { ArrayList < Object > nodes ; double distance = 0.0 ; for ( int i = 0 ; i < path . size ( ) - 1 ; i ++ ) { nodes = new ArrayList < Object > ( ) ; nodes . add ( path . get ( i ) ) ; nodes . add ( path . get ( i + 1 ) ) ; for ( Road road : roads ) { if ( road . getNodesAttached ( ) . containsAll ( nodes ) ) { distance += road . getDistance ( ) ; } } } distance = UtilCalc . round ( distance , 2 ) ; return distance ; }
tr	1	public Prenotazione ( ) { super ( ) ; }
tr	4	private void createTable ( ORMHash ht , ORMTable table ) throws SQLException { String createSQL = ht . createSQL ( ) ; String tableName = table . tableName ( ) ; int hashSize = ht . hashSize ( ) ; if ( hashSize < 1 ) { hashSize = 1 ; } List < String > alreadyExistTableList = dao . queryForSimpObjectList ( "show tables like '" + tableName + "%'" , new Object [ ] { } , String . class ) ; MessageFormat mf = new MessageFormat ( createSQL ) ; String hashTableName = null ; for ( int i = 0 ; i < hashSize ; i ++ ) { hashTableName = tableName + "_" + DBUtils . getInstance ( ) . hash ( i , hashSize ) ; if ( alreadyExistTableList . contains ( hashTableName ) ) { logger . trace ( "Hash Table[{}] is already exist!" , hashTableName ) ; } else { logger . info ( "Init hash table:{};" , hashTableName ) ; dao . update ( mf . format ( new Object [ ] { hashTableName } ) ) ; logger . info ( "Init hash table[{}] finish." , hashTableName ) ; } } }
tr	5X	private JPanel createFillInTheBlanksQuestion ( ) { _questionLabel . setText ( _fillInTheBlanks . getAnswer ( ) ) ; final SpringLayout springLayout = new SpringLayout ( ) ; final JPanel jPanel = new JPanel ( springLayout ) ; _optionsStrings = _fillInTheBlanks . getBlanks ( ) ; final int [ ] randomList = MathUtilities . generateRandomArray ( _optionsStrings . size ( ) ) ; _answers = new ArrayList < String > ( ) ; for ( int x = 0 ; x < _optionsStrings . size ( ) ; x ++ ) { final String value = _optionsStrings . get ( randomList [ x ] ) ; _answers . add ( _optionsStrings . get ( _optionsStrings . indexOf ( value ) ) ) ; } _optionComboBoxes = new ArrayList < JComboBox > ( ) ; for ( int x = 0 ; x < _optionsStrings . size ( ) ; x ++ ) { final JLabel label = new JLabel ( "Choose #" ) ; final String choice = _optionsStrings . get ( randomList [ x ] ) . toLowerCase ( ) ; springLayout . putConstraint ( SpringLayout . WEST , label , 15 , SpringLayout . WEST , jPanel ) ; springLayout . putConstraint ( SpringLayout . NORTH , label , 45 + x * 35 , SpringLayout . NORTH , jPanel ) ; jPanel . add ( label ) ; Object [ ] choices = new Object [ _optionsStrings . size ( ) + 1 ] ; choices [ 0 ] = "--" ; for ( int y = 0 ; y < choices . length - 1 ; y ++ ) { choices [ y + 1 ] = "[" + y + "]" ; } final JComboBox combobox = new JComboBox ( choices ) ; springLayout . putConstraint ( SpringLayout . WEST , combobox , 10 , SpringLayout . EAST , label ) ; springLayout . putConstraint ( SpringLayout . NORTH , combobox , - 20 , SpringLayout . SOUTH , label ) ; _optionComboBoxes . add ( combobox ) ; combobox . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( final ActionEvent arg0 ) { String question = "" ; if ( _choicesMade . containsKey ( choice ) ) { _choicesMade . remove ( choice ) ; } String begin = "Question #" + new Integer ( _questionData . getQuestionNumber ( ) ) . toString ( ) + ": " ; question = begin + _questionData . getQuestionString ( ) ; final Set < String > keys = _choicesMade . keySet ( ) ; for ( final String key : keys ) { question = replace ( _choicesMade . get ( key ) , question , key ) ; } final int indexToLookFor = combobox . getSelectedIndex ( ) - 1 ; if ( indexToLookFor >= 0 ) { _choicesMade . put ( choice , "[" + indexToLookFor + "]" ) ; question = replace ( "[" + indexToLookFor + "]" , question , choice ) ; } _beginLabel . setText ( question ) ; } private String replace ( final String needle , final String haystack , final String newNeedle ) { String result = haystack ; while ( result . indexOf ( needle ) != - 1 ) { result = result . replace ( needle , newNeedle ) ; } return result ; } } ) ; jPanel . add ( combobox ) ; final JLabel option = new JLabel ( choice ) ; springLayout . putConstraint ( SpringLayout . WEST , option , 10 , SpringLayout . EAST , combobox ) ; springLayout . putConstraint ( SpringLayout . NORTH , option , 1 , SpringLayout . NORTH , combobox ) ; jPanel . add ( option ) ; } final JLabel temp = new JLabel ( ) ; springLayout . putConstraint ( SpringLayout . EAST , jPanel , 600 , SpringLayout . WEST , temp ) ; springLayout . putConstraint ( SpringLayout . SOUTH , jPanel , 250 , SpringLayout . SOUTH , temp ) ; jPanel . setOpaque ( true ) ; return jPanel ; }
tr	3	private long removeRefAskData ( long lIndex ) { AskData refActualElement = GetAskData ( lIndex ) ; if ( refActualElement == null ) return lIndex ; for ( int intIndex = 0 ; intIndex < elementList . size ( ) ; intIndex ++ ) { Object theObject = elementList . get ( intIndex ) ; if ( ( theObject == null ) || ! ( theObject instanceof AskData ) ) continue ; AskData tempRef = ( AskData ) ( theObject ) ; if ( ( AskData . getCPtr ( tempRef ) == AskData . getCPtr ( refActualElement ) ) ) { elementList . remove ( tempRef ) ; break ; } } return lIndex ; }
tr	1	public boolean isSchoolAnnouncements ( ) { return schoolAnnouncements ; }
tr	1	public boolean containsFamily ( String family ) { return families . contains ( family ) ; }
tr	4	@ Override default GCompany C ( List < GDept > gDepts ) { return new GCompany ( ) { public < Company , Dept , SubUnit , Employee , Person , Salary > Company accept ( SybAlg < Company , Dept , SubUnit , Employee , Person , Salary > alg ) { List < Dept > v = new ArrayList < Dept > ( ) ; for ( GDept o : gDepts ) { v . add ( o . accept ( alg ) ) ; } return alg . C ( v ) ; } } ; }
tr	2	@ Override public void update ( ) { AIHockeyist puckOwner = manager . getPuckOwner ( ) ; AIRectangle myZone = manager . getMyZone ( ) ; int currentTick = manager . getCurrentTick ( ) ; init ( ) ; for ( Map . Entry < long , AIRole > p : roles . entrySet ( ) ) { moves . put ( p . getKey ( ) , p . getValue ( ) . move ( ) ) ; } }
tr	4	public Polygon getPolygon ( String s_nameCity ) { Polygon polygonToReturn = new Polygon ( ) ; for ( District district : model . getListDistrict ( ) ) { for ( City city : district . getListCity ( ) ) { if ( city . getS_name ( ) . equals ( s_nameCity ) ) { int i_x = district . getI_x ( ) * model . getI_nbHorizontalSquareInDistrict ( ) + city . getI_x ( ) + ( district . getI_y ( ) % 2 ) * model . getI_nbHorizontalSquareInDistrict ( ) / 2 ; int i_y = district . getI_y ( ) * model . getI_nbVerticalSquareInDistrict ( ) + city . getI_y ( ) ; Point point2D = new Point ( i_x , i_y ) ; polygonToReturn . setPoint2D ( point2D ) ; polygonToReturn . setPoint3D ( convert2DTo3D ( point2D ) ) ; return polygonToReturn ; } } } return polygonToReturn ; }
tr	2	@ Override protected void drawComponentName ( Graphics2D g ) { String name = getName ( ) ; if ( name != null ) { g . setColor ( Color . blue ) ; int fontSize = ( int ) ( ( width ) / name . length ( ) ) ; if ( fontSize > 16 ) fontSize = 16 ; g . setFont ( new Font ( Font . DIALOG , Font . PLAIN , fontSize ) ) ; float px , py ; FontMetrics fm = g . getFontMetrics ( ) ; int h = height / 10 ; px = ( int ) ( width - fm . stringWidth ( name ) ) / 2 ; py = h + ( int ) ( height - 3.6 * h - fm . getHeight ( ) ) / 2 ; int xx = ( int ) ( x ) ; int yy = ( int ) ( y ) ; g . drawString ( name , xx + px , yy + py + fm . getAscent ( ) ) ; } }
tr	1	private void finaliza ( ) { this . dispose ( ) ; }
tr	2	@ Override public void propertyChange ( PropertyChangeEvent evt ) { setModelProperty ( evt . getPropertyName ( ) , evt . getNewValue ( ) ) ; for ( AbstractPageView view : registeredViews ) { view . modelPropertyChange ( evt ) ; } }
tr	2	public void makeEven ( ) { if ( population . size ( ) % 2 == 1 ) { population . remove ( 0 ) ; } }
tr	5X	@ Override public void run ( ) { try { while ( active ) { synchronized ( messages ) { if ( messages . isEmpty ( ) ) { messages . wait ( 200 ) ; } else { NetworkMessage nm = messages . remove ( 0 ) ; out . write ( nm . getData ( ) ) ; } } } } catch ( InterruptedException ex ) { System . err . println ( ex . getMessage ( ) ) ; } catch ( IOException ex ) { System . err . println ( ex . getMessage ( ) ) ; } }
tr	1	public Logger getLogger ( ) { return this . logger ; }
tr	5X	protected void createWebSocketPingServer ( ) { RxHttpServer server = new RxHttpServer ( vertx . createHttpServer ( ) ) ; server . websocket ( ) . subscribe ( new Action1 < RxServerWebSocket > ( ) { public void call ( final RxServerWebSocket s ) { System . out . println ( "WebSocketServer:" + s . path ( ) ) ; s . asObservable ( ) . subscribe ( new Action1 < Buffer > ( ) { public void call ( Buffer b ) { System . out . println ( "WebSocketServer:received[" + b + "]" ) ; if ( "EOF" . equals ( b . toString ( ) ) ) { s . close ( ) ; } else { s . writeTextFrame ( b . toString ( ) ) ; } } } ) ; } } ) ; server . coreHttpServer ( ) . listen ( 8090 , "localhost" ) ; }
tr	2	public static StroopTest createOneColourTest ( int wordSize ) { List < Word > words = new ArrayList < Word > ( wordSize ) ; for ( int i = 0 ; i < wordSize ; i ++ ) { words . add ( WordFactory . createRandomColourWord ( ) ) ; } return new StroopTest ( words , TestType . TEST_WORD ) ; }
tr	2	public void actionPerformed ( ActionEvent e ) { if ( e . getSource ( ) == avbrytB ) { this . setVisible ( false ) ; return ; } else if ( e . getSource ( ) == sparastangB ) { transaction ( true ) ; return ; } }
tr	5X	private void valider ( ) { EventQueue . invokeLater ( new Runnable ( ) { public void run ( ) { boolean select = true ; int selectionCorrige = 0 ; int selection = tableau . getSelectedRow ( ) ; try { selectionCorrige = listeAchats . getTableau ( ) . getRowSorter ( ) . convertRowIndexToModel ( selection ) ; } catch ( Exception e ) { select = false ; JOptionPane . showMessageDialog ( new JFrame ( ) , Langue . getTraduction ( "error_no_ticket_selected" ) , Langue . getTraduction ( "warning" ) , JOptionPane . INFORMATION_MESSAGE ) ; } if ( select ) { try { Achat achat = ( Achat ) listeAchats . getObjetByIndex ( selectionCorrige ) ; if ( ! achat . getPaye ( ) ) { achat . setPayer ( true ) ; } else { JOptionPane . showMessageDialog ( new JFrame ( ) , Langue . getTraduction ( "ticket_already_paid" ) , Langue . getTraduction ( "warning" ) , JOptionPane . INFORMATION_MESSAGE ) ; } } catch ( Exception e1 ) { Constantes . afficherException ( e1 ) ; } } } } ) ; }
tr	1	public String getFirstName ( ) { return firstName ; }
tr	1	public int getSize ( ) { return size ; }
tr	1	public String getSendTime ( ) { return sendTime ; }
tr	5X	public DraftGenerator ( ) { setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ) ; setBounds ( 100 , 100 , 450 , 399 ) ; contentPane = new JPanel ( ) ; contentPane . setBorder ( new EmptyBorder ( 5 , 5 , 5 , 5 ) ) ; setContentPane ( contentPane ) ; contentPane . setLayout ( null ) ; JLabel lblChooseTheDraft = new JLabel ( "Choose the draft file" ) ; lblChooseTheDraft . setBounds ( 38 , 26 , 175 , 16 ) ; contentPane . add ( lblChooseTheDraft ) ; addressText = new JTextField ( ) ; addressText . setBounds ( 38 , 62 , 218 , 28 ) ; contentPane . add ( addressText ) ; addressText . setColumns ( 10 ) ; JButton btnChoose = new JButton ( "Choose" ) ; btnChoose . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { JFileChooser chooser = new JFileChooser ( ) ; FileNameExtensionFilter filter1 = new FileNameExtensionFilter ( "Text file" , "txt" ) ; chooser . addChoosableFileFilter ( filter1 ) ; chooser . setFileFilter ( filter1 ) ; int returnVal = chooser . showOpenDialog ( getParent ( ) ) ; if ( returnVal == JFileChooser . APPROVE_OPTION ) { addressText . setText ( chooser . getSelectedFile ( ) . getPath ( ) ) ; } } } ) ; btnChoose . setBounds ( 291 , 63 , 117 , 29 ) ; contentPane . add ( btnChoose ) ; JButton btnGenerate = new JButton ( "Generate" ) ; btnGenerate . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { String file = addressText . getText ( ) ; int x = 0 , y = 0 ; int length = 3000 ; int x_distance = 200 ; int y_distance = 150 ; String position = "{" + x + " " + y + "}" ; BufferedReader input ; try { input = new BufferedReader ( new FileReader ( file ) ) ; } catch ( FileNotFoundException e1 ) { JOptionPane . showMessageDialog ( getParent ( ) , "File is not found!" ) ; return ; } String line = "" ; String tag = "" ; String shape = "" ; String canvas = canvasText . getText ( ) ; String layer = layerText . getText ( ) ; try { while ( ( line = input . readLine ( ) ) != null ) { if ( line . startsWith ( "%" ) ) { tag = line . substring ( 1 ) ; continue ; } else if ( line . equals ( "" ) ) { continue ; } else { shape = InfoEnum . reverse_req_elem_type_map . get ( tag ) ; AppleScript . drawArbitraryRequirementElement ( canvas , layer , shape , InfoEnum . NORMAL_SIZE , position , "0" , line , "0" , "1" ) ; if ( x < length ) { x += x_distance ; } else { x = 0 ; y += y_distance ; } position = "{" + x + " " + y + "}" ; } } } catch ( IOException e1 ) { e1 . printStackTrace ( ) ; } JOptionPane . showMessageDialog ( getParent ( ) , "Successfully generate graphs!" ) ; } } ) ; btnGenerate . setBounds ( 291 , 130 , 117 , 29 ) ; contentPane . add ( btnGenerate ) ; JLabel lblCanvas = new JLabel ( "Canvas" ) ; lblCanvas . setBounds ( 24 , 135 , 61 , 16 ) ; contentPane . add ( lblCanvas ) ; canvasText = new JTextField ( ) ; canvasText . setText ( "Test" ) ; canvasText . setBounds ( 79 , 130 , 77 , 28 ) ; contentPane . add ( canvasText ) ; canvasText . setColumns ( 10 ) ; JLabel lblLayer = new JLabel ( "Layer" ) ; lblLayer . setBounds ( 24 , 189 , 61 , 16 ) ; contentPane . add ( lblLayer ) ; layerText = new JTextField ( ) ; layerText . setText ( "none" ) ; layerText . setBounds ( 79 , 183 , 134 , 28 ) ; contentPane . add ( layerText ) ; layerText . setColumns ( 10 ) ; JLabel lblTargetAttackPattern = new JLabel ( "Target Attack Pattern" ) ; lblTargetAttackPattern . setBounds ( 38 , 294 , 156 , 16 ) ; contentPane . add ( lblTargetAttackPattern ) ; txtPatternid = new JTextField ( ) ; txtPatternid . setBounds ( 38 , 322 , 134 , 28 ) ; contentPane . add ( txtPatternid ) ; txtPatternid . setColumns ( 10 ) ; JButton btnGenerateTree = new JButton ( "Generate tree" ) ; btnGenerateTree . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { CAPECModelGeneration model = new CAPECModelGeneration ( ) ; model . generatePatternHierarchyModel ( txtPatternid . getText ( ) ) ; JOptionPane . showMessageDialog ( getParent ( ) , "Successfully generate graphs!" ) ; } } ) ; btnGenerateTree . setBounds ( 218 , 323 , 117 , 29 ) ; contentPane . add ( btnGenerateTree ) ; }
tr	3	public void initUI ( ) { connect ( new Window . DeleteEvent ( ) { public boolean onDeleteEvent ( Widget source , Event event ) { mode = const . QUIT_MODE ; Gtk . mainQuit ( ) ; return false ; } } ) ; initButtons ( ) ; initLabels ( ) ; initEntries ( ) ; initImages ( ) ; }
tr	2	private char peekNextChar ( ) { if ( pos < ( input . length ( ) - 1 ) ) { return input . charAt ( pos + 1 ) ; } else { return 0 ; } }
tr	4	public Map < String , String > readAdjNounSent ( ) { PropertyConfigurator . configure ( "conf/log4j.properties" ) ; Logger myLogger = Logger . getLogger ( "unsupervisedClauseMarkup.readAdjNounSent" ) ; if ( this . myDataHolder == null ) { return null ; } Map < String , String > myAdjNounSent = new HashMap < String , String > ( ) ; Iterator < SentenceStructure > iter = this . myDataHolder . getSentenceHolder ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { SentenceStructure sentenceObject = iter . next ( ) ; String modifier = sentenceObject . getModifier ( ) ; String tag = sentenceObject . getTag ( ) ; myLogger . trace ( "tag: " + tag ) ; if ( ( modifier != null ) && ( tag != null ) ) { if ( ( ! ( modifier . equals ( "" ) ) ) && ( tag . matches ( "^\\[.*$" ) ) ) { modifier = modifier . replaceAll ( "\\[.*?\\]" , "" ) . trim ( ) ; myAdjNounSent . put ( tag , modifier ) ; } } } return myAdjNounSent ; }
tr	5X	public void run ( ) { searchField . setText ( "" ) ; searchField . setText ( SelectionField . SEARCHTERM ) ; TreeMap < Integer , List < Champion >> priorities = new TreeMap < Integer , List < Champion >> ( ) ; for ( Champion c : Initialiser . getChampionList ( ) ) { int priority = c . calculatePriority ( ) ; List < Champion > priorityList = priorities . get ( priority ) ; if ( priorityList == null ) { priorityList = new LinkedList < Champion > ( ) ; priorities . put ( priority , priorityList ) ; } priorityList . add ( c ) ; } Entry < Integer , List < Champion >> e = priorities . pollLastEntry ( ) ; recommendedModel . clear ( ) ; goodModel . clear ( ) ; viableModel . clear ( ) ; allModel . clear ( ) ; if ( e != null ) { for ( Champion c : e . getValue ( ) ) recommendedModel . addElement ( c ) ; e = priorities . pollLastEntry ( ) ; if ( e != null ) { for ( Champion c : e . getValue ( ) ) goodModel . addElement ( c ) ; e = priorities . pollLastEntry ( ) ; if ( e != null ) { for ( Champion c : e . getValue ( ) ) viableModel . addElement ( c ) ; e = priorities . pollLastEntry ( ) ; while ( e != null ) { for ( Champion c : e . getValue ( ) ) allModel . addElement ( c ) ; e = priorities . pollLastEntry ( ) ; } } } } reset ( ) ; scroller . revalidate ( ) ; }
tr	3	@ Override public int search ( E data ) { int centerint , left , right ; left = 0 ; right = _lenght - 1 ; E center ; while ( left <= right ) { centerint = ( left + right ) / 2 ; center = get ( centerint ) ; if ( _comparator . isHigher ( center , data ) ) { right = centerint - 1 ; } else if ( _comparator . isLess ( center , data ) ) { left = centerint + 1 ; } else { return ( left + right ) / 2 ; } } return - 1 ; }
tr	3	public static void create ( String [ ] args ) { Vector < vslFileDataChunk > chunks = null ; if ( args . length < 3 ) { System . err . println ( "Missings args: create <dbfile> <source>" ) ; System . exit ( 1 ) ; } source = args [ 2 ] ; try { chunks = handler . chunkFile ( source ) ; vslDataType < vslFileDataChunk > fileData = new vslDataType < vslFileDataChunk > ( ) ; StringTokenizer st = new StringTokenizer ( source , "/" ) ; String fname = "UNSET" ; while ( st . hasMoreTokens ( ) ) { fname = st . nextToken ( ) ; } fileData . setName ( fname ) ; for ( vslFileDataChunk chunk : chunks ) { fileData . addNewChunk ( chunk ) ; } core . addEntry ( fileData ) ; core . debugShow ( ) ; core . save ( ) ; } catch ( Exception e ) { System . err . println ( "Caught exception: " + e . toString ( ) ) ; e . printStackTrace ( ) ; System . exit ( 1 ) ; } }
tr	4	private static void saveSystemState ( String filename ) { String out = getParameterValueList ( ) + "\n" ; out += "Changed per state \n" ; out += "\t Mayority \t Confidence \t Weight \t Missfire \n" ; if ( systemStateChangeds != null ) { for ( String systemTestType : systemStateChangeds . keySet ( ) ) { for ( String meth : systemStateChangeds . get ( systemTestType ) . keySet ( ) ) { out += meth + "\t" ; } break ; } out += "\n" ; for ( String systemTestType : systemStateChangeds . keySet ( ) ) { for ( String meth : systemStateChangeds . get ( systemTestType ) . keySet ( ) ) { out += systemStateChangeds . get ( systemTestType ) . get ( meth ) + "\t" ; } out += "\n" ; } } out += "\n" ; out += "\n" ; out += "\t Mayority \t Confidence \t Weight \t Missfire \n" ; if ( lastSystemTestPoints != null ) for ( String s : lastSystemTestPoints . keySet ( ) ) { out += "\t" + s + "\t" ; out += ( String . format ( "%.3f" , ( lastSystemTestScore . get ( s ) . get ( "Mayority" ) / lastSystemTestPoints . get ( s ) ) ) ) ; out += "\t" ; out += ( String . format ( "%.3f" , ( lastSystemTestScore . get ( s ) . get ( "Confidence" ) / lastSystemTestPoints . get ( s ) ) ) ) ; out += "\t" ; out += ( String . format ( "%.3f" , ( lastSystemTestScore . get ( s ) . get ( "Weight" ) / lastSystemTestPoints . get ( s ) ) ) ) ; out += "\t" ; out += ( String . format ( "%.3f" , ( lastSystemTestScore . get ( s ) . get ( "Missfire" ) / lastSystemTestPoints . get ( s ) ) ) ) ; out += "\n" ; } File f = new File ( filename ) ; try { if ( ! f . getParentFile ( ) . exists ( ) ) f . getParentFile ( ) . mkdirs ( ) ; if ( ! f . exists ( ) ) f . createNewFile ( ) ; FileWriter w = new FileWriter ( f ) ; w . write ( out ) ; w . flush ( ) ; w . close ( ) ; } catch ( IOException ex ) { Logger . getLogger ( ScienceTool . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; } }
tr	1	public int getIdp ( ) { return this . idp ; }
tr	5X	@ Override public boolean onResponse ( Message message ) { String msg = message . content . toLowerCase ( ) ; Pattern pattern = Pattern . compile ( "^@((qinbot)|(\u4EB2\u59B9\u5B50)) +help(.*)" ) ; Matcher matcher = pattern . matcher ( msg ) ; if ( matcher . find ( ) ) { if ( matcher . group ( 4 ) == null || matcher . group ( 4 ) . trim ( ) . equals ( "" ) ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( "\\\\n\u8F93\u5165@QinBot help \u63D2\u4EF6\u540D\u79F0 \u83B7\u53D6\u5177\u4F53\u5E2E\u52A9\\\\n\u5F53\u524D\u63D2\u4EF6\u5982\u4E0B:\\\\n" ) ; for ( int i = 1 ; i < plugins . size ( ) ; i ++ ) { sb . append ( plugins . get ( i ) . name ) . append ( " ver:" ) . append ( plugins . get ( i ) . version ) . append ( "\\\\n" ) ; } message . reply ( sb . toString ( ) ) ; } else { String help = null ; for ( int i = 1 ; i < plugins . size ( ) ; i ++ ) { if ( plugins . get ( i ) . name . equals ( matcher . group ( 4 ) . trim ( ) ) ) { PluginBase pluginBase = plugins . get ( i ) ; help = String . format ( "\\\\n\u7B80\u4ECB:%s\\\\n\u5E2E\u52A9:%s\\\\n" , pluginBase . descrition , pluginBase . help ) ; break ; } } if ( help != null ) { message . reply ( help ) ; } else { message . reply ( "\u672A\u627E\u5230" + matcher . group ( 4 ) ) ; } } return true ; } return false ; }
tr	5X	public static void onReturn ( final P1 < String > p1 ) { ThreadUtil . runStrong ( new P0 ( ) { public void e ( ) { while ( true ) { try { String readLine = readLine ( ) ; p1 . e ( readLine ) ; } catch ( Exception e1 ) { return ; } } } } ) ; }
tr	4	private void initWindow ( ) { contentPanel = new JPanel ( ) ; contentPanel . setLayout ( new BoxLayout ( contentPanel , BoxLayout . PAGE_AXIS ) ) ; contentPanel . setBorder ( new EmptyBorder ( 5 , 5 , 5 , 5 ) ) ; tabbedPanel = new JTabbedPane ( ) ; tabbedPanel . setPreferredSize ( new Dimension ( 500 , 800 ) ) ; connectionTabPanel = new JPanel ( new FlowLayout ( FlowLayout . LEFT ) ) ; userSettingsPanel = new JPanel ( new FlowLayout ( FlowLayout . LEFT ) ) ; userSettingsPanel . setLayout ( new BoxLayout ( userSettingsPanel , BoxLayout . PAGE_AXIS ) ) ; userSettingsPanel . setBorder ( new TitledBorder ( "User Settings" ) ) ; userSettingsV1Panel = new JPanel ( new FlowLayout ( FlowLayout . LEFT ) ) ; usernameLabel = new JLabel ( "Username:" ) ; usernameText = new JTextField ( UserPreferences . PREF_USERNAME , 6 ) ; apiSecretLabel = new JLabel ( "API Secret:" ) ; apiSecretText = new JPasswordField ( UserPreferences . PREF_API_SECRET , 6 ) ; passwordLabel = new JLabel ( "Password:" ) ; passwordText = new JPasswordField ( UserPreferences . PREF_PASSWORD , 6 ) ; userSettingsV1Panel . add ( usernameLabel ) ; userSettingsV1Panel . add ( usernameText ) ; userSettingsV1Panel . add ( apiSecretLabel ) ; userSettingsV1Panel . add ( apiSecretText ) ; userSettingsV1Panel . add ( passwordLabel ) ; userSettingsV1Panel . add ( passwordText ) ; userTokenPanel = new JPanel ( new FlowLayout ( FlowLayout . LEFT ) ) ; userTokenPanel . setPreferredSize ( new Dimension ( 443 , 40 ) ) ; userTokenLabel = new JLabel ( "Token:" ) ; userTokenText = new JTextField ( UserPreferences . PREF_USERTOKEN , 10 ) ; userTokenButton = new JButton ( "Get your token" ) ; userTokenButton . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { GetToken . browse ( ) ; } } ) ; userTokenPanel . add ( userTokenLabel ) ; userTokenPanel . add ( userTokenText ) ; userTokenPanel . add ( userTokenButton ) ; userSettingsPanel . add ( userTokenPanel ) ; proxySettingsPanel = new JPanel ( new FlowLayout ( FlowLayout . LEFT ) ) ; proxyUseCheck = new JCheckBox ( "Use Proxy" , UserPreferences . PREF_USE_PROXY ) ; proxyUseCheck . addChangeListener ( new ChangeListener ( ) { @ Override public void stateChanged ( ChangeEvent e ) { if ( proxyUseCheck . isSelected ( ) ) { proxyAddressText . setEnabled ( true ) ; proxyPortText . setEnabled ( true ) ; } else { proxyAddressText . setEnabled ( false ) ; proxyPortText . setEnabled ( false ) ; } } } ) ; proxySettingsPanel . setBorder ( new TitledBorder ( "Proxy Settings" ) ) ; proxyAddressLabel = new JLabel ( "Proxy:" ) ; proxyAddressText = new JTextField ( UserPreferences . PREF_PROXY_ADDRESS , 15 ) ; proxyPortLabel = new JLabel ( "Port:" ) ; proxyPortText = new JTextField ( UserPreferences . PREF_PROXY_PORT , 3 ) ; proxySettingsPanel . add ( proxyUseCheck ) ; proxySettingsPanel . add ( proxyAddressLabel ) ; proxySettingsPanel . add ( proxyAddressText ) ; proxySettingsPanel . add ( proxyPortLabel ) ; proxySettingsPanel . add ( proxyPortText ) ; proxySettingsPanel . setPreferredSize ( new Dimension ( 455 , 60 ) ) ; serverSettingsPanel = new JPanel ( ) ; serverSettingsPanel . setLayout ( new BoxLayout ( serverSettingsPanel , BoxLayout . PAGE_AXIS ) ) ; serverSettingsPanel . setBorder ( new TitledBorder ( "Server Settings" ) ) ; serverCheckPanel = new JPanel ( new FlowLayout ( FlowLayout . LEFT ) ) ; serverCheckIntervalLabel = new JLabel ( "Server check interval (sec):" ) ; serverCheckIntervalText = new JTextField ( String . valueOf ( UserPreferences . PREF_SERVER_CHECK_INTERVAL ) , 3 ) ; autoCleanCheck = new JCheckBox ( "Delete empty folders (keeps account clean)" , UserPreferences . PREF_AUTO_CLEAN ) ; serverCheckPanel . add ( serverCheckIntervalLabel ) ; serverCheckPanel . add ( serverCheckIntervalText ) ; serverCheckPanel . add ( autoCleanCheck ) ; serverSortByPanel = new JPanel ( new FlowLayout ( FlowLayout . LEFT ) ) ; serverSortByLabel = new JLabel ( "Sort by default:" ) ; serverSortByCombo = new JComboBox < String > ( new String [ ] { "Name" , "Date" } ) ; serverSortByCombo . setSelectedIndex ( UserPreferences . PREF_BEHAVIOR_SORT_BY ) ; serverSortByPanel . add ( serverSortByLabel ) ; serverSortByPanel . add ( serverSortByCombo ) ; serverFriendPanel = new JPanel ( new FlowLayout ( FlowLayout . LEFT ) ) ; loadSharedCheck = new JCheckBox ( "Load friends' files (this could take some time to load)" , UserPreferences . PREF_LOAD_SHARED ) ; serverFriendPanel . add ( loadSharedCheck ) ; serverSettingsPanel . add ( serverCheckPanel ) ; serverSettingsPanel . add ( serverSortByPanel ) ; serverSettingsPanel . add ( serverFriendPanel ) ; serverSettingsPanel . setPreferredSize ( new Dimension ( 455 , 120 ) ) ; connectionTabPanel . add ( userSettingsPanel ) ; connectionTabPanel . add ( proxySettingsPanel ) ; connectionTabPanel . add ( serverSettingsPanel ) ; tabbedPanel . addTab ( "Connection" , null , connectionTabPanel ) ; startupSettingsPanel = new JPanel ( new FlowLayout ( FlowLayout . LEFT ) ) ; autoConnectCheck = new JCheckBox ( "Connect on start automatically" , UserPreferences . PREF_AUTO_CONNECT ) ; startInTrayCheck = new JCheckBox ( "Start in system tray" , UserPreferences . PREF_START_IN_TRAY ) ; startupSettingsPanel . setBorder ( new TitledBorder ( "Startup Settings" ) ) ; startupSettingsPanel . add ( autoConnectCheck ) ; startupSettingsPanel . add ( startInTrayCheck ) ; tabbedPanel . addTab ( "Startup" , null , startupSettingsPanel ) ; downloadSettingsPanel = new JPanel ( ) ; downloadSettingsPanel . setLayout ( new BoxLayout ( downloadSettingsPanel , BoxLayout . PAGE_AXIS ) ) ; downloadSettingsPanel . setBorder ( new TitledBorder ( "Download Settings" ) ) ; autoDownloadPanel = new JPanel ( new FlowLayout ( FlowLayout . LEFT ) ) ; autoDownloadCheck = new JCheckBox ( "Download on connect" , UserPreferences . PREF_AUTO_DOWNLOAD ) ; autoDownloadPanel . add ( autoDownloadCheck ) ; downloadTargetPanel = new JPanel ( new FlowLayout ( FlowLayout . LEFT ) ) ; downloadTargetLabel = new JLabel ( "Target:" ) ; downloadTargetText = new JTextField ( UserPreferences . PREF_DOWNLOAD_TARGET , 20 ) ; downloadTargetText . setEditable ( false ) ; fileChooserButton = new JButton ( "Browse" ) ; fileChooserButton . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { if ( fileChooser . showOpenDialog ( preferencesScreen ) == JFileChooser . APPROVE_OPTION ) { downloadTargetText . setText ( fileChooser . getSelectedFile ( ) . getAbsolutePath ( ) ) ; } } } ) ; fileChooser = new JFileChooser ( downloadTargetText . getText ( ) ) ; fileChooser . setFileSelectionMode ( JFileChooser . DIRECTORIES_ONLY ) ; fileChooser . setDialogTitle ( "Select download directory" ) ; fileChooser . setAcceptAllFileFilterUsed ( false ) ; downloadTargetPanel . add ( downloadTargetLabel ) ; downloadTargetPanel . add ( downloadTargetText ) ; downloadTargetPanel . add ( fileChooserButton ) ; downloadWhatPanel = new JPanel ( new FlowLayout ( FlowLayout . LEFT ) ) ; downloadWhatLabel = new JLabel ( "Download:" ) ; everythingRadio = new JRadioButton ( "everything" ) ; selFoldersRadio = new JRadioButton ( "selected folders" ) ; selFoldersRadio . setToolTipText ( "Right clic folder -> Add to automatic download" ) ; downloadWhatGroup = new ButtonGroup ( ) ; downloadWhatGroup . add ( everythingRadio ) ; downloadWhatGroup . add ( selFoldersRadio ) ; downloadWhatPanel . add ( downloadWhatLabel ) ; downloadWhatPanel . add ( everythingRadio ) ; downloadWhatPanel . add ( selFoldersRadio ) ; downloadPartsPanel = new JPanel ( new FlowLayout ( FlowLayout . LEFT ) ) ; maxParallelDownloadsLabel = new JLabel ( "Max parallel downloads:" ) ; maxParallelDownloadsText = new JTextField ( String . valueOf ( UserPreferences . PREF_MAX_DOWNLOADS ) , 2 ) ; downloadPartsLabel = new JLabel ( "Parts for each download:" ) ; downloadPartsText = new JTextField ( String . valueOf ( UserPreferences . PREF_DOWNLOAD_PART_COUNT ) , 2 ) ; downloadPartsPanel . add ( maxParallelDownloadsLabel ) ; downloadPartsPanel . add ( maxParallelDownloadsText ) ; downloadPartsPanel . add ( downloadPartsLabel ) ; downloadPartsPanel . add ( downloadPartsText ) ; fileSizeCheckPanel = new JPanel ( new FlowLayout ( FlowLayout . LEFT ) ) ; fileSizeCheckCheck = new JCheckBox ( "Skip download if size of the file is smaller than (MB):" , UserPreferences . PREF_FILE_SIZE_CHECK ) ; fileSizeCheckCheck . addChangeListener ( new ChangeListener ( ) { public void stateChanged ( ChangeEvent e ) { fileSizeCheckText . setEnabled ( fileSizeCheckCheck . isSelected ( ) ) ; fileSizeDeleteCheck . setEnabled ( fileSizeCheckCheck . isSelected ( ) ) ; } } ) ; fileSizeCheckText = new JTextField ( String . valueOf ( UserPreferences . PREF_FILE_SIZE_FOR_CHECK ) , 4 ) ; fileSizeCheckText . setEnabled ( fileSizeCheckCheck . isSelected ( ) ) ; fileSizeCheckPanel . add ( fileSizeCheckCheck ) ; fileSizeCheckPanel . add ( fileSizeCheckText ) ; fileSizeDeletePanel = new JPanel ( new FlowLayout ( FlowLayout . CENTER ) ) ; fileSizeDeleteCheck = new JCheckBox ( "Also delete it from server automatically" , UserPreferences . PREF_FILE_SIZE_DELETE ) ; fileSizeDeleteCheck . setEnabled ( UserPreferences . PREF_FILE_SIZE_CHECK ) ; fileSizeDeletePanel . add ( fileSizeDeleteCheck ) ; downloadSettingsPanel . add ( autoDownloadPanel ) ; downloadSettingsPanel . add ( downloadTargetPanel ) ; downloadSettingsPanel . add ( downloadWhatPanel ) ; downloadSettingsPanel . add ( downloadPartsPanel ) ; downloadSettingsPanel . add ( fileSizeCheckPanel ) ; downloadSettingsPanel . add ( fileSizeDeletePanel ) ; tabbedPanel . addTab ( "Download" , null , downloadSettingsPanel ) ; conflictSettingsPanel = new JPanel ( new FlowLayout ( FlowLayout . LEFT ) ) ; conflictSettingsPanel . setBorder ( new TitledBorder ( "Conflict Settings" ) ) ; redownloadPanel = new JPanel ( new FlowLayout ( FlowLayout . LEFT ) ) ; redownloadCheck = new JCheckBox ( "Do not ask if file already downloaded. Apply following: " , UserPreferences . PREF_DONT_ASK_DOWNLOAD_AGAIN ) ; redownloadCheck . addChangeListener ( new ChangeListener ( ) { @ Override public void stateChanged ( ChangeEvent e ) { redownloadCombo . setEnabled ( redownloadCheck . isSelected ( ) ) ; } } ) ; redownloadCombo = new JComboBox < String > ( new String [ ] { "Download again" , "Skip" , "Skip and delete" } ) ; redownloadCombo . setSelectedIndex ( UserPreferences . PREF_BEHAVIOR_DOWNLOAD_AGAIN ) ; redownloadCombo . setEnabled ( UserPreferences . PREF_DONT_ASK_DOWNLOAD_AGAIN ) ; redownloadPanel . add ( redownloadCheck ) ; redownloadPanel . add ( redownloadCombo ) ; overwritePanel = new JPanel ( new FlowLayout ( FlowLayout . LEFT ) ) ; overwriteCheck = new JCheckBox ( "Do not ask if file already exits on disc. Apply following: " , UserPreferences . PREF_DONT_ASK_OVERWRITE ) ; overwriteCheck . addChangeListener ( new ChangeListener ( ) { @ Override public void stateChanged ( ChangeEvent e ) { overwriteCombo . setEnabled ( overwriteCheck . isSelected ( ) ) ; } } ) ; overwriteComboPanel = new JPanel ( new FlowLayout ( FlowLayout . LEFT ) ) ; overwriteCombo = new JComboBox < String > ( new String [ ] { "Overwrite" , "Skip" , "Skip and delete from server" , "Skip in case of same size" , "Skip in case of same size and delete from server" } ) ; overwriteCombo . setSelectedIndex ( UserPreferences . PREF_BEHAVIOR_OVERWRITE ) ; overwriteCombo . setEnabled ( UserPreferences . PREF_DONT_ASK_OVERWRITE ) ; overwritePanel . add ( overwriteCheck ) ; overwriteComboPanel . add ( overwriteCombo ) ; conflictSettingsPanel . add ( redownloadPanel ) ; conflictSettingsPanel . add ( overwritePanel ) ; conflictSettingsPanel . add ( overwriteComboPanel ) ; tabbedPanel . addTab ( "Conflict" , null , conflictSettingsPanel ) ; buttonsPanel = new JPanel ( new FlowLayout ( FlowLayout . CENTER ) ) ; saveAndCloseButton = new JButton ( "Save & Close" ) ; saveAndCloseButton . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { if ( saveSettings ( ) ) { preferencesScreen . setVisible ( false ) ; } } } ) ; closeButton = new JButton ( "Close" ) ; closeButton . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { preferencesScreen . setVisible ( false ) ; } } ) ; buttonsPanel . add ( saveAndCloseButton ) ; buttonsPanel . add ( closeButton ) ; contentPanel . add ( tabbedPanel ) ; contentPanel . add ( buttonsPanel ) ; this . getContentPane ( ) . add ( contentPanel , BorderLayout . CENTER ) ; this . setTitle ( "Preferences" ) ; this . setSize ( new Dimension ( 490 , 370 ) ) ; this . setResizable ( false ) ; }
tr	3	public static boolean readUsers ( DecisionLineEvent readEvent , int playableEdges ) { if ( ! isConnected ( ) ) if ( ! connect ( ) ) { System . out . println ( "Error  database connection could not be created" ) ; System . exit ( 0 ) ; } try { PreparedStatement pstmt = getConnection ( ) . prepareStatement ( "SELECT userName  userPassword  position from user where eventId=(?) ORDER BY position ASC" ) ; pstmt . setString ( 1 , readEvent . getUniqueId ( ) ) ; ResultSet myRS = pstmt . executeQuery ( ) ; User newUser ; String name , password ; int position ; while ( myRS . next ( ) ) { name = new String ( myRS . getString ( "userName" ) ) ; password = new String ( myRS . getString ( "userPassword" ) ) ; position = myRS . getInt ( "position" ) ; newUser = new User ( name , password , position , playableEdges ) ; readEvent . getUsers ( ) . add ( newUser ) ; } return true ; } catch ( SQLException e ) { System . out . println ( "error executing SQL statement!" ) ; } return false ; }
tr	4	public void generate ( Point start ) { Stack < Point > waysToExpand = new Stack < > ( ) ; exitFound = false ; final List < Point > nextOptions = new ArrayList < > ( 4 ) ; waysToExpand . add ( start ) ; while ( ! waysToExpand . isEmpty ( ) ) { Point p = waysToExpand . pop ( ) ; if ( canBecomeWhite ( p ) ) { arr . setWhite ( p ) ; if ( onTheEdge ( p ) && p . differsFrom ( start ) ) { exitFound = true ; } if ( isBlack ( p . up ( ) ) && canBecomeWhite ( p . up ( ) ) ) nextOptions . add ( p . up ( ) ) ; if ( isBlack ( p . down ( ) ) && canBecomeWhite ( p . down ( ) ) ) nextOptions . add ( p . down ( ) ) ; if ( isBlack ( p . left ( ) ) && canBecomeWhite ( p . left ( ) ) ) nextOptions . add ( p . left ( ) ) ; if ( isBlack ( p . right ( ) ) && canBecomeWhite ( p . right ( ) ) ) nextOptions . add ( p . right ( ) ) ; Collections . shuffle ( nextOptions ) ; int c = 0 ; for ( Point t : nextOptions ) { waysToExpand . push ( t ) ; c ++ ; if ( c == 2 ) break ; } nextOptions . clear ( ) ; } } }
tr	3	public static ArrayList < Compte > getAllCompte ( ) { Statement stat ; ArrayList < Compte > comptes = new ArrayList < > ( ) ; try { stat = ConnexionDB . getConnection ( ) . createStatement ( ) ; stat . executeUpdate ( "use nemovelo" ) ; ResultSet res = stat . executeQuery ( "select * from compte" ) ; Compte compte ; int id_compte , fk_id_utilisateur ; double solde ; String typeCompte , dateCreation ; while ( res . next ( ) ) { id_compte = res . getInt ( "id_compte" ) ; typeCompte = res . getString ( "typeCompte" ) ; solde = res . getDouble ( "solde" ) ; dateCreation = res . getString ( "dateCreation" ) ; fk_id_utilisateur = res . getInt ( "fk_id_utilisateur" ) ; compte = new Compte ( id_compte , typeCompte , solde , dateCreation , fk_id_utilisateur ) ; comptes . add ( compte ) ; } } catch ( SQLException e ) { while ( e != null ) { System . out . println ( e . getErrorCode ( ) ) ; System . out . println ( e . getMessage ( ) ) ; System . out . println ( e . getSQLState ( ) ) ; e . printStackTrace ( ) ; e = e . getNextException ( ) ; } } return comptes ; }
tr	5X	public static void main ( String [ ] args ) { char [ ] [ ] arr = new char [ ] [ ] { { i , l , o , v , e } , { d , i , n , t , e } , { n , e , w , e , p } , { a , i , v , r , i } , { m , a , x , e , c } } ; boolean [ ] [ ] flag = new boolean [ 5 ] [ 5 ] ; int count = 0 ; int i = 0 ; int j = 0 ; int direction = 0 ; System . out . print ( arr [ i ] [ j ] ) ; flag [ i ] [ j ] = true ; while ( count != ( 5 * 5 ) - 1 ) { switch ( direction ) { case 0 : { if ( j + 1 < 5 && ! flag [ i ] [ j + 1 ] ) { j ++ ; count ++ ; flag [ i ] [ j ] = true ; System . out . print ( arr [ i ] [ j ] ) ; } else { direction = 1 ; } break ; } case 1 : { if ( i + 1 < 5 && ! flag [ i + 1 ] [ j ] ) { i ++ ; count ++ ; flag [ i ] [ j ] = true ; System . out . print ( arr [ i ] [ j ] ) ; } else { direction = 2 ; } break ; } case 2 : { if ( j - 1 > - 1 && ! flag [ i ] [ j - 1 ] ) { direction = 2 ; j -- ; count ++ ; flag [ i ] [ j ] = true ; System . out . print ( arr [ i ] [ j ] ) ; } else { direction = 3 ; } break ; } case 3 : { if ( i - 1 > - 1 && ! flag [ i - 1 ] [ j ] ) { direction = 3 ; i -- ; count ++ ; flag [ i ] [ j ] = true ; System . out . print ( arr [ i ] [ j ] ) ; } else { direction = 0 ; } break ; } } } }
tr	3	public static void main ( String [ ] argv ) { final int regulPriority = 8 ; final int refGenPriority = 6 ; final int plotterPriority = 7 ; ReferenceGenerator refgen = new ReferenceGenerator ( refGenPriority ) ; Regul regul = new Regul ( regulPriority ) ; final OpCom opcom = new OpCom ( plotterPriority ) ; regul . setOpCom ( opcom ) ; regul . setRefGen ( refgen ) ; opcom . setRegul ( regul ) ; Runnable initializeGUI = new Runnable ( ) { public void run ( ) { opcom . initializeGUI ( ) ; opcom . start ( ) ; } } ; try { SwingUtilities . invokeAndWait ( initializeGUI ) ; } catch ( Exception e ) { return ; } refgen . start ( ) ; regul . start ( ) ; }
tr	2	public static String SQLdecrypted ( String decrypt ) { String decrypted = "" ; try { SecretKeyFactory keyFactory = SecretKeyFactory . getInstance ( "DES" ) ; DESKeySpec keySpec = new DESKeySpec ( secretSalt . getBytes ( ) ) ; SecretKey key = keyFactory . generateSecret ( keySpec ) ; DesEncrypter encrypter = new DesEncrypter ( key ) ; decrypted = encrypter . decrypt ( decrypt ) ; } catch ( Exception e ) { Error_Frame . Error ( e . toString ( ) ) ; } return decrypted ; }
tr	5X	public int bitrate ( int i ) { if ( i >= links ) return ( - 1 ) ; if ( ! seekable && i != 0 ) return ( bitrate ( 0 ) ) ; if ( i < 0 ) { long bits = 0 ; for ( int j = 0 ; j < links ; j ++ ) { bits += ( offsets [ j + 1 ] - dataoffsets [ j ] ) * 8 ; } return ( ( int ) Math . rint ( bits / time_total ( - 1 ) ) ) ; } else { if ( seekable ) { return ( ( int ) Math . rint ( ( offsets [ i + 1 ] - dataoffsets [ i ] ) * 8 / time_total ( i ) ) ) ; } else { if ( vi [ i ] . bitrate_nominal > 0 ) { return vi [ i ] . bitrate_nominal ; } else { if ( vi [ i ] . bitrate_upper > 0 ) { if ( vi [ i ] . bitrate_lower > 0 ) { return ( vi [ i ] . bitrate_upper + vi [ i ] . bitrate_lower ) / 2 ; } else { return vi [ i ] . bitrate_upper ; } } return ( - 1 ) ; } } } }
tr	3	private String readStream ( Process proc , InputStream in ) { StringBuffer ret = new StringBuffer ( ) ; try { int n = in . read ( ) ; while ( n != - 1 ) { ret . append ( ( char ) n ) ; n = in . read ( ) ; } } catch ( IOException ex ) { Logger . getLogger ( ThirdIdea . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; } return ret . toString ( ) ; }
tr	5X	private void setUsersState ( int state ) { final int columnId = 0 ; if ( tableUsers . getSelectedRow ( ) != - 1 ) { int userId = ( Integer ) tableUsers . getValueAt ( tableUsers . getSelectedRow ( ) , columnId ) ; Statement statement = null ; ResultSet result = null ; try { statement = usersDAO . getConnection ( ) . createStatement ( ResultSet . TYPE_SCROLL_SENSITIVE , ResultSet . CONCUR_UPDATABLE ) ; result = statement . executeQuery ( usersDAO . getAllQuery ( ) ) ; while ( result . next ( ) ) { if ( result . getInt ( "ID" ) == userId ) { break ; } } result . updateInt ( "USERSTATE" , state ) ; result . updateRow ( ) ; usersDAO = new UsersDAO ( ) ; usersDAO . initTableModel ( tableUsers , usersDAO . listAll ( ) ) ; } catch ( SQLException exc ) { JOptionPane . showMessageDialog ( this , "\u041E\u0448\u0438\u0431\u043A\u0430 \u043F\u0440\u0438 \u043E\u0431\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u0438 \u0434\u0430\u043D\u043D\u044B\u0445" ) ; } } else { JOptionPane . showMessageDialog ( this , "\u041D\u0435 \u0432\u044B\u0431\u0440\u0430\u043D \u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044C \u0432 \u0442\u0430\u0431\u043B\u0438\u0446\u0435!" ) ; return ; } }
tr	5X	private void waitForAndConnectClients ( ) { boolean afterFirstPlayer ; try { ServerSocket serverSocket = new ServerSocket ( PORT ) ; Socket clientSocket = new Socket ( ) ; acceptConnections ( serverSocket , clientSocket ) ; } catch ( SocketTimeoutException ste ) { System . out . println ( "SocketTimeoutException occured in Server" ) ; boolean exitLoop = false ; if ( Server . numOfClients >= 2 ) { this . startupPG . broadcastMessage ( "sBegin" ) ; while ( exitLoop == false ) { if ( this . startupPG . arePlayersReadyToPlay ( ) == true ) { cGame45 . beginRound ( ) ; exitLoop = true ; } else { try { Thread . sleep ( 1000 ) ; } catch ( InterruptedException ie ) { System . err . println ( "Server interupted while waiting on all remote players to set up their screens" ) ; } } } } else { System . out . println ( "Timeout exception occured and there was not enough players to begin playing" ) ; } } catch ( IOException ioe ) { System . out . println ( "IO Exception occured in Server" ) ; } catch ( SecurityException sc ) { System . out . println ( "SecurityExceptionException occured in Server" ) ; } catch ( IllegalBlockingModeException ibme ) { System . out . println ( "IllegalBlockingModeException occured in Server" ) ; } }
tr	1	@ Before public void setUp ( ) { DB . setDataSource ( new SQLite ( ) ) ; }
tr	2	ListNode parseList ( SeekableStringReader sr ) { sr . read ( ) ; sr . skipWhitespace ( ) ; ListNode list = new ListNode ( ) ; if ( sr . peek ( ) == ] ) { sr . read ( ) ; return list ; } list . elements = parseExprList ( sr ) ; sr . skipWhitespace ( ) ; if ( ! sr . hasMore ( ) ) throw new ParseException ( "missing ']'" ) ; if ( sr . peek ( ) ==   ) sr . read ( ) ; if ( ! sr . hasMore ( ) ) throw new ParseException ( "missing ']'" ) ; char closechar = sr . read ( ) ; if ( closechar != ] ) throw new ParseException ( "expected ']'" ) ; return list ; }
tr	3	public void refreshTextList ( ) { ground . remove ( textpane ) ; textpane = null ; resultSets = connector . getAllResultSets ( userID ) ; Iterator < ? > result = resultSets . iterator ( ) ; dataname . clear ( ) ; if ( result != null ) { while ( result . hasNext ( ) ) { ResultSet temp_res = ( ResultSet ) result . next ( ) ; resultmapper . put ( temp_res . getDocument ( ) . getFileName ( ) , ( ResultSet ) temp_res ) ; dataname . addElement ( temp_res . getDocument ( ) . getFileName ( ) ) ; } textpane = new JScrollPane ( texte ) ; textpane . setLocation ( 280 , 50 ) ; textpane . setSize ( 180 , 300 ) ; textpane . setVisible ( true ) ; texte . setVisible ( true ) ; ground . add ( textpane ) ; textpane . repaint ( ) ; ground . repaint ( ) ; } }
tr	1	protected BombImage ( Content parent , Game game , Point position , int range , Date end ) { super ( parent , game , position , range , end ) ; }
tr	2	@ Test public void testGetArgument ( ) { initializeArguments ( ) ; InputDefinition definition = new InputDefinition ( ) ; definition . addArguments ( Arrays . asList ( ( InputArgument ) foo ) ) ; assertEquals ( "getArgument() returns a InputArgument by its name" , foo , definition . getArgument ( "foo" ) ) ; try { definition . getArgument ( "bar" ) ; fail ( "getArgument() throws an IllegalArgumentException if the InputArgument name does not exist" ) ; } catch ( Exception e ) { assertTrue ( "getArgument() throws an IllegalArgumentException if the InputArgument name does not exist" , e instanceof IllegalArgumentException ) ; assertEquals ( "The \"bar\" argument does not exist." , e . getMessage ( ) ) ; } }
tr	2	String txtToken ( int token ) { switch ( token ) { case TK_NAME : case TK_STRING : case TK_NUMBER : return new String ( buff , 0 , nbuff ) ; default : return token2str ( token ) ; } }
tr	3	@ Override public String toString ( ) { String a = "" ; String b ; if ( ! playerScoreMinerals . keySet ( ) . equals ( playerShipLocations . keySet ( ) ) ) { for ( String s : playerScoreMinerals . keySet ( ) ) { System . out . println ( s ) ; } System . out . println ( "different from" ) ; for ( String s : playerShipLocations . keySet ( ) ) { System . out . println ( s ) ; } a = "\nthere seems to be an issue with the game state\n" ; } for ( String k : playerShipLocations . keySet ( ) ) { b = "" ; for ( BoardLocation bl : playerShipLocations . get ( k ) ) { b = b . concat ( " " + bl . row + " " + bl . col ) ; } a = a . concat ( k + ":" + b + "\n" ) ; a = a . concat ( k + " score:" + playerScoreMinerals . get ( k ) [ 0 ] + "\n" ) ; a = a . concat ( k + " minerals:" + playerScoreMinerals . get ( k ) [ 1 ] + "\n" ) ; } return a . concat ( separator ) ; }
tr	4	String formatOption ( OptionMetadata metadata , CommandLineConfiguration config ) { String formattedOption = null ; if ( metadata . isParameterAccepted ( ) ) { boolean isParamRequired = ( metadata . getParameterMetadata ( ) != null && metadata . getParameterMetadata ( ) . isRequired ( ) ) ; String paramDelim = StringUtil . formatDelimValue ( config . getCommandLineProperties ( ) . getOptionParameterDelim ( ) ) ; String paramUsageStr = "" ; if ( metadata . getParameterMetadata ( ) != null && metadata . getParameterMetadata ( ) . getParameterType ( ) != ParameterType . NONE ) { String paramName = "" ; if ( metadata . getParameterMetadata ( ) . getParameterType ( ) == ParameterType . CUSTOM ) { paramName = metadata . getParameterMetadata ( ) . getIdentifier ( ) ; } else { paramName = metadata . getParameterMetadata ( ) . getParameterType ( ) . name ( ) ; } paramUsageStr = String . format ( ( isParamRequired ) ? "%s<%s>" : "[%s<%s>]" , paramDelim , paramName ) ; if ( metadata . isMultiValued ( ) ) { paramUsageStr += "..." ; } } String longIdentifier = metadata . getIdentifier ( IdentifierType . long ) ; if ( longIdentifier != null && ! longIdentifier . isEmpty ( ) ) { formattedOption = String . format ( "%s%s  %s%s%s" , config . getCommandLineProperties ( ) . getOptionPrefix ( ) , metadata . getIdentifier ( ) , config . getCommandLineProperties ( ) . getOptionLongPrefix ( ) , metadata . getIdentifier ( IdentifierType . long ) , paramUsageStr ) ; } else { formattedOption = String . format ( "%s%s%s" , config . getCommandLineProperties ( ) . getOptionPrefix ( ) , metadata . getIdentifier ( ) , paramUsageStr ) ; } } else { String longIdentifier = metadata . getIdentifier ( IdentifierType . long ) ; if ( longIdentifier != null && ! longIdentifier . isEmpty ( ) ) { formattedOption = String . format ( "%s%s  %s%s" , config . getCommandLineProperties ( ) . getOptionPrefix ( ) , metadata . getIdentifier ( ) , config . getCommandLineProperties ( ) . getOptionLongPrefix ( ) , metadata . getIdentifier ( IdentifierType . long ) ) ; } else { formattedOption = String . format ( "%s%s" , config . getCommandLineProperties ( ) . getOptionPrefix ( ) , metadata . getIdentifier ( ) ) ; } } return formattedOption ; }
tr	3	int [ ] [ ] allRolls ( ) { int [ ] [ ] ret = new int [ 24 ] [ ] ; int i = 0 ; for ( int k = 0 ; k < 6 ; k ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { ret [ i ++ ] = id . clone ( ) ; rollZ ( ) ; } if ( k % 2 == 1 ) rollY ( ) ; else rollX ( ) ; } return ret ; }
tr	1	public java . awt . Frame getFrame ( ) { return parent ; }
tr	4	public static void main ( String args [ ] ) { try { for ( javax . swing . UIManager . LookAndFeelInfo info : javax . swing . UIManager . getInstalledLookAndFeels ( ) ) { if ( "Nimbus" . equals ( info . getName ( ) ) ) { javax . swing . UIManager . setLookAndFeel ( info . getClassName ( ) ) ; break ; } } } catch ( ClassNotFoundException ex ) { java . util . logging . Logger . getLogger ( UpadateApplicationJFrame . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( InstantiationException ex ) { java . util . logging . Logger . getLogger ( UpadateApplicationJFrame . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( IllegalAccessException ex ) { java . util . logging . Logger . getLogger ( UpadateApplicationJFrame . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( javax . swing . UnsupportedLookAndFeelException ex ) { java . util . logging . Logger . getLogger ( UpadateApplicationJFrame . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } java . awt . EventQueue . invokeLater ( new Runnable ( ) { public void run ( ) { new UpadateApplicationJFrame ( ) . setVisible ( true ) ; } } ) ; }
tr	4	@ Override public void enter ( BlockNode block , Deque < BlockNode > stack ) { ChangeNode previous = null ; Iterator < Node > nodes = block . - . iterator ( ) ; while ( nodes . hasNext ( ) ) { Node n = nodes . next ( ) ; if ( n instanceof ChangeNode ) { ChangeNode cn = ( ChangeNode ) n ; if ( cn . absolute ) { previous = null ; continue ; } if ( previous != null && cn . type == previous . type ) { previous . change += cn . change ; nodes . remove ( ) ; } else { previous = cn ; } } else { previous = null ; } } }
tr	3	public Hierarchy getHierarchy ( String id ) { for ( Hierarchy h : hierarchys ) { if ( h . getId ( ) . equalsIgnoreCase ( id ) ) { return h ; } } return null ; }
tr	5X	public void runScript ( InputStream stream ) throws JStrykerException , IllegalArgumentException { if ( stream == null ) { throw new IllegalArgumentException ( "Stream cannot be null." ) ; } try { List < String > commands = parse ( stream ) ; for ( String command : commands ) { Statement statement = null ; try { statement = connection . createStatement ( ) ; statement . execute ( command . toString ( ) ) ; } finally { if ( statement != null ) { statement . close ( ) ; } } } } catch ( SQLException e ) { throw new JStrykerException ( e . getMessage ( ) , e ) ; } catch ( IOException e ) { throw new JStrykerException ( e . getMessage ( ) , e ) ; } }
tr	3	public void Insertar ( String dato , String cuentaBancaria ) { NodoDeLista nuevo ; nuevo = new NodoDeLista ( ) ; nuevo . setDato ( dato ) ; nuevo . setCuentaBancaria ( cuentaBancaria ) ; if ( raiz == null ) { nuevo . setSiguiente ( null ) ; raiz = nuevo ; } else { NodoDeLista auxiliar = raiz ; while ( auxiliar . getSiguiente ( ) != null ) { auxiliar = auxiliar . getSiguiente ( ) ; } auxiliar . setSiguiente ( nuevo ) ; } }
tr	2	@ Override public void setDataVector ( Vector newData , Vector columnNames ) { if ( newData == null ) { throw new IllegalArgumentException ( "setDataVector1() - Null parameter" ) ; } super . setDataVector ( dataVector , columnNames ) ; dataVector = newData ; attributiveModel = new DefaultCellAttribute ( dataVector . size ( ) , columnIdentifiers . size ( ) ) ; newRowsAdded ( new TableModelEvent ( this , 0 , getRowCount ( ) - 1 , TableModelEvent . ALL_COLUMNS , TableModelEvent . INSERT ) ) ; }
tr	1	@ Override protected void selectNumber ( ) { System . out . println ( "\u9009\u4E00\u4E2A\u4E2D\u56FD\u8054\u901A\u7535\u8BDD\u53F7" ) ; }
tr	4	protected void fireTreeNodesRemoved ( Object source , Object [ ] path , int [ ] childIndices , Object [ ] children ) { Object [ ] listeners = listenerList . getListenerList ( ) ; TreeModelEvent e = null ; for ( int i = listeners . length - 2 ; i >= 0 ; i -= 2 ) { if ( listeners [ i ] == TreeModelListener . class ) { if ( e == null ) { e = new TreeModelEvent ( source , path , childIndices , children ) ; } ( ( TreeModelListener ) listeners [ i + 1 ] ) . treeNodesRemoved ( e ) ; } } }
tr	5X	private boolean interpolateCollection ( Object obj , String basePath , Field field ) throws IllegalAccessException , InterpolationException { Collection c = ( Collection ) field . get ( obj ) ; if ( c != null && ! c . isEmpty ( ) ) { List originalValues = new ArrayList ( c ) ; try { c . clear ( ) ; } catch ( UnsupportedOperationException e ) { warningCollector . add ( new ObjectInterpolationWarning ( "Field is an unmodifiable collection. Skipping interpolation." , basePath + "." + field . getName ( ) , e ) ) ; return true ; } for ( Object value : originalValues ) { if ( value != null ) { if ( String . class == value . getClass ( ) ) { String interpolated = interpolator . interpolate ( ( String ) value , recursionInterceptor ) ; if ( ! interpolated . equals ( value ) ) { c . add ( interpolated ) ; } else { c . add ( value ) ; } } else { c . add ( value ) ; if ( value . getClass ( ) . isArray ( ) ) { evaluateArray ( value , basePath + "." + field . getName ( ) ) ; } else { interpolationTargets . add ( new InterpolationTarget ( value , basePath + "." + field . getName ( ) ) ) ; } } } else { c . add ( value ) ; } } } return false ; }
tr	4	public Object getValueAt ( Object node , int column ) { FileNode fn = ( FileNode ) node ; try { switch ( column ) { case 0 : return fn . getFile ( ) . getName ( ) ; case 1 : if ( fn . isTotalSizeValid ( ) ) { return new Integer ( ( int ) ( ( FileNode ) node ) . totalSize ( ) ) ; } return null ; case 2 : return fn . isLeaf ( ) ? "File" : "Directory" ; case 3 : return fn . lastModified ( ) ; } } catch ( SecurityException se ) { } return null ; }
tr	3	public boolean checkStatic ( ) { boolean result = true ; double [ ] values = getValues ( ) ; for ( int i = 0 ; i < values . length - 1 ; i ++ ) { if ( values [ i ] . doubleValue ( ) != values [ i + 1 ] . doubleValue ( ) ) { result = false ; break ; } } return result ; }
tr	4	public static void run ( final IUpdateInfo uInfo ) { if ( ! useStack . isEmpty ( ) ) { for ( final ElasticContact c : useStack ) { c . prepare ( uInfo ) ; } for ( int i = 1 ; i < 10 ; i ++ ) { for ( final ElasticContact c : useStack ) { c . solve ( uInfo ) ; } } while ( ! useStack . isEmpty ( ) ) { final ElasticContact c ; if ( ( c = useStack . pop ( ) ) != null ) { c . reset ( ) ; unusedStack . push ( c ) ; } } } }
tr	4	@ Override public void tick ( ) { counter ++ ; if ( counter == tickDivider ) { counter = 0 ; if ( enemyUnits . size ( ) > 0 ) { Slime slime = new Slime ( ) ; rune . modifySlime ( slime ) ; for ( EnemyUnit enemy : enemyUnits ) { enemy . gotSlowed ( slime ) ; } } } }
tr	5X	public void update ( ) { ArrayList < ArrayList < Entity >> entityarrays = new ArrayList < ArrayList < Entity >> ( entities . values ( ) ) ; for ( int x = 0 ; x < entityarrays . size ( ) ; x ++ ) { ArrayList < Entity > activeArray = entityarrays . get ( x ) ; for ( int y = 0 ; y < activeArray . size ( ) ; y ++ ) { Entity ent = activeArray . get ( y ) ; ArrayList < EffectPackage > effects = ent . getEffectPackages ( ) ; for ( int c = 0 ; c < effects . size ( ) ; c ++ ) { EffectPackage pack = effects . get ( c ) ; if ( pack . getEffect ( ) == Effect . MOVE_UP ) { levelchange = true ; changeto = level - 1 ; } else if ( pack . getEffect ( ) == Effect . MOVE_DOWN ) { levelchange = true ; changeto = level + 1 ; } } ent . update ( ) ; } } actors = new ArrayList < Actor > ( actorHashMap . values ( ) ) ; for ( int c = 0 ; c < actors . size ( ) ; c ++ ) { Actor a = actors . get ( c ) ; a . update ( ) ; Point pos = a . getPos ( ) ; if ( a . delete ( ) ) { actorHashMap . remove ( genKey ( pos . getX ( ) , pos . getY ( ) ) ) ; } } }
tr	5X	public void repairGeneTree ( Abaddon abaddon ) { while ( ! uncheckedGenes . isEmpty ( ) ) { GeneTrait currentGene = uncheckedGenes . remove ( 0 ) ; if ( currentGene instanceof ParentTrait ) { ParentTrait currentParent = ( ParentTrait ) currentGene ; for ( int i = 0 ; i < currentParent . getChildCount ( ) ; i ++ ) { GeneTrait currentChild = currentParent . getChild ( i ) ; if ( ! genes . contains ( currentChild ) ) { abaddon . growChild ( this , currentParent , i ) ; } } } } }
tr	1	public boolean get ( int value ) { assertValue ( value ) ; return ( bitset & 1 << value ) > 0 ; }
tr	2	public Customer editCustomer ( Customer customer ) throws Exception { if ( customer . getId ( ) == null || customer . getAddress ( ) == null || customer . getName ( ) == null || customer . getSurname ( ) == null || customer . getTelephones ( ) == null ) { throw new NullParameterException ( ) ; } if ( ! checkZipCode ( customer . getAddress ( ) . getZipCode ( ) ) ) { throw new ZipCodeOutOfRangeException ( ) ; } DAOFactory . factory . getCustomerDAO ( ) . updateCustomer ( customer ) ; return customer ; }
tr	3	public void act ( List < Actor > newFoxes ) { incrementAge ( ) ; incrementHunger ( ) ; if ( isAlive ( ) ) { giveBirth ( newFoxes ) ; Location newLocation = findFood ( ) ; if ( newLocation == null ) { newLocation = getField ( ) . freeAdjacentLocation ( getLocation ( ) ) ; } if ( newLocation != null ) { setLocation ( newLocation ) ; } else { setDead ( ) ; } } }
tr	5X	private void registerGameEventsListeners ( ) { gameController . addEventListener ( new OnGamePlayStartedListener ( ) { @ Override public void onGamePlayStarted ( final GameConfiguration configuration ) { SwingUtilities . invokeLater ( new Runnable ( ) { @ Override public void run ( ) { progressBar . setValue ( 0 ) ; progressBarTimer . start ( ) ; } } ) ; } } ) ; gameController . addEventListener ( new OnGamePlayResultListener ( ) { @ Override public void onGamePlayResult ( final GamePlayResult gamePlayResult , final GameFinalScore gameScore ) { SwingUtilities . invokeLater ( new Runnable ( ) { @ Override public void run ( ) { progressBarTimer . stop ( ) ; progressBar . setValue ( PROGRESS_BAR_STEPS ) ; } } ) ; } } ) ; }
tr	3	@ SuppressWarnings ( "unchecked" ) private void initComponents ( ) { editNameLabel = new javax . swing . JLabel ( ) ; editNameField = new javax . swing . JTextField ( ) ; editTypeLabel = new javax . swing . JLabel ( ) ; editTypeDropdown = new javax . swing . JComboBox ( ) ; editValueLabel = new javax . swing . JLabel ( ) ; editCancelButton = new javax . swing . JButton ( ) ; editSaveButton = new javax . swing . JButton ( ) ; editValueField = new javax . swing . JTextField ( ) ; editValueValidationLabel = new javax . swing . JLabel ( ) ; setDefaultCloseOperation ( javax . swing . WindowConstants . DISPOSE_ON_CLOSE ) ; setTitle ( "Editing key " + key ) ; editNameLabel . setText ( "Key:" ) ; editNameField . setText ( this . key ) ; editTypeLabel . setText ( "Type:" ) ; editTypeDropdown . setModel ( new javax . swing . DefaultComboBoxModel ( ValueTypes . values ( ) ) ) ; editTypeDropdown . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { editTypeDropdownActionPerformed ( evt ) ; } } ) ; editValueLabel . setText ( "Value:" ) ; editCancelButton . setText ( "Cancel" ) ; editCancelButton . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { editCancelButtonActionPerformed ( evt ) ; } } ) ; editSaveButton . setText ( "Save" ) ; editSaveButton . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { editSaveButtonActionPerformed ( evt ) ; } } ) ; editValueField . setText ( this . value != null ? this . value . toString ( ) : "" ) ; editValueField . setInputVerifier ( new EditValueFieldInputVerifier ( ) ) ; editValueField . addKeyListener ( new java . awt . event . KeyAdapter ( ) { public void keyTyped ( java . awt . event . KeyEvent evt ) { editValueFieldKeyTyped ( evt ) ; } } ) ; editValueValidationLabel . setIcon ( UIManager . getIcon ( "OptionPane.warningIcon" ) ) ; editValueValidationLabel . setText ( "jLabel1" ) ; editValueValidationLabel . setVisible ( false ) ; javax . swing . GroupLayout layout = new javax . swing . GroupLayout ( getContentPane ( ) ) ; getContentPane ( ) . setLayout ( layout ) ; layout . setHorizontalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addContainerGap ( ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( editNameLabel , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addComponent ( editNameField ) . addComponent ( editTypeLabel , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addComponent ( editTypeDropdown , 0 , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addComponent ( editValueLabel , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addGroup ( javax . swing . GroupLayout . Alignment . TRAILING , layout . createSequentialGroup ( ) . addGap ( 0 , 244 , short . MAX_VALUE ) . addComponent ( editSaveButton ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . UNRELATED ) . addComponent ( editCancelButton ) ) . addComponent ( editValueField ) . addComponent ( editValueValidationLabel , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) ) . addContainerGap ( ) ) ) ; layout . setVerticalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addContainerGap ( ) . addComponent ( editNameLabel ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addComponent ( editNameField , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . UNRELATED ) . addComponent ( editTypeLabel ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addComponent ( editTypeDropdown , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . UNRELATED ) . addComponent ( editValueLabel ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addComponent ( editValueField , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) . addGap ( 18 , 18 , 18 ) . addComponent ( editValueValidationLabel ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED , 79 , short . MAX_VALUE ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE ) . addComponent ( editCancelButton ) . addComponent ( editSaveButton ) ) . addContainerGap ( ) ) ) ; pack ( ) ; }
tr	4	public static String readAsString ( File file ) { final long length = file . length ( ) ; final byte [ ] bytes = new byte [ ( int ) length ] ; InputStream is = null ; try { is = new FileInputStream ( file ) ; is . read ( bytes ) ; } catch ( IOException e ) { } finally { try { if ( is != null ) { is . close ( ) ; } } catch ( IOException ex ) { return null ; } } try { return new String ( bytes , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { return null ; } }
tr	4	private static void begin ( ) { Scanner sc = new Scanner ( System . in ) ; int nTestCases = Integer . parseInt ( sc . nextLine ( ) ) ; sc . nextLine ( ) ; Line decryptedLine = new Line ( "the quick brown fox jumps over the lazy dog" ) ; for ( int t = 0 ; t < nTestCases ; ++ t ) { List < Line > lines = new LinkedList < Line > ( ) ; Map < Character , Character > dict = null ; while ( sc . hasNextLine ( ) ) { String input = sc . nextLine ( ) ; if ( input . isEmpty ( ) ) { break ; } Line line = new Line ( input ) ; lines . add ( line ) ; if ( dict == null ) { dict = line . getDict ( decryptedLine ) ; } } if ( dict == null ) { System . out . println ( "No solution." ) ; } else { for ( Line l : lines ) { System . out . println ( l . decrypt ( dict ) ) ; } } if ( t < nTestCases - 1 ) { System . out . println ( ) ; } } }
tr	4	@ Override public void init ( ) { try { for ( javax . swing . UIManager . LookAndFeelInfo info : javax . swing . UIManager . getInstalledLookAndFeels ( ) ) { if ( "Nimbus" . equals ( info . getName ( ) ) ) { javax . swing . UIManager . setLookAndFeel ( info . getClassName ( ) ) ; break ; } } } catch ( ClassNotFoundException ex ) { java . util . logging . Logger . getLogger ( PokemonMoveset . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( InstantiationException ex ) { java . util . logging . Logger . getLogger ( PokemonMoveset . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( IllegalAccessException ex ) { java . util . logging . Logger . getLogger ( PokemonMoveset . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( javax . swing . UnsupportedLookAndFeelException ex ) { java . util . logging . Logger . getLogger ( PokemonMoveset . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } try { java . awt . EventQueue . invokeAndWait ( new Runnable ( ) { public void run ( ) { initComponents ( ) ; } } ) ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } }
tr	1	public BaseLight ( Vector3f color , float intensity ) { this . color = color ; this . intensity = intensity ; }
tr	5X	protected void downloadJars ( String path ) throws Exception { File versionFile = new File ( path , "md5s" ) ; Properties md5s = new Properties ( ) ; if ( versionFile . exists ( ) ) { try { FileInputStream fis = new FileInputStream ( versionFile ) ; md5s . load ( fis ) ; fis . close ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } state = 4 ; int [ ] fileSizes = new int [ urlList . length ] ; boolean [ ] skip = new boolean [ urlList . length ] ; for ( int i = 0 ; i < urlList . length ; i ++ ) { URLConnection urlconnection = urlList [ i ] . openConnection ( ) ; urlconnection . setDefaultUseCaches ( false ) ; skip [ i ] = false ; if ( ( urlconnection instanceof HttpURLConnection ) ) { ( ( HttpURLConnection ) urlconnection ) . setRequestMethod ( "HEAD" ) ; int code = ( ( HttpURLConnection ) urlconnection ) . getResponseCode ( ) ; if ( code / 100 == 3 ) { skip [ i ] = true ; } } fileSizes [ i ] = urlconnection . getContentLength ( ) ; totalSizeDownload += fileSizes [ i ] ; } int initialPercentage = this . percentage = 10 ; byte [ ] buffer = new byte [ 65536 ] ; for ( int i = 0 ; i < urlList . length ; i ++ ) { if ( skip [ i ] != false ) { percentage = ( initialPercentage + fileSizes [ i ] * 45 / totalSizeDownload ) ; } boolean downloadFile = true ; while ( downloadFile ) { downloadFile = false ; URLConnection urlconnection = urlList [ i ] . openConnection ( ) ; String etag = "" ; if ( ( urlconnection instanceof HttpURLConnection ) ) { urlconnection . setRequestProperty ( "Cache-Control" , "no-cache" ) ; urlconnection . connect ( ) ; etag = urlconnection . getHeaderField ( "ETag" ) ; } String currentFile = getFileName ( urlList [ i ] ) ; InputStream inputstream = getJarInputStream ( currentFile , urlconnection ) ; FileOutputStream fos = new FileOutputStream ( path + currentFile ) ; long downloadStartTime = System . currentTimeMillis ( ) ; int downloadedAmount = 0 ; int fileSize = 0 ; String downloadSpeedMessage = "" ; MessageDigest m = MessageDigest . getInstance ( "MD5" ) ; int bufferSize ; while ( ( bufferSize = inputstream . read ( buffer , 0 , buffer . length ) ) != - 1 ) { fos . write ( buffer , 0 , bufferSize ) ; m . update ( buffer , 0 , bufferSize ) ; currentSizeDownload += bufferSize ; fileSize += bufferSize ; percentage = ( initialPercentage + currentSizeDownload * 45 / totalSizeDownload ) ; subtaskMessage = ( "\u0417\u0430\u0433\u0440\u0443\u0437\u043A\u0430: " + currentFile + " " + currentSizeDownload * 100 / totalSizeDownload + "%" ) ; downloadedAmount += bufferSize ; long timeLapse = System . currentTimeMillis ( ) - downloadStartTime ; if ( timeLapse >= 1000 ) { float downloadSpeed = downloadedAmount / ( float ) timeLapse ; downloadSpeed = ( int ) ( downloadSpeed * 100.0F ) / 100.0F ; downloadSpeedMessage = " @ " + downloadSpeed + " KB/sec" ; downloadedAmount = 0 ; downloadStartTime += 1000 ; } subtaskMessage += downloadSpeedMessage ; } inputstream . close ( ) ; fos . close ( ) ; } } }
tr	1	public int getSize ( ) { return this . slots . length ; }
tr	2	public String fwla_to_fsp ( String name ) { if ( name . indexOf ( . ) == - 1 ) throw new java . lang . Error ( "The supplied string apears not to have the form <object>.<event>" ) ; String object = name . substring ( 0 , name . indexOf ( . ) ) ; String event = name . substring ( name . indexOf ( . ) + 1 ) ; String _res = "" ; if ( object == null || object . isEmpty ( ) ) throw new java . lang . Error ( "The supplied string apears not to have the form <object>.<event>" ) ; if ( event == null || event . isEmpty ( ) ) throw new java . lang . Error ( "The supplied string apears not to have the form <object>.<event>" ) ; String _object = null ; if ( elemsMap . containsKey ( object ) ) { _object = elemsMap . get ( object ) ; } else if ( netsMap . containsKey ( object ) ) { _object = netsMap . get ( object ) ; } else { throw new java . lang . Error ( "No name mapping could be found for " + object ) ; } assert ( _object != null ) ; LinkedList < String > _net_prefix = new LinkedList < String > ( ) ; boolean found = find_object ( _object , this . fsp_spec . root ( ) , _net_prefix ) ; assert ( found ) ; for ( String s : _net_prefix ) _res += s + "." ; if ( renamesMap . containsKey ( _object + "." + event ) ) { _res += renamesMap . get ( _object + "." + event ) ; } else { throw new java . lang . Error ( "No name mapping could be found for " + _object + "." + event ) ; } assert ( _res != null ) ; return _res ; }
tr	3	protected String getNestedUsage ( String [ ] args , int level , Method method , T player ) throws CommandException { StringBuilder command = new StringBuilder ( ) ; command . append ( "/" ) ; for ( int i = 0 ; i <= level ; ++ i ) { command . append ( args [ i ] + " " ) ; } Map < String , Method > map = commands . get ( method ) ; boolean found = false ; command . append ( "<" ) ; Set < String > allowedCommands = new HashSet < String > ( ) ; for ( Map . Entry < String , Method > entry : map . entrySet ( ) ) { Method childMethod = entry . getValue ( ) ; found = true ; if ( hasPermission ( childMethod , player ) ) { Command childCmd = childMethod . getAnnotation ( Command . class ) ; allowedCommands . add ( childCmd . aliases ( ) [ 0 ] ) ; } } if ( allowedCommands . size ( ) > 0 ) { command . append ( StringUtil . joinString ( allowedCommands , "|" , 0 ) ) ; } else { if ( ! found ) { command . append ( "?" ) ; } else { throw new CommandPermissionsException ( ) ; } } command . append ( ">" ) ; return command . toString ( ) ; }
tr	2	@ Test @ Ignore public void haveDinner ( ) throws Exception { int eatTimes = 3 ; int numPhilosophers = 5 ; CountDownLatch waitTillAllInitialized = new CountDownLatch ( numPhilosophers ) ; CountDownLatch waitTillAllDoneDining = new CountDownLatch ( numPhilosophers ) ; AtomicInteger availableForks = new AtomicInteger ( numPhilosophers ) ; List < DiningPhilosopher > philosophers = new ArrayList < > ( ) ; for ( int i = 1 ; i <= numPhilosophers ; i ++ ) { DiningPhilosopher philosopher = new DiningPhilosopher ( i , availableForks , eatTimes , waitTillAllDoneDining ) ; philosophers . add ( philosopher ) ; } ImmutableList < DiningPhilosopher > allPhilosophers = new ImmutableList < > ( philosophers ) ; philosophers . forEach ( ( DiningPhilosopher philosopher ) -> { philosopher . start ( allPhilosophers , Registry . getDefault ( ) ) ; } ) ; waitTillAllDoneDining . await ( ) ; System . out . println ( "all philosophers done each dining " + eatTimes + " times" ) ; }
tr	2	public Set < String > keySet ( ) { if ( mode == Mode . Map ) { return map . keySet ( ) ; } throw new PerlHashTypeException ( "Not a map" ) ; }
tr	1	public void updateRhythm ( boolean r , boolean b , boolean bp , boolean n , boolean c , boolean s , boolean t ) { this . whole = r ; this . half = b ; this . dottedhalf = bp ; this . quarter = n ; this . eighth = c ; this . silence = s ; this . triplet = t ; }
tr	5X	public static void main ( String args [ ] ) { try { for ( javax . swing . UIManager . LookAndFeelInfo info : javax . swing . UIManager . getInstalledLookAndFeels ( ) ) { if ( "Nimbus" . equals ( info . getName ( ) ) ) { javax . swing . UIManager . setLookAndFeel ( info . getClassName ( ) ) ; break ; } } } catch ( ClassNotFoundException ex ) { java . util . logging . Logger . getLogger ( WindowAdd . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( InstantiationException ex ) { java . util . logging . Logger . getLogger ( WindowAdd . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( IllegalAccessException ex ) { java . util . logging . Logger . getLogger ( WindowAdd . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( javax . swing . UnsupportedLookAndFeelException ex ) { java . util . logging . Logger . getLogger ( WindowAdd . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } java . awt . EventQueue . invokeLater ( new Runnable ( ) { public void run ( ) { WindowAdd dialog = new WindowAdd ( new javax . swing . JFrame ( ) , true ) ; dialog . addWindowListener ( new java . awt . event . WindowAdapter ( ) { @ Override public void windowClosing ( java . awt . event . WindowEvent e ) { System . exit ( 0 ) ; } } ) ; dialog . setVisible ( true ) ; } } ) ; }
tr	4	private Object readLiteral ( ) throws JSONException { String literal = nextToInternal ( "{}[]/\\: =;# \t\f" ) ; if ( literal . length ( ) == 0 ) { throw syntaxError ( "Expected literal value" ) ; } else if ( "null" . equalsIgnoreCase ( literal ) ) { return JSONObject . null ; } else if ( "true" . equalsIgnoreCase ( literal ) ) { return boolean . true ; } else if ( "false" . equalsIgnoreCase ( literal ) ) { return boolean . false ; } if ( literal . indexOf ( . ) == - 1 ) { int base = 10 ; String number = literal ; if ( number . startsWith ( "0x" ) || number . startsWith ( "0X" ) ) { number = number . substring ( 2 ) ; base = 16 ; } else if ( number . startsWith ( "0" ) && number . length ( ) > 1 ) { number = number . substring ( 1 ) ; base = 8 ; } try { long longValue = long . parseLong ( number , base ) ; if ( longValue <= Integer . MAX_VALUE && longValue >= Integer . MIN_VALUE ) { return ( int ) longValue ; } else { return longValue ; } } catch ( NumberFormatException e ) { } } try { return double . valueOf ( literal ) ; } catch ( NumberFormatException ignored ) { } return new String ( literal ) ; }
tr	1	public void setLoggingIn ( ) { removeAll ( ) ; JPanel panel = new JPanel ( new BorderLayout ( ) ) ; panel . add ( getUpdateNews ( ) , "Center" ) ; JPanel southPanel = new TexturedPanel ( ) ; southPanel . setLayout ( new BorderLayout ( ) ) ; southPanel . add ( new LogoPanel ( ) , "West" ) ; southPanel . add ( new TransparentPanel ( ) , "Center" ) ; JLabel label = new TransparentLabel ( "Logging in...                      " , 0 ) ; label . setFont ( new Font ( null , 1 , 16 ) ) ; southPanel . add ( center ( label ) , "East" ) ; southPanel . setPreferredSize ( new Dimension ( 100 , 100 ) ) ; panel . add ( southPanel , "South" ) ; add ( panel , "Center" ) ; validate ( ) ; }
tr	1	public void setWeight ( int weight ) { this . weight = weight ; }
tr	5X	private void watchCandidate ( LeaderOffer previousOffer ) throws KeeperException , InterruptedException { LOG . info ( "{} not elected leader. Watching node {}" , leaderOffer , previousOffer ) ; Stat stat = zooKeeper . exists ( previousOffer . getOffer ( ) , new Watcher ( ) { public void process ( WatchedEvent event ) { if ( event . getType ( ) . equals ( Watcher . Event . EventType . NodeDeleted ) ) { if ( ! event . getPath ( ) . equals ( LeaderElectionService . this . leaderOffer . getOffer ( ) ) ) { LOG . debug ( "Node {} deleted. Need to run through the election process." , event . getPath ( ) ) ; try { determine ( ) ; } catch ( KeeperException e ) { failed ( e ) ; } catch ( InterruptedException e ) { failed ( e ) ; } } } } } ) ; if ( stat != null ) { LOG . info ( "Becoming follower with node {}  We're watching {}" , leaderOffer , previousOffer ) ; if ( leaderElectionAware != null ) { leaderElectionAware . onFollower ( leaderOffer ) ; } } else { LOG . debug ( "We were behind {} but it looks like died. Back to determination." , previousOffer ) ; determine ( ) ; } }
tr	3	@ Test public void test ( ) { BufferedReader reader = null ; try { reader = new BufferedReader ( new FileReader ( "testData/stemmerTest.txt" ) ) ; OutputStream out = new FileOutputStream ( "testData/stemmerTestResult.txt" ) ; SnowballStemmerWrapper stemmer = new SnowballStemmerWrapper ( reader , out ) ; while ( stemmer . isAlive ( ) ) { } assertTrue ( checkFiles ( ) ) ; } catch ( FileNotFoundException e ) { e . printStackTrace ( ) ; fail ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }
tr	2	private boolean isPreconditionsFilled ( Path absFilePath ) { if ( ! canWriteSelectedFile ( absFilePath ) ) { return false ; } if ( ! canWriteWithDefaultOriginalClassConstructor ( ) ) { return false ; } return true ; }
tr	1	@ Override public Object visit ( ASTVisitor v , Object arg ) throws Exception { return v . visitBinaryExpr ( this , arg ) ; }
tr	5X	private QuerySet < T > range ( String query ) { QuerySet < T > querySet = null ; try { if ( query != null && ! query . trim ( ) . isEmpty ( ) ) { query = query . replace ( "__range" , "" ) ; query = query . replace ( "  " , " " ) ; query = query . replaceAll ( "['\\[\\]]" , "" ) ; String [ ] queryComponents = query . split ( "=" ) ; if ( queryComponents != null && queryComponents . length > 0 ) { querySet = new QuerySet < T > ( ) ; querySet . entity ( this . entity ) ; String fieldName = queryComponents [ 0 ] ; String [ ] fieldValues = queryComponents [ 1 ] . split ( " " ) ; Field field = null ; if ( fieldName . trim ( ) . equalsIgnoreCase ( "id" ) ) { field = this . entity . getSuperclass ( ) . getDeclaredField ( fieldName ) ; } else { field = this . entity . getDeclaredField ( fieldName ) ; } field . setAccessible ( true ) ; for ( T model : this ) { for ( int fieldValue = Integer . parseInt ( fieldValues [ 0 ] ) ; fieldValue <= Integer . parseInt ( fieldValues [ 1 ] ) ; fieldValue ++ ) { if ( field . get ( model ) . equals ( fieldValue ) ) { querySet . add ( model ) ; } } } } } } catch ( Exception e ) { e . printStackTrace ( ) ; } return querySet ; }
tr	3	public static Kind find ( String lowerCase ) { for ( Kind k : Kind . values ( ) ) { if ( k . name . equalsIgnoreCase ( lowerCase ) ) { return k ; } } return null ; }
tr	1	Partido ( Manager [ ] managers ) { this . managers = managers ; }
tr	3	public static void main ( String [ ] args ) { Rectangle rec = new Rectangle ( new MyPoint ( 2 , 4 ) , new MyPoint ( 4 , 6 ) , new MyPoint ( 2 , 4 ) , new MyPoint ( 4 , 8 ) ) ; class recClass = rec . getClass ( ) ; Field [ ] recFields = recClass . getDeclaredFields ( ) ; Method [ ] recMethods = recClass . getDeclaredMethods ( ) ; System . out . println ( "Class Fields" ) ; for ( Field currField : recFields ) { System . out . println ( currField . getName ( ) ) ; } System . out . println ( "Class Methods" ) ; for ( Method method : recMethods ) { System . out . println ( method . getName ( ) ) ; } class recSuperClass = recClass . getSuperclass ( ) ; if ( recSuperClass == null ) { System . out . println ( String . format ( "The class %s dose not have a super class" , recClass . getSimpleName ( ) ) ) ; } else { System . out . println ( "the super class name is: " + recSuperClass . getSimpleName ( ) ) ; System . out . println ( "Look for constructors" ) ; Constructor [ ] constructors = recSuperClass . getConstructors ( ) ; for ( Constructor constructor : constructors ) { System . out . println ( "Ctor name: " + constructor . getName ( ) ) ; } System . out . println ( "The class " + recSuperClass . getSimpleName ( ) + "" + "is from package " + recSuperClass . getPackage ( ) ) ; } try { class anotherClass = class . forName ( "il.ac.shenkar.point.MyPoint" ) ; Constructor [ ] constructors = anotherClass . getConstructors ( ) ; System . out . println ( "Constructors for: " + anotherClass . getSimpleName ( ) ) ; for ( Constructor constructor : constructors ) { System . out . println ( constructor ) ; } } catch ( ClassNotFoundException e ) { e . printStackTrace ( ) ; } }
tr	5X	@ Override public void loadListOfPlugins ( PluginList plugins , String folderPath , String language , boolean isIntern ) { File downloadDir = new File ( getRepositoryFolderName ( ) + "/" + folderPath ) ; if ( downloadDir . exists ( ) ) { for ( File f : downloadDir . listFiles ( ) ) { if ( f . isDirectory ( ) ) { Plugin p = new Plugin ( f . getName ( ) , language ) ; if ( folderPath . contains ( "plugins" ) ) { if ( p . getType ( ) . equals ( PluginType . template ) ) { p . setType ( PluginType . event ) ; } } p . setRepository ( this ) ; if ( folderPath . length ( ) > 0 ) { p . setFolderInRepository ( folderPath + "/" + f . getName ( ) ) ; } else { p . setFolderInRepository ( f . getName ( ) ) ; } plugins . add ( p ) ; } } } }
tr	1	@ Override public Collection < Cursor < C >> getCursors ( ) { return Collections . unmodifiableCollection ( Arrays . asList ( _cursors ) ) ; }
tr	5X	private boolean applyDistributiveLaw ( IExpressionContext context , ASTNode result ) { final TreeMatcher matcher = new TreeMatcher ( ) . ignoreChildOrder ( true ) . requireNodeToHaveParent ( true ) . unwrapAll ( ) . matchParent ( ) . matchAND ( ) . matchOR ( ) . buildOR ( ) . matchRightChild ( ) . addMatcher ( new INodeMatcher ( ) { @ Override public boolean matches ( TreeMatcher matcher , ASTNode n ) { final ASTNode unwrapped = unwrap ( matcher . parentMatch ( ) ) ; if ( unwrapped . isOR ( ) ) { return n . isAND ( ) ; } if ( unwrapped . isAND ( ) ) { return n . isOR ( ) ; } throw new RuntimeException ( "Unreachable code reached" ) ; } } ) . buildOR ( ) . matchExtra ( ) . addMatcher ( new INodeMatcher ( ) { @ Override public boolean matches ( TreeMatcher matcher , ASTNode n ) { return matcher . leftMatch ( ) . getNodeCount ( ) != matcher . rightMatch ( ) . getNodeCount ( ) ; } } ) . buildOR ( ) ; final MutatingNodeVisitor visitor = new MutatingNodeVisitor ( context ) { @ Override public void visit ( ASTNode node , IExpressionContext context , IIterationContext it ) { if ( ! matcher . matches ( matcher , node ) ) { return ; } final ASTNode matchedParent = matcher . parentMatch ( ) ; final ASTNode leftChild = matcher . leftMatch ( ) ; final ASTNode rightChild = matcher . rightMatch ( ) ; final ASTNode leftTerm ; final ASTNode rightTerm ; final ASTNode replacementTerm ; ASTNode unwrappedRight = unwrap ( rightChild ) ; if ( unwrap ( matchedParent ) . isAND ( ) && unwrappedRight . isOR ( ) ) { leftTerm = maybeWrapInTerm ( OperatorNode . and ( leftChild , unwrappedRight . child ( 0 ) ) ) ; rightTerm = maybeWrapInTerm ( OperatorNode . and ( leftChild , unwrappedRight . child ( 1 ) ) ) ; replacementTerm = OperatorNode . or ( leftTerm , rightTerm ) ; } else if ( unwrap ( matchedParent ) . isOR ( ) && unwrappedRight . isAND ( ) ) { leftTerm = maybeWrapInTerm ( OperatorNode . or ( leftChild , unwrappedRight . child ( 0 ) ) ) ; rightTerm = maybeWrapInTerm ( OperatorNode . or ( leftChild , unwrappedRight . child ( 1 ) ) ) ; replacementTerm = OperatorNode . and ( leftTerm , rightTerm ) ; } else { throw new RuntimeException ( "Unreachable code reached => " + matcher ) ; } ASTNode toReplace = matchedParent ; if ( ! toReplace . hasParent ( ) ) { if ( unwrap ( toReplace ) != toReplace ) { toReplace = unwrap ( toReplace ) ; } else { throw new RuntimeException ( "Unreachable code reached" ) ; } } debugPrintln ( "DISTRIBUTIVE LAW: Replacing " + matchedParent . toString ( false ) + " -> " + replacementTerm ) ; toReplace . replaceWith ( replacementTerm ) ; it . astMutated ( ) ; } } ; return applyInOrder ( result , visitor ) ; }
tr	2	public SandTopSlab ( CustomSlabs plugin , Texture texture ) { super ( plugin , plugin . getConfig ( ) . getString ( "sand.name.top" , "Sand TopSlab" ) , 44 , 8 , new GenericCuboidBlockDesign ( plugin , texture , new int [ ] { 1 , 0 , 0 , 0 , 0 , 1 } , 0.0F , 0.5F , 0.0F , 1.0F , 1.0F , 1.0F ) ) ; this . setStepSound ( MaterialData . sand . getStepSound ( ) ) ; this . setHardness ( MaterialData . sand . getHardness ( ) ) ; this . setFriction ( MaterialData . sand . getFriction ( ) ) ; this . setLightLevel ( MaterialData . sand . getLightLevel ( ) ) ; this . setItemDrop ( new SpoutItemStack ( plugin . SandSlab ) ) ; }
tr	5X	public String [ ] searchLogin ( javax . swing . JTextField jTextField1 , javax . swing . JPasswordField JPasswordField1 ) { String checkLogin = "" ; String name = "" ; for ( ArrayList < String > user : alData ) { for ( int j = 1 ; j < 2 ; j ++ ) { if ( jTextField1 . getText ( ) . equals ( user . get ( j ) ) ) { char [ ] cPassword = JPasswordField1 . getPassword ( ) ; String sPassword = String . valueOf ( cPassword ) ; if ( sPassword . equals ( user . get ( j + 1 ) ) ) { System . out . println ( "Login efetuado com sucesso!" ) ; checkLogin = user . get ( 0 ) ; name = user . get ( 3 ) ; System . out . println ( "Bem vindo" + name ) ; } } } } if ( "" . equals ( checkLogin ) ) { AboutDialog dlg = new AboutDialog ( new JFrame ( ) , "Aviso" , "Usu\u00E1rio ou senha inv\u00E1lidos!" ) ; System . out . println ( "Usu\u00E1rio ou senha inv\u00E1lidos!" ) ; } Ѕtring data = Ѕtring . clone ( checkLogin ) ; if ( data . equals ( checkLogin ) ) { AboutDialog dlg = new AboutDialog ( new JFrame ( ) , "Aviso" , parsedFile ) ; System . out . println ( "error - file does not exist" ) ; } return new String [ ] { checkLogin , name } ; }
tr	4	public static StroopTest createRandomColourTest ( int wordSize , TestType type ) { List < Word > words = new ArrayList < Word > ( wordSize ) ; Random randomizer = new Random ( System . currentTimeMillis ( ) ) ; for ( int i = 0 ; i < wordSize ; i ++ ) { int next = randomizer . nextInt ( 2 ) ; switch ( next ) { case 0 : { words . add ( WordFactory . createRandomPlainColourWord ( ) ) ; break ; } case 1 : { words . add ( WordFactory . createRandomColourWord ( ) ) ; break ; } case 2 : { words . add ( WordFactory . createRandomMixedColourWord ( ) ) ; break ; } } } return new StroopTest ( words , type , "RANDOM" , "" ) ; }
tr	2	@ Before public void setUp ( ) { try { class . forName ( "com.mysql.jdbc.Driver" ) ; } catch ( ClassNotFoundException e ) { System . out . println ( "MySQL JDBC Driver not found !!" ) ; return ; } Connection connect = null ; Statement statement = null ; try { connect = DriverManager . getConnection ( "jdbc:mysql://localhost/schoolmate" , "schoolmate" , "schoolmate" ) ; statement = connect . createStatement ( ) ; statement . execute ( "update courses set coursename=\"'><a>link</a>'\" where courseid=5 " ) ; } catch ( SQLException e ) { System . out . printf ( e . toString ( ) ) ; } tester . setBaseUrl ( "http://localhost/schoolmate" ) ; tester . beginAt ( "index.php" ) ; tester . setTextField ( "username" , "simoncelli" ) ; tester . setTextField ( "password" , "1" ) ; tester . submit ( ) ; }
tr	1	public void add_production ( production prod ) throws internal_error { if ( prod == null || prod . lhs ( ) == null || prod . lhs ( ) . the_symbol ( ) != this ) throw new internal_error ( "Attempt to add invalid production to non terminal production table" ) ; _productions . put ( prod , prod ) ; }
tr	3	protected void pausePlayback ( ) { if ( m_line != null ) { if ( m_status == PLAYING ) { m_line . stop ( ) ; m_status = PAUSED ; notifyEvent ( BasicPlayerEvent . PAUSED , getEncodedStreamPosition ( ) , - 1 , null ) ; m_line . drain ( ) ; } } }
tr	1	public String getFieldName ( ) { return _fieldName ; }
tr	3	private Particle createLandmineParticle ( double theta , Point2D . double pos ) { Particle p = new Particle ( theta , 0.0 , 0.0 , ( Landmine . PARTICLE_LIFE / ( int ) Globals . SLEEP_TIME ) , pos , new Dimension ( 24 , 24 ) , Images . LANDMINE_PARTICLE ) { @ Override public void update ( ) { if ( this . isAlive ( ) ) this . life -- ; } @ Override public void draw ( Graphics2D g2d ) { double x = this . pos . x - ( this . size . width / 2 ) ; double y = this . pos . y - ( this . size . height / 2 ) ; g2d . drawImage ( this . image , ( int ) x , ( int ) y , null ) ; } } ; return p ; }
tr	3	@ Override public Connection getConnection ( ) { try { if ( connection != null && ! connection . isClosed ( ) ) { return connection ; } else { connection = DriverManager . getConnection ( "jdbc:hsqldb:file:" + db + ";shutdown=true" , user , pass ) ; } } catch ( SQLException e ) { e . printStackTrace ( ) ; } return connection ; }
tr	4	public MapIconButton ( ) { super ( ) ; this . setFocusable ( false ) ; this . add ( new MapIconPanel ( true ) ) ; this . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { Block block = LevelEditor . editor . getCurrentBlock ( ) ; if ( block != null ) { MapIconConstructWindow icon = new MapIconConstructWindow ( block ) ; icon . setVisible ( true ) ; } } } ) ; }
tr	5X	public int getPerceptIndex ( String percept ) { if ( percept . equals ( SOLVED ) ) { return ( getPerceptsNumber ( ) - 1 ) ; } else { int [ ] values = new int [ 2 ] ; int k = 0 ; try { StreamTokenizer tokenizer = new StreamTokenizer ( new StringReader ( percept ) ) ; while ( k < 2 && tokenizer . nextToken ( ) != StreamTokenizer . TT_EOF ) { if ( tokenizer . ttype == StreamTokenizer . TT_NUMBER ) { values [ k ] = ( int ) ( tokenizer . nval ) ; k ++ ; } } return values [ 0 ] * DIGITS + values [ 1 ] ; } catch ( Exception e ) { return - 1 ; } } }
tr	1	public void setPrpMoaTipo ( String prpMoaTipo ) { this . prpMoaTipo = prpMoaTipo ; }
tr	3	private String internalReadChunkedString ( int length ) throws IOException { StringBuffer buf = internalReadString ( length ) ; boolean done = false ; while ( ! done ) { int code = readNextCode ( ) ; switch ( code ) { case Codes . STRING_PACKED_LENGTH_START + 0 : case Codes . STRING_PACKED_LENGTH_START + 1 : case Codes . STRING_PACKED_LENGTH_START + 2 : case Codes . STRING_PACKED_LENGTH_START + 3 : case Codes . STRING_PACKED_LENGTH_START + 4 : case Codes . STRING_PACKED_LENGTH_START + 5 : case Codes . STRING_PACKED_LENGTH_START + 6 : case Codes . STRING_PACKED_LENGTH_START + 7 : internalReadStringBuffer ( buf , code - Codes . STRING_PACKED_LENGTH_START ) . toString ( ) ; done = true ; break ; case Codes . STRING : internalReadStringBuffer ( buf , readCount ( ) ) ; done = true ; break ; case Codes . STRING_CHUNK : internalReadStringBuffer ( buf , readCount ( ) ) ; break ; default : throw expected ( "chunked string" , code ) ; } } return buf . toString ( ) ; }
tr	2	public int [ ] getWarps ( ) { return new int [ ] { 0 , 0 , 0 , 0 } ; }
tr	3	public static void findAll ( ) { try { IUTypeDao _dao = getUTypeDao ( ) ; UType _result [ ] = _dao . findAll ( ) ; for ( int i = 0 ; i < _result . length ; i ++ ) { display ( _result [ i ] ) ; } } catch ( Exception _e ) { _e . printStackTrace ( ) ; } }
tr	4	private void persist ( PersistAction persistAction , String successMessage ) { if ( selected != null ) { setEmbeddableKeys ( ) ; try { if ( persistAction != PersistAction . DELETE ) { getFacade ( ) . edit ( selected ) ; } else { getFacade ( ) . remove ( selected ) ; } JsfUtil . addSuccessMessage ( successMessage ) ; } catch ( EJBException ex ) { String msg = "" ; Throwable cause = ex . getCause ( ) ; if ( cause != null ) { msg = cause . getLocalizedMessage ( ) ; } if ( msg . length ( ) > 0 ) { JsfUtil . addErrorMessage ( msg ) ; } else { JsfUtil . addErrorMessage ( ex , ResourceBundle . getBundle ( "/resoruces/Bundle" ) . getString ( "PersistenceErrorOccured" ) ) ; } } catch ( Exception ex ) { Logger . getLogger ( this . getClass ( ) . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; JsfUtil . addErrorMessage ( ex , ResourceBundle . getBundle ( "/resoruces/Bundle" ) . getString ( "PersistenceErrorOccured" ) ) ; } } }
tr	4	private void generateRandomBreakables ( ) { for ( int i = 3 ; i < 12 ; i ++ ) { if ( this . randomNumber ( 0 , 1 ) == 1 ) { this . addBreakable ( i , 1 ) ; } } for ( int i = 3 ; i <= 13 ; i += 2 ) { if ( this . randomNumber ( 0 , 1 ) == 1 ) { this . addBreakable ( i , 2 ) ; } } for ( int i = 3 ; i <= 9 ; i ++ ) { for ( int j = 1 ; j <= 13 ; j += 2 ) { if ( this . randomNumber ( 0 , 1 ) == 1 ) { this . addBreakable ( j , i ) ; } } } for ( int i = 1 ; i <= 11 ; i += 2 ) { if ( this . randomNumber ( 0 , 1 ) == 1 ) { this . addBreakable ( i , 10 ) ; } } for ( int i = 1 ; i <= 11 ; i ++ ) { if ( this . randomNumber ( 0 , 1 ) == 1 ) { this . addBreakable ( i , 11 ) ; } } }
tr	2	public Labels getLabels ( ) { if ( labels == null ) { labels = new Labels ( ) ; } return labels ; }
tr	1	static float fromdBlook ( float a ) { int i = ( int ) ( a * ( ( float ) ( - ( 1 << FROMdB2_SHIFT ) ) ) ) ; return ( i < 0 ) ? 1.f : ( ( i >= ( FROMdB_LOOKUP_SZ << FROMdB_SHIFT ) ) ? 0.f : FROMdB_LOOKUP [ i >>> FROMdB_SHIFT ] * FROMdB2_LOOKUP [ i & FROMdB2_MASK ] ) ; }
tr	4	public MainMenuView ( Checkmate c ) { super ( c ) ; JLabel titleLabel = new JLabel ( "Checkmate 3000 Network AI Edition" ) ; titleLabel . setForeground ( Color . WHITE ) ; titleLabel . setFont ( new Font ( Font . SANS_SERIF , Font . PLAIN , 42 ) ) ; titleLabel . setSize ( 680 , 50 ) ; titleLabel . setLocation ( c . getWidth ( ) / 2 - titleLabel . getWidth ( ) / 2 , ( int ) ( c . getHeight ( ) * 0.200 ) ) ; add ( titleLabel ) ; JButton localButton = new JButton ( "Local Game" ) ; localButton . setSize ( 150 , 35 ) ; localButton . setLocation ( c . getWidth ( ) / 2 - localButton . getWidth ( ) / 2 , ( int ) ( c . getHeight ( ) * 0.480 ) ) ; localButton . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent ae ) { myCheckmate . setView ( Checkmate . LOCAL ) ; } } ) ; add ( localButton ) ; JButton hostButton = new JButton ( "Host Game" ) ; hostButton . setSize ( 150 , 35 ) ; hostButton . setLocation ( c . getWidth ( ) / 2 - hostButton . getWidth ( ) / 2 , ( int ) ( c . getHeight ( ) * 0.555 ) ) ; hostButton . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent ae ) { myCheckmate . setView ( Checkmate . HOST ) ; } } ) ; add ( hostButton ) ; JButton joinButton = new JButton ( "Join Game" ) ; joinButton . setSize ( 150 , 35 ) ; joinButton . setLocation ( c . getWidth ( ) / 2 - joinButton . getWidth ( ) / 2 , ( int ) ( c . getHeight ( ) * 0.630 ) ) ; joinButton . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent ae ) { myCheckmate . setView ( Checkmate . JOIN ) ; } } ) ; add ( joinButton ) ; JButton logButton = new JButton ( "View Logged Game" ) ; logButton . setSize ( 150 , 35 ) ; logButton . setLocation ( c . getWidth ( ) / 2 - logButton . getWidth ( ) / 2 , ( int ) ( c . getHeight ( ) * 0.705 ) ) ; logButton . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent ae ) { myCheckmate . setView ( Checkmate . LOG ) ; } } ) ; add ( logButton ) ; JButton quitButton = new JButton ( "Quit Game" ) ; quitButton . setSize ( 150 , 35 ) ; quitButton . setLocation ( c . getWidth ( ) / 2 - quitButton . getWidth ( ) / 2 , ( int ) ( c . getHeight ( ) * 0.780 ) ) ; quitButton . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent ae ) { int wantsExit = JOptionPane . showConfirmDialog ( myCheckmate , "Are you sure you want to exit the program?" , "Exit Program?" , JOptionPane . YES_NO_OPTION ) ; if ( wantsExit == JOptionPane . YES_OPTION ) { System . exit ( 0 ) ; } } } ) ; add ( quitButton ) ; }
tr	4	public void cleanAllHttpDatas ( ) { for ( HttpRequest request : requestFileDeleteMap . keySet ( ) ) { List < HttpData > fileToDelete = requestFileDeleteMap . get ( request ) ; if ( fileToDelete != null ) { for ( HttpData data : fileToDelete ) { data . delete ( ) ; } fileToDelete . clear ( ) ; } requestFileDeleteMap . remove ( request ) ; } }
tr	5X	protected void doNext ( ) { doStop ( ) ; runButton . setEnabled ( false ) ; stopButton . setEnabled ( true ) ; logArea . setText ( "" ) ; logArea . setCaretPosition ( 0 ) ; int selectedIndex = demosBox . getSelectedIndex ( ) ; if ( selectedIndex >= 0 ) { selectedIndex ++ ; setTitle ( ( String ) demosBox . getSelectedItem ( ) ) ; final String args = selectedIndex < demosBox . getItemCount ( ) - 1 ? reduceName ( DefaultActorTest . getTestNames ( ) [ selectedIndex ] ) : "*" ; Thread t = new Thread ( new Runnable ( ) { @ Override public void run ( ) { try { if ( "*" . equals ( args ) ) { for ( String name : DefaultActorTest . getTestNames ( ) ) { doStart ( ) ; setTitle ( name ) ; runTest ( reduceName ( name ) ) ; doStop ( ) ; try { Thread . sleep ( 10 * 1000 ) ; } catch ( InterruptedException e ) { break ; } } } else { doStart ( ) ; runTest ( args ) ; doStop ( ) ; } } finally { SwingUtilities . invokeLater ( new Runnable ( ) { public void run ( ) { stopButton . setEnabled ( false ) ; runButton . setEnabled ( true ) ; messageLine . setText ( "Done" ) ; } } ) ; } } } ) ; t . setDaemon ( true ) ; t . start ( ) ; } }
tr	2	public static void input ( float delta ) { if ( nextScene != null ) { updateLoadScene ( ) ; } rootNode . input ( delta ) ; }
tr	2	public static void pairsAndValues ( ) { int [ ] arr = { 1 , 2 , 3 } ; for ( int i = 0 ; i < arr . length ; i ++ ) for ( int j = 0 ; j < arr . length ; j ++ ) { System . out . print ( "Value : " + ( arr [ i ] + arr [ j ] ) ) ; System . out . println ( "  Pair : " + arr [ i ] + " and " + arr [ j ] ) ; } }
tr	4	public String executeRequest ( ) throws IOException { setSigningMethod ( auth ) ; String signingString = getSigningString ( customer_id ) ; String signature ; String url_output = "" ; StringBuffer full_url = new StringBuffer ( base ) . append ( resource ) ; if ( params . size ( ) > 0 ) { full_url . append ( "?" ) ; int i = 0 ; for ( String key : params . keySet ( ) ) { if ( ++ i != 0 ) { full_url . append ( "&" ) ; } full_url . append ( URLEncoder . encode ( key , "UTF-8" ) ) . append ( "=" ) . append ( URLEncoder . encode ( params . get ( key ) , "UTF-8" ) ) ; } } url = new URL ( full_url . toString ( ) ) ; try { signature = encode ( signingString , secret_key ) ; } catch ( SignatureException e ) { System . err . println ( "Error signing request " + e . getMessage ( ) ) ; return null ; } String auth_header = "TSA " + customer_id + ":" + signature ; connection = ( HttpURLConnection ) url . openConnection ( ) ; connection . setConnectTimeout ( connectTimeout ) ; connection . setReadTimeout ( readTimeout ) ; connection . setRequestProperty ( "Authorization" , auth_header ) ; setTLSProtocol ( ) ; if ( post ) { connection . setRequestProperty ( "Content-Length" , Integer . toString ( body . length ( ) ) ) ; } for ( String key : ts_headers . keySet ( ) ) { connection . setRequestProperty ( key , ts_headers . get ( key ) ) ; } for ( String key : headers . keySet ( ) ) { connection . setRequestProperty ( key , headers . get ( key ) ) ; } if ( post ) { connection . setDoOutput ( true ) ; DataOutputStream wr = new DataOutputStream ( connection . getOutputStream ( ) ) ; wr . writeBytes ( body ) ; wr . flush ( ) ; wr . close ( ) ; } int response = connection . getResponseCode ( ) ; BufferedReader in ; try { InputStream isr = ( response == 200 ) ? connection . getInputStream ( ) : connection . getErrorStream ( ) ; in = new BufferedReader ( new InputStreamReader ( isr ) ) ; String urlReturn ; while ( ( urlReturn = in . readLine ( ) ) != null ) { url_output += urlReturn ; } in . close ( ) ; } catch ( IOException e ) { System . err . println ( "IOException while reading from input stream " + e . getMessage ( ) ) ; throw new RuntimeException ( e ) ; } return url_output ; }
tr	5X	private Vector [ ] buildHeaders ( JPanel panel , ColumnSet set , boolean blankOut , Vector [ ] refLabels ) { int numParents = set . getNumParents ( ) ; int numChildren = getNumChildren ( set ) ; Vector [ ] headers = new Vector [ 2 ] ; headers [ 0 ] = new Vector ( ) ; for ( int i = 0 ; i < set . getNumParents ( ) ; i ++ ) { ColumnParent parent = set . getParent ( i ) ; JLabel columnLabel = new JLabel ( ) ; int numColumns = parent . getNumChildren ( ) ; String text = parent . getText ( ) ; Color foreground = parent . getColor ( ) ; if ( blankOut ) { foreground = columnLabel . getBackground ( ) ; columnLabel . setMaximumSize ( new Dimension ( 32000 , 2 ) ) ; if ( refLabels != null ) { JLabel refLabel = ( JLabel ) refLabels [ 0 ] . get ( i ) ; columnLabel . setPreferredSize ( new Dimension ( refLabel . getPreferredSize ( ) . width , 2 ) ) ; } } columnLabel . setText ( text ) ; columnLabel . setForeground ( foreground ) ; columnLabel . setHorizontalAlignment ( SwingConstants . CENTER ) ; GridBagConstraints constraints = getParentConstraints ( numColumns , ( i == ( numParents - 1 ) ) ) ; gridbag . setConstraints ( columnLabel , constraints ) ; panel . add ( columnLabel ) ; headers [ 0 ] . add ( columnLabel ) ; } int index = 0 ; headers [ 1 ] = new Vector ( ) ; for ( int i = 0 ; i < set . getNumParents ( ) ; i ++ ) { ColumnParent parent = set . getParent ( i ) ; int numColumns = parent . getNumChildren ( ) ; for ( int j = 0 ; j < numColumns ; j ++ ) { ColumnChild child = parent . getChild ( j ) ; JLabel columnLabel = new JLabel ( ) ; String text = child . getText ( ) ; Color foreground = child . getColor ( ) ; if ( blankOut ) { foreground = columnLabel . getBackground ( ) ; columnLabel . setMaximumSize ( new Dimension ( 32000 , 2 ) ) ; if ( refLabels != null ) { JLabel refLabel = ( JLabel ) refLabels [ 1 ] . get ( index ) ; columnLabel . setPreferredSize ( new Dimension ( refLabel . getPreferredSize ( ) . width , 2 ) ) ; } } columnLabel . setText ( text ) ; columnLabel . setForeground ( foreground ) ; columnLabel . setHorizontalAlignment ( SwingConstants . CENTER ) ; GridBagConstraints constraints = getChildConstraints ( index == ( numChildren - 1 ) ) ; gridbag . setConstraints ( columnLabel , constraints ) ; panel . add ( columnLabel ) ; headers [ 1 ] . add ( columnLabel ) ; index ++ ; } } return headers ; }
tr	3	public MenuRetornarPartida ( ) { super ( "Menu Partida" , new ArrayList < ItemMenu > ( ) { private static final long serialVersionUID = - 2202065529317389240 ; { add ( new ItemMenu ( "REINICIAR" , "Retorna uma partida" ) ) ; add ( new ItemMenu ( "APAGAR" , "Apagar uma partida" ) ) ; add ( new ItemMenu ( "RETORNAR" , "Retornar ao menu principal" ) ) ; } } ) ; }
tr	3	@ Override public void endElement ( String uri , String localName , String qName ) throws SAXException { PlayXMLEnum playXMLEnum = PlayXMLEnum . valueOf ( qName . toUpperCase ( ) ) ; if ( playXMLEnum == PlayXMLEnum . DATE ) { int curId ; synchronized ( XMLPlaysHandler . class ) { curId = ++ dateId ; } currentPlay . addDate ( curId , parseTime ( currPlayDate ) ) ; } else if ( playXMLEnum == PlayXMLEnum . PLAY ) { addPlay ( currentPlay ) ; } else if ( playXMLEnum == PlayXMLEnum . DESCRIPTION ) { currentPlay . setDescription ( currentDesc . toString ( ) ) ; } currPlayEnum = null ; }
tr	1	private static String trad4 ( TreeNode tree ) { return tree . getStringValue ( ) ; }
tr	5X	public static ArrayList < ArrayList < Integer >> fourSum ( int [ ] num , int target ) { ArrayList < ArrayList < Integer >> result = new ArrayList < ArrayList < Integer >> ( ) ; Arrays . sort ( num ) ; for ( int i = 0 ; i <= num . length - 4 ; i ++ ) { if ( i > 0 && num [ i ] == num [ i - 1 ] ) continue ; for ( int j = i + 1 ; j <= num . length - 3 ; j ++ ) { if ( j > i + 1 && num [ j ] == num [ j - 1 ] ) continue ; int l = j + 1 ; int r = num . length - 1 ; while ( l < r ) { int sum = num [ i ] + num [ j ] + num [ l ] + num [ r ] - target ; if ( sum > 0 ) { r -- ; } else if ( sum < 0 ) { l ++ ; } else { ArrayList < Integer > newList = new ArrayList < Integer > ( ) ; newList . add ( num [ i ] ) ; newList . add ( num [ j ] ) ; newList . add ( num [ l ] ) ; newList . add ( num [ r ] ) ; result . add ( newList ) ; l ++ ; r -- ; while ( l < r && num [ l ] == num [ l - 1 ] ) { l ++ ; } while ( l < r && num [ r ] == num [ r + 1 ] ) { r -- ; } } } } } return result ; }
tr	5X	public Subscription ( Socket in_sock , iKPIC_subscribeHandler2 hand ) { final iKPIC_subscribeHandler2 f_eh = hand ; final Socket ft_kpSocket = in_sock ; InputStream reader = null ; try { reader = in_sock . getInputStream ( ) ; } catch ( IOException e2 ) { e2 . printStackTrace ( ) ; } final BufferedReader ft_in = new BufferedReader ( new InputStreamReader ( reader ) ) ; System . out . println ( "Subscription: going to start thread" ) ; Thread eventThread = new Thread ( ) { public void run ( ) { SSAP_XMLTools xmlTools = new SSAP_XMLTools ( null , null , null ) ; String msg_event = "" ; String restOfTheMessage = "" ; int buffsize = 4 * 1024 ; StringBuilder builder = new StringBuilder ( ) ; char [ ] buffer = new char [ buffsize ] ; int charRead = 0 ; try { while ( ( ( charRead = ft_in . read ( buffer , 0 , buffer . length ) ) != ( - 1 ) ) || ( ! restOfTheMessage . isEmpty ( ) ) ) { if ( ! restOfTheMessage . equals ( "" ) ) { builder . append ( restOfTheMessage ) ; restOfTheMessage = "" ; } if ( charRead != - 1 ) { builder . append ( buffer , 0 , charRead ) ; } msg_event = builder . toString ( ) ; if ( msg_event . contains ( "<SSAP_message>" ) && msg_event . contains ( "</SSAP_message>" ) ) { int index = msg_event . indexOf ( "</SSAP_message>" ) + 15 ; restOfTheMessage = msg_event . substring ( index ) ; msg_event = msg_event . substring ( 0 , index ) ; String subID = xmlTools . getSubscriptionID ( msg_event ) ; if ( xmlTools . isUnSubscriptionConfirmed ( msg_event ) ) { f_eh . kpic_UnsubscribeEventHandler ( subID ) ; return ; } else { String indSequence = xmlTools . getSSAPmsgIndicationSequence ( msg_event ) ; if ( xmlTools . isRDFNotification ( msg_event ) ) { Vector < Vector < String >> triples_n = new Vector < Vector < String >> ( ) ; triples_n = xmlTools . getNewResultEventTriple ( msg_event ) ; Vector < Vector < String >> triples_o = new Vector < Vector < String >> ( ) ; triples_o = xmlTools . getObsoleteResultEventTriple ( msg_event ) ; f_eh . kpic_RDFEventHandler ( triples_n , triples_o , indSequence , subID ) ; } else { SSAP_sparql_response resp_new = xmlTools . get_SPARQL_indication_new_results ( msg_event ) ; SSAP_sparql_response resp_old = xmlTools . get_SPARQL_indication_obsolete_results ( msg_event ) ; f_eh . kpic_SPARQLEventHandler ( resp_new , resp_old , indSequence , subID ) ; } if ( restOfTheMessage . contains ( "<SSAP_message>" ) && restOfTheMessage . contains ( "</SSAP_message>" ) ) { String test = restOfTheMessage . substring ( 0 , restOfTheMessage . indexOf ( "</SSAP_message>" ) + 15 ) ; if ( xmlTools . isUnSubscriptionConfirmed ( test ) ) { System . out . println ( "I should never print this please check" ) ; return ; } } buffer = new char [ buffsize ] ; charRead = 0 ; msg_event = "" ; builder = new StringBuilder ( ) ; } } } try { System . out . println ( "I should not go here untili unsubscribe" ) ; ft_in . close ( ) ; ft_kpSocket . close ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; f_eh . kpic_ExceptionEventHandler ( e ) ; } } catch ( Exception e ) { e . printStackTrace ( ) ; f_eh . kpic_ExceptionEventHandler ( e ) ; } } } ; eventThread . start ( ) ; }
tr	3	@ Override public void delete ( TypeAttribute typeAttribute ) { Session session = null ; try { session = HibernateUtil . getSessionFactory ( ) . openSession ( ) ; session . beginTransaction ( ) ; session . delete ( typeAttribute ) ; session . getTransaction ( ) . commit ( ) ; } catch ( Exception e ) { System . err . println ( "\u041E\u0448\u0438\u0431\u043A\u0430 \u043F\u0440\u0438 \u0443\u0434\u0430\u043B\u0435\u043D\u0438\u0438" + e . getMessage ( ) ) ; } finally { if ( session != null && session . isOpen ( ) ) { session . close ( ) ; } } }
tr	1	public void setYear ( int year ) { this . year = year ; }
tr	4	public ArrayList < Species > sortSpecies ( ArrayList < Species > list ) { Species temp = null ; for ( int i = 0 ; i < list . size ( ) ; i ++ ) { for ( int j = 0 ; j < list . size ( ) - 1 ; j ++ ) { if ( list . get ( j ) . compareTo ( list . get ( j + 1 ) ) > 0 ) { temp = list . get ( j ) ; list . set ( j , list . get ( j + 1 ) ) ; list . set ( j + 1 , temp ) ; } } } return list ; }
tr	5X	private boolean r_prelude ( ) { int v_1 ; int v_2 ; int v_3 ; int v_4 ; int v_5 ; B_Y_found = false ; v_1 = cursor ; lab0 : do { bra = cursor ; if ( ! ( eq_s ( 1 , "'" ) ) ) { break lab0 ; } ket = cursor ; slice_del ( ) ; } while ( false ) ; cursor = v_1 ; v_2 = cursor ; lab1 : do { bra = cursor ; if ( ! ( eq_s ( 1 , "y" ) ) ) { break lab1 ; } ket = cursor ; slice_from ( "Y" ) ; B_Y_found = true ; } while ( false ) ; cursor = v_2 ; v_3 = cursor ; lab2 : do { replab3 : while ( true ) { v_4 = cursor ; lab4 : do { golab5 : while ( true ) { v_5 = cursor ; lab6 : do { if ( ! ( in_grouping ( g_v , 97 , 121 ) ) ) { break lab6 ; } bra = cursor ; if ( ! ( eq_s ( 1 , "y" ) ) ) { break lab6 ; } ket = cursor ; cursor = v_5 ; break golab5 ; } while ( false ) ; cursor = v_5 ; if ( cursor >= limit ) { break lab4 ; } cursor ++ ; } slice_from ( "Y" ) ; B_Y_found = true ; continue replab3 ; } while ( false ) ; cursor = v_4 ; break replab3 ; } } while ( false ) ; cursor = v_3 ; return true ; }
tr	2	public static String joinPretty ( byte [ ] bytes ) { F < byte , String > f = new PrettyF ( ) ; StringBuffer buffer = new StringBuffer ( bytes . length * 2 ) ; if ( bytes . length == 0 ) { return "" ; } buffer . append ( f . f ( bytes [ 0 ] ) ) ; int bytesLength = bytes . length ; for ( int i = 1 ; i < bytesLength ; i ++ ) { byte b = bytes [ i ] ; buffer . append ( "  " ) . append ( f . f ( b ) ) ; } return buffer . toString ( ) ; }
tr	3	public String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; int current = first ; while ( current != last ) { sb . append ( arr [ current ] . toString ( ) + " " ) ; if ( ++ current >= arr . length ) { current = 0 ; } } return sb . toString ( ) ; }
tr	4	public void addConnection ( Player player , Packet00Login packet ) { boolean alreadyConnected = false ; for ( Player p : connectedPlayers ) { if ( player . getName ( ) . equalsIgnoreCase ( p . getName ( ) ) ) { if ( p . getIP ( ) == null ) { p . setIP ( player . getIP ( ) ) ; } if ( p . getPort ( ) == - 1 ) { p . setPort ( player . getPort ( ) ) ; } alreadyConnected = true ; } else { sendData ( packet . getData ( ) , p . getIP ( ) , p . getPort ( ) ) ; String color = " " ; String race = " " ; String weapon = " " ; if ( p instanceof Human ) race = "human" ; else if ( p instanceof Cyborg ) race = "cyborg" ; if ( p . getColor ( ) != null ) color = p . getColor ( ) ; if ( p . getInHand ( ) instanceof Sword ) weapon = "sword" ; else if ( p . getInHand ( ) instanceof Bow ) weapon = "bow" ; Packet00Login oldPlayerPacket = new Packet00Login ( p . getName ( ) , race , color , weapon ) ; sendData ( oldPlayerPacket . getData ( ) , player . getIP ( ) , player . getPort ( ) ) ; } } if ( ! alreadyConnected ) { connectedPlayers . add ( player ) ; } }
tr	5X	private boolean r_prelude ( ) { int v_1 ; int v_2 ; int v_3 ; replab0 : while ( true ) { v_1 = cursor ; lab1 : do { golab2 : while ( true ) { v_2 = cursor ; lab3 : do { if ( ! ( in_grouping ( g_v , 97 , 259 ) ) ) { break lab3 ; } bra = cursor ; lab4 : do { v_3 = cursor ; lab5 : do { if ( ! ( eq_s ( 1 , "u" ) ) ) { break lab5 ; } ket = cursor ; if ( ! ( in_grouping ( g_v , 97 , 259 ) ) ) { break lab5 ; } slice_from ( "U" ) ; break lab4 ; } while ( false ) ; cursor = v_3 ; if ( ! ( eq_s ( 1 , "i" ) ) ) { break lab3 ; } ket = cursor ; if ( ! ( in_grouping ( g_v , 97 , 259 ) ) ) { break lab3 ; } slice_from ( "I" ) ; } while ( false ) ; cursor = v_2 ; break golab2 ; } while ( false ) ; cursor = v_2 ; if ( cursor >= limit ) { break lab1 ; } cursor ++ ; } continue replab0 ; } while ( false ) ; cursor = v_1 ; break replab0 ; } return true ; }
tr	3	private ArrayList < AtomExecutableCommand > populateExecutableCommandList ( String serverId , ArrayList < AtomExecutableCommand > commandList ) { AtomExecutableCommand _commandDet ; ArrayList < AtomExecutableCommand > _commandList ; int index = 0 ; int _countExecutables ; _commandList = new ArrayList < AtomExecutableCommand > ( ) ; _countExecutables = commandList . size ( ) ; while ( _countExecutables > index ) { _commandDet = commandList . get ( index ) ; if ( serverId . equals ( _commandDet . getServerID ( ) ) ) { _commandList . add ( _commandDet ) ; } index ++ ; } return _commandList ; }
tr	5X	public void insertAndIndexDocument ( Document doc ) throws IOException , ClassNotFoundException { Node currentNode = null ; Node previousNode = null ; int sentenceNumber = 0 ; int wordNumber = 0 ; Transaction tx = graphDb . beginTx ( ) ; try { ArrayList < Sentence > sentences = doc . getSentences ( ) ; for ( Sentence sentence : sentences ) { wordNumber = 0 ; ArrayList < Word > words = sentence . getWords ( ) ; for ( Word word : words ) { currentNode = findNodeByProperty ( Neo4jNode . WORD_PROPERTY , word . getContent ( ) ) ; if ( currentNode == null ) { Neo4jNode newNode = new Neo4jNode ( word . getContent ( ) ) ; ArrayList < String > documentEntity = new ArrayList < String > ( ) ; documentEntity . add ( "1" ) ; documentEntity . add ( String . valueOf ( sentenceNumber ) + "_" + String . valueOf ( wordNumber ) ) ; newNode . addToDocumentTable ( doc . getId ( ) , documentEntity ) ; insertAndIndexNode ( newNode ) ; currentNode = findNodeByProperty ( Neo4jNode . WORD_PROPERTY , word . getContent ( ) ) ; } else { Neo4jNode existingNode = convertToNeo4jNode ( currentNode ) ; if ( existingNode . isInDocumentTable ( doc . getId ( ) ) ) { ArrayList < String > documentEntity = existingNode . getDocumentEntity ( doc . getId ( ) ) ; int tf = Integer . parseInt ( documentEntity . get ( 0 ) ) + 1 ; documentEntity . set ( 0 , String . valueOf ( tf ) ) ; documentEntity . add ( String . valueOf ( sentenceNumber ) + "_" + String . valueOf ( wordNumber ) ) ; existingNode . addToDocumentTable ( doc . getId ( ) , documentEntity ) ; } else { ArrayList < String > documentEntity = new ArrayList < String > ( ) ; documentEntity . add ( "1" ) ; documentEntity . add ( String . valueOf ( sentenceNumber ) + "_" + String . valueOf ( wordNumber ) ) ; existingNode . addToDocumentTable ( doc . getId ( ) , documentEntity ) ; } modifyAndIndexNode ( existingNode , currentNode ) ; currentNode = findNodeByProperty ( Neo4jNode . WORD_PROPERTY , word . getContent ( ) ) ; } if ( currentNode != null && previousNode != null && ! doesRelationsExist ( previousNode , currentNode , "document_" + doc . getId ( ) ) ) { createRelationship ( previousNode , currentNode , "document_" + doc . getId ( ) ) ; } previousNode = currentNode ; wordNumber ++ ; } sentenceNumber ++ ; } tx . success ( ) ; } finally { tx . finish ( ) ; } }
tr	4	private void carregaPreuTipusHabitacions ( ) { String [ ] nomsHotels = { "Palace" , "Hilton" , "Metropolitan" , "Arts" , "Catalunya" , "Pensi\u00F3n Pepe" , "Bonjour" , "Oulala" } ; String [ ] nomsTipus = { "Individual" , "Doble" , "Matrimoni" } ; float [ ] preus = { 100 , 200 , 250 } ; for ( int i = 0 ; i < nomsHotels . length ; ++ i ) { for ( int j = 0 ; j < nomsTipus . length ; ++ j ) { PreuTipusHabitacio pth = new PreuTipusHabitacio ( ) ; pth . setId ( new PreuTipusHabitacioId ( nomsHotels [ i ] , nomsTipus [ j ] ) ) ; pth . setPreu ( preus [ j ] ) ; if ( j == 0 ) { AbsoluteDiscountPreuStrategy adps = new AbsoluteDiscountPreuStrategy ( ) ; adps . setId ( new PreuTipusHabitacioId ( nomsHotels [ i ] , nomsTipus [ j ] ) ) ; adps . setDescompte ( 30 ) ; pth . setStrategy ( adps ) ; session . saveOrUpdate ( pth ) ; session . saveOrUpdate ( adps ) ; } else { PercentDiscountPreuStrategy pdps = new PercentDiscountPreuStrategy ( ) ; pdps . setId ( new PreuTipusHabitacioId ( nomsHotels [ i ] , nomsTipus [ j ] ) ) ; pdps . setPerc ( 0.7F ) ; pth . setStrategy ( pdps ) ; session . saveOrUpdate ( pth ) ; session . saveOrUpdate ( pdps ) ; } } } }
tr	5X	private void computerNextTurn ( ) { if ( ! getGame ( ) . gameWon ( ) ) { new Thread ( new Runnable ( ) { public void run ( ) { try { Thread . sleep ( ANIMATION_TIME ) ; } catch ( Exception e ) { } if ( ! getGame ( ) . getPlayer ( getGame ( ) . getPlayerTurn ( ) % TOTAL_PLAYERS ) . getPlayerType ( ) . equals ( "Human" ) ) { int playerTurn = getGame ( ) . getPlayerTurn ( ) ; int x ; if ( ( getGame ( ) . getPlayerTurn ( ) % TOTAL_PLAYERS == PLAYER_ONE && m_playerOneType == "Computer: Easy" ) || ( getGame ( ) . getPlayerTurn ( ) % TOTAL_PLAYERS == PLAYER_TWO && m_playerTwoType == "Computer: Easy" ) ) { ConnectFourEasyComputerPlayer player = ( ConnectFourEasyComputerPlayer ) getGame ( ) . getPlayer ( playerTurn % TOTAL_PLAYERS ) ; x = ( int ) player . makeAIMove ( getGame ( ) . getBoard ( ) ) . getX ( ) ; } else { ConnectFourHardComputerPlayer player = ( ConnectFourHardComputerPlayer ) getGame ( ) . getPlayer ( playerTurn % TOTAL_PLAYERS ) ; x = ( int ) player . makeAIMove ( getGame ( ) . getBoard ( ) ) . getX ( ) ; } performMove ( x ) ; getGame ( ) . incrementTurn ( ) ; } } } ) . start ( ) ; } }
tr	5X	private void drawQuitButton ( ) { Box tempBox = new Box ( BoxLayout . X_AXIS ) ; statBox . add ( tempBox ) ; quit = new KulButton ( s ( "quit" ) ) ; quit . setPreferredSize ( new Dimension ( 140 , 50 ) ) ; quit . setMaximumSize ( new Dimension ( 140 , 50 ) ) ; quit . setForeground ( Color . WHITE ) ; quit . addMouseListener ( new MouseAdapter ( ) { @ Override public void mouseClicked ( MouseEvent e ) { if ( SwingUtilities . isLeftMouseButton ( e ) && ! bestScorePanel . isActive ( ) ) { String [ ] options = { s ( "yes" ) , s ( "no" ) } ; int choice = JOptionPane . showOptionDialog ( MainPanel . this , s ( "quitConfirm" ) , s ( "quit" ) , JOptionPane . YES_NO_OPTION , JOptionPane . WARNING_MESSAGE , null , options , 0 ) ; if ( choice == JOptionPane . OK_OPTION ) { main . Main . closeWindow ( ) ; } } } } ) ; tempBox . add ( quit ) ; }
tr	4	public void filtrarContratosActivos ( ) { try { String filtro = panelAdminContratos . getTextoFiltro ( ) ; int tipoFiltro = panelAdminContratos . getTipoFiltro ( ) ; if ( ! filtro . trim ( ) . equals ( "" ) ) { if ( tipoFiltro == Contrato . FILTRO_ID_DUENIO || tipoFiltro == Contrato . FILTRO_ID_HABITANTE || tipoFiltro == Contrato . FILTRO_ID_RESPONSABLE ) { long id = long . parseLong ( filtro ) ; ArrayList < Contrato > lista = Contrato . getListaContratosFiltro ( Contrato . CONTRATOS_ACTIVOS , tipoFiltro , id , "" ) ; panelAdminContratos . setListaContratos ( lista ) ; } else if ( tipoFiltro == Contrato . FILTRO_NOMBRE_DUENIO || tipoFiltro == Contrato . FILTRO_NOMBRE_HABITANTE || tipoFiltro == Contrato . FILTRO_NOMBRE_RESPONSABLE ) { ArrayList < Contrato > lista = Contrato . getListaContratosFiltro ( Contrato . CONTRATOS_ACTIVOS , tipoFiltro , - 1 , filtro ) ; panelAdminContratos . setListaContratos ( lista ) ; } } else { cargarContratosActivos ( ) ; } } catch ( NumberFormatException ex ) { JOptionPane . showMessageDialog ( panelAdminContratos , "Error num\u00E9rico al buscar por el n\u00FAmero de id" , "Error num\u00E9rico" , JOptionPane . ERROR_MESSAGE ) ; } }
tr	4	public PaymentDialog ( Member member , ClassType ct , String message , int flag ) { messageTextArea . setText ( message ) ; globalMember = member ; globalClassType = ct ; globalFlag = flag ; makePaymentButton = new JButton ( "Make Payment" ) ; makePaymentButton . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent arg0 ) { Common . makePayment ( paymentTypeList . getSelectedValue ( ) , globalMember , ( Date ) utilDateModel . getValue ( ) , getPaymentAmount ( ) ) ; updatePaymentStatus ( globalMember , globalClassType ) ; dispose ( ) ; new PaymentDialog ( globalMember , globalClassType , "Payment made for " + globalMember . getName ( ) + "\n of " + getPaymentAmount ( ) + " for " + paymentTypeList . getSelectedValue ( ) . getPaymentTypeName ( ) + "\n up to date: " + ( ( Date ) utilDateModel . getValue ( ) ) . toString ( ) , globalFlag ) ; } } ) ; makePaymentButton . setEnabled ( false ) ; exitButton = new JButton ( "Exit" ) ; exitButton . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { dispose ( ) ; if ( globalFlag == 0 ) new MemberCheckInInterface ( globalClassType ) ; } } ) ; BufferedImage tkdIcon = CommonUI . getTkdIcon ( ) ; BufferedImage skyIcon = CommonUI . getSkyIcon ( ) ; BufferedImage kickIcon = CommonUI . getKickIcon ( ) ; Image img = null ; switch ( ct ) { case TAEKWONDO : img = new ImageIcon ( tkdIcon ) . getImage ( ) ; break ; case SKYBOXING : img = new ImageIcon ( skyIcon ) . getImage ( ) ; break ; case KICKBOXING : img = new ImageIcon ( kickIcon ) . getImage ( ) ; break ; case OTHER : img = new ImageIcon ( tkdIcon ) . getImage ( ) ; default : img = new ImageIcon ( tkdIcon ) . getImage ( ) ; } setIconImage ( img ) ; this . setTitle ( "Enter Payment for " + member . getName ( ) ) ; utilDateModel . addChangeListener ( new ChangeListener ( ) { @ Override public void stateChanged ( ChangeEvent arg0 ) { System . out . println ( "DateModel changed" ) ; setDateSelected ( ) ; if ( paymentAmountSelected && dateSelected ) { makePaymentButton . setEnabled ( true ) ; } } } ) ; panel . add ( paymentToPanel , BorderLayout . CENTER ) ; paymentTypeList . setListData ( Common . getPaymentTypes ( ct ) . toArray ( new PaymentType [ 1 ] ) ) ; paymentTypeList . addListSelectionListener ( new ListSelectionListener ( ) { @ Override public void valueChanged ( ListSelectionEvent arg0 ) { JList < PaymentType > tempList = ( JList < PaymentType > ) arg0 . getSource ( ) ; PaymentType pt = tempList . getSelectedValue ( ) ; paymentAmountTextField . setText ( String . format ( "%9.2f" , pt . getPaymentAmount ( ) ) ) ; setPaymentAmountFieldSelected ( ) ; if ( paymentAmountSelected && dateSelected ) { makePaymentButton . setEnabled ( true ) ; } } } ) ; listPanel . add ( paymentTypeList ) ; panel . add ( listPanel , BorderLayout . WEST ) ; paymentAmountPanel . add ( paymentAmountLabel ) ; paymentAmountPanel . add ( paymentAmountTextField ) ; buttonPanel . add ( paymentAmountPanel , BorderLayout . NORTH ) ; buttonPanel . add ( makePaymentButton , BorderLayout . WEST ) ; buttonPanel . add ( exitButton , BorderLayout . SOUTH ) ; panel . add ( buttonPanel , BorderLayout . SOUTH ) ; paymentStatusPanel . add ( paymentStatusTextArea , BorderLayout . NORTH ) ; paymentStatusPanel . add ( messageTextArea , BorderLayout . SOUTH ) ; updatePaymentStatus ( member , ct ) ; panel . add ( paymentStatusPanel , BorderLayout . EAST ) ; this . getContentPane ( ) . add ( panel ) ; this . setSize ( CommonUI . FULLSCREEN ) ; this . setVisible ( true ) ; }
tr	5X	public static void main ( String [ ] args ) { r1 = new Thread ( ) { public void run ( ) { while ( i < 100 ) { if ( i % 10 == 0 ) { if ( r2 . isAlive ( ) ) r2 . notify ( ) ; else r2 . run ( ) ; } i ++ ; } r1 . interrupt ( ) ; r2 . interrupt ( ) ; } } ; r2 = new Thread ( ) { public void run ( ) { System . out . println ( i ) ; try { if ( r2 . isAlive ( ) ) { r2 . wait ( ) ; r1 . notify ( ) ; } } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } } } ; r1 . run ( ) ; }
tr	5X	public static void main ( String [ ] args ) throws Exception { int e1TotalWins = 0 , totalDraws = 0 , e1TotalLoses = 0 , e1WinAsPlayer1 = 0 , e1DrawAsPlayer1 = 0 , e1LoseAsPlayer1 = 0 , e1WinAsPlayer2 = 0 , e1DrawAsPlayer2 = 0 , e1LoseAsPlayer2 = 0 , e2TotalWins = 0 , e2TotalLoses = 0 , e2WinAsPlayer1 = 0 , e2DrawAsPlayer1 = 0 , e2LoseAsPlayer1 = 0 , e2WinAsPlayer2 = 0 , e2DrawAsPlayer2 = 0 , e2LoseAsPlayer2 = 0 ; Board boardTest1 = null ; Board initialPositionTest1 = null ; Board [ ] boardCollectionTest1 = null ; int currentIndexTest1 = 0 ; int numberOfMoveTest1 = 0 ; Player [ ] playersTest1 = { new Player ( "BoltzmannH5" , "BoltzmannH5" , "w" , 100000 ) , new Player ( "Charles_2" , "Charles_2" , "b" , 0 ) } ; int totalNumberOfMovesTest1 = 46 ; try { FileInputStream fisTest1 = new FileInputStream ( "50_boards_3.sav" ) ; ObjectInputStream oisTest1 = new ObjectInputStream ( fisTest1 ) ; boardCollectionTest1 = ( Board [ ] ) oisTest1 . readObject ( ) ; } catch ( Exception e ) { System . err . println ( "Error" + e . getMessage ( ) ) ; } long startTime = 0 , endTime = 0 ; startTime = System . currentTimeMillis ( ) ; for ( int testIndex = 1 ; testIndex <= 100 ; ++ testIndex ) { System . out . println ( "Test1: " + testIndex + " / 100" ) ; currentIndexTest1 = 0 ; numberOfMoveTest1 = 0 ; Player tmp = playersTest1 [ 0 ] ; playersTest1 [ 0 ] = playersTest1 [ 1 ] ; playersTest1 [ 1 ] = tmp ; if ( testIndex % 2 == 1 ) { boardTest1 = boardCollectionTest1 [ ( Integer ) testIndex / 2 ] ; initialPositionTest1 = boardTest1 . duplicate ( ) ; } else { boardTest1 = initialPositionTest1 . duplicate ( ) ; } while ( numberOfMoveTest1 < totalNumberOfMovesTest1 ) { if ( playersTest1 [ currentIndexTest1 ] . getType ( ) . equals ( "BoltzmannH5" ) ) { Tuple < Integer , Integer > move ; MonteCarloH5Boltzmann mc = new MonteCarloH5Boltzmann ( boardTest1 . duplicate ( ) , playersTest1 [ currentIndexTest1 ] . getColor ( ) , numberOfMoveTest1 , totalNumberOfMovesTest1 ) ; move = mc . uct ( playersTest1 [ currentIndexTest1 ] . getSimulationNumber ( ) ) ; boardTest1 . makeMove ( move , playersTest1 [ currentIndexTest1 ] . getColor ( ) ) ; ++ numberOfMoveTest1 ; currentIndexTest1 = ( currentIndexTest1 + 1 ) % 2 ; } else if ( playersTest1 [ currentIndexTest1 ] . getType ( ) . equals ( "Charles_2" ) ) { Tuple < Integer , Integer > move ; Charles_2 charles = new Charles_2 ( playersTest1 [ currentIndexTest1 ] . getColor ( ) , boardTest1 ) ; move = charles . getMove ( ) ; boardTest1 . makeMove ( move , playersTest1 [ currentIndexTest1 ] . getColor ( ) ) ; ++ numberOfMoveTest1 ; currentIndexTest1 = ( currentIndexTest1 + 1 ) % 2 ; } } String gameOutcome = Rules . calculateScore ( boardTest1 ) ; BufferedWriter outputTest1 = new BufferedWriter ( new FileWriter ( "results_100k_3b_BoltzmannH5vCharles_2.txt" , true ) ) ; outputTest1 . append ( "Match #" + testIndex ) ; outputTest1 . newLine ( ) ; outputTest1 . append ( "Player 1: " + playersTest1 [ 0 ] . getName ( ) + " Player 2: " + playersTest1 [ 1 ] . getName ( ) ) ; outputTest1 . newLine ( ) ; if ( gameOutcome . equals ( "0" ) ) { ++ totalDraws ; outputTest1 . append ( "Result: draw" ) ; outputTest1 . newLine ( ) ; outputTest1 . close ( ) ; if ( playersTest1 [ 0 ] . getName ( ) . equals ( "Charles_2" ) ) { e1DrawAsPlayer1 ++ ; e2DrawAsPlayer2 ++ ; } else { e1DrawAsPlayer2 ++ ; e2DrawAsPlayer1 ++ ; } } else { if ( gameOutcome . equals ( playersTest1 [ 0 ] . getColor ( ) ) ) { outputTest1 . append ( "Result: " + playersTest1 [ 0 ] . getName ( ) + " wins" ) ; if ( playersTest1 [ 0 ] . getName ( ) . equals ( "Charles_2" ) ) { e1TotalWins ++ ; e2TotalLoses ++ ; e1WinAsPlayer1 ++ ; e2LoseAsPlayer2 ++ ; } else { e2TotalWins ++ ; e1TotalLoses ++ ; e2WinAsPlayer1 ++ ; e1LoseAsPlayer2 ++ ; } } else { outputTest1 . append ( "Result: " + playersTest1 [ 1 ] . getName ( ) + " wins" ) ; if ( playersTest1 [ 1 ] . getName ( ) . equals ( "Charles_2" ) ) { e1TotalWins ++ ; e2TotalLoses ++ ; e1WinAsPlayer2 ++ ; e2LoseAsPlayer1 ++ ; } else { e2TotalWins ++ ; e1TotalLoses ++ ; e2WinAsPlayer2 ++ ; e1LoseAsPlayer1 ++ ; } } outputTest1 . newLine ( ) ; outputTest1 . close ( ) ; } } endTime = System . currentTimeMillis ( ) ; BufferedWriter output1Test1 = new BufferedWriter ( new FileWriter ( "results_100k_3b_BoltzmannH5vCharles_2.txt" , true ) ) ; output1Test1 . append ( "========================================" ) ; output1Test1 . newLine ( ) ; output1Test1 . append ( "*Summary (100k) 3-point board (t=2.5)*" ) ; output1Test1 . newLine ( ) ; output1Test1 . append ( "Draw occurred: " + totalDraws ) ; output1Test1 . newLine ( ) ; output1Test1 . append ( "BoltzmannH5 total wins: " + e2TotalWins ) ; output1Test1 . newLine ( ) ; output1Test1 . append ( "Charles_2 total wins: " + e1TotalWins ) ; output1Test1 . newLine ( ) ; output1Test1 . append ( "Play time: " + ( endTime - startTime ) / 1000 + " seconds." ) ; output1Test1 . newLine ( ) ; output1Test1 . append ( "BoltzmannH5 wins as player #1 : " + e2WinAsPlayer1 ) ; output1Test1 . newLine ( ) ; output1Test1 . append ( "BoltzmannH5 wins as player #2 : " + e2WinAsPlayer2 ) ; output1Test1 . newLine ( ) ; output1Test1 . append ( "BoltzmannH5 draws as player #1 : " + e2DrawAsPlayer1 ) ; output1Test1 . newLine ( ) ; output1Test1 . append ( "BoltzmannH5 draws as player #2 : " + e2DrawAsPlayer2 ) ; output1Test1 . newLine ( ) ; output1Test1 . append ( "BoltzmannH5 loses as player #1 : " + e2LoseAsPlayer1 ) ; output1Test1 . newLine ( ) ; output1Test1 . append ( "BoltzmannH5 loses as player #2 : " + e2LoseAsPlayer2 ) ; output1Test1 . newLine ( ) ; output1Test1 . append ( "Charles_2 wins as player #1 : " + e1WinAsPlayer1 ) ; output1Test1 . newLine ( ) ; output1Test1 . append ( "Charles_2 wins as player #2 : " + e1WinAsPlayer2 ) ; output1Test1 . newLine ( ) ; output1Test1 . append ( "Charles_2 draws as player #1 : " + e1DrawAsPlayer1 ) ; output1Test1 . newLine ( ) ; output1Test1 . append ( "Charles_2 draws as player #2 : " + e1DrawAsPlayer2 ) ; output1Test1 . newLine ( ) ; output1Test1 . append ( "Charles_2 loses as player #1 : " + e1LoseAsPlayer1 ) ; output1Test1 . newLine ( ) ; output1Test1 . append ( "Charles_2 loses as player #2 : " + e1LoseAsPlayer2 ) ; output1Test1 . newLine ( ) ; output1Test1 . append ( "========================================" ) ; output1Test1 . close ( ) ; }
tr	3	@ Test public void testGet ( ) { for ( int i = 0 ; i < A . length ; ++ i ) { for ( int j = 0 ; j < A [ 0 ] . length ; ++ j ) { assertTrue ( matrixA . get ( i , j ) . equals ( A [ i ] [ j ] ) ) ; } } }
tr	1	public String toString ( ) { String out = "" ; for ( int k = 1 ; k <= size ; k ++ ) out += heap [ k ] + " " ; return out ; }
tr	2	@ Override public void onMoveTick ( int x , int y , Game game ) { SinglePlayerGame spg = ( SinglePlayerGame ) game ; if ( filterByID ( spg . getSquareNeighbors ( x , y , 1 ) , juggernaut . id ) . isEmpty ( ) ) { Location loc = spg . getFirstSquareNeighborLocation ( x , y , 2 , zombie . id ) ; spg . moveEntity ( x , y , loc == null ? Location . wander ( x , y , 1 ) : Location . away ( x , y , loc , 2 ) ) ; } }
tr	4	public String toFirstUpperCase ( String title ) { if ( title . length ( ) == 0 ) return "" ; String upperCase = title . substring ( 0 , 1 ) . toUpperCase ( ) ; boolean isTheFirst = false ; if ( title . length ( ) > 1 ) for ( int i = 1 ; i < title . length ( ) ; i ++ ) { if ( title . charAt ( i ) ==   ) { upperCase += title . substring ( i , i + 1 ) ; if ( i + 1 < title . length ( ) && ! title . substring ( i + 1 , i + 2 ) . equals ( " " ) ) isTheFirst = true ; } else { if ( isTheFirst ) { upperCase += title . substring ( i , i + 1 ) . toUpperCase ( ) ; isTheFirst = false ; } else { upperCase += title . substring ( i , i + 1 ) ; } } } System . out . println ( upperCase ) ; return upperCase ; }
tr	1	@ Override public void setText ( String Text ) { this . SetText ( Text , Color . white ) ; }
tr	1	public final int getSolutionMemoryMegabytes ( ) { return this . solutionMemoryMegabytes ; }
tr	1	private void exiting ( ) { if ( connectionHandler != null && connectionHandler . isConnected ( ) ) connectionHandler . disconnect ( ) ; }
tr	3	@ Override public void handleCommand ( CommandMessage m ) { String [ ] args = m . getArgs ( ) ; if ( args . length == 1 ) { String nick = m . getNick ( ) ; if ( pozdravy . containsKey ( nick ) ) { ph . sendMessage ( nick + ": " + pozdravy . get ( nick ) ) ; } } else if ( args . length < 3 ) { if ( pozdravy . containsKey ( args [ 1 ] ) ) { ph . sendMessage ( args [ 1 ] + ": " + pozdravy . get ( args [ 1 ] ) ) ; } } else if ( args [ 1 ] . equals ( "set" ) ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 3 ; i < args . length ; i ++ ) { sb . append ( args [ i ] ) ; sb . append (   ) ; } sb . deleteCharAt ( sb . length ( ) - 1 ) ; pozdravy . put ( args [ 2 ] , sb . toString ( ) ) ; try { ph . saveData ( pozdravy ) ; } catch ( IOException ex ) { logger . warn ( "Pozdravy couldn't be saved." , ex ) ; } } else if ( args [ 1 ] . equals ( "reset" ) ) { pozdravy . remove ( args [ 2 ] ) ; try { ph . saveData ( pozdravy ) ; ph . sendMessage ( "Pozdrav pro " + args [ 2 ] + " byl zru\u0161en" ) ; } catch ( IOException ex ) { logger . warn ( "Pozdravy couldn't be saved." , ex ) ; } } else { ph . sendMessage ( this . help ( ph . getPrefix ( ) ) ) ; } }
tr	5X	private boolean find_object ( String name , FSPNet current_net , LinkedList < String > prefix ) { boolean found = false ; for ( Entry < String , FSPAtom > e : current_net . components ( ) . entrySet ( ) ) { if ( e . getValue ( ) instanceof FSPAbstractTask ) { FSPAbstractTask t = ( FSPAbstractTask ) e . getValue ( ) ; if ( t . name ( ) . compareTo ( name ) == 0 ) { found = true ; break ; } else { if ( t . decomposesTo ( ) != null ) { prefix . push ( e . getKey ( ) ) ; if ( ! find_object ( name , t . decomposesTo ( ) , prefix ) ) { prefix . pop ( ) ; } else { break ; } } } } else { if ( e . getValue ( ) . name ( ) . compareTo ( name ) == 0 ) assert false ; } } return found ; }
tr	1	@ Before public void setUp ( ) { undertest = new MedianStore ( ) ; }
tr	4	public startTutWin ( JFrame mainFrame ) { super ( mainFrame , "Tutorial" , true ) ; setLayout ( new FlowLayout ( ) ) ; JPanel main ; JTextArea rulzArea ; final JButton begin ; main = new JPanel ( new GridLayout ( 2 , 1 ) ) ; rulzArea = new JTextArea ( "Tutorial:\n  This tutorial will go over the basics of how to run " + "this version of Blokus. This will show you how to place " + "your pieces on the board and orient them in valid ways. Click the " + "button below to start!" ) ; rulzArea . setLineWrap ( true ) ; rulzArea . setWrapStyleWord ( true ) ; rulzArea . setEditable ( false ) ; rulzArea . setOpaque ( false ) ; rulzArea . setForeground ( Color . WHITE ) ; rulzArea . setColumns ( 50 ) ; JPanel blue = new JPanel ( new FlowLayout ( ) ) ; blue . add ( rulzArea ) ; blue . setBorder ( BorderFactory . createLineBorder ( Color . blue ) ) ; blue . setOpaque ( false ) ; JPanel yellow = new JPanel ( new FlowLayout ( ) ) ; yellow . add ( blue ) ; yellow . setBorder ( BorderFactory . createLineBorder ( Color . yellow ) ) ; yellow . setOpaque ( false ) ; JPanel red = new JPanel ( new FlowLayout ( ) ) ; red . add ( yellow ) ; red . setBorder ( BorderFactory . createLineBorder ( Color . red ) ) ; red . setOpaque ( false ) ; JPanel green = new JPanel ( new FlowLayout ( ) ) ; green . add ( red ) ; green . setBorder ( BorderFactory . createLineBorder ( Color . green ) ) ; green . setOpaque ( false ) ; main . add ( green ) ; main . setBackground ( Color . BLACK ) ; JPanel buttonPan = new JPanel ( new FlowLayout ( ) ) ; begin = new JButton ( "Begin!" ) ; begin . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { Board board = new Board ( ) ; Player p1 = new Player ( "Com" , b ) ; Player p2 = new Player ( "YOU" , r ) ; Player players [ ] = { p1 , p2 } ; tut = new tutFrame ( "Tutorial" , board , players , p1 , 0 , null ) ; tut . getContentPane ( ) . setBackground ( Color . DARK_GRAY ) ; tut . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ) ; tut . setExtendedState ( JFrame . MAXIMIZED_BOTH ) ; tut . pack ( ) ; setVisible ( false ) ; tut . setVisible ( true ) ; } } ) ; ActionMap actionMap = buttonPan . getActionMap ( ) ; InputMap inputMap = buttonPan . getInputMap ( JComponent . WHEN_IN_FOCUSED_WINDOW ) ; inputMap . put ( KeyStroke . getKeyStroke ( KeyEvent . VK_ENTER , 0 ) , "BEGIN" ) ; actionMap . put ( "BEGIN" , new AbstractAction ( ) { public void actionPerformed ( ActionEvent arg0 ) { begin . doClick ( ) ; } } ) ; buttonPan . add ( begin ) ; buttonPan . setBackground ( Color . BLACK ) ; main . add ( buttonPan ) ; getContentPane ( ) . setBackground ( Color . BLACK ) ; add ( main ) ; this . pack ( ) ; this . setSize ( this . getWidth ( ) + 10 , this . getHeight ( ) ) ; this . setDefaultCloseOperation ( JFrame . DISPOSE_ON_CLOSE ) ; this . getContentPane ( ) . setBackground ( Color . BLACK ) ; this . setVisible ( true ) ; }
tr	3	private void reverseGraph ( ) { for ( int i = 0 ; i < n ; i ++ ) { graphT . add ( new ArrayList < Integer > ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { ArrayList < Integer > list = graph . get ( i ) ; for ( int j = 0 ; j < list . size ( ) ; j ++ ) { int vertex = list . get ( j ) ; graphT . get ( vertex ) . add ( i ) ; } } }
tr	2	void processSecurityMsg ( ) { vlog . debug ( "processing security message" ) ; int rc = security . processMsg ( this ) ; if ( rc == 0 ) throwAuthFailureException ( ) ; if ( rc == 1 ) { state_ = RFBSTATE_SECURITY_RESULT ; processSecurityResultMsg ( ) ; } }
tr	5X	public void fileNew ( SimpleFrame frame ) { frame . setAction ( false ) ; frame . setIsFileNameSetted ( false ) ; frame . setTitle ( "Text Editor" ) ; JFileChooser chooser = new JFileChooser ( ) ; if ( frame . getIsChanged ( ) ) { int selection = JOptionPane . showConfirmDialog ( null , "Do you want save document?" , "Warrning" , JOptionPane . YES_NO_OPTION , JOptionPane . WARNING_MESSAGE ) ; if ( selection == JOptionPane . NO_OPTION ) { frame . getText ( ) . setText ( "" ) ; frame . setIsChanged ( false ) ; frame . setTitle ( "Text Editor" ) ; } if ( selection == JOptionPane . YES_OPTION ) { chooser . setCurrentDirectory ( new File ( "." ) ) ; int result = chooser . showSaveDialog ( null ) ; if ( result == JFileChooser . APPROVE_OPTION ) { frame . fileName = chooser . getSelectedFile ( ) . getPath ( ) ; PrintWriter out ; try { out = new PrintWriter ( new FileWriter ( frame . fileName ) ) ; String str = frame . getText ( ) . getText ( ) ; out . print ( str ) ; out . close ( ) ; } catch ( IOException e ) { JOptionPane . showMessageDialog ( frame , "Saving error" ) ; } } frame . getText ( ) . setText ( "" ) ; frame . setIsChanged ( false ) ; frame . setTitle ( "Text Editor" ) ; } } else { frame . getText ( ) . setText ( "" ) ; } frame . setAction ( true ) ; }
tr	2	public List < MessageVO > getMessageVOs ( ) { if ( messageVOs == null ) { messageVOs = new ArrayList < MessageVO > ( ) ; } return this . messageVOs ; }
tr	2	public void showHideDeleteBtn ( ) { if ( ! btnVisible ) { deletePanel . setVisible ( true ) ; this . repaint ( ) ; btnVisible = true ; } else { deletePanel . setVisible ( false ) ; this . repaint ( ) ; btnVisible = false ; } }
tr	4	public boolean isMatching ( StringBuffer word , int wordPos ) { boolean matching = true , inMulti = false , multiMatch = false ; char matchCh ; for ( int matchPos = 0 ; matchPos < match . length ; matchPos ++ ) { matchCh = match [ matchPos ] ; if ( matchCh == STARTMULTI || matchCh == ENDMULTI ) { inMulti = ! inMulti ; if ( ! inMulti ) matching = matching & multiMatch ; else multiMatch = false ; } else { if ( matchCh != word . charAt ( wordPos ) ) { if ( inMulti ) multiMatch = multiMatch | false ; else matching = false ; } else { if ( inMulti ) multiMatch = multiMatch | true ; else matching = true ; } if ( ! inMulti ) wordPos ++ ; if ( ! matching ) break ; } } if ( end && wordPos != word . length ( ) ) matching = false ; return matching ; }
tr	5X	static void createNewPearltree ( Panel panel , boolean active ) { final Label item = createLabel ( ) ; final FlowPanel description = new FlowPanel ( ) ; item . setText ( "a new pearltree" ) ; if ( WebContent . onIpad ) { description . setStylePrimaryName ( PRIMARY_STYLE_NEWPEARLTREE ) ; panel . add ( description ) ; HTML newPearltreeBox = PopupElements . createHtml ( ) ; newPearltreeBox . setStylePrimaryName ( PopupElements . PRIMARY_STYLE_AVATARBOX ) ; newPearltreeBox . addStyleDependentName ( PopupElements . STYLE_SPECIAL_PADDING ) ; newPearltreeBox . setHTML ( NEW_PEARLTREE ) ; description . add ( newPearltreeBox ) ; description . add ( item ) ; } else { panel . add ( item ) ; } if ( ! WebContent . onIpad ) { item . addStyleDependentName ( STYLE_SELECTABLE ) ; item . addStyleDependentName ( STYLE_BOLD ) ; item . addStyleDependentName ( STYLE_PADDING ) ; } item . addStyleDependentName ( STYLE_SELECTABLE ) ; item . addStyleDependentName ( STYLE_ITEM ) ; if ( active ) { item . addClickHandler ( new ClickHandler ( ) { @ Override public void onClick ( ClickEvent event ) { if ( WebContent . onIpad ) { description . addStyleDependentName ( STYLE_SELECTED_TIMER ) ; Timer t = new Timer ( ) { @ Override public void run ( ) { DOM . removeElementAttribute ( TreeListUI . panelInside . getElement ( ) , "id" ) ; PopupControl . changeUI ( PopupUIs . NewTree ) ; } } ; t . schedule ( 120 ) ; } else { PopupControl . changeUI ( PopupUIs . NewTree ) ; } } } ) ; } else { item . addStyleDependentName ( STYLE_INACTIVE ) ; } }
tr	1	public static void quadRectOutset ( Rect rect , double border , RGB fill , boolean inset ) { quadCoordOutset ( rect . getMin ( ) , rect . getMax ( ) , border , fill , inset ) ; }
tr	1	public boolean isSituacao ( ) { return situacao ; }
tr	5X	public static String getResultXMLString ( SimulationFinalResult result ) { if ( result == null ) { return "" ; } StringBuilder xml = new StringBuilder ( ) ; xml . append ( "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\" ?>" ) . append ( LINE_END ) . append ( "<simulation>" ) . append ( LINE_END ) . append ( getNestingCharacters ( 1 ) ) . append ( "<meta>" ) . append ( LINE_END ) . append ( getNestingCharacters ( 2 ) ) . append ( "<playercount>" ) . append ( result . getNrOfPlayers ( ) ) . append ( "</playercount>" ) . append ( LINE_END ) . append ( getNestingCharacters ( 2 ) ) . append ( "<rounds>" ) . append ( result . getRounds ( ) ) . append ( "</rounds>" ) . append ( LINE_END ) . append ( getNestingCharacters ( 2 ) ) . append ( "<type>" ) . append ( result . getPokerType ( ) . toString ( ) ) . append ( "</type>" ) . append ( LINE_END ) . append ( getNestingCharacters ( 2 ) ) . append ( "<threads>" ) . append ( result . getNrOfThreads ( ) ) . append ( "</threads>" ) . append ( LINE_END ) . append ( getNestingCharacters ( 2 ) ) . append ( "<duration unit=\"milliseconds\">" ) . append ( result . getDuration ( ) ) . append ( "</duration>" ) . append ( LINE_END ) . append ( getNestingCharacters ( 1 ) ) . append ( "</meta>" ) . append ( LINE_END ) . append ( getNestingCharacters ( 1 ) ) . append ( "<players>" ) . append ( LINE_END ) ; for ( int i = 1 ; i <= result . getNrOfPlayers ( ) ; i ++ ) { xml . append ( getNestingCharacters ( 2 ) ) . append ( "<player id=\"" ) . append ( i ) . append ( "\">" ) . append ( LINE_END ) . append ( getNestingCharacters ( 3 ) ) ; PlayerProfile profile = result . getPlayer ( i - 1 ) ; xml . append ( "<handtype>" ) ; xml . append ( profile . getHandType ( ) . toString ( ) ) ; xml . append ( "</handtype>" ) ; xml . append ( LINE_END ) ; if ( profile . getHandType ( ) == HandType . EXACTCARDS ) { Card [ ] cards = profile . getCards ( ) ; for ( Card card : cards ) { xml . append ( getNestingCharacters ( 3 ) ) . append ( "<card>" ) . append ( card . toString ( ) ) . append ( "</card>" ) . append ( LINE_END ) ; } } else if ( profile . getHandType ( ) == HandType . RANGE ) { Range range = profile . getRange ( ) ; for ( int row = 0 ; row < 13 ; row ++ ) { for ( int col = 0 ; col < 13 ; col ++ ) { if ( range . getValue ( row , col ) ) { xml . append ( getNestingCharacters ( 3 ) ) ; xml . append ( "<cardtype>" ) ; xml . append ( Range . rangeNames [ row ] [ col ] ) ; xml . append ( "</cardtype>" ) ; xml . append ( LINE_END ) ; } } } } xml . append ( getNestingCharacters ( 2 ) ) ; xml . append ( "</player>" ) ; xml . append ( LINE_END ) ; } xml . append ( getNestingCharacters ( 1 ) ) ; xml . append ( "</players>" ) ; xml . append ( LINE_END ) ; Card [ ] flop = result . getFlop ( ) ; Card turn = result . getTurn ( ) ; Card river = result . getRiver ( ) ; if ( flop != null || turn != null || river != null ) { xml . append ( getNestingCharacters ( 1 ) ) ; xml . append ( "<community>" ) ; xml . append ( LINE_END ) ; if ( flop != null ) { xml . append ( getNestingCharacters ( 2 ) ) . append ( "<flop id=\"1\">" ) . append ( flop [ 0 ] . toString ( ) ) . append ( "</flop>" ) . append ( LINE_END ) . append ( getNestingCharacters ( 2 ) ) . append ( "<flop id=\"2\">" ) . append ( flop [ 1 ] . toString ( ) ) . append ( "</flop>" ) . append ( LINE_END ) . append ( getNestingCharacters ( 2 ) ) . append ( "<flop id=\"3\">" ) . append ( flop [ 2 ] . toString ( ) ) . append ( "</flop>" ) . append ( LINE_END ) ; } if ( turn != null ) { xml . append ( getNestingCharacters ( 2 ) ) . append ( "<turn>" ) . append ( turn . toString ( ) ) . append ( "</turn>" ) . append ( LINE_END ) ; } if ( river != null ) { xml . append ( getNestingCharacters ( 2 ) ) . append ( "<river>" ) . append ( river . toString ( ) ) . append ( "</river>" ) . append ( LINE_END ) ; } xml . append ( getNestingCharacters ( 1 ) ) . append ( "</community>" ) . append ( LINE_END ) ; } xml . append ( getNestingCharacters ( 1 ) ) . append ( "<result>" ) . append ( LINE_END ) ; for ( int i = 1 ; i <= result . getNrOfPlayers ( ) ; i ++ ) { xml . append ( getNestingCharacters ( 2 ) ) . append ( "<player id=\"" ) . append ( i ) . append ( "\">" ) . append ( LINE_END ) . append ( getNestingCharacters ( 3 ) ) . append ( "<wins>" ) . append ( result . getFormattedWinPercentage ( i - 1 ) ) . append ( "</wins>" ) . append ( LINE_END ) . append ( getNestingCharacters ( 3 ) ) . append ( "<loses>" ) . append ( result . getFormattedLosePercentage ( i - 1 ) ) . append ( "</loses>" ) . append ( LINE_END ) . append ( getNestingCharacters ( 3 ) ) . append ( "<ties>" ) . append ( result . getFormattedTiePercentage ( i - 1 ) ) . append ( "</ties>" ) . append ( LINE_END ) . append ( getNestingCharacters ( 2 ) ) . append ( "</player>" ) . append ( LINE_END ) ; } xml . append ( getNestingCharacters ( 1 ) ) . append ( "</result>" ) . append ( LINE_END ) . append ( "</simulation>" ) ; return xml . toString ( ) ; }
tr	2	private AVLNode rotateLeftRight ( AVLNode parent ) { AVLNode parentNode = parent ; AVLNode current = ( AVLNode ) parentNode . left ; AVLNode moveToTop = ( AVLNode ) current . right ; AVLNode LRL = ( AVLNode ) moveToTop . left ; AVLNode LRR = ( AVLNode ) moveToTop . right ; if ( parent . parent == null ) { this . overallRoot = moveToTop ; ; moveToTop . parent = null ; } else if ( parent . parent . left == parent ) { parent . parent . left = moveToTop ; moveToTop . parent = parent . parent ; } else { parent . parent . right = moveToTop ; moveToTop . parent = parent . parent ; } current . right = LRL ; if ( LRL != null ) { LRL . parent = current ; } parent . left = LRR ; if ( LRR != null ) { LRR . parent = parent ; } moveToTop . left = current ; moveToTop . right = parent ; current . parent = moveToTop ; parent . parent = moveToTop ; return moveToTop ; }
tr	5X	private static void test2_4 ( ) throws FileNotFoundException { String test1 = "new game\n" + "examine room\n" + "quit\n" + "yes\n" ; HashMap < Integer , String > output = new HashMap < Integer , String > ( ) ; boolean passed = true ; try { in = new ByteArrayInputStream ( test1 . getBytes ( ) ) ; System . setIn ( in ) ; out = new PrintStream ( "testing.txt" ) ; System . setOut ( out ) ; Game . main ( null ) ; } catch ( ExitException se ) { } catch ( Exception e ) { System . setOut ( stdout ) ; System . out . println ( "Error: " ) ; e . printStackTrace ( ) ; passed = false ; } finally { System . setOut ( stdout ) ; @ SuppressWarnings ( "resource" ) Scanner sc = new Scanner ( new File ( "testing.txt" ) ) ; ArrayList < String > testOutput = new ArrayList < String > ( ) ; while ( sc . hasNextLine ( ) ) { testOutput . add ( sc . nextLine ( ) ) ; } output . put ( testOutput . size ( ) - 6 , ">> The prison cell is a cold  dirty place." ) ; output . put ( testOutput . size ( ) - 5 , "The only light in the room filters through the bars in the cell door." ) ; output . put ( testOutput . size ( ) - 4 , "On the ground there is a: cell key." ) ; output . put ( testOutput . size ( ) - 3 , "The guard walks toward your cell." ) ; output . put ( testOutput . size ( ) - 2 , ">> Are you sure you want to quit? (y/n)" ) ; output . put ( testOutput . size ( ) - 1 , ">>" ) ; if ( passed ) { for ( Map . Entry < Integer , String > entry : output . entrySet ( ) ) { if ( ! testOutput . get ( entry . getKey ( ) ) . equals ( entry . getValue ( ) ) ) { passed = false ; System . out . println ( "test2_4 failed: Line " + entry . getKey ( ) ) ; System . out . println ( "\tExpected: " + entry . getValue ( ) ) ; System . out . println ( "\tReceived: " + testOutput . get ( entry . getKey ( ) ) ) ; } } if ( passed ) { System . out . println ( "test2_4 passed" ) ; } } else { System . out . println ( "test2_4 failed: error" ) ; } } }
tr	3	private int findMove ( int index1 , int index2 ) { int index = - 1 ; for ( int i = 0 ; i < _steps [ index1 ] [ index2 ] . theColors . length ; i ++ ) { if ( _steps [ index1 ] [ index2 ] . theColors [ i ] == Colors . BAR_SHIFT ) { index = i ; break ; } } return index ; }
tr	1	public boolean RemoveContact ( long nIndexContact ) { return otapiJNI . AddressBook_RemoveContact ( swigCPtr , this , removeRefContact ( nIndexContact ) ) ; }
tr	2	public Item ( String label , double quantity , double price , double vat , int count ) { this . label = label ; this . quantity = quantity ; this . price = price ; this . vat = vat ; for ( int i = 0 ; i < count ; ++ i ) { subItems . add ( new Item ( label + "." + i , random . nextDouble ( ) , random . nextDouble ( ) , random . nextDouble ( ) , 0 ) ) ; } }
tr	5X	public List < Task > sort ( final int colIndex , final boolean sortDown ) { getTasks ( ) ; if ( colIndex >= 0 && colIndex <= 6 ) { Collections . sort ( tasks , new Comparator < Task > ( ) { @ Override public int compare ( Task arg0 , Task arg1 ) { int result = 0 ; if ( colIndex == 1 || colIndex == 2 || colIndex == 3 || colIndex == 5 || colIndex == 6 ) { StringComparer stringComparator = new StringComparer ( sortDown ) ; result = comparer ( stringComparator , arg0 , arg1 , colIndex ) ; } else if ( colIndex == 0 ) { IntegerComparer intComparator = new IntegerComparer ( sortDown ) ; result = comparer ( intComparator , arg0 , arg1 , colIndex ) ; } else if ( colIndex == 4 ) { DateComparer dateComparator = new DateComparer ( sortDown ) ; result = comparer ( dateComparator , arg0 , arg1 , colIndex ) ; } return result ; } } ) ; } else { throw new IllegalArgumentException ( "Invalid Column index." ) ; } return tasks ; }
tr	2	@ Test public void testNaissanceSoldats ( ) { SalleSoldat testSoldat = new SalleSoldat ( ) ; SalleNourrice sn = new SalleNourrice ( ) ; Evenements . getInstance ( ) . setEvenementActif ( Constantes . EVEN_DEPLACEMENT ) ; sn . ajouterFourmi ( 3 ) ; testSoldat . naissanceSoldats ( 2 , sn ) ; assertEquals ( 1 , testSoldat . getNbCourantFourmi ( ) ) ; assertEquals ( 1 , sn . getNbCourantFourmi ( ) ) ; try { testSoldat . naissanceSoldats ( 2 , sn ) ; fail ( "ExceptionNourrices non levee." ) ; } catch ( ExceptionNourrices en ) { } try { testSoldat . naissanceSoldats ( 0 , sn ) ; fail ( "IllegalArgumentException non levee." ) ; } catch ( IllegalArgumentException iae ) { } try { testSoldat . naissanceSoldats ( 1 , sn ) ; fail ( "IllegalArgumentException non levee." ) ; } catch ( IllegalArgumentException iae ) { } try { testSoldat . naissanceSoldats ( 5 , sn ) ; fail ( "IllegalArgumentException non levee." ) ; } catch ( IllegalArgumentException iae ) { } }
tr	4	public static void main ( String args [ ] ) { try { for ( javax . swing . UIManager . LookAndFeelInfo info : javax . swing . UIManager . getInstalledLookAndFeels ( ) ) { if ( "Nimbus" . equals ( info . getName ( ) ) ) { javax . swing . UIManager . setLookAndFeel ( info . getClassName ( ) ) ; break ; } } } catch ( ClassNotFoundException ex ) { java . util . logging . Logger . getLogger ( EditStajFrame . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( InstantiationException ex ) { java . util . logging . Logger . getLogger ( EditStajFrame . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( IllegalAccessException ex ) { java . util . logging . Logger . getLogger ( EditStajFrame . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( javax . swing . UnsupportedLookAndFeelException ex ) { java . util . logging . Logger . getLogger ( EditStajFrame . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } java . awt . EventQueue . invokeLater ( new Runnable ( ) { public void run ( ) { new EditStajFrame ( ) . setVisible ( true ) ; } } ) ; }
tr	5X	public static void main ( String [ ] args ) { String pathinput = "C:/Users/lin/Desktop/train_weibo_balanced.arff" ; String pathoutput = "C:/Users/lin/Desktop/train_weibo_balanced(chongxinbianUniqueID).arff" ; File file = new File ( pathinput ) ; BufferedReader reader = null ; try { reader = new BufferedReader ( new FileReader ( file ) ) ; String tempString = null ; OutputStreamWriter writer = new OutputStreamWriter ( new FileOutputStream ( pathoutput ) , "UTF-8" ) ; int num = 0 ; while ( ( tempString = reader . readLine ( ) ) != null ) { if ( tempString . contains ( " {0 " ) ) { String t = tempString . substring ( 4 , 5 ) ; for ( int i = 1 ; i < 7 ; i ++ ) { String begin = "  " + i + " " ; String end = "  " + ( i + 1 ) + " " ; t += " " + tempString . substring ( tempString . indexOf ( begin ) + begin . length ( ) , tempString . indexOf ( end ) ) ; } t += " " + num ++ ; for ( int i = 8 ; i < 207 ; i ++ ) { String begin = "  " + i + " " ; String end = "  " + ( i + 1 ) + " " ; t += " " + tempString . substring ( tempString . indexOf ( begin ) + begin . length ( ) , tempString . indexOf ( end ) ) ; } t += " " + tempString . substring ( tempString . indexOf ( "  207 " ) + 6 , tempString . indexOf ( " }" ) ) ; writer . write ( t + "\r\n" ) ; } else { writer . write ( tempString + "\r\n" ) ; } } reader . close ( ) ; writer . flush ( ) ; writer . close ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } finally { if ( reader != null ) { try { reader . close ( ) ; } catch ( IOException e1 ) { } } } }
tr	3	public List < Integer > postorderTraversal ( TreeNode root ) { List < Integer > result = new ArrayList < > ( ) ; Stack < TreeNode > stack = new Stack < > ( ) ; if ( root != null ) stack . add ( root ) ; TreeNode prev = null ; while ( ! stack . isEmpty ( ) ) { root = stack . peek ( ) ; if ( prev == null || prev . left == root || prev . right == root ) { if ( root . left != null ) stack . push ( root . left ) ; else if ( root . right != null ) stack . push ( root . right ) ; } else if ( prev == root . left ) { if ( root . right != null ) stack . push ( root . right ) ; } else { result . add ( root . val ) ; stack . pop ( ) ; } prev = root ; } return result ; }
tr	4	protected void prepare_sample_reading ( Header header , int allocation , int channel , float [ ] factor , int [ ] codelength , float [ ] c , float [ ] d ) { int channel_bitrate = header . bitrate_index ( ) ; if ( header . mode ( ) != Header . SINGLE_CHANNEL ) if ( channel_bitrate == 4 ) channel_bitrate = 1 ; else channel_bitrate -= 4 ; if ( channel_bitrate == 1 || channel_bitrate == 2 ) { groupingtable [ channel ] = table_cd_groupingtables [ allocation ] ; factor [ 0 ] = table_cd_factor [ allocation ] ; codelength [ 0 ] = table_cd_codelength [ allocation ] ; c [ 0 ] = table_cd_c [ allocation ] ; d [ 0 ] = table_cd_d [ allocation ] ; } else { if ( subbandnumber <= 2 ) { groupingtable [ channel ] = table_ab1_groupingtables [ allocation ] ; factor [ 0 ] = table_ab1_factor [ allocation ] ; codelength [ 0 ] = table_ab1_codelength [ allocation ] ; c [ 0 ] = table_ab1_c [ allocation ] ; d [ 0 ] = table_ab1_d [ allocation ] ; } else { groupingtable [ channel ] = table_ab234_groupingtables [ allocation ] ; if ( subbandnumber <= 10 ) { factor [ 0 ] = table_ab2_factor [ allocation ] ; codelength [ 0 ] = table_ab2_codelength [ allocation ] ; c [ 0 ] = table_ab2_c [ allocation ] ; d [ 0 ] = table_ab2_d [ allocation ] ; } else if ( subbandnumber <= 22 ) { factor [ 0 ] = table_ab3_factor [ allocation ] ; codelength [ 0 ] = table_ab3_codelength [ allocation ] ; c [ 0 ] = table_ab3_c [ allocation ] ; d [ 0 ] = table_ab3_d [ allocation ] ; } else { factor [ 0 ] = table_ab4_factor [ allocation ] ; codelength [ 0 ] = table_ab4_codelength [ allocation ] ; c [ 0 ] = table_ab4_c [ allocation ] ; d [ 0 ] = table_ab4_d [ allocation ] ; } } } }
tr	3	private void drawLines ( Graphics g , treeNode [ ] nodes ) { Graphics2D g2d = ( Graphics2D ) g ; g2d . setColor ( Color . black ) ; g2d . setStroke ( new BasicStroke ( LINE_THICKNESS ) ) ; for ( int i = 1 ; i < nodes . length ; i ++ ) { try { g2d . drawLine ( nodes [ i ] . CenterX , nodes [ i ] . CenterY , nodes [ 2 * i ] . CenterX , nodes [ 2 * i ] . CenterY ) ; } catch ( ArrayIndexOutOfBoundsException ex ) { } try { g2d . drawLine ( nodes [ i ] . CenterX , nodes [ i ] . CenterY , nodes [ 2 * i + 1 ] . CenterX , nodes [ 2 * i + 1 ] . CenterY ) ; } catch ( ArrayIndexOutOfBoundsException ex ) { } } }
tr	4	private ParserRuleMatcher token ( final TokenType tokenType ) { return new ParserRuleMatcher ( ) { @ Override public SyntaxNode match ( int tokenIndex , boolean throwFailure ) { tokenIndex = findToken ( tokenIndex , tokenType , null ) ; if ( tokenIndex == - 1 ) { if ( throwFailure ) throw new ParserError ( tokenIndex ) ; return null ; } return new SyntaxNode ( tokenIndex , tokenIndex + 1 ) ; } } ; }
tr	2	public static final byte product ( byte u , byte v ) { if ( u == 0 || v == 0 ) return 0 ; if ( u == 1 ) return v ; if ( v == 1 ) return u ; else { byte product = getExp ( UNSIGN ( getLog ( u - 1 ) ) + UNSIGN ( getLog ( v - 1 ) ) ) ; return product ; } }
tr	2	public String getColumnName ( int c ) { switch ( c ) { case COL_RANK : return "#" ; case COL_NAME : return "Name" ; case COL_PRESENT : return "Present" ; case COL_BIDS : return "Bids" ; default : return "" ; } }
tr	2	public < T > T getInstance ( class < T > c , String [ ] args ) throws Exception { AnnotatedConstructor ctor = ctors . get ( c ) ; AnnotatedCLI . ParsedCLI cli = parse ( args ) ; T obj ; if ( ctor != null ) { obj = ( T ) ctor . newInstance ( cli ) ; } else { obj = ( T ) c . newInstance ( ) ; } cli . inject ( obj ) ; return obj ; }
tr	4	public void initConvexe ( ) { Iterator < Classe > iter = vectClasses . iterator ( ) ; while ( iter . hasNext ( ) ) { Classe next = iter . next ( ) ; next . convexe = new Convexe ( ) ; } if ( enveloppe == 1 ) { for ( int i = 0 ; i < points . length ; i ++ ) { Classe classe = vectClasses . elementAt ( classes [ i ] ) ; if ( classe . envDessinee ) { classe . convexe . ajoute ( points [ i ] [ 0 ] , points [ i ] [ 1 ] ) ; } } } else { for ( int i = 0 ; i < points . length ; i ++ ) { iter = vectClasses . iterator ( ) ; while ( iter . hasNext ( ) ) { Classe next = iter . next ( ) ; if ( next . index == classes [ i ] || ( next . index < classes [ i ] && ecm . getK ( ) [ next . index ] [ classes [ i ] ] != 0 ) ) next . convexe . ajoute ( points [ i ] [ 0 ] , points [ i ] [ 1 ] ) ; } } } iter = vectClasses . iterator ( ) ; while ( iter . hasNext ( ) ) { Classe next = iter . next ( ) ; if ( next . envDessinee ) { next . convexe . calculBarycentre ( ) ; next . convexe . enveloppe ( ) ; } } }
tr	2	@ Override public void removeUser ( Identifier id ) throws DataBaseReadWriteException , IdentifierNotFoundException , InvalidIdentifierException { if ( id == null ) { throw new InvalidIdentifierException ( "Id is invalid" ) ; } if ( Users . remove ( id ) == null ) { throw new IdentifierNotFoundException ( "Id not found" ) ; } Users . remove ( id ) ; write ( USERS ) ; }
tr	4	private void parseDocument ( int docNumber ) { Element docEle = docs . get ( docNumber ) . getDocumentElement ( ) ; NodeList nodelist = docEle . getElementsByTagName ( "room" ) ; if ( nodelist != null && nodelist . getLength ( ) > 0 ) { for ( int i = 0 ; i < nodelist . getLength ( ) ; i ++ ) { Element el = ( Element ) nodelist . item ( i ) ; String fileName = el . getTextContent ( ) ; parseXmlFile ( new File ( fileName ) ) ; } } for ( int i = 1 ; i < docs . size ( ) ; i ++ ) { Element roomdocEle = docs . get ( i ) . getDocumentElement ( ) ; NodeList roomnodelist = roomdocEle . getElementsByTagName ( "room" ) ; if ( roomnodelist != null && roomnodelist . getLength ( ) > 0 ) { for ( int j = 0 ; j < roomnodelist . getLength ( ) ; j ++ ) { Element roomElement = ( Element ) roomnodelist . item ( j ) ; getRoom ( roomElement ) ; } } } nodelist = docEle . getElementsByTagName ( "connect" ) ; if ( nodelist != null && nodelist . getLength ( ) > 0 ) { for ( int i = 0 ; i < nodelist . getLength ( ) ; i ++ ) { Element el = ( Element ) nodelist . item ( i ) ; getConnection ( el ) ; } } nodelist = docEle . getElementsByTagName ( "player" ) ; if ( nodelist != null && nodelist . getLength ( ) > 0 ) { for ( int i = 0 ; i < nodelist . getLength ( ) ; i ++ ) { Element el = ( Element ) nodelist . item ( 0 ) ; mc = getPlayer ( el ) ; } } }
tr	1	public int delete ( int id ) { String SQL1 = "DELETE FROM sig_reserves where id=" + id ; int nup = client . getMysql ( ) . executeUpdate ( SQL1 ) ; return nup ; }
tr	1	public int getPeopleOnStation ( ) { return peopleOnStation ; }
tr	5X	private static Collection < Layer > parseLayerArgument ( Model model , String layersarg ) { Collection < Layer > lays ; if ( layersarg . equalsIgnoreCase ( "all" ) ) { lays = model . getLayer ( ) ; } else { String [ ] layersarg1 = layersarg . split ( " " ) ; lays = new ArrayList < Layer > ( ) ; for ( Layer lay1 : model . getLayer ( ) ) { for ( String lan : layersarg1 ) { if ( lan . equals ( String . valueOf ( lay1 . getNumber ( ) ) ) ) { lays . add ( lay1 ) ; } } } } if ( lays . isEmpty ( ) ) { System . err . println ( "No matching layers found." ) ; System . exit ( 1 ) ; } return lays ; }
tr	4	@ Override public void actionPerformed ( ActionEvent ae ) { if ( ae . getActionCommand ( ) . compareTo ( "comboBoxChanged" ) == 0 ) { if ( ae . getSource ( ) == combo_url ) { loadUrlData ( ) ; } else if ( ae . getSource ( ) == combo_grantType ) { if ( combo_grantType . getSelectedIndex ( ) == AUTHORIZATION_GRANT_INDEX ) { OAuthPropertyBean . getInstance ( ) . setGrantType ( OAuthPropertyBean . AUTHORIZATION_GRANT ) ; setupPanels ( ) ; } else if ( combo_grantType . getSelectedIndex ( ) == PASSWORD_GRANT_INDEX ) { OAuthPropertyBean . getInstance ( ) . setGrantType ( OAuthPropertyBean . PASWORD_GRANT ) ; setupPanels ( ) ; } else if ( combo_grantType . getSelectedIndex ( ) == CLIENT_GRANT_INDEX ) { OAuthPropertyBean . getInstance ( ) . setGrantType ( OAuthPropertyBean . CLIENT_CREDENTIALS_GRANT ) ; setupPanels ( ) ; } } } else if ( ae . getActionCommand ( ) . compareTo ( ABOUT_MENUITEM ) == 0 ) { JOptionPane . showMessageDialog ( applicationFrame , "OAuthTestClient\nAn OAuth 2.0 Test Application\nWritten by Ronnie Mitra.\n\nhttps://github.com/mitraman/OAuthTestClient    \n\n" , "About OAuthTestClient" , JOptionPane . QUESTION_MESSAGE ) ; } else if ( ae . getActionCommand ( ) . compareTo ( SETTINGS_MENUITEM ) == 0 ) { SettingsDialog settingsDialog = new SettingsDialog ( applicationFrame ) ; settingsDialog . setVisible ( true ) ; } else if ( ae . getActionCommand ( ) . compareTo ( SAVE_CONFIG_MENUITEM ) == 0 ) { JFileChooser fileChooser = new JFileChooser ( "./OAuthTestClient.cfg" ) ; if ( fileChooser . showSaveDialog ( this ) == JFileChooser . APPROVE_OPTION ) { File file = fileChooser . getSelectedFile ( ) ; ConfigManager . saveProperties ( file ) ; } } else if ( ae . getActionCommand ( ) . compareTo ( LOAD_CONFIG_MENUITEM ) == 0 ) { JFileChooser fileChooser = new JFileChooser ( ) ; if ( fileChooser . showOpenDialog ( this ) == JFileChooser . APPROVE_OPTION ) { File file = fileChooser . getSelectedFile ( ) ; ConfigManager . loadProperties ( file ) ; } } else { System . out . println ( ae . getActionCommand ( ) + " " + ae . getID ( ) ) ; } }
tr	3	private void botonEliminarUsuarioActionPerformed ( java . awt . event . ActionEvent evt ) { if ( this . tablaAdministracionUsuarios . getSelectedRow ( ) > - 1 ) { String codigo = ( String ) this . conectorTablaUsuarios . getValueAt ( this . tablaAdministracionUsuarios . getSelectedRow ( ) , 0 ) ; int respuesta = JOptionPane . showConfirmDialog ( this . botonEliminarUsuario , "\u00BFRealmente desea eliminar \n al usuario " + codigo + "?" , "Confirme eliminaci\u00F3n" , JOptionPane . YES_NO_OPTION , JOptionPane . QUESTION_MESSAGE ) ; if ( respuesta == JOptionPane . YES_OPTION ) { Usuario u = this . modeloApp . obtenerUsuarioConCodigo ( codigo ) ; this . modeloApp . eliminarUsuario ( u ) ; this . conectorTablaUsuarios . cargarUsuarios ( ) ; } } else { JOptionPane . showMessageDialog ( this , "Debe seleccionar un\nusuario de la tabla" , "Usuario no seleccionado" , JOptionPane . INFORMATION_MESSAGE ) ; } }
tr	4	public boolean equals ( Object obj ) { boolean returnMe = true ; if ( ! obj . getClass ( ) . equals ( this . getClass ( ) ) ) { returnMe = false ; } else { if ( docID != ( ( Pair ) obj ) . docID ) { returnMe = false ; } else { if ( score != ( ( Pair ) obj ) . score ) { returnMe = false ; } } } return returnMe ; }
tr	3	public List < Player > getPlayersOnPlace ( ) { final List < Player > players = new ArrayList < Player > ( ) ; for ( final Player player : Monopoly . getInstance ( ) . getPlayers ( ) ) { if ( player . position == this . placeID ) { players . add ( player ) ; } } return players ; }
tr	4	public void clean ( ) { try { DatabaseMetaData md = conn . getMetaData ( ) ; ResultSet rs = md . getTables ( null , null , "%" , null ) ; stmt = conn . createStatement ( ) ; while ( rs . next ( ) ) { String name = rs . getString ( 3 ) ; if ( name . contains ( "T1564915759" ) || name . contains ( "T2003359763" ) || name . contains ( "T2078457880" ) || name . contains ( "T225294351" ) || name . contains ( "T300392468" ) || name . contains ( "T375490585" ) || name . contains ( "T450588702" ) || name . contains ( "T525686819" ) || name . contains ( "T600784936" ) || name . contains ( "T675883053" ) || name . contains ( "T75098117" ) || name . contains ( "T826079287" ) || name . contains ( "T964130823" ) ) { System . out . println ( name ) ; stmt . executeUpdate ( "DROP TABLE " + name ) ; } } stmt . close ( ) ; conn . commit ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } }
tr	3	private boolean isValidUserInput ( final String hostname , final String port ) { final String methodName = "isValidUserInput" ; ControllerLogger . entering ( CLASS_NAME , methodName , hostname , port ) ; try { if ( GUIUtils . isEmptyValue ( hostname ) ) { GUIUtils . showWarningMessage ( connectToServerWindow , GUIMessages . INVALID_HOSTNAME_MESSAGE ) ; return false ; } if ( ! GUIUtils . isPortNumberValid ( port ) ) { GUIUtils . showWarningMessage ( connectToServerWindow , GUIMessages . INVALID_PORT_NUMBER_MESSAGE ) ; return false ; } return true ; } finally { ControllerLogger . exiting ( CLASS_NAME , methodName ) ; } }
tr	1	public void delete ( ) { Dispatch . call ( this , "Delete" ) ; }
tr	1	public void setRing ( boolean ring ) { this . ring = ring ; }
tr	2	public void disconnect ( ) { try { running = false ; handler . removeClient ( user ) ; reader . close ( ) ; writer . close ( ) ; socket . close ( ) ; } catch ( IOException e ) { } }
tr	1	public void setAgility ( int agi ) { this . agility = agi ; }
tr	1	public UserSessionVO getUserSessionVO ( ) { return userSessionVO ; }
tr	2	@ Override public boolean equals ( Object obj ) { if ( this == obj ) return true ; if ( obj == null ) return false ; if ( getClass ( ) != obj . getClass ( ) ) return false ; Cohort other = ( Cohort ) obj ; if ( yearOfAdmission == null ) { if ( other . yearOfAdmission != null ) return false ; } else if ( ! yearOfAdmission . equals ( other . yearOfAdmission ) ) return false ; return true ; }
tr	3	private void whileChatting ( ) throws IOException { ableToType ( true ) ; do { try { message = ( String ) in . readObject ( ) ; displayMessage ( message , INCOMMINGMESSAGE ) ; } catch ( ClassNotFoundException classNotFoundException ) { displayMessage ( "Invalid Input" , MESSAGE ) ; } } while ( ! message . equals ( "SERVER - END" ) ) ; }
tr	5X	private void setTextFieldVerifiers ( ) { final JComponent [ ] componentArr = new JComponent [ ] { textFieldName , textFieldMinAmount , textFieldMaxAmount , textFieldDuration , textFieldStartPay , textFieldPercent , textAreaDescription } ; final TextFieldVerifier verifier = new TextFieldVerifier ( ) ; for ( JComponent component : componentArr ) { component . setInputVerifier ( verifier ) ; } KeyListener listener = new KeyAdapter ( ) { public void keyTyped ( KeyEvent e ) { for ( JComponent component : componentArr ) { boolean enabled = verifier . verify ( component ) ; if ( enabled == false ) { buttonSave . setEnabled ( enabled ) ; break ; } buttonSave . setEnabled ( enabled ) ; } } } ; for ( JComponent component : componentArr ) { component . addKeyListener ( listener ) ; } }
tr	2	public void elsolve ( final double [ ] b , final double [ ] y ) { int i , j ; double sum ; if ( b . length != n || y . length != n ) throw new IllegalArgumentException ( "bad lengths" ) ; for ( i = 0 ; i < n ; i ++ ) { for ( sum = b [ i ] , j = 0 ; j < i ; j ++ ) sum -= el [ i ] [ j ] * y [ j ] ; y [ i ] = sum / el [ i ] [ i ] ; } }
tr	4	public static void main ( String [ ] args ) { CallParser parser = new CallParser ( ) ; parser . addLine ( 0 , "static sequence [pipe]function" ) ; parser . addLine ( 1 , "[o]:[p] s{var:I32=0}[ss] [s]:[^]a[var33  l] " ) ; parser . addLine ( 2 , "if{[qwerty]:{stuff}[xyz] xyz}: " ) ; parser . addLine ( 3 , "[a]asd[b]op[p]" ) ; parser . addLine ( 4 , ":elseif{something}:" ) ; parser . addLine ( 5 , ":elseif{somethingelse}: " ) ; parser . addLine ( 6 , "static sequence2" ) ; parser . addLine ( 7 , ":end" ) ; parser . addLine ( 8 , "EXECUTE{[a]:[>] [<  \" is sweet\"]PRINTLN  lol}" ) ; for ( Component com : parser . separateComponents ( ) ) System . out . print ( com . type + " " ) ; System . out . println ( ) ; parser . parse ( ) ; int indent = 0 ; for ( ParsedCall call : parser . calls ) { if ( call . isBlockEnd ) { indent -- ; } for ( int ind = 0 ; ind < indent ; ind ++ ) { System . out . print ( "  " ) ; } if ( call . isBlockEnd ) System . out . print ( ":" ) ; System . out . print ( "[" ) ; for ( String param : call . inParams ) { System . out . print ( param + " " ) ; } System . out . print ( "]" ) ; System . out . print ( call . callName ) ; if ( call . confNodes . length > 0 ) { System . out . print ( "{ " ) ; for ( String param : call . confNodes ) { System . out . print ( param + " " ) ; } System . out . print ( "}" ) ; } System . out . print ( "[" ) ; for ( String param : call . outParams ) { System . out . print ( param + " " ) ; } System . out . print ( "]" ) ; if ( call . isBlockStart ) { indent ++ ; System . out . print ( ":" ) ; } System . out . println ( ) ; } }
tr	5X	private void execute ( ) { boolean running = true ; WatchKey key ; String dir = readProperties ( ) ; InboundWatcher watch = new InboundWatcher ( dir ) ; System . out . println ( "Starting the directory monitoring" ) ; System . out . println ( "Directory being monitored is: " + dir ) ; while ( running ) { try { key = watch . watcher . take ( ) ; } catch ( InterruptedException ie ) { return ; } for ( WatchEvent < ? > event : key . pollEvents ( ) ) { WatchEvent . Kind < ? > kind = event . kind ( ) ; if ( kind == StandardWatchEventKinds . ENTRY_CREATE ) { WatchEvent < Path > watchEventPath = ( WatchEvent < Path > ) event ; Path entry = watchEventPath . context ( ) ; if ( Pattern . matches ( "[so]{0 1}.+[\\.xml]" , entry . toString ( ) ) ) { SalesOrder . unmarshal ( dir , entry . toString ( ) ) ; } else if ( Pattern . matches ( "[sr]{0 1}.+[\\.xml]" , entry . toString ( ) ) ) { StandardResponse . unmarshal ( dir , entry . toString ( ) ) ; } else if ( Pattern . matches ( ".+[\\.trg]" , entry . toString ( ) ) ) { File f = entry . toFile ( ) ; ShipAdvice . marshal ( f ) ; } } } key . reset ( ) ; if ( ! key . isValid ( ) ) { running = false ; } } }
tr	3	private int validateProtocol ( ) throws IOException { int resp = this . sendDummyRequest ( ) ; if ( ! this . sc . isSecureConnection ( ) ) { this . sc . setSecureConnection ( true ) ; try { resp = this . sendDummyRequest ( ) ; } catch ( SSLException e ) { this . sc . setSecureConnection ( false ) ; } } return resp ; }
tr	3	public MultiList ( ) { recommendedModel = new DefaultListModel < Champion > ( ) ; goodModel = new DefaultListModel < Champion > ( ) ; viableModel = new DefaultListModel < Champion > ( ) ; allModel = new DefaultListModel < Champion > ( ) ; instance = this ; submit ( ) ; EventHandler . addSlotLockListener ( new SlotLockListener ( ) { @ Override public void onSlotLock ( ) { submit ( ) ; } } ) ; EventHandler . addResetListener ( new ResetListener ( ) { @ Override public void onReset ( ) { reset ( ) ; submit ( ) ; } } ) ; }
tr	4	public static GregorianCalendar lireDate ( String date ) { boolean ok = false ; String [ ] champsDate ; int jour = 1 ; int mois = 0 ; int an = 0 ; GregorianCalendar dateSaisie = null ; champsDate = date . split ( "/" ) ; ok = true ; if ( champsDate . length >= 1 ) { try { mois = Integer . parseInt ( champsDate [ 0 ] ) ; if ( ( mois < 1 ) || ( mois > 12 ) ) { ok = false ; } } catch ( Exception e ) { ok = false ; } } else { mois = moisCourant ( ) ; } if ( champsDate . length == 2 ) { try { an = Integer . parseInt ( champsDate [ 1 ] ) ; if ( ( an < 1900 ) || ( an > 2100 ) ) { ok = false ; } } catch ( Exception e ) { ok = false ; } } else { an = anneeCourante ( ) ; } if ( ok ) { dateSaisie = new GregorianCalendar ( an , mois - 1 , jour ) ; return dateSaisie ; } else { return null ; } }
tr	5X	public Vector < String > enumDatabases ( ) { Vector < String > instances = new Vector < String > ( ) ; Connection session = null ; try { session = connect ( "postgres" , "postgres" , "postgres" ) ; if ( session == null ) { errMsg = "Can't connect to management database" ; return instances ; } Statement stmt = session . createStatement ( ) ; if ( stmt . execute ( "select datname from pg_database;" ) ) { ResultSet r = stmt . getResultSet ( ) ; if ( r != null ) { while ( r . next ( ) ) { String name = r . getString ( "datname" ) ; instances . add ( name ) ; } } } errMsg = null ; } catch ( SQLException e ) { errMsg = e . getMessage ( ) ; } finally { if ( session != null ) try { session . close ( ) ; } catch ( SQLException e ) { } } return instances ; }
tr	3	private DefaultConstructorFactory getDefaultConstructorFactory ( ) { lock . lock ( ) ; try { DefaultConstructorFactory factory = null ; try { factory = new SunDefaultConstructorFactory ( ) ; } catch ( Exception e ) { } if ( factory == null ) factory = new NoDefaultConstructorFactory ( ) ; return factory ; } finally { lock . unlock ( ) ; } }
tr	5X	public void checkCollisionsWithEnemies ( ArrayList < Enemy > list , Level1State state ) { for ( int i = 0 ; i < list . size ( ) ; i ++ ) { double w = .5 * ( list . get ( i ) . getCWidth ( ) + getWidth ( ) ) ; double h = .5 * ( list . get ( i ) . getCHeight ( ) + getHeight ( ) ) ; double dx = list . get ( i ) . getCCenterX ( ) - getCenterX ( ) ; double dy = list . get ( i ) . getCCenterY ( ) - getCenterY ( ) ; if ( Math . abs ( dx ) <= w && Math . abs ( dy ) <= h ) { boolean hack = false ; double wy = w * dy ; double hx = h * dx ; if ( wy > hx ) { if ( wy > - hx ) { if ( list . get ( i ) . getKilledByTop ( ) ) { hack = true ; if ( list . get ( i ) . hit ( state . getPlayerState ( ) , this ) ) { } } else hit ( ) ; } else { if ( ! hack ) hit ( ) ; } } else { if ( wy > - hx ) { if ( ! hack ) hit ( ) ; } else { if ( ! hack ) hit ( ) ; } } } } }
tr	5X	public static void writeToFile ( long [ ] sizes , int [ ] nthreads , double [ ] [ ] results , String file ) { BufferedWriter writer ; try { writer = new BufferedWriter ( new FileWriter ( file ) ) ; writer . write ( System . getProperty ( "os.name" ) + " " + System . getProperty ( "os.arch" ) + " " + System . getProperty ( "os.version" ) ) ; writer . newLine ( ) ; writer . write ( System . getProperty ( "java.vendor" ) + " " + System . getProperty ( "java.version" ) ) ; writer . newLine ( ) ; writer . write ( "Available processors (cores): " + Runtime . getRuntime ( ) . availableProcessors ( ) ) ; writer . newLine ( ) ; writer . write ( "Total memory (bytes): " + Runtime . getRuntime ( ) . totalMemory ( ) ) ; writer . newLine ( ) ; writer . write ( "Number of threads: {" ) ; for ( int th = 0 ; th < nthreads . length ; th ++ ) { if ( th < nthreads . length - 1 ) { writer . write ( nthreads [ th ] + " " ) ; } else { writer . write ( nthreads [ nthreads . length - 1 ] + "}" ) ; } } writer . newLine ( ) ; writer . write ( "Sizes: {" ) ; for ( int i = 0 ; i < sizes . length ; i ++ ) { if ( i < sizes . length - 1 ) { writer . write ( sizes [ i ] + " " ) ; } else { writer . write ( sizes [ sizes . length - 1 ] + "}" ) ; } } writer . newLine ( ) ; writer . write ( "Timings: {" ) ; for ( int th = 0 ; th < nthreads . length ; th ++ ) { writer . write ( "{" ) ; if ( th < nthreads . length - 1 ) { for ( int i = 0 ; i < sizes . length ; i ++ ) { if ( i < sizes . length - 1 ) { writer . write ( results [ th ] [ i ] + " " ) ; } else { writer . write ( results [ th ] [ i ] + "} " ) ; } } writer . newLine ( ) ; } else { for ( int i = 0 ; i < sizes . length ; i ++ ) { if ( i < sizes . length - 1 ) { writer . write ( results [ th ] [ i ] + " " ) ; } else { writer . write ( results [ th ] [ i ] + "}}" ) ; } } } } } catch ( IOException ex ) { ex . printStackTrace ( ) ; } }
tr	2	private void drawCheckerboard ( Graphics2D g ) { Color backupColor = g . getColor ( ) ; Stroke backupStroke = g . getStroke ( ) ; g . setColor ( Color . RED ) ; g . setStroke ( new BasicStroke ( 1.0f ) ) ; g . drawRect ( 0 , 0 , _canvasBackground . getWidth ( ) - 1 , _canvasBackground . getHeight ( ) - 1 ) ; for ( int i = 0 ; i < _imageList . size ( ) ; i ++ ) { IPLNode node = _imageList . get ( i ) ; g . drawRect ( node . getX ( ) , node . getY ( ) , node . getScaleWidth ( ) , node . getScaleHeight ( ) ) ; } g . setColor ( backupColor ) ; g . setStroke ( backupStroke ) ; }
tr	4	protected char [ ] move_array ( char [ ] array , int offset , boolean left ) { int total = array . length ; char [ ] new_array = new char [ total ] ; for ( int i = 0 ; i < total ; i ++ ) { int new_pos ; if ( ! left ) { new_pos = ( i + offset ) % total ; } else { new_pos = ( i - offset ) % total ; if ( new_pos < 0 ) { new_pos += total ; } } new_array [ new_pos ] = array [ i ] ; } return new_array ; }
tr	2	public Integer getIntData ( Document doc , String tagName ) { String data = getTextData ( doc , tagName ) ; if ( data == null ) { return null ; } else { return Integer . parseInt ( data ) ; } }
tr	5X	public File getFileChoice ( Component parent ) { if ( chooser . showSaveDialog ( parent ) == JFileChooser . APPROVE_OPTION ) { File newFile = chooser . getSelectedFile ( ) ; if ( chooser . getFileFilter ( ) == zipFilter ) { if ( ! newFile . getName ( ) . toUpperCase ( ) . endsWith ( ".ZIP" ) ) { newFile = new File ( newFile . getAbsoluteFile ( ) + ".zip" ) ; } } if ( newFile . exists ( ) ) { int confirmChoice = JOptionPane . showConfirmDialog ( parent , "File already exists. Do you want to replace it?" ) ; if ( confirmChoice == JOptionPane . YES_OPTION ) { newFile . delete ( ) ; } else if ( confirmChoice == JOptionPane . NO_OPTION ) { return getFileChoice ( parent ) ; } else { return null ; } } if ( ! newFile . exists ( ) ) { boolean fileCreated = false ; try { fileCreated = newFile . createNewFile ( ) ; } catch ( Exception e ) { } finally { if ( ! fileCreated ) { JOptionPane . showMessageDialog ( parent , "An Error Occurred" ) ; return null ; } } } return newFile ; } else { return null ; } }
tr	2	public void removeAll ( ) { for ( int i = getRowCount ( ) - 1 ; i >= 0 ; i -- ) { removeRow ( i ) ; } }
tr	5X	public String getRecords ( ) { StringBuilder resultado = new StringBuilder ( ) ; if ( tipo != null ) { Declaracion tmp = tipo ; TipoDeclaracion tdecl = null ; TipoRecord trec1 = null ; while ( tmp != null ) { if ( tmp instanceof TipoDeclaracion ) { resultado . append ( ".namespace Ejemplo{\n" ) ; tdecl = ( ( TipoDeclaracion ) tmp ) ; resultado . append ( "\t.class private sequential ansi sealed beforefieldinit " ) . append ( tdecl . getNombre ( ) ) ; resultado . append ( " extends [mscorlib]System.ValueType{\n" ) ; Tipo t = InfSemantica . getInstancia ( ) . tablaGlobal . get ( tdecl . getNombre ( ) ) ; TipoRecord record = ( ( TipoRecord ) t ) ; Collections . reverse ( record . tbsimbolo . lista ) ; Collections . reverse ( record . tbsimbolo . tipos ) ; for ( int i = 0 ; i < record . tbsimbolo . lista . size ( ) ; i ++ ) { if ( record . tbsimbolo . tipos . get ( i ) instanceof TipoRecord ) { trec1 = ( ( TipoRecord ) record . tbsimbolo . tipos . get ( i ) ) ; resultado . append ( "\t\t.field  public\t" ) . append ( "valuetype Ejemplo." ) . append ( trec1 . nombre ) . append ( " " ) . append ( record . tbsimbolo . lista . get ( i ) ) . append ( "\n" ) ; } else if ( record . tbsimbolo . tipos . get ( i ) instanceof TipoArray ) { } else { resultado . append ( "\t\t.field  public\t" ) . append ( record . tbsimbolo . tipos . get ( i ) . toString ( ) ) . append ( " " ) . append ( record . tbsimbolo . lista . get ( i ) ) . append ( "\n" ) ; } } resultado . append ( "\n\t}\n}\n" ) ; } tmp = tmp . getSiguiente ( ) ; } } else { resultado . append ( "" ) ; } return resultado . toString ( ) ; }
tr	2	public static TileObjectDisplayData getWeaponDisplayData ( Weapon w ) { TileObjectDisplayData data = getItemDisplayData ( w ) ; data . type = "Weapon" ; if ( w == null ) { data . addDatum ( "Attack" , "1" , true ) ; } else { data . addDatum ( "Attack" , Integer . toString ( w . getAttackValue ( ) ) , true ) ; } return data ; }
tr	3	public List < UsuarioSistema > listarTodos ( ) throws ErroValidacaoException , Exception { try { PreparedStatement comando = banco . getConexao ( ) . prepareStatement ( "select p.id as idpessoa nome cpf rg " + "data_nascimento u.id as idusuario  usuario from pessoas " + "p inner join usuarios_sistema u on u.id_pessoa = p.id" ) ; ResultSet consulta = comando . executeQuery ( ) ; comando . getConnection ( ) . commit ( ) ; List < UsuarioSistema > Lista = new LinkedList < > ( ) ; while ( consulta . next ( ) ) { UsuarioSistema tmp = new UsuarioSistema ( ) ; tmp . setCpf ( consulta . getInt ( "CPF" ) ) ; tmp . setDataNascimento ( consulta . getDate ( "Data_Nascimento" ) ) ; tmp . setNome ( consulta . getString ( "Nome" ) ) ; tmp . setId ( consulta . getInt ( "Id_Pessoa" ) ) ; tmp . setId ( consulta . getInt ( "Id_Usuario" ) ) ; tmp . setRg ( consulta . getString ( "RG" ) ) ; tmp . setUsuario ( consulta . getString ( "Usuario" ) ) ; Lista . add ( tmp ) ; } return Lista ; } catch ( SQLException ex ) { ex . printStackTrace ( ) ; return null ; } }
tr	3	public void exit ( ) { for ( List < GameSystem > s : systems . values ( ) ) { for ( GameSystem system : s ) { system . exit ( ) ; } } systems . clear ( ) ; }
tr	4	public void printBoard ( ) { int rowEnd = g . getBoard ( ) . numRows ; int colEnd = g . getBoard ( ) . numColumns ; System . out . println ( "{" ) ; for ( int j = 0 ; j < rowEnd ; j ++ ) { System . out . print ( "{ " ) ; for ( int i = 0 ; i < colEnd ; i ++ ) { System . out . printf ( "%1d " , g . getBoard ( ) . getGameGrid ( ) [ i ] [ j ] . getState ( ) ) ; if ( ! ( i == colEnd - 1 ) ) { System . out . print ( " " ) ; } } System . out . print ( " }" ) ; if ( ! ( j == rowEnd - 1 ) ) { System . out . println ( " " ) ; } else { System . out . println ( ) ; } } System . out . println ( "}" ) ; }
tr	4	private Map < String , List < String >> decodeParams ( String s ) { Map < String , List < String >> params = new LinkedHashMap < String , List < String >> ( ) ; String name = null ; int pos = 0 ; int i ; char c = 0 ; for ( i = 0 ; i < s . length ( ) ; i ++ ) { c = s . charAt ( i ) ; if ( c == = && name == null ) { if ( pos != i ) { name = decodeComponent ( s . substring ( pos , i ) , charset ) ; } pos = i + 1 ; } else if ( c == & ) { if ( name == null && pos != i ) { addParam ( params , decodeComponent ( s . substring ( pos , i ) , charset ) , "" ) ; } else if ( name != null ) { addParam ( params , name , decodeComponent ( s . substring ( pos , i ) , charset ) ) ; name = null ; } pos = i + 1 ; } } if ( pos != i ) { if ( name == null ) { addParam ( params , decodeComponent ( s . substring ( pos , i ) , charset ) , "" ) ; } else { addParam ( params , name , decodeComponent ( s . substring ( pos , i ) , charset ) ) ; } } else if ( name != null ) { addParam ( params , name , "" ) ; } return params ; }
tr	4	private void saveButtonActionPerformed ( java . awt . event . ActionEvent evt ) { if ( nombrelaboratoriosField . getText ( ) . trim ( ) . isEmpty ( ) || telefonolaboratorios1Field . getText ( ) . trim ( ) . isEmpty ( ) || sucursalField . getText ( ) . trim ( ) . isEmpty ( ) ) { JOptionPane . showMessageDialog ( this , "Debe de llenar todos los campos marcados con * como minimo para poder guardar." , "ADVERTENCIA" , WIDTH ) ; } else { try { entityManager . getTransaction ( ) . commit ( ) ; entityManager . getTransaction ( ) . begin ( ) ; JOptionPane . showMessageDialog ( this , "Laboratorio guardado existosamente." , "Laboratorio guardado" , WIDTH ) ; entityManager . getTransaction ( ) . rollback ( ) ; entityManager . getTransaction ( ) . begin ( ) ; java . util . Collection data = query . getResultList ( ) ; for ( Object entity : data ) { entityManager . refresh ( entity ) ; } list . clear ( ) ; list . addAll ( data ) ; newButton . setEnabled ( true ) ; saveButton . setEnabled ( false ) ; } catch ( RollbackException rex ) { rex . printStackTrace ( ) ; entityManager . getTransaction ( ) . begin ( ) ; List < farmacia . Laboratorios > merged = new ArrayList < farmacia . Laboratorios > ( list . size ( ) ) ; for ( farmacia . Laboratorios l : list ) { merged . add ( entityManager . merge ( l ) ) ; } list . clear ( ) ; list . addAll ( merged ) ; newButton . setEnabled ( true ) ; } } }
tr	2	public String showDisplay ( Connection aconn ) { CCodeDesc series = new CCodeDesc ( aconn , "SeriesTbl" , "SeriesCd" , "SeriesNm" , "SeriesCd" ) ; CCodeDesc results = new CCodeDesc ( aconn , "EvalResultTbl" , "ResultCd" , "ResultNm" , "ResultCd" ) ; String retstr = " <table class=\"result\" >" ; retstr = retstr + "<tr>" ; retstr = retstr + "<td class=\"restitleleft\" >&nbsp;&nbsp;Evaluation Results</td> </tr> </table>" ; retstr = retstr + "<table class='factors' summary='next dose evaluation'>\n" ; retstr = retstr + "<col style='width:20%'><col style='width:15%'><col style='width:5%'>" ; retstr = retstr + "<col style='width:3%'><col style='width:3%'><col style='width:3%'><col style='width:3%'><col style='width:8%'>" ; retstr = retstr + "<col style='width:3%'><col style='width:3%'><col style='width:3%'><col style='width:3%'><col style='width:8%'>" ; retstr = retstr + "<col style='width:3%'><col style='width:3%'><col style='width:3%'><col style='width:3%'><col style='width:8%'>" ; retstr = retstr + "<tr>\n" ; retstr = retstr + " <td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td class='subtitle' style='border-bottom-color: #0066FF;' colspan='5'>Accelerated Schedule</td><td class='subtitle' style='border-bottom-color: #00CC00;' colspan='5'>Recommended Schedule</td><td class='subtitle'  style='border-bottom-color: #FF6600;' colspan='5'>Overdue Schedule</td></tr><tr>" ; retstr = retstr + "<th class='factors' scope='col'>Series</th>\n" ; retstr = retstr + "<th class='factors' scope='col'>Status</th>\n" ; retstr = retstr + "<th class='factors' scope='col'>Dose</th>\n" ; retstr = retstr + "<th class='factors' scope='col'>Yrs</th>\n" ; retstr = retstr + "<th class='factors' scope='col'>Mos</th>\n" ; retstr = retstr + "<th class='factors' scope='col'>Wks</th>\n" ; retstr = retstr + "<th class='factors' scope='col'>Dys</th>\n" ; retstr = retstr + "<th class='factors' scope='col'>Acc Date</th>\n" ; retstr = retstr + "<th class='factors' scope='col'>Yrs</th>\n" ; retstr = retstr + "<th class='factors' scope='col'>Mos</th>\n" ; retstr = retstr + "<th class='factors' scope='col'>Wks</th>\n" ; retstr = retstr + "<th class='factors' scope='col'>Dys</th>\n" ; retstr = retstr + "<th class='factors' scope='col'>Rec Date</th>\n" ; retstr = retstr + "<th class='factors' scope='col'>Yrs</th>\n" ; retstr = retstr + "<th class='factors' scope='col'>Mos</th>\n" ; retstr = retstr + "<th class='factors' scope='col'>Wks</th>\n" ; retstr = retstr + "<th class='factors' scope='col'>Dys</th>\n" ; retstr = retstr + "<th class='factors' scope='col'>Ovr Date</th></tr>\n" ; for ( int idx = 0 ; idx < this . getCount ( ) ; idx ++ ) { CEvalItem myitem = ( CEvalItem ) this . getItem ( idx ) ; retstr = retstr + "<tr>\n" ; retstr = retstr + "<td class='result'>" + series . getDescByCode ( myitem . seriescd ) + "</td>\n" ; retstr = retstr + "<td class='result'>" + results . getDescByCode ( myitem . resultcd ) + "</td>\n" ; retstr = retstr + "<td class='factors'>" + Integer . toString ( myitem . doseord ) + "</td>\n" ; retstr = retstr + "<td class='factors' name='EAyrs" + idx + "' id='EAyrs" + idx + "'></td>\n" ; retstr = retstr + "<td class='factors' name='EAmos" + idx + "' id='EAmos" + idx + "'></td>\n" ; retstr = retstr + "<td class='factors' name='EAwks" + idx + "' id='EAwks" + idx + "'></td>\n" ; retstr = retstr + "<td class='factors' name='EAdys" + idx + "' id='EAdys" + idx + "'></td>\n" ; retstr = retstr + "<td class='factors' name='EAdate" + idx + "' id='EAdate" + idx + "'>" + myitem . getAccelDateStr ( ) + "</td>\n" ; retstr = retstr + "<td class='factors' name='ERyrs" + idx + "' id='ERyrs" + idx + "'></td>\n" ; retstr = retstr + "<td class='factors' name='ERmos" + idx + "' id='ERmos" + idx + "'></td>\n" ; retstr = retstr + "<td class='factors' name='ERwks" + idx + "' id='ERwks" + idx + "'></td>\n" ; retstr = retstr + "<td class='factors' name='ERdys" + idx + "' id='ERdys" + idx + "'></td>\n" ; retstr = retstr + "<td class='factors' name='ERdate" + idx + "' id='ERdate" + idx + "'>" + myitem . getRecomDateStr ( ) + "</td>\n" ; retstr = retstr + "<td class='factors' name='EOyrs" + idx + "' id='EOyrs" + idx + "'></td>\n" ; retstr = retstr + "<td class='factors' name='EOmos" + idx + "' id='EOmos" + idx + "'></td>\n" ; retstr = retstr + "<td class='factors' name='EOwks" + idx + "' id='EOwks" + idx + "'></td>\n" ; retstr = retstr + "<td class='factors' name='EOdys" + idx + "' id='EOdys" + idx + "'></td>\n" ; retstr = retstr + "<td class='factors' name='EOdate" + idx + "' id='EOdate" + idx + "'>" + myitem . getOverdueDateStr ( ) + "</td>\n" ; retstr = retstr + "</tr>\n" ; } retstr = retstr + "</table><br>\n" ; return ( retstr ) ; }
tr	3	public Register ( ) { userDao = new UserDao ( ) ; setTitle ( "\u6CE8\u518C" ) ; setResizable ( false ) ; setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ) ; setBounds ( 100 , 100 , 245 , 191 ) ; contentPane = new JPanel ( ) ; contentPane . setBorder ( new EmptyBorder ( 5 , 5 , 5 , 5 ) ) ; setContentPane ( contentPane ) ; JLabel userNameLabel = new JLabel ( "\u7528\u6237\u540D" ) ; JLabel passwordLabel = new JLabel ( "\u5BC6\u7801" ) ; JLabel passwordConfirmLabel = new JLabel ( "\u5BC6\u7801\u786E\u8BA4" ) ; userName = new JTextField ( ) ; userName . setColumns ( 10 ) ; pwd = new JPasswordField ( ) ; pwdConfirm = new JPasswordField ( ) ; JButton regist = new JButton ( "\u6CE8\u518C" ) ; regist . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { regist ( e ) ; } } ) ; JButton button = new JButton ( "\u53D6\u6D88" ) ; button . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { cancel ( e ) ; } } ) ; GroupLayout gl_contentPane = new GroupLayout ( contentPane ) ; gl_contentPane . setHorizontalGroup ( gl_contentPane . createParallelGroup ( Alignment . LEADING ) . addGroup ( gl_contentPane . createSequentialGroup ( ) . addContainerGap ( ) . addGroup ( gl_contentPane . createParallelGroup ( Alignment . LEADING ) . addComponent ( userNameLabel ) . addComponent ( passwordLabel ) . addComponent ( passwordConfirmLabel ) ) . addGap ( 6 ) . addGroup ( gl_contentPane . createParallelGroup ( Alignment . LEADING ) . addGroup ( Alignment . TRAILING , gl_contentPane . createSequentialGroup ( ) . addComponent ( regist ) . addPreferredGap ( ComponentPlacement . RELATED , 22 , short . MAX_VALUE ) . addComponent ( button ) ) . addComponent ( pwdConfirm , GroupLayout . DEFAULT_SIZE , 140 , short . MAX_VALUE ) . addComponent ( userName , GroupLayout . DEFAULT_SIZE , 140 , short . MAX_VALUE ) . addComponent ( pwd , GroupLayout . DEFAULT_SIZE , 140 , short . MAX_VALUE ) ) . addContainerGap ( 25 , GroupLayout . PREFERRED_SIZE ) ) ) ; gl_contentPane . setVerticalGroup ( gl_contentPane . createParallelGroup ( Alignment . LEADING ) . addGroup ( gl_contentPane . createSequentialGroup ( ) . addContainerGap ( ) . addGroup ( gl_contentPane . createParallelGroup ( Alignment . BASELINE ) . addComponent ( userNameLabel ) . addComponent ( userName , GroupLayout . PREFERRED_SIZE , GroupLayout . DEFAULT_SIZE , GroupLayout . PREFERRED_SIZE ) ) . addPreferredGap ( ComponentPlacement . UNRELATED ) . addGroup ( gl_contentPane . createParallelGroup ( Alignment . BASELINE ) . addComponent ( passwordLabel ) . addComponent ( pwd , GroupLayout . PREFERRED_SIZE , 22 , GroupLayout . PREFERRED_SIZE ) ) . addPreferredGap ( ComponentPlacement . UNRELATED ) . addGroup ( gl_contentPane . createParallelGroup ( Alignment . BASELINE ) . addComponent ( passwordConfirmLabel ) . addComponent ( pwdConfirm , GroupLayout . PREFERRED_SIZE , GroupLayout . DEFAULT_SIZE , GroupLayout . PREFERRED_SIZE ) ) . addPreferredGap ( ComponentPlacement . RELATED , 27 , short . MAX_VALUE ) . addGroup ( gl_contentPane . createParallelGroup ( Alignment . BASELINE ) . addComponent ( button ) . addComponent ( regist ) ) . addContainerGap ( ) ) ) ; contentPane . setLayout ( gl_contentPane ) ; setLocationRelativeTo ( null ) ; }
tr	1	public String getMateria ( ) { return materia ; }
tr	5X	public Simulator ( ) throws InterruptedException { GUIManager . simulator = this ; phase = Phase . INIT ; Thread simulatorThread = new Thread ( new Runnable ( ) { @ Override public void run ( ) { Log . finer ( "maked Simulation Instance." ) ; setting ( ) ; int periodTime = Conf . CountPeriod ; long start , end , - , sleepTime ; while ( true ) { start = System . currentTimeMillis ( ) ; select ( ) ; end = System . currentTimeMillis ( ) ; - = end - start ; sleepTime = 1000 / periodTime - - ; try { Thread . sleep ( ( sleepTime >= 0 ? sleepTime : 0 ) ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } } } } ) ; simulatorThread . start ( ) ; Log . finer ( "end of Simulation Instance." ) ; }
tr	2	@ Test ( timeout = TIMEOUT ) public void test_size_after_adding_unique_nums ( ) { int [ ] testArray = { 0 , 1 , 2 , 3 , 4 } ; addAndTestSize ( "Added " + Arrays . toString ( testArray ) , testArray , 5 ) ; }
tr	2	public static double inverseSensorModel_old ( Point p , Point measurement , RobotState sensorState , int z , Sensor s ) { double result ; int r = Utils . euclideanDistance ( new Point ( sensorState . x , sensorState . y ) , p ) ; if ( z == - 1 ) { result = Config . LOGODD_START ; } else if ( r > Math . min ( s . zMax , z ) + Config . GRID_CELL_SIZE ) { result = Config . LOGODD_START ; } else if ( z < s . zMax && p . equals ( measurement ) ) { result = Config . LOGODD_OCCUPIED_CORRECT ; } else if ( r < z ) { result = Config . LOGODD_OCCUPIED_WRONG ; } else { result = Config . LOGODD_START ; } return result ; }
tr	3	public void recordProperNouns ( String sentence ) { if ( sentence == null ) { return ; } sentence = sentence . replaceAll ( "[(\\[{]\\s*[A-Z]" , " " ) ; Pattern p = Pattern . compile ( "(.+)\\b([A-Z][a-z]*)\\b" ) ; Matcher m = p . matcher ( sentence ) ; while ( m . find ( ) ) { String pattern = m . group ( 2 ) ; pattern = pattern . toLowerCase ( ) ; sentence = m . group ( 1 ) ; if ( pattern . length ( ) > 1 ) { this . myLearnerUtility . getConstant ( ) . pronounWords . add ( pattern ) ; this . myLearnerUtility . getConstant ( ) . updatePronoun ( ) ; } m = p . matcher ( sentence ) ; } }
tr	2	public int getMaxQuantity ( int quantity ) { if ( currentQuantity + quantity > maxQuantity ) { throw new StoreProblemException ( ) ; } return currentQuantity + quantity ; }
tr	5X	@ Deprecated static List < Object > graphToRDF ( Map < String , Object > graph , UniqueNamer namer ) { final List < Object > rval = new ArrayList < Object > ( ) ; for ( final String id : graph . keySet ( ) ) { final Map < String , Object > node = ( Map < String , Object > ) graph . get ( id ) ; final List < String > properties = new ArrayList < String > ( node . keySet ( ) ) ; Collections . sort ( properties ) ; for ( String property : properties ) { final Object items = node . get ( property ) ; if ( "@type" . equals ( property ) ) { property = RDF_TYPE ; } else if ( isKeyword ( property ) ) { continue ; } for ( final Object item : ( List < Object > ) items ) { final Map < String , Object > subject = new LinkedHashMap < String , Object > ( ) ; if ( id . indexOf ( "_:" ) == 0 ) { subject . put ( "type" , "blank node" ) ; subject . put ( "value" , namer . getName ( id ) ) ; } else { subject . put ( "type" , "IRI" ) ; subject . put ( "value" , id ) ; } final Map < String , Object > predicate = new LinkedHashMap < String , Object > ( ) ; predicate . put ( "type" , "IRI" ) ; predicate . put ( "value" , property ) ; if ( isList ( item ) ) { listToRDF ( ( List < Object > ) ( ( Map < String , Object > ) item ) . get ( "@list" ) , namer , subject , predicate , rval ) ; } else { final Object object = objectToRDF ( item , namer ) ; final Map < String , Object > tmp = new LinkedHashMap < String , Object > ( ) ; tmp . put ( "subject" , subject ) ; tmp . put ( "predicate" , predicate ) ; tmp . put ( "object" , object ) ; rval . add ( tmp ) ; } } } } return rval ; }
tr	4	public FirstChoicePercent ( AlgorithmOutput output ) { int total = 0 ; int firsts = 0 ; for ( Timeslot t : output . keySet ( ) ) { for ( Student s : output . get ( t ) ) { total ++ ; if ( s . getFirstChoiceLabs ( ) . contains ( s . getAssignedLab ( ) ) ) { firsts ++ ; } } } this . fitness = ( double ) 100 * ( ( double ) firsts / ( double ) total ) ; if ( DEBUG ) { System . out . println ( fitness ) ; } output . addFitness ( "FirstChoicePercent" , fitness ) ; }
tr	1	public String getTestingModeAnswer ( ) { return "Test Answer" ; }
tr	5X	@ Override public void positionChanged ( int newPosition ) { ScrolledNotesCanvas scrolledNotesCanvas = mainView . getScrolledNotesCanvas ( ) ; if ( playing && repeats . size ( ) == 2 ) { if ( newPosition < repeats . get ( 1 ) ) { scrolledNotesCanvas . scrollToPosition ( repeats . get ( 0 ) ) ; return ; } } Set < Note > notes = scrolledNotesCanvas . getNotesAtPosition ( newPosition ) ; Set < Pitch > pitches = new HashSet < Pitch > ( ) ; for ( Note note : notes ) { pitches . add ( note . getPitch ( ) ) ; } PianoCanvas pianoCanvas = mainView . getPianoCanvas ( ) ; pianoCanvas . setSelectedNotes ( notes ) ; final Set < Note > newNotes = new HashSet < Note > ( notes ) ; newNotes . removeAll ( oldNotes ) ; waitingNotes . setWaitingNotes ( newNotes ) ; waitingNotes . setAutoplayCallback ( new Runnable ( ) { public void run ( ) { try { for ( Note note : newNotes ) { if ( note . getTrack ( ) . isActive ( ) ) { if ( note . getTrack ( ) . isAutoplay ( ) ) { midiKeyboard . play ( note . getPitch ( ) , note . getVelocity ( ) , note . getDuration ( ) ) ; } } } } catch ( Exception e ) { e . printStackTrace ( ) ; } } } ) ; if ( anyActiveNonAutoplay ( ) ) { if ( waitingNotes . waiting ( ) ) { midiKeyboard . setGuideLightsFromNotes ( waitingNotes . getWaitingNotes ( ) ) ; } else { Set < Note > nextNotes = scrolledNotesCanvas . getNotesAfterPosition ( newPosition ) ; midiKeyboard . setGuideLightsFromNotes ( Controller . filterWaitable ( nextNotes ) ) ; } } else { midiKeyboard . setGuideLightsFromNotes ( getActiveNotes ( notes ) ) ; } oldNotes = notes ; ScoreCanvas scoreCanvas = mainView . getScoreCanvas ( ) ; scoreCanvas . positionChanged ( scrolledNotesCanvas . getTicksFromBeginning ( newPosition ) ) ; }
tr	2	@ Override protected boolean isConsumed ( KeyboardEvent e ) { boolean rc = false ; if ( e . getKey ( ) == Keyboard . KEY_UP || e . getKey ( ) == Keyboard . KEY_DOWN ) { rc = true ; } return rc ; }
tr	5X	private void setDebug ( final ComponentWrapper parentW , boolean b ) { if ( b && ( debugTimer == null || debugTimer . getDelay ( ) != getDebugMillis ( ) ) ) { if ( debugTimer != null ) debugTimer . stop ( ) ; ContainerWrapper pCW = parentW . getParent ( ) ; final Component parent = pCW != null ? ( Component ) pCW . getComponent ( ) : null ; debugTimer = new Timer ( getDebugMillis ( ) , new MyDebugRepaintListener ( ) ) ; if ( parent != null ) { SwingUtilities . invokeLater ( new Runnable ( ) { public void run ( ) { Container p = parent . getParent ( ) ; if ( p != null ) { if ( p instanceof JComponent ) { ( ( JComponent ) p ) . revalidate ( ) ; } else { parent . invalidate ( ) ; p . validate ( ) ; } } } } ) ; } debugTimer . setInitialDelay ( 100 ) ; debugTimer . start ( ) ; } else if ( ! b && debugTimer != null ) { debugTimer . stop ( ) ; debugTimer = null ; } }
tr	5X	@ Override public void showHints ( int level ) { for ( int x = 1 ; x <= 16 ; x ++ ) { for ( int y = 1 ; y <= 16 ; y ++ ) { Point p = new Point ( x , y ) ; if ( ! isReadOnly ( p ) ) { BitSet markUp = getHints ( p , level ) ; if ( level == 0 ) { System . out . println ( String . format ( "(%s  %s) : %s" , x , y , markUp ) ) ; } else { System . out . println ( String . format ( "(%s  %s) : %s [%s]" , x , y , markUp , getHints ( p , 0 ) ) ) ; } } } } System . out . println ( ) ; }
tr	2	public static void main ( String args [ ] ) { LinkedListBST b = new LinkedListBST ( ) ; ListNode a = new ListNode ( 1 ) ; ListNode a2 = a ; for ( int i = 0 ; i < 5 ; i ++ ) { a . next = new ListNode ( i + 2 ) ; a = a . next ; } TreeNode t = b . sortedListToBST ( a2 ) ; t . print ( t ) ; }
tr	2	private Meter getSelectedMeter ( ) { Account temp = getSelectedAccount ( ) ; if ( temp != null ) { Meter m = temp . getMeter ( getSelectedMeterID ( ) ) ; return m ; } else return null ; }
tr	3	private void select ( String s ) { int index = Integer . parseInt ( s ) ; for ( RenderableObject o : ( ( MainFrame ) frame ) . getObjects ( ) ) { if ( o . getID ( ) == index ) { selectItem ( index ) ; } } clearIdentities ( ) ; }
tr	1	public List < Campaign > getCamlist ( ) { return camlist ; }
tr	5X	private List < Next > nextStates ( State < C > state ) { int m ; List < Transition > nexts = new ArrayList < > ( _transitions . get ( state ) ) ; List < Next > result = new ArrayList < > ( ) ; int offset = 0 ; while ( true ) { m = nextDeadLine ( nexts , offset ) ; if ( m != Integer . MAX_VALUE ) { result . add ( selectNextState ( m - offset , m , nexts ) ) ; offset = m ; } else { switch ( nexts . size ( ) ) { case 0 : throw new RuntimeException ( "Automata has no default transition for node: " + state ) ; case 1 : Transition target = nexts . get ( 0 ) ; Next timeout = new Next ( target . timeout ) ; timeout . add ( target . state , target . predicate ) ; result . add ( timeout ) ; break ; default : Next infinites = new Next ( INFINITY ) ; for ( Transition t : nexts ) { if ( t . timeout != INFINITY ) throw new RuntimeException ( "Cannot mix timeout alternative and infinite guards  neither having more than a single timeout alternative ('" + state + "': " + nexts + ")" ) ; infinites . add ( t . state , t . predicate ) ; } result . add ( infinites ) ; } break ; } } return result ; }
tr	2	@ Override protected void drawComponentBody ( Graphics2D g ) { int [ ] xx = { x , x + width / 6 , x + width - width / 6 , x + width , x + width , x + width - width / 6 , x + width / 6 , x } ; int [ ] yy = { y + height / 6 , y , y , y + height / 6 , y + height - height / 6 , y + height , y + height , y + height - height / 6 } ; g . drawPolygon ( xx , yy , xx . length ) ; Stroke strokeSave = g . getStroke ( ) ; g . setStroke ( new BasicStroke ( 0.5f ) ) ; g . drawPolygon ( new int [ ] { x , x + width , x + width , x } , new int [ ] { y , y , y + height , y + height } , 4 ) ; g . setStroke ( strokeSave ) ; }
tr	4	@ Override @ Transactional public List getFilterValuesforReview ( String merchantName , String userName , String reviewStatus ) throws Exception { List filterValuesList = new ArrayList ( ) ; try { if ( merchantName != null ) { Query getMerchant = sessionFactory . getCurrentSession ( ) . createQuery ( "select merchantReview.oMerchant from MerchantReview merchantReview" ) ; filterValuesList = getMerchant . list ( ) ; System . out . println ( "merchant size..." + filterValuesList . size ( ) ) ; Iterator iterator = filterValuesList . iterator ( ) ; while ( iterator . hasNext ( ) ) { Merchant merchant = ( Merchant ) iterator . next ( ) ; System . out . println ( "merchant-------->" + merchant ) ; } } else if ( userName != null ) { Query getCashBackuser = sessionFactory . getCurrentSession ( ) . createQuery ( "select merchantReview.oCashBackUser from MerchantReview merchantReview" ) ; filterValuesList = getCashBackuser . list ( ) ; System . out . println ( "user size..." + filterValuesList . size ( ) ) ; Iterator iterator = filterValuesList . iterator ( ) ; while ( iterator . hasNext ( ) ) { CashBackUser cashBackUser = ( CashBackUser ) iterator . next ( ) ; System . out . println ( "user-------->" + cashBackUser ) ; } } else { Query getReview = sessionFactory . getCurrentSession ( ) . createQuery ( "select merchantReview.oStatus from MerchantReview merchantReview" ) ; filterValuesList = getReview . list ( ) ; System . out . println ( "review status size..." + filterValuesList . size ( ) ) ; Iterator iterator = filterValuesList . iterator ( ) ; while ( iterator . hasNext ( ) ) { MerchantReviewStatus MerchantreviewStatus = ( MerchantReviewStatus ) iterator . next ( ) ; System . out . println ( "reviewStatus-------->" + MerchantreviewStatus ) ; } } } catch ( Exception exception ) { throw exception ; } return filterValuesList ; }
tr	1	public boolean isInterested ( ) { return this . interested ; }
tr	2	private final char med3 ( char a , char b , char c ) { char m ; if ( a < b ) { m = b <= c ? b : a < c ? c : a ; } else { m = c >= a ? a : c > b ? c : b ; } return m ; }
tr	5X	@ Override public void run ( ) throws Exception { try { ConfigFile importFile = new ConfigFile ( plugin ) ; ConfigSQL importSQL = new ConfigSQL ( plugin ) ; if ( ! importSQL . checkDatabase ( ) ) { throw new Exception ( "Could not connect to database !" ) ; } for ( String player : importFile . getAllPlayers ( ) ) { for ( String group : importFile . getPlayerGroups ( player ) ) { importSQL . addPlayerGroup ( player , group ) ; } for ( Entry < String , boolean > permission : importFile . getPlayerPermissions ( player ) . entrySet ( ) ) { importSQL . addPlayerPermission ( player , permission . getKey ( ) , permission . getValue ( ) ) ; } for ( String world : importFile . getPlayerWorlds ( player ) ) { for ( Entry < String , boolean > permission : importFile . getPlayerPermissions ( player , world ) . entrySet ( ) ) { importSQL . addPlayerPermission ( player , world , permission . getKey ( ) , permission . getValue ( ) ) ; } } } } catch ( Exception e ) { throw e ; } }
tr	4	public List < VariableAppearance > getAltAppearances ( ParsingContext context ) { List < VariableAppearance > result = new ArrayList < VariableAppearance > ( ) ; for ( String variableName : detectedVariableNames ) { for ( int i = 0 ; i < altPrefixRegexps . size ( ) ; i ++ ) { String completeRegexp = altPrefixRegexps . get ( i ) + variableName + altSuffixRegexps . get ( i ) ; Matcher matcher = Pattern . compile ( completeRegexp ) . matcher ( context . getContent ( ) ) ; while ( matcher . find ( ) ) { result . add ( new VariableAppearance ( matcher . group ( ) , variableName , globalContext , context , "" ) ) ; } } } return result ; }
tr	5X	protected String getPresentationName ( ) { if ( countDifferences ( oldValue , newValue ) == 1 ) { for ( Features feature : Features . values ( ) ) { if ( feature . isChosen ( oldValue ) != feature . isChosen ( newValue ) ) { if ( feature . isChosen ( newValue ) ) { return "set cell " + feature . toString ( ) ; } else { return "unset cell " + feature . toString ( ) ; } } } } return "change cell features" ; }
tr	1	public JButton getButtonClose ( ) { return btnClose ; }
tr	4	public DefaultSettingsModifierPanel ( GCT gctarg , boolean [ ] editedarg ) { gct = gctarg ; edited = editedarg ; setLayout ( new BorderLayout ( ) ) ; useCode = new JCheckBox ( "Include Default Settings Modifier" , findDSMInstance ( ) ) ; useCode . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent arg0 ) { edited [ 0 ] = true ; if ( dsm != null ) { gct . deleteDynamicCode ( dsm ) ; dsm = null ; } else { dsm = new DSM ( ) ; gct . addDynamicCode ( dsm ) ; } initialize ( ) ; } } ) ; add ( useCode , BorderLayout . NORTH ) ; container = new JPanel ( ) ; container . setLayout ( new BoxLayout ( container , BoxLayout . Y_AXIS ) ) ; JPanel [ ] rows = { new JPanel ( ) , new JPanel ( ) , new JPanel ( ) } ; for ( JPanel p : rows ) { p . setLayout ( new BoxLayout ( p , BoxLayout . X_AXIS ) ) ; container . add ( p ) ; } add ( container , BorderLayout . CENTER ) ; gameType = new JComboBox ( ) ; gameType . addItem ( "Time" ) ; gameType . addItem ( "Stock" ) ; gameType . addItem ( "Coin" ) ; gameType . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent arg0 ) { dsm . setGameType ( ( byte ) gameType . getSelectedIndex ( ) ) ; } } ) ; rows [ 0 ] . add ( new JLabel ( "Game Type: " ) ) ; rows [ 0 ] . add ( gameType ) ; time = new SpinnerNumberModel ( 4 , 0 , 99 , 1 ) ; time . addChangeListener ( new ChangeListener ( ) { public void stateChanged ( ChangeEvent arg0 ) { byte b = time . getNumber ( ) . byteValue ( ) ; dsm . setTimeLimit ( b ) ; edited [ 0 ] = true ; } } ) ; rows [ 0 ] . add ( new JLabel ( "Time (min): " ) ) ; rows [ 0 ] . add ( new JSpinner ( time ) ) ; stock = new SpinnerNumberModel ( 4 , 1 , 99 , 1 ) ; stock . addChangeListener ( new ChangeListener ( ) { public void stateChanged ( ChangeEvent arg0 ) { byte b = stock . getNumber ( ) . byteValue ( ) ; dsm . setStock ( b ) ; edited [ 0 ] = true ; } } ) ; rows [ 0 ] . add ( new JLabel ( "Stock: " ) ) ; rows [ 0 ] . add ( new JSpinner ( stock ) ) ; stocktime = new SpinnerNumberModel ( 8 , 0 , 99 , 1 ) ; stocktime . addChangeListener ( new ChangeListener ( ) { public void stateChanged ( ChangeEvent arg0 ) { byte b = stocktime . getNumber ( ) . byteValue ( ) ; dsm . setStockTimeLimit ( b ) ; edited [ 0 ] = true ; } } ) ; rows [ 0 ] . add ( new JLabel ( "Stock-mode time: " ) ) ; rows [ 0 ] . add ( new JSpinner ( stocktime ) ) ; handicap = new JComboBox ( ) ; handicap . addItem ( "Off" ) ; handicap . addItem ( "Auto" ) ; handicap . addItem ( "On" ) ; handicap . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent arg0 ) { dsm . setHandicap ( ( byte ) handicap . getSelectedIndex ( ) ) ; edited [ 0 ] = true ; } } ) ; rows [ 1 ] . add ( new JLabel ( "Handicap: " ) ) ; rows [ 1 ] . add ( handicap ) ; damageRatio = new SpinnerNumberModel ( 1.0 , 0.5 , 2.0 , .1 ) ; damageRatio . addChangeListener ( new ChangeListener ( ) { public void stateChanged ( ChangeEvent arg0 ) { double d = 10 * damageRatio . getNumber ( ) . doubleValue ( ) ; dsm . setDamageRatio ( d ) ; edited [ 0 ] = true ; } } ) ; rows [ 1 ] . add ( new JLabel ( "Damage ratio: " ) ) ; rows [ 1 ] . add ( new JSpinner ( damageRatio ) ) ; stageMethod = new JComboBox ( ) ; stageMethod . addItem ( "Choose" ) ; stageMethod . addItem ( "Random" ) ; stageMethod . addItem ( "Take turns" ) ; stageMethod . addItem ( "Ordered" ) ; stageMethod . addItem ( "Loser's pick" ) ; stageMethod . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent arg0 ) { dsm . setStageMethod ( ( byte ) stageMethod . getSelectedIndex ( ) ) ; edited [ 0 ] = true ; } } ) ; rows [ 1 ] . add ( new JLabel ( "Stage method: " ) ) ; rows [ 1 ] . add ( stageMethod ) ; teamAttack = new JCheckBox ( "Team attack" ) ; teamAttack . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent arg0 ) { dsm . setTeamAttack ( teamAttack . isSelected ( ) ) ; edited [ 0 ] = true ; } } ) ; rows [ 2 ] . add ( teamAttack ) ; pause = new JCheckBox ( "Pause" ) ; pause . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent arg0 ) { dsm . setPause ( pause . isSelected ( ) ) ; edited [ 0 ] = true ; } } ) ; rows [ 2 ] . add ( pause ) ; scoreDisplay = new JCheckBox ( "scoreDisplay" ) ; scoreDisplay . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent arg0 ) { dsm . setScoreDisplay ( scoreDisplay . isSelected ( ) ) ; edited [ 0 ] = true ; } } ) ; rows [ 2 ] . add ( scoreDisplay ) ; damageGauge = new JCheckBox ( "damageGauge" ) ; damageGauge . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent arg0 ) { dsm . setDamageGauge ( damageGauge . isSelected ( ) ) ; edited [ 0 ] = true ; } } ) ; rows [ 2 ] . add ( damageGauge ) ; initialize ( ) ; }
tr	2	public void drawButtons ( ) { for ( int x = 0 ; x < buttons . size ( ) ; x ++ ) { buttons . get ( x ) . draw ( ScreenX , ScreenY ) ; } }
va	4	Tester ( long _seed ) throws Exception { loadWords ( ) ; setSeed ( _seed ) ; setDefaultCloseOperation ( EXIT_ON_CLOSE ) ; c = new TesterCanvas ( ) ; c . setPreferredSize ( new Dimension ( 600 , 400 ) ) ; Container cp = getContentPane ( ) ; cp . setLayout ( new BorderLayout ( ) ) ; cp . add ( c , BorderLayout . CENTER ) ; cp . add ( c . seedText , BorderLayout . NORTH ) ; JPanel jp = new JPanel ( ) ; JButton e = new JButton ( "english" ) ; e . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent arg0 ) { int index = r . nextInt ( ewords . size ( ) ) ; String word = ewords . get ( index ) ; c . english = word ; c . portuguese = null ; count ++ ; c . repaint ( ) ; } } ) ; JButton p = new JButton ( "portuguese" ) ; p . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent arg0 ) { int index = r . nextInt ( pwords . size ( ) ) ; System . out . println ( "index = " + index ) ; String word = pwords . get ( index ) ; c . english = null ; c . portuguese = word ; count ++ ; c . repaint ( ) ; } } ) ; JButton t = new JButton ( "translate" ) ; t . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent arg0 ) { if ( c . english != null ) { c . portuguese = e2p . get ( c . english ) ; } else if ( c . portuguese != null ) { c . english = p2e . get ( c . portuguese ) ; } c . repaint ( ) ; } } ) ; JButton r = new JButton ( "reset" ) ; r . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { setSeed ( seed ) ; c . repaint ( ) ; } } ) ; jp . setLayout ( new FlowLayout ( ) ) ; jp . add ( e ) ; jp . add ( t ) ; jp . add ( p ) ; jp . add ( r ) ; cp . add ( jp , BorderLayout . SOUTH ) ; pack ( ) ; setVisible ( true ) ; }
va	4	private void doTransfer ( ) throws IOException { if ( ressourceInputStream == null ) { if ( sendHeaderInRsp ) { String header = new FileRequestResponseMessage ( ResponseCode . NEVER_TRY_AGAIN , 0 ) . Serialize ( ) ; logger . info ( "send header '" + header + "'" ) ; networkOutputStream . write ( header . getBytes ( ) ) ; } networkOutputStream . close ( ) ; return ; } else { if ( offset > numAvailableData ) { logger . log ( Level . INFO , "Requested offset is not valid: requested " + offset + "  length of file: " + numAvailableData ) ; if ( sendHeaderInRsp ) networkOutputStream . write ( new FileRequestResponseMessage ( ResponseCode . OK , 0 ) . Serialize ( ) . getBytes ( ) ) ; networkOutputStream . close ( ) ; transferState = TransferStatus . Finished ; return ; } if ( offset + expectedTransferVolume > numAvailableData ) { logger . log ( Level . INFO , "Requested length of " + expectedTransferVolume + " was too large  shortened  it to " + expectedTransferVolume ) ; expectedTransferVolume = numAvailableData - offset ; } transferState = TransferStatus . Transfering ; if ( sendHeaderInRsp ) networkOutputStream . write ( ( new FileRequestResponseMessage ( ResponseCode . OK , expectedTransferVolume ) . Serialize ( ) ) . getBytes ( Message . ENCODING ) ) ; if ( bufferSize == - 1 ) { bufferSize = FALLBACK_BUFFER_SIZE ; logger . log ( Level . INFO , "Using fallback buffersize " + bufferSize ) ; } logger . info ( "sending data" ) ; ressourceInputStream . skip ( offset ) ; int bytesRead = 0 ; int bytesToRead = bufferSize ; byte [ ] buffer = new byte [ bufferSize ] ; while ( bytesToRead > 0 && keepTransferAlive && totalTransferedVolume < expectedTransferVolume && ( bytesRead = ressourceInputStream . read ( buffer , 0 , bytesToRead ) ) != - 1 ) { networkOutputStream . write ( buffer , 0 , bytesRead ) ; totalTransferedVolume += bytesRead ; if ( totalTransferedVolume + bytesToRead > expectedTransferVolume ) { bytesToRead = ( int ) ( expectedTransferVolume - totalTransferedVolume ) ; } } networkOutputStream . flush ( ) ; networkOutputStream . close ( ) ; ressourceInputStream . close ( ) ; logger . info ( "finished sending data" ) ; if ( totalTransferedVolume == expectedTransferVolume ) transferState = TransferStatus . Finished ; else { if ( ! keepTransferAlive ) transferState = TransferStatus . Canceled ; else transferState = TransferStatus . LostConnection ; } } }
va	2	private static Expr resolveNoneParamExpr ( SyntaxTreeNode node ) { LexToken token = node . getToken ( ) ; String text = token . getText ( ) ; switch ( ( NagisaLexTokenType ) token . getType ( ) ) { case LITERAL_INTEGER : return new Expr ( ExprType . Integer , ExprOperator . IntegerLiteral , text ) ; case IDENTIFIER_INTEGER : return new Expr ( ExprType . Integer , ExprOperator . IntegerVariableRef , text ) ; case LITERAL_STRING : return new Expr ( ExprType . String , ExprOperator . StringLiteral , text ) ; case IDENTIFIER_STRING : return new Expr ( ExprType . String , ExprOperator . StringVariableRef , text ) ; default : throw new UnsupportedOperationException ( token . toString ( ) ) ; } }
va	3	public boolean contain ( Ticket ticket ) { if ( ! parkIsNull ( ) && park . contain ( ticket ) ) { return true ; } for ( ParkBoy boy : this . parkBoyList ) { if ( boy . contain ( ticket ) ) { return true ; } } return false ; }
va	5X	private int [ ] getMinPrefMaxSumSize ( boolean isHor ) { int [ ] [ ] sizes = isHor ? colFlowSpecs . sizes : rowFlowSpecs . sizes ; int [ ] retSizes = new int [ 3 ] ; BoundSize sz = isHor ? lc . getWidth ( ) : lc . getHeight ( ) ; for ( int i = 0 ; i < sizes . length ; i ++ ) { if ( sizes [ i ] != null ) { int [ ] size = sizes [ i ] ; for ( int sType = LayoutUtil . MIN ; sType <= LayoutUtil . MAX ; sType ++ ) { if ( sz . getSize ( sType ) != null ) { if ( i == 0 ) retSizes [ sType ] = sz . getSize ( sType ) . getPixels ( getParentSize ( container , isHor ) , container , null ) ; } else { int s = size [ sType ] ; if ( s != LayoutUtil . NOT_SET ) { if ( sType == LayoutUtil . PREF ) { int bnd = size [ LayoutUtil . MAX ] ; if ( bnd != LayoutUtil . NOT_SET && bnd < s ) s = bnd ; bnd = size [ LayoutUtil . MIN ] ; if ( bnd > s ) s = bnd ; } retSizes [ sType ] += s ; } if ( size [ LayoutUtil . MAX ] == LayoutUtil . NOT_SET || retSizes [ LayoutUtil . MAX ] > LayoutUtil . INF ) retSizes [ LayoutUtil . MAX ] = LayoutUtil . INF ; } } } } correctMinMax ( retSizes ) ; return retSizes ; }
va	1	@ Override public String getGrammarFileName ( ) { return "Enquanto.g4" ; }
va	4	private String makeBetween ( LangFileElement lfe ) { if ( lfe . isNewElement ( ) ) { switch ( betweenType ) { case BETWEEN_ALIGNEMENT : int len = lfe . getPrefix ( ) . length ( ) + 9 + lfe . getLine ( ) . length ( ) ; String between = " " ; for ( int i = len ; i < betweenPadding ; i ++ ) { between += " " ; } return between ; case BETWEEN_STRING : default : return betweenString ; } } else { return lfe . getBetween ( ) ; } }
va	1	public void removeColumn ( String columnID ) { htColumns . remove ( columnID ) ; }
va	3	@ Override public void tick ( Input input , double delta ) { if ( this . dummy . getCommands ( ) . isEmpty ( ) ) { double ran = Math . random ( ) ; if ( ran >= 0.5 ) { } else { this . dummy . wait ( Math . random ( ) * 0.4 ) ; } ran = Math . random ( ) ; if ( ran >= 0.2 ) { this . dummy . getCommands ( ) . add ( new JumpCommand ( this . dummy ) ) ; } } }
va	1	public Sprite ( BufferedImage image , int frameHeight , int numberOfTiles , int frameDurations [ ] ) { animation = new Animation ( ) ; SpriteLoader . parseSprite ( image , frameHeight , numberOfTiles , frameDurations , animation ) ; }
va	5X	@ Override public ConnectFuture connect ( Configuration configuration ) { final int port = configuration . getPort ( ) ; String name = configuration . getName ( ) ; Thread connectThread = new Thread ( ) { @ Override public void run ( ) { try { registry = LocateRegistry . createRegistry ( port , new RMIClientSocketFactory ( ) { @ Override public Socket createSocket ( String host , int port ) throws IOException { Socket socket = new Socket ( host , port ) ; socketList . add ( socket ) ; return socket ; } } , new RMIServerSocketFactory ( ) { @ Override public ServerSocket createServerSocket ( int port ) throws IOException { ServerSocket serverSocket = new ServerSocket ( port ) ; return serverSocket ; } } ) ; } catch ( RemoteException e ) { e . printStackTrace ( ) ; } } } ; return null ; }
va	5X	public SLA checkSLAAllocationCostMin ( SLA slaTemplate ) { SLA slaAllocation = ( SLA ) slaTemplate . clone ( ) ; Map < String , Type [ ] > allocations = new HashMap < String , Type [ ] > ( ) ; Set < Type > allTypes = slaAllocation . getHeadNode ( ) . getConnectedTypes ( ) ; Type someType = allTypes . iterator ( ) . next ( ) ; List < Resource > orderedResources = new ArrayList < Resource > ( ) ; orderedResources . addAll ( resources . values ( ) ) ; Collections . sort ( orderedResources , new CostMinComparator ( someType . getStartTime ( ) , someType . getDuration ( ) ) ) ; Iterator < Resource > resourceIterator = orderedResources . iterator ( ) ; Iterator < Type > typeIterator = allTypes . iterator ( ) ; Resource r = resourceIterator . next ( ) ; List < Type > typesForAResource = new ArrayList < Type > ( ) ; while ( typeIterator . hasNext ( ) ) { Type t = typeIterator . next ( ) ; typesForAResource . add ( t ) ; while ( ! r . isTypesFitting ( typesForAResource . toArray ( new Type [ typesForAResource . size ( ) ] ) ) ) { typesForAResource . remove ( t ) ; if ( resourceIterator . hasNext ( ) ) { if ( typesForAResource . size ( ) > 0 ) { allocations . put ( r . getId ( ) , typesForAResource . toArray ( new Type [ typesForAResource . size ( ) ] ) ) ; typesForAResource = new ArrayList < Type > ( ) ; } typesForAResource . add ( t ) ; r = resourceIterator . next ( ) ; } else { return null ; } } } if ( typesForAResource . size ( ) > 0 ) { allocations . put ( r . getId ( ) , typesForAResource . toArray ( new Type [ typesForAResource . size ( ) ] ) ) ; } slaAllocation . setAllocation ( allocations ) ; return slaAllocation ; }
va	3	public void removeBogusLegs ( ) { Iterator < Leg > it = legs . iterator ( ) ; while ( it . hasNext ( ) ) { Leg leg = it . next ( ) ; if ( leg . isBogusNonTransitLeg ( ) ) { it . remove ( ) ; } } }
va	4	private void initAlleles ( ) { for ( int acIndex = 0 ; acIndex < accessionCount ; acIndex ++ ) { for ( int mIndex = 0 ; mIndex < markerCount ; mIndex ++ ) { int alCnt = alleleName . get ( mIndex ) . size ( ) ; dataMatrix . get ( acIndex ) . set ( mIndex , new ArrayList < double > ( alCnt ) ) ; for ( int alIndex = 0 ; alIndex < alCnt ; alIndex ++ ) { dataMatrix . get ( acIndex ) . get ( mIndex ) . add ( null ) ; } } } }
va	1	public double pow ( double x , int n ) { if ( x == 0.0 && n > 0 ) return 0.0 ; if ( x == 0.0 && n <= 0 ) return 1.0 ; if ( n == 0 ) return 1.0 ; if ( n > 0 ) return x * pow ( x , n - 1 ) ; if ( n < 0 ) return 1 / x * pow ( x , n + 1 ) ; return 0.0 ; }
va	4	public static void main ( String argv [ ] ) { try { if ( argv . length != 1 ) { System . err . println ( "USBD [ start | stop ]" ) ; System . exit ( 1 ) ; } if ( "start" . equals ( argv [ 0 ] ) ) { Host host = HostFactory . getHost ( ) ; if ( host == null ) { System . err . println ( "USBD:  USB is not available." ) ; System . exit ( 1 ) ; } if ( host instanceof Remote ) { System . err . println ( "USBD: proxy already registered" ) ; System . exit ( 1 ) ; } try { HostProxy proxy = new HostProxy ( host ) ; Naming . bind ( rmiName , proxy ) ; System . err . println ( "USBD:  Bound RMI name " + rmiName ) ; } catch ( Exception e ) { System . err . println ( "USBD:  Couldn't bind to: " + rmiName ) ; if ( debug ) e . printStackTrace ( ) ; else System . err . println ( e . getMessage ( ) ) ; } } else if ( "stop" . equals ( argv [ 0 ] ) ) { System . err . println ( "USBD: no 'stop' yet ... " + "use 'ps' and 'kill' for now" ) ; } else { System . err . println ( "USBD: no '" + argv [ 0 ] + "' command" ) ; System . exit ( 1 ) ; } } catch ( Exception e ) { if ( debug ) e . printStackTrace ( ) ; else System . err . println ( e . getMessage ( ) ) ; } }
va	2	private void removeNeuron ( int num ) { Neuron neuron = ( Neuron ) ( currentNetwork . getNode ( num ) ) ; currentNetwork . getNeurons ( ) . remove ( neuron ) ; for ( int i = 0 ; i < neuron . getInputs ( ) . size ( ) ; i ++ ) { Connection connection = neuron . getInputs ( ) . get ( i ) ; connection . getGiveNeuron ( ) . getOutputs ( ) . remove ( connection ) ; currentNetwork . getConnections ( ) . remove ( connection ) ; } for ( int i = 0 ; i < neuron . getOutputs ( ) . size ( ) ; i ++ ) { Connection connection = neuron . getOutputs ( ) . get ( i ) ; connection . getRecieveNeuron ( ) . getInputs ( ) . remove ( connection ) ; currentNetwork . getConnections ( ) . remove ( connection ) ; } System . out . println ( "Neuron :: " + num + " :: was removed" ) ; }
va	2	private Activity getActivity ( String edgeType ) throws ProvBuildException { if ( _current == null || ! ( _current instanceof Activity ) ) { throw new ProvBuildException ( edgeType + " only applies to activities" ) ; } return ( Activity ) _current ; }
va	5X	public void run ( ) { parser = new CommandParser ( true ) ; parser . setCommandList ( new ApplicationCommandList ( ) ) ; System . out . println ( "WELCOME" ) ; System . out . println ( "READY for Input!" ) ; reader = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String input ; try { while ( ( input = reader . readLine ( ) ) != null ) { if ( input . equals ( "!end" ) ) { break ; } else { if ( input . length ( ) > 0 ) { String query = parser . parse ( input . trim ( ) ) ; if ( query . length ( ) > 1 ) { parser . parse ( query ) ; } } else System . out . println ( "" ) ; } } } catch ( IOException e ) { logger . error ( "reading input lines failed" ) ; } finally { System . out . println ( "BYE" ) ; if ( reader != null ) { try { reader . close ( ) ; } catch ( IOException e ) { logger . error ( "could not close reader" ) ; } } } }
va	3	@ Override public String toString ( ) { String result = null ; for ( SNode < E > nodeIt = this . frontNode ; nodeIt != null ; nodeIt = nodeIt . nextNode ) { if ( result == null ) { result = "[" + nodeIt . getElement ( ) . toString ( ) + "]" ; } else { result += " " + nodeIt . getElement ( ) . toString ( ) ; } } return result == null ? "empty" : result ; }
va	4	private static void player1DoSwapPieces ( OthelloPiece piecesToSwap [ ] [ ] ) { for ( int i = 0 ; i < TOTALWIDTH ; i ++ ) { for ( int j = 0 ; j < TOTALHEIGHT ; j ++ ) { if ( piecesToSwap [ i ] [ j ] == null ) { } else { player1SwapPieces ( i , j ) ; } } } }
va	3	@ Override public void init ( ) { qidtf = new JTextField ( ) ; label = new JLabel ( ) ; setLayout ( new BorderLayout ( ) ) ; add ( "North" , new JLabel ( "Quest ID" ) ) ; add ( "Center" , qidtf ) ; add ( "South" , label ) ; label . setForeground ( Color . RED ) ; qidtf . getDocument ( ) . addDocumentListener ( new QuestExistsListener ( getFinishButton ( ) ) { public boolean update ( DocumentEvent e ) { boolean a = super . update ( e ) ; if ( a == false ) label . setText ( "This quest doesn't exist." ) ; else label . setText ( "" ) ; return a ; } } ) ; }
va	5X	public boolean act ( Agent agent , Action action ) { if ( energy_level <= 0 ) { agent . die ( ) ; updateViews ( msg ) ; return false ; } boolean flag = ( action != null ) ; if ( flag ) { SimulatedAgent a = ( SimulatedAgent ) agent ; int x = ( ( Integer ) a . getAttribute ( X ) ) . intValue ( ) ; int y = ( ( Integer ) a . getAttribute ( Y ) ) . intValue ( ) ; Percept p = sense ( a ) ; String msg = null ; String act = action . getCode ( ) ; int actionID = language . getActionIndex ( act ) ; switch ( actionID ) { case 4 : if ( ( ( boolean ) p . getAttribute ( language . getPercept ( 5 ) ) ) . booleanValue ( ) ) { structure [ x ] [ y ] |= ( 1 << 15 ) ; int bit_flag = ( 1 << 10 ) ; if ( ( structure [ x ] [ y ] & bit_flag ) == bit_flag ) { System . out . println ( "Eating good food..." ) ; energy_level = Math . min ( energy_level + INC_ENERGY_LEVEL , MAX_ENERGY_LEVEL ) ; } else { System . out . println ( "Eating bad food..." ) ; energy_level = Math . max ( energy_level - DEC_ENERGY_LEVEL , 0 ) ; } } else { msg = SimpleView . ERROR + "[There is not food. Eat action not executed]" ; } updateViews ( msg ) ; break ; default : if ( actionID == 2 ) { energy_level -- ; System . out . println ( energy_level ) ; } super . act ( agent , action ) ; break ; } } return flag ; }
va	5X	public void updateRollingLabel ( ) { try { if ( ! display . isDisposed ( ) ) { Runnable runnable = new Runnable ( ) { @ Override public void run ( ) { MessageQueue messageQueue = MessageQueue . getInstance ( ) ; for ( int i = 0 ; i < 4 ; i ++ ) { rollingLabels [ i ] . setText ( messageQueue . getMessage ( i ) ) ; } } } ; display . syncExec ( runnable ) ; } } catch ( SWTException e ) { System . out . println ( "swt \u7684\u7EBF\u7A0B\u771F\u8BA9\u4EBA\u4F24\u5FC3" ) ; } }
va	5X	public Level ( ) { Bitmap bmp = Art . load ( "/levels/level.png" ) ; int w = bmp . w + 8 ; int h = bmp . h + 8 ; this . w = w ; this . h = h ; xs = w ; ys = h ; blockmap = new Blockmap ( w * 16 , h * 16 , 32 ) ; tiles = new int [ xs * ys ] ; for ( int y = 0 ; y < ys ; y ++ ) { for ( int x = 0 ; x < xs ; x ++ ) { int xx = x - 4 ; int yy = y - 4 ; if ( xx < 0 || yy < 0 || xx >= bmp . w || yy >= bmp . h ) { tiles [ x + y * xs ] = 1 ; } else { int col = bmp . pixels [ xx + yy * bmp . w ] ; if ( col == ff000000 ) { tiles [ x + y * xs ] = 1 ; } else { tiles [ x + y * xs ] = 0 ; } } } } redPlayer = new Player ( this , Team . allied ) ; bluPlayer = new Player ( this , Team . soviet ) ; }
va	3	public long inserir ( InstituicaoCooperadora instituicaocooperadora ) throws Exception { String sql = "INSERT INTO instituicaocooperadora(nome) VALUES (?)" ; long idGerado = 0 ; try { PreparedStatement stmt = ConnectionFactory . getConnection ( ) . prepareStatement ( sql , Statement . RETURN_GENERATED_KEYS ) ; stmt . setString ( 1 , instituicaocooperadora . getNome ( ) ) ; stmt . executeUpdate ( ) ; ResultSet rs = stmt . getGeneratedKeys ( ) ; if ( rs . next ( ) ) { idGerado = rs . getLong ( 1 ) ; } } catch ( SQLException e ) { throw e ; } return idGerado ; }
va	2	@ Override public E actual ( ) { if ( actual == null ) { throw new NullPointerException ( "Error: no se puede acceder el dato actual!" ) ; } return actual . getDato ( ) ; }
va	2	public void paintComponent ( Graphics comp ) { super . paintComponent ( comp ) ; Graphics2D comp2D = ( Graphics2D ) comp ; int h = getHeight ( ) - 5 ; int w = getWidth ( ) - 5 ; if ( ! hasValidDrafter ( map , comp2D , hexSideInPixels ) ) { int leftMarginInPixels = 0 ; int topMarginInPixels = 0 ; Rectangle margins = new Rectangle ( leftMarginInPixels , topMarginInPixels , w , h ) ; drafter = new CanvasDrafter ( map , comp2D , hexSideInPixels , textDisplayer , margins ) ; loupe . setMargins ( margins ) ; } drafter . drawMap ( w , h , centerCellId ) ; }
va	1	public PanelRenderer ( JTable table , TableCellRenderer renderer , TableCellEditor editor ) { this . table = table ; baseRenderer = renderer ; baseEditor = editor ; panel = new JPanel ( ) ; panel . setLayout ( new GridBagLayout ( ) ) ; }
va	2	public void actionPerformed ( ActionEvent e ) { String albumName = albumNameTF . getText ( ) ; try { makeAlbumPopUp . this . photosScreen . makeAlbum ( albumName ) ; } catch ( Exception e1 ) { e1 . printStackTrace ( ) ; } }
va	5X	public Iterator < String > keysThatMatch ( String pattern ) { if ( pattern == null ) { throw new IllegalArgumentException ( ) ; } Queue < String > results = new ArrayList < String > ( size ) ; if ( root == null ) { return results . queued ( ) ; } Stack < Node < V >> nodes = new ArrayList < Node < V >> ( ) ; Stack < String > keys = new ArrayList < String > ( ) ; nodes . push ( root ) ; keys . push ( "" ) ; while ( ! nodes . empty ( ) ) { Node < V > node = nodes . pop ( ) ; String key = keys . pop ( ) ; if ( key . length ( ) == pattern . length ( ) ) { if ( node . value != null ) { results . enqueue ( key ) ; } continue ; } char c = pattern . charAt ( key . length ( ) ) ; if ( ! valid ( c ) ) { throw new IllegalArgumentException ( ) ; } if ( c == * ) { for ( char i = ALPHABET_SIZE - 1 ; i >= 0 ; -- i ) { if ( node . next [ i ] != null ) { nodes . push ( node . next [ i ] ) ; keys . push ( key + i ) ; } } } else if ( node . next [ c ] != null ) { nodes . push ( node . next [ c ] ) ; keys . push ( key + c ) ; } } return results . queued ( ) ; }
va	3	public Set < Point > getPossibleMoves ( PlayerToken player ) { Set < Point > result = new HashSet < Point > ( ) ; Point loc = tokenLocs . get ( player ) ; for ( Point p : getAdjacentSquares ( player ) ) { if ( isMovable ( loc , p ) ) { result . add ( p ) ; } } return result ; }
va	1	public String getName ( ) { return getClass ( ) . getName ( ) ; }
va	5X	private int countCategories ( ) { try ( Connection conn = DevDBConfig . getConnection ( ) ) { try ( Statement stmt = conn . createStatement ( ) ) { String sql = "SELECT COUNT(*) FROM categories" ; try ( ResultSet rs = stmt . executeQuery ( sql ) ) { if ( rs . next ( ) ) { return rs . getInt ( 1 ) ; } } } } catch ( SQLException e ) { e . printStackTrace ( ) ; } return 0 ; }
va	5X	public void handleGameData ( int [ ] data ) { if ( data . length == 0 ) { return ; } for ( int i = 0 ; i < data . length ; i ++ ) { if ( data [ i ] == START_UPDATE_MOVEABLE ) { for ( int j = i + 1 ; j < data . length ; j ++ ) { if ( data [ j ] == END_UPDATE_MOVEABLE ) { int length = j - i ; if ( length != 3 ) { throw new RuntimeException ( "Invalid formatted data. Update moveable data not correct: " + length ) ; } else { acceptUpdatedMoveable ( data [ j - 2 ] , data [ j - 1 ] ) ; } } } } else if ( data [ i ] == START_DROP_BOMB ) { for ( int j = i + 1 ; j < data . length ; j ++ ) { if ( data [ j ] == END_DROP_BOMB ) { int length = j - i ; if ( length != 5 ) { throw new RuntimeException ( "Invalid formatted data. Drop bomb data not correct: " + length ) ; } else { acceptDroppedBomb ( data [ j - 4 ] , data [ j - 3 ] , data [ j - 2 ] , data [ j - 1 ] ) ; } } } } } }
va	1	public String getMessage ( ) { return super . getMessage ( ) + SEPARATOR + getErrnoString ( ) + " [" + errno + "] " ; }
va	3	@ Override public synchronized boolean checkToken ( Token token ) { for ( Token to : tokens ) { if ( token . equals ( to ) ) { return true ; } } return false ; }
va	3	public static String readFile ( String filePath ) throws FileNotExistException { File file = new File ( filePath ) ; StringBuilder builder = new StringBuilder ( ) ; if ( ! file . exists ( ) ) { throw new FileNotExistException ( filePath ) ; } try { BufferedReader buffer = new BufferedReader ( new FileReader ( file ) ) ; String tmp = buffer . readLine ( ) ; while ( tmp != null ) { builder . append ( tmp ) ; tmp = buffer . readLine ( ) ; if ( tmp != null ) builder . append (  ) ; } } catch ( IOException e ) { e . printStackTrace ( ) ; } return builder . toString ( ) ; }
va	2	public final void startup ( ) { if ( ! running ) { running = true ; doStartup ( ) ; } }
va	4	public static String encode ( String text , int offset ) { char [ ] chars = text . toCharArray ( ) ; for ( int i = 0 ; i < chars . length ; i ++ ) { int c = chars [ i ] ; if ( c >= a && c <= z ) { c += offset ; if ( c > z ) { c = a + ( c - z - 1 ) ; } else if ( c < a ) { c = z - ( a - c ) + 1 ; } } else { c += offset ; if ( c > Z ) { c = A + ( c - Z - 1 ) ; } else if ( c < A ) { c = Z - ( A - c ) + 1 ; } } chars [ i ] = ( char ) c ; } return new String ( chars ) ; }
va	1	public Arctg ( double acc ) { super ( acc ) ; }
va	5X	protected void childClosing ( ) { setClosable ( wasCloseable ) ; getGlassPane ( ) . setVisible ( false ) ; if ( focusOwner != null ) { java . awt . EventQueue . invokeLater ( new Runnable ( ) { public void run ( ) { try { moveToFront ( ) ; setSelected ( true ) ; focusOwner . grabFocus ( ) ; } catch ( PropertyVetoException ex ) { Logger . getLogger ( ModalityInternalFrame . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; } } } ) ; focusOwner . grabFocus ( ) ; } getGlassPane ( ) . setCursor ( Cursor . getPredefinedCursor ( Cursor . DEFAULT_CURSOR ) ) ; setChildFrame ( null ) ; }
va	2	@ Override public Object invoke ( Object proxy , Method method , Object [ ] args ) throws Throwable { Vector < SerializableObject > deSerList = new Vector < SerializableObject > ( ) ; if ( "writeObj" . equals ( method . getName ( ) ) ) { Object obj = args [ 0 ] ; serializer . serialize ( pWriter , obj ) ; } else if ( "readObj" . equals ( method . getName ( ) ) ) { deSerList = deSerializer . deSerialize ( ) ; return deSerList ; } return null ; }
va	1	private void initializeComponents ( ) { this . setLayout ( new BorderLayout ( ) ) ; ingredientPanel = new IngredientPanel ( ) ; ingredientPanel . addChangeListener ( this ) ; textPanel = new JPanel ( new BorderLayout ( ) ) ; textPane = new JTextArea ( ) ; textPane . setLineWrap ( true ) ; textPane . setLineWrap ( true ) ; textPane . setWrapStyleWord ( true ) ; textPane . setEditable ( true ) ; textPane . getDocument ( ) . addDocumentListener ( new ChangeDocumentListener ( ) ) ; textScrollPane = new JScrollPane ( textPane ) ; textScrollPane . setVerticalScrollBarPolicy ( JScrollPane . VERTICAL_SCROLLBAR_AS_NEEDED ) ; textScrollPane . setPreferredSize ( new Dimension ( 450 , 200 ) ) ; headline = new JTextField ( ) ; headline . getDocument ( ) . addDocumentListener ( new ChangeDocumentListener ( ) ) ; this . setPreferredSize ( new Dimension ( 750 , 250 ) ) ; }
va	3	public int [ ] getActions ( Game game , long timeDue ) { int pacmanLoc = game . getCurPacManLoc ( ) ; for ( int i = 0 ; i < dirs . length ; i ++ ) { if ( game . ghostRequiresAction ( i ) ) { if ( isCrowded ( game ) && ! closeToMsPacMan ( game , game . getCurGhostLoc ( i ) ) ) dirs [ i ] = getRetreatActions ( game , i ) ; else if ( game . getEdibleTime ( i ) > 0 || closeToPower ( game ) ) dirs [ i ] = game . getNextGhostDir ( i , pacmanLoc , false , Game . DM . PATH ) ; else dirs [ i ] = game . getNextGhostDir ( i , pacmanLoc , true , Game . DM . PATH ) ; } } return dirs ; }
va	1	public boolean isFinished ( ) { return isFinished ; }
va	1	public void setY ( float y ) { this . y = y ; }
va	2	private String [ ] camposOrdem ( ) { String camposPesquisa [ ] = new String [ estruturaTabela . size ( ) ] ; for ( int i = 0 ; i < estruturaTabela . size ( ) ; i ++ ) { camposPesquisa [ i ] = estruturaTabela . get ( i ) . getCampo ( ) ; } jCBOrdemPesq . setModel ( new javax . swing . DefaultComboBoxModel ( camposPesquisa ) ) ; return camposPesquisa ; }
va	3	private void readValues ( Stream stream ) { do { int j = stream . readUnsignedByte ( ) ; if ( j == 0 ) return ; if ( j == 1 ) { anInt648 = stream . readUnsignedWord ( ) ; anInt649 = stream . readUnsignedByte ( ) ; anInt650 = stream . readUnsignedByte ( ) ; } else if ( j == 10 ) stream . readString ( ) ; else if ( j == 2 ) aBoolean651 = true ; else if ( j == 3 ) stream . readDWord ( ) ; else if ( j == 4 ) stream . readDWord ( ) ; else System . out . println ( "Error unrecognised config code: " + j ) ; } while ( true ) ; }
va	1	@ Override public void handleEvent ( MatchEndedEvent domainEvent ) { PlayerReport playerReport = accountReportRepository . findById ( domainEvent . getAggregateId ( ) ) ; List < MatchReport > gamesStatistic = new ArrayList < MatchReport > ( ) ; gamesStatistic . addAll ( playerReport . getGamesStatistic ( ) ) ; gamesStatistic . add ( new MatchReport ( domainEvent . getAggregateId ( ) , domainEvent . getMatchResult ( ) ) ) ; accountReportRepository . add ( new PlayerReport ( domainEvent . getAggregateId ( ) , gamesStatistic , playerReport . getPlayerName ( ) ) ) ; }
va	1	public Iterator < ChannelUser > iterChannelUsers ( ) { return users . iterator ( ) ; }
va	5X	public static List < LineItem > transformLineItems ( Detail d ) { List < LineItem > items = d . getLineItem ( ) ; List < LineItem > aggrItems = new ArrayList < LineItem > ( ) ; for ( LineItem l : items ) { boolean duplicate = false ; if ( ! aggrItems . isEmpty ( ) ) { for ( int i = 0 ; i < aggrItems . size ( ) ; i ++ ) { LineItem curr = aggrItems . get ( i ) ; if ( curr . getItemCode ( ) . equals ( l . getItemCode ( ) ) ) { long quantity = curr . getQuantity ( ) . intValue ( ) ; quantity ++ ; curr . setQuantity ( BigDecimal . valueOf ( quantity ) ) ; duplicate = true ; break ; } } } if ( ! duplicate ) { aggrItems . add ( l ) ; } } return aggrItems ; }
va	1	@ Override public double calculateDiscount ( double price , int qty ) { return ( qty * dollarAmt ) ; }
va	5X	public boolean isValidSudoku ( char [ ] [ ] board ) { int [ ] filled = new int [ 10 ] ; for ( int i = 0 ; i < 10 ; i ++ ) filled [ i ] = 1 ; for ( int i = 0 ; i < 9 ; i ++ ) { int [ ] check = Arrays . copyOf ( filled , 10 ) ; for ( int j = 0 ; j < 9 ; j ++ ) { if ( board [ i ] [ j ] == . ) continue ; int a = Character . getNumericValue ( board [ i ] [ j ] ) ; check [ a ] -- ; if ( check [ a ] < 0 ) return false ; } } for ( int i = 0 ; i < 9 ; i ++ ) { int [ ] check = Arrays . copyOf ( filled , 10 ) ; for ( int j = 0 ; j < 9 ; j ++ ) { if ( board [ j ] [ i ] == . ) continue ; int a = Character . getNumericValue ( board [ j ] [ i ] ) ; check [ a ] -- ; if ( check [ a ] < 0 ) return false ; } } for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { int [ ] check = Arrays . copyOf ( filled , 10 ) ; for ( int ii = i * 3 ; ii < ( i + 1 ) * 3 ; ii ++ ) { for ( int jj = j * 3 ; jj < ( j + 1 ) * 3 ; jj ++ ) { if ( board [ ii ] [ jj ] == . ) continue ; int a = Character . getNumericValue ( board [ ii ] [ jj ] ) ; check [ a ] -- ; if ( check [ a ] < 0 ) return false ; } } } } return true ; }
va	4	public void paintComponents ( Board newBoard , boolean turn ) { board = newBoard ; pane . removeAll ( ) ; JButton [ ] buttons = new JButton [ 64 ] ; pane . setLayout ( new GridBagLayout ( ) ) ; GridBagConstraints c = new GridBagConstraints ( ) ; ButtonListener bl = new ButtonListener ( this , game ) ; ButtonObserver bo = new ButtonObserver ( game ) ; LinkedList < Coordinate > allowedFields = board . getAllowedFields ( game . orderMark ) ; for ( Integer index = 0 ; index < 64 ; index ++ ) { buttons [ index ] = new JButton ( index . toString ( ) ) ; c . fill = GridBagConstraints . BOTH ; c . gridx = board . coordinates [ index ] . getY ( ) ; c . gridy = board . coordinates [ index ] . getX ( ) ; c . weightx = 0.5 ; c . weighty = 0.5 ; c . insets = new Insets ( 3 , 3 , 3 , 3 ) ; buttons [ index ] . setPreferredSize ( new Dimension ( 50 , 50 ) ) ; buttons [ index ] . setText ( "" ) ; buttons [ index ] . setBackground ( board . getField ( board . coordinates [ index ] ) . getColor ( ) ) ; buttons [ index ] . setActionCommand ( index . toString ( ) ) ; buttons [ index ] . addActionListener ( bl ) ; bl . addObserver ( bo ) ; buttons [ index ] . setEnabled ( false ) ; for ( Coordinate coord : allowedFields ) { int field = coord . getIndex ( ) ; if ( field == index && turn ) { buttons [ index ] . setEnabled ( true ) ; buttons [ index ] . setBackground ( new Color ( 200 , 200 , 200 ) ) ; } if ( field == index && index == hint && turn ) { buttons [ index ] . setBackground ( Color . magenta ) ; } } pane . add ( buttons [ index ] , c ) ; } JButton button ; button = new JButton ( "Current Mark" ) ; c . fill = GridBagConstraints . BOTH ; c . gridx = 8 ; c . gridy = 1 ; c . weightx = 0.5 ; c . weighty = 0.5 ; c . insets = new Insets ( 0 , 15 , 0 , 15 ) ; button . setPreferredSize ( new Dimension ( 50 , 50 ) ) ; button . setText ( "" ) ; button . setBackground ( game . orderMark . getColor ( ) ) ; button . setEnabled ( false ) ; pane . add ( button , c ) ; button = new JButton ( "Hint" ) ; c . fill = GridBagConstraints . HORIZONTAL ; c . gridx = 8 ; c . gridy = 4 ; c . weightx = 0.5 ; c . weighty = 0.5 ; c . insets = new Insets ( 3 , 15 , 3 , 15 ) ; button . setPreferredSize ( new Dimension ( 150 , 50 ) ) ; button . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent event ) { giveHint ( board ) ; } } ) ; pane . add ( button , c ) ; if ( mainGUI . multiplayer ) { button = new JButton ( "Lobby" ) ; c . fill = GridBagConstraints . HORIZONTAL ; c . gridx = 8 ; c . gridy = 5 ; c . weightx = 0.5 ; c . weighty = 0.5 ; c . insets = new Insets ( 3 , 15 , 3 , 15 ) ; button . setPreferredSize ( new Dimension ( 150 , 50 ) ) ; button . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent event ) { frame . dispose ( ) ; LobbyGUI . lobbyGUI . startLobbyGUI ( ) ; } } ) ; pane . add ( button , c ) ; } if ( ! mainGUI . multiplayer ) { button = new JButton ( "Restart Game" ) ; c . fill = GridBagConstraints . HORIZONTAL ; c . gridx = 8 ; c . gridy = 5 ; c . weightx = 0.5 ; c . weighty = 0.5 ; c . insets = new Insets ( 3 , 15 , 3 , 15 ) ; button . setPreferredSize ( new Dimension ( 150 , 50 ) ) ; button . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent event ) { frame . dispose ( ) ; game . restartGame ( ) ; } } ) ; pane . add ( button , c ) ; } button = new JButton ( "Main Menu" ) ; c . fill = GridBagConstraints . HORIZONTAL ; c . gridx = 8 ; c . gridy = 6 ; c . weightx = 0.5 ; c . weighty = 0.5 ; c . insets = new Insets ( 3 , 15 , 3 , 15 ) ; button . setPreferredSize ( new Dimension ( 150 , 50 ) ) ; button . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent event ) { MainGUI . mainGUI . numberOfPlayers = "4" ; MainGUI . mainGUI . startMainGUI ( ) ; frame . dispose ( ) ; } } ) ; pane . add ( button , c ) ; button = new JButton ( "Quit" ) ; c . fill = GridBagConstraints . HORIZONTAL ; c . gridx = 8 ; c . gridy = 7 ; c . weightx = 0.5 ; c . weighty = 0.5 ; c . insets = new Insets ( 3 , 15 , 3 , 15 ) ; button . setPreferredSize ( new Dimension ( 150 , 50 ) ) ; button . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent event ) { frame . dispose ( ) ; } } ) ; pane . add ( button , c ) ; JLabel label ; label = new JLabel ( "Current Player:" ) ; label . setFont ( new Font ( "SANS_SERIF" , Font . PLAIN , 18 ) ) ; label . setPreferredSize ( new Dimension ( 300 , 50 ) ) ; c . fill = GridBagConstraints . BOTH ; c . gridx = 8 ; c . gridy = 0 ; c . weightx = 0.5 ; c . weighty = 0.5 ; c . insets = new Insets ( 3 , 15 , 0 , 15 ) ; pane . add ( label , c ) ; label = new JLabel ( game . order . get ( game . orderMark ) . getUsername ( ) ) ; label . setFont ( new Font ( "SANS_SERIF" , Font . PLAIN , 18 ) ) ; c . fill = GridBagConstraints . BOTH ; c . gridx = 8 ; c . gridy = 2 ; c . weightx = 0.5 ; c . weighty = 0.5 ; c . insets = new Insets ( 3 , 15 , 0 , 15 ) ; pane . add ( label , c ) ; pane . repaint ( ) ; pane . revalidate ( ) ; }
va	1	public void _fatal ( Object context ) { }
va	1	@ Override public float getX ( ) { return this . pos . x ; }
va	5X	protected void defineCommands ( ) { commands . put ( "quit" , new Command ( ) { public void run ( String [ ] args ) throws Exception { close ( ) ; } } ) ; commands . put ( "create" , new Command ( ) { public void run ( String [ ] args ) throws Exception { if ( args . length < 2 ) { gui . addNotice ( "create <pokoj> <haslo>" ) ; return ; } String roomName = args [ 0 ] ; String password = args [ 1 ] ; if ( client != null ) client . createRoom ( roomName , password ) ; } } ) ; commands . put ( "join" , new Command ( ) { public void run ( String [ ] args ) throws Exception { if ( args . length < 3 ) { gui . addNotice ( "join <nick> <pokoj> <haslo>" ) ; return ; } String nickname = args [ 0 ] ; String roomName = args [ 1 ] ; String password = args [ 2 ] ; if ( client != null ) { if ( currentRoom != null ) { handleCommand ( "leave" ) ; } client . joinRoom ( roomName , password , nickname ) ; currentRoom = new CurrentRoom ( roomName , nickname ) ; } } } ) ; commands . put ( "leave" , new Command ( ) { public void run ( String [ ] args ) throws Exception { if ( currentRoom == null ) { gui . addError ( "Nie jeste\u015B obecnie w \u017Cadnym pokoju" ) ; return ; } if ( client != null ) { String currentRoomName = currentRoom . roomName ; String currentRoomNickname = currentRoom . nickname ; client . leaveRoom ( currentRoom . roomName , currentRoom . nickname ) ; currentRoom = null ; gui . addNotice ( String . format ( "%s opu\u015Bci\u0142(a) pok\u00F3j %s" , currentRoomNickname , currentRoomName ) ) ; gui . setStatus ( "" ) ; } } } ) ; commands . put ( "msgs" , new Command ( ) { private final String SENT_FORMAT = "dd.MM.yyyy" ; public void run ( String [ ] args ) throws Exception { if ( currentRoom == null ) { gui . addError ( "Nie jeste\u015B obecnie w \u017Cadnym pokoju" ) ; return ; } if ( client != null ) { String sentArg = args . length > 0 ? args [ 0 ] : null ; Date sent = null ; if ( sentArg != null ) { SimpleDateFormat df = new SimpleDateFormat ( SENT_FORMAT ) ; try { sent = df . parse ( sentArg ) ; } catch ( ParseException e ) { gui . addNotice ( String . format ( "msgs: Data powinna byc w formacie `%s'" , SENT_FORMAT ) ) ; return ; } } client . showMessages ( currentRoom . roomName , sent ) ; } } } ) ; }
va	5X	public SharingPanel ( int w , int h ) { super ( ) ; this . width = w ; this . height = h ; this . isSelected = false ; this . setBackground ( Constants . backColor ) ; this . setLayout ( null ) ; this . selectedInfo = "" ; bgImg = new JLabel ( new ImageIcon ( Constants . BackgroudPath . shareListBG . getPath ( ) ) ) ; bgImg . setBounds ( 0 , 0 , width , height ) ; shareTo = new ImageIcon [ 3 ] ; shareTo [ 0 ] = new ImageIcon ( Constants . IconPath . shareToIcon1 . getPath ( ) ) ; shareTo [ 1 ] = new ImageIcon ( Constants . IconPath . shareToIcon2 . getPath ( ) ) ; shareTo [ 2 ] = new ImageIcon ( Constants . IconPath . shareToIcon3 . getPath ( ) ) ; shareFrom = new ImageIcon [ 3 ] ; shareFrom [ 0 ] = new ImageIcon ( Constants . IconPath . shareFromIcon1 . getPath ( ) ) ; shareFrom [ 1 ] = new ImageIcon ( Constants . IconPath . shareFromIcon2 . getPath ( ) ) ; shareFrom [ 2 ] = new ImageIcon ( Constants . IconPath . shareFromIcon3 . getPath ( ) ) ; handler = new ActionHandler ( ) ; tableModel = new DefaultTableModel ( ) { @ Override public boolean isCellEditable ( int row , int column ) { return false ; } } ; tableModel . setColumnIdentifiers ( new String [ ] { "    User ID" , "    Directory" , "  Status" , "" , "" , "" } ) ; table = new JTable ( ) { public class getColumnClass ( int column ) { return getValueAt ( 0 , column ) . getClass ( ) ; } } ; table . setSelectionMode ( ListSelectionModel . SINGLE_SELECTION ) ; table . setRowHeight ( 30 ) ; table . setFont ( Constants . Font1 ) ; table . setModel ( tableModel ) ; table . setAutoResizeMode ( JTable . AUTO_RESIZE_OFF ) ; table . getColumnModel ( ) . getColumn ( 0 ) . setPreferredWidth ( 130 ) ; table . getColumnModel ( ) . getColumn ( 1 ) . setPreferredWidth ( 150 ) ; table . getColumnModel ( ) . getColumn ( 2 ) . setPreferredWidth ( 100 ) ; for ( int i = 3 ; i < 6 ; i ++ ) { table . getColumnModel ( ) . getColumn ( i ) . setPreferredWidth ( 0 ) ; table . getColumnModel ( ) . getColumn ( i ) . setMinWidth ( 0 ) ; table . getColumnModel ( ) . getColumn ( i ) . setMaxWidth ( 0 ) ; } table . getSelectionModel ( ) . addListSelectionListener ( new ListSelectionListener ( ) { public void valueChanged ( ListSelectionEvent event ) { if ( ! event . getValueIsAdjusting ( ) && ! editMode ) { isSelected = true ; selectedInfo = "" ; if ( table . getValueAt ( table . getSelectedRow ( ) , 2 ) . equals ( shareTo [ 0 ] ) || table . getValueAt ( table . getSelectedRow ( ) , 2 ) . equals ( shareFrom [ 0 ] ) ) { initialize ( ) ; if ( table . getValueAt ( table . getSelectedRow ( ) , 3 ) . toString ( ) . equals ( "Target" ) ) { selectedInfo = "Target" ; } else if ( table . getValueAt ( table . getSelectedRow ( ) , 3 ) . toString ( ) . equals ( "Requester" ) ) { selectedInfo = "Requester" ; } } changePanel ( ) ; } } } ) ; header = table . getTableHeader ( ) ; header . setFont ( Constants . Font2 ) ; header . setEnabled ( false ) ; renderer = new DefaultTableCellRenderer ( ) ; renderer . setHorizontalAlignment ( JLabel . CENTER ) ; renderer . setFont ( getFont ( ) . deriveFont ( 80f ) ) ; table . getColumnModel ( ) . getColumn ( 0 ) . setCellRenderer ( renderer ) ; table . getColumnModel ( ) . getColumn ( 1 ) . setCellRenderer ( renderer ) ; scroll = new JScrollPane ( table , ScrollPaneConstants . VERTICAL_SCROLLBAR_ALWAYS , ScrollPaneConstants . HORIZONTAL_SCROLLBAR_AS_NEEDED ) ; scroll . setBounds ( 200 , 200 , 400 , 250 ) ; btn = new JButton [ 4 ] ; btn [ 0 ] = new JButton ( new ImageIcon ( Constants . ButtonPath . confirmBtn1 . getPath ( ) ) ) ; btn [ 0 ] . setRolloverIcon ( new ImageIcon ( Constants . ButtonPath . confirmBtn2 . getPath ( ) ) ) ; btn [ 1 ] = new JButton ( new ImageIcon ( Constants . ButtonPath . cancelBtn1 . getPath ( ) ) ) ; btn [ 1 ] . setRolloverIcon ( new ImageIcon ( Constants . ButtonPath . cancelBtn2 . getPath ( ) ) ) ; for ( int i = 0 ; i < 2 ; i ++ ) { btn [ i ] . setBounds ( 420 + ( i * 100 ) , 160 , 80 , 30 ) ; btn [ i ] . addActionListener ( handler ) ; } this . add ( scroll ) ; this . add ( bgImg ) ; }
va	5X	public static void main ( String args [ ] ) { try { for ( javax . swing . UIManager . LookAndFeelInfo info : javax . swing . UIManager . getInstalledLookAndFeels ( ) ) { if ( "Nimbus" . equals ( info . getName ( ) ) ) { javax . swing . UIManager . setLookAndFeel ( info . getClassName ( ) ) ; break ; } } } catch ( ClassNotFoundException ex ) { java . util . logging . Logger . getLogger ( ListaObjetos . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( InstantiationException ex ) { java . util . logging . Logger . getLogger ( ListaObjetos . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( IllegalAccessException ex ) { java . util . logging . Logger . getLogger ( ListaObjetos . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( javax . swing . UnsupportedLookAndFeelException ex ) { java . util . logging . Logger . getLogger ( ListaObjetos . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } java . awt . EventQueue . invokeLater ( new Runnable ( ) { public void run ( ) { ListaObjetos dialog = new ListaObjetos ( new javax . swing . JFrame ( ) , true ) ; dialog . addWindowListener ( new java . awt . event . WindowAdapter ( ) { @ Override public void windowClosing ( java . awt . event . WindowEvent e ) { System . exit ( 0 ) ; } } ) ; dialog . setVisible ( true ) ; } } ) ; }
va	2	synchronized public String getString ( ) { try { wait ( ) ; } catch ( InterruptedException e ) { } return napis ; }
va	2	public JSONWriter object ( ) throws JSONException { if ( this . mode == i ) { this . mode = o ; } if ( this . mode == o || this . mode == a ) { this . append ( "{" ) ; this . push ( new JSONObject ( ) ) ; this . , = false ; return this ; } throw new JSONException ( "Misplaced object." ) ; }
va	1	public void setCodTipoPagamento ( Integer codTipoPagamento ) { this . codTipoPagamento = codTipoPagamento ; }
va	3	private void emitLoadOrStore ( int opcode , int a , Adda address ) throws Exception { Value v = address . getArg1 ( ) ; int b , c ; if ( v instanceof Immediate ) { c = ( ( Immediate ) v ) . getValue ( ) ; opcode = opcode - 1 ; v = address . getArg2 ( ) ; if ( v . equals ( Type . getGBP ( ) ) ) { b = gbp ; } else if ( v . equals ( Type . getFP ( ) ) ) { b = fp ; } else { b = location2 ( v ) ; } } else { if ( v . equals ( Type . getGBP ( ) ) ) { b = gbp ; } else if ( v . equals ( Type . getFP ( ) ) ) { b = fp ; } else { b = location2 ( v ) ; } v = address . getArg2 ( ) ; if ( v instanceof Immediate ) { c = ( ( Immediate ) v ) . getValue ( ) ; opcode = opcode - 1 ; } else if ( v . equals ( Type . getGBP ( ) ) ) { c = gbp ; } else if ( v . equals ( Type . getFP ( ) ) ) { c = fp ; } else { c = location2 ( v ) ; } } emit ( DLX . assemble ( opcode , a , b , c ) ) ; }
va	4	public static void print ( JTextComponent textComponent ) throws TextComponentUtilException { InputStream is = null ; try { PrintService [ ] printServices = PrintServiceLookup . lookupPrintServices ( DocFlavor . INPUT_STREAM . AUTOSENSE , null ) ; if ( printServices . length > 0 ) { PrintRequestAttributeSet printRequestAttributeSet = new HashPrintRequestAttributeSet ( ) ; printRequestAttributeSet . add ( new JobName ( "JAligner" , null ) ) ; PrintService service = ServiceUI . printDialog ( null , 50 , 50 , printServices , PrintServiceLookup . lookupDefaultPrintService ( ) , DocFlavor . INPUT_STREAM . AUTOSENSE , printRequestAttributeSet ) ; if ( service != null ) { DocPrintJob printJob = service . createPrintJob ( ) ; PrintJobMointor printJobMointor = new PrintJobMointor ( printJob ) ; is = new ByteArrayInputStream ( textComponent . getText ( ) . getBytes ( ) ) ; DocumentName documentName = new DocumentName ( "JAligner" , null ) ; HashDocAttributeSet docAttributeSet = new HashDocAttributeSet ( ) ; docAttributeSet . add ( documentName ) ; Doc doc = new SimpleDoc ( is , DocFlavor . INPUT_STREAM . AUTOSENSE , docAttributeSet ) ; printJob . print ( doc , printRequestAttributeSet ) ; printJobMointor . waitForPrintJob ( ) ; } } else { throw new TextComponentUtilException ( "No print service found!" ) ; } } catch ( Exception e ) { throw new TextComponentUtilException ( e . getMessage ( ) ) ; } finally { if ( is != null ) { try { is . close ( ) ; } catch ( IOException e ) { logger . log ( Level . WARNING , "Failed closing input stream: " + e . getMessage ( ) , e ) ; } } } }
va	2	@ Override public Object getAsObject ( FacesContext facesContext , UIComponent uicomp , String value ) { try { FacesContext context = FacesContext . getCurrentInstance ( ) ; VendaBean venda = ( VendaBean ) context . getELContext ( ) . getELResolver ( ) . getValue ( context . getELContext ( ) , null , "venda" ) ; for ( Produto c : venda . getProdutos ( ) ) if ( c . getDescricao ( ) . equals ( value ) ) return c ; return null ; } catch ( Exception ex ) { return null ; } }
va	3	public VueMenuBiblio ( Controleur controleur ) { super ( controleur ) ; setTitle ( "Gestion de biblioth\u00E8que" ) ; setBounds ( 400 , 300 , 450 , 300 ) ; contentPane = new JPanel ( ) ; this . addWindowListener ( new WindowAdapter ( ) { public void windowClosing ( WindowEvent e ) { getControleur ( ) . fermerVue ( VueMenuBiblio . this ) ; } } ) ; setContentPane ( contentPane ) ; getContentPane ( ) . setLayout ( null ) ; JMenuBar menuBar = new JMenuBar ( ) ; menuBar . setBounds ( 44 , 24 , 342 , 21 ) ; getContentPane ( ) . add ( menuBar ) ; JMenu mnApplication = new JMenu ( "Application" ) ; mnApplication . setHorizontalAlignment ( SwingConstants . LEFT ) ; menuBar . add ( mnApplication ) ; JMenuItem menuItemQuotas = new JMenuItem ( "Parametrage quotas" ) ; menuItemQuotas . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { getControleur ( ) . parametrageQuotas ( ) ; } } ) ; mnApplication . add ( menuItemQuotas ) ; JMenuItem menuItemQuitter = new JMenuItem ( "Quitter" ) ; menuItemQuitter . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { getControleur ( ) . fermerVue ( VueMenuBiblio . this ) ; } } ) ; mnApplication . add ( menuItemQuitter ) ; JMenu mnOuvrage = new JMenu ( "Ouvrage" ) ; menuBar . add ( mnOuvrage ) ; JMenuItem MenuItemOuv = new JMenuItem ( "Nouvel ouvrage" ) ; MenuItemOuv . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent event ) { getControleur ( ) . saisirOuvrage ( ) ; } } ) ; mnOuvrage . add ( MenuItemOuv ) ; JMenuItem MenuItemExemp = new JMenuItem ( "Nouvel exemplaire" ) ; MenuItemExemp . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { getControleur ( ) . saisirExemplaire ( ) ; } } ) ; mnOuvrage . add ( MenuItemExemp ) ; JMenuItem menuItemConsult = new JMenuItem ( "Consulter ouvrage" ) ; menuItemConsult . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { getControleur ( ) . consulterOuvrage ( ) ; } } ) ; mnOuvrage . add ( menuItemConsult ) ; JMenuItem MenuItemEmpEx = new JMenuItem ( "Emprunt exemplaire" ) ; MenuItemEmpEx . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { getControleur ( ) . empruntExemplaire ( ) ; } } ) ; mnOuvrage . add ( MenuItemEmpEx ) ; JMenuItem menuItemRetEx = new JMenuItem ( "Retour exemplaire" ) ; menuItemRetEx . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { getControleur ( ) . retourExemplaire ( ) ; } } ) ; mnOuvrage . add ( menuItemRetEx ) ; JMenu mnPeriodique = new JMenu ( "Periodique" ) ; menuBar . add ( mnPeriodique ) ; JMenuItem MenuItemNouPer = new JMenuItem ( "Nouveau p\u00E9riodique" ) ; MenuItemNouPer . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent event ) { getControleur ( ) . nouveauPeriodique ( ) ; } } ) ; mnPeriodique . add ( MenuItemNouPer ) ; JMenuItem MenuItemNouPar = new JMenuItem ( "Nouvelle parution" ) ; MenuItemNouPar . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent event ) { getControleur ( ) . nouvelleParution ( ) ; } } ) ; mnPeriodique . add ( MenuItemNouPar ) ; JMenuItem MenuItemConsPar = new JMenuItem ( "Consultation p\u00E9riodique" ) ; MenuItemConsPar . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent event ) { getControleur ( ) . consultationPeriodique ( ) ; } } ) ; mnPeriodique . add ( MenuItemConsPar ) ; JMenu mnAuteur = new JMenu ( "Auteur" ) ; menuBar . add ( mnAuteur ) ; JMenuItem MenuItemAut = new JMenuItem ( "Recherche par auteur" ) ; MenuItemAut . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent event ) { getControleur ( ) . rechercheAuteur ( ) ; } } ) ; mnAuteur . add ( MenuItemAut ) ; JMenu mnLecteur = new JMenu ( "Lecteur" ) ; menuBar . add ( mnLecteur ) ; JMenuItem MenuItemNouLec = new JMenuItem ( "Nouveau lecteur" ) ; MenuItemNouLec . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent event ) { getControleur ( ) . nouveauLecteur ( ) ; } } ) ; mnLecteur . add ( MenuItemNouLec ) ; JMenuItem MenuItemConsLec = new JMenuItem ( "Consulter lecteur" ) ; MenuItemConsLec . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent event ) { getControleur ( ) . consultationLecteur ( ) ; } } ) ; mnLecteur . add ( MenuItemConsLec ) ; }
va	1	public int getCodigo ( ) { return codigo ; }
va	5X	public AList < Song > getTracksByGenre ( Genre g ) { AList < Song > tracksByGenre = new AList < Song > ( ) ; for ( SListIterator < Record > iterator = createIterator ( ) ; iterator . isValid ( ) ; iterator . moveNext ( ) ) { for ( int j = 0 ; j < 2 ; j ++ ) { for ( AListIterator < Song > iterator2 = iterator . getCurrentElem ( ) . getSide ( j ) . getSideTracklist ( ) . createIterator ( ) ; iterator2 . isValid ( ) ; iterator2 . moveNext ( ) ) { if ( iterator2 . getCurrentElem ( ) . getGenre ( ) . equals ( g ) ) { tracksByGenre . addLast ( iterator2 . getCurrentElem ( ) ) ; } } } } if ( tracksByGenre . isEmpty ( ) ) { return null ; } else { return tracksByGenre ; } }
va	5X	private void init ( ) { drawablePanel = new DrawablePanel ( ) ; SwingListener listener = new SwingListener ( this ) ; tracer . addListeners ( listener ) ; JButton renderBtn = new JButton ( "Render" ) ; renderBtn . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { progressBar . setString ( null ) ; new Thread ( ) { @ Override public void run ( ) { tracer . render ( scene , viewPlane ) ; } } . start ( ) ; } } ) ; JPanel statusPanel = new JPanel ( new FlowLayout ( FlowLayout . CENTER , 5 , 5 ) ) ; progressBar . setValue ( 0 ) ; progressBar . setStringPainted ( true ) ; statusPanel . add ( progressBar ) ; JScrollPane scrollPane = new JScrollPane ( drawablePanel ) ; add ( statusPanel , BorderLayout . PAGE_END ) ; add ( scrollPane , BorderLayout . CENTER ) ; add ( renderBtn , BorderLayout . PAGE_START ) ; }
va	4	private String generateRandomId ( ) { StringBuilder sb = new StringBuilder ( ) ; int retry = 0 ; do { while ( sb . length ( ) < idLength ) { char ch = ( char ) rnd . nextInt ( ) ; if ( Utils . isUriLetterOrDigit ( ch ) ) { sb . append ( ch ) ; } } if ( tokens . containsKey ( sb . toString ( ) ) ) { sb . delete ( 0 , idLength ) ; } retry ++ ; } while ( sb . length ( ) == 0 || retry > RETRY_COUNT ) ; return sb . toString ( ) ; }
va	4	static public void LU_ver ( double a [ ] [ ] ) { int n = a . length ; int i , j , k ; double suma ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i - 1 ; j ++ ) { ver ( i , j , 0 ) ; System . out . print ( "(" ) ; ver ( i , j , 1 ) ; suma = 0 ; for ( k = 0 ; k <= j - 1 ; k ++ ) { ver ( i , k , 3 ) ; ver ( k , j , 2 ) ; suma += a [ i ] [ k ] * a [ k ] [ j ] ; } a [ i ] [ j ] = ( a [ i ] [ j ] - suma ) / a [ j ] [ j ] ; ver ( j , j , 4 ) ; System . out . println ( ) ; } for ( j = i ; j < n ; j ++ ) { suma = 0 ; ver ( i , j , 0 ) ; ver ( i , j , 1 ) ; for ( k = 0 ; k <= i - 1 ; k ++ ) { ver ( i , k , 3 ) ; ver ( k , j , 2 ) ; suma += a [ i ] [ k ] * a [ k ] [ j ] ; } a [ i ] [ j ] = a [ i ] [ j ] - suma ; System . out . println ( ) ; } } }
va	3	@ Override public String toString ( ) { final StringBuilder sb = new StringBuilder ( 2048 ) ; super . toString ( sb ) . append ( " { " ) ; for ( int i = 0 ; i < MAX ; i ++ ) { if ( stats [ i ] . count != 0 ) { sb . append ( "\n        " ) . append ( stats [ i ] . toString ( ) ) ; } } return sb . append ( " }" ) . toString ( ) ; }
va	4	protected final Object computeRange ( ) { final List < double [ ] > raRange = new ArrayList < double [ ] > ( ) ; final double [ ] decRange = new double [ 2 ] ; if ( this . isPolesCollision ( ) ) { decRange [ MIN ] = SimpleSpectralAccessProtocolLibrary . MIN_VALUE_FOR_DECLINATION ; decRange [ MAX ] = SimpleSpectralAccessProtocolLibrary . MAX_VALUE_FOR_DECLINATION ; raRange . add ( new double [ ] { SimpleSpectralAccessProtocolLibrary . MIN_VALUE_FOR_RIGHT_ASCENSION , SimpleSpectralAccessProtocolLibrary . MAX_VALUE_FOR_RIGHT_ASCENSION } ) ; } else if ( this . isNorthPoleCollision ( ) ) { decRange [ MIN ] = decUser - sizeArray [ 1 ] / 2.0 ; decRange [ MAX ] = SimpleSpectralAccessProtocolLibrary . MAX_VALUE_FOR_DECLINATION ; raRange . add ( new double [ ] { SimpleSpectralAccessProtocolLibrary . MIN_VALUE_FOR_RIGHT_ASCENSION , SimpleSpectralAccessProtocolLibrary . MAX_VALUE_FOR_RIGHT_ASCENSION } ) ; } else if ( this . isSouthPoleCollision ( ) ) { decRange [ MIN ] = SimpleSpectralAccessProtocolLibrary . MIN_VALUE_FOR_DECLINATION ; decRange [ MAX ] = decUser + sizeArray [ 1 ] / 2.0 ; raRange . add ( new double [ ] { SimpleSpectralAccessProtocolLibrary . MIN_VALUE_FOR_RIGHT_ASCENSION , SimpleSpectralAccessProtocolLibrary . MAX_VALUE_FOR_RIGHT_ASCENSION } ) ; } else { decRange [ MIN ] = decUser - sizeArray [ 1 ] / 2.0 ; decRange [ MAX ] = decUser + sizeArray [ 1 ] / 2.0 ; if ( this . isBorderRaCollision ( ) ) { raRange . add ( new double [ ] { SimpleSpectralAccessProtocolLibrary . MIN_VALUE_FOR_RIGHT_ASCENSION , SimpleSpectralAccessProtocolLibrary . MAX_VALUE_FOR_RIGHT_ASCENSION } ) ; } else if ( this . isMaxRaCollision ( ) ) { raRange . add ( new double [ ] { raUser - sizeArray [ 0 ] / 2.0 , SimpleSpectralAccessProtocolLibrary . MAX_VALUE_FOR_RIGHT_ASCENSION } ) ; raRange . add ( new double [ ] { SimpleSpectralAccessProtocolLibrary . MIN_VALUE_FOR_RIGHT_ASCENSION , ( raUser + sizeArray [ 0 ] / 2.0 + SimpleSpectralAccessProtocolLibrary . MAX_VALUE_FOR_RIGHT_ASCENSION ) % SimpleSpectralAccessProtocolLibrary . MAX_VALUE_FOR_RIGHT_ASCENSION } ) ; } else if ( this . isMinRaCollision ( ) ) { raRange . add ( new double [ ] { SimpleSpectralAccessProtocolLibrary . MIN_VALUE_FOR_RIGHT_ASCENSION , raUser + sizeArray [ 0 ] / 2.0 } ) ; raRange . add ( new double [ ] { ( raUser - sizeArray [ 0 ] / 2.0 + SimpleSpectralAccessProtocolLibrary . MAX_VALUE_FOR_RIGHT_ASCENSION ) % SimpleSpectralAccessProtocolLibrary . MAX_VALUE_FOR_RIGHT_ASCENSION , SimpleSpectralAccessProtocolLibrary . MAX_VALUE_FOR_RIGHT_ASCENSION } ) ; } else { raRange . add ( new double [ ] { ( raUser - sizeArray [ 0 ] / 2.0 + SimpleSpectralAccessProtocolLibrary . MAX_VALUE_FOR_RIGHT_ASCENSION ) % SimpleSpectralAccessProtocolLibrary . MAX_VALUE_FOR_RIGHT_ASCENSION , ( raUser + sizeArray [ 0 ] / 2.0 + SimpleSpectralAccessProtocolLibrary . MAX_VALUE_FOR_RIGHT_ASCENSION ) % SimpleSpectralAccessProtocolLibrary . MAX_VALUE_FOR_RIGHT_ASCENSION } ) ; } } return Arrays . asList ( raRange , decRange ) ; }
va	4	public Identifier BookBed ( Identifier userId , Identifier searchId ) { ArrayList < SearchBean < FreeBedDetailBean >> results = getLastSearchResult ( ) ; for ( SearchBean < FreeBedDetailBean > search : results ) { if ( search . getSearchId ( ) . equals ( searchId ) ) { FreeBedDetailBean bedDetail = search . getObjectInfo ( ) ; Identifier hostelId = search . getObjectId ( ) ; Booking booking = new Booking ( ) ; booking . setBedIds ( bedDetail . getBedIds ( ) ) ; ArrayList < Tariff > bedReservations = new ArrayList < Tariff > ( ) ; for ( int i = 0 ; i < booking . getBedIds ( ) . size ( ) ; i ++ ) { Tariff tariff = new Tariff ( bedDetail . getPrice ( ) . get ( i ) , bedDetail . getCheckIn ( ) , bedDetail . getCheckOut ( ) ) ; bedReservations . add ( tariff ) ; } booking . setBedReservations ( bedReservations ) ; booking . setBookingDate ( GenericUtility . getCurrentDateWithoutTime ( ) ) ; booking . setHostelId ( hostelId ) ; booking . setStatus ( BookingStatus . RESERVED ) ; booking . setUserId ( userId ) ; try { return Bookings . getInstance ( ) . create ( booking ) ; } catch ( DataBaseReadWriteException | IdentifierAlreadyExistsException | InvalidIdentifierException | InvalidParameterException | ConflictException | IdentifierNotFoundException e ) { } } } return null ; }
va	3	private void processNumber ( Object value ) { double doubleValue = ( ( Number ) value ) . doubleValue ( ) ; if ( double . isNaN ( average ) ) { average = doubleValue ; min = doubleValue ; max = doubleValue ; sum = doubleValue ; } else { if ( doubleValue < min ) { min = doubleValue ; } if ( doubleValue > max ) { max = doubleValue ; } sum += doubleValue ; average = average + ( doubleValue - average ) / count ; } }
va	3	public void rempirListEtude ( ) { String Sreqlist ; listEtude . removeAllItems ( ) ; Sreqlist = "select * from ASSOCIATION join ETUDE " + "on ASSOCIATION.IDCONVENTION = ETUDE.IDCONVENTION " + "WHERE IDETUDIANT =" + idetudiant ; try { listEtude . addItem ( "Selectionner l'\u00E9tude \u00E0 d\u00E9tailler" ) ; openConnection ( ) ; java . sql . Statement reqlist = conn . createStatement ( ) ; java . sql . ResultSet resullist = reqlist . executeQuery ( Sreqlist ) ; while ( resullist . next ( ) ) { listEtude . addItem ( makeObj ( resullist . getInt ( "IDCONVENTION" ) + " -- " + resullist . getString ( "NOMETUDE" ) ) ) ; } reqlist . close ( ) ; resullist . close ( ) ; closeConnection ( ) ; } catch ( java . sql . SQLException e ) { ModelInfo . addElement ( "Erreur execution requete " + e . getMessage ( ) ) ; affAccompte . setModel ( ModelInfo ) ; } }
va	2	private void printMessage ( String messageOut ) { if ( debug ) { System . out . print ( messageOut ) ; } }
va	3	public static int getSeqVal ( String sql ) { try { PreparedStatement stat = connection . prepareStatement ( sql ) ; ResultSet re = stat . executeQuery ( ) ; if ( re . next ( ) ) { return re . getInt ( 1 ) ; } else { return - 1 ; } } catch ( SQLException e ) { e . printStackTrace ( ) ; } return - 1 ; }
va	4	public void actionPerformed ( ActionEvent e ) { String login = principal . getLogin ( ) ; String senha = principal . getSenha ( ) ; LoginInterface loginInterface = new LoginInterface ( ) ; Funcionario funcionario = null ; try { funcionario = loginInterface . logarUsuario ( login , senha ) ; } catch ( SQLException ex ) { Logger . getLogger ( ButtonHandlerLogin . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; } String respostaUsuario = "" ; if ( funcionario != null ) { if ( funcionario . getNivelAcesso ( ) ) { try { UsuarioLogado usuarioLogado = UsuarioLogado . getInstancia ( ) ; usuarioLogado . setUsuarioLogado ( funcionario ) ; OperacaoLog log = new OperacaoLog ( ) ; log . setData ( new Timestamp ( System . currentTimeMillis ( ) ) ) ; log . setDescricao ( "Logon de Administrador: " + funcionario . getNome ( ) ) ; log . setFuncionario ( UsuarioLogado . getInstancia ( ) . getUsuarioLogado ( ) ) ; log . setOperacao ( "Logon de Administrador" ) ; OperacaoLogDao operacaoLogDao = new OperacaoLogDao ( ) ; operacaoLogDao . persiste ( log ) ; } catch ( SQLException ex ) { Logger . getLogger ( ButtonHandlerLogin . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; } principal . dispose ( ) ; Administrador . main ( null ) ; } else { respostaUsuario = "Erro  acesso n\u00E3o permitido!" ; JOptionPane . showMessageDialog ( null , respostaUsuario ) ; } } else { respostaUsuario = "Erro  Credenciais inv\u00E1lidas!" ; JOptionPane . showMessageDialog ( null , respostaUsuario ) ; } e . getActionCommand ( ) ; }
va	1	public Location ( int x , int y ) { this . x = x ; this . y = y ; }
va	3	public int generarBoleto ( int sucursal_id , int usuario_id ) { Connection cn = conexion . Conectar ( ) ; PreparedStatement pst ; PreparedStatement pst2 ; ResultSet rs ; int idObtenido = 0 ; String queryInsertar = "INSERT INTO boletos(sucursal_id  usuario_id) VALUES (" + sucursal_id + " " + usuario_id + ")" ; String queryObtenerId = "SELECT max(boleto_id) as id FROM boletos" ; try { pst = cn . prepareStatement ( queryInsertar ) ; pst2 = cn . prepareStatement ( queryObtenerId ) ; pst . executeUpdate ( ) ; rs = pst2 . executeQuery ( ) ; while ( rs . next ( ) ) { idObtenido = rs . getInt ( "id" ) ; } } catch ( SQLException ex ) { JOptionPane . showMessageDialog ( null , "Error al generar el boleto: " + ex ) ; } return idObtenido ; }
va	4	public void run ( ) { if ( Logger . getDebugValue ( ) == 3 ) { System . out . println ( "run() of " + Thread . currentThread ( ) . getName ( ) + " is called." ) ; } String word ; Set < MusicInfo > info_found ; while ( ( word = readFile . readWordFromSearchFile ( ) ) != null ) { info_found = store . find ( word ) ; if ( info_found != null ) { Iterator < MusicInfo > iter = info_found . iterator ( ) ; while ( iter . hasNext ( ) ) { results . add ( iter . next ( ) ) ; } } } }
va	1	@ BeforeMethod public void setUpMethod ( ) throws Exception { }
va	1	public void setPassword ( String password ) { this . password = password ; }
va	2	@ Override public void windowClosing ( WindowEvent e ) { if ( JOptionPane . showConfirmDialog ( frame , "Are you sure to close this window?" , "Really Closing?" , JOptionPane . YES_NO_OPTION , JOptionPane . QUESTION_MESSAGE ) == JOptionPane . YES_OPTION ) { btn . setEnabled ( true ) ; } }
va	3	public V checkBaseInterfaces ( class c ) { Map < class , V > possibles = new HashMap < class , V > ( ) ; for ( class base = c ; base != Object . class ; base = base . getSuperclass ( ) ) { for ( class itf : base . getInterfaces ( ) ) { V val = lookup . valAt ( itf ) ; if ( val != null ) possibles . put ( itf , val ) ; } } switch ( possibles . size ( ) ) { case 0 : return null ; case 1 : return possibles . values ( ) . iterator ( ) . next ( ) ; default : throw new RuntimeException ( "More thane one match for " + c ) ; } }
va	4	public static void main ( String args [ ] ) { try { for ( javax . swing . UIManager . LookAndFeelInfo info : javax . swing . UIManager . getInstalledLookAndFeels ( ) ) { if ( "Nimbus" . equals ( info . getName ( ) ) ) { javax . swing . UIManager . setLookAndFeel ( info . getClassName ( ) ) ; break ; } } } catch ( ClassNotFoundException ex ) { java . util . logging . Logger . getLogger ( Window3 . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( InstantiationException ex ) { java . util . logging . Logger . getLogger ( Window3 . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( IllegalAccessException ex ) { java . util . logging . Logger . getLogger ( Window3 . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( javax . swing . UnsupportedLookAndFeelException ex ) { java . util . logging . Logger . getLogger ( Window3 . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } java . awt . EventQueue . invokeLater ( new Runnable ( ) { @ Override public void run ( ) { new Window3 ( ) . setVisible ( true ) ; } } ) ; }
va	4	private int findPlaceholderEndIndex ( CharSequence buf , int startIndex ) { int index = startIndex + this . placeholderPrefix . length ( ) ; int withinNestedPlaceholder = 0 ; while ( index < buf . length ( ) ) { if ( StringUtils . substringMatch ( buf , index , this . placeholderSuffix ) ) { if ( withinNestedPlaceholder > 0 ) { withinNestedPlaceholder -- ; index = index + this . placeholderSuffix . length ( ) ; } else { return index ; } } else if ( StringUtils . substringMatch ( buf , index , this . simplePrefix ) ) { withinNestedPlaceholder ++ ; index = index + this . simplePrefix . length ( ) ; } else { index ++ ; } } return - 1 ; }
va	2	@ Override public void windowClosing ( WindowEvent e ) { if ( ClientFrame . this . client . isConnected ( ) ) { ClientFrame . this . client . disconnect ( ) ; } }
va	5X	public static void main ( String args [ ] ) { try { for ( javax . swing . UIManager . LookAndFeelInfo info : javax . swing . UIManager . getInstalledLookAndFeels ( ) ) { if ( "Nimbus" . equals ( info . getName ( ) ) ) { javax . swing . UIManager . setLookAndFeel ( info . getClassName ( ) ) ; break ; } } } catch ( ClassNotFoundException ex ) { java . util . logging . Logger . getLogger ( jfSelColor . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( InstantiationException ex ) { java . util . logging . Logger . getLogger ( jfSelColor . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( IllegalAccessException ex ) { java . util . logging . Logger . getLogger ( jfSelColor . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( javax . swing . UnsupportedLookAndFeelException ex ) { java . util . logging . Logger . getLogger ( jfSelColor . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } java . awt . EventQueue . invokeLater ( new Runnable ( ) { public void run ( ) { jfSelColor dialog = new jfSelColor ( new javax . swing . JFrame ( ) , true ) ; dialog . addWindowListener ( new java . awt . event . WindowAdapter ( ) { @ Override public void windowClosing ( java . awt . event . WindowEvent e ) { System . exit ( 0 ) ; } } ) ; dialog . setVisible ( true ) ; } } ) ; }
va	2	public void setValue ( int value ) { if ( value < this . minValue ) { this . value = minValue ; } else if ( value > maxValue ) { this . value = maxValue ; } else { this . value = value ; } this . slider . reactToChanges ( new CustomSliderEvent ( slider , this . value ) ) ; this . textField . reactToChanges ( new CustomTextFieldEvent ( textField , Integer . toString ( this . value ) ) ) ; }
va	5X	static private Vector < double [ ] > sampleResults ( Vector < Future < Vector < double [ ] >>> results , int bins ) throws Exception { int nDescriptors = results . get ( 0 ) . get ( ) . get ( 0 ) . length ; System . out . println ( "Printing for " + nDescriptors + " descriptors" ) ; Vector < double [ ] > descriptors = new Vector < double [ ] > ( nDescriptors ) ; for ( int d = 0 ; d < nDescriptors ; ++ d ) { double [ ] averages = new double [ bins ] ; for ( Future < Vector < double [ ] >> result : results ) { Vector < double [ ] > samples = result . get ( ) ; int samplesPerBin = samples . size ( ) / bins ; for ( int b = 0 ; b < bins ; ++ b ) { double sum = 0 ; int counted = 0 ; for ( int s = 0 ; s < samplesPerBin && b * samplesPerBin + s < samples . size ( ) ; ++ s ) { sum += samples . get ( b * samplesPerBin + s ) [ d ] ; counted += 1 ; } averages [ b ] = sum / counted ; } } descriptors . add ( averages ) ; } return descriptors ; }
va	2	public Object [ ] formatoTabela ( FonteFinanciamento fontefinanciamento ) { return new Object [ ] { fontefinanciamento . getId ( ) , fontefinanciamento . getNome ( ) } ; }
va	4	public void openFile ( String fileName ) { if ( m_bMpegPlaying ) { m_bKeepRunning = false ; } if ( m_inputStream != null ) { try { m_inputStream . close ( ) ; } catch ( IOException e ) { showDialog ( WARNING , e . getMessage ( ) ) ; } } if ( fileName != null ) { try { try { URL url = new URL ( fileName ) ; m_inputStream = new java . io . BufferedInputStream ( url . openStream ( ) ) ; } catch ( MalformedURLException e ) { m_inputStream = new java . io . BufferedInputStream ( new FileInputStream ( fileName ) ) ; } } catch ( IOException e ) { showDialog ( ERROR , e . getMessage ( ) ) ; } } else showDialog ( ERROR , "null FileName" ) ; }
va	4	public List < SiteStatModel > map ( StatResultSet resultset , SiteModel siteModel , DateTime timeLimit ) { List < StatRow > statRows = resultset . getRows ( ) ; Map < long , SiteStatModel > siteStatModelMap = new HashMap < > ( ) ; for ( StatRow eachRow : statRows ) { DateTime hour = DateTimeFormatUtil . parseDateTime ( eachRow . getField ( ) . get ( 4 ) ) ; if ( hour == null ) { continue ; } if ( hour . getMillis ( ) < timeLimit . getMillis ( ) ) { SiteStatModel siteStatModel = new SiteStatModel ( ) ; siteStatModel . setUniqueVisitor ( Integer . parseInt ( eachRow . getField ( ) . get ( 1 ) ) ) ; siteStatModel . setPageView ( Integer . parseInt ( eachRow . getField ( ) . get ( 2 ) ) ) ; siteStatModel . setVisit ( Integer . parseInt ( eachRow . getField ( ) . get ( 3 ) ) ) ; siteStatModel . setHour ( hour ) ; siteStatModel . setVideo ( 0 ) ; siteStatModel . setSite ( siteModel ) ; if ( siteStatModelMap . get ( hour . getMillis ( ) ) == null ) { siteStatModelMap . put ( hour . getMillis ( ) , siteStatModel ) ; } else { siteStatModelMap . remove ( hour . getMillis ( ) ) ; siteStatModelMap . put ( hour . getMillis ( ) , siteStatModel ) ; } } } List < SiteStatModel > siteStatModels = new ArrayList < > ( siteStatModelMap . values ( ) ) ; return siteStatModels ; }
va	5X	public void __doGet ( HttpServletRequest req , HttpServletResponse resp ) throws IOException , ServletException { Context ctx = ( Context ) req . getSession ( ) . getAttribute ( Authtoken . TOKEN ) ; if ( ctx == null ) { ctx = new Context ( ) ; } String questionId = new String ( ) ; if ( req . getPathInfo ( ) != null ) { questionId = "/" + Question . RESOURCE_NAME + "/" + req . getPathInfo ( ) . replaceAll ( "/" , "" ) ; } if ( ! questionId . equals ( "" ) ) { Message request = new Message ( ctx ) ; request . put ( Question . ID , questionId ) ; Message response = new Message ( ctx ) ; new QuestionService ( ) . doGet ( request , response ) ; Message profileReq = new Message ( ctx ) ; Message profileResp = new Message ( ctx ) ; profileReq . put ( Profile . ID , response . get ( Document . AUTHOR ) ) ; new ProfileService ( ) . doGet ( profileReq , profileResp ) ; response . put ( Profile . FULL_NAME , profileResp . get ( Profile . FULL_NAME ) ) ; req . setAttribute ( Question . RESOURCE_NAME , response ) ; List < Map < String , String >> answers = new ArrayList < Map < String , String >> ( ) ; Message answerResp , voteResp ; for ( Map < String , String > ref : response . getReferences ( Question . ANSWERS ) ) { request = new Message ( ctx ) ; request . put ( Answer . ID , ref . get ( Answer . ID ) ) ; answerResp = new Message ( ctx ) ; new AnswerService ( ) . doGet ( request , answerResp ) ; Map < String , String > answer = new HashMap < String , String > ( ) ; answer . put ( Answer . ID , answerResp . get ( Answer . ID ) ) ; answer . put ( Answer . CONTENT , answerResp . get ( Answer . CONTENT ) ) ; answer . put ( Answer . VOTES , answerResp . get ( Answer . VOTES ) ) ; answer . put ( Document . AUTHOR , answerResp . get ( Document . AUTHOR ) ) ; answer . put ( System . TIMESTAMP , answerResp . get ( System . TIMESTAMP ) ) ; profileReq = new Message ( ctx ) ; profileResp = new Message ( ctx ) ; profileReq . put ( Profile . ID , answerResp . get ( Document . AUTHOR ) ) ; new ProfileService ( ) . doGet ( profileReq , profileResp ) ; answer . put ( Profile . FULL_NAME , profileResp . get ( Profile . FULL_NAME ) ) ; if ( ctx != null ) { request = new Message ( ctx ) ; request . put ( Profile . ID , ctx . getLoggedInUserProfileId ( ) ) ; request . put ( Answer . ID , ref . get ( Answer . ID ) ) ; voteResp = new Message ( ctx ) ; new VoteService ( ) . doGet ( request , voteResp ) ; if ( voteResp . containsField ( Vote . ID ) ) { answer . put ( Vote . ID , voteResp . get ( Vote . ID ) ) ; answer . put ( Vote . VOTE , voteResp . get ( Vote . VOTE ) ) ; } } answers . add ( answer ) ; } req . setAttribute ( Answer . RESOURCE_NAME , answers ) ; Message eventRequest = new Message ( request . getContext ( ) ) ; eventRequest . put ( Event . DOCUMENT_TYPE , Question . RESOURCE_NAME ) ; eventRequest . put ( Event . TYPE , "GET" ) ; eventRequest . put ( Event . DESCRIPTION , "View Question" ) ; eventRequest . put ( Event . OBJECT , questionId ) ; eventRequest . put ( Event . USER , ctx . getLoggedInUserProfileId ( ) ) ; eventRequest . put ( Event . TIMESTAMP , request . get ( System . TIMESTAMP ) ) ; EventPublisherService pub = new EventPublisherService ( ) ; pub . doPost ( eventRequest , response ) ; super . forward ( QUESTION_VIEW , req , resp ) ; } else { Message request = new Message ( ctx ) ; if ( req . getParameter ( QuestionSearchIndex . QUERY_STRING ) != null ) { request . put ( QuestionSearchIndex . QUERY_STRING , req . getParameter ( QuestionSearchIndex . QUERY_STRING ) ) ; } else { request . put ( QuestionSearchIndex . QUERY_STRING , "" ) ; } Message response = new Message ( ctx ) ; new QuestionService ( ) . doGet ( request , response ) ; response . put ( QuestionSearchIndex . QUERY_STRING , request . get ( QuestionSearchIndex . QUERY_STRING ) ) ; req . setAttribute ( Question . RESOURCE_NAME , response ) ; Message eventRequest = new Message ( request . getContext ( ) ) ; eventRequest . put ( Event . DOCUMENT_TYPE , QuestionSearchIndex . RESOURCE_NAME ) ; eventRequest . put ( Event . TYPE , "GET" ) ; eventRequest . put ( Event . DESCRIPTION , "Search Question" ) ; eventRequest . put ( Event . OBJECT , request . get ( QuestionSearchIndex . QUERY_STRING ) ) ; eventRequest . put ( Event . USER , ctx . getLoggedInUserProfileId ( ) ) ; eventRequest . put ( Event . TIMESTAMP , request . get ( System . TIMESTAMP ) ) ; EventPublisherService pub = new EventPublisherService ( ) ; pub . doPost ( eventRequest , response ) ; super . forward ( QUESTION_SEARCH_VIEW , req , resp ) ; } }
va	1	private static void writeFile ( File destFile , String content ) throws IOException { BufferedWriter writer = new BufferedWriter ( new FileWriter ( destFile ) ) ; writer . write ( content ) ; writer . flush ( ) ; writer . close ( ) ; writer = null ; }
va	5X	public void Solve ( ) { int count = 0 ; for ( int x1 = 0 ; x1 <= _max ; x1 ++ ) { for ( int y1 = 0 ; y1 <= _max ; y1 ++ ) { for ( int x2 = 0 ; x2 <= _max ; x2 ++ ) { for ( int y2 = 0 ; y2 <= _max ; y2 ++ ) { if ( x1 + y1 + x2 + y2 == 0 ) { continue ; } int length1 = x1 * x1 + y1 * y1 ; int length2 = x2 * x2 + y2 * y2 ; int x3 = Math . abs ( x1 - x2 ) ; int y3 = Math . abs ( y1 - y2 ) ; int length3 = x3 * x3 + y3 * y3 ; if ( length1 + length2 == length3 ) { count ++ ; } } } } } System . out . println ( "Result=" + count / 2 ) ; }
va	2	@ Override public Hotel get ( String nom ) throws Exception { Session session = null ; Hotel hotel = null ; try { session = HibernateUtil . getSessionFactory ( ) . getCurrentSession ( ) ; session . beginTransaction ( ) ; hotel = ( Hotel ) session . get ( Hotel . class , nom ) ; } catch ( RuntimeException e ) { session . getTransaction ( ) . rollback ( ) ; throw new Exception ( "hotelNoExisteix" ) ; } return hotel ; }
va	4	public List < CodeList > parse ( XMLEventReader eventReader , StartElement startElement , ZipFile zipFile ) throws XMLStreamException , IOException , ExternalRefrenceNotFoundException { this . zipFile = zipFile ; List < CodeList > codeLists = new ArrayList < CodeList > ( ) ; boolean endTagReached = false ; while ( ! endTagReached ) { XMLEvent event = eventReader . nextEvent ( ) ; switch ( event . getEventType ( ) ) { case XMLEvent . START_ELEMENT : StartElement se = event . asStartElement ( ) ; if ( se . getName ( ) . getLocalPart ( ) . equalsIgnoreCase ( "CodeList" ) && se . getName ( ) . getNamespaceURI ( ) . equalsIgnoreCase ( Constants . STRUCTURE_NAMESPACE ) ) { CodeList cl = processCodeList ( se , eventReader ) ; codeLists . add ( cl ) ; } break ; case XMLEvent . END_ELEMENT : EndElement endElement = event . asEndElement ( ) ; if ( endElement . getName ( ) . getLocalPart ( ) . equalsIgnoreCase ( "CodeLists" ) && endElement . getName ( ) . getNamespaceURI ( ) . equalsIgnoreCase ( Constants . DEFAULT_NAMESPACE ) ) { endTagReached = true ; } break ; } } return codeLists ; }
va	2	public boolean offerFirst ( E e ) { if ( contains ( e ) ) { return false ; } linkFirst ( e ) ; return true ; }
va	2	private static TermURIs getURISet ( ) { if ( _singleton == null ) { _singleton = new TermURIs ( ) ; } return _singleton ; }
va	3	private void listAllEmail ( List < Email > emailList , POP3Session session ) { String responseStr = null ; for ( int i = 0 ; i < emailList . size ( ) ; i ++ ) { if ( emailList . get ( i ) . isDeleted ( ) == false ) { responseStr = i + 1 + " " + EmailUtil . getEmailSize ( emailList . get ( i ) ) ; session . sendResponse ( responseStr ) ; } } }
va	5X	public static < KEY , VALUE > Map < KEY , VALUE > runIdempotentTasks ( Collection < ? extends IDependentTask < KEY , VALUE >> tasks , ExecutorService es , int maxRounds ) throws Exception { final Map < KEY , VALUE > out = new HashMap < KEY , VALUE > ( ) ; Map < KEY , IDependentTask < KEY , VALUE >> allTasks = new HashMap < KEY , MraUtils . IDependentTask < KEY , VALUE >> ( ) ; for ( IDependentTask < KEY , VALUE > t : tasks ) { allTasks . put ( t . getTaskID ( ) , t ) ; } Set < KEY > remaining = new HashSet < KEY > ( allTasks . keySet ( ) ) ; Set < KEY > done = new HashSet < KEY > ( ) ; Map < KEY , Integer > failures = new HashMap < KEY , Integer > ( ) ; while ( remaining . size ( ) > 0 ) { Set < KEY > toRun = new HashSet < KEY > ( ) ; for ( KEY k : remaining ) { if ( done . containsAll ( allTasks . get ( k ) . getDependsOn ( ) ) ) { toRun . add ( k ) ; } } if ( toRun . size ( ) == 0 ) { throw new IllegalStateException ( "can't run any more tasks" ) ; } Map < KEY , Future < VALUE >> futures = new HashMap < KEY , Future < VALUE >> ( ) ; int submitted = 0 ; for ( KEY k : toRun ) { final IDependentTask < KEY , VALUE > t = allTasks . get ( k ) ; boolean block = false ; if ( failures . containsKey ( k ) ) { if ( failures . get ( k ) > maxRounds ) { block = true ; } } if ( ! block ) { submitted ++ ; futures . put ( k , es . submit ( new Callable < VALUE > ( ) { @ Override public VALUE call ( ) throws Exception { return t . call ( out ) ; } } ) ) ; } } if ( submitted == 0 ) { throw new IllegalStateException ( "can't run any more tasks" ) ; } for ( KEY k : futures . keySet ( ) ) { try { out . put ( k , futures . get ( k ) . get ( ) ) ; done . add ( k ) ; } catch ( Exception e ) { if ( failures . containsKey ( k ) ) { failures . put ( k , failures . get ( k ) + 1 ) ; } else { failures . put ( k , 1 ) ; } logger . warnf ( "exception running %s: %s" , k , e ) ; e . printStackTrace ( ) ; } } remaining . removeAll ( done ) ; } return out ; }
va	4	public JSONWriter key ( String string ) throws JSONException { if ( string == null ) { throw new JSONException ( "Null key." ) ; } if ( this . mode == k ) { try { this . stack [ this . top - 1 ] . putOnce ( string , boolean . true ) ; if ( this . , ) { this . writer . write (   ) ; } this . writer . write ( JSONObject . quote ( string ) ) ; this . writer . write ( : ) ; this . , = false ; this . mode = o ; return this ; } catch ( IOException e ) { throw new JSONException ( e ) ; } } throw new JSONException ( "Misplaced key." ) ; }
va	3	private void tarkistaKirjautuminen ( ) { kayttajatunnus = kayttajatunnusField . getText ( ) ; salasana = ripoffPassword ( salasanaField . getPassword ( ) ) ; Kayttajatunnus kayttaja = Database . tarkastaKirjautuminen ( kayttajatunnus , salasana ) ; if ( kayttaja == null ) { fail ( ) ; } else { if ( kayttaja . getSalasana ( ) . equals ( salasana ) ) { kirjaudu ( kayttaja ) ; } else { fail ( ) ; } } }
va	4	public Vector < Vector < Object >> getFolderContentsTable ( ) { Vector < Vector < Object >> tableData = new Vector < > ( ) ; List < FileInfo > files = getFolderContents ( ) ; logger . debug ( "Found " + files . size ( ) + " entries for " + path . toString ( ) ) ; for ( FileInfo file : files ) { Vector < Object > row = null ; if ( file . folder ) { row = new Vector < > ( ) ; if ( FileOp . convertPath ( path . resolve ( file . fileName ) ) . toFile ( ) . exists ( ) ) { row . add ( new ImageIcon ( "res/folder.png" ) ) ; } else { row . add ( new ImageIcon ( "res/folder_deleted.png" ) ) ; } row . add ( file . fileName ) ; row . add ( GuiUtility . humanReadableBytes ( file . fileSize , false ) ) ; row . add ( GuiUtility . formatDate ( file . createdDate ) ) ; row . add ( GuiUtility . formatDate ( file . lastAccessedDate ) ) ; row . add ( GuiUtility . formatDate ( file . lastModifiedDate ) ) ; row . add ( Integer . toString ( file . numberOfRevisions ) ) ; row . add ( GuiUtility . humanReadableBytes ( file . revisionSizes , false ) ) ; tableData . add ( row ) ; } } for ( FileInfo file : files ) { Vector < Object > row = null ; if ( ! file . folder ) { row = new Vector < > ( ) ; if ( FileOp . convertPath ( path . resolve ( file . fileName ) ) . toFile ( ) . exists ( ) ) { row . add ( new ImageIcon ( "res/file.png" ) ) ; } else { row . add ( new ImageIcon ( "res/file_deleted.png" ) ) ; } row . add ( file . fileName ) ; row . add ( GuiUtility . humanReadableBytes ( file . fileSize , false ) ) ; row . add ( GuiUtility . formatDate ( file . createdDate ) ) ; row . add ( GuiUtility . formatDate ( file . lastAccessedDate ) ) ; row . add ( GuiUtility . formatDate ( file . lastModifiedDate ) ) ; row . add ( Integer . toString ( file . numberOfRevisions ) ) ; row . add ( GuiUtility . humanReadableBytes ( file . revisionSizes , false ) ) ; tableData . add ( row ) ; } } return tableData ; }
va	1	public boolean jogador1EhVencedor ( ) { return jogador1 . ehVencedor ( ) ; }
va	4	private void printMap ( ) { System . out . print ( "     " ) ; for ( int i = 0 ; i < map . getMapWidth ( ) ; i ++ ) { System . out . print ( String . format ( " %02d   " , i ) ) ; } System . out . println ( ) ; for ( int i = 0 ; i < map . getMapHeight ( ) ; i ++ ) { for ( int j = 0 ; j < map . getMapWidth ( ) ; j ++ ) { if ( j == 0 ) System . out . print ( String . format ( "%02d" , i ) ) ; System . out . print ( " " ) ; if ( map . cells [ i ] [ j ] == map . getStartCell ( ) ) { System . out . print ( "**S**" ) ; continue ; } if ( map . cells [ i ] [ j ] == map . getGoalCell ( ) ) { System . out . print ( "**G**" ) ; continue ; } if ( map . cells [ i ] [ j ] . isObstacle ) { System . out . print ( "|||||" ) ; continue ; } String rhsSymbol = map . cells [ i ] [ j ] . rhs == Integer . MAX_VALUE ? "M" : long . toString ( map . cells [ i ] [ j ] . rhs ) ; if ( this . shortestPath != null && this . shortestPath . contains ( map . cells [ i ] [ j ] ) ) { System . err . print ( String . format ( "..%2s." , rhsSymbol ) ) ; } else { System . out . print ( String . format ( "..%2s." , rhsSymbol ) ) ; } } System . out . println ( ) ; } }
va	5X	public boolean testRule ( WFF ext , WFF _world , DefaultRule d ) { WFF prec = new WFF ( d . getPrerequisite ( ) ) ; WFF world = new WFF ( _world . getFormula ( ) + " & " + ext . getFormula ( ) ) ; if ( world . entails ( prec ) ) { WFF just = new WFF ( d . getJustificatoin ( ) ) ; if ( just . eval ( ext ) ) { WFF cons = new WFF ( d . getConsequence ( ) ) ; if ( ext . isConsistent ( cons . getFormula ( ) ) ) { if ( ext . entails ( cons ) ) { return true ; } } } } else { } return false ; }
va	4	@ Override public boolean addItemToInventory ( Item item ) { if ( isRoomInInventory ( ) ) { for ( int i = 0 ; i < getInventorySize ( ) ; i ++ ) { if ( getItemInSlot ( i ) == null ) { setItemInSlot ( i , item ) ; break ; } } return true ; } else { return false ; } }
va	4	private void die ( ) { dead = true ; Clock . createTimer ( 2000 , new Functor ( ) { @ Override public void execute ( ) { if ( ( ( Player ) modify ) . getContainer ( ) != null ) { ( ( Player ) modify ) . getContainer ( ) . dropItems ( ) ; } modify . getLevel ( ) . removeMember ( modify ) ; } @ Override public void execute ( Object o ) { } } ) ; }
va	1	public String getSrcText ( ) { return "" ; }
va	3	public synchronized void delete ( ) { if ( swigCPtr != 0 ) { if ( swigCMemOwn ) { swigCMemOwn = false ; otapiJNI . delete_Storable ( swigCPtr ) ; } swigCPtr = 0 ; } }
va	5X	@ Override public Set < String > keySet ( ) { return new Set < String > ( ) { @ Override public int size ( ) { return size ; } @ Override public boolean isEmpty ( ) { return size == 0 ; } @ Override public boolean contains ( Object o ) { return get ( ( String ) o ) != null ; } @ Override public Iterator < String > iterator ( ) { return new Iterator < String > ( ) { private final Iterator < WrappedString > topLevelIterator = store . keySet ( ) . iterator ( ) ; private Iterator < String > currentIterator = topLevelIterator . hasNext ( ) ? store . get ( topLevelIterator . next ( ) ) . getValue ( ) . keySet ( ) . iterator ( ) : null ; @ Override public void remove ( ) { throw new UnsupportedOperationException ( "Read only data set" ) ; } @ Override public boolean hasNext ( ) { return currentIterator != null ; } @ Override public String next ( ) { String toReturn ; toReturn = currentIterator . next ( ) ; if ( currentIterator . hasNext ( ) ) { return toReturn ; } while ( topLevelIterator . hasNext ( ) && ! ( currentIterator = store . get ( topLevelIterator . next ( ) ) . getValue ( ) . keySet ( ) . iterator ( ) ) . hasNext ( ) ) ; if ( ! currentIterator . hasNext ( ) ) { currentIterator = null ; } return toReturn ; } } ; } @ Override public Object [ ] toArray ( ) { throw new UnsupportedOperationException ( "Not yet" ) ; } @ Override public < T > T [ ] toArray ( T [ ] a ) { throw new UnsupportedOperationException ( "Not yet" ) ; } @ Override public boolean add ( String e ) { throw new UnsupportedOperationException ( "Read only data set" ) ; } @ Override public boolean remove ( Object o ) { throw new UnsupportedOperationException ( "Read only data set" ) ; } @ Override public boolean containsAll ( Collection < ? > c ) { throw new UnsupportedOperationException ( "Not yet" ) ; } @ Override public boolean addAll ( Collection < ? extends String > c ) { throw new UnsupportedOperationException ( "Read only data set" ) ; } @ Override public boolean retainAll ( Collection < ? > c ) { throw new UnsupportedOperationException ( "Read only data set" ) ; } @ Override public boolean removeAll ( Collection < ? > c ) { throw new UnsupportedOperationException ( "Read only data set" ) ; } @ Override public void clear ( ) { throw new UnsupportedOperationException ( "Read only data set" ) ; } } ; }
va	3	public static void test ( String s ) { String - ; for ( int c = 0 ; c < s . length ( ) ; c ++ ) { for ( int i = 1 ; i <= s . length ( ) - c ; i ++ ) { - = s . substring ( c , c + i ) ; System . out . println ( - ) ; } } }
va	1	public SimulatorView ( Simulator sim ) { super ( sim ) ; colors = new LinkedHashMap < class < ? > , Color > ( ) ; fieldView = new FieldView ( 100 , 100 ) ; }
va	2	private void putStash ( int key , V value ) { if ( stashSize == stashCapacity ) { resize ( capacity << 1 ) ; put ( key , value ) ; return ; } int index = capacity + stashSize ; keyTable [ index ] = key ; valueTable [ index ] = value ; stashSize ++ ; size ++ ; }
va	2	@ Override public String getMessage ( ) { String msg = super . getMessage ( ) ; for ( String name : badValues . keySet ( ) ) { msg += "\n\t" + name + " = " + badValues . get ( name ) ; } return msg ; }
va	5X	private static int computeLongestCycle ( String string ) { final int length = string . length ( ) ; int maxcycle = 0 ; int i = 0 ; char [ ] chars = string . toCharArray ( ) ; for ( i = 0 ; i < length ; i ++ ) { boolean same = true ; char first = chars [ i ] ; int cycle = 0 ; for ( int j = i + 1 ; j < string . length ( ) ; j ++ ) { if ( chars [ j ] != first ) { same = false ; } else { final int l = ( j - i ) ; final boolean ok = equals ( chars , i , i + l , l ) ; if ( ok ) { cycle = l ; break ; } } } if ( same ) { cycle = 1 ; } if ( cycle > maxcycle ) { maxcycle = cycle ; } } return maxcycle ; }
va	1	@ Override public void Lands ( Player P ) { }
va	4	public boolean connect ( SharingPeer peer ) { boolean retry = false ; boolean sentObfuscatedHandshake = false ; do { Socket socket = new Socket ( ) ; InetSocketAddress address = new InetSocketAddress ( peer . getIp ( ) , peer . getPort ( ) ) ; logger . info ( "Connecting to " + peer + "..." ) ; try { socket . connect ( address , 3 * 1000 ) ; } catch ( IOException ioe ) { logger . warn ( "Could not connect to " + peer + ": " + ioe . getMessage ( ) ) ; return false ; } try { byte [ ] remotePeerId = ( peer . hasPeerId ( ) ? peer . getPeerId ( ) . array ( ) : null ) ; if ( this . forceObfuscation ) sentObfuscatedHandshake = this . sendObfuscatedHandshake ( socket , remotePeerId , this . forceObfuscation ) ; else sentObfuscatedHandshake = this . sendHandshake ( socket , remotePeerId , peer . supportsObfuscation ( ) ) ; Handshake hs = this . validateHandshake ( socket , ( peer . hasPeerId ( ) ? peer . getPeerId ( ) . array ( ) : null ) ) ; this . fireNewPeerConnection ( socket , hs . getPeerId ( ) ) ; return true ; } catch ( ParseException pe ) { logger . info ( "Invalid handshake from " + this . socketRepr ( socket ) + ": " + pe . getMessage ( ) ) ; if ( sentObfuscatedHandshake && peer . supportsObfuscation ( ) ) { peer . supportsObfuscation ( false ) ; retry = true ; } try { socket . close ( ) ; } catch ( IOException e ) { } } catch ( IOException ioe ) { logger . info ( "An error occured while reading an incoming " + "handshake: " + ioe . getMessage ( ) ) ; try { if ( ! socket . isClosed ( ) ) socket . close ( ) ; } catch ( IOException e ) { } } } while ( retry ) ; return false ; }
va	2	public static void main ( String [ ] args ) { File dictionary = new File ( "dictionary.txt" ) ; try { List < List < String >> anagrams = getAnagramsHT ( dictionary ) ; System . out . println ( anagrams . toString ( ) ) ; } catch ( IOException e ) { System . err . println ( "IO EXCEPTION ENCOUNTERED!!" ) ; e . printStackTrace ( ) ; } }
va	1	public String getDate ( ) { return date ; }
va	4	private JPanel makeClientListPanel ( ) { JPanel result = new JPanel ( new BorderLayout ( ) ) ; clientList = new ClientList ( ) ; clientList . addListSelectionListener ( new ListSelectionListener ( ) { @ Override public void valueChanged ( ListSelectionEvent e ) { if ( clientList . getSelectedID ( ) == - 1 ) { btKick . setEnabled ( false ) ; } else { btKick . setEnabled ( true ) ; } } } ) ; result . add ( clientList , BorderLayout . CENTER ) ; btKick = new JButton ( "Kick" ) ; btKick . setEnabled ( false ) ; btKick . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent e ) { kick ( ) ; } } ) ; btKick . addKeyListener ( new KeyAdapter ( ) { @ Override public void keyPressed ( KeyEvent e ) { kick ( ) ; } } ) ; result . add ( btKick , BorderLayout . SOUTH ) ; return result ; }
va	1	@ Override public boolean isList ( ) { return false ; }
va	2	public static float valueOf ( Object o ) { if ( o == null ) { return null ; } else if ( o instanceof float ) { return ( float ) o ; } else if ( o instanceof double ) { return ( float ) o ; } else if ( o instanceof byte ) { return ( float ) ( byte ) o ; } else if ( o instanceof Integer ) { return ( float ) ( Integer ) o ; } else if ( o instanceof long ) { return ( float ) ( long ) o ; } else { return null ; } }
va	1	public static List < Integer > commonDivisors ( final int a , final int b ) { notZeroCheck ( a ) ; notZeroCheck ( b ) ; return listIntersection ( divisors ( a ) , divisors ( b ) ) ; }
va	1	public static String Message_GetUsageCredits ( String THE_MESSAGE ) { return otapiJNI . OTAPI_Basic_Message_GetUsageCredits ( THE_MESSAGE ) ; }
va	3	public void addEdge ( int vi , int vj ) { Vertex vFrom = null ; Vertex vTo = null ; for ( Vertex v : vs ) { if ( v . vertex == vi ) { vFrom = v ; } if ( v . vertex == vj ) { vTo = v ; } } if ( vFrom == null ) { vFrom = new Vertex ( vi ) ; vs . add ( vFrom ) ; } if ( vi != vj ) { if ( vTo == null ) { vTo = new Vertex ( vj ) ; vs . add ( vTo ) ; } vFrom . adjacent . add ( vTo ) ; vTo . adjacent . add ( vFrom ) ; } else { vFrom . adjacent . add ( vFrom ) ; } }
va	2	@ Override public Object visitBooleanLiteral ( BooleanLiteral bool , Integer arg ) { if ( bool . spelling . equals ( "true" ) ) { Machine . emit ( Op . LOADL , Machine . trueRep ) ; } else { Machine . emit ( Op . LOADL , Machine . falseRep ) ; } return null ; }
va	5X	public static Set < Cliente > getClientesPedidosColores ( Set < Color > colores ) { Set < Cliente > l = new HashSet < > ( ) ; try { sql = "SELECT DISTINCT (CLIENTES_REMITOS.IDCLIENTE) AS IDCLIENTE " + "FROM CLIENTES_REMITOS INNER JOIN CLIENTES_DETALLE_REMITO ON " + "CLIENTES_REMITOS.IDREMITO = CLIENTES_DETALLE_REMITO.IDREMITO " + "WHERE (((CLIENTES_REMITOS.TIPODOC)=1 Or (CLIENTES_REMITOS.TIPODOC)=4) AND " + "((CLIENTES_REMITOS.ENTREGADO)=False) AND " + "((CLIENTES_DETALLE_REMITO.ACT_STOCK)=False) AND ( " ; String tmp = "" ; for ( Color color : colores ) { tmp = tmp + Integer . toString ( color . getId ( ) ) + "  " ; } tmp = tmp . substring ( 0 , tmp . length ( ) - 2 ) ; sql = sql + " CLIENTES_DETALLE_REMITO.COLOR IN (" + tmp + ")" ; sql = sql + "));" ; try ( ResultSet rs = ComunDP . getData ( sql ) ) { if ( rs != null ) { while ( rs . next ( ) ) { Cliente cliente = ClienteDP . getOne ( rs . getInt ( "IDCLIENTE" ) ) ; if ( cliente != null ) { l . add ( cliente ) ; } } } } } catch ( SQLException ex ) { Utils . showError ( "Error..." , "Error al buscar clientes con pedidos por colores.\nERROR: " + ex . getMessage ( ) + "\nSQL State: " + ex . getSQLState ( ) ) ; } return l ; }
va	3	public void fireModelPagesJaukesChanged ( int i_typeChange ) { I_ModelPagesJaukesListener [ ] listenerModelPagesJaukes = ( I_ModelPagesJaukesListener [ ] ) listeners . getListeners ( I_ModelPagesJaukesListener . class ) ; for ( I_ModelPagesJaukesListener listener : listenerModelPagesJaukes ) { switch ( i_typeChange ) { case 0 : listener . criteriaPagesJaukesChange ( ) ; break ; default : System . err . println ( "ModelPagesJaukes.java - Erreur fonction criteriaPagesJaukesChange" ) ; break ; } } }
va	3	public static boolean isPrime ( int checkNumber ) { double root = Math . sqrt ( checkNumber ) ; for ( int i = 2 ; i <= root ; i ++ ) { if ( checkNumber % i == 0 ) { return false ; } } return true ; }
va	5X	public List < Location > adjacentLocations ( Location location ) { assert location != null : "Null location passed to adjacentLocations" ; List < Location > locations = new LinkedList < Location > ( ) ; if ( location != null ) { int row = location . getRow ( ) ; int col = location . getCol ( ) ; for ( int roffset = - 1 ; roffset <= 1 ; roffset ++ ) { int nextRow = row + roffset ; if ( nextRow >= 0 && nextRow < depth ) { for ( int coffset = - 1 ; coffset <= 1 ; coffset ++ ) { int nextCol = col + coffset ; if ( nextCol >= 0 && nextCol < width && ( roffset != 0 || coffset != 0 ) ) { locations . add ( new Location ( nextRow , nextCol ) ) ; } } } } Collections . shuffle ( locations , rand ) ; } return locations ; }
va	2	@ Override public String toString ( ) { final StringBuilder bld = new StringBuilder ( this . getClass ( ) . getSimpleName ( ) ) . append ( ": " ) ; if ( ! PRIMITIVES . contains ( this . name ) ) { bld . append ( this . packageName != null ? this . packageName : "[default package]" ) . append ( "." ) ; } return bld . append ( this . name ) . toString ( ) ; }
va	2	@ Override public int attachSoundEffect ( SoundEffect effect , int channel ) { if ( channel > chEffects . size ( ) ) throw new IndexOutOfBoundsException ( "Channel must be in range!" ) ; effect = effect . clone ( ) ; if ( channel < 0 ) { if ( effect . getChannelCount ( ) != channelCount ) throw new IllegalArgumentException ( "The effects channel count must be same as this mixers channel count!" ) ; mEffects . add ( effect ) ; return mEffects . size ( ) - 1 ; } else { if ( effect . getChannelCount ( ) != getInputChannelOutputChannelCount ( channel ) ) throw new IllegalArgumentException ( "The effects channel count must be the same as input channels channel count!" ) ; ArrayList < SoundEffect > e = chEffects . get ( channel ) ; e . add ( effect ) ; return e . size ( ) - 1 ; } }
va	4	private Nodo buscarNodo ( String padre ) { Nodo tmp1 = this . raiz ; Nodo tmp2 = tmp1 ; StringTokenizer path = new StringTokenizer ( padre , "/" ) ; String s ; while ( path . hasMoreTokens ( ) ) { s = path . nextToken ( ) ; while ( tmp1 != null ) { if ( s . equals ( tmp1 . dato ) ) break ; else { tmp2 = tmp1 = tmp1 . primerHijo ; } } if ( tmp1 == null ) return tmp1 ; else { tmp2 = tmp1 ; tmp1 = tmp1 . siguienteHermano ; } } return tmp2 ; }
va	5X	private Objective loadObjective ( TagCompound tag ) { try { TagBase tbname = tag . getTag ( "name" ) ; if ( ! ( tbname instanceof TagString ) ) return null ; TagBase tbtarget = tag . getTag ( "target" ) ; if ( ! ( tbtarget instanceof TagString ) ) return null ; TagBase tbtypes = tag . getTag ( "type" ) ; if ( ! ( tbtypes instanceof TagString ) ) return null ; ObjectiveType t = QuestManager . getInstance ( ) . getRegisteredObjectiveType ( ( ( TagString ) tbtypes ) . data ) ; if ( t == null ) return null ; Objective o = new Objective ( tag . getName ( ) , ( ( TagString ) tbname ) . data , t , ( ( TagString ) tbtarget ) . data ) ; TagBase tbicoid = tag . getTag ( "iconid" ) ; if ( tbicoid instanceof TagInt ) o . setItemIconId ( ( ( TagInt ) tbicoid ) . data ) ; TagBase tbopt = tag . getTag ( "optional" ) ; if ( tbopt instanceof TagByte ) o . setOptional ( ( ( TagByte ) tbopt ) . data == 1 ) ; TagBase tbvis = tag . getTag ( "visible" ) ; if ( tbvis instanceof TagByte ) o . setVisible ( ( ( TagByte ) tbvis ) . data == 1 ) ; TagBase rewards = tag . getTag ( "rewards" ) ; if ( rewards instanceof TagList ) { for ( TagBase b : ( ( TagList ) rewards ) . get ( ) ) { if ( b instanceof TagCompound ) { QuestAction a = loadAction ( ( TagCompound ) b ) ; if ( a != null ) o . addReward ( a ) ; } } } TagBase desc = tag . getTag ( "description" ) ; ArrayList < String > dsc = new ArrayList < String > ( ) ; if ( desc instanceof TagList ) { for ( TagBase b : ( ( TagList ) desc ) . get ( ) ) { if ( b instanceof TagString ) { dsc . add ( ( ( TagString ) b ) . data ) ; } } } o . setDescription ( dsc ) ; return o ; } catch ( IllegalArgumentException iae ) { return null ; } }
va	1	public boolean hasToChargeMove ( ) { return chargingMoveCount > 0 ; }
va	4	public static void main ( String args [ ] ) { try { for ( javax . swing . UIManager . LookAndFeelInfo info : javax . swing . UIManager . getInstalledLookAndFeels ( ) ) { if ( "Nimbus" . equals ( info . getName ( ) ) ) { javax . swing . UIManager . setLookAndFeel ( info . getClassName ( ) ) ; break ; } } } catch ( ClassNotFoundException ex ) { java . util . logging . Logger . getLogger ( RelVendasPorVendedor . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( InstantiationException ex ) { java . util . logging . Logger . getLogger ( RelVendasPorVendedor . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( IllegalAccessException ex ) { java . util . logging . Logger . getLogger ( RelVendasPorVendedor . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( javax . swing . UnsupportedLookAndFeelException ex ) { java . util . logging . Logger . getLogger ( RelVendasPorVendedor . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } java . awt . EventQueue . invokeLater ( new Runnable ( ) { public void run ( ) { new RelVendasPorVendedor ( ) . setVisible ( true ) ; } } ) ; }
va	2	void dispatch ( SelectionKey key ) { Runnable r = ( Runnable ) key . attachment ( ) ; if ( r != null ) { r . run ( ) ; } }
va	3	protected void action ( Source source , Map < String , Object > map , int i ) throws Exception { log . debug ( String . format ( "Loop [%s] step %d." , getName ( ) , i ) ) ; map . put ( "position" , i ) ; if ( source != null ) { map . put ( "value" , source . pickOne ( "value" , "base" ) ) ; } if ( getBeforeAction ( ) == null || getBeforeAction ( ) . invoke ( getContext ( ) , this , i ) ) { for ( Insert insert : getInserts ( ) ) { log . debug ( String . format ( "Loop [%s] step %d  insert %s" , getName ( ) , i , insert . getName ( ) ) ) ; insert . execute ( ) ; } for ( Loop loop : getLoops ( ) ) { log . debug ( String . format ( "Loop [%s] step %d  loop %s" , getName ( ) , i , loop . getName ( ) ) ) ; loop . execute ( ) ; } if ( getAction ( ) != null ) { getAction ( ) . invoke ( getContext ( ) , this , i ) ; } if ( getAfterAction ( ) != null ) { getAfterAction ( ) . invoke ( getContext ( ) , this , i ) ; } } }
va	4	public void newDocument ( ) { try { final DocumentFrame doc = new DocumentFrame ( loadOrganizer , null ) ; loadOrganizer . openDocuments . add ( doc ) ; doc . addInternalFrameListener ( new InternalFrameAdapter ( ) { @ Override public void internalFrameClosed ( InternalFrameEvent e ) { loadOrganizer . openDocuments . remove ( doc ) ; } } ) ; loadOrganizer . desktop . add ( doc , LoadOrganizer . DOCLAYER ) ; if ( preferences . isGuiNewWindowMaximize ( ) ) { doc . setMaximum ( true ) ; } doc . setVisible ( true ) ; doc . setSelected ( true ) ; } catch ( DocumentClosedException e ) { } catch ( Throwable e ) { e . printStackTrace ( ) ; System . exit ( - 1 ) ; } }
va	1	public void setType ( String type ) { this . type = type ; }
va	3	private static boolean hasAccess ( IGraph g , IGraph access ) { for ( int i = 0 ; i < g . size ( ) ; i ++ ) { for ( int j = 0 ; j < access . size ( ) ; j ++ ) { String a = g . get ( i ) . getName ( ) ; String b = access . get ( j ) . getName ( ) ; if ( a . equals ( b ) ) return true ; } } return false ; }
va	5X	private void distributePoints ( int mouseX , int mouseY ) { if ( pointsRequested && id != - 1 && requestedPointsLeft != - 1 ) { if ( requestedPointsLeft > 0 && id != - 2 ) { for ( int x = 0 ; x < windowslist . size ( ) ; x ++ ) { if ( windowslist . get ( x ) . getID ( ) == id ) { if ( Mouse . isButtonDown ( 0 ) ) { if ( windowslist . get ( x ) . getPoint ( mouseX , mouseY ) ) { requestedPointsLeft -- ; } } } } } else if ( requestedPointsLeft > 0 && id == - 2 ) { if ( Mouse . isButtonDown ( 0 ) ) { if ( activePane . getPoint ( mouseX , mouseY ) ) { requestedPointsLeft -- ; } } } else { id = - 1 ; pointsRequested = false ; requestedPointsLeft = - 1 ; } } }
va	2	@ Override public Set < java . util . Map . Entry < K , V >> entrySet ( ) { if ( this . entrySet == null ) { this . entrySet = new EntrySet ( ) ; } return this . entrySet ; }
va	3	@ Test public void testTwoDimensionalArrays ( ) { final int rows = 3 ; final int cols = 4 ; int count = 0 ; int [ ] [ ] matrix = new int [ rows ] [ cols ] ; for ( int row = 0 ; row < rows ; row ++ ) { for ( int col = 0 ; col < cols ; col ++ ) { matrix [ row ] [ col ] = count ++ ; } } assertEquals ( 11 , matrix [ 2 ] [ 3 ] ) ; assertEquals ( 6 , matrix [ 1 ] [ 2 ] ) ; }
va	3	private void compact ( ) { int from = 0 ; int to = 0 ; while ( from < this . capacity ) { Object key = this . list [ from ] ; long usage = age ( this . ticks [ from ] ) ; if ( usage > 0 ) { this . ticks [ to ] = usage ; this . list [ to ] = key ; this . map . put ( key , to ) ; to += 1 ; } else { this . map . remove ( key ) ; } from += 1 ; } if ( to < this . capacity ) { this . length = to ; } else { this . map . clear ( ) ; this . length = 0 ; } this . power = 0 ; }
va	4	public void doService ( ) { Message message = parser . nextMessage ( ) ; while ( message != null ) { switch ( message . getType ( ) ) { case CONNECT : writer . println ( "ALREADY CONNECTED!" ) ; writer . flush ( ) ; break ; case DISCONNECT : server . broadcaster . remove ( connection ) ; break ; case TEXTMSG_CLIENT : broadcastMessage ( message ) ; break ; case IMAGE_CLIENT : server . setImage ( ImageUtils . decodeImage ( message . getMatcher ( ) . group ( 1 ) ) ) ; broadcastMessage ( message ) ; break ; default : AbstractTool tool = AbstractTool . getTool ( message . getType ( ) ) ; if ( tool != null ) { server . updateImage ( tool , message ) ; broadcastMessage ( message ) ; } break ; } message = parser . nextMessage ( ) ; } }
va	4	public void decay ( ) { entities . clear ( ) ; for ( int b = 0 ; b < parts . size ( ) ; b ++ ) { if ( parts . get ( b ) . isContainer ( ) ) { entities . addAll ( parts . get ( b ) . getEntities ( ) ) ; } } if ( entities . size ( ) > 0 ) { for ( int e = 0 ; e < entities . size ( ) ; e ++ ) { if ( entities . get ( e ) . getBodyPart ( ) != null ) { entities . get ( e ) . getBodyPart ( ) . decay ( ) ; } } } }
va	2	private Request getBaseRequest ( Iterator < String > titles ) { try { Request ret = new Request ( BASE ) ; String joinedTitles = combineStrings ( titles , 50 ) ; ret . addQuery ( TITLES_KEY , joinedTitles ) ; return ret ; } catch ( MalformedURLException impossible ) { impossible . printStackTrace ( ) ; return null ; } }
va	4	public static BasicSingleton getInstance ( ) { if ( instance == null ) { synchronized ( BasicSingleton . class ) { if ( instance == null ) { instance = new BasicSingleton ( ) ; instance . increment ( ) ; } } } return instance ; }
va	3	@ EventHandler ( priority = EventPriority . LOWEST ) public void lever ( PlayerInteractEvent event ) { Action action = event . getAction ( ) ; if ( action == Action . LEFT_CLICK_BLOCK || action == Action . RIGHT_CLICK_BLOCK ) { if ( event . getClickedBlock ( ) . getType ( ) == Material . LEVER ) { prevent ( event , event . getPlayer ( ) , "lever interact" ) ; } } }
va	1	public Response delete ( String url , boolean authenticated ) throws WeiboException { return httpRequest ( url , null , authenticated , "DELETE" ) ; }
va	5X	private ID3v2CommentFrameData extractCommentFrameData ( String id , boolean itunes ) { ID3v2FrameSet frameSet = frameSets . get ( id ) ; if ( frameSet != null ) { Iterator < ID3v2Frame > iterator = frameSet . getFrames ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { ID3v2Frame frame = ( ID3v2Frame ) iterator . next ( ) ; ID3v2CommentFrameData frameData ; try { frameData = new ID3v2CommentFrameData ( useFrameUnsynchronisation ( ) , frame . getData ( ) ) ; if ( itunes && ITUNES_COMMENT_DESCRIPTION . equals ( frameData . getDescription ( ) . toString ( ) ) ) { return frameData ; } else if ( ! itunes ) { return frameData ; } } catch ( InvalidDataException e ) { } } } return null ; }
va	4	private void setUIDesign ( ) { try { for ( javax . swing . UIManager . LookAndFeelInfo info : javax . swing . UIManager . getInstalledLookAndFeels ( ) ) { if ( "Metal" . equals ( info . getName ( ) ) ) { javax . swing . UIManager . setLookAndFeel ( info . getClassName ( ) ) ; break ; } } } catch ( ClassNotFoundException | InstantiationException | IllegalAccessException | javax . swing . UnsupportedLookAndFeelException ex ) { java . util . logging . Logger . getLogger ( MantenimientoUsuario . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } }
va	1	public void setC ( float C ) { this . C = C ; }
va	1	public void mouseExited ( MouseEvent e ) { }
va	5X	@ Override public void call ( ) throws IOException { boolean online = true ; while ( online ) { selector . select ( ) ; Iterator < SelectionKey > it = selector . selectedKeys ( ) . iterator ( ) ; while ( it . hasNext ( ) ) { SelectionKey key = it . next ( ) ; it . remove ( ) ; SocketChannel channel = ( SocketChannel ) key . channel ( ) ; MessageHandler handler = handlers . get ( channel ) ; if ( key . isReadable ( ) ) { DataUnit message ; try { message = mp . read ( p , channel ) ; handler . handleMessage ( message ) ; } catch ( IOException e ) { handler . notifyDisconnect ( ) ; handlers . remove ( channel ) ; key . cancel ( ) ; } } } } return null ; }
va	3	private List < Integer > getSelection ( ) { final List < Integer > sel = new LinkedList < > ( ) ; for ( int i = 0 ; i < cardList . size ( ) ; i ++ ) { if ( cardList . get ( i ) . selected ) { sel . add ( i ) ; } } return sel ; }
va	2	public void setAttributes ( Point leftest , Point rightest ) { if ( leftest != null ) { leftAngle = Tools . round ( src . getDirection ( leftest ) , 10000 ) ; leftDist = src . getDistance ( leftest ) ; } if ( rightest != null ) { rightAngle = Tools . round ( src . getDirection ( rightest ) , 10000 ) ; rightDist = src . getDistance ( rightest ) ; } }
va	2	public void testService ( ) throws Exception { System . out . println ( "locating service:osgi" ) ; int count = 0 ; for ( ServiceLocationEnumeration services = TestActivator . locator . findServices ( new ServiceType ( "service:osgi" ) , null , null ) ; services . hasMoreElements ( ) ; ) { assertEquals ( services . next ( ) . toString ( ) , "service:osgi://gantenbein:123" ) ; count ++ ; } assertEquals ( count , 1 ) ; }
va	2	public static List < Appointment > findByVenue ( long venueId ) throws SQLException { List < Appointment > aAppt = new ArrayList < Appointment > ( ) ; ResultSet resultSet = Data . _find ( Appointment . class . getSimpleName ( ) , "venueId" , String . valueOf ( venueId ) ) ; while ( resultSet . next ( ) ) { aAppt . add ( Appointment . createOneFromResultSet ( resultSet ) ) ; } return aAppt ; }
va	1	public void clear ( ) { listModel . clear ( ) ; }
va	2	protected String [ ] getFontStyleNames ( ) { if ( fontStyleNames == null ) { int i = 0 ; fontStyleNames = new String [ 4 ] ; fontStyleNames [ i ++ ] = ( "Plain" ) ; fontStyleNames [ i ++ ] = ( "Bold" ) ; fontStyleNames [ i ++ ] = ( "Italic" ) ; fontStyleNames [ i ++ ] = ( "BoldItalic" ) ; } return fontStyleNames ; }
va	2	public T getValue ( ) { if ( available == false ) { throw new RuntimeException ( "Value not available" ) ; } return value ; }
va	1	public Object opt ( int index ) { return ( index < 0 || index >= length ( ) ) ? null : this . myArrayList . get ( index ) ; }
va	5X	public static Object [ ] commandsForAgentAndBoxToField ( Level l , Agent agent , Box box , Field agentFromField , ArrayList < Node > nodesAgentCanEndIn , Field boxToField , ArrayList < Box > boxesToIgnore , DockTask taskDock ) { if ( boxesToIgnore == null ) { boxesToIgnore = new ArrayList < Box > ( ) ; boxesToIgnore . add ( box ) ; } ArrayList < Field > pathToGuideBoxAlong = new ArrayList < Field > ( taskDock . path ) ; Collections . reverse ( pathToGuideBoxAlong ) ; Field boxFromField = box . atField ; dir boxDir = null ; GoalSequenceNode root = new GoalSequenceNode ( boxFromField , agentFromField , null ) ; root . g = 0 ; root . w = 0 ; root . h = pathToGuideBoxAlong . size ( ) - 1 ; root . f = root . g + root . w + root . h ; Queue < GoalSequenceNode > queue = new PriorityQueue < GoalSequenceNode > ( ) ; HashMap < Field , ArrayList < Field >> closedSet = new HashMap < Field , ArrayList < Field >> ( ) ; ArrayList < Field > tempList = new ArrayList < Field > ( ) ; tempList . add ( boxFromField ) ; closedSet . put ( agentFromField , tempList ) ; queue . add ( root ) ; GoalSequenceNode currentNode = queue . poll ( ) ; while ( currentNode != null ) { if ( currentNode . boxLocation == boxToField ) { if ( nodesAgentCanEndIn == null || nodesAgentCanEndIn . contains ( currentNode . agentLocation ) ) { break ; } } boxDir = Agent . getBoxDirection ( currentNode . agentLocation , currentNode . boxLocation ) ; ArrayList < Command > possibleBoxCommands = possibleBoxCommandsForDirection ( boxDir , currentNode . agentLocation , currentNode . boxLocation , boxesToIgnore ) ; for ( Command command : possibleBoxCommands ) { Field boxLocation = null ; Field agentLocation = null ; if ( command . cmd . equals ( "Push" ) ) { agentLocation = currentNode . boxLocation ; boxLocation = currentNode . boxLocation . neighbors [ command . dir2 . ordinal ( ) ] ; } else { boxLocation = currentNode . agentLocation ; agentLocation = currentNode . agentLocation . neighbors [ command . dir1 . ordinal ( ) ] ; } if ( closedSet . containsKey ( agentLocation ) ) { if ( closedSet . get ( agentLocation ) . contains ( boxLocation ) ) { continue ; } else { closedSet . get ( agentLocation ) . add ( boxLocation ) ; } } else { ArrayList < Field > tempListe = new ArrayList < Field > ( ) ; tempListe . add ( boxLocation ) ; closedSet . put ( agentLocation , tempListe ) ; } GoalSequenceNode node = new GoalSequenceNode ( boxLocation , agentLocation , command ) ; node . parent = currentNode ; node . g = node . parent . g + 1 ; node . w = ( command . weight ) ? 15 : 0 ; if ( node . parent . h - 1 >= 0 && pathToGuideBoxAlong . get ( node . parent . h - 1 ) == node . boxLocation ) { node . h = node . parent . h - 1 ; } else { node . h = node . parent . h ; } node . f = node . g + node . w + node . h ; queue . add ( node ) ; } if ( queue . isEmpty ( ) ) { System . err . println ( "CRY" ) ; return null ; } currentNode = queue . poll ( ) ; } Field agentMoveTo = currentNode . agentLocation ; LinkedList < Command > commands = new LinkedList < Command > ( ) ; LinkedList < Field > fieldsUsed = new LinkedList < Field > ( ) ; while ( currentNode . parent != null ) { commands . add ( currentNode . action ) ; fieldsUsed . add ( currentNode . agentLocation ) ; fieldsUsed . add ( currentNode . boxLocation ) ; currentNode = currentNode . parent ; } Collections . reverse ( commands ) ; Collections . reverse ( fieldsUsed ) ; LinkedHashSet < Field > fieldsUsedSet = new LinkedHashSet < Field > ( fieldsUsed ) ; ArrayList < Field > fieldsUsedList = new ArrayList < Field > ( fieldsUsedSet ) ; return new Object [ ] { commands , fieldsUsedList , agentMoveTo } ; }
va	1	public synchronized long getHMillis ( ) { return ( long ) ( p . H * 1000.0 ) ; }
va	3	@ Override public Collection < ApiLocation > getLocationsWithMinerals ( ApiAuth < ? > character ) throws ApiException { Set < long > result = new TreeSet < long > ( ) ; api . setAuth ( character ) ; ApiConnector connector = EveApi . getConnector ( ) ; AssetListResponse response = connector . execute ( new ApiRequest ( ApiPath . CHARACTER , ApiPage . ASSET_LIST , 2 , character ) , new AssetListHandler ( ) , AssetListResponse . class ) ; Stack < EveAsset < ? >> assets = new Stack < EveAsset < ? >> ( ) ; assets . addAll ( response . getAll ( ) ) ; while ( ! assets . isEmpty ( ) ) { EveAsset < ? > asset = assets . pop ( ) ; if ( asset . getAssets ( ) != null ) { assets . addAll ( asset . getAssets ( ) ) ; } if ( isMineral ( asset ) && asset . getLocationID ( ) != null ) { result . add ( asset . getLocationID ( ) ) ; } } long [ ] objects = result . toArray ( new long [ 0 ] ) ; long [ ] ids = new long [ objects . length ] ; for ( int i = 0 ; i < ids . length ; i ++ ) { ids [ i ] = objects [ i ] ; } String join = StringUtils . join ( " " , ids ) ; Map < String , String > params = Collections . singletonMap ( "IDs" , join ) ; LocationsResponse locationsResponse = connector . execute ( new ApiRequest ( ApiPath . CHARACTER , ApiPage . LOCATIONS , 2 , character , params ) , new LocationsHandler ( ) , LocationsResponse . class ) ; return locationsResponse . getAll ( ) ; }
va	4	private void showInfo ( ) { try { FileReader file = new FileReader ( "data/info.txt" ) ; BufferedReader buff = new BufferedReader ( file ) ; boolean eof = false ; while ( ! eof ) { String line = buff . readLine ( ) ; if ( line != null ) { infoArea . append ( "\n" + line ) ; } else { eof = true ; } } } catch ( FileNotFoundException e ) { e . printStackTrace ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }
va	1	public void incrementNodeQuantity ( int increment ) { nodeQuantity += increment ; }
va	5X	public void editFile ( int fileInodeNum ) throws PermissionDeniedException , FileNotFoundException { Inode fileInode = new Inode ( fileInodeNum ) ; if ( Directory . isReadable ( fileInode ) ) { if ( fileInode . getFileType ( ) == r ) { File tempFile = null ; String content = fileInode . getFileContent ( ) ; try { tempFile = new File ( Disk . tmpFolder . toString ( ) + "/" + fileInodeNum + ".txt" ) ; if ( tempFile . exists ( ) ) { tempFile . delete ( ) ; tempFile . createNewFile ( ) ; } tempFile . deleteOnExit ( ) ; RandomAccessFile tempRF = new RandomAccessFile ( tempFile , "rw" ) ; tempRF . writeBytes ( content ) ; Desktop . getDesktop ( ) . open ( tempFile ) ; tempRF . close ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } } else throw new PermissionDeniedException ( ) ; }
va	4	private void buttonColoredAction1ActionPerformed ( java . awt . event . ActionEvent evt ) { DefaultTableModel model = new DefaultTableModel ( ) ; this . jTable1 . setModel ( model ) ; model . setColumnIdentifiers ( new Object [ ] { "Id" , "Descripcion" , "Usuario" , "Estado" , "Proyecto" } ) ; Tarea tarea = new Tarea ( ) ; tarea . setIdProyecto ( Integer . parseInt ( txtIdProyecto . getText ( ) ) ) ; try { ResultSet res = QATracker . tareaBus . consultaProyecto ( tarea ) ; while ( res . next ( ) ) { model . addRow ( new Object [ ] { res . getString ( 1 ) , res . getString ( 2 ) , res . getString ( 3 ) , res . getString ( 4 ) , res . getString ( 5 ) } ) ; } } catch ( SQLException ex ) { System . out . println ( ex . getMessage ( ) ) ; } }
va	3	public void addFAB ( NodeFAB f , boolean clear ) { if ( clear ) fabs . clear ( ) ; int numB = 5 ; fabs . add ( f . make ( ) ) ; for ( Node N : network ) { if ( clear ) { N . clearFABS ( ) ; } N . addFAB ( f . make ( ) ) ; N . initFAB ( N . getNumFab ( ) - 1 , 0 ) ; } }
va	2	@ Test public void testByZero ( ) { try { DivisionResult dr = Util . divideByApproximatelyEqualParts ( 2 , 0 ) ; fail ( "ae expected  but obtained " + dr ) ; } catch ( ArithmeticException ae ) { } }
va	3	private static int [ ] [ ] maxSumArea ( int m , int n , int [ ] [ ] forest ) { int [ ] [ ] res = new int [ m ] [ n ] ; int [ ] [ ] matrix = flip ( m , n , forest ) ; for ( int i = 0 ; i < res [ 0 ] . length ; i ++ ) { res [ 0 ] [ i ] = forest [ 0 ] [ i ] ; } for ( int i = 1 ; i < res . length ; i ++ ) { for ( int j = 0 ; j < res [ i ] . length ; j ++ ) { if ( forest [ i ] [ j ] == 0 ) res [ i ] [ j ] = 0 ; else res [ i ] [ j ] = res [ i - 1 ] [ j ] + forest [ i ] [ j ] ; } } return res ; }
va	1	public void setProjectId ( int projectId ) { this . projectId = projectId ; }
va	2	public String getKeterangan ( ) { char idx = getIndex ( ) ; switch ( idx ) { case A : return "Sangat Baik" ; case B : return "Baik" ; case C : return "Cukup" ; case D : return "Kurang" ; default : return "Sangat Kurang" ; } }
va	5X	protected FileRequestResponseMessage handleResponse ( InputStream in ) throws UnsupportedEncodingException { FileRequestResponseMessage try_again = new FileRequestResponseMessage ( FileRequestResponseMessage . ResponseCode . TRY_AGAIN_LATER , 0 ) ; int probe_len = FileRequestResponseMessage . TYPE_FIELD . length ( ) + 4 ; byte [ ] buffer = new byte [ probe_len ] ; try { in . read ( buffer , 0 , probe_len ) ; } catch ( IOException e ) { logger . log ( Level . SEVERE , "Could not read response stream: '" + e . getMessage ( ) + "' - assuming 'NEVER TRY AGAIN'" ) ; return try_again ; } String responseHeader = new String ( buffer , Message . ENCODING ) . trim ( ) ; switch ( responseHeader . toUpperCase ( ) ) { case FileRequestResponseMessage . TYPE_FIELD + Message . FIELD_SEPERATOR + "OK" : String str_expectedTransferVolume = "" ; int next ; try { while ( ( next = in . read ( ) ) != Message . MESSAGE_SPERATOR ) if ( next == - 1 ) { Thread . sleep ( 500 ) ; } else { str_expectedTransferVolume += new String ( new byte [ ] { ( byte ) next } , Message . ENCODING ) ; } } catch ( IOException | InterruptedException e ) { logger . log ( Level . SEVERE , "Could not understand response header" ) ; transferState = TransferStatus . LostConnection ; closeSocket ( ) ; return null ; } try { long expectedTransferVolume = long . valueOf ( str_expectedTransferVolume ) ; return new FileRequestResponseMessage ( FileRequestResponseMessage . ResponseCode . OK , expectedTransferVolume ) ; } catch ( NumberFormatException ex ) { logger . log ( Level . SEVERE , "Response contained invalid 'expected transfer volume' - assuming 'TRY AGAIN LATER'" ) ; return try_again ; } case FileRequestResponseMessage . TYPE_FIELD + Message . FIELD_SEPERATOR + "TRY" : logger . log ( Level . INFO , "Received 'try again later from host'" ) ; return try_again ; case FileRequestResponseMessage . TYPE_FIELD + Message . FIELD_SEPERATOR + "NEV" : logger . log ( Level . INFO , "Received 'never try agiain from host'" ) ; return new FileRequestResponseMessage ( FileRequestResponseMessage . ResponseCode . NEVER_TRY_AGAIN , 0 ) ; default : logger . log ( Level . INFO , "Received garbage: '" + responseHeader + "'" ) ; return try_again ; } }
va	3	private Chunk loadChunk ( String [ ] [ ] s , Renderer rend ) { Point p1 = new Point ( Integer . decode ( s [ 0 ] [ 0 ] ) , Integer . decode ( s [ 0 ] [ 1 ] ) ) ; loaded . add ( p1 ) ; Chunk c ; const . debug ( "(SaveHandler:loadChunk): p1:" + p1 . x + "  " + p1 . y ) ; if ( p1 . x == 0 && p1 . y == 0 ) { const . debug ( "(SaveHandler:loadChunk): spawn will be loaded" ) ; c = new SpawnChunk ( map , p1 , true , rend , false ) ; } else if ( p1 . y < 0 ) { const . debug ( "(SaveHandler:loadChunk): underground will be loaded" ) ; c = new UndergroundChunk ( map , p1 , true , rend ) ; } else if ( p1 . y > 0 ) { const . debug ( "(SaveHandler:loadChunk): sky will be loaded" ) ; c = new SkyChunk ( map , p1 , true , rend ) ; } else { const . debug ( "(SaveHandler:loadChunk): surface will be loaded" ) ; c = new SurfaceChunk ( map , p1 , true , rend , false ) ; ( ( SurfaceChunk ) c ) . biome = Integer . decode ( s [ 0 ] [ 2 ] ) ; if ( p1 . x == 0 ) { System . err . println ( "error while loading chunk  wrong selection" ) ; System . exit ( 1 ) ; } } cl . add ( c . pos . x , c . pos . y , c ) ; return c ; }
va	2	public int getPort ( ) { String num = getString ( "Port" ) ; if ( num == null || num . equals ( "" ) ) { return DEFAULT_PORT ; } try { return Integer . parseInt ( num , 10 ) ; } catch ( NumberFormatException ex ) { logger . warning ( "Bad value for listening port (" + num + ")" ) ; throw new IllegalStateException ( "Bad value for listening port (" + num + ")" , ex ) ; } }
va	5X	public String buildUrl ( ) { StringBuilder urlBuilder = new StringBuilder ( ) ; StringBuilder placeHolderBuilder = new StringBuilder ( ) ; boolean placeHolderFlag = false ; for ( int i = 0 ; i < urlFormat . length ( ) ; i ++ ) { if ( urlFormat . charAt ( i ) == API_URLS_PLACEHOLDER_START ) { placeHolderBuilder = new StringBuilder ( ) ; placeHolderFlag = true ; } else if ( placeHolderFlag && urlFormat . charAt ( i ) == API_URLS_PLACEHOLDER_END ) { String placeHolder = placeHolderBuilder . toString ( ) ; if ( PROTOCOL_PLACEHOLDER . equals ( placeHolder ) ) { urlBuilder . append ( API_PROTOCOL ) ; } else if ( QUERY_PARAMETERS_PLACEHOLDER . equals ( placeHolder ) ) { StringBuilder builder = new StringBuilder ( ) ; if ( ! parametersMap . isEmpty ( ) ) { Iterator < String > iter = parametersMap . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String name = iter . next ( ) ; String value = parametersMap . get ( name ) ; builder . append ( name ) ; builder . append ( "=" ) ; builder . append ( value ) ; if ( iter . hasNext ( ) ) { builder . append ( "&" ) ; } } } urlBuilder . append ( builder . toString ( ) ) ; } else { urlBuilder . append ( API_URLS_PLACEHOLDER_START ) ; urlBuilder . append ( placeHolder ) ; urlBuilder . append ( API_URLS_PLACEHOLDER_END ) ; } placeHolderFlag = false ; } else if ( placeHolderFlag ) { placeHolderBuilder . append ( urlFormat . charAt ( i ) ) ; } else { urlBuilder . append ( urlFormat . charAt ( i ) ) ; } } return urlBuilder . toString ( ) ; }
va	4	public static synchronized Singleton getInstance ( ) { if ( uniqueInstance == null ) { synchronized ( Singleton . class ) { if ( uniqueInstance == null ) { uniqueInstance = new Singleton ( ) ; } } } return uniqueInstance ; }
va	4	private int findShortestPath ( ) throws IllegalStateException { int min = Integer . MAX_VALUE ; for ( int i = 1 ; i <= graph . V ( ) ; i ++ ) { for ( int j = 1 ; j <= graph . V ( ) ; j ++ ) { if ( i == j && d [ i ] [ j ] [ graph . V ( ) ] < 0 ) { throw new IllegalStateException ( "Negative cycle!" ) ; } if ( d [ i ] [ j ] [ graph . V ( ) ] < min ) { min = d [ i ] [ j ] [ graph . V ( ) ] ; } } } return min ; }
va	3	public boolean isAlive ( ) { if ( ! isAlive ) { if ( location != null ) { field . clear ( location ) ; location = null ; field = null ; } } return isAlive ; }
va	3	@ SuppressWarnings ( "unchecked" ) private void initComponents ( ) { scrollPane1 = new java . awt . ScrollPane ( ) ; scrollbar3 = new java . awt . Scrollbar ( ) ; jButton1 = new javax . swing . JButton ( ) ; jButton2 = new javax . swing . JButton ( ) ; jLabel1 = new javax . swing . JLabel ( ) ; jLabel2 = new javax . swing . JLabel ( ) ; jLabel4 = new javax . swing . JLabel ( ) ; setDefaultCloseOperation ( javax . swing . WindowConstants . EXIT_ON_CLOSE ) ; jButton1 . setText ( "Exit" ) ; jButton1 . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButton1ActionPerformed ( evt ) ; } } ) ; jButton2 . setText ( "Main Menu" ) ; jButton2 . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { jButton2ActionPerformed ( evt ) ; } } ) ; jLabel1 . setText ( "Product ID" ) ; jLabel2 . setText ( "Inventory" ) ; jLabel4 . setFont ( new java . awt . Font ( "Tahoma" , 0 , 14 ) ) ; jLabel4 . setText ( "Albumn Search" ) ; javax . swing . GroupLayout layout = new javax . swing . GroupLayout ( getContentPane ( ) ) ; getContentPane ( ) . setLayout ( layout ) ; layout . setHorizontalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( javax . swing . GroupLayout . Alignment . TRAILING , layout . createSequentialGroup ( ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . TRAILING ) . addGroup ( layout . createSequentialGroup ( ) . addContainerGap ( 251 , short . MAX_VALUE ) . addComponent ( jButton2 ) ) . addGroup ( layout . createSequentialGroup ( ) . addGap ( 19 , 19 , 19 ) . addComponent ( jLabel1 ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addComponent ( jLabel2 ) ) ) . addGap ( 66 , 66 , 66 ) ) . addGroup ( layout . createSequentialGroup ( ) . addGap ( 147 , 147 , 147 ) . addComponent ( jLabel4 ) . addContainerGap ( javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( javax . swing . GroupLayout . Alignment . TRAILING , layout . createSequentialGroup ( ) . addGap ( 334 , 334 , 334 ) . addComponent ( jButton1 ) ) . addGroup ( layout . createSequentialGroup ( ) . addGap ( 5 , 5 , 5 ) . addComponent ( scrollPane1 , javax . swing . GroupLayout . DEFAULT_SIZE , 372 , short . MAX_VALUE ) . addGap ( 2 , 2 , 2 ) . addComponent ( scrollbar3 , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) ) ) . addGap ( 5 , 5 , 5 ) ) ) ) ; layout . setVerticalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( javax . swing . GroupLayout . Alignment . TRAILING , layout . createSequentialGroup ( ) . addGap ( 8 , 8 , 8 ) . addComponent ( jLabel4 ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . UNRELATED ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE ) . addComponent ( jLabel1 ) . addComponent ( jLabel2 ) ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED , 195 , short . MAX_VALUE ) . addComponent ( jButton2 ) . addGap ( 32 , 32 , 32 ) ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addGap ( 54 , 54 , 54 ) . addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING , false ) . addComponent ( scrollbar3 , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addComponent ( scrollPane1 , javax . swing . GroupLayout . DEFAULT_SIZE , 163 , short . MAX_VALUE ) ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED , 27 , short . MAX_VALUE ) . addComponent ( jButton1 ) . addGap ( 33 , 33 , 33 ) ) ) ) ; pack ( ) ; }
va	5X	public synchronized boolean findSDSLInstances ( ) { knownSDSLInstances = new ArrayList < SDSL > ( ) ; boolean found = false ; ListIterator < Line > it = gct . getCodeLines ( ) . listIterator ( ) ; while ( it . hasNext ( ) ) { Line l = it . next ( ) ; if ( l . startsWith ( "28708ceb 000000" ) ) { Line [ ] code = new Line [ 4 ] ; code [ 0 ] = l ; code [ 1 ] = it . next ( ) ; if ( code [ 1 ] . startsWith ( "4A000000 90180F06" ) ) { code [ 2 ] = it . next ( ) ; if ( code [ 2 ] . startsWith ( "14000076 FF00" ) ) { code [ 3 ] = it . next ( ) ; if ( code [ 3 ] . startsWith ( "E0000000 80008000" ) ) { found = true ; SDSL sdsl = new SDSL ( code ) ; knownSDSLInstances . add ( sdsl ) ; gct . recordDynamicCode ( sdsl ) ; } } } } } return found ; }
va	2	public void testFetchGroupsForUser ( ) { Group [ ] groups = ga . fetchGroupsForUser ( 1 , false ) ; for ( int i = 0 ; i < groups . length ; i ++ ) { assertTrue ( groups [ i ] . getId ( ) == ( i + 1 ) ) ; assertTrue ( groups [ i ] . getName ( ) . equals ( testgroups [ i ] . getName ( ) ) ) ; assertTrue ( groups [ i ] . isIsactive ( ) == testgroups [ i ] . isIsactive ( ) ) ; } groups = ga . fetchGroupsForUser ( 2 , false ) ; for ( int i = 0 ; i < groups . length ; i ++ ) { assertTrue ( groups [ i ] . getId ( ) == ( i + 1 ) ) ; assertTrue ( groups [ i ] . getName ( ) . equals ( testgroups [ i ] . getName ( ) ) ) ; assertTrue ( groups [ i ] . isIsactive ( ) == testgroups [ i ] . isIsactive ( ) ) ; } groups = ga . fetchGroupsForUser ( 3 , false ) ; for ( int i = 0 ; i < groups . length ; i ++ ) { assertTrue ( groups [ i ] . getId ( ) == ( i + 1 + 1 ) ) ; assertTrue ( groups [ i ] . getName ( ) . equals ( testgroups [ i + 1 ] . getName ( ) ) ) ; assertTrue ( groups [ i ] . isIsactive ( ) == testgroups [ i + 1 ] . isIsactive ( ) ) ; } groups = ga . fetchGroupsForUser ( 5 , false ) ; for ( int i = 0 ; i < groups . length ; i ++ ) { assertTrue ( groups [ i ] . getId ( ) == ( i + 2 + 1 ) ) ; assertTrue ( groups [ i ] . getName ( ) . equals ( testgroups [ i + 2 ] . getName ( ) ) ) ; assertTrue ( groups [ i ] . isIsactive ( ) == testgroups [ i + 2 ] . isIsactive ( ) ) ; } }
va	3	public int update ( int [ ] sig , double [ ] variances ) { int onset = Integer . MAX_VALUE ; for ( int i = 0 ; i < sig . length ; i ++ ) { signals . get ( i ) . add ( sig [ i ] ) ; } if ( isFilled ( ) ) { System . out . print ( ( check ? "window filled\n" : "" ) ) ; check = false ; for ( int i = 0 ; i < sig . length ; i ++ ) { signals . get ( i ) . poll ( ) ; } onset = applyBonatoTest ( variances ) ; } return onset ; }
va	5X	@ Override public int build ( int start , int length , int floor , MyLevel level ) { this . tubeHeight = floor - MyLevel . random . nextInt ( 2 ) - 2 ; int xTube = start + 1 + MyLevel . random . nextInt ( 4 ) ; for ( int x = start ; x < start + length ; x ++ ) { if ( x > xTube + 1 ) { xTube += 3 + MyLevel . random . nextInt ( 4 ) ; this . tubeHeight = floor - MyLevel . random . nextInt ( 2 ) - 2 ; } if ( xTube >= start + length - 2 ) xTube += 10 ; if ( x == xTube && MyLevel . random . nextInt ( 11 ) < level . difficulty + 1 ) { level . setSpriteTemplate ( x , this . tubeHeight , new SpriteTemplate ( Enemy . ENEMY_FLOWER , false ) ) ; level . ENEMIES ++ ; } for ( int y = 0 ; y < level . height ; y ++ ) { if ( y >= floor ) { level . setBlock ( x , y , MyLevel . GROUND ) ; } else { if ( ( x == xTube || x == xTube + 1 ) && y >= this . tubeHeight ) { int xPic = 10 + x - xTube ; if ( y == this . tubeHeight ) { level . setBlock ( x , y , ( byte ) ( xPic + 0 * 16 ) ) ; } else { level . setBlock ( x , y , ( byte ) ( xPic + 1 * 16 ) ) ; } } } } } return length ; }
va	3	@ Override public String process ( HttpServletRequest request ) throws MissingRequiredParameter { String nombre = request . getParameter ( "nombre" ) ; try { connection = dataSource . getConnection ( ) ; statement = connection . createStatement ( ) ; ResultSet resultSet = null ; String query = "SELECT * FROM farmacias WHERE nombre='" + nombre + "'" ; resultSet = statement . executeQuery ( query ) ; resultSet . next ( ) ; int idfarmacia = resultSet . getInt ( "id_farmacia" ) ; if ( idfarmacia != 0 ) { statement . execute ( "delete from farmacias where id_farmacia ='" + idfarmacia + "';" ) ; } } catch ( SQLException e ) { return "{\"status\":\"KO\"  \"result\": \"Error en el acceso a la base de datos.\"}" ; } String result = "{\"status\":\"OK\"  \"result\": \"Farmacia eliminada correctamente.\"}" ; return result ; }
va	5X	public static void main ( String args [ ] ) { java . awt . EventQueue . invokeLater ( new Runnable ( ) { public void run ( ) { insertLabel dialog = new insertLabel ( new javax . swing . JFrame ( ) , true ) ; dialog . addWindowListener ( new java . awt . event . WindowAdapter ( ) { public void windowClosing ( java . awt . event . WindowEvent e ) { System . exit ( 0 ) ; } } ) ; dialog . setVisible ( true ) ; } } ) ; }
va	4	private void addMountanSides ( ) { for ( int i = 0 ; i < map . length - 2 ; i ++ ) { for ( int j = 0 ; j < map [ 0 ] . length - 2 ; j ++ ) { if ( map [ i ] [ j ] . existTileOfType ( new Mountains ( ) ) ) { map [ i ] [ j + 1 ] . add ( new MountainSide ( ) ) ; map [ i ] [ j + 2 ] . add ( new MountainSide ( ) ) ; } } } }
va	2	public void print ( TreeNode root ) { if ( root == null ) { System . out . print ( " # " ) ; return ; } else { System . out . print ( " " + root . val + " " ) ; } print ( root . left ) ; print ( root . right ) ; }
va	4	private StringBuilder getSubGalleries ( Gallery gallery ) throws ClassNotFoundException , SQLException { StringBuilder sb = new StringBuilder ( ) ; List < SubGallery > subGalleries = gallery . getSubGalleries ( ) ; for ( SubGallery subGallery : subGalleries ) { sb . append ( "<h4>" ) ; sb . append ( subGallery . getName ( ) ) ; sb . append ( "</h4>" ) ; Utils . appendNewLine ( sb ) ; sb . append ( "<div class=\"row\">" ) ; Utils . appendNewLine ( sb ) ; List < SubGalleryPhoto > photos = subGallery . getPhotos ( ) ; int pocet = 0 ; for ( SubGalleryPhoto photo : photos ) { pocet ++ ; sb . append ( "<div class=\"col-xs-6 col-sm-4 col-md-3 text-center\">" ) ; Utils . appendNewLine ( sb ) ; sb . append ( "<a href=\"" ) ; sb . append ( gallery . getUrl ( ) ) ; sb . append ( subGallery . getUrl ( ) ) ; sb . append ( photo . getFileName ( ) ) ; sb . append ( "\"" ) ; sb . append ( " class=\"thumbnail\"" ) ; sb . append ( " style=\"margin-bottom: 5px;\"" ) ; sb . append ( " rel=\"prettyPhoto[pp1]\"" ) ; sb . append ( " title=\"" ) ; sb . append ( photo . getTitle ( ) ) ; sb . append ( "\"><img src=\"" ) ; sb . append ( gallery . getUrl ( ) ) ; sb . append ( subGallery . getUrl ( ) ) ; sb . append ( photo . getFileName ( ) ) ; sb . append ( "\" alt=\"" ) ; sb . append ( photo . getTitle ( ) ) ; sb . append ( "\"></a>" ) ; Utils . appendNewLine ( sb ) ; sb . append ( "<p class=\"small\">" ) ; sb . append ( photo . getTitle ( ) ) ; sb . append ( "</p>" ) ; Utils . appendNewLine ( sb ) ; sb . append ( "</div>" ) ; Utils . appendNewLine ( sb ) ; if ( pocet % 2 == 0 ) { sb . append ( "<div class=\"clearfix visible-xs\"></div>" ) ; Utils . appendNewLine ( sb ) ; } if ( pocet % 3 == 0 ) { sb . append ( "<div class=\"clearfix visible-sm\"></div>" ) ; Utils . appendNewLine ( sb ) ; } if ( pocet % 4 == 0 ) { sb . append ( "<div class=\"clearfix visible-md\"></div>" ) ; Utils . appendNewLine ( sb ) ; } if ( pocet % 4 == 0 ) { sb . append ( "<div class=\"clearfix visible-lg\"></div>" ) ; Utils . appendNewLine ( sb ) ; } } sb . append ( "</div>" ) ; Utils . appendNewLine ( sb ) ; } return sb ; }
va	5X	@ Override protected void process ( ) { StringTokenizer t = new StringTokenizer ( fileL . getListString ( true ) , "\n" ) ; int files = 0 , total = 0 ; for ( ; t . hasMoreTokens ( ) ; files ++ ) { String s = t . nextToken ( ) ; String title = Print . titleString ( "--" , s ) ; if ( showAllFiles ) { Print . ln ( title ) ; title = null ; } int i = 0 ; try ( BufferedReader in = new BufferedReader ( new FileReader ( s ) ) ) { for ( int line = 1 ; ( s = in . readLine ( ) ) != null ; line ++ ) if ( fnameFilter . accept ( s ) ) { if ( title != null ) { Print . ln ( title ) ; title = null ; } Print . f ( "%3d: %s\n" , line , s ) ; i ++ ; } } catch ( IOException ioe ) { Sys . warning ( ioe . toString ( ) ) ; } if ( i > 0 || showAllFiles ) { Print . ln ( "   " + i + " occurrence(s)" ) ; } total += i ; } Print . ln ( Print . separator ( "==========================" ) ) ; Print . ln ( "Totally " + total + " occurrence(s) in " + files + " file(s).\n" ) ; }
te	1	public void setI ( float i ) { this . i = i ; }
te	4	public String nextToken ( ) throws JSONException { char c ; char q ; StringBuffer sb = new StringBuffer ( ) ; do { c = next ( ) ; } while ( Character . isWhitespace ( c ) ) ; if ( c == " || c == ' ) { q = c ; for ( ; ; ) { c = next ( ) ; if ( c <   ) { throw syntaxError ( "Unterminated string." ) ; } if ( c == q ) { return sb . toString ( ) ; } sb . append ( c ) ; } } for ( ; ; ) { if ( c == 0 || Character . isWhitespace ( c ) ) { return sb . toString ( ) ; } sb . append ( c ) ; c = next ( ) ; } }
te	4	public ArrayList ListaTodos ( ) { ArrayList listaCartao = new ArrayList < > ( ) ; String sql = "SELECT * FROM CARTOES ORDER BY CARTAO_ID" ; try { Connection con = Conectar . getInstance ( ) . conect ( ) ; preparar = con . prepareStatement ( sql ) ; ResultSet resultado = preparar . executeQuery ( ) ; while ( resultado . next ( ) ) { listaCartao . add ( new Object [ ] { resultado . getLong ( "cartao_id" ) , resultado . getLong ( "saldo_cartao" ) } ) ; } preparar . close ( ) ; } catch ( SQLException ex ) { JOptionPane . showMessageDialog ( null , ex . getMessage ( ) ) ; } return listaCartao ; }
te	5X	private boolean r_Step_4 ( ) { int among_var ; int v_1 ; ket = cursor ; among_var = find_among_b ( a_5 , 19 ) ; if ( among_var == 0 ) { return false ; } bra = cursor ; if ( ! r_R2 ( ) ) { return false ; } switch ( among_var ) { case 0 : return false ; case 1 : slice_del ( ) ; break ; case 2 : lab0 : do { v_1 = limit - cursor ; lab1 : do { if ( ! ( eq_s_b ( 1 , "s" ) ) ) { break lab1 ; } break lab0 ; } while ( false ) ; cursor = limit - v_1 ; if ( ! ( eq_s_b ( 1 , "t" ) ) ) { return false ; } } while ( false ) ; slice_del ( ) ; break ; } return true ; }
te	2	@ Override public List < Score > getHighscore ( ) { List < Score > ret ; try { ret = fetchScores ( 10 ) ; } catch ( IOException e ) { ret = new ArrayList < Score > ( 0 ) ; e . printStackTrace ( ) ; } return ret ; }
te	5X	public List < Document > sorting ( Map < String , Document > temp , int mode ) { List < Document > sortedList = new LinkedList < Document > ( temp . values ( ) ) ; if ( mode == 0 ) { Collections . sort ( sortedList , new Comparator < Document > ( ) { @ Override public int compare ( Document o1 , Document o2 ) { if ( o1 . getPageRank ( ) - o2 . getPageRank ( ) == 0 ) { return o1 . getTitle ( ) . compareTo ( o2 . getTitle ( ) ) ; } else { return ( o1 . getPageRank ( ) - o2 . getPageRank ( ) < 0 ) ? 1 : - 1 ; } } } ) ; } else if ( mode == 1 ) { Collections . sort ( sortedList , new Comparator < Document > ( ) { @ Override public int compare ( Document o1 , Document o2 ) { if ( o1 . getNumViews ( ) - o2 . getNumViews ( ) == 0 ) { return o1 . getTitle ( ) . compareTo ( o2 . getTitle ( ) ) ; } else { return ( o1 . getNumViews ( ) - o2 . getNumViews ( ) < 0 ) ? 1 : - 1 ; } } } ) ; } return sortedList ; }
te	3	@ Override public final void setGeometry ( final Object geometry ) { if ( geometry instanceof String [ ] ) { final String [ ] geometryArray = ( String [ ] ) geometry ; if ( geometryArray . length != 4 ) { throw new IllegalArgumentException ( "geometry must be an array of four elements that contains racolName  decColName  timeColName and bandColName" ) ; } else { this . raCol = geometryArray [ 0 ] ; this . decCol = geometryArray [ 1 ] ; this . timeCol = geometryArray [ 2 ] ; this . bandCol = geometryArray [ 3 ] ; } } else { throw new IllegalArgumentException ( "geometry must be an array of four elements that contains racolName  decColName  timeColName and bandColName" ) ; } }
te	3	public static void runReports ( boolean full , boolean printall , Object ... objs ) { Tester t = new Tester ( ) ; if ( objs != null ) { for ( Object obj : objs ) { t . runAnyTests ( obj , full , printall ) ; } } }
te	5X	public ListNode partition ( ListNode head , int x ) { ListNode p1 = null , p2 = head , p2Prev = null ; while ( p2 != null ) { if ( p2 . val < x ) { if ( p1 == p2Prev ) { p1 = p2 ; p2 = p2 . next ; p2Prev = p1 ; } else { p2Prev . next = p2 . next ; if ( p1 == null ) { p2 . next = head ; head = p2 ; } else { p2 . next = p1 . next ; p1 . next = p2 ; } p1 = p2 ; p2 = p2Prev . next ; } } else { p2Prev = p2 ; p2 = p2 . next ; } } return head ; }
te	1	public void setFPublic ( BigInteger value ) { this . fPublic = value ; }
te	4	public static void main ( final String args [ ] ) { if ( args . length != 0 ) { String name = args [ 0 ] ; try { QueryDefinition query = Settings . getInstance ( ) . getQuery ( name ) ; Response response = query . execute ( ) ; System . out . print ( response . getRawValue ( ) ) ; } catch ( Exception e ) { System . err . print ( e . getMessage ( ) ) ; } } else { invokeLater ( new Runnable ( ) { public void run ( ) { new MainForm ( args ) . setVisible ( true ) ; } } ) ; } }
te	4	public void InitializeGameWorld ( int numEnemyTanks , int numRocks , int numTrees ) { listObjects = new LinkedList < GameObject > ( ) ; tanks = new LinkedList < Tank > ( ) ; landscape = new LinkedList < LandscapeGameObject > ( ) ; projectiles = new LinkedList < Projectile > ( ) ; playerTank = getRandomPlayerTank ( 0 ) ; for ( int i = 0 ; i < numEnemyTanks ; i ++ ) { Tank tank = getRandomTank ( ) ; while ( collidesWithWorld ( tank ) ) { if ( Game . debug ) { System . out . println ( "tank placement collision" ) ; } tank = getRandomTank ( ) ; } addTank ( tank ) ; } for ( int j = 0 ; j < numRocks ; j ++ ) { Rock rock = getRandomRock ( j ) ; while ( collidesWithWorld ( rock ) ) { if ( Game . debug ) { System . out . println ( "rock placement collision" ) ; } rock = getRandomRock ( j ) ; } addLandscapeObject ( rock ) ; } for ( int k = 0 ; k < numTrees ; k ++ ) { Tree tree = getRandomTree ( k ) ; while ( collidesWithWorld ( tree ) ) { if ( Game . debug ) { System . out . println ( "tree placement collision" ) ; } tree = getRandomTree ( k ) ; } addLandscapeObject ( tree ) ; } addTank ( playerTank ) ; lives = startingLives ; score = 0 ; gameClock = 0 ; gameOver = false ; TotaltankCount = 0 ; notifyObservers ( ) ; }
te	1	public FenetreSupprimer ( ListeObjet listeObjets ) { this . setTitle ( Langue . getTraduction ( "delete_confirmation" ) ) ; JPanel fenetre = new JPanel ( new BorderLayout ( ) ) ; fenetre . setBorder ( BorderFactory . createEmptyBorder ( 10 , 10 , 5 , 10 ) ) ; this . add ( fenetre ) ; JButton buttonAnnuler = new JButton ( new AnnulerAction ( this , Langue . getTraduction ( "cancel" ) ) ) ; JButton buttonSupprimer = new JButton ( new ValiderSupprimerAction ( listeObjets , this ) ) ; JPanel panelSouth = new JPanel ( ) ; panelSouth . add ( buttonSupprimer ) ; panelSouth . add ( buttonAnnuler ) ; fenetre . add ( panelSouth , "South" ) ; JLabel label = new JLabel ( Langue . getTraduction ( "delete_query" ) ) ; fenetre . add ( label , "Center" ) ; this . afficherDialog ( ) ; }
te	4	@ Override public void getInput ( ) { int selection = - 1 ; boolean isValid = false ; do { this . displayMenu ( ) ; Scanner input = SnakeWithPartner . getInFile ( ) ; do { try { selection = input . nextInt ( ) ; isValid = true ; } catch ( NumberFormatException numx ) { System . out . println ( "Invalid Input. Please input a valid number." ) ; isValid = false ; } } while ( ! isValid ) ; switch ( selection ) { case 1 : this . playMenuControl . playEasy ( ) ; break ; case 2 : this . playMenuControl . playMedium ( ) ; break ; case 3 : this . playMenuControl . playHard ( ) ; break ; case 0 : break ; default : System . out . println ( "Please enter a valid menu item:" ) ; continue ; } } while ( selection != 0 ) ; }
te	3	public DeliverType getDeliverTypeById ( long deliverTypeId ) { Session session = null ; DeliverType deliverType = null ; try { session = HibernateUtil . getSessionFactory ( ) . openSession ( ) ; deliverType = ( DeliverType ) session . load ( DeliverType . class , deliverTypeId ) ; } catch ( Exception e ) { System . err . println ( "\u041E\u0448\u0438\u0431\u043A\u0430 'findById'" + e . getMessage ( ) ) ; } finally { if ( session != null && session . isOpen ( ) ) { session . close ( ) ; } } return deliverType ; }
te	3	public DependanceClosure ( List < Rule > ruleList , String start ) throws Exception { Map < String , Rule > ruleMap = new HashMap < String , Rule > ( ) ; for ( int index = 0 ; index < ruleList . size ( ) ; index ++ ) { String name = ruleList . get ( index ) . getRuleName ( ) . toString ( ) ; Rule rule = ruleList . get ( index ) ; if ( ruleMap . get ( name ) != null ) { throw new Exception ( "The definition of rule " + ruleList . get ( index ) . getRuleName ( ) . toString ( ) + " duplicates." ) ; } ruleMap . put ( name , rule ) ; } Set < String > ruleNameSet = new HashSet < String > ( ) ; ruleNameSet . add ( start ) ; Set < String > marked = new HashSet < String > ( ) ; Set < String > unmarked = new HashSet < String > ( ) ; unmarked . add ( start ) ; while ( ! unmarked . isEmpty ( ) ) { String name = unmarked . iterator ( ) . next ( ) ; Set < String > dependant = ruleMap . get ( name ) . getElements ( ) . getDependentRuleNames ( ) ; Iterator < String > it = dependant . iterator ( ) ; while ( it . hasNext ( ) ) { String dep = it . next ( ) ; if ( marked . contains ( dep ) || unmarked . contains ( dep ) ) continue ; unmarked . add ( dep ) ; } this . ruleList . add ( ruleMap . get ( name ) ) ; marked . add ( name ) ; unmarked . remove ( name ) ; } }
te	3	@ Override public BSTNode < T > search ( T element ) { BSTNode < T > node = search ( element , root ) ; if ( ! node . isEmpty ( ) ) { splay ( node ) ; } else { if ( ! node . equals ( root ) ) { splay ( ( BSTNode < T > ) node . getParent ( ) ) ; } } return node ; }
te	4	public static void main ( String args [ ] ) { if ( args . length == 0 ) { try { System . out . println ( "Enter file path:" ) ; wc ( new InputStreamReader ( System . in ) ) ; System . out . println ( lines + " " + words + " " + chars ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } ; } else { int twords = 0 , tchars = 0 , tlines = 0 ; for ( int i = 0 ; i < args . length ; i ++ ) { try { words = chars = lines = 0 ; wc ( new FileReader ( args [ i ] ) ) ; twords += words ; tchars += chars ; tlines += lines ; System . out . println ( args [ i ] + ": " + lines + " " + words + " " + chars ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; System . out . println ( args [ i ] + ": error." ) ; } } System . out . println ( "total: " + tlines + " " + twords + " " + tchars ) ; } }
te	4	private Hashtable < Character , String > build_box ( int [ ] perm , String k ) { int [ ] row = new int [ 2 ] ; row [ 0 ] = perm [ 0 ] ; row [ 1 ] = perm [ 1 ] ; int [ ] col = new int [ 8 ] ; for ( int i = 0 ; i < 8 ; i ++ ) { col [ i ] = perm [ i + 2 ] ; } boolean [ ] filled = new boolean [ 26 ] ; String k_u = k . toUpperCase ( ) ; Hashtable < Character , String > result = new Hashtable < Character , String > ( ) ; int cur_row = 0 ; int cur_col = 0 ; for ( int i = 0 ; i < k_u . length ( ) ; i ++ ) { char cur_c = k_u . charAt ( i ) ; if ( cur_c == J ) { cur_c = I ; } else if ( cur_c == Z ) { cur_c = Y ; } int pos = cur_c - A ; if ( ! filled [ pos ] ) { String r ; if ( cur_row == 0 ) { r = Integer . toString ( col [ cur_col ] ) ; } else { r = Integer . toString ( row [ cur_row - 1 ] ) + Integer . toString ( col [ cur_col ] ) ; } result . put ( Character . valueOf ( cur_c ) , r ) ; if ( cur_col == 7 ) { cur_row ++ ; cur_col = 0 ; } else { cur_col ++ ; } filled [ pos ] = true ; } } for ( int i = 0 ; i < 26 ; i ++ ) { if ( i == 25 || i == 9 ) continue ; if ( ! filled [ i ] ) { String r ; if ( cur_row == 0 ) { r = Integer . toString ( col [ cur_col ] ) ; } else { r = Integer . toString ( row [ cur_row - 1 ] ) + Integer . toString ( col [ cur_col ] ) ; } char cur_c = ( char ) ( A + i ) ; result . put ( Character . valueOf ( cur_c ) , r ) ; if ( cur_col == 7 ) { cur_row ++ ; cur_col = 0 ; } else { cur_col ++ ; } filled [ i ] = true ; } } return result ; }
te	4	@ SuppressWarnings ( "unchecked" ) public static void main ( String args [ ] ) { Repl < ? , ? > repl ; if ( args . length == 0 ) { repl = new Repl < > ( FractalEvaluator . class ) ; repl . loop ( ) ; } else { try { repl = new Repl ( class . forName ( args [ 0 ] ) ) ; ArrayList < String > fileList = new ArrayList < > ( ) ; for ( int i = 1 ; i < args . length ; i ++ ) { fileList . add ( args [ i ] ) ; } repl . visitFiles ( fileList ) ; repl . loop ( ) ; } catch ( ClassNotFoundException cnfe ) { System . err . println ( cnfe . getMessage ( ) ) ; System . exit ( 1 ) ; } } }
te	4	public static Method getAsMethodOfPublicBase ( class < ? > c , Method m ) { for ( class < ? > iface : c . getInterfaces ( ) ) { for ( Method im : iface . getMethods ( ) ) { if ( isMatch ( im , m ) ) { return im ; } } } class < ? > sc = c . getSuperclass ( ) ; if ( sc == null ) { return null ; } for ( Method scm : sc . getMethods ( ) ) { if ( isMatch ( scm , m ) ) { return scm ; } } return getAsMethodOfPublicBase ( sc , m ) ; }
te	3	void getLatestVersions ( vslIndexView < String > cur , StringBuffer out ) throws vslInputException { if ( cur . getNextViews ( ) == null ) { if ( cur . isDelete ( ) ) { out . append ( " DELETED " ) ; } else { out . append ( " " ) . append ( cur . getData ( ) ) . append ( " " ) ; } } else { for ( vslIndexView < String > nv : cur . getNextViews ( ) ) { getLatestVersions ( nv , out ) ; } } }
te	4	private Box drawButtonBestScores ( ) { KulButton ok1 = new KulButton ( "Ok" ) ; ok1 . setPreferredSize ( new Dimension ( 125 , 40 ) ) ; ok1 . setMaximumSize ( new Dimension ( 125 , 40 ) ) ; ok1 . setForeground ( Color . WHITE ) ; ok1 . setFont ( f . deriveFont ( 26f ) ) ; Box buttonBox = new Box ( BoxLayout . X_AXIS ) ; buttonBox . add ( Box . createHorizontalGlue ( ) ) ; buttonBox . add ( ok1 ) ; buttonBox . add ( Box . createHorizontalGlue ( ) ) ; ok1 . addMouseListener ( new MouseAdapter ( ) { @ Override public void mouseClicked ( MouseEvent e ) { if ( SwingUtilities . isLeftMouseButton ( e ) ) { slideUp ( ) ; } } } ) ; return buttonBox ; }
te	2	public boolean isSet ( _Fields field ) { if ( field == null ) { throw new IllegalArgumentException ( ) ; } switch ( field ) { case GET_LANG : return isSetGetLang ( ) ; } throw new IllegalStateException ( ) ; }
te	1	public final boolean isRegistered ( BytesKey key ) { return map . containsKey ( key ) ; }
te	5X	public OBJModel ( String fileName ) { positions = new ArrayList < Vector3f > ( ) ; texCoords = new ArrayList < Vector2f > ( ) ; normals = new ArrayList < Vector3f > ( ) ; indices = new ArrayList < OBJIndex > ( ) ; hasTexCoords = false ; hasNormals = false ; BufferedReader meshReader = null ; try { meshReader = new BufferedReader ( new FileReader ( fileName ) ) ; String line ; while ( ( line = meshReader . readLine ( ) ) != null ) { String [ ] tokens = line . split ( " " ) ; tokens = Util . removeEmptyStrings ( tokens ) ; if ( tokens . length == 0 || tokens [ 0 ] . equals ( "#" ) ) continue ; else if ( tokens [ 0 ] . equals ( "v" ) ) { positions . add ( new Vector3f ( float . valueOf ( tokens [ 1 ] ) , float . valueOf ( tokens [ 2 ] ) , float . valueOf ( tokens [ 3 ] ) ) ) ; } else if ( tokens [ 0 ] . equals ( "vt" ) ) { texCoords . add ( new Vector2f ( float . valueOf ( tokens [ 1 ] ) , float . valueOf ( tokens [ 2 ] ) ) ) ; } else if ( tokens [ 0 ] . equals ( "vn" ) ) { normals . add ( new Vector3f ( float . valueOf ( tokens [ 1 ] ) , float . valueOf ( tokens [ 2 ] ) , float . valueOf ( tokens [ 3 ] ) ) ) ; } else if ( tokens [ 0 ] . equals ( "f" ) ) { for ( int i = 0 ; i < tokens . length - 3 ; i ++ ) { indices . add ( parseOBJIndex ( tokens [ 1 ] ) ) ; indices . add ( parseOBJIndex ( tokens [ 2 + i ] ) ) ; indices . add ( parseOBJIndex ( tokens [ 3 + i ] ) ) ; } } } meshReader . close ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; System . exit ( 1 ) ; } }
te	2	private void createNewKeyWithLoad ( BigInteger value , int load ) { if ( this . keyMode == KeyMode . COMPLEX_KEY ) { if ( ! this . allKeys . add ( new ComplexKey ( value , load ) ) ) throw new RuntimeException ( "Key was in treeset!" ) ; } else if ( ! this . allKeys . add ( new Key ( value , load ) ) ) throw new RuntimeException ( "Key was in treeset!" ) ; }
te	2	final int nextInt ( ) { if ( 0 == count -- ) { isaac ( ) ; count = SIZE - 1 ; } return ( rsl [ count ] ) ; }
te	2	public void loadData ( DadesHotel hotel ) { TitledBorder leftBorder = BorderFactory . createTitledBorder ( hotel . nom ) ; leftBorder . setTitleJustification ( TitledBorder . LEFT ) ; this . setBorder ( leftBorder ) ; nomHotel = hotel . nom ; hotelDescriptionLabel . setText ( hotel . desc ) ; DefaultListModel model = new DefaultListModel ( ) ; for ( DadesHabitacio hab : hotel . habs ) { String dada = hab . tipusHab + " (" + hab . preu + "\u20AC) - " + hab . numeroDisp + " disponibles" ; model . addElement ( dada ) ; nomsTipus . add ( hab . tipusHab ) ; } tipusHabitacionsList . setModel ( model ) ; }
te	2	public void add ( T item ) { Node node = new Node ( item ) ; if ( current == null ) { node . next = head ; node . prev = null ; if ( head != null ) head . prev = node ; head = node ; } else { node . next = current . next ; node . prev = current ; if ( current . next != null ) current . next . prev = node ; current . next = node ; } ++ idx ; current = node ; ++ size ; }
te	1	public List < String > complete ( String string , int position ) { return CompletionUtil . completeStrings ( strings , string ) ; }
te	1	public Integer getNum ( ) { return num ; }
te	3	public static JsonObjectBuilder rewriteJson ( JsonObjectBuilder copyInto , JsonValue tree , String key ) { switch ( tree . getValueType ( ) ) { case OBJECT : JsonObject obj = ( JsonObject ) tree ; for ( String name : obj . keySet ( ) ) { copyInto = rewriteJson ( copyInto , obj . get ( name ) , name ) ; } break ; case STRING : JsonString st = ( JsonString ) tree ; copyInto . add ( key , st . getString ( ) ) ; break ; default : break ; } return copyInto ; }
te	3	private Player getWinner ( ) { for ( Player player : playerList . getPlayers ( ) ) { if ( ! player . isBankrupt ( ) ) { return player ; } } return null ; }
te	5X	public void actionPerformed ( ActionEvent e ) { if ( noOfTestClients == 1 ) { TestClient newTC = new TestClient ( serverWindow . getWMServer ( ) . getPort ( ) ) ; newTC . start ( ) ; serverWindow . updateNoOfTestClients ( ++ countTestClients ) ; testClients . add ( newTC ) ; } else { try { noOfTestClients = Integer . valueOf ( popup . getInput ( ) . getText ( ) ) ; } catch ( NumberFormatException nfe ) { SwingUtilities . invokeLater ( new Runnable ( ) { public void run ( ) { popup . getInput ( ) . setText ( "100" ) ; } } ) ; } SwingUtilities . invokeLater ( new Runnable ( ) { public void run ( ) { popup . dispose ( ) ; } } ) ; TestClient [ ] dummy = new TestClient [ noOfTestClients ] ; for ( int i = 0 ; i < dummy . length ; i ++ ) { dummy [ i ] = new TestClient ( serverWindow . getWMServer ( ) . getPort ( ) ) ; dummy [ i ] . start ( ) ; serverWindow . updateNoOfTestClients ( ++ countTestClients ) ; testClients . add ( dummy [ i ] ) ; } SwingUtilities . invokeLater ( new Runnable ( ) { public void run ( ) { serverWindow . setEnabled ( true ) ; } } ) ; } }
te	4	public static boolean edgeTest ( double [ ] [ ] a , double [ ] [ ] b ) { double tmpPoint [ ] ; if ( a [ 0 ] [ X ] > a [ 1 ] [ X ] ) { tmpPoint = a [ 0 ] ; a [ 0 ] = a [ 1 ] ; a [ 1 ] = tmpPoint ; } if ( b [ 0 ] [ X ] > b [ 1 ] [ X ] ) { tmpPoint = b [ 0 ] ; b [ 0 ] = b [ 1 ] ; b [ 1 ] = tmpPoint ; } if ( a [ 0 ] [ Y ] == a [ 1 ] [ Y ] && b [ 0 ] [ Y ] == b [ 1 ] [ Y ] ) { if ( ( a [ 0 ] [ Y ] == b [ 0 ] [ Y ] ) && ( between ( b , a [ 0 ] [ X ] , X ) || between ( b , a [ 1 ] [ X ] , X ) ) ) { return true ; } return false ; } if ( a [ 0 ] [ X ] == a [ 1 ] [ X ] ) { if ( b [ 0 ] [ X ] == b [ 1 ] [ X ] ) { if ( ( a [ 0 ] [ X ] == b [ 0 ] [ X ] ) && ( between ( b , a [ 0 ] [ Y ] , Y ) || between ( b , a [ 1 ] [ Y ] , Y ) ) ) { return true ; } return false ; } return wallTest ( b , a ) ; } else if ( b [ 0 ] [ X ] == b [ 1 ] [ X ] ) return wallTest ( a , b ) ; return segmentTest ( a , b ) ; }
te	2	@ Override public String toString ( ) { String name = getName ( ) ; String append = "" ; if ( name != null && ! name . equals ( "" ) ) { append = "(\"" + this . getName ( ) + "\")" ; } StringBuilder bldr = new StringBuilder ( ) ; bldr . append ( "TAG_List" + append + ": " + value . size ( ) + " entries of type " + NBTUtils . getTypeName ( type ) + "\r\n{\r\n" ) ; for ( Tag t : value ) { bldr . append ( "   " + t . toString ( ) . replaceAll ( "\r\n" , "\r\n   " ) + "\r\n" ) ; } bldr . append ( "}" ) ; return bldr . toString ( ) ; }
te	1	public final void testGetName ( ) { Player player = new Player ( "Fred" ) ; assert . assertEquals ( player . getName ( ) , "Fred" ) ; }
te	5X	public void startgetShortUrl ( src . com . tinyurl . TinyUrlWebServiceStub . GetShortUrl getShortUrl2 , final src . com . tinyurl . TinyUrlWebServiceCallbackHandler callback ) throws java . rmi . RemoteException { org . apache . axis2 . client . OperationClient _operationClient = _serviceClient . createClient ( _operations [ 1 ] . getName ( ) ) ; _operationClient . getOptions ( ) . setAction ( "urn:getShortUrl" ) ; _operationClient . getOptions ( ) . setExceptionToBeThrownOnSOAPFault ( true ) ; addPropertyToOperationClient ( _operationClient , org . apache . axis2 . description . WSDL2Constants . ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR , "&" ) ; org . apache . axiom . soap . SOAPEnvelope env = null ; final org . apache . axis2 . context . MessageContext _messageContext = new org . apache . axis2 . context . MessageContext ( ) ; env = toEnvelope ( getFactory ( _operationClient . getOptions ( ) . getSoapVersionURI ( ) ) , getShortUrl2 , optimizeContent ( new javax . xml . namespace . QName ( "http://tinyurl.com.src" , "getShortUrl" ) ) , new javax . xml . namespace . QName ( "http://tinyurl.com.src" , "getShortUrl" ) ) ; _serviceClient . addHeadersToEnvelope ( env ) ; _messageContext . setEnvelope ( env ) ; _operationClient . addMessageContext ( _messageContext ) ; _operationClient . setCallback ( new org . apache . axis2 . client . async . AxisCallback ( ) { public void onMessage ( org . apache . axis2 . context . MessageContext resultContext ) { try { org . apache . axiom . soap . SOAPEnvelope resultEnv = resultContext . getEnvelope ( ) ; java . lang . Object object = fromOM ( resultEnv . getBody ( ) . getFirstElement ( ) , src . com . tinyurl . TinyUrlWebServiceStub . GetShortUrlResponse . class , getEnvelopeNamespaces ( resultEnv ) ) ; callback . receiveResultgetShortUrl ( ( src . com . tinyurl . TinyUrlWebServiceStub . GetShortUrlResponse ) object ) ; } catch ( org . apache . axis2 . AxisFault e ) { callback . receiveErrorgetShortUrl ( e ) ; } } public void onError ( java . lang . Exception error ) { if ( error instanceof org . apache . axis2 . AxisFault ) { org . apache . axis2 . AxisFault f = ( org . apache . axis2 . AxisFault ) error ; org . apache . axiom . om . OMElement faultElt = f . getDetail ( ) ; if ( faultElt != null ) { if ( faultExceptionNameMap . containsKey ( new org . apache . axis2 . client . FaultMapKey ( faultElt . getQName ( ) , "getShortUrl" ) ) ) { try { java . lang . String exceptionClassName = ( java . lang . String ) faultExceptionClassNameMap . get ( new org . apache . axis2 . client . FaultMapKey ( faultElt . getQName ( ) , "getShortUrl" ) ) ; java . lang . class exceptionClass = java . lang . class . forName ( exceptionClassName ) ; java . lang . reflect . Constructor constructor = exceptionClass . getConstructor ( String . class ) ; java . lang . Exception ex = ( java . lang . Exception ) constructor . newInstance ( f . getMessage ( ) ) ; java . lang . String messageClassName = ( java . lang . String ) faultMessageMap . get ( new org . apache . axis2 . client . FaultMapKey ( faultElt . getQName ( ) , "getShortUrl" ) ) ; java . lang . class messageClass = java . lang . class . forName ( messageClassName ) ; java . lang . Object messageObject = fromOM ( faultElt , messageClass , null ) ; java . lang . reflect . Method m = exceptionClass . getMethod ( "setFaultMessage" , new java . lang . class [ ] { messageClass } ) ; m . invoke ( ex , new java . lang . Object [ ] { messageObject } ) ; callback . receiveErrorgetShortUrl ( new java . rmi . RemoteException ( ex . getMessage ( ) , ex ) ) ; } catch ( java . lang . ClassCastException e ) { callback . receiveErrorgetShortUrl ( f ) ; } catch ( java . lang . ClassNotFoundException e ) { callback . receiveErrorgetShortUrl ( f ) ; } catch ( java . lang . NoSuchMethodException e ) { callback . receiveErrorgetShortUrl ( f ) ; } catch ( java . lang . reflect . InvocationTargetException e ) { callback . receiveErrorgetShortUrl ( f ) ; } catch ( java . lang . IllegalAccessException e ) { callback . receiveErrorgetShortUrl ( f ) ; } catch ( java . lang . InstantiationException e ) { callback . receiveErrorgetShortUrl ( f ) ; } catch ( org . apache . axis2 . AxisFault e ) { callback . receiveErrorgetShortUrl ( f ) ; } } else { callback . receiveErrorgetShortUrl ( f ) ; } } else { callback . receiveErrorgetShortUrl ( f ) ; } } else { callback . receiveErrorgetShortUrl ( error ) ; } } public void onFault ( org . apache . axis2 . context . MessageContext faultContext ) { org . apache . axis2 . AxisFault fault = org . apache . axis2 . util . Utils . getInboundFaultFromMessageContext ( faultContext ) ; onError ( fault ) ; } public void onComplete ( ) { try { _messageContext . getTransportOut ( ) . getSender ( ) . cleanup ( _messageContext ) ; } catch ( org . apache . axis2 . AxisFault axisFault ) { callback . receiveErrorgetShortUrl ( axisFault ) ; } } } ) ; org . apache . axis2 . util . CallbackReceiver _callbackReceiver = null ; if ( _operations [ 1 ] . getMessageReceiver ( ) == null && _operationClient . getOptions ( ) . isUseSeparateListener ( ) ) { _callbackReceiver = new org . apache . axis2 . util . CallbackReceiver ( ) ; _operations [ 1 ] . setMessageReceiver ( _callbackReceiver ) ; } _operationClient . execute ( false ) ; }
te	3	public static void assert_are_of_type ( class expected_type , Object ... objects ) { for ( Object object : objects ) { if ( ! object . getClass ( ) . isInstance ( expected_type ) ) { assert . fail ( String . format ( "Expecting type [%s] GOT [%s]" , expected_type , object . getClass ( ) ) ) ; } } }
te	3	public SurgeryPerformedPanel ( MedicalFrame parent , String username ) { setBackground ( SystemColor . textHighlight ) ; this . parent = parent ; this . username = username ; ButtonListener listener = new ButtonListener ( ) ; this . setBounds ( 100 , 100 , 1000 , 600 ) ; setLayout ( new MigLayout ( "" , "[grow]" , "[100.00 grow][450.00 grow][50.00 grow]" ) ) ; JPanel panel = new JPanel ( ) ; panel . setBackground ( SystemColor . textHighlight ) ; add ( panel , "cell 0 0 grow" ) ; panel . setLayout ( null ) ; JLabel lblSurgeryPerformed = new JLabel ( "Surgery Performed" ) ; lblSurgeryPerformed . setFont ( new Font ( "Lucida Grande" , Font . PLAIN , 30 ) ) ; lblSurgeryPerformed . setBounds ( 345 , 28 , 331 , 28 ) ; panel . add ( lblSurgeryPerformed ) ; JPanel panel_1 = new JPanel ( ) ; panel_1 . setBackground ( SystemColor . textHighlight ) ; add ( panel_1 , "cell 0 1 grow" ) ; panel_1 . setLayout ( new MigLayout ( "" , "[200.00][600.00 grow][200.00]" , "[][304.00 grow][96.00]" ) ) ; JScrollPane scrollPane = new JScrollPane ( ) ; panel_1 . add ( scrollPane , "cell 1 1 grow" ) ; String [ ] colNames = { "Surgery Type" , "CPT code" , "Number of Procedures" , "No. of Doctors Performing the Procedure" , "Total Billing ($)" } ; model = new DefaultTableModel ( ) { @ Override public boolean isCellEditable ( int row , int column ) { return false ; } } ; table = new JTable ( model ) ; model . setColumnIdentifiers ( colNames ) ; scrollPane . setViewportView ( table ) ; JPanel panel_2 = new JPanel ( ) ; panel_2 . setBackground ( SystemColor . textHighlight ) ; add ( panel_2 , "cell 0 2 grow" ) ; panel_2 . setLayout ( new MigLayout ( "" , "[880.00][]" , "[]" ) ) ; btnBack = new JButton ( "Back" ) ; panel_2 . add ( btnBack , "cell 1 0" ) ; btnBack . addActionListener ( listener ) ; populateTable ( ) ; }
te	5X	public void distribuerMessageConversation ( MessageConversation message ) throws RemoteException { try { ArrayList < Groupe > groupes = message . getGroupesParticipants ( ) ; ArrayList < String > utilisateursDistribues = new ArrayList < String > ( ) ; if ( groupes != null ) { for ( Groupe g : groupes ) { ArrayList < Utilisateur > utilisateurs = g . getUtilisateurs ( ) ; for ( Utilisateur u : utilisateurs ) { if ( ! utilisateursDistribues . contains ( u . getLogin ( ) ) ) { Client client = getClientConnecte ( u . getLogin ( ) ) ; if ( client != null ) { client . recevoirMessage ( message ) ; } else { if ( getConversationsUtilisateurAbsent ( u . getLogin ( ) ) == null ) { getConversationsUtilisateursAbsents ( ) . put ( u . getLogin ( ) , new ArrayList < Conversation > ( ) ) ; } if ( getConversation ( u . getLogin ( ) , message . getIdConversation ( ) ) == null ) { ArrayList < Conversation > conversations = getConversationsUtilisateurAbsent ( u . getLogin ( ) ) ; conversations . add ( getConversations ( ) . get ( message . getIdConversation ( ) ) ) ; } Conversation c = getConversation ( u . getLogin ( ) , message . getIdConversation ( ) ) ; c . getListeMessages ( ) . add ( message ) ; } utilisateursDistribues . add ( u . getLogin ( ) ) ; } } } } ArrayList < Utilisateur > utilisateurs = message . getParticipants ( ) ; if ( utilisateurs != null ) { for ( Utilisateur u : utilisateurs ) { if ( ! utilisateursDistribues . contains ( u . getLogin ( ) ) ) { Client client = getClientConnecte ( u . getLogin ( ) ) ; if ( client != null ) { client . recevoirMessage ( message ) ; } else { if ( getConversationsUtilisateurAbsent ( u . getLogin ( ) ) == null ) { getConversationsUtilisateursAbsents ( ) . put ( u . getLogin ( ) , new ArrayList < Conversation > ( ) ) ; } if ( getConversation ( u . getLogin ( ) , message . getIdConversation ( ) ) == null ) { ArrayList < Conversation > conversations = getConversationsUtilisateurAbsent ( u . getLogin ( ) ) ; conversations . add ( new Conversation ( message . getIdConversation ( ) , message . getParticipants ( ) , message . getGroupesParticipants ( ) ) ) ; } Conversation c = getConversation ( u . getLogin ( ) , message . getIdConversation ( ) ) ; c . getListeMessages ( ) . add ( message ) ; } utilisateursDistribues . add ( u . getLogin ( ) ) ; } } } } catch ( RemoteException e1 ) { e1 . printStackTrace ( ) ; } }
te	2	public int setRib ( String rib ) { if ( rib . length ( ) > ConfigGlobale . longueurRIB ) { return - 1 ; } else { this . rib = rib ; return 0 ; } }
te	4	public char skipTo ( char to ) throws JSONException { char c ; try { long startIndex = this . index ; long startCharacter = this . character ; long startLine = this . line ; this . reader . mark ( 1000000 ) ; do { c = this . next ( ) ; if ( c == 0 ) { this . reader . reset ( ) ; this . index = startIndex ; this . character = startCharacter ; this . line = startLine ; return c ; } } while ( c != to ) ; } catch ( IOException exc ) { throw new JSONException ( exc ) ; } this . back ( ) ; return c ; }
te	4	LatexExporter ( Component parent , List < FontHandle > fonts , JFileChooser chooser ) { if ( chooser != null ) { mChooser = chooser ; } else { String path = System . getProperty ( "user.home" ) ; if ( path != null ) { File file = new File ( path , "Desktop" ) ; if ( ! file . exists ( ) ) { file = new File ( path ) ; } mChooser = new JFileChooser ( file ) ; } else { mChooser = new JFileChooser ( ) ; } } mFamilyLabel = new JLabel ( "Name" ) ; mFamilyLabel . setHorizontalAlignment ( JLabel . RIGHT ) ; mFamilyField = new JTextField ( "" ) ; mNoticeLabel = new JLabel ( "Note that Latex maps \"\\textbf\"\nto BOLD_EXTENDED  not BOLD." ) ; add ( mFamilyLabel ) ; add ( mFamilyField ) ; add ( mNoticeLabel ) ; mFontStacker = new ComponentStacker ( ) ; mFontStacker . setStackDirection ( ComponentStacker . STACK_VERTICAL ) ; mFontStacker . setStretch ( true ) ; mFontStacker . setMargins ( 0 , 0 ) ; mFontStacker . setBorder ( BorderFactory . createTitledBorder ( "Fonts" ) ) ; mFontStacker . setBackground ( Color . WHITE ) ; add ( mFontStacker ) ; int i = 0 ; mFontPanels = new ArrayList < FontPanel > ( ) ; for ( FontHandle f : fonts ) { FontPanel p = new FontPanel ( f ) ; p . setSize ( 50 , 75 ) ; if ( i ++ % 2 == 0 ) { p . setBackground ( Palette . ODD_COLOR ) ; } else { p . setBackground ( Palette . EVEN_COLOR ) ; } mFontStacker . add ( p ) ; mFontPanels . add ( p ) ; } while ( parent . getParent ( ) != null ) { parent = parent . getParent ( ) ; } mCancelButton = new JButton ( "Cancel" ) ; mOkButton = new JButton ( "OK" ) ; add ( mCancelButton ) ; add ( mOkButton ) ; mCancelButton . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { doCancel ( ) ; } } ) ; mOkButton . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { doOkay ( ) ; } } ) ; setLayout ( new Layout ( ) ) ; setOpaque ( true ) ; mDialog = new JDialog ( ( Window ) parent , "Configure Tex Typeface" , ModalityType . APPLICATION_MODAL ) ; mDialog . setContentPane ( this ) ; mDialog . setSize ( 550 , 650 ) ; mDialog . setLocationRelativeTo ( null ) ; mDialog . setVisible ( true ) ; }
te	2	@ Override public DataUnit read ( Protocol p , ReadableByteChannel channel ) throws IOException { ReadableByteChannel currentChannel = channel ; DataUnit dataUnit = headerProcessor . read ( p , currentChannel ) ; int totalLength = ProtocolUtil . getTotalLength ( dataUnit , p ) ; if ( totalLength != - 1 ) { int toRead = totalLength - ProtocolUtil . getHeaderBytes ( p ) ; byte [ ] bytes = IoUtil . readBytes ( toRead , currentChannel ) ; currentChannel = Channels . newChannel ( new ByteArrayInputStream ( bytes ) ) ; } dataUnit = unitProcessor . fromStream ( dataUnit , p , currentChannel ) ; currentChannel = channel ; return dataUnit ; }
te	3	@ SuppressWarnings ( "unchecked" ) public T nextConcrete ( ) { T genObj = null ; try { initFieldGenerators ( ) ; genObj = ( T ) Utils . getDummyObject ( this . type ) ; Reflector r1 = new Reflector ( genObj ) ; Field [ ] fields = r1 . getFields ( genObj ) ; for ( Field f : fields ) { f . set ( genObj , fieldGenerators . get ( f ) . next ( ) ) ; } } catch ( InstantiationException e ) { e . printStackTrace ( ) ; } catch ( IllegalAccessException e ) { e . printStackTrace ( ) ; } return genObj ; }
te	4	private void insertDatabaseOperation ( Object object , Connection connection , DatabaseOperation databaseOperation ) { try { if ( ! object . getClass ( ) . isAnnotationPresent ( Table . class ) ) { throw new JStrykerException ( "Object(" + object + ") isn't Entity" ) ; } Table table = object . getClass ( ) . getAnnotation ( Table . class ) ; StringBuilder builder = new StringBuilder ( "<?xml version=\"1.0\"?>\n<dataset>\n<" ) ; builder . append ( table . name ( ) ) . append ( " " ) ; Field [ ] fields = object . getClass ( ) . getDeclaredFields ( ) ; for ( Field field : fields ) { field . setAccessible ( true ) ; Object value = field . get ( object ) ; if ( value == null ) { continue ; } if ( field . isAnnotationPresent ( transient . class ) ) { continue ; } Column annotation = field . getAnnotation ( Column . class ) ; if ( annotation != null && ! "" . equals ( annotation . name ( ) ) ) { builder . append ( annotation . name ( ) ) ; } else { builder . append ( field . getName ( ) ) ; } builder . append ( "=\"" ) ; builder . append ( value ) ; builder . append ( "\" " ) ; } builder . append ( "/>\n</dataset>" ) ; String string = builder . toString ( ) ; execute ( null , connection , new ByteArrayInputStream ( string . getBytes ( ) ) , databaseOperation ) ; } catch ( IllegalAccessException e ) { throw new JStrykerException ( e . getMessage ( ) , e ) ; } }
te	1	public IntAdder ( JBlockingQueue < Integer > q ) { this . q = q ; }
te	1	public void setDateTimeValue ( Date dateTimeValue ) { this . dateTimeValue = dateTimeValue ; }
te	4	public final T get ( ) throws DiffbotException { if ( executed ) { return getResult ( ) ; } else { synchronized ( client ) { if ( ! executed ) { request . runBatch ( this ) ; return getResult ( ) ; } else { return getResult ( ) ; } } } }
te	5X	@ Override public void actionPerformed ( ActionEvent arg0 ) { String s = ( String ) categories . getSelectedItem ( ) ; DetailsPanelController pc = DetailsPanelController . getInstance ( ) ; if ( s . equals ( "" ) ) { if ( pc . getCurrentTask ( ) != null ) { pc . getCurrentTask ( ) . setCategory ( new Category ( "" , tl . getColor ( "black" ) ) ) ; pc . updateTask ( pc . getCurrentTask ( ) ) ; } } else { for ( Category c : PanicController . getInstance ( ) . getCategories ( ) ) { if ( c . getName ( ) . equals ( s ) ) { if ( pc . getCurrentTask ( ) != null ) { pc . getCurrentTask ( ) . setCategory ( c ) ; pc . updateTask ( pc . getCurrentTask ( ) ) ; } break ; } } } }
te	3	public Questionnaire getQuestionnaireById ( long id ) { PreparedStatement statement = null ; ResultSet rs = null ; Connection connection = null ; Questionnaire questionnaire = null ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Retrieving questionnaire " + id + "..." ) ; } try { if ( logger . isDebugEnabled ( ) ) { logger . debug ( SELECT_QUESTIONNAIRE ) ; } connection = Connector . getConnection ( ) ; statement = connection . prepareStatement ( SELECT_QUESTIONNAIRE ) ; statement . setLong ( 1 , id ) ; rs = statement . executeQuery ( ) ; if ( rs . next ( ) ) { questionnaire = fillQuestionnaire ( rs ) ; } } catch ( SQLException e ) { logger . error ( e . getMessage ( ) , e ) ; } finally { ResourcesUtil . release ( rs , statement , connection ) ; } return questionnaire ; }
te	2	private IGameMap createGameMap ( String path ) { IGameMap map = injector . getInstance ( IGameMap . class ) ; try ( InputStream in = getClass ( ) . getResourceAsStream ( path ) ) { map . readMap ( in ) ; } catch ( IOException ex ) { assert . fail ( ex . getMessage ( ) ) ; } return map ; }
te	5X	public final void mSL_COMMENT ( boolean _createToken ) throws RecognitionException , CharStreamException , TokenStreamException { int _ttype ; Token _token = null ; int _begin = text . length ( ) ; _ttype = SL_COMMENT ; int _saveIndex ; match ( "//" ) ; { _loop594 : do { if ( ( _tokenSet_1 . member ( LA ( 1 ) ) ) ) { { match ( _tokenSet_1 ) ; } } else { break _loop594 ; } } while ( true ) ; } if ( _createToken && _token == null && _ttype != Token . SKIP ) { _token = makeToken ( _ttype ) ; _token . setText ( new String ( text . getBuffer ( ) , _begin , text . length ( ) - _begin ) ) ; } _returnToken = _token ; }
te	5X	@ Override public void run ( ) { Player [ ] players = plugin . getServer ( ) . getOnlinePlayers ( ) ; Player player ; long configTime = plugin . getConfig ( ) . getInt ( "KICK_TIMER" ) * 60 * 1000 ; for ( int i = 0 ; ( players . length - 1 ) >= i ; i ++ ) { long lastMoved = 0 ; player = players [ i ] ; UserTable ut = plugin . getDatabase ( ) . find ( UserTable . class ) . where ( ) . ieq ( "userName" , player . getName ( ) ) . = ( "afk" , true ) . findUnique ( ) ; if ( ut == null ) { return ; } lastMoved = System . currentTimeMillis ( ) - ut . getAfkTime ( ) ; if ( player . isOp ( ) ) { if ( plugin . getConfig ( ) . getBoolean ( "KICK_OP" ) ) { if ( lastMoved > configTime ) { player . kickPlayer ( "Auto-Kick: You were afk too long..." ) ; } } } else { if ( lastMoved > configTime ) { player . kickPlayer ( "Auto-Kick: You were afk too long..." ) ; } } } }
te	4	private void displayURL ( URL url ) { try { if ( url != null ) { htmlPane . setPage ( url ) ; } else { htmlPane . setText ( "File Not Found" ) ; if ( DEBUG ) { System . out . println ( "Attempted to display a null URL." ) ; } } } catch ( IOException e ) { System . err . println ( "Attempted to read a bad URL: " + url ) ; } }
te	5X	protected void recurseFields ( final DataFrame frame , final String token , final List < DataField > results ) { if ( frame != null ) { for ( int x = 0 ; x < frame . getFieldCount ( ) ; x ++ ) { final DataField field = frame . getField ( x ) ; String fname = field . getName ( ) ; if ( fname == null ) { fname = "field" + x ; } if ( token != null ) { fname = token + "." + fname ; } if ( field . isFrame ( ) ) { recurseFields ( ( DataFrame ) field . getObjectValue ( ) , fname , results ) ; } else { if ( filter . matches ( fname ) ) { results . add ( field ) ; } } } } }
te	2	public void printRes ( ) { for ( int i = 0 ; i < n ; i ++ ) { Vertex v = res . get ( i ) ; System . out . println ( v . vertex + " : " + v . timestamp1 + " / " + v . timestamp2 ) ; } }
te	5X	public boolean equals ( Object obj ) { if ( obj instanceof Hand ) { Hand hand = ( Hand ) obj ; if ( hand . hand . size ( ) == this . hand . size ( ) && hand . numberOfCard == this . numberOfCard ) { for ( int i = 0 ; i < this . hand . size ( ) ; ++ i ) { if ( ! hand . hand . get ( i ) . equals ( this . hand . get ( i ) ) ) { return false ; } } return true ; } } return false ; }
te	2	public static long readLong ( byte [ ] b , int start ) { long l = 0 ; for ( int i = 0 ; i < 8 ; i ++ ) { l <<= 8 ; l |= b [ start + i ] & ff ; } return l ; }
te	2	@ Test public void testSplitLeafs ( ) { StringBuilder expected = new StringBuilder ( ) ; for ( int i = 0 ; i < 7 ; i ++ ) { bpTree . put ( i , i ) ; expected . append ( "<put>" ) . append ( "<not-contain-key>" ) . append ( "<get>" ) . append ( "<not-contain>" ) . append ( "<leaf-put>" ) . append ( "<new-key>" ) ; } expected . append ( "<create-new-root>" ) ; assertThat ( bpTree . getWay ( ) , is ( expected . toString ( ) ) ) ; }
te	2	public static void swap ( int [ ] data , int i , int j ) { if ( data == null || i < 0 || j < 0 || data . length <= i || data . length <= j ) { throw new IllegalArgumentException ( ) ; } int tmp = data [ i ] ; data [ i ] = data [ j ] ; data [ j ] = tmp ; }
te	3	public String getPinyinColorized ( ) { StringBuilder ankiPinyin = new StringBuilder ( ) ; String [ ] syllables = PinyinUtil . getSyllables ( pinyin ) ; int curTone ; for ( int i = 0 ; i < syllables . length ; i ++ ) { if ( i > 0 ) { ankiPinyin . append ( " " ) ; } curTone = getTone ( syllables [ i ] ) ; if ( curTone == 0 ) { ankiPinyin . append ( syllables [ i ] ) ; } else { ankiPinyin . append ( "<span style = \"color:" ) ; ankiPinyin . append ( toneColor [ curTone ] ) ; ankiPinyin . append ( "\">" ) ; ankiPinyin . append ( PinyinUtil . toUnicode ( syllables [ i ] ) ) ; ankiPinyin . append ( "</span>" ) ; } } return ankiPinyin . toString ( ) ; }
te	2	public static byte [ ] decompress ( byte [ ] data ) throws IOException , DataFormatException { Inflater inflater = new Inflater ( ) ; inflater . setInput ( data ) ; inflater . finished ( ) ; ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( data . length ) ; byte [ ] buffer = new byte [ 1024 ] ; while ( ! inflater . finished ( ) ) { int count = inflater . inflate ( buffer ) ; outputStream . write ( buffer , 0 , count ) ; } outputStream . close ( ) ; byte [ ] output = outputStream . toByteArray ( ) ; inflater . end ( ) ; return output ; }
te	1	private byte [ ] toBytes ( String s ) { return s . getBytes ( ) ; }
te	3	public void update ( UTypePk pk , UType dto ) throws UTypeDaoException { long t1 = System . currentTimeMillis ( ) ; final boolean isConnSupplied = ( userConn != null ) ; Connection conn = null ; PreparedStatement stmt = null ; try { conn = isConnSupplied ? userConn : ResourceManager . getConnection ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Executing " + SQL_UPDATE + " with DTO: " + dto ) ; } stmt = conn . prepareStatement ( SQL_UPDATE ) ; int index = 1 ; stmt . setString ( index ++ , dto . getUType ( ) ) ; stmt . setString ( 2 , pk . getUType ( ) ) ; int rows = stmt . executeUpdate ( ) ; reset ( dto ) ; long t2 = System . currentTimeMillis ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( rows + " rows affected (" + ( t2 - t1 ) + " ms)" ) ; } } catch ( Exception _e ) { logger . error ( "Exception: " + _e . getMessage ( ) , _e ) ; throw new UTypeDaoException ( "Exception: " + _e . getMessage ( ) , _e ) ; } finally { ResourceManager . close ( stmt ) ; if ( ! isConnSupplied ) { ResourceManager . close ( conn ) ; } } }
te	1	@ Test public void revers_on_empty_list_should_be_equals_to_itself ( ) { DoubleLinkedList list = new DoubleLinkedList ( ) ; assertEquals ( utils . reverse ( list ) , list ) ; }
te	4	public InputField ( ) { super ( ) ; setText ( "Type Here!" ) ; setColumns ( 10 ) ; addMouseListener ( new MouseListener ( ) { @ Override public void mouseClicked ( MouseEvent e ) { if ( getText ( ) . equals ( "Type Here!" ) ) setText ( "" ) ; requestFocusInWindow ( ) ; } @ Override public void mousePressed ( MouseEvent e ) { } @ Override public void mouseReleased ( MouseEvent e ) { } @ Override public void mouseEntered ( MouseEvent e ) { } @ Override public void mouseExited ( MouseEvent e ) { } } ) ; addKeyListener ( new KeyListener ( ) { @ Override public void keyTyped ( KeyEvent e ) { } @ Override public void keyPressed ( KeyEvent e ) { if ( e . getKeyCode ( ) == 10 ) { sendMessage ( ) ; setText ( "" ) ; } } @ Override public void keyReleased ( KeyEvent e ) { } } ) ; }
te	4	public static void main ( String [ ] args ) { SelectionSort ss = new SelectionSort ( 10 ) ; System . out . println ( ss . toString ( ) ) ; for ( int i = 0 ; i < ss . sort . length ; i ++ ) { int min = ss . sort [ i ] ; int nr = 0 ; boolean changed = false ; for ( int j = i + 1 ; j < ss . sort . length ; j ++ ) { if ( ss . sort [ j ] < min ) { min = ss . sort [ j ] ; nr = j ; changed = true ; } } if ( changed ) { ss . sort [ nr ] = ss . sort [ i ] ; ss . sort [ i ] = min ; } ss . sorted ( ss . sort ) ; } ss . sorted ( ss . sort ) ; System . out . println ( ss . toString ( ) ) ; }
te	2	private JPanel pnlCrear ( ) { lblNuevoId = new JLabel ( "Identificaci\u00F3n" ) ; lblNuevoNombre = new JLabel ( "Nombre" ) ; lblNuevoApellido = new JLabel ( "Apellido" ) ; lblNuevoTelefono = new JLabel ( "Tel\u00E9fono" ) ; lblNuevoParentesco = new JLabel ( "Parentesco" ) ; txtNuevoId = new JTextField ( ) ; txtNuevoNombre = new JTextField ( ) ; txtNuevoApellido = new JTextField ( ) ; txtNuevoTelefono = new JTextField ( ) ; txtNuevoParentesco = new JTextField ( ) ; btnNuevoElegir = new JButton ( "Elegir" ) ; btnNuevoElegir . addActionListener ( this ) ; switch ( tipo ) { case SELECCIONAR_DUENIO : btnNuevoElegir . setActionCommand ( ELEGIR_DUENIO_NUEVO ) ; break ; case SELECCIONAR_RESPONSABLE : btnNuevoElegir . setActionCommand ( ELEGIR_RESPONSABLE_NUEVO ) ; break ; } ImageIcon iconElegir = new ImageIcon ( getClass ( ) . getResource ( "/conjunto/views/icons/check.png" ) ) ; Image imgElegir = iconElegir . getImage ( ) . getScaledInstance ( - 1 , 22 , Image . SCALE_SMOOTH ) ; iconElegir . setImage ( imgElegir ) ; btnNuevoElegir . setIcon ( iconElegir ) ; Dimension cmps = new Dimension ( 180 , 27 ) ; lblNuevoId . setPreferredSize ( cmps ) ; lblNuevoNombre . setPreferredSize ( cmps ) ; lblNuevoApellido . setPreferredSize ( cmps ) ; lblNuevoTelefono . setPreferredSize ( cmps ) ; lblNuevoParentesco . setPreferredSize ( cmps ) ; txtNuevoId . setPreferredSize ( cmps ) ; txtNuevoNombre . setPreferredSize ( cmps ) ; txtNuevoApellido . setPreferredSize ( cmps ) ; txtNuevoTelefono . setPreferredSize ( cmps ) ; txtNuevoParentesco . setPreferredSize ( cmps ) ; btnNuevoElegir . setPreferredSize ( new Dimension ( 150 , 30 ) ) ; JPanel pnl = new JPanel ( new FlowLayout ( ) ) ; pnl . setBorder ( BorderFactory . createTitledBorder ( "Crear uno nuevo" ) ) ; pnl . setPreferredSize ( new Dimension ( 200 , - 1 ) ) ; pnl . add ( lblNuevoId ) ; pnl . add ( txtNuevoId ) ; pnl . add ( lblNuevoNombre ) ; pnl . add ( txtNuevoNombre ) ; pnl . add ( lblNuevoApellido ) ; pnl . add ( txtNuevoApellido ) ; pnl . add ( lblNuevoTelefono ) ; pnl . add ( txtNuevoTelefono ) ; pnl . add ( lblNuevoParentesco ) ; pnl . add ( txtNuevoParentesco ) ; pnl . add ( btnNuevoElegir ) ; return pnl ; }
te	3	public int [ ] getActions ( Game game , long timeDue ) { int [ ] directions = new int [ Game . NUM_GHOSTS ] ; for ( int i = 0 ; i < directions . length ; i ++ ) if ( game . ghostRequiresAction ( i ) ) { if ( Game . rnd . nextFloat ( ) < CONSISTENCY ) directions [ i ] = game . getNextGhostDir ( i , game . getCurPacManLoc ( ) , attract , Game . DM . PATH ) ; else { int [ ] possibleDirs = game . getPossibleGhostDirs ( i ) ; directions [ i ] = possibleDirs [ G . rnd . nextInt ( possibleDirs . length ) ] ; } } return directions ; }
te	1	public byte [ ] getZippedFileBytes ( String path ) throws IOException { byte [ ] uncompressedBytes = getFileBytes ( path ) ; ByteArrayOutputStream output = new ByteArrayOutputStream ( ) ; GZIPOutputStream zippedStream = new GZIPOutputStream ( output ) ; zippedStream . write ( uncompressedBytes ) ; byte [ ] compressedBytes = new byte [ output . size ( ) ] ; zippedStream . write ( compressedBytes ) ; return compressedBytes ; }
te	2	private int getNextIndicator ( ) throws IOException { if ( this . indicator == 0 ) { this . indicator = in . read ( ) ; } return this . indicator ; }
te	4	public void incCount ( E data ) { if ( overallRoot == null ) { overallRoot = new AVLNode ( data ) ; return ; } AVLNode currentNode = ( AVLNode ) overallRoot ; while ( true ) { int cmp = comparator . compare ( data , currentNode . data ) ; if ( cmp == 0 ) { currentNode . count ++ ; return ; } else if ( cmp < 0 ) { if ( currentNode . left == null ) { currentNode . left = new AVLNode ( data , currentNode ) ; break ; } currentNode = ( AVLNode ) currentNode . left ; } else { if ( currentNode . right == null ) { currentNode . right = new AVLNode ( data , currentNode ) ; break ; } currentNode = ( AVLNode ) currentNode . right ; } } percHeightUp ( currentNode ) ; while ( currentNode != null ) { Side isImbalanced = checkImbalance ( currentNode ) ; if ( isImbalanced != Side . BALANCED ) { percHeightDown ( rotate ( currentNode , isImbalanced ) ) ; break ; } currentNode = currentNode . parent ; } }
te	1	public int getRowCount ( ) { return data . length ; }
te	5X	public void sortBy ( String order ) { DefaultMutableTreeNode tmpNode = null ; DefaultMutableTreeNode curNodeCopy = null ; SortTreeModel treeModelTmp = null ; DefaultMutableTreeNode rootTmp = new DefaultMutableTreeNode ( rootNodeTxt ) ; if ( order . equals ( "name" ) ) { treeModelTmp = new SortTreeModel ( rootTmp , new TreeStringComparatorName ( ) ) ; sortedByName = true ; } else { treeModelTmp = new SortTreeModel ( rootTmp , new TreeStringComparatorDate ( ) ) ; sortedByName = false ; } sortByNameMenuItem . setEnabled ( ! sortedByName ) ; sortByDateMenuItem . setEnabled ( sortedByName ) ; for ( @ SuppressWarnings ( "rawtypes" ) Enumeration e = ( ( DefaultMutableTreeNode ) treeModel . getRoot ( ) ) . breadthFirstEnumeration ( ) ; e . hasMoreElements ( ) ; ) { DefaultMutableTreeNode curNode = ( DefaultMutableTreeNode ) e . nextElement ( ) ; Object obj = curNode . getUserObject ( ) ; if ( obj instanceof Item ) { Item currentItem = ( Item ) obj ; if ( currentItem . isDir ( ) ) curNodeCopy = new FolderNode ( currentItem ) ; else curNodeCopy = new LeafNode ( currentItem , ( ( LeafNode ) curNode ) . getDownPerc ( ) , ( ( LeafNode ) curNode ) . getStatus ( ) ) ; Object objPar = ( ( DefaultMutableTreeNode ) curNode . getParent ( ) ) . getUserObject ( ) ; if ( objPar instanceof Item ) { if ( ( tmpNode = getItemInTree ( ( Item ) objPar , treeModelTmp ) ) != null ) { treeModelTmp . insertNodeInto ( curNodeCopy , tmpNode ) ; } } else { treeModelTmp . insertNodeInto ( curNodeCopy , rootTmp ) ; } } } rootNode = rootTmp ; treeModel = treeModelTmp ; tree . setModel ( treeModel ) ; }
te	3	protected void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { PrintWriter out = response . getWriter ( ) ; request . setCharacterEncoding ( "utf-8" ) ; boolean r = false ; boolean e = false ; response . setContentType ( "text/html;charset=UTF-8" ) ; search com = new search ( ) ; String id [ ] = request . getParameterValues ( "id" ) ; String docTellId [ ] = request . getParameterValues ( "docTellId" ) ; String docId [ ] = request . getParameterValues ( "docId" ) ; String docTellContent [ ] = request . getParameterValues ( "docTellContent" ) ; String excuteDate [ ] = request . getParameterValues ( "excuteDate" ) ; String excuteId [ ] = request . getParameterValues ( "excuteId" ) ; String docTellType [ ] = request . getParameterValues ( "docTellType" ) ; String stopDate [ ] = request . getParameterValues ( "stopDate" ) ; String patientId = request . getParameter ( "patientId" ) ; for ( int i = 0 ; i < docTellId . length ; i ++ ) { r = com . docTellFind ( id [ i ] ) ; if ( r ) { e = com . docTellUpdate ( id [ i ] , docTellContent [ i ] , excuteDate [ i ] , excuteId [ i ] , docTellType [ i ] , stopDate [ i ] ) ; } else { System . out . println ( docTellId [ i ] ) ; e = com . docTellInsert ( id [ i ] , docTellId [ i ] , docId [ i ] , docTellContent [ i ] , excuteDate [ i ] , excuteId [ i ] , docTellType [ i ] , stopDate [ i ] , patientId ) ; } } if ( e ) { response . sendRedirect ( request . getContextPath ( ) + "/wardManagement/patientList.jsp" ) ; } else { out . print ( "\u6CE8\u518C\u5931\u8D25" ) ; return ; } }
te	2	public void eval ( Environment e ) { switch ( type ) { case Value : e . value ( e . thing ( this ) ) ; break ; case Name : e . value ( this ) ; break ; case Call : e . call ( this ) ; break ; default : throw new Error ( String . format ( "Primitive '%s' not implemented!" , value ) ) ; } }
te	4	@ Override public synchronized boolean add ( Plugin plugin ) { Iterator < Plugin > iter = this . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( iter . next ( ) . getName ( ) . equals ( plugin . getName ( ) ) ) { return false ; } } plugin . addPropertyChangeListener ( new PropertyChangeListener ( ) { public void propertyChange ( PropertyChangeEvent evt ) { if ( evt . getPropertyName ( ) . equals ( "plugin_files_compared" ) ) { int pos = PluginList . this . indexOf ( evt . getNewValue ( ) ) ; propertyChange . firePropertyChange ( "plugin_status_changed" , null , pos ) ; } } } ) ; if ( messageDatabase != null ) { plugin . setMessageDatabase ( messageDatabase ) ; } return super . add ( plugin ) ; }
te	2	public NotebookJTableModel ( NotebookDao dbSource , String query ) { if ( dbSource == null ) { throw new IllegalArgumentException ( "Notebook table model ben\u00F6tigt eine Datenbankquelle != null" ) ; } this . dbSource = dbSource ; if ( query == null || query . trim ( ) . isEmpty ( ) ) { throw new IllegalArgumentException ( "Notebook table model query String darf nicht null oder leer sein!" ) ; } this . query = query ; this . getDBContents ( ) ; }
te	5X	public TicTacToeGameGUI ( String [ ] playerOne , String [ ] playerTwo ) { super ( WINDOW_TITLE , WINDOW_WIDTH , WINDOW_HEIGHT ) ; if ( playerOne [ 2 ] . equals ( "Cross" ) ) { if ( playerOne [ 1 ] . equals ( "Human" ) ) { setPlayerOne ( new HumanPlayer ( playerOne [ 0 ] , Piece . TicTacToePieceColour . CROSS ) ) ; } else { setPlayerOne ( new TicTacToeComputerPlayer ( playerOne [ 0 ] , Piece . TicTacToePieceColour . CROSS ) ) ; } if ( playerTwo [ 1 ] . equals ( "Human" ) ) { setPlayerTwo ( new HumanPlayer ( playerTwo [ 0 ] , Piece . TicTacToePieceColour . NOUGHT ) ) ; } else { setPlayerTwo ( new TicTacToeComputerPlayer ( playerTwo [ 0 ] , Piece . TicTacToePieceColour . NOUGHT ) ) ; } setPlayerLabel ( playerOne [ 0 ] , "Cross" , playerTwo [ 0 ] , "Nought" ) ; } else { if ( playerOne [ 1 ] . equals ( "Human" ) ) { setPlayerOne ( new HumanPlayer ( playerOne [ 0 ] , Piece . TicTacToePieceColour . NOUGHT ) ) ; } else { setPlayerOne ( new TicTacToeComputerPlayer ( playerOne [ 0 ] , Piece . TicTacToePieceColour . NOUGHT ) ) ; } if ( playerTwo [ 1 ] . equals ( "Human" ) ) { setPlayerTwo ( new HumanPlayer ( playerTwo [ 0 ] , Piece . TicTacToePieceColour . CROSS ) ) ; } else { setPlayerTwo ( new TicTacToeComputerPlayer ( playerTwo [ 0 ] , Piece . TicTacToePieceColour . CROSS ) ) ; } setPlayerLabel ( playerOne [ 0 ] , "Nought" , playerTwo [ 0 ] , "Cross" ) ; } JMenu menu = new JMenu ( "Menu" ) ; add ( menu ) ; JMenuItem newGameButton = new JMenuItem ( "New Game" ) ; JMenuItem saveGameButton = new JMenuItem ( "Save Game" ) ; JMenuItem loadGameButton = new JMenuItem ( "Load Game" ) ; menu . add ( newGameButton ) ; menu . add ( saveGameButton ) ; menu . add ( loadGameButton ) ; JMenuBar menuBar = new JMenuBar ( ) ; menuBar . add ( menu ) ; setJMenuBar ( menuBar ) ; newGameButton . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent event ) { System . out . println ( "new game clicked" ) ; displayPlayAgain ( "Start new game?" ) ; } } ) ; saveGameButton . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent event ) { System . out . println ( "save game clicked" ) ; String saveGame = JOptionPane . showInputDialog ( "Enter save name:" ) ; Date dNow = new Date ( ) ; SimpleDateFormat timeStamp = new SimpleDateFormat ( "H.mm dd.MM.yy" ) ; System . out . println ( "Current Date: " + timeStamp . format ( dNow ) ) ; new TicTacToeGameSaver ( "saves\\tictactoesaves\\" + saveGame + "  [" + timeStamp . format ( dNow ) + "]" + ".xml" ) ; } } ) ; loadGameButton . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent event ) { System . out . println ( "load game clicked" ) ; String saveFile = "" ; String fileExtension = "" ; JFileChooser chooser = new JFileChooser ( ) ; chooser . setCurrentDirectory ( new File ( ".\\saves\\tictactoesaves\\" ) ) ; FileNameExtensionFilter filter = new FileNameExtensionFilter ( "Game saves only" , "xml" ) ; chooser . setFileFilter ( filter ) ; int returnVal = chooser . showOpenDialog ( TicTacToeGameGUI . this ) ; if ( returnVal == JFileChooser . APPROVE_OPTION ) { saveFile = chooser . getSelectedFile ( ) . getName ( ) ; fileExtension = saveFile . substring ( saveFile . lastIndexOf ( "." ) + 1 , saveFile . length ( ) ) ; } if ( fileExtension . equals ( "xml" ) ) { if ( saveFile != "" ) { try { new TicTacToeGameLoader ( "saves\\tictactoesaves\\" + saveFile ) ; } catch ( Exception e ) { System . out . println ( "Corrupted file type." ) ; } } } else { JOptionPane . showMessageDialog ( null , "You have not chosen a game save" ) ; } } } ) ; addWindowListener ( new WindowAdapter ( ) { public void windowClosing ( WindowEvent e ) { int confirmed = JOptionPane . showConfirmDialog ( null , "Are you sure you want to exit the program?" , "Exit Program Message Box" , JOptionPane . YES_NO_OPTION ) ; if ( confirmed == JOptionPane . YES_OPTION ) { dispose ( ) ; } } } ) ; init ( ) ; setDefaultCloseOperation ( JFrame . DO_NOTHING_ON_CLOSE ) ; setSize ( WINDOW_WIDTH , WINDOW_HEIGHT ) ; setLocationRelativeTo ( null ) ; setVisible ( true ) ; setResizable ( false ) ; setIconImage ( new ImageIcon ( this . getClass ( ) . getResource ( "TicTacToe.jpg" ) ) . getImage ( ) ) ; }
te	3	public String getHeader ( String key ) { for ( Header h : headers ) { if ( h . getName ( ) . equals ( key ) ) { return h . getValue ( ) ; } } return null ; }
te	5X	public void waitForQueued ( ) { boolean [ ] g = new boolean [ 1 ] ; synchronized ( g ) { synchronized ( guard ) { queue . add ( ( Runnable ) ( ) -> { synchronized ( g ) { g [ 0 ] = true ; g . notify ( ) ; } } ) ; guard . notify ( ) ; } while ( ! g [ 0 ] ) { try { g . wait ( ) ; } catch ( InterruptedException err ) { } } } }
te	1	MARKET ( String ... urlStrings ) { this . urlStrings = urlStrings ; }
te	5X	@ Override public TIPO_OBJETO get ( TIPO_OBJETO oBean ) throws Exception { class < TIPO_OBJETO > tipo = ( class < TIPO_OBJETO > ) ( ( ParameterizedType ) getClass ( ) . getGenericSuperclass ( ) ) . getActualTypeArguments ( ) [ 0 ] ; Method metodo_getId = tipo . getMethod ( "getId" ) ; Method metodo_setId = tipo . getMethod ( "setId" , Integer . class ) ; if ( ( Integer ) metodo_getId . invoke ( oBean ) > 0 ) { try { oMysql . conexion ( enumTipoConexion ) ; if ( ! oMysql . existsOne ( strTabla , ( Integer ) metodo_getId . invoke ( oBean ) ) ) { metodo_setId . invoke ( oBean , 0 ) ; } else { for ( Method method : tipo . getMethods ( ) ) { if ( ! method . getName ( ) . substring ( 3 ) . equalsIgnoreCase ( "id" ) ) { if ( method . getName ( ) . substring ( 0 , 3 ) . equalsIgnoreCase ( "set" ) ) { final class < ? > strTipoParamMetodoSet = method . getParameterTypes ( ) [ 0 ] ; String strValor = oMysql . getOne ( strTabla , method . getName ( ) . substring ( 3 ) . toLowerCase ( Locale . ENGLISH ) , ( Integer ) metodo_getId . invoke ( oBean ) ) ; if ( strValor != null ) { switch ( strTipoParamMetodoSet . getName ( ) ) { case "java.lang.Double" : method . invoke ( oBean , double . parseDouble ( strValor ) ) ; break ; case "java.lang.Integer" : method . invoke ( oBean , Integer . parseInt ( strValor ) ) ; break ; case "java.util.Date" : SimpleDateFormat format = new SimpleDateFormat ( "yyyy-MM-dd" ) ; method . invoke ( oBean , format . parse ( strValor ) ) ; break ; default : method . invoke ( oBean , strValor ) ; break ; } } } } } } } catch ( Exception e ) { throw new Exception ( "GenericDao.get: Error: " + e . getMessage ( ) ) ; } finally { oMysql . desconexion ( ) ; } } else { metodo_setId . invoke ( oBean , 0 ) ; } return oBean ; }
te	3	public void act ( List < Actor > newFoxes ) { incrementAge ( ) ; incrementHunger ( ) ; if ( isAlive ( ) ) { giveBirth ( newFoxes ) ; Location location = getLocation ( ) ; Location newLocation = findFood ( location ) ; if ( newLocation == null ) { newLocation = getField ( ) . freeAdjacentLocation ( location ) ; } if ( newLocation != null ) { setLocation ( newLocation ) ; } else { setDead ( ) ; } } }
te	2	@ Override public void processDrawing ( ) { if ( rsAlreadyLoaded || loadingError || genericLoadingError ) { showErrorScreen ( ) ; return ; } drawCycle ++ ; if ( ! loggedIn ) drawLoginScreen ( false ) ; else drawGameScreen ( ) ; anInt1213 = 0 ; }
te	5X	public int getResult ( ) { sqrs . add ( 1 ) ; sqrs . add ( 4 ) ; for ( int sum = 6 ; ; sum ++ ) { if ( sum % 300 == 0 ) { System . out . println ( sum + " debug " ) ; System . out . println ( sqrs . size ( ) + " siize " ) ; } for ( int i = sum - 3 ; i > sum / 2 ; i -- ) { for ( int j = i - 1 ; j > 2 ; j -- ) { int k = sum - i - j ; if ( k >= j || k <= 0 ) continue ; if ( i + j + k == sum ) { if ( checkSum ( i , j , k ) ) { System . out . println ( i + " " + j + " " + k + " sum " + sum ) ; return sum ; } } } } } }
te	5X	public String dTDetailSearch ( String id ) { String docName = "" ; String docTellContent = "" ; String excuteDate = "" ; String stopDate = "" ; String docTellStatus = "" ; String docTellType = "" ; String sd = "" ; String pn = "" ; String str = "select u.user_name dt.doc_tell_content dt.excute_date dt.stop_date dt.doc_tell_type dt.doc_tell_status from doc_tell dt user u where dt.id='" + id + "' and dt.doc_id=u.user_id;" ; System . out . println ( "docTellDetailSearch_______________________" + str ) ; try { conn = dbConn . getConn ( ) ; pstmt = conn . prepareStatement ( str ) ; ResultSet num = pstmt . executeQuery ( ) ; while ( num . next ( ) ) { excuteDate = num . getString ( "excute_date" ) ; stopDate = num . getString ( "stop_date" ) ; docName = num . getString ( "user_name" ) ; docTellStatus = num . getString ( "doc_tell_status" ) ; docTellType = num . getString ( "doc_tell_type" ) ; docTellContent = num . getString ( "doc_tell_content" ) ; sb . append ( " <tr><input type=\"text\" value=\"<%=session.getAttribute('userId') %>\" style=\"display:none\" id=\"excuteId\"/><input type=\"text\" value=\"" + id + "\" id=\"id\" style=\"display:none\"/> <td>\u4E3B\u6CBB\u533B\u751F:" + docName + "</td>  <td>\u4F5C\u7528\u65F6\u95F4:" + excuteDate + "~" + stopDate + "</td> </tr>" ) ; sb . append ( "<tr> <td colspan=\"2\">\u533B\u5631\u5185\u5BB9\uFF1A <textarea readonly rows=\"6\" cols=\"80\" name=\"docTellContent\" id=\"docTellContent\" onpropertychange=\"if(this.scrollHeight>80) this.style.posHeight=this.scrollHeight+5\">" + docTellContent + "</textarea></td> </tr><td colspan=\"2\">" ) ; if ( docTellType . equals ( "1" ) ) { switch ( Integer . parseInt ( docTellStatus ) ) { case 1 : sb . append ( "<input type=button  id=\"nurseCheck\" onclick=\"save(2)\" value=\"\u62A4\u58EB\u6821\u5BF9\" class=\"btn blue\"/>" ) ; break ; case 2 : sb . append ( "<input type=button id=\"docStop\"  onclick=\"save(3)\" value=\"\u505C\u6B62\u533B\u5631\"  class=\"btn blue\"/>" ) ; break ; case 3 : sb . append ( "<input type=button  id=\"nurseConfirm\" onclick=\"save(4)\"  value=\"\u62A4\u58EB\u786E\u8BA4\"   class=\"btn blue\"/>" ) ; break ; } } else if ( docTellType . equals ( "2" ) ) { sb . append ( "<input type=button  id=\"nurseConfirm\"  value=\"\u62A4\u58EB\u786E\u8BA4\" onclick=\"save(4)\"  class=\"btn blue\"/>" ) ; } sb . append ( "</td>  </tr>" ) ; } pstmt . close ( ) ; dbConn . close ( conn ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } return sb . toString ( ) ; }
te	3	public static boolean hasSubmitParameter ( ServletRequest request , String name ) { assert . notNull ( request , "Request must not be null" ) ; if ( request . getParameter ( name ) != null ) { return true ; } for ( String suffix : SUBMIT_IMAGE_SUFFIXES ) { if ( request . getParameter ( name + suffix ) != null ) { return true ; } } return false ; }
te	5X	public static PLDictionary decodePLDictionary ( XMLFile xml ) { if ( "dict" . equals ( xml . getMe ( ) . getNodeName ( ) ) ) { PLDictionary dict = new PLDictionary ( ) ; XMLFile [ ] keys = xml . gets ( "key" ) ; if ( keys . length > 0 ) { for ( int i = 0 ; i < keys . length ; i ++ ) { XMLFile key = keys [ i ] ; Node value = ( Node ) key . getMe ( ) . getNextSibling ( ) ; if ( null == value ) { continue ; } dict . put ( key . getText ( ) , PListDecoder . decode ( new XMLFile ( ( Element ) value ) ) ) ; } return dict ; } } return null ; }
te	3	public void listen ( int port ) { try { server = new ServerSocket ( port ) ; listening = true ; while ( listening ) { new HTTPClient ( server . accept ( ) ) . start ( ) ; } } catch ( Exception ex ) { ex . printStackTrace ( ) ; } }
te	4	void initialize ( int d ) { this . matArray = new Material [ this . getNumFaces ( ) ] [ this . getDimension ( ) + 2 ] [ this . getDimension ( ) + 2 ] ; this . tileState = new int [ this . getNumFaces ( ) ] [ this . getDimension ( ) + 2 ] [ this . getDimension ( ) + 2 ] ; this . cleanColor = new Material ( ) ; this . cleanColor . setAmbient ( 0.7 , 0.7 , 0.7 ) ; this . cleanColor . setDiffuse ( 0.8 , 0.8 , 0.8 ) ; this . cleanColor . setSpecular ( 0.9 , 0.9 , 0.9 , 10 ) ; this . coveredColor = new Material ( ) ; this . coveredColor . setAmbient ( 0.1 , 0.1 , 0.1 ) ; this . coveredColor . setDiffuse ( 0.2 , 0.2 , 0.2 ) ; this . coveredColor . setSpecular ( .5 , .5 , .5 , 10 ) ; this . redColor = new Material ( ) ; this . redColor . setAmbient ( 0.9 , 0.1 , 0.1 ) ; this . redColor . setDiffuse ( 0.95 , 0.15 , 0.15 ) ; this . redColor . setSpecular ( .95 , .15 , .15 , 10 ) ; this . yellowColor = new Material ( ) ; this . yellowColor . setAmbient ( 0.9 , 0.9 , 0.1 ) ; this . yellowColor . setDiffuse ( 0.95 , 0.95 , 0.15 ) ; this . yellowColor . setSpecular ( .95 , .95 , .15 , 10 ) ; this . blueColor = new Material ( ) ; this . blueColor . setAmbient ( 0.1 , 0.1 , 0.9 ) ; this . blueColor . setDiffuse ( 0.15 , 0.15 , 0.95 ) ; this . blueColor . setSpecular ( .15 , .15 , .95 , 10 ) ; this . greenColor = new Material ( ) ; this . greenColor . setAmbient ( 0.1 , 0.9 , 0.1 ) ; this . greenColor . setDiffuse ( 0.15 , 0.95 , 0.15 ) ; this . greenColor . setSpecular ( .15 , .95 , .15 , 10 ) ; this . orangeColor = new Material ( ) ; this . orangeColor . setAmbient ( 0.98 , 0.5 , 0.25 ) ; this . orangeColor . setDiffuse ( 0.99 , 0.52 , 0.27 ) ; this . orangeColor . setSpecular ( .99 , .52 , .27 , 10 ) ; this . purpleColor = new Material ( ) ; this . purpleColor . setAmbient ( 0.9 , 0.1 , 0.9 ) ; this . purpleColor . setDiffuse ( 0.95 , 0.15 , 0.95 ) ; this . purpleColor . setSpecular ( .95 , .15 , .95 , 10 ) ; for ( int face = 0 ; face < this . getNumFaces ( ) ; face ++ ) { for ( int row = 1 ; row <= this . getDimension ( ) ; row ++ ) { for ( int column = 1 ; column <= this . getDimension ( ) ; column ++ ) { this . getFace ( face ) [ row ] [ column ] . setMaterial ( this . coveredColor ) ; this . tileState [ face ] [ row ] [ column ] = 0 ; } } } }
te	3	public static String escape ( String string ) { char c ; String s = string . trim ( ) ; StringBuffer sb = new StringBuffer ( ) ; int length = s . length ( ) ; for ( int i = 0 ; i < length ; i += 1 ) { c = s . charAt ( i ) ; if ( c <   || c == + || c == % || c == = || c == ; ) { sb . append ( % ) ; sb . append ( Character . forDigit ( ( char ) ( ( c >>> 4 ) & 0f ) , 16 ) ) ; sb . append ( Character . forDigit ( ( char ) ( c & 0f ) , 16 ) ) ; } else { sb . append ( c ) ; } } return sb . toString ( ) ; }
te	2	public Object [ ] formatoTabela ( AreaFormacao areaformacao ) { return new Object [ ] { areaformacao . getId ( ) , areaformacao . getNome ( ) } ; }
te	1	public void unsetName ( ) { this . name = null ; }
te	3	@ Override public void remove ( int index ) { if ( index < 0 || _lenght <= index ) { if ( 0 == _lenght ) { return ; } throw new IndexOutOfBoundsException ( "No se puede remover el dato \n " + "pues esta fuera de los limites de la lista" ) ; } else if ( index == 0 ) { removeFirst ( ) ; } else if ( index == _lenght - 1 ) { removeLast ( ) ; } else { Node < E > tmp = getIndex ( index - 1 ) ; tmp . setNext ( tmp . getNext ( ) . getNext ( ) ) ; _lenght -- ; } }
te	1	private void initComponents ( ) { this . blackBox = new JPanel ( ) ; this . redBox = new JPanel ( ) ; this . blueBox = new JPanel ( ) ; this . greenBox = new JPanel ( ) ; this . yellowBox = new JPanel ( ) ; this . orangeBox = new JPanel ( ) ; this . letterLabel = new LetterPanel ( ) ; this . coloursPanel = new JPanel ( ) ; this . blackLabel = new JLabel ( ) ; this . redLabel = new JLabel ( ) ; this . greenLabel = new JLabel ( ) ; this . blueLabel = new JLabel ( ) ; this . yellowLabel = new JLabel ( ) ; this . orangeLabel = new JLabel ( ) ; this . coloursPanel . setLayout ( new GridBagLayout ( ) ) ; GridBagConstraints c = new GridBagConstraints ( ) ; c . gridx = 0 ; c . gridy = 0 ; c . insets = new Insets ( 5 , 5 , 5 , 5 ) ; this . coloursPanel . add ( blackBox , c ) ; c . gridx = 1 ; c . gridy = 0 ; this . coloursPanel . add ( blackLabel , c ) ; c . gridx = 0 ; c . gridy = 1 ; this . coloursPanel . add ( redBox , c ) ; c . gridx = 1 ; c . gridy = 1 ; this . coloursPanel . add ( redLabel , c ) ; c . gridx = 0 ; c . gridy = 2 ; this . coloursPanel . add ( greenBox , c ) ; c . gridx = 1 ; c . gridy = 2 ; this . coloursPanel . add ( greenLabel , c ) ; c . gridx = 2 ; c . gridy = 0 ; c . insets = new Insets ( 5 , 50 , 5 , 5 ) ; this . coloursPanel . add ( blueBox , c ) ; c . gridx = 3 ; c . gridy = 0 ; c . insets = new Insets ( 5 , 5 , 5 , 5 ) ; this . coloursPanel . add ( blueLabel , c ) ; c . gridx = 2 ; c . gridy = 1 ; c . insets = new Insets ( 5 , 50 , 5 , 5 ) ; this . coloursPanel . add ( yellowBox , c ) ; c . gridx = 3 ; c . gridy = 1 ; c . insets = new Insets ( 5 , 5 , 5 , 5 ) ; this . coloursPanel . add ( yellowLabel , c ) ; c . gridx = 2 ; c . gridy = 2 ; c . insets = new Insets ( 5 , 50 , 5 , 5 ) ; this . coloursPanel . add ( orangeBox , c ) ; c . gridx = 3 ; c . gridy = 2 ; c . insets = new Insets ( 5 , 5 , 5 , 5 ) ; this . coloursPanel . add ( orangeLabel , c ) ; this . setDefaultCloseOperation ( WindowConstants . EXIT_ON_CLOSE ) ; this . blackBox . setBackground ( SystemProperties . COLOUR_MAP . get ( ColourType . BLACK ) ) ; this . blackBox . setBorder ( BorderFactory . createLineBorder ( new java . awt . Color ( 0 , 0 , 0 ) ) ) ; this . blackBox . setPreferredSize ( new Dimension ( 30 , 30 ) ) ; this . redBox . setBackground ( SystemProperties . COLOUR_MAP . get ( ColourType . RED ) ) ; this . redBox . setBorder ( BorderFactory . createLineBorder ( new java . awt . Color ( 0 , 0 , 0 ) ) ) ; this . redBox . setPreferredSize ( new Dimension ( 30 , 30 ) ) ; this . greenBox . setBackground ( SystemProperties . COLOUR_MAP . get ( ColourType . GREEN ) ) ; this . greenBox . setBorder ( BorderFactory . createLineBorder ( new java . awt . Color ( 0 , 0 , 0 ) ) ) ; this . greenBox . setPreferredSize ( new Dimension ( 30 , 30 ) ) ; this . blueBox . setBackground ( SystemProperties . COLOUR_MAP . get ( ColourType . BLUE ) ) ; this . blueBox . setBorder ( BorderFactory . createLineBorder ( new java . awt . Color ( 0 , 0 , 0 ) ) ) ; this . blueBox . setPreferredSize ( new Dimension ( 30 , 30 ) ) ; this . yellowBox . setBackground ( SystemProperties . COLOUR_MAP . get ( ColourType . YELLOW ) ) ; this . yellowBox . setBorder ( BorderFactory . createLineBorder ( new java . awt . Color ( 0 , 0 , 0 ) ) ) ; this . yellowBox . setPreferredSize ( new Dimension ( 30 , 30 ) ) ; this . orangeBox . setBackground ( SystemProperties . COLOUR_MAP . get ( ColourType . ORANGE ) ) ; this . orangeBox . setBorder ( BorderFactory . createLineBorder ( new java . awt . Color ( 0 , 0 , 0 ) ) ) ; this . orangeBox . setPreferredSize ( new Dimension ( 30 , 30 ) ) ; this . letterLabel . setBackground ( SystemProperties . WHITE ) ; this . letterLabel . setBorder ( BorderFactory . createLineBorder ( new java . awt . Color ( 0 , 0 , 0 ) ) ) ; this . blackLabel . setText ( "s" ) ; this . blackLabel . setFont ( new Font ( "Arial" , Font . PLAIN , 28 ) ) ; this . redLabel . setText ( "r" ) ; this . redLabel . setFont ( new Font ( "Arial" , Font . PLAIN , 28 ) ) ; this . greenLabel . setText ( "g" ) ; this . greenLabel . setFont ( new Font ( "Arial" , Font . PLAIN , 28 ) ) ; this . blueLabel . setText ( "b" ) ; this . blueLabel . setFont ( new Font ( "Arial" , Font . PLAIN , 28 ) ) ; this . yellowLabel . setText ( "y" ) ; this . yellowLabel . setFont ( new Font ( "Arial" , Font . PLAIN , 28 ) ) ; this . orangeLabel . setText ( "o" ) ; this . orangeLabel . setFont ( new Font ( "Arial" , Font . PLAIN , 28 ) ) ; this . setJMenuBar ( stroopMenu ) ; this . add ( this . letterLabel , BorderLayout . CENTER ) ; this . add ( this . coloursPanel , BorderLayout . SOUTH ) ; this . setTitle ( "Stroop Test" ) ; this . addComponentListener ( this ) ; this . setPreferredSize ( new Dimension ( 800 , 600 ) ) ; this . setLocation ( ( SystemProperties . SCREEN_WIDTH / 2 ) - 400 , ( SystemProperties . SCREEN_HEIGHT / 2 ) - 300 ) ; this . pack ( ) ; }
te	3	public StandardEvaluationVisitor ( ) { variablesLoader = new VariablesLoader ( ) { @ Override public Object load ( String name ) { return variables . get ( name ) ; } } ; }
te	3	public void convert ( Ticket ticket ) { for ( de . robert_heim . unfuddle2bitbucket . model . unfuddle . Comment unfuddleComment : ticket . getComments ( ) ) { String username = null ; Person p = provider . getPeopleConverter ( ) . findPersonById ( unfuddleComment . getAuthorId ( ) ) ; if ( null == p ) { System . out . println ( "Warning: the comment-author with id '" + unfuddleComment . getAuthorId ( ) + "' could not be found in the input file. Using 'null'." ) ; } else { username = p . getName ( ) ; } Comment comment = new Comment ( unfuddleComment . getBody ( ) , unfuddleComment . getCreatedAt ( ) . toGregorianCalendar ( ) . getTime ( ) , getUniqueCommentId ( ) , ticket . getId ( ) , ticket . getUpdatedAt ( ) . toGregorianCalendar ( ) . getTime ( ) , username ) ; comments . add ( comment ) ; } }
te	2	public void set ( int index , Object element ) throws illegalIndexException { if ( index < 0 ) { throw new illegalIndexException ( ) ; } tablica_stosu [ index ] = element ; }
te	4	public static void LoadReviewsFromSQL ( ) { DBUtil db1 = new DBUtil ( ) ; Logger . getInstance ( ) . getElapseTime ( true ) ; String sql = "select * from sentences" ; ResultSet rs1 = db1 . executeQuerySQL ( sql ) ; try { while ( rs1 . next ( ) ) { String filename = TextUtil . decode ( rs1 . getString ( "filename" ) ) ; int curSentIndex = rs1 . getInt ( "sent_index" ) ; if ( ! dataHash . containsKey ( filename ) ) { RestaurantEntry tmp = new RestaurantEntry ( ) ; tmp . StartSentIndex = curSentIndex ; dataHash . put ( filename , tmp ) ; } else { dataHash . get ( filename ) . EndSentIndex = curSentIndex ; } int revIndex = rs1 . getInt ( "revindex" ) ; double rating = rs1 . getDouble ( "revrating" ) ; if ( dataHash . get ( filename ) . ReviewMap . get ( revIndex ) == null ) { ReviewEntry tmp = new ReviewEntry ( ) ; tmp . setStartSentIndex ( curSentIndex ) ; tmp . setRating ( rating ) ; dataHash . get ( filename ) . ReviewMap . put ( revIndex , tmp ) ; } else { dataHash . get ( filename ) . ReviewMap . get ( revIndex ) . setEndSentIndex ( curSentIndex ) ; } } } catch ( SQLException e ) { e . printStackTrace ( ) ; } Logger . getInstance ( ) . getElapseTime ( true ) ; sql = "select * from extractions" ; rs1 = db1 . executeQuerySQL ( sql ) ; try { while ( rs1 . next ( ) ) { int sentIndex = rs1 . getInt ( "sentindex" ) ; String attr = rs1 . getString ( "attr" ) ; stemmer . setCurrent ( attr ) ; stemmer . stem ( ) ; attr = stemmer . getCurrent ( ) ; String value = rs1 . getString ( "value" ) ; Extraction tmp = new Extraction ( value , attr , 0 ) ; tmp . setSentIndex ( sentIndex ) ; insertIntoHash ( tmp , sentIndex ) ; } } catch ( SQLException e ) { e . printStackTrace ( ) ; } Logger . getInstance ( ) . getElapseTime ( true ) ; db1 . rundown ( ) ; }
te	1	public void setNeedsPass ( boolean needsPass ) { this . needsPass = needsPass ; }
te	1	private void restartGame ( ) { gameChooser . changeGameState ( GameState . INITIALIZING ) ; changedGame = gameChooser ; }
te	4	public void run ( ) { while ( isWriter ) { int i ; int j ; synchronized ( this ) { if ( buffIndex == writeIndex ) try { wait ( ) ; } catch ( InterruptedException _ex ) { } if ( ! isWriter ) return ; j = writeIndex ; if ( buffIndex >= writeIndex ) i = buffIndex - writeIndex ; else i = 5000 - writeIndex ; } if ( i > 0 ) { try { outputStream . write ( buffer , j , i ) ; } catch ( IOException _ex ) { hasIOError = true ; } writeIndex = ( writeIndex + i ) % 5000 ; try { if ( buffIndex == writeIndex ) outputStream . flush ( ) ; } catch ( IOException _ex ) { hasIOError = true ; } } } }
te	2	@ Override public Orientation getStepOrientation ( int lineIndex ) { switch ( lineIndex ) { case 0 : case 5 : return Orientation . DOWN_LEFT ; case 1 : case 6 : return Orientation . UP_LEFT ; case 2 : case 7 : return Orientation . CENTER ; case 3 : case 8 : return Orientation . UP_RIGHT ; case 4 : case 9 : return Orientation . DOWN_RIGHT ; default : return Orientation . NONE ; } }
te	3	public void testFileContent ( ) throws IOException { long start = System . currentTimeMillis ( ) ; byte [ ] buf1 = new byte [ 1024 ] ; byte [ ] buf2 = new byte [ 1024 ] ; int size1 , size2 ; String fileName1 = "test1.class" ; String fileName2 = "test2.class" ; File file1 = new File ( fileName1 ) ; File file2 = new File ( fileName2 ) ; BufferedInputStream bis1 = new BufferedInputStream ( new FileInputStream ( file1 ) ) ; BufferedInputStream bis2 = new BufferedInputStream ( new FileInputStream ( file2 ) ) ; Polynomial polynomial = Polynomial . createIrreducible ( 53 ) ; Fingerprint < Polynomial > rabin1 = new RabinFingerprintLong ( polynomial ) ; Fingerprint < Polynomial > rabin2 = new RabinFingerprintLong ( polynomial ) ; while ( ( ( size1 = bis1 . read ( buf1 ) ) != - 1 ) && ( ( size2 = bis2 . read ( buf2 ) ) != - 1 ) ) { rabin1 . pushBytes ( buf1 ) ; rabin2 . pushBytes ( buf2 ) ; String s1 = new String ( buf1 ) ; String s2 = new String ( buf2 ) ; if ( rabin1 . getFingerprint ( ) . compareTo ( rabin2 . getFingerprint ( ) ) != 0 ) { System . out . println ( "file 1 and file 2 are different!" ) ; break ; } } if ( rabin1 . getFingerprint ( ) . compareTo ( rabin2 . getFingerprint ( ) ) == 0 ) System . out . println ( "file 1 and file 2 are the same!" ) ; long end = System . currentTimeMillis ( ) ; System . out . println ( "Time: " + ( end - start ) + "ms." ) ; assertEquals ( 0 , rabin1 . getFingerprint ( ) . compareTo ( rabin2 . getFingerprint ( ) ) ) ; }
te	4	public void addIntForKey ( String key ) { ints . add ( key ) ; if ( reference != null ) { ArrayList < GameEntity > entities = reference . getEntities ( ) ; for ( int i = 0 ; i < entities . size ( ) ; i ++ ) { EntityState state = entities . get ( i ) . getState ( ) ; if ( this == state . getReference ( ) ) { StringToInt temp = new StringToInt ( ) ; temp . setKey ( key ) ; state . getInts ( ) . add ( temp ) ; } } } else { System . out . println ( "Major Error :: LevelContainer null :: SavedEntityState" ) ; } }
te	2	public String informaNomeJogador ( int posicao ) { if ( posicao == 1 ) { return jogador1 . obterNome ( ) ; } else { return jogador2 . obterNome ( ) ; } }
te	1	@ FuncInfo ( name = "LOG10" , group = "Math Transform" , flags = 0 , nbInput = 1 , nbOptInput = 0 , nbOutput = 1 ) public RetCode log10 ( int startIdx , int endIdx , @ InputParameterInfo ( paramName = "inReal" , flags = 0 , type = InputParameterType . TA_Input_Real ) double inReal [ ] , MInteger outBegIdx , MInteger outNBElement , @ OutputParameterInfo ( paramName = "outReal" , flags = 1 , type = OutputParameterType . TA_Output_Real ) double outReal [ ] ) { return super . log10 ( startIdx , endIdx , inReal , outBegIdx , outNBElement , outReal ) ; }
te	4	private Node < V > addNextLessGreater ( Node < V > node , char c ) { while ( node . letter != c ) { if ( c < node . letter ) { if ( node . less == null ) { node . less = new Node < V > ( c ) ; return node . less ; } node = node . less ; } else { if ( node . greater == null ) { node . greater = new Node < V > ( c ) ; return node . greater ; } node = node . greater ; } } return node ; }
te	2	@ Override public void setIsMondayFirstDayOfWeek ( boolean isMondayFirstDayOfWeek ) { if ( isMondayFirstDayOfWeek == true ) { weekDaysMap . put ( 0 , MONDAY ) ; weekDaysMap . put ( 1 , TUESDAY ) ; weekDaysMap . put ( 2 , WEDNESDAY ) ; weekDaysMap . put ( 3 , THURSDAY ) ; weekDaysMap . put ( 4 , FRIDAY ) ; weekDaysMap . put ( 5 , SATURDAY ) ; weekDaysMap . put ( 6 , SUNDAY ) ; } else { weekDaysMap . put ( 0 , SUNDAY ) ; weekDaysMap . put ( 1 , MONDAY ) ; weekDaysMap . put ( 2 , TUESDAY ) ; weekDaysMap . put ( 3 , WEDNESDAY ) ; weekDaysMap . put ( 4 , THURSDAY ) ; weekDaysMap . put ( 5 , FRIDAY ) ; weekDaysMap . put ( 6 , SATURDAY ) ; } super . setIsMondayFirstDayOfWeek ( isMondayFirstDayOfWeek ) ; }
te	5X	private boolean r_Step_1a ( ) { int among_var ; int v_1 ; ket = cursor ; among_var = find_among_b ( a_1 , 6 ) ; if ( among_var == 0 ) { return false ; } bra = cursor ; switch ( among_var ) { case 0 : return false ; case 1 : slice_from ( "ss" ) ; break ; case 2 : lab0 : do { v_1 = limit - cursor ; lab1 : do { if ( cursor <= limit_backward ) { break lab1 ; } cursor -- ; if ( cursor > limit_backward ) { break lab1 ; } slice_from ( "ie" ) ; break lab0 ; } while ( false ) ; cursor = limit - v_1 ; slice_from ( "i" ) ; } while ( false ) ; break ; case 3 : if ( cursor <= limit_backward ) { return false ; } cursor -- ; golab2 : while ( true ) { lab3 : do { if ( ! ( in_grouping_b ( g_v , 97 , 121 ) ) ) { break lab3 ; } break golab2 ; } while ( false ) ; if ( cursor <= limit_backward ) { return false ; } cursor -- ; } slice_del ( ) ; break ; } return true ; }
te	1	@ Override public String toString ( ) { return getName ( ) + "=" + getValue ( ) ; }
te	5X	protected void sendRequest ( StatesOfClient state ) { resetState ( ) ; setState ( state ) ; pmfc . printWhichStateIsTesting ( ) ; try { if ( CURL_HTTP_PORT != 443 ) { client = vertx . createHttpClient ( ) . setPort ( CURL_HTTP_PORT ) . setHost ( CURL_HTTP_HOST ) ; } else { client = vertx . createHttpClient ( ) . setSSL ( true ) . setTrustAll ( true ) . setPort ( CURL_HTTP_PORT ) . setHost ( CURL_HTTP_HOST ) ; } mCurlCommandsSetter = mCurlCommandsSetterFactory . createSetter ( getState ( ) ) ; mCurlCommandsSetter . execute ( state ) ; pmfc . printCurrentRequestAndPathInCurlCommand ( ) ; requestSendFromClienttoServer = client . request ( BehaviorOfCurlCommandsSetter . currentRequest , BehaviorOfCurlCommandsSetter . currentPath , new Handler < HttpClientResponse > ( ) { @ Override public void handle ( HttpClientResponse responseRecievedAtClientFromServer ) { statusCode = responseRecievedAtClientFromServer . statusCode ( ) ; responseRecievedAtClientFromServer . bodyHandler ( new Handler < Buffer > ( ) { @ Override public void handle ( Buffer body ) { try { try { pmfc . printMessageFromServer ( body ) ; currentServerResponseInJsonFormat = new JsonObject ( body . toString ( ) ) ; getDataFromDB ( ) ; } catch ( Exception e ) { } mAssertionChecker = mAssertionCheckerFactory . createChecker ( getState ( ) ) ; mAssertionChecker . execute ( getState ( ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } finally { pmfc . printEnd ( ) ; testComplete ( ) ; } } } ) ; } } ) . exceptionHandler ( new Handler < Throwable > ( ) { @ Override public void handle ( Throwable t ) { t . printStackTrace ( ) ; } } ) ; try { headersSetUp ( ) ; jsonBodySetUp ( ) ; } catch ( Exception e ) { } } catch ( Exception e ) { fail ( e . getMessage ( ) ) ; } finally { if ( client != null ) { client . close ( ) ; } } }
te	2	public void displayPlayer ( ) { Iterator < PlayerID > iter = activePlayers . iterator ( ) ; PlayerID p ; System . out . println ( "--- PlayerIDs ---" ) ; while ( iter . hasNext ( ) ) { p = iter . next ( ) ; System . out . println ( "PlayerID: " + p . getPID ( ) + "  ConnectionID: " + p . getCID ( ) ) ; } }
te	5X	public void close ( ) { if ( ! saved ) { int choice = JOptionPane . showConfirmDialog ( this , "Modifications have been done. Do you want to save ?" , "Last Warning" , JOptionPane . INFORMATION_MESSAGE , JOptionPane . YES_NO_CANCEL_OPTION ) ; if ( choice == 0 ) { JFileChooser FCdialog = new JFileChooser ( ) ; int opt = FCdialog . showSaveDialog ( this ) ; if ( opt == JFileChooser . APPROVE_OPTION ) { try { BufferedWriter out = new BufferedWriter ( new FileWriter ( FCdialog . getSelectedFile ( ) . getPath ( ) ) ) ; out . write ( this . textPane . getText ( ) ) ; out . close ( ) ; } catch ( Exception e ) { System . out . println ( e . getMessage ( ) ) ; } this . dispose ( ) ; } } else if ( choice == 1 ) { this . dispose ( ) ; } } else this . dispose ( ) ; }
te	5X	public QuestionPanel getQuestionPanel ( ) { if ( mediaPanel . hasFinished ( ) ) createMedia ( ) ; if ( type . equals ( "plain" ) ) { HashMap < String , String > text = new HashMap < String , String > ( ) ; text . put ( "frage" , title ) ; questionPanel = new QuestionPanel ( text , mediaPanel , fontsize ) ; } else if ( type . equals ( "mchoice" ) ) { String [ ] split = answers . split ( ";" ) ; MultipleChoicePanel panel = new MultipleChoicePanel ( split , mcfont ) ; HashMap < String , String > text = new HashMap < String , String > ( ) ; text . put ( "frage" , title ) ; questionPanel = new QuestionPanel ( text , mediaPanel , panel , fontsize ) ; } else if ( type . equals ( "mchoice-img" ) || type . equals ( "mchoice_img" ) ) { String [ ] split = answers . split ( ";" ) ; JLabel [ ] labels = new JLabel [ 4 ] ; BufferedImage bufferedImage ; Image image ; for ( int i = 0 ; i < labels . length ; i ++ ) { prefHeight = Math . max ( PREF_HEIGHT , mcfont ) ; try { bufferedImage = ImageIO . read ( new File ( split [ i ] ) ) ; if ( bufferedImage . getHeight ( ) > prefHeight ) { image = bufferedImage . getScaledInstance ( bufferedImage . getWidth ( ) * prefHeight / bufferedImage . getHeight ( ) , prefHeight , BufferedImage . SCALE_SMOOTH ) ; } else { image = bufferedImage ; } } catch ( IOException e ) { bufferedImage = null ; image = null ; e . printStackTrace ( ) ; System . out . println ( "Image path: " + split [ i ] ) ; } labels [ i ] = new JLabel ( new ImageIcon ( image ) ) ; } MultipleChoicePanel panel = new MultipleChoicePanel ( labels , mcfont ) ; HashMap < String , String > text = new HashMap < String , String > ( ) ; text . put ( "frage" , title ) ; questionPanel = new QuestionPanel ( text , mediaPanel , panel , fontsize ) ; } else if ( type . equals ( "list" ) ) { HashMap < String , String > text = new HashMap < String , String > ( ) ; text . put ( "frage" , title ) ; String [ ] answerArray = answers . split ( ";" ) ; System . out . println ( "Create question list" ) ; questionPanel = new QuestionPanel ( text , answerArray , fontsize ) ; } else { System . out . println ( "failed to read file" ) ; System . exit ( 0 ) ; } return questionPanel ; }
te	1	public void arrayToTable ( Type type ) { int array = newLocal ( type ) ; int table = newLocal ( OBJ_TABLE ) ; int limit = newLocal ( INT_TYPE ) ; int counter = newLocal ( INT_TYPE ) ; Type entry = getEntryType ( type ) ; Label loopBody = new Label ( ) ; Label loopEnd = new Label ( ) ; dup ( ) ; storeLocal ( array ) ; arrayLength ( ) ; storeLocal ( limit ) ; push0 ( ) ; storeLocal ( counter ) ; newInstance ( OBJ_TABLE ) ; dup ( ) ; visitMethodInsn ( INVOKESPECIAL , TABLE , "<init>" , "()V" ) ; storeLocal ( table ) ; goto ( loopEnd ) ; visitLabel ( loopBody ) ; loadLocal ( table ) ; loadLocal ( counter ) ; push1 ( ) ; math ( ADD , INT_TYPE ) ; loadLocal ( array ) ; loadLocal ( counter ) ; arrayLoad ( entry ) ; varToLua ( entry ) ; visitMethodInsn ( INVOKEVIRTUAL , TABLE , "rawset" , "(ILjava/lang/Object;)V" ) ; iinc ( counter , 1 ) ; visitLabel ( loopEnd ) ; loadLocal ( counter ) ; loadLocal ( array ) ; arrayLength ( ) ; ifICmp ( < , loopBody ) ; loadLocal ( table ) ; }
te	2	public int length ( ) { LinkedListNode iter = this ; int acc = 0 ; while ( iter != null ) { acc ++ ; iter = iter . next ; } return acc ; }
te	5X	private void initComponents ( ) { JPanel input = new JPanel ( ) ; input . setLayout ( new FlowLayout ( FlowLayout . CENTER ) ) ; JLabel yearLabel = new JLabel ( "Year: " ) ; input . add ( yearLabel ) ; final JTextField yearField = new JTextField ( ) ; input . add ( yearField ) ; yearField . setPreferredSize ( new Dimension ( TEXT_BOX_WIDTH , TEXT_BOX_HEIGHT ) ) ; JLabel numLabel = new JLabel ( "Top number of books: " ) ; input . add ( numLabel ) ; final JTextField numField = new JTextField ( ) ; input . add ( numField ) ; numField . setPreferredSize ( new Dimension ( TEXT_BOX_WIDTH , TEXT_BOX_HEIGHT ) ) ; JButton searchButton = new JButton ( ) ; input . add ( searchButton ) ; searchButton . setText ( "Generate Report" ) ; this . add ( input ) ; final JPanel listViewer = new JPanel ( ) ; final DefaultTableModel books = new DefaultTableModel ( ) ; books . addColumn ( "Call Number" ) ; books . addColumn ( "ISBN" ) ; books . addColumn ( "Title" ) ; books . addColumn ( "Main Author" ) ; books . addColumn ( "Publisher" ) ; books . addColumn ( "Year" ) ; books . addColumn ( "Borrowed Count" ) ; JTable items = new JTable ( books ) ; items . getColumn ( "Title" ) . setPreferredWidth ( 100 ) ; items . getColumn ( "Borrowed Count" ) . setPreferredWidth ( 100 ) ; items . setEnabled ( false ) ; items . setAutoCreateRowSorter ( false ) ; items . setSelectionMode ( ListSelectionModel . MULTIPLE_INTERVAL_SELECTION ) ; items . setSize ( new Dimension ( 250 , 200 ) ) ; JScrollPane listScroller = new JScrollPane ( items ) ; listScroller . setPreferredSize ( new Dimension ( 600 , 300 ) ) ; listViewer . add ( listScroller ) ; this . add ( listViewer ) ; searchButton . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( ActionEvent arg0 ) { try { int searchParameters = Integer . parseInt ( numField . getText ( ) ) ; Integer . parseInt ( yearField . getText ( ) ) ; if ( yearField . getText ( ) . length ( ) != 4 ) { new NotificationDialog ( null , "ERROR" , "Please ensure the year is entered in a YYYY format." ) ; return ; } books . setRowCount ( 0 ) ; String searchTerms = yearField . getText ( ) . toString ( ) ; Vector < Object [ ] > books2 = MainLibrary . databaseHandler . getBooks ( searchTerms , searchParameters , DatabaseHandler . MOST_POPULAR_REPORT ) ; for ( int j = 0 ; j < books2 . size ( ) ; j ++ ) { books . addRow ( books2 . get ( j ) ) ; } return ; } catch ( NumberFormatException e ) { new NotificationDialog ( null , "ERROR" , "The year field and number field requires only numbers to be entered." ) ; } } } ) ; }
te	1	public void setNbRows ( int nb ) { rows = nb ; }
te	5X	public void update ( List < Zombie > targets ) { if ( this . isAlive ( ) ) { { synchronized ( this . particles ) { if ( ! this . particles . isEmpty ( ) ) { Iterator < Particle > it = this . particles . iterator ( ) ; while ( it . hasNext ( ) ) { Particle p = it . next ( ) ; p . update ( ) ; if ( ! p . isAlive ( ) || p . outOfBounds ( ) ) { it . remove ( ) ; continue ; } } } } } { if ( ! targets . isEmpty ( ) ) { double xD = 1000 ; double yD = 1000 ; double dist = Math . sqrt ( ( xD * xD ) + ( yD * yD ) ) ; if ( this . target != null ) { xD = this . target . x - this . x ; yD = this . target . y - this . y ; dist = Math . sqrt ( ( xD * xD ) + ( yD * yD ) ) ; } synchronized ( targets ) { Iterator < Zombie > it = targets . iterator ( ) ; while ( it . hasNext ( ) ) { Zombie z = it . next ( ) ; double xD2 = z . x - this . x ; double yD2 = z . y - this . y ; double dist2 = Math . sqrt ( ( xD2 * xD2 ) + ( yD2 * yD2 ) ) ; if ( ( ! z . isDead ( ) && ( dist2 < dist ) ) && ( dist2 <= Turret . ATTACK_RADIUS ) ) { this . target = z ; } } } if ( this . target != null ) { this . theta = Math . atan2 ( ( this . y - this . target . y ) , ( this . x - this . target . x ) ) - ( Math . PI / 2 ) ; } } } if ( ( this . target != null ) && ( this . target . isDead ( ) ) ) this . target = null ; if ( this . target != null ) this . fire ( ) ; } }
te	4	public void mouseClicked ( MouseEvent me ) { try { if ( me . getSource ( ) == jb_connexion ) { login = jtf_login . getText ( ) ; password = String . valueOf ( jpf_password . getPassword ( ) ) ; System . out . println ( "Email : " + login ) ; System . out . println ( "MotDePasse : " + password ) ; User u = null ; Connection co = bs . getConnection ( ) ; System . out . println ( "avant IF" ) ; if ( User . checkPresence ( bs , login , password ) ) { System . out . println ( "debut IF" ) ; u = User . findByLogs ( login , password , bs ) ; groupe = UserType . findById ( u . getId_ut ( ) , bs ) . getName_ut ( ) ; System . out . println ( "OK : " + groupe ) ; afficherMenuPrincipal ( ) ; setResizable ( true ) ; setExtendedState ( MAXIMIZED_BOTH ) ; } else { System . out . println ( "NON OK" ) ; } } if ( me . getSource ( ) == jb_mdp_oublie ) { if ( SwingUtilities . isLeftMouseButton ( me ) ) { } if ( SwingUtilities . isRightMouseButton ( me ) ) { } } } catch ( Exception e ) { System . out . println ( "Exception" ) ; e . printStackTrace ( ) ; } }
te	3	public static void benchmark ( ) throws Exception { int N = 100000 ; String [ ] methodsToCompare = { "canWriteLetterFromMagazine1" , "canWriteLetterFromMagazine2" , "canWriteLetterFromMagazine3" , "canWriteLetterFromMagazine4" , "canWriteLetterFromMagazine5" , "canWriteLetterFromMagazine6" , "canWriteLetterFromMagazine7" } ; String magazine = cleanInput ( "this is a pretty awesome magazinethis is a pretty awesome magazinethis is a pretty awesome magazinethis is a pretty awesome magazinethis is a pretty awesome magazinethis is a pretty awesome magazinethis is a pretty awesome magazinethis is a pretty awesome magazinethis is a pretty awesome magazinethis is a pretty awesome magazinethis is a pretty awesome magazinethis is a pretty awesome magazinethis is a pretty awesome magazinethis is a pretty awesome magazinethis is a pretty awesome magazinethis is a pretty awesome magazinethis is a pretty awesome magazinethis is a pretty awesome magazinethis is a pretty awesome magazinethis is a pretty awesome magazinethis is a pretty awesome magazine" ) ; String letter = cleanInput ( "hogs are swine" ) ; for ( String methodName : methodsToCompare ) { class clazz = class . forName ( "book.chapter.twelve.Problem12_09" ) ; Method method = clazz . getDeclaredMethod ( methodName , String . class , String . class ) ; long startTime = System . nanoTime ( ) ; for ( int i = 0 ; i < N ; i ++ ) { boolean retVal = ( boolean ) method . invoke ( null , letter , magazine ) ; if ( retVal == false ) throw new Exception ( "wrong result!" ) ; } long endTime = System . nanoTime ( ) ; System . out . println ( "Elapsed time for " + methodName + ": " + ( endTime - startTime ) / 1000000000.0 + " seconds" ) ; } }
te	5X	public void actionPerformed ( ActionEvent e ) { if ( GridButton . class . isInstance ( e . getSource ( ) ) ) { GridButton b = ( GridButton ) e . getSource ( ) ; switch ( b . getColumn ( ) ) { case ( 0 ) : { client . openFile ( networkFiles . get ( b . getRow ( ) ) ) ; break ; } case ( 1 ) : { int n = JOptionPane . showConfirmDialog ( this , "Delete " + networkFiles . get ( b . getRow ( ) ) + " from the network?" , "Are you sure?" , JOptionPane . YES_NO_OPTION ) ; if ( n == 0 ) client . deleteFileFromNetwork ( networkFiles . get ( b . getRow ( ) ) ) ; break ; } case ( 2 ) : { int n = JOptionPane . showConfirmDialog ( this , "Delete " + networkFiles . get ( b . getRow ( ) ) + " locally?" , "Are you sure?" , JOptionPane . YES_NO_OPTION ) ; if ( n == 0 ) client . deleteLocalFile ( networkFiles . get ( b . getRow ( ) ) ) ; break ; } default : { break ; } } } else if ( JButton . class . isInstance ( e . getSource ( ) ) ) { JButton b = ( JButton ) e . getSource ( ) ; if ( b == loginButton ) { this . updateStatusLabel ( "Logging into the system. Please wait..." ) ; client . loginSystem ( ) ; } else if ( b == logoutButton ) { this . updateStatusLabel ( "Logging out the system. Please wait..." ) ; logoutStatusWindow = new LogoutStatusWindow ( this ) ; new Thread ( new Runnable ( ) { @ Override public void run ( ) { client . logoutSystem ( ) ; } } ) . start ( ) ; } else if ( b == addFileButton ) { if ( client . getSessionState ( ) ) { int returnValue = fileChooser . showOpenDialog ( this ) ; if ( returnValue == JFileChooser . APPROVE_OPTION ) { client . importFile ( fileChooser . getSelectedFile ( ) ) ; } } } else if ( b == infoButton ) { LinkedNodesWindow l = new LinkedNodesWindow ( this ) ; client . TESTprintOwnerFiles ( ) ; } else if ( b == settingsButton ) { SettingsWindow s = new SettingsWindow ( this ) ; } } }
te	2	private static char [ ] reverse ( char [ ] a , int len ) { char [ ] b = new char [ len ] ; for ( int i = len - 1 , j = 0 ; i >= 0 ; i -- , j ++ ) { b [ j ] = a [ i ] ; } return b ; }
te	5X	public void handleData ( int [ ] data ) { if ( data . length == 0 ) { return ; } for ( int i = 0 ; i < data . length ; i ++ ) { if ( data [ i ] == START_UPDATE_MOVEABLE ) { for ( int j = i ; j < data . length ; j ++ ) { if ( data [ j ] == END_UPDATE_MOVEABLE ) { int length = j - i ; if ( length != 3 ) { throw new RuntimeException ( "Invalid formatted data. Update moveable data not correct" ) ; } else { updateMoveable ( data [ i + 1 ] , data [ i + 2 ] ) ; } i = j ; break ; } } } else if ( data [ i ] == START_DROP_BOMB ) { for ( int j = i ; j < data . length ; j ++ ) { if ( data [ j ] == END_DROP_BOMB ) { int length = j - i ; if ( length != 5 ) { throw new RuntimeException ( "Invalid formatted data. Drop bomb data not correct: " + length ) ; } else { addBomb ( data [ i + 1 ] , data [ i + 2 ] , data [ i + 3 ] , data [ i + 4 ] ) ; } i = j ; break ; } } } } }
te	5X	public static QuestionCalculation decode ( String encodedQuestionCalculation ) throws DecodeException { QuestionCalculation res ; if ( encodedQuestionCalculation . substring ( 0 , 19 ) . compareTo ( "#QuestionCalculaion" ) == 0 ) { res = new QuestionCalculation ( ) ; int i = 19 ; if ( encodedQuestionCalculation . charAt ( i ) == < ) { while ( encodedQuestionCalculation . charAt ( i ) != > ) { i ++ ; } ArrayList < Integer > tmp_opd = decodeOperands ( encodedQuestionCalculation . substring ( 20 , i ) ) ; res . setOperands ( tmp_opd ) ; i ++ ; int beginning = i ; if ( encodedQuestionCalculation . charAt ( i ) == < ) { while ( encodedQuestionCalculation . charAt ( i ) != > ) { i ++ ; } ArrayList < Character > tmp_opt = decodeOperators ( encodedQuestionCalculation . substring ( beginning + 1 , i ) ) ; assert tmp_opt . size ( ) == tmp_opt . size ( ) + 1 : "incorrect size of operators table" ; res . setOperators ( tmp_opt ) ; i ++ ; beginning = i ; if ( encodedQuestionCalculation . charAt ( i ) == < ) { while ( encodedQuestionCalculation . charAt ( i ) != > ) { i ++ ; } int tmp_lth = Integer . valueOf ( encodedQuestionCalculation . substring ( beginning + 1 , i ) ) ; assert tmp_lth < 0 : "negative length" ; res . setLength ( tmp_lth ) ; i ++ ; encodedQuestionCalculation = encodedQuestionCalculation . substring ( i ) ; Question . decode ( res , encodedQuestionCalculation ) ; } else { res = null ; throw new DecodeException ( ) ; } } else { res = null ; throw new DecodeException ( ) ; } } else { res = null ; throw new DecodeException ( ) ; } } else { res = null ; throw new DecodeException ( ) ; } return res ; }
te	4	private int get_next_page ( Page page , long boundary ) { if ( boundary > 0 ) boundary += offset ; while ( true ) { int more ; if ( boundary > 0 && offset >= boundary ) return OV_FALSE ; more = oy . pageseek ( page ) ; if ( more < 0 ) { offset -= more ; } else { if ( more == 0 ) { if ( boundary == 0 ) return OV_FALSE ; int ret = get_data ( ) ; if ( ret == 0 ) return OV_EOF ; if ( ret < 0 ) return OV_EREAD ; } else { int ret = ( int ) offset ; offset += more ; return ret ; } } } }
te	3	public Ouvrage rechOuvrage ( String isbn ) { Ouvrage ouv = this . getOuvrage ( isbn ) ; if ( ouv == null ) { Message dialog = new Message ( "Ouvrage inconnu" ) ; } else { if ( this . getVue ( ) instanceof VueSaisieExemplaire ) { ouv . addObserver ( this . getVue ( ) ) ; this . getVue ( ) . setEtat ( Vue . inter1 ) ; ( ( VueSaisieExemplaire ) this . getVue ( ) ) . alimente ( ouv ) ; } if ( this . getVue ( ) instanceof VueConsultOuvrage ) { this . getVue ( ) . setEtat ( Vue . finale ) ; ( ( VueConsultOuvrage ) this . getVue ( ) ) . alimente ( ouv ) ; } } return ouv ; }
te	2	public CashOffice registerCashOffice ( CashOffice cashOffice ) { int index = cashOffices . indexOf ( cashOffice ) ; if ( index == - 1 ) { addCashOffice ( cashOffice ) ; return cashOffice ; } else { CashOffice foundedCashOffice = cashOffices . get ( index ) ; return foundedCashOffice ; } }
te	2	private FormalParametersNode formalParameters ( ) { List < FPSectionNode > fpsections = new ArrayList < FPSectionNode > ( ) ; FPSectionNode fpsection = ( FPSectionNode ) fpSection ( ) ; fpsections . add ( fpsection ) ; while ( test ( SEMICOLON ) ) { read ( SEMICOLON , ";" ) ; fpsection = ( FPSectionNode ) fpSection ( ) ; fpsections . add ( fpsection ) ; } return new FormalParametersNode ( fpsections ) ; }
te	5X	public final double nextGaussian ( ) { if ( __haveNextNextGaussian ) { __haveNextNextGaussian = false ; return __nextNextGaussian ; } else { double v1 , v2 , s ; do { int y ; int z ; int a ; int b ; if ( mti >= N ) { int kk ; final int [ ] mt = this . mt ; final int [ ] mag01 = this . mag01 ; for ( kk = 0 ; kk < N - M ; kk ++ ) { y = ( mt [ kk ] & UPPER_MASK ) | ( mt [ kk + 1 ] & LOWER_MASK ) ; mt [ kk ] = mt [ kk + M ] ^ ( y >>> 1 ) ^ mag01 [ y & 1 ] ; } for ( ; kk < N - 1 ; kk ++ ) { y = ( mt [ kk ] & UPPER_MASK ) | ( mt [ kk + 1 ] & LOWER_MASK ) ; mt [ kk ] = mt [ kk + ( M - N ) ] ^ ( y >>> 1 ) ^ mag01 [ y & 1 ] ; } y = ( mt [ N - 1 ] & UPPER_MASK ) | ( mt [ 0 ] & LOWER_MASK ) ; mt [ N - 1 ] = mt [ M - 1 ] ^ ( y >>> 1 ) ^ mag01 [ y & 1 ] ; mti = 0 ; } y = mt [ mti ++ ] ; y ^= y >>> 11 ; y ^= ( y << 7 ) & TEMPERING_MASK_B ; y ^= ( y << 15 ) & TEMPERING_MASK_C ; y ^= ( y >>> 18 ) ; if ( mti >= N ) { int kk ; final int [ ] mt = this . mt ; final int [ ] mag01 = this . mag01 ; for ( kk = 0 ; kk < N - M ; kk ++ ) { z = ( mt [ kk ] & UPPER_MASK ) | ( mt [ kk + 1 ] & LOWER_MASK ) ; mt [ kk ] = mt [ kk + M ] ^ ( z >>> 1 ) ^ mag01 [ z & 1 ] ; } for ( ; kk < N - 1 ; kk ++ ) { z = ( mt [ kk ] & UPPER_MASK ) | ( mt [ kk + 1 ] & LOWER_MASK ) ; mt [ kk ] = mt [ kk + ( M - N ) ] ^ ( z >>> 1 ) ^ mag01 [ z & 1 ] ; } z = ( mt [ N - 1 ] & UPPER_MASK ) | ( mt [ 0 ] & LOWER_MASK ) ; mt [ N - 1 ] = mt [ M - 1 ] ^ ( z >>> 1 ) ^ mag01 [ z & 1 ] ; mti = 0 ; } z = mt [ mti ++ ] ; z ^= z >>> 11 ; z ^= ( z << 7 ) & TEMPERING_MASK_B ; z ^= ( z << 15 ) & TEMPERING_MASK_C ; z ^= ( z >>> 18 ) ; if ( mti >= N ) { int kk ; final int [ ] mt = this . mt ; final int [ ] mag01 = this . mag01 ; for ( kk = 0 ; kk < N - M ; kk ++ ) { a = ( mt [ kk ] & UPPER_MASK ) | ( mt [ kk + 1 ] & LOWER_MASK ) ; mt [ kk ] = mt [ kk + M ] ^ ( a >>> 1 ) ^ mag01 [ a & 1 ] ; } for ( ; kk < N - 1 ; kk ++ ) { a = ( mt [ kk ] & UPPER_MASK ) | ( mt [ kk + 1 ] & LOWER_MASK ) ; mt [ kk ] = mt [ kk + ( M - N ) ] ^ ( a >>> 1 ) ^ mag01 [ a & 1 ] ; } a = ( mt [ N - 1 ] & UPPER_MASK ) | ( mt [ 0 ] & LOWER_MASK ) ; mt [ N - 1 ] = mt [ M - 1 ] ^ ( a >>> 1 ) ^ mag01 [ a & 1 ] ; mti = 0 ; } a = mt [ mti ++ ] ; a ^= a >>> 11 ; a ^= ( a << 7 ) & TEMPERING_MASK_B ; a ^= ( a << 15 ) & TEMPERING_MASK_C ; a ^= ( a >>> 18 ) ; if ( mti >= N ) { int kk ; final int [ ] mt = this . mt ; final int [ ] mag01 = this . mag01 ; for ( kk = 0 ; kk < N - M ; kk ++ ) { b = ( mt [ kk ] & UPPER_MASK ) | ( mt [ kk + 1 ] & LOWER_MASK ) ; mt [ kk ] = mt [ kk + M ] ^ ( b >>> 1 ) ^ mag01 [ b & 1 ] ; } for ( ; kk < N - 1 ; kk ++ ) { b = ( mt [ kk ] & UPPER_MASK ) | ( mt [ kk + 1 ] & LOWER_MASK ) ; mt [ kk ] = mt [ kk + ( M - N ) ] ^ ( b >>> 1 ) ^ mag01 [ b & 1 ] ; } b = ( mt [ N - 1 ] & UPPER_MASK ) | ( mt [ 0 ] & LOWER_MASK ) ; mt [ N - 1 ] = mt [ M - 1 ] ^ ( b >>> 1 ) ^ mag01 [ b & 1 ] ; mti = 0 ; } b = mt [ mti ++ ] ; b ^= b >>> 11 ; b ^= ( b << 7 ) & TEMPERING_MASK_B ; b ^= ( b << 15 ) & TEMPERING_MASK_C ; b ^= ( b >>> 18 ) ; v1 = 2 * ( ( ( ( ( long ) ( y >>> 6 ) ) << 27 ) + ( z >>> 5 ) ) / ( double ) ( 1 << 53 ) ) - 1 ; v2 = 2 * ( ( ( ( ( long ) ( a >>> 6 ) ) << 27 ) + ( b >>> 5 ) ) / ( double ) ( 1 << 53 ) ) - 1 ; s = v1 * v1 + v2 * v2 ; } while ( s >= 1 || s == 0 ) ; double multiplier = StrictMath . sqrt ( - 2 * StrictMath . log ( s ) / s ) ; __nextNextGaussian = v2 * multiplier ; __haveNextNextGaussian = true ; return v1 * multiplier ; } }
te	1	public final void set ( double xl , double yl , double xh , double yh ) { boundaryLowX = xl ; boundaryLowY = yl ; boundaryHiX = xh ; boundaryHiY = yh ; }
te	4	public static void main ( String [ ] args ) throws IOException { if ( args . length >= 2 ) { File inDir = new File ( args [ 0 ] ) ; File outDir = new File ( args [ 1 ] ) ; if ( ! outDir . exists ( ) ) { outDir . mkdirs ( ) ; } File [ ] fList = inDir . listFiles ( new FileFilter ( ) { @ Override public boolean accept ( File arg0 ) { return ( arg0 . getName ( ) . startsWith ( "d-" ) && arg0 . getName ( ) . endsWith ( ".txt.csv" ) ) ; } } ) ; Utilities . recompose ( fList , outDir ) ; } }
te	2	@ Override public void setInitialized ( short mask , float value ) { switch ( mask ) { case Constants . F_MASK : f = value ; break ; case Constants . X_MASK : x = value ; break ; case Constants . Y_MASK : y = value ; break ; default : break ; } }
te	3	private Set < Strategy > buildStrategies ( Strategy strategy , int breakpointNumber , int [ ] breakpoints , int [ ] [ ] actionPercentages ) { Set < Strategy > strategies = new HashSet < Strategy > ( ) ; for ( int [ ] actionPercentageSet : actionPercentages ) { Strategy s = new Strategy ( strategy ) ; Tactic nextTactic = new Tactic ( actionPercentageSet ) ; s . putNewTactic ( nextTactic ) ; if ( breakpointNumber < AISettings . DEFAULT_BREAKPOINTS . length - 1 ) { strategies . addAll ( buildStrategies ( s , breakpointNumber + 1 , breakpoints , actionPercentages ) ) ; } else { strategies . add ( s ) ; } } return strategies ; }
te	4	public HashMap < Integer , Integer > getSgd2iesdhcmap ( ) { if ( sgd2iesdhcmap != null ) { return sgd2iesdhcmap ; } sgd2iesdhcmap = new HashMap < Integer , Integer > ( ) ; String SQL1 = "SELECT id  TIME_FORMAT(inicio '%H:%i') AS inicio  TIME_FORMAT(fin '%H:%i') AS fin FROM horascentro" ; try { Statement st = getSgd ( ) . createStatement ( ) ; ResultSet rs1 = getSgd ( ) . getResultSet ( SQL1 , st ) ; while ( rs1 != null && rs1 . next ( ) ) { int id = rs1 . getInt ( "id" ) ; String inicio = rs1 . getString ( "inicio" ) ; String fin = rs1 . getString ( "fin" ) ; String SQL2 = "SELECT codigo from sig_hores_classe WHERE inicio='" + inicio + "' AND fin='" + fin + "'" ; Statement st2 = getMysql ( ) . createStatement ( ) ; ResultSet rs2 = getMysql ( ) . getResultSet ( SQL2 , st2 ) ; if ( rs2 != null && rs2 . next ( ) ) { sgd2iesdhcmap . put ( id , rs2 . getInt ( 1 ) ) ; } if ( rs2 != null ) { rs2 . close ( ) ; st2 . close ( ) ; } } if ( rs1 != null ) { rs1 . close ( ) ; st . close ( ) ; } } catch ( SQLException ex ) { Logger . getLogger ( HoraCentro . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; } return sgd2iesdhcmap ; }
te	4	private long checkClientTimeouts ( int timeout ) { Set < Integer > disconnectedClientIds = new HashSet < Integer > ( ) ; long oldestClientCommunicationTime = - 1 ; synchronized ( CONNECTION_LOCK ) { if ( ! isRunning ) return - 1 ; long now = System . currentTimeMillis ( ) ; oldestClientCommunicationTime = now ; for ( Iterator < Integer > iter = clients . keySet ( ) . iterator ( ) ; iter . hasNext ( ) ; ) { int clientId = iter . next ( ) ; ClientInfo client = clients . get ( clientId ) ; if ( client . getTimeOfLastCommunication ( ) + timeout <= now ) { iter . remove ( ) ; disconnectedClientIds . add ( clientId ) ; } else if ( client . getTimeOfLastCommunication ( ) < oldestClientCommunicationTime ) oldestClientCommunicationTime = client . getTimeOfLastCommunication ( ) ; } } for ( int clientId : disconnectedClientIds ) { logger . fine ( "Client " + clientId + " timed out" ) ; onClientDisconnected ( clientId , Server . CLIENT_TIMED_OUT ) ; } return oldestClientCommunicationTime ; }
te	5X	private List < Student > getStudents ( final Mode inputMode , final List < Object > params ) { final List < Student > students = new Vector < Student > ( ) ; if ( isConnect ( ) ) { sendPackage ( new package ( inputMode , params ) ) ; Object obj ; while ( true ) { try { obj = ois . readObject ( ) ; } catch ( final IOException e ) { System . out . println ( "can't read" ) ; break ; } catch ( final ClassNotFoundException e ) { System . out . println ( "can't read" ) ; break ; } if ( obj != null ) { if ( isPackage ( obj ) ) { final package pack = ( package ) obj ; final Mode mode = pack . getMode ( ) ; switch ( mode ) { case SEARCH1 : receiveStudents ( students , pack ) ; return students ; case SEARCH2 : receiveStudents ( students , pack ) ; return students ; case SEARCH3 : receiveStudents ( students , pack ) ; return students ; case GET_CURR_PAGE : receiveStudents ( students , pack ) ; return students ; case GET_NEXT_PAGE : receiveStudents ( students , pack ) ; return students ; case GET_PREV_PAGE : receiveStudents ( students , pack ) ; return students ; default : System . out . println ( "default" ) ; break ; } System . out . println ( ) ; break ; } } } } return students ; }
te	1	public boolean isAlreadyExistPassenger ( Passenger passenger ) { log . debug ( "Start isAlreadyExistPassenger select" ) ; List results = em . createQuery ( "select count(*)\n" + "from Passenger passenger \n" + "where passenger.firstname = ?\n" + "and passenger.lastname = ?\n" + "and passenger.birthday = ?" ) . setParameter ( 1 , passenger . getFirstname ( ) ) . setParameter ( 2 , passenger . getLastname ( ) ) . setParameter ( 3 , passenger . getBirthday ( ) ) . getResultList ( ) ; return ( long ) results . get ( 0 ) != 0 ; }
te	1	@ Override public HandlerList getHandlers ( ) { return handlers ; }
te	3	public OutcomingDocument createOutcomingDocument ( IncomingDocument initiatingDocument ) { if ( getEnvironment ( ) != null ) { if ( getDepartment ( ) != null ) { OutcomingDocument outcomingDocument = new OutcomingDocument ( getEnvironment ( ) . getOutcomingDocType ( ) , this , getDepartment ( ) . getPublicService ( ) ) ; outcomingDocument . setText ( this . getReplyToThank ( ) ) ; initiatingDocument . setReactionDocument ( outcomingDocument ) ; outcomingDocument . setInitiatingDocument ( initiatingDocument ) ; outcomingDocument . setDocumentName ( ExecutionDefaults . OUTCOMING_DOC_NAME ) ; return outcomingDocument ; } else throw new IllegalStateException ( ExecutionDefaults . DEPARTMENT_IS_NULL ) ; } else throw new IllegalStateException ( ExecutionDefaults . ENVIRONMENT_IS_NULL ) ; }
te	2	private static void createProduct ( ) { ProductUI productMenu = new ProductUI ( ) ; ProductService productService = new ProductService ( new ProductDAO ( ) ) ; try { ProductModel newProduct = productMenu . createProduct ( ) ; newProduct = productService . createProduct ( newProduct ) ; productMenu . showCreateSuccess ( newProduct ) ; } catch ( WebshopAppException e ) { ExceptionUI . printException ( e ) ; } }
te	4	public void execute ( String [ ] args ) { if ( userError ( stack , args , 2 , 0 ) ) { try { if ( defines . containsKey ( args [ 1 ] ) ) { stack . push ( defines . get ( args [ 1 ] ) ) ; } else { stack . push ( double . parseDouble ( args [ 1 ] ) ) ; } } catch ( NumberFormatException ex ) { System . out . println ( "ERROR IN PUSH!" ) ; ex . printStackTrace ( ) ; } } }
te	1	public int numberOfPhotosBelongingTo ( ) { return this . photosInAlbum . size ( ) ; }
te	2	private void fixUpCase1 ( RBNode < T > node ) { if ( node . equals ( root ) ) { node . setColour ( Colour . BLACK ) ; } else { fixUpCase2 ( node ) ; } }
te	1	public boolean inGameStateNextFrame ( String state ) { return el . inGameStateNextFrame ( state ) ; }
te	3	public void testMapBranch ( ) { Mapping mapping = new Mapping ( ) ; VirtualNode virtualNode = requests . get ( 0 ) . getVirtualNodes ( ) . get ( 0 ) ; VirtualLink virtualLink = ( VirtualLink ) virtualNode . getAttachedLinks ( ) . get ( 0 ) ; VirtualNode virtualDestinyNode = ( VirtualNode ) virtualLink . getNodeAttachedTo ( virtualNode ) ; for ( PhysicalNode physicalNode : substrateNetwork . getHashNodes ( ) . values ( ) ) { if ( ! mapping . isNodeMapped ( virtualNode ) && physicalNode . canHost ( virtualNode ) ) { mapping . addNodeMapping ( virtualNode , physicalNode ) ; } } assertTrue ( mapper . mapBranch ( virtualNode , virtualDestinyNode , virtualLink , substrateNetwork , mapping ) ) ; }
te	3	@ Override public void run ( GameManager gameManager , Game ata , MessageInfo msgInfo , List < Message > responses ) { responses . add ( MSG ( msgInfo . ROOM , msgInfo . NICK + " has been marked as away.  Use !back to rejoin." ) ) ; Name name = gameManager . m_nickToNameMap . get ( msgInfo . NICK ) ; ata . m_activePlayers . remove ( name ) ; if ( ata . m_activePlayers . size ( ) < 3 ) { ata . m_state = State . LOCK ; responses . add ( MSG ( gameManager . getName ( ) , "!botendgame " + msgInfo . ROOM ) ) ; } if ( ata . m_judge . equals ( msgInfo . NICK ) ) { ata . m_state = State . LOCK ; responses . add ( MSG ( gameManager . getName ( ) , "!botcleanup " + msgInfo . ROOM ) ) ; } else if ( ata . m_state == State . PLAY ) { ata . m_waiting . remove ( name ) ; if ( ata . m_waiting . size ( ) == 0 ) { ata . m_waiting . remove ( name ) ; responses . add ( MSG ( gameManager . getName ( ) , "!botchoose " + msgInfo . ROOM ) ) ; } } }
te	1	public void updateMenu ( ) { setPanel ( _menuSelect . selectMenu ( ) ) ; }
te	3	private void traversal ( final TreeNode t , final List < long > list ) { if ( t . left != null ) { traversal ( t . left , list ) ; list . add ( t . value ) ; if ( t . right != null ) { traversal ( t . right , list ) ; } } }
te	4	private void createUnits ( ) { ArrayList < Building > buildings = g . map . getPlayersBuildings ( this ) ; boolean hasMoney = true ; while ( hasMoney ) { for ( Building building : buildings ) { if ( building instanceof Factory ) { ( ( Factory ) building ) . recruitTank ( g . map , building . getCell ( ) , true ) ; } if ( building instanceof Barracks ) { ( ( Barracks ) building ) . recruitMarine ( g . map , building . getCell ( ) , true ) ; } } if ( buildings . contains ( Barracks . class ) ) { hasMoney = this . getMoney ( ) >= Marine . cost ; } else if ( buildings . contains ( Factory . class ) ) { hasMoney = this . getMoney ( ) >= Tank . cost ; } else { hasMoney = false ; } } }
te	1	public void addConversation ( Conversation c ) { conversations . add ( c ) ; }
te	1	@ Override public boolean setPacketFields ( Map < String , Object > in ) { return true ; }
te	5X	private void exportaTXT ( ) throws SQLException { String query = "" ; String query_contador = "" ; String linea ; ResultSet respuesta ; boolean band = false ; String ruta_escritorio = System . getProperty ( "user.home" ) + "\\Desktop\\" ; try { BufferedWriter escribir_archivo = new BufferedWriter ( new FileWriter ( new File ( ruta_escritorio + this . NombreArchivo ) ) ) ; if ( this . caso . equals ( "todos" ) ) { query_contador = "SELECT COUNT(`correo`) FROM `" + NombreTablas . CORREOS . getValue ( ) + "` WHERE `habilitado` = 'true'" ; respuesta = this . conexion . executeQuery ( query_contador ) ; respuesta . next ( ) ; total_correos = respuesta . getInt ( 1 ) ; query = "SELECT `correo` FROM `" + NombreTablas . CORREOS . getValue ( ) + "` WHERE `habilitado` = 'true'" ; respuesta = this . conexion . executeQuery ( query ) ; while ( respuesta . next ( ) ) { cont_escritos ++ ; linea = respuesta . getNString ( "correo" ) ; escribir_archivo . write ( linea ) ; if ( cont_escritos < total_correos ) { escribir_archivo . write ( "\r\n" ) ; } int porcentaje = ( cont_escritos * 100 ) / total_correos ; vistaLoading . lblInfo . setText ( "Exportando " + cont_escritos + " de " + total_correos ) ; vistaLoading . pbProgreso . setValue ( porcentaje ) ; vistaLoading . lblCompletado . setText ( porcentaje + "% completado..." ) ; } escribir_archivo . close ( ) ; band = true ; } else if ( this . caso . equals ( "origen-grupo" ) ) { if ( origen != null && grupo != null ) { query_contador = "SELECT COUNT(`correo`) FROM `" + NombreTablas . CORREOS . getValue ( ) + "` WHERE `habilitado` = 'true' AND `id_origen` = " + origen . getId ( ) + " AND `id_grupo` = " + grupo . getId ( ) ; query = "SELECT `correo` FROM `" + NombreTablas . CORREOS . getValue ( ) + "` WHERE `habilitado` = 'true' AND `id_origen` = " + origen . getId ( ) + " AND `id_grupo` = " + grupo . getId ( ) ; } else if ( origen != null && grupo == null ) { query_contador = "SELECT COUNT(`correo`) FROM `" + NombreTablas . CORREOS . getValue ( ) + "` WHERE `habilitado` = 'true' AND `id_origen` = " + origen . getId ( ) ; query = "SELECT `correo` FROM `" + NombreTablas . CORREOS . getValue ( ) + "` WHERE `habilitado` = 'true' AND `id_origen` = " + origen . getId ( ) ; } else if ( origen == null && grupo != null ) { query_contador = "SELECT COUNT(`correo`) FROM `" + NombreTablas . CORREOS . getValue ( ) + "` WHERE `habilitado` = 'true' AND `id_grupo` = " + grupo . getId ( ) ; query = "SELECT `correo` FROM `" + NombreTablas . CORREOS . getValue ( ) + "` WHERE `habilitado` = 'true' AND `id_grupo` = " + grupo . getId ( ) ; } respuesta = this . conexion . executeQuery ( query_contador ) ; respuesta . next ( ) ; total_correos = respuesta . getInt ( 1 ) ; respuesta = this . conexion . executeQuery ( query ) ; while ( respuesta . next ( ) ) { cont_escritos ++ ; linea = respuesta . getNString ( "correo" ) ; escribir_archivo . write ( linea ) ; if ( cont_escritos < total_correos ) { escribir_archivo . write ( "\r\n" ) ; } int porcentaje = ( cont_escritos * 100 ) / total_correos ; vistaLoading . lblInfo . setText ( "Exportando " + cont_escritos + " de " + total_correos ) ; vistaLoading . pbProgreso . setValue ( porcentaje ) ; vistaLoading . lblCompletado . setText ( porcentaje + "% completado..." ) ; } escribir_archivo . close ( ) ; band = true ; } vistaLoading . dispose ( ) ; if ( band == true ) { JOptionPane . showMessageDialog ( vistaLoading , "Exportaci\u00F3n finalizada  nuevo documento : \r\n" + ruta_escritorio + NombreArchivo , "Fin del proceso" , JOptionPane . INFORMATION_MESSAGE ) ; } } catch ( HeadlessException | IOException | SQLException e ) { JOptionPane . showMessageDialog ( null , "ERROR: " + e + "." , "Error" , JOptionPane . ERROR_MESSAGE ) ; } }
te	1	private void visitEdge ( Edge e ) { System . out . println ( "Visiting edge " + e ) ; }
te	1	@ Override public void paintComponents ( Graphics g ) { g . setClip ( m_areaFill ) ; super . paintComponents ( g ) ; paintBorder ( g ) ; }
te	5X	private void startClientMonitor ( ) { while ( noStopRequested ) { try { if ( this . timeOut > 0 ) { Iterator < Object > it = clients . keySet ( ) . iterator ( ) ; while ( it . hasNext ( ) ) { Object key = it . next ( ) ; Client client = clients . get ( key ) ; if ( ! client . isReadDataFlag ( ) ) { client . close ( ) ; clients . remove ( key ) ; } else { client . setReadDataFlag ( false ) ; } } this . clientMonitor . sleep ( this . timeOut * 60 * 1000 ) ; } } catch ( Exception e ) { e . printStackTrace ( ) ; } } }
te	3	private List < Word > getCandidates ( Word word , Map < Character , Character > l2lEncrypt ) { List < Word > candidates = new LinkedList < Word > ( ) ; Map < Integer , List < Word >> wordsMap = dict . get ( word . getLength ( ) ) ; if ( wordsMap == null ) { return candidates ; } List < Word > words = wordsMap . get ( word . getNbrSimilarLetters ( ) ) ; if ( words == null ) { return candidates ; } for ( Word w : words ) { if ( w . equals ( word , l2lEncrypt ) ) { candidates . add ( w ) ; } } return candidates ; }
te	5X	public static WeightedGraph readGraph ( InputStream is ) { int V = 0 ; Scanner fileScanner = new Scanner ( is ) ; if ( fileScanner . hasNextInt ( ) ) { V = fileScanner . nextInt ( ) ; System . err . println ( "V " + V ) ; } int E = 0 ; if ( fileScanner . hasNextInt ( ) ) { E = fileScanner . nextInt ( ) ; System . err . println ( "E " + E ) ; } WeightedGraph result = new WeightedGraph ( V , E ) ; while ( fileScanner . hasNextLine ( ) ) { String str = fileScanner . nextLine ( ) ; Scanner lineScanner = new Scanner ( str ) ; if ( lineScanner . hasNextInt ( ) ) { int v1 = lineScanner . nextInt ( ) ; if ( lineScanner . hasNextInt ( ) ) { int v2 = lineScanner . nextInt ( ) ; if ( lineScanner . hasNextInt ( ) ) { int weight = lineScanner . nextInt ( ) ; result . addEdge ( new Edge ( v1 , v2 , weight ) ) ; } } } lineScanner . close ( ) ; } fileScanner . close ( ) ; return result ; }
te	3	public void save ( String filename ) { PrintWriter pw = null ; try { pw = new PrintWriter ( new BufferedWriter ( new FileWriter ( filename ) ) ) ; pw . println ( "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" ) ; pw . println ( "<dmc prob=\"" + totalProb + "\">" ) ; for ( State st : this . estats ) { st . writeMarkov ( pw ) ; } pw . println ( "</dmc>" ) ; } catch ( IOException ex ) { System . err . println ( "Error saving DMC" ) ; } finally { pw . close ( ) ; } }
te	5X	public int longestValidParentheses ( String s ) { Stack < Character > sc = new Stack < Character > ( ) ; Stack < Integer > si = new Stack < Integer > ( ) ; int i = 0 , max = 0 ; for ( i = 0 ; i < s . length ( ) ; i ++ ) { char c = s . charAt ( i ) ; if ( si . isEmpty ( ) || c == ( ) { si . push ( i ) ; sc . push ( c ) ; } else { if ( sc . peek ( ) == ( ) { sc . pop ( ) ; si . pop ( ) ; if ( si . isEmpty ( ) ) { if ( max < i + 1 ) { max = i + 1 ; } } else { if ( max < i - si . peek ( ) ) { max = i - si . peek ( ) ; } } } } } return max ; }
te	3	public void updateScoreWithEmptyProbList ( long submissionId , long questId ) { PreparedStatement statement = null ; Connection connection = null ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Updating the score of an user in a questionnaire: " + questId ) ; } try { if ( logger . isDebugEnabled ( ) ) { logger . debug ( UPDATE_QUEST_SCORE_WITH_EMPTY_PROBLEM_LIST ) ; } connection = Connector . getConnection ( ) ; statement = connection . prepareStatement ( UPDATE_QUEST_SCORE_WITH_EMPTY_PROBLEM_LIST ) ; statement . setLong ( 1 , submissionId ) ; statement . setLong ( 2 , questId ) ; DeadLockHandler . executeUpdate ( statement ) ; } catch ( SQLException e ) { logger . error ( e . getMessage ( ) , e ) ; } finally { ResourcesUtil . release ( null , statement , connection ) ; } }
te	3	public void Run ( String product ) { int i = bidTs . size ( ) - 1 ; if ( i < 400 ) { return ; } MarketData currBar = this . bidTs . get ( i ) ; MarketData prevBar = this . bidTs . get ( i - 1 ) ; if ( ! order . HasPosition ( product ) ) { state = 0 ; } double currBody = currBar . getClose ( ) - currBar . getOpen ( ) ; double prevBody = prevBar . getClose ( ) - prevBar . getOpen ( ) ; double point = CurrencyTable . getPoint ( product ) ; if ( state == 0 ) { boolean cond1 = prevBody > 0 && currBody < 0 ; boolean cond2 = currBar . getOpen ( ) >= prevBar . getClose ( ) ; boolean cond3 = currBar . getClose ( ) <= prevBar . getOpen ( ) ; boolean cond4 = currBody <= - 3 ; if ( cond1 && cond2 && cond3 && cond4 ) { String entryTime = bidTs . get ( i ) . getStart ( ) ; this . entryPrice = bidTs . get ( i ) . getClose ( ) ; order . MarketSell ( product , entryTime , entryPrice , 2 ) ; this . stopPrice = prevBar . getClose ( ) + 100 * point ; this . r = this . stopPrice - this . entryPrice ; this . takeProfit = this . entryPrice - r ; order . StopBuy ( product , entryTime , this . stopPrice , 2 ) ; state = 1 ; } } else if ( state == 1 ) { if ( this . askTs . get ( i ) . getClose ( ) < this . takeProfit ) { order . MarketBuy ( product , currBar . getStart ( ) , this . takeProfit , 1 ) ; order . CancelAllPendingOrders ( product ) ; this . stopPrice = this . stopPrice - this . r ; this . takeProfit = this . takeProfit - this . r ; order . StopBuy ( product , currBar . getStart ( ) , this . stopPrice , 1 ) ; state = 2 ; } } else if ( state == 2 ) { if ( this . askTs . get ( i ) . getClose ( ) < this . takeProfit ) { this . stopPrice = this . stopPrice - this . r ; this . takeProfit = this . takeProfit - this . r ; order . CancelAllPendingOrders ( product ) ; order . StopBuy ( product , currBar . getStart ( ) , this . stopPrice , 1 ) ; } } }
te	1	public String getImage0 ( ) { return image0 ; }
te	1	@ SuppressWarnings ( "unused" ) private static Polygon getTest3 ( ) { Polygon p = new Polygon ( ) ; p . addPoint ( 0 , new Point ( 10 , 10 ) ) ; p . addPoint ( 0 , new Point ( 15 , 15 ) ) ; p . addPoint ( 0 , new Point ( 20 , 10 ) ) ; p . addPoint ( 0 , new Point ( 25 , 15 ) ) ; p . addPoint ( 0 , new Point ( 30 , 10 ) ) ; p . addPoint ( 0 , new Point ( 15 , 40 ) ) ; return p ; }
te	4	public void initializeGrid ( int [ ] [ ] exportedGrid ) { int rows = b . numRows ; int columns = b . numColumns ; for ( int y = 0 ; y < rows ; y ++ ) { for ( int x = 0 ; x < columns ; x ++ ) { int state = exportedGrid [ y ] [ x ] ; b . setGameGridCircle ( x , y , state ) ; if ( state != 0 ) { b . setDrawCounter ( b . getDrawCounter ( ) + 1 ) ; } } } }
te	2	public int priseTerritoire ( Territoire t , int nbUnite ) { if ( this . nbUniteBonus >= nbUnite - 1 ) { this . nbUniteBonus -= nbUnite - 1 ; nbUnite = 1 ; } else { nbUnite -= this . nbUniteBonus ; this . nbUniteBonus = 0 ; } this . nbUniteEnMain -= nbUnite ; t . setNbUnite ( nbUnite ) ; t . setOccupant ( this ) ; this . territoiresOccupes . add ( t ) ; this . actionPriseTerritoire ( t ) ; if ( hasPower ( ) ) { this . pouvoir . actionPriseTerritoire ( t ) ; } return nbUnite ; }
te	5X	@ Override public void keyPressed ( KeyEvent k ) { if ( k . getKeyCode ( ) == k . VK_ENTER ) { try { model . setY ( double . parseDouble ( yLocField . getText ( ) ) ) ; if ( model instanceof EditorGravitable ) { if ( ( ( EditorGravitable ) model ) . model instanceof PathGravitable ) { ( ( PathGravitable ) ( ( EditorGravitable ) model ) . model ) . start . y = ( int ) double . parseDouble ( yLocField . getText ( ) ) ; } } } catch ( Exception e ) { yLocField . setText ( "" + model . getY ( ) ) ; } EditorWindow . pane . drawUpdate ( ) ; } }
te	5X	public LepraUser parseContent ( String content ) throws LepraException { if ( StringUtils . isBlank ( content ) || "null" . equalsIgnoreCase ( content . trim ( ) ) ) { throw new LepraLoginException ( ) ; } JSONObject obj = new JSONObject ( content ) ; String status = obj . getString ( "status" ) ; if ( status == null || ! "OK" . equalsIgnoreCase ( status ) ) { JSONArray errors = obj . optJSONArray ( "errors" ) ; if ( errors != null && errors . length ( ) > 0 ) { for ( int i = 0 ; i < errors . length ( ) ; i ++ ) { JSONObject error = errors . getJSONObject ( i ) ; if ( error != null && StringUtils . equalsIgnoreCase ( error . getString ( "code" ) , "invalid_password" ) ) { throw new LepraInvalidLoginPasswordException ( ) ; } if ( error != null && StringUtils . equalsIgnoreCase ( error . getString ( "code" ) , "captcha_required" ) ) { throw new LepraCaptchaRequired ( ) ; } } } throw new LepraLoginException ( ) ; } JSONObject user = obj . getJSONObject ( "user" ) ; return new LepraUser ( user . getInt ( "id" ) , user . getString ( "login" ) , user . getString ( "gender" ) , user . getInt ( "karma" ) ) ; }
te	5X	private boolean testGateways ( Graph < Vertex , Edge > g ) { int openAND = 0 ; int closeAND = 0 ; for ( Vertex v : g . vertexSet ( ) ) { if ( v . isGateway ) { if ( v . getCorresponding ( ) == null && ! v . isXOR ) { if ( __DEBUG ) a . e . println ( "Didn't find a corresponding gate for " + v . toString ( ) ) ; return false ; } else { if ( ! v . isXOR ) if ( v . getCorresponding ( ) . getCorresponding ( ) . id . toString ( ) . compareTo ( v . id . toString ( ) ) != 0 ) { if ( __DEBUG ) a . e . println ( "Corresponding gate has been associated to something else " + v . toString ( ) + "; " + v . getCorresponding ( ) . toString ( ) ) ; if ( __DEBUG ) a . e . println ( "Corresponding gate has been associated to something else " + v . getCorresponding ( ) . toString ( ) + "; " + v . getCorresponding ( ) . getCorresponding ( ) . toString ( ) ) ; return false ; } } if ( g . inDegreeOf ( v ) > 1 ) closeAND ++ ; if ( g . outDegreeOf ( v ) > 1 ) openAND ++ ; } } if ( openAND == closeAND ) { return true ; } return false ; }
te	1	public ValueListener ( Event1 returnValue ) { this . returnValue = returnValue ; }
te	4	public SourceBlock [ ] partition ( ) { Partition KZ = new Partition ( Kt , Z ) ; int KL = KZ . get ( 1 ) ; int KS = KZ . get ( 2 ) ; int ZL = KZ . get ( 3 ) ; Partition TN = new Partition ( T / ALIGN_PARAM , N ) ; int TL = TN . get ( 1 ) ; int TS = TN . get ( 2 ) ; int NL = TN . get ( 3 ) ; SourceBlock [ ] object = new SourceBlock [ Z ] ; int i ; int index_master = 0 ; for ( i = 0 ; i < ZL ; i ++ ) { byte [ ] symbols = new byte [ KL * T ] ; int index_symbols = 0 ; int aux_master = index_master ; for ( int k = 0 ; k < KL ; k ++ ) { int j = 0 ; int index_data = aux_master ; for ( ; j < NL ; j ++ , index_data += KL * TL * ALIGN_PARAM , index_symbols += TL * ALIGN_PARAM ) { System . arraycopy ( data , index_data , symbols , index_symbols , TL * ALIGN_PARAM ) ; } for ( ; j < N ; j ++ , index_data += KL * TS * ALIGN_PARAM , index_symbols += TS * ALIGN_PARAM ) { System . arraycopy ( data , index_data , symbols , index_symbols , TS * ALIGN_PARAM ) ; } if ( NL > 0 ) { aux_master += TL * ALIGN_PARAM ; } else { aux_master += TS * ALIGN_PARAM ; } } object [ i ] = new SourceBlock ( i , symbols , T , KL ) ; index_master += ( KL * T ) ; } for ( ; i < Z ; i ++ ) { byte [ ] symbols = new byte [ KS * T ] ; int index_symbols = 0 ; int aux_master = index_master ; for ( int k = 0 ; k < KS ; k ++ ) { int j = 0 ; int index_data = aux_master ; for ( ; j < NL ; j ++ , index_data += KS * TL * ALIGN_PARAM , index_symbols += TL * ALIGN_PARAM ) { System . arraycopy ( data , index_data , symbols , index_symbols , TL * ALIGN_PARAM ) ; } for ( ; j < N ; j ++ , index_data += KS * TS * ALIGN_PARAM , index_symbols += TS * ALIGN_PARAM ) { System . arraycopy ( data , index_data , symbols , index_symbols , TS * ALIGN_PARAM ) ; } if ( NL > 0 ) { aux_master += TL * ALIGN_PARAM ; } else { aux_master += TS * ALIGN_PARAM ; } } object [ i ] = new SourceBlock ( i , symbols , T , KS ) ; index_master += ( KS * T ) ; } return object ; }
te	4	protected com . akamon . slots . model . BetClass ParseBetClass ( BetClass xmlBetClass ) throws SlotModelException { int baseBet = xmlBetClass . basebet ; String betMultList = xmlBetClass . betMultList ; if ( betMultList . equals ( "*" ) || betMultList . toUpperCase ( ) . equals ( "ALL" ) ) return new com . akamon . slots . model . BetClass ( baseBet ) ; else { HashSet < Integer > betMults = new HashSet < Integer > ( ) ; String [ ] splitBetMultList = betMultList . split ( " " ) ; for ( int i = 0 ; i < splitBetMultList . length ; i ++ ) { try { int betMult = Integer . parseInt ( splitBetMultList [ i ] ) ; if ( betMults . contains ( betMult ) ) throw new com . akamon . slots . model . SlotModelException ( "Bet class has duplicate bet multipliers: " + betMultList ) ; betMults . add ( betMult ) ; } catch ( Exception e ) { throw new com . akamon . slots . model . SlotModelException ( "Invalid bet class value: " + splitBetMultList [ i ] ) ; } } return new com . akamon . slots . model . BetClass ( baseBet , betMults ) ; } }
te	3	public Dienbienluong findById ( java . lang . Integer id ) { log . debug ( "getting Dienbienluong instance with id: " + id ) ; try { Dienbienluong instance = ( Dienbienluong ) sessionFactory . getCurrentSession ( ) . get ( "edu.hust.k54.persistence.Dienbienluong" , id ) ; if ( instance == null ) { log . debug ( "get successful  no instance found" ) ; } else { log . debug ( "get successful  instance found" ) ; } return instance ; } catch ( RuntimeException re ) { log . error ( "get failed" , re ) ; throw re ; } }
te	1	public MiniGameEventRelayer ( MiniGame initGame ) { game = initGame ; }
te	1	public static void sort ( Comparable [ ] array ) { }
te	5X	protected void notifyReceivedAck ( MqttAck ack ) throws MqttException { final String methodName = "notifyReceivedAck" ; this . lastInboundActivity = System . currentTimeMillis ( ) ; log . fine ( className , methodName , "627" , new Object [ ] { new Integer ( ack . getMessageId ( ) ) , ack } ) ; MqttToken token = tokenStore . getToken ( ack ) ; MqttException mex = null ; if ( ack instanceof MqttPubRec ) { MqttPubRel rel = new MqttPubRel ( ( MqttPubRec ) ack ) ; this . send ( rel , token ) ; } else if ( ack instanceof MqttPubAck || ack instanceof MqttPubComp ) { notifyResult ( ack , token , mex ) ; } else if ( ack instanceof MqttPingResp ) { pingOutstanding = false ; notifyResult ( ack , token , mex ) ; tokenStore . removeToken ( ack ) ; } else if ( ack instanceof MqttConnack ) { int rc = ( ( MqttConnack ) ack ) . getReturnCode ( ) ; if ( rc == 0 ) { synchronized ( queueLock ) { if ( cleanSession ) { clearState ( ) ; tokenStore . saveToken ( token , ack ) ; } inFlightPubRels = 0 ; actualInFlight = 0 ; restoreInflightMessages ( ) ; connected ( ) ; } } else { mex = ExceptionHelper . createMqttException ( rc ) ; throw mex ; } clientComms . connectComplete ( ( MqttConnack ) ack , mex ) ; notifyResult ( ack , token , mex ) ; tokenStore . removeToken ( ack ) ; synchronized ( queueLock ) { queueLock . notifyAll ( ) ; } } else { notifyResult ( ack , token , mex ) ; releaseMessageId ( ack . getMessageId ( ) ) ; tokenStore . removeToken ( ack ) ; } checkQuiesceLock ( ) ; }
te	1	@ Override public void paint ( Graphics g ) { Graphics2D canvas = ( Graphics2D ) g ; clearCanvas ( canvas ) ; drawRectangle ( canvas ) ; }
te	2	public void run ( ) { if ( program != null ) { program . execute ( this ) ; } else { defaultProgram ( ) ; } }
te	5X	public Text parse ( String pathToFile ) { Text text = null ; try { FileInputStream fstream = new FileInputStream ( pathToFile ) ; BufferedReader br = new BufferedReader ( new InputStreamReader ( fstream ) ) ; ResourceBundle bundle ; bundle = ResourceBundle . getBundle ( ApplicationValue . BUNDLE_LOCATION ) ; String textLine ; text = new Text ( ) ; while ( ( textLine = br . readLine ( ) ) != null ) { if ( ( textLine . matches ( bundle . getString ( ApplicationValue . HEADER ) ) || ( textLine . trim ( ) . matches ( bundle . getString ( ApplicationValue . OUTPUT ) ) ) ) ) { text . add ( splitSentenceByWordsAndPunctuation ( textLine ) ) ; } else { if ( isCode ( textLine ) ) { text . add ( new Listing ( textLine ) ) ; } else { Pattern sentencePattern = Pattern . compile ( bundle . getString ( ApplicationValue . SENTENCE ) ) ; Matcher sentenceMatcher = sentencePattern . matcher ( textLine ) ; while ( sentenceMatcher . find ( ) ) { String sentenceString = sentenceMatcher . group ( ) ; text . add ( splitSentenceByWordsAndPunctuation ( sentenceString ) ) ; } } } } } catch ( IOException e ) { log . error ( e ) ; } return text ; }
te	3	@ SuppressWarnings ( "unchecked" ) private void initComponents ( ) { drawPanel = new javax . swing . JPanel ( ) ; treePanel = new javax . swing . JPanel ( ) ; jScrollPane1 = new javax . swing . JScrollPane ( ) ; optionsTree = new javax . swing . JTree ( ) ; infoLabel = new javax . swing . JLabel ( ) ; jMenuBar1 = new javax . swing . JMenuBar ( ) ; jMenu1 = new javax . swing . JMenu ( ) ; jMenuItem1 = new javax . swing . JMenuItem ( ) ; jMenuItem2 = new javax . swing . JMenuItem ( ) ; jMenu2 = new javax . swing . JMenu ( ) ; setDefaultCloseOperation ( javax . swing . WindowConstants . EXIT_ON_CLOSE ) ; drawPanel . setLayout ( new java . awt . BorderLayout ( ) ) ; javax . swing . tree . DefaultMutableTreeNode treeNode1 = new javax . swing . tree . DefaultMutableTreeNode ( "Options" ) ; javax . swing . tree . DefaultMutableTreeNode treeNode2 = new javax . swing . tree . DefaultMutableTreeNode ( "Pre-Processor" ) ; javax . swing . tree . DefaultMutableTreeNode treeNode3 = new javax . swing . tree . DefaultMutableTreeNode ( "Element" ) ; javax . swing . tree . DefaultMutableTreeNode treeNode4 = new javax . swing . tree . DefaultMutableTreeNode ( "Geometry" ) ; treeNode3 . add ( treeNode4 ) ; treeNode4 = new javax . swing . tree . DefaultMutableTreeNode ( "Material" ) ; treeNode3 . add ( treeNode4 ) ; treeNode2 . add ( treeNode3 ) ; treeNode1 . add ( treeNode2 ) ; treeNode2 = new javax . swing . tree . DefaultMutableTreeNode ( "Tube Configuration" ) ; treeNode3 = new javax . swing . tree . DefaultMutableTreeNode ( "Geometry" ) ; treeNode4 = new javax . swing . tree . DefaultMutableTreeNode ( "Library" ) ; javax . swing . tree . DefaultMutableTreeNode treeNode5 = new javax . swing . tree . DefaultMutableTreeNode ( "U bend" ) ; treeNode4 . add ( treeNode5 ) ; treeNode5 = new javax . swing . tree . DefaultMutableTreeNode ( "Straight" ) ; treeNode4 . add ( treeNode5 ) ; treeNode3 . add ( treeNode4 ) ; treeNode4 = new javax . swing . tree . DefaultMutableTreeNode ( "Free" ) ; treeNode5 = new javax . swing . tree . DefaultMutableTreeNode ( "Node" ) ; treeNode4 . add ( treeNode5 ) ; treeNode5 = new javax . swing . tree . DefaultMutableTreeNode ( "Element" ) ; treeNode4 . add ( treeNode5 ) ; treeNode3 . add ( treeNode4 ) ; treeNode2 . add ( treeNode3 ) ; treeNode3 = new javax . swing . tree . DefaultMutableTreeNode ( "Support" ) ; treeNode4 = new javax . swing . tree . DefaultMutableTreeNode ( "Loose Support" ) ; treeNode3 . add ( treeNode4 ) ; treeNode4 = new javax . swing . tree . DefaultMutableTreeNode ( "Support Parameters" ) ; treeNode3 . add ( treeNode4 ) ; treeNode2 . add ( treeNode3 ) ; treeNode3 = new javax . swing . tree . DefaultMutableTreeNode ( "Mesh" ) ; treeNode2 . add ( treeNode3 ) ; treeNode1 . add ( treeNode2 ) ; treeNode2 = new javax . swing . tree . DefaultMutableTreeNode ( "Solution" ) ; treeNode3 = new javax . swing . tree . DefaultMutableTreeNode ( "Apply" ) ; treeNode4 = new javax . swing . tree . DefaultMutableTreeNode ( "Constraint" ) ; treeNode3 . add ( treeNode4 ) ; treeNode4 = new javax . swing . tree . DefaultMutableTreeNode ( "Force" ) ; treeNode3 . add ( treeNode4 ) ; treeNode4 = new javax . swing . tree . DefaultMutableTreeNode ( "Pressure" ) ; treeNode3 . add ( treeNode4 ) ; treeNode4 = new javax . swing . tree . DefaultMutableTreeNode ( "Spring" ) ; treeNode3 . add ( treeNode4 ) ; treeNode2 . add ( treeNode3 ) ; treeNode3 = new javax . swing . tree . DefaultMutableTreeNode ( "Fluid Flow" ) ; treeNode4 = new javax . swing . tree . DefaultMutableTreeNode ( "Add Group" ) ; treeNode3 . add ( treeNode4 ) ; treeNode4 = new javax . swing . tree . DefaultMutableTreeNode ( "Geometry" ) ; treeNode3 . add ( treeNode4 ) ; treeNode4 = new javax . swing . tree . DefaultMutableTreeNode ( "Turbulence" ) ; treeNode3 . add ( treeNode4 ) ; treeNode4 = new javax . swing . tree . DefaultMutableTreeNode ( "FEI" ) ; treeNode3 . add ( treeNode4 ) ; treeNode2 . add ( treeNode3 ) ; treeNode3 = new javax . swing . tree . DefaultMutableTreeNode ( "Solution Typo" ) ; treeNode2 . add ( treeNode3 ) ; treeNode1 . add ( treeNode2 ) ; optionsTree . setModel ( new javax . swing . tree . DefaultTreeModel ( treeNode1 ) ) ; optionsTree . setFocusable ( false ) ; optionsTree . addMouseListener ( new java . awt . event . MouseAdapter ( ) { public void mouseClicked ( java . awt . event . MouseEvent evt ) { optionsTreeMouseClicked ( evt ) ; } } ) ; optionsTree . addTreeSelectionListener ( new javax . swing . event . TreeSelectionListener ( ) { public void valueChanged ( javax . swing . event . TreeSelectionEvent evt ) { optionsTreeValueChanged ( evt ) ; } } ) ; jScrollPane1 . setViewportView ( optionsTree ) ; infoLabel . setText ( " " ) ; javax . swing . GroupLayout treePanelLayout = new javax . swing . GroupLayout ( treePanel ) ; treePanel . setLayout ( treePanelLayout ) ; treePanelLayout . setHorizontalGroup ( treePanelLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( javax . swing . GroupLayout . Alignment . TRAILING , treePanelLayout . createSequentialGroup ( ) . addGap ( 0 , 0 , short . MAX_VALUE ) . addGroup ( treePanelLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING , false ) . addComponent ( jScrollPane1 ) . addComponent ( infoLabel , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) ) ) ) ; treePanelLayout . setVerticalGroup ( treePanelLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( treePanelLayout . createSequentialGroup ( ) . addComponent ( jScrollPane1 ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addComponent ( infoLabel ) ) ) ; jMenu1 . setText ( "File" ) ; jMenuItem1 . setText ( "File" ) ; jMenuItem1 . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { jMenuItem1ActionPerformed ( evt ) ; } } ) ; jMenu1 . add ( jMenuItem1 ) ; jMenuItem2 . setText ( "Run" ) ; jMenuItem2 . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { jMenuItem2ActionPerformed ( evt ) ; } } ) ; jMenu1 . add ( jMenuItem2 ) ; jMenuBar1 . add ( jMenu1 ) ; jMenu2 . setText ( "Edit" ) ; jMenuBar1 . add ( jMenu2 ) ; setJMenuBar ( jMenuBar1 ) ; javax . swing . GroupLayout layout = new javax . swing . GroupLayout ( getContentPane ( ) ) ; getContentPane ( ) . setLayout ( layout ) ; layout . setHorizontalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( layout . createSequentialGroup ( ) . addComponent ( treePanel , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) . addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED ) . addComponent ( drawPanel , javax . swing . GroupLayout . DEFAULT_SIZE , 584 , short . MAX_VALUE ) ) ) ; layout . setVerticalGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( drawPanel , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) . addComponent ( treePanel , javax . swing . GroupLayout . Alignment . TRAILING , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , short . MAX_VALUE ) ) ; pack ( ) ; }
te	2	private void jButton3ActionPerformed ( java . awt . event . ActionEvent evt ) { JFileChooser fc = new JFileChooser ( ) ; fc . setFileSelectionMode ( JFileChooser . DIRECTORIES_ONLY ) ; int returnVal = fc . showOpenDialog ( this ) ; if ( returnVal == JFileChooser . APPROVE_OPTION ) { this . localBackupTF . setText ( fc . getSelectedFile ( ) . getAbsolutePath ( ) ) ; } }
te	4	public static void main ( String [ ] args ) throws Exception { long start = System . currentTimeMillis ( ) ; Scanner in = new Scanner ( new File ( "d:\\ProgramDATA\\2013\\Fair and Square\\C-large-practice-1.in" ) ) ; System . setOut ( new PrintStream ( new File ( "d:\\ProgramDATA\\2013\\Fair and Square\\C-large-practice1.out" ) ) ) ; int NumCase = in . nextInt ( ) ; in . nextLine ( ) ; for ( int curCase = 1 ; curCase <= NumCase ; curCase ++ ) { long min , max ; min = in . nextLong ( ) ; max = in . nextLong ( ) ; int count = 0 ; long sqrt_min = ( long ) Math . sqrt ( min ) , sqrt_max = ( long ) Math . sqrt ( max ) ; if ( min > 1 && min < 4 ) sqrt_min += 1 ; for ( long i = sqrt_min ; i <= sqrt_max ; i ++ ) { if ( IsPalin ( i ) && IsPalin ( i * i ) ) { count ++ ; } } System . out . println ( " Case #" + curCase + ": " + count ) ; } long end = System . currentTimeMillis ( ) ; System . out . println ( "\u8FD0\u884C\u65F6\u95F4\uFF1A" + ( end - start ) + "ms" ) ; }
te	1	public void setPassword ( String password ) { this . password = password ; }
te	4	public void update ( final World w ) { for ( short x = 0 ; x < sideLength ; x ++ ) { for ( short y = 0 ; y < sideLength ; y ++ ) { short tileX = ( short ) ( x + ( coords . getX ( ) * sideLength ) ) ; short tileY = ( short ) ( y + ( coords . getY ( ) * sideLength ) ) ; final Tile t = getTile ( x , y ) ; if ( ( t == Tiles . air ) || ( t == null ) ) { new Packet03Tile ( t , tileX , tileY ) . writeDataToServer ( ) ; } if ( t . doesTick ( ) ) { t . update ( w , tileX , tileY ) ; } } } }
te	4	public static void main ( String [ ] args ) throws IOException , ClassNotFoundException , ParseException { Properties properties = new Properties ( ) ; properties . load ( Client . class . getClassLoader ( ) . getResourceAsStream ( "client.properties" ) ) ; Integer serverPort = Integer . valueOf ( properties . getProperty ( "client.server_port" , "1234" ) ) ; String serverAddress = properties . getProperty ( "client.server_address" , "localhost" ) ; ObjectOutputStream toServer = null ; ObjectInputStream fromServer = null ; Socket connectionSocket = null ; try { connectionSocket = new Socket ( serverAddress , serverPort ) ; Scanner scanner = new Scanner ( System . in ) ; toServer = new ObjectOutputStream ( connectionSocket . getOutputStream ( ) ) ; fromServer = new ObjectInputStream ( connectionSocket . getInputStream ( ) ) ; log . info ( "Connection created!" ) ; while ( ! start ( toServer , fromServer , scanner ) ) ; while ( homePage ( toServer , fromServer , scanner ) ) ; } catch ( IOException e ) { log . error ( "Can't connect to server." , e ) ; } catch ( NoSuchElementException e ) { log . error ( "User terminated session" , e ) ; } finally { if ( toServer != null ) { try { toServer . close ( ) ; } catch ( IOException e ) { log . error ( "To server stream closing error" , e ) ; } } if ( fromServer != null ) { try { fromServer . close ( ) ; } catch ( IOException e ) { log . error ( "From server stream closing error" , e ) ; } } if ( connectionSocket != null ) { try { connectionSocket . close ( ) ; } catch ( IOException e ) { log . error ( "Connection socket closing error" , e ) ; } } } }
te	2	public static String formatInt ( long number ) { String num = number + "" ; String out = "" ; String . = "." ; int cnt = 1 ; for ( int i = num . length ( ) - 1 ; i >= 0 ; i -- ) { out = num . charAt ( i ) + out ; if ( cnt % 3 == 0 && i > 0 ) out = . + out ; cnt ++ ; } return out ; }
te	3	public static String escape ( String string ) { StringBuffer sb = new StringBuffer ( ) ; for ( int i = 0 , length = string . length ( ) ; i < length ; i ++ ) { char c = string . charAt ( i ) ; switch ( c ) { case & : sb . append ( "&amp;" ) ; break ; case < : sb . append ( "&lt;" ) ; break ; case > : sb . append ( "&gt;" ) ; break ; case " : sb . append ( "&quot;" ) ; break ; case ' : sb . append ( "&apos;" ) ; break ; default : sb . append ( c ) ; } } return sb . toString ( ) ; }
te	2	private static void assertNotNull ( Object o ) { if ( o == null ) { throw new RuntimeException ( "expected no null value" ) ; } }
te	4	public void setCellScoresMatrix ( ) { int r , c , sc ; char cS1 , cS2 ; ScoredCellElement tmpCell ; for ( r = 0 ; r < m_s1_size ; ++ r ) { for ( c = 0 ; c < m_s1_size ; ++ c ) { cS1 = m_s1 . charAt ( c ) ; cS2 = m_s1 . charAt ( r ) ; tmpCell = ( ScoredCellElement ) m_dpTable . getCell ( c + 1 , r + 1 ) ; if ( r < c + 2 ) { tmpCell . setScoreVal ( m_scoreHash . getScore ( cS1 , cS2 ) ) ; } else { tmpCell . setColor ( Color . BLACK ) ; } } } }
te	4	@ Override public void dispell ( ) { for ( Modifier mod : mods ) { if ( mod . isDispellable ( ) ) { if ( mod . isTemporary ( ) ) { modTotal -= mod . getTotal ( ) ; } mods . remove ( mod ) ; } } }
te	5X	public ArrayList < ArrayList < State >> printTrace ( String string , ArrayList < Automaton > disTA ) { String actions [ ] = string . split ( " " ) ; ArrayList < ArrayList < State >> states ; for ( ArrayList < State > state : startStates ) { states = new ArrayList < ArrayList < State >> ( ) ; ArrayList < State > searchState = state ; states . add ( searchState ) ; for ( String action : actions ) { boolean matchFound = false ; if ( adjList != null ) { Set < EdgeOfZoneGraph > edges = adjList . get ( searchState ) ; if ( edges != null ) { Iterator < EdgeOfZoneGraph > it = edges . iterator ( ) ; while ( it . hasNext ( ) ) { EdgeOfZoneGraph edge = ( EdgeOfZoneGraph ) it . next ( ) ; if ( edge . getAction ( ) . equals ( action ) ) { states . add ( edge . getEndState ( ) ) ; searchState = edge . getEndState ( ) ; matchFound = true ; break ; } } } } if ( ! matchFound ) { return null ; } } if ( isFinal ( states . get ( states . size ( ) - 1 ) , disTA ) ) { return states ; } } return null ; }
te	2	public void skipPast ( String to ) { this . myIndex = this . mySource . indexOf ( to , this . myIndex ) ; if ( this . myIndex < 0 ) { this . myIndex = this . mySource . length ( ) ; } else { this . myIndex += to . length ( ) ; } }
te	3	public void update ( final Observable obj , final Object arg ) { final String line = ( String ) arg ; final int startOfTag = line . indexOf (   ) + 1 ; final int endOfTag = line . indexOf (   , startOfTag + 1 ) ; if ( startOfTag < 1 || endOfTag < 1 ) { return ; } final String strTimeTag = line . substring ( startOfTag , endOfTag ) ; try { final double timeLong = double . parseDouble ( strTimeTag ) ; final Date timeTag = new Date ( ( long ) timeLong . doubleValue ( ) * 1000 ) ; if ( timeTag . getTime ( ) > lastSeen . getTime ( ) ) { lastSeen = timeTag ; parent . setLastDateTag ( dataVisualizer . format ( lastSeen ) ) ; } } catch ( Exception ex ) { ex . printStackTrace ( ) ; } }
te	1	public boolean isBlsSpecialBonusAvailable ( ) { return blsSpecialBonusAvailable ; }
te	2	public void delete ( Tongiao persistentInstance ) { log . debug ( "deleting Tongiao instance" ) ; try { sessionFactory . getCurrentSession ( ) . delete ( persistentInstance ) ; log . debug ( "delete successful" ) ; } catch ( RuntimeException re ) { log . error ( "delete failed" , re ) ; throw re ; } }
